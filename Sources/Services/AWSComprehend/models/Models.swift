// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension ComprehendClientTypes {
    public enum AugmentedManifestsDocumentTypeFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case plainTextDocument
        case semiStructuredDocument
        case sdkUnknown(Swift.String)

        public static var allCases: [AugmentedManifestsDocumentTypeFormat] {
            return [
                .plainTextDocument,
                .semiStructuredDocument,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .plainTextDocument: return "PLAIN_TEXT_DOCUMENT"
            case .semiStructuredDocument: return "SEMI_STRUCTURED_DOCUMENT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AugmentedManifestsDocumentTypeFormat(rawValue: rawValue) ?? AugmentedManifestsDocumentTypeFormat.sdkUnknown(rawValue)
        }
    }
}

extension ComprehendClientTypes.AugmentedManifestsListItem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case annotationDataS3Uri = "AnnotationDataS3Uri"
        case attributeNames = "AttributeNames"
        case documentType = "DocumentType"
        case s3Uri = "S3Uri"
        case sourceDocumentsS3Uri = "SourceDocumentsS3Uri"
        case split = "Split"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let annotationDataS3Uri = self.annotationDataS3Uri {
            try encodeContainer.encode(annotationDataS3Uri, forKey: .annotationDataS3Uri)
        }
        if let attributeNames = attributeNames {
            var attributeNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributeNames)
            for attributenameslistitem0 in attributeNames {
                try attributeNamesContainer.encode(attributenameslistitem0)
            }
        }
        if let documentType = self.documentType {
            try encodeContainer.encode(documentType.rawValue, forKey: .documentType)
        }
        if let s3Uri = self.s3Uri {
            try encodeContainer.encode(s3Uri, forKey: .s3Uri)
        }
        if let sourceDocumentsS3Uri = self.sourceDocumentsS3Uri {
            try encodeContainer.encode(sourceDocumentsS3Uri, forKey: .sourceDocumentsS3Uri)
        }
        if let split = self.split {
            try encodeContainer.encode(split.rawValue, forKey: .split)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Uri)
        s3Uri = s3UriDecoded
        let splitDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.Split.self, forKey: .split)
        split = splitDecoded
        let attributeNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .attributeNames)
        var attributeNamesDecoded0:[Swift.String]? = nil
        if let attributeNamesContainer = attributeNamesContainer {
            attributeNamesDecoded0 = [Swift.String]()
            for string0 in attributeNamesContainer {
                if let string0 = string0 {
                    attributeNamesDecoded0?.append(string0)
                }
            }
        }
        attributeNames = attributeNamesDecoded0
        let annotationDataS3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .annotationDataS3Uri)
        annotationDataS3Uri = annotationDataS3UriDecoded
        let sourceDocumentsS3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceDocumentsS3Uri)
        sourceDocumentsS3Uri = sourceDocumentsS3UriDecoded
        let documentTypeDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.AugmentedManifestsDocumentTypeFormat.self, forKey: .documentType)
        documentType = documentTypeDecoded
    }
}

extension ComprehendClientTypes {
    /// An augmented manifest file that provides training data for your custom model. An augmented manifest file is a labeled dataset that is produced by Amazon SageMaker Ground Truth.
    public struct AugmentedManifestsListItem: Swift.Equatable {
        /// The S3 prefix to the annotation files that are referred in the augmented manifest file.
        public var annotationDataS3Uri: Swift.String?
        /// The JSON attribute that contains the annotations for your training documents. The number of attribute names that you specify depends on whether your augmented manifest file is the output of a single labeling job or a chained labeling job. If your file is the output of a single labeling job, specify the LabelAttributeName key that was used when the job was created in Ground Truth. If your file is the output of a chained labeling job, specify the LabelAttributeName key for one or more jobs in the chain. Each LabelAttributeName key provides the annotations from an individual job.
        /// This member is required.
        public var attributeNames: [Swift.String]?
        /// The type of augmented manifest. PlainTextDocument or SemiStructuredDocument. If you don't specify, the default is PlainTextDocument.
        ///
        /// * PLAIN_TEXT_DOCUMENT A document type that represents any unicode text that is encoded in UTF-8.
        ///
        /// * SEMI_STRUCTURED_DOCUMENT A document type with positional and structural context, like a PDF. For training with Amazon Comprehend, only PDFs are supported. For inference, Amazon Comprehend support PDFs, DOCX and TXT.
        public var documentType: ComprehendClientTypes.AugmentedManifestsDocumentTypeFormat?
        /// The Amazon S3 location of the augmented manifest file.
        /// This member is required.
        public var s3Uri: Swift.String?
        /// The S3 prefix to the source files (PDFs) that are referred to in the augmented manifest file.
        public var sourceDocumentsS3Uri: Swift.String?
        /// The purpose of the data you've provided in the augmented manifest. You can either train or test this data. If you don't specify, the default is train. TRAIN - all of the documents in the manifest will be used for training. If no test documents are provided, Amazon Comprehend will automatically reserve a portion of the training documents for testing. TEST - all of the documents in the manifest will be used for testing.
        public var split: ComprehendClientTypes.Split?

        public init (
            annotationDataS3Uri: Swift.String? = nil,
            attributeNames: [Swift.String]? = nil,
            documentType: ComprehendClientTypes.AugmentedManifestsDocumentTypeFormat? = nil,
            s3Uri: Swift.String? = nil,
            sourceDocumentsS3Uri: Swift.String? = nil,
            split: ComprehendClientTypes.Split? = nil
        )
        {
            self.annotationDataS3Uri = annotationDataS3Uri
            self.attributeNames = attributeNames
            self.documentType = documentType
            self.s3Uri = s3Uri
            self.sourceDocumentsS3Uri = sourceDocumentsS3Uri
            self.split = split
        }
    }

}

extension BatchDetectDominantLanguageInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BatchDetectDominantLanguageInput(textList: \"CONTENT_REDACTED\")"}
}

extension BatchDetectDominantLanguageInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case textList = "TextList"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let textList = textList {
            var textListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .textList)
            for customerinputstring0 in textList {
                try textListContainer.encode(customerinputstring0)
            }
        }
    }
}

extension BatchDetectDominantLanguageInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct BatchDetectDominantLanguageInput: Swift.Equatable {
    /// A list containing the UTF-8 encoded text of the input documents. The list can contain a maximum of 25 documents. Each document should contain at least 20 characters. The maximum size of each document is 5 KB.
    /// This member is required.
    public var textList: [Swift.String]?

    public init (
        textList: [Swift.String]? = nil
    )
    {
        self.textList = textList
    }
}

struct BatchDetectDominantLanguageInputBody: Swift.Equatable {
    let textList: [Swift.String]?
}

extension BatchDetectDominantLanguageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case textList = "TextList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let textListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .textList)
        var textListDecoded0:[Swift.String]? = nil
        if let textListContainer = textListContainer {
            textListDecoded0 = [Swift.String]()
            for string0 in textListContainer {
                if let string0 = string0 {
                    textListDecoded0?.append(string0)
                }
            }
        }
        textList = textListDecoded0
    }
}

extension ComprehendClientTypes.BatchDetectDominantLanguageItemResult: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case index = "Index"
        case languages = "Languages"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let index = self.index {
            try encodeContainer.encode(index, forKey: .index)
        }
        if let languages = languages {
            var languagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .languages)
            for dominantlanguage0 in languages {
                try languagesContainer.encode(dominantlanguage0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .index)
        index = indexDecoded
        let languagesContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.DominantLanguage?].self, forKey: .languages)
        var languagesDecoded0:[ComprehendClientTypes.DominantLanguage]? = nil
        if let languagesContainer = languagesContainer {
            languagesDecoded0 = [ComprehendClientTypes.DominantLanguage]()
            for structure0 in languagesContainer {
                if let structure0 = structure0 {
                    languagesDecoded0?.append(structure0)
                }
            }
        }
        languages = languagesDecoded0
    }
}

extension ComprehendClientTypes {
    /// The result of calling the operation. The operation returns one object for each document that is successfully processed by the operation.
    public struct BatchDetectDominantLanguageItemResult: Swift.Equatable {
        /// The zero-based index of the document in the input list.
        public var index: Swift.Int?
        /// One or more [DominantLanguage] objects describing the dominant languages in the document.
        public var languages: [ComprehendClientTypes.DominantLanguage]?

        public init (
            index: Swift.Int? = nil,
            languages: [ComprehendClientTypes.DominantLanguage]? = nil
        )
        {
            self.index = index
            self.languages = languages
        }
    }

}

extension BatchDetectDominantLanguageOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchDetectDominantLanguageOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BatchSizeLimitExceededException" : self = .batchSizeLimitExceededException(try BatchSizeLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TextSizeLimitExceededException" : self = .textSizeLimitExceededException(try TextSizeLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum BatchDetectDominantLanguageOutputError: Swift.Error, Swift.Equatable {
    case batchSizeLimitExceededException(BatchSizeLimitExceededException)
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case textSizeLimitExceededException(TextSizeLimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchDetectDominantLanguageOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

extension BatchDetectDominantLanguageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BatchDetectDominantLanguageOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.errorList = output.errorList
            self.resultList = output.resultList
        } else {
            self.errorList = nil
            self.resultList = nil
        }
    }
}

public struct BatchDetectDominantLanguageOutputResponse: Swift.Equatable {
    /// A list containing one object for each document that contained an error. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If there are no errors in the batch, the ErrorList is empty.
    /// This member is required.
    public var errorList: [ComprehendClientTypes.BatchItemError]?
    /// A list of objects containing the results of the operation. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If all of the documents contain an error, the ResultList is empty.
    /// This member is required.
    public var resultList: [ComprehendClientTypes.BatchDetectDominantLanguageItemResult]?

    public init (
        errorList: [ComprehendClientTypes.BatchItemError]? = nil,
        resultList: [ComprehendClientTypes.BatchDetectDominantLanguageItemResult]? = nil
    )
    {
        self.errorList = errorList
        self.resultList = resultList
    }
}

struct BatchDetectDominantLanguageOutputResponseBody: Swift.Equatable {
    let resultList: [ComprehendClientTypes.BatchDetectDominantLanguageItemResult]?
    let errorList: [ComprehendClientTypes.BatchItemError]?
}

extension BatchDetectDominantLanguageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorList = "ErrorList"
        case resultList = "ResultList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resultListContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.BatchDetectDominantLanguageItemResult?].self, forKey: .resultList)
        var resultListDecoded0:[ComprehendClientTypes.BatchDetectDominantLanguageItemResult]? = nil
        if let resultListContainer = resultListContainer {
            resultListDecoded0 = [ComprehendClientTypes.BatchDetectDominantLanguageItemResult]()
            for structure0 in resultListContainer {
                if let structure0 = structure0 {
                    resultListDecoded0?.append(structure0)
                }
            }
        }
        resultList = resultListDecoded0
        let errorListContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.BatchItemError?].self, forKey: .errorList)
        var errorListDecoded0:[ComprehendClientTypes.BatchItemError]? = nil
        if let errorListContainer = errorListContainer {
            errorListDecoded0 = [ComprehendClientTypes.BatchItemError]()
            for structure0 in errorListContainer {
                if let structure0 = structure0 {
                    errorListDecoded0?.append(structure0)
                }
            }
        }
        errorList = errorListDecoded0
    }
}

extension BatchDetectEntitiesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BatchDetectEntitiesInput(languageCode: \(Swift.String(describing: languageCode)), textList: \"CONTENT_REDACTED\")"}
}

extension BatchDetectEntitiesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languageCode = "LanguageCode"
        case textList = "TextList"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let languageCode = self.languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let textList = textList {
            var textListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .textList)
            for customerinputstring0 in textList {
                try textListContainer.encode(customerinputstring0)
            }
        }
    }
}

extension BatchDetectEntitiesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct BatchDetectEntitiesInput: Swift.Equatable {
    /// The language of the input documents. You can specify any of the primary languages supported by Amazon Comprehend. All documents must be in the same language.
    /// This member is required.
    public var languageCode: ComprehendClientTypes.LanguageCode?
    /// A list containing the UTF-8 encoded text of the input documents. The list can contain a maximum of 25 documents. The maximum size of each document is 5 KB.
    /// This member is required.
    public var textList: [Swift.String]?

    public init (
        languageCode: ComprehendClientTypes.LanguageCode? = nil,
        textList: [Swift.String]? = nil
    )
    {
        self.languageCode = languageCode
        self.textList = textList
    }
}

struct BatchDetectEntitiesInputBody: Swift.Equatable {
    let textList: [Swift.String]?
    let languageCode: ComprehendClientTypes.LanguageCode?
}

extension BatchDetectEntitiesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languageCode = "LanguageCode"
        case textList = "TextList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let textListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .textList)
        var textListDecoded0:[Swift.String]? = nil
        if let textListContainer = textListContainer {
            textListDecoded0 = [Swift.String]()
            for string0 in textListContainer {
                if let string0 = string0 {
                    textListDecoded0?.append(string0)
                }
            }
        }
        textList = textListDecoded0
        let languageCodeDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
    }
}

extension ComprehendClientTypes.BatchDetectEntitiesItemResult: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entities = "Entities"
        case index = "Index"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let entities = entities {
            var entitiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .entities)
            for entity0 in entities {
                try entitiesContainer.encode(entity0)
            }
        }
        if let index = self.index {
            try encodeContainer.encode(index, forKey: .index)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .index)
        index = indexDecoded
        let entitiesContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.Entity?].self, forKey: .entities)
        var entitiesDecoded0:[ComprehendClientTypes.Entity]? = nil
        if let entitiesContainer = entitiesContainer {
            entitiesDecoded0 = [ComprehendClientTypes.Entity]()
            for structure0 in entitiesContainer {
                if let structure0 = structure0 {
                    entitiesDecoded0?.append(structure0)
                }
            }
        }
        entities = entitiesDecoded0
    }
}

extension ComprehendClientTypes {
    /// The result of calling the operation. The operation returns one object for each document that is successfully processed by the operation.
    public struct BatchDetectEntitiesItemResult: Swift.Equatable {
        /// One or more [Entity] objects, one for each entity detected in the document.
        public var entities: [ComprehendClientTypes.Entity]?
        /// The zero-based index of the document in the input list.
        public var index: Swift.Int?

        public init (
            entities: [ComprehendClientTypes.Entity]? = nil,
            index: Swift.Int? = nil
        )
        {
            self.entities = entities
            self.index = index
        }
    }

}

extension BatchDetectEntitiesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchDetectEntitiesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BatchSizeLimitExceededException" : self = .batchSizeLimitExceededException(try BatchSizeLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TextSizeLimitExceededException" : self = .textSizeLimitExceededException(try TextSizeLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedLanguageException" : self = .unsupportedLanguageException(try UnsupportedLanguageException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum BatchDetectEntitiesOutputError: Swift.Error, Swift.Equatable {
    case batchSizeLimitExceededException(BatchSizeLimitExceededException)
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case textSizeLimitExceededException(TextSizeLimitExceededException)
    case unsupportedLanguageException(UnsupportedLanguageException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchDetectEntitiesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

extension BatchDetectEntitiesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BatchDetectEntitiesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.errorList = output.errorList
            self.resultList = output.resultList
        } else {
            self.errorList = nil
            self.resultList = nil
        }
    }
}

public struct BatchDetectEntitiesOutputResponse: Swift.Equatable {
    /// A list containing one object for each document that contained an error. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If there are no errors in the batch, the ErrorList is empty.
    /// This member is required.
    public var errorList: [ComprehendClientTypes.BatchItemError]?
    /// A list of objects containing the results of the operation. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If all of the documents contain an error, the ResultList is empty.
    /// This member is required.
    public var resultList: [ComprehendClientTypes.BatchDetectEntitiesItemResult]?

    public init (
        errorList: [ComprehendClientTypes.BatchItemError]? = nil,
        resultList: [ComprehendClientTypes.BatchDetectEntitiesItemResult]? = nil
    )
    {
        self.errorList = errorList
        self.resultList = resultList
    }
}

struct BatchDetectEntitiesOutputResponseBody: Swift.Equatable {
    let resultList: [ComprehendClientTypes.BatchDetectEntitiesItemResult]?
    let errorList: [ComprehendClientTypes.BatchItemError]?
}

extension BatchDetectEntitiesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorList = "ErrorList"
        case resultList = "ResultList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resultListContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.BatchDetectEntitiesItemResult?].self, forKey: .resultList)
        var resultListDecoded0:[ComprehendClientTypes.BatchDetectEntitiesItemResult]? = nil
        if let resultListContainer = resultListContainer {
            resultListDecoded0 = [ComprehendClientTypes.BatchDetectEntitiesItemResult]()
            for structure0 in resultListContainer {
                if let structure0 = structure0 {
                    resultListDecoded0?.append(structure0)
                }
            }
        }
        resultList = resultListDecoded0
        let errorListContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.BatchItemError?].self, forKey: .errorList)
        var errorListDecoded0:[ComprehendClientTypes.BatchItemError]? = nil
        if let errorListContainer = errorListContainer {
            errorListDecoded0 = [ComprehendClientTypes.BatchItemError]()
            for structure0 in errorListContainer {
                if let structure0 = structure0 {
                    errorListDecoded0?.append(structure0)
                }
            }
        }
        errorList = errorListDecoded0
    }
}

extension BatchDetectKeyPhrasesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BatchDetectKeyPhrasesInput(languageCode: \(Swift.String(describing: languageCode)), textList: \"CONTENT_REDACTED\")"}
}

extension BatchDetectKeyPhrasesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languageCode = "LanguageCode"
        case textList = "TextList"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let languageCode = self.languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let textList = textList {
            var textListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .textList)
            for customerinputstring0 in textList {
                try textListContainer.encode(customerinputstring0)
            }
        }
    }
}

extension BatchDetectKeyPhrasesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct BatchDetectKeyPhrasesInput: Swift.Equatable {
    /// The language of the input documents. You can specify any of the primary languages supported by Amazon Comprehend. All documents must be in the same language.
    /// This member is required.
    public var languageCode: ComprehendClientTypes.LanguageCode?
    /// A list containing the UTF-8 encoded text of the input documents. The list can contain a maximum of 25 documents. The maximum size of each document is 5 KB.
    /// This member is required.
    public var textList: [Swift.String]?

    public init (
        languageCode: ComprehendClientTypes.LanguageCode? = nil,
        textList: [Swift.String]? = nil
    )
    {
        self.languageCode = languageCode
        self.textList = textList
    }
}

struct BatchDetectKeyPhrasesInputBody: Swift.Equatable {
    let textList: [Swift.String]?
    let languageCode: ComprehendClientTypes.LanguageCode?
}

extension BatchDetectKeyPhrasesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languageCode = "LanguageCode"
        case textList = "TextList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let textListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .textList)
        var textListDecoded0:[Swift.String]? = nil
        if let textListContainer = textListContainer {
            textListDecoded0 = [Swift.String]()
            for string0 in textListContainer {
                if let string0 = string0 {
                    textListDecoded0?.append(string0)
                }
            }
        }
        textList = textListDecoded0
        let languageCodeDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
    }
}

extension ComprehendClientTypes.BatchDetectKeyPhrasesItemResult: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case index = "Index"
        case keyPhrases = "KeyPhrases"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let index = self.index {
            try encodeContainer.encode(index, forKey: .index)
        }
        if let keyPhrases = keyPhrases {
            var keyPhrasesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keyPhrases)
            for keyphrase0 in keyPhrases {
                try keyPhrasesContainer.encode(keyphrase0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .index)
        index = indexDecoded
        let keyPhrasesContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.KeyPhrase?].self, forKey: .keyPhrases)
        var keyPhrasesDecoded0:[ComprehendClientTypes.KeyPhrase]? = nil
        if let keyPhrasesContainer = keyPhrasesContainer {
            keyPhrasesDecoded0 = [ComprehendClientTypes.KeyPhrase]()
            for structure0 in keyPhrasesContainer {
                if let structure0 = structure0 {
                    keyPhrasesDecoded0?.append(structure0)
                }
            }
        }
        keyPhrases = keyPhrasesDecoded0
    }
}

extension ComprehendClientTypes {
    /// The result of calling the operation. The operation returns one object for each document that is successfully processed by the operation.
    public struct BatchDetectKeyPhrasesItemResult: Swift.Equatable {
        /// The zero-based index of the document in the input list.
        public var index: Swift.Int?
        /// One or more [KeyPhrase] objects, one for each key phrase detected in the document.
        public var keyPhrases: [ComprehendClientTypes.KeyPhrase]?

        public init (
            index: Swift.Int? = nil,
            keyPhrases: [ComprehendClientTypes.KeyPhrase]? = nil
        )
        {
            self.index = index
            self.keyPhrases = keyPhrases
        }
    }

}

extension BatchDetectKeyPhrasesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchDetectKeyPhrasesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BatchSizeLimitExceededException" : self = .batchSizeLimitExceededException(try BatchSizeLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TextSizeLimitExceededException" : self = .textSizeLimitExceededException(try TextSizeLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedLanguageException" : self = .unsupportedLanguageException(try UnsupportedLanguageException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum BatchDetectKeyPhrasesOutputError: Swift.Error, Swift.Equatable {
    case batchSizeLimitExceededException(BatchSizeLimitExceededException)
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case textSizeLimitExceededException(TextSizeLimitExceededException)
    case unsupportedLanguageException(UnsupportedLanguageException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchDetectKeyPhrasesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

extension BatchDetectKeyPhrasesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BatchDetectKeyPhrasesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.errorList = output.errorList
            self.resultList = output.resultList
        } else {
            self.errorList = nil
            self.resultList = nil
        }
    }
}

public struct BatchDetectKeyPhrasesOutputResponse: Swift.Equatable {
    /// A list containing one object for each document that contained an error. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If there are no errors in the batch, the ErrorList is empty.
    /// This member is required.
    public var errorList: [ComprehendClientTypes.BatchItemError]?
    /// A list of objects containing the results of the operation. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If all of the documents contain an error, the ResultList is empty.
    /// This member is required.
    public var resultList: [ComprehendClientTypes.BatchDetectKeyPhrasesItemResult]?

    public init (
        errorList: [ComprehendClientTypes.BatchItemError]? = nil,
        resultList: [ComprehendClientTypes.BatchDetectKeyPhrasesItemResult]? = nil
    )
    {
        self.errorList = errorList
        self.resultList = resultList
    }
}

struct BatchDetectKeyPhrasesOutputResponseBody: Swift.Equatable {
    let resultList: [ComprehendClientTypes.BatchDetectKeyPhrasesItemResult]?
    let errorList: [ComprehendClientTypes.BatchItemError]?
}

extension BatchDetectKeyPhrasesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorList = "ErrorList"
        case resultList = "ResultList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resultListContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.BatchDetectKeyPhrasesItemResult?].self, forKey: .resultList)
        var resultListDecoded0:[ComprehendClientTypes.BatchDetectKeyPhrasesItemResult]? = nil
        if let resultListContainer = resultListContainer {
            resultListDecoded0 = [ComprehendClientTypes.BatchDetectKeyPhrasesItemResult]()
            for structure0 in resultListContainer {
                if let structure0 = structure0 {
                    resultListDecoded0?.append(structure0)
                }
            }
        }
        resultList = resultListDecoded0
        let errorListContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.BatchItemError?].self, forKey: .errorList)
        var errorListDecoded0:[ComprehendClientTypes.BatchItemError]? = nil
        if let errorListContainer = errorListContainer {
            errorListDecoded0 = [ComprehendClientTypes.BatchItemError]()
            for structure0 in errorListContainer {
                if let structure0 = structure0 {
                    errorListDecoded0?.append(structure0)
                }
            }
        }
        errorList = errorListDecoded0
    }
}

extension BatchDetectSentimentInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BatchDetectSentimentInput(languageCode: \(Swift.String(describing: languageCode)), textList: \"CONTENT_REDACTED\")"}
}

extension BatchDetectSentimentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languageCode = "LanguageCode"
        case textList = "TextList"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let languageCode = self.languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let textList = textList {
            var textListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .textList)
            for customerinputstring0 in textList {
                try textListContainer.encode(customerinputstring0)
            }
        }
    }
}

extension BatchDetectSentimentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct BatchDetectSentimentInput: Swift.Equatable {
    /// The language of the input documents. You can specify any of the primary languages supported by Amazon Comprehend. All documents must be in the same language.
    /// This member is required.
    public var languageCode: ComprehendClientTypes.LanguageCode?
    /// A list containing the UTF-8 encoded text of the input documents. The list can contain a maximum of 25 documents. The maximum size of each document is 5 KB. Amazon Comprehend performs real-time sentiment analysis on the first 500 characters of the input text and ignores any additional text in the input.
    /// This member is required.
    public var textList: [Swift.String]?

    public init (
        languageCode: ComprehendClientTypes.LanguageCode? = nil,
        textList: [Swift.String]? = nil
    )
    {
        self.languageCode = languageCode
        self.textList = textList
    }
}

struct BatchDetectSentimentInputBody: Swift.Equatable {
    let textList: [Swift.String]?
    let languageCode: ComprehendClientTypes.LanguageCode?
}

extension BatchDetectSentimentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languageCode = "LanguageCode"
        case textList = "TextList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let textListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .textList)
        var textListDecoded0:[Swift.String]? = nil
        if let textListContainer = textListContainer {
            textListDecoded0 = [Swift.String]()
            for string0 in textListContainer {
                if let string0 = string0 {
                    textListDecoded0?.append(string0)
                }
            }
        }
        textList = textListDecoded0
        let languageCodeDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
    }
}

extension ComprehendClientTypes.BatchDetectSentimentItemResult: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case index = "Index"
        case sentiment = "Sentiment"
        case sentimentScore = "SentimentScore"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let index = self.index {
            try encodeContainer.encode(index, forKey: .index)
        }
        if let sentiment = self.sentiment {
            try encodeContainer.encode(sentiment.rawValue, forKey: .sentiment)
        }
        if let sentimentScore = self.sentimentScore {
            try encodeContainer.encode(sentimentScore, forKey: .sentimentScore)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .index)
        index = indexDecoded
        let sentimentDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.SentimentType.self, forKey: .sentiment)
        sentiment = sentimentDecoded
        let sentimentScoreDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.SentimentScore.self, forKey: .sentimentScore)
        sentimentScore = sentimentScoreDecoded
    }
}

extension ComprehendClientTypes {
    /// The result of calling the operation. The operation returns one object for each document that is successfully processed by the operation.
    public struct BatchDetectSentimentItemResult: Swift.Equatable {
        /// The zero-based index of the document in the input list.
        public var index: Swift.Int?
        /// The sentiment detected in the document.
        public var sentiment: ComprehendClientTypes.SentimentType?
        /// The level of confidence that Amazon Comprehend has in the accuracy of its sentiment detection.
        public var sentimentScore: ComprehendClientTypes.SentimentScore?

        public init (
            index: Swift.Int? = nil,
            sentiment: ComprehendClientTypes.SentimentType? = nil,
            sentimentScore: ComprehendClientTypes.SentimentScore? = nil
        )
        {
            self.index = index
            self.sentiment = sentiment
            self.sentimentScore = sentimentScore
        }
    }

}

extension BatchDetectSentimentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchDetectSentimentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BatchSizeLimitExceededException" : self = .batchSizeLimitExceededException(try BatchSizeLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TextSizeLimitExceededException" : self = .textSizeLimitExceededException(try TextSizeLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedLanguageException" : self = .unsupportedLanguageException(try UnsupportedLanguageException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum BatchDetectSentimentOutputError: Swift.Error, Swift.Equatable {
    case batchSizeLimitExceededException(BatchSizeLimitExceededException)
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case textSizeLimitExceededException(TextSizeLimitExceededException)
    case unsupportedLanguageException(UnsupportedLanguageException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchDetectSentimentOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

extension BatchDetectSentimentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BatchDetectSentimentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.errorList = output.errorList
            self.resultList = output.resultList
        } else {
            self.errorList = nil
            self.resultList = nil
        }
    }
}

public struct BatchDetectSentimentOutputResponse: Swift.Equatable {
    /// A list containing one object for each document that contained an error. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If there are no errors in the batch, the ErrorList is empty.
    /// This member is required.
    public var errorList: [ComprehendClientTypes.BatchItemError]?
    /// A list of objects containing the results of the operation. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If all of the documents contain an error, the ResultList is empty.
    /// This member is required.
    public var resultList: [ComprehendClientTypes.BatchDetectSentimentItemResult]?

    public init (
        errorList: [ComprehendClientTypes.BatchItemError]? = nil,
        resultList: [ComprehendClientTypes.BatchDetectSentimentItemResult]? = nil
    )
    {
        self.errorList = errorList
        self.resultList = resultList
    }
}

struct BatchDetectSentimentOutputResponseBody: Swift.Equatable {
    let resultList: [ComprehendClientTypes.BatchDetectSentimentItemResult]?
    let errorList: [ComprehendClientTypes.BatchItemError]?
}

extension BatchDetectSentimentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorList = "ErrorList"
        case resultList = "ResultList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resultListContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.BatchDetectSentimentItemResult?].self, forKey: .resultList)
        var resultListDecoded0:[ComprehendClientTypes.BatchDetectSentimentItemResult]? = nil
        if let resultListContainer = resultListContainer {
            resultListDecoded0 = [ComprehendClientTypes.BatchDetectSentimentItemResult]()
            for structure0 in resultListContainer {
                if let structure0 = structure0 {
                    resultListDecoded0?.append(structure0)
                }
            }
        }
        resultList = resultListDecoded0
        let errorListContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.BatchItemError?].self, forKey: .errorList)
        var errorListDecoded0:[ComprehendClientTypes.BatchItemError]? = nil
        if let errorListContainer = errorListContainer {
            errorListDecoded0 = [ComprehendClientTypes.BatchItemError]()
            for structure0 in errorListContainer {
                if let structure0 = structure0 {
                    errorListDecoded0?.append(structure0)
                }
            }
        }
        errorList = errorListDecoded0
    }
}

extension BatchDetectSyntaxInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BatchDetectSyntaxInput(languageCode: \(Swift.String(describing: languageCode)), textList: \"CONTENT_REDACTED\")"}
}

extension BatchDetectSyntaxInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languageCode = "LanguageCode"
        case textList = "TextList"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let languageCode = self.languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let textList = textList {
            var textListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .textList)
            for customerinputstring0 in textList {
                try textListContainer.encode(customerinputstring0)
            }
        }
    }
}

extension BatchDetectSyntaxInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct BatchDetectSyntaxInput: Swift.Equatable {
    /// The language of the input documents. You can specify any of the following languages supported by Amazon Comprehend: German ("de"), English ("en"), Spanish ("es"), French ("fr"), Italian ("it"), or Portuguese ("pt"). All documents must be in the same language.
    /// This member is required.
    public var languageCode: ComprehendClientTypes.SyntaxLanguageCode?
    /// A list containing the UTF-8 encoded text of the input documents. The list can contain a maximum of 25 documents. The maximum size for each document is 5 KB.
    /// This member is required.
    public var textList: [Swift.String]?

    public init (
        languageCode: ComprehendClientTypes.SyntaxLanguageCode? = nil,
        textList: [Swift.String]? = nil
    )
    {
        self.languageCode = languageCode
        self.textList = textList
    }
}

struct BatchDetectSyntaxInputBody: Swift.Equatable {
    let textList: [Swift.String]?
    let languageCode: ComprehendClientTypes.SyntaxLanguageCode?
}

extension BatchDetectSyntaxInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languageCode = "LanguageCode"
        case textList = "TextList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let textListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .textList)
        var textListDecoded0:[Swift.String]? = nil
        if let textListContainer = textListContainer {
            textListDecoded0 = [Swift.String]()
            for string0 in textListContainer {
                if let string0 = string0 {
                    textListDecoded0?.append(string0)
                }
            }
        }
        textList = textListDecoded0
        let languageCodeDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.SyntaxLanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
    }
}

extension ComprehendClientTypes.BatchDetectSyntaxItemResult: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case index = "Index"
        case syntaxTokens = "SyntaxTokens"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let index = self.index {
            try encodeContainer.encode(index, forKey: .index)
        }
        if let syntaxTokens = syntaxTokens {
            var syntaxTokensContainer = encodeContainer.nestedUnkeyedContainer(forKey: .syntaxTokens)
            for syntaxtoken0 in syntaxTokens {
                try syntaxTokensContainer.encode(syntaxtoken0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .index)
        index = indexDecoded
        let syntaxTokensContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.SyntaxToken?].self, forKey: .syntaxTokens)
        var syntaxTokensDecoded0:[ComprehendClientTypes.SyntaxToken]? = nil
        if let syntaxTokensContainer = syntaxTokensContainer {
            syntaxTokensDecoded0 = [ComprehendClientTypes.SyntaxToken]()
            for structure0 in syntaxTokensContainer {
                if let structure0 = structure0 {
                    syntaxTokensDecoded0?.append(structure0)
                }
            }
        }
        syntaxTokens = syntaxTokensDecoded0
    }
}

extension ComprehendClientTypes {
    /// The result of calling the operation. The operation returns one object that is successfully processed by the operation.
    public struct BatchDetectSyntaxItemResult: Swift.Equatable {
        /// The zero-based index of the document in the input list.
        public var index: Swift.Int?
        /// The syntax tokens for the words in the document, one token for each word.
        public var syntaxTokens: [ComprehendClientTypes.SyntaxToken]?

        public init (
            index: Swift.Int? = nil,
            syntaxTokens: [ComprehendClientTypes.SyntaxToken]? = nil
        )
        {
            self.index = index
            self.syntaxTokens = syntaxTokens
        }
    }

}

extension BatchDetectSyntaxOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchDetectSyntaxOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BatchSizeLimitExceededException" : self = .batchSizeLimitExceededException(try BatchSizeLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TextSizeLimitExceededException" : self = .textSizeLimitExceededException(try TextSizeLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedLanguageException" : self = .unsupportedLanguageException(try UnsupportedLanguageException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum BatchDetectSyntaxOutputError: Swift.Error, Swift.Equatable {
    case batchSizeLimitExceededException(BatchSizeLimitExceededException)
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case textSizeLimitExceededException(TextSizeLimitExceededException)
    case unsupportedLanguageException(UnsupportedLanguageException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchDetectSyntaxOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

extension BatchDetectSyntaxOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BatchDetectSyntaxOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.errorList = output.errorList
            self.resultList = output.resultList
        } else {
            self.errorList = nil
            self.resultList = nil
        }
    }
}

public struct BatchDetectSyntaxOutputResponse: Swift.Equatable {
    /// A list containing one object for each document that contained an error. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If there are no errors in the batch, the ErrorList is empty.
    /// This member is required.
    public var errorList: [ComprehendClientTypes.BatchItemError]?
    /// A list of objects containing the results of the operation. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If all of the documents contain an error, the ResultList is empty.
    /// This member is required.
    public var resultList: [ComprehendClientTypes.BatchDetectSyntaxItemResult]?

    public init (
        errorList: [ComprehendClientTypes.BatchItemError]? = nil,
        resultList: [ComprehendClientTypes.BatchDetectSyntaxItemResult]? = nil
    )
    {
        self.errorList = errorList
        self.resultList = resultList
    }
}

struct BatchDetectSyntaxOutputResponseBody: Swift.Equatable {
    let resultList: [ComprehendClientTypes.BatchDetectSyntaxItemResult]?
    let errorList: [ComprehendClientTypes.BatchItemError]?
}

extension BatchDetectSyntaxOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorList = "ErrorList"
        case resultList = "ResultList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resultListContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.BatchDetectSyntaxItemResult?].self, forKey: .resultList)
        var resultListDecoded0:[ComprehendClientTypes.BatchDetectSyntaxItemResult]? = nil
        if let resultListContainer = resultListContainer {
            resultListDecoded0 = [ComprehendClientTypes.BatchDetectSyntaxItemResult]()
            for structure0 in resultListContainer {
                if let structure0 = structure0 {
                    resultListDecoded0?.append(structure0)
                }
            }
        }
        resultList = resultListDecoded0
        let errorListContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.BatchItemError?].self, forKey: .errorList)
        var errorListDecoded0:[ComprehendClientTypes.BatchItemError]? = nil
        if let errorListContainer = errorListContainer {
            errorListDecoded0 = [ComprehendClientTypes.BatchItemError]()
            for structure0 in errorListContainer {
                if let structure0 = structure0 {
                    errorListDecoded0?.append(structure0)
                }
            }
        }
        errorList = errorListDecoded0
    }
}

extension BatchDetectTargetedSentimentInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BatchDetectTargetedSentimentInput(languageCode: \(Swift.String(describing: languageCode)), textList: \"CONTENT_REDACTED\")"}
}

extension BatchDetectTargetedSentimentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languageCode = "LanguageCode"
        case textList = "TextList"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let languageCode = self.languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let textList = textList {
            var textListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .textList)
            for customerinputstring0 in textList {
                try textListContainer.encode(customerinputstring0)
            }
        }
    }
}

extension BatchDetectTargetedSentimentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct BatchDetectTargetedSentimentInput: Swift.Equatable {
    /// The language of the input documents. Currently, English is the only supported language.
    /// This member is required.
    public var languageCode: ComprehendClientTypes.LanguageCode?
    /// A list containing the UTF-8 encoded text of the input documents. The list can contain a maximum of 25 documents. The maximum size of each document is 5 KB.
    /// This member is required.
    public var textList: [Swift.String]?

    public init (
        languageCode: ComprehendClientTypes.LanguageCode? = nil,
        textList: [Swift.String]? = nil
    )
    {
        self.languageCode = languageCode
        self.textList = textList
    }
}

struct BatchDetectTargetedSentimentInputBody: Swift.Equatable {
    let textList: [Swift.String]?
    let languageCode: ComprehendClientTypes.LanguageCode?
}

extension BatchDetectTargetedSentimentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languageCode = "LanguageCode"
        case textList = "TextList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let textListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .textList)
        var textListDecoded0:[Swift.String]? = nil
        if let textListContainer = textListContainer {
            textListDecoded0 = [Swift.String]()
            for string0 in textListContainer {
                if let string0 = string0 {
                    textListDecoded0?.append(string0)
                }
            }
        }
        textList = textListDecoded0
        let languageCodeDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
    }
}

extension ComprehendClientTypes.BatchDetectTargetedSentimentItemResult: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entities = "Entities"
        case index = "Index"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let entities = entities {
            var entitiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .entities)
            for targetedsentimententity0 in entities {
                try entitiesContainer.encode(targetedsentimententity0)
            }
        }
        if let index = self.index {
            try encodeContainer.encode(index, forKey: .index)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .index)
        index = indexDecoded
        let entitiesContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.TargetedSentimentEntity?].self, forKey: .entities)
        var entitiesDecoded0:[ComprehendClientTypes.TargetedSentimentEntity]? = nil
        if let entitiesContainer = entitiesContainer {
            entitiesDecoded0 = [ComprehendClientTypes.TargetedSentimentEntity]()
            for structure0 in entitiesContainer {
                if let structure0 = structure0 {
                    entitiesDecoded0?.append(structure0)
                }
            }
        }
        entities = entitiesDecoded0
    }
}

extension ComprehendClientTypes {
    /// Analysis results for one of the documents in the batch.
    public struct BatchDetectTargetedSentimentItemResult: Swift.Equatable {
        /// An array of targeted sentiment entities.
        public var entities: [ComprehendClientTypes.TargetedSentimentEntity]?
        /// The zero-based index of this result in the input list.
        public var index: Swift.Int?

        public init (
            entities: [ComprehendClientTypes.TargetedSentimentEntity]? = nil,
            index: Swift.Int? = nil
        )
        {
            self.entities = entities
            self.index = index
        }
    }

}

extension BatchDetectTargetedSentimentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchDetectTargetedSentimentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BatchSizeLimitExceededException" : self = .batchSizeLimitExceededException(try BatchSizeLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TextSizeLimitExceededException" : self = .textSizeLimitExceededException(try TextSizeLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedLanguageException" : self = .unsupportedLanguageException(try UnsupportedLanguageException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum BatchDetectTargetedSentimentOutputError: Swift.Error, Swift.Equatable {
    case batchSizeLimitExceededException(BatchSizeLimitExceededException)
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case textSizeLimitExceededException(TextSizeLimitExceededException)
    case unsupportedLanguageException(UnsupportedLanguageException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchDetectTargetedSentimentOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

extension BatchDetectTargetedSentimentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BatchDetectTargetedSentimentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.errorList = output.errorList
            self.resultList = output.resultList
        } else {
            self.errorList = nil
            self.resultList = nil
        }
    }
}

public struct BatchDetectTargetedSentimentOutputResponse: Swift.Equatable {
    /// List of errors that the operation can return.
    /// This member is required.
    public var errorList: [ComprehendClientTypes.BatchItemError]?
    /// A list of objects containing the results of the operation. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If all of the documents contain an error, the ResultList is empty.
    /// This member is required.
    public var resultList: [ComprehendClientTypes.BatchDetectTargetedSentimentItemResult]?

    public init (
        errorList: [ComprehendClientTypes.BatchItemError]? = nil,
        resultList: [ComprehendClientTypes.BatchDetectTargetedSentimentItemResult]? = nil
    )
    {
        self.errorList = errorList
        self.resultList = resultList
    }
}

struct BatchDetectTargetedSentimentOutputResponseBody: Swift.Equatable {
    let resultList: [ComprehendClientTypes.BatchDetectTargetedSentimentItemResult]?
    let errorList: [ComprehendClientTypes.BatchItemError]?
}

extension BatchDetectTargetedSentimentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorList = "ErrorList"
        case resultList = "ResultList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resultListContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.BatchDetectTargetedSentimentItemResult?].self, forKey: .resultList)
        var resultListDecoded0:[ComprehendClientTypes.BatchDetectTargetedSentimentItemResult]? = nil
        if let resultListContainer = resultListContainer {
            resultListDecoded0 = [ComprehendClientTypes.BatchDetectTargetedSentimentItemResult]()
            for structure0 in resultListContainer {
                if let structure0 = structure0 {
                    resultListDecoded0?.append(structure0)
                }
            }
        }
        resultList = resultListDecoded0
        let errorListContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.BatchItemError?].self, forKey: .errorList)
        var errorListDecoded0:[ComprehendClientTypes.BatchItemError]? = nil
        if let errorListContainer = errorListContainer {
            errorListDecoded0 = [ComprehendClientTypes.BatchItemError]()
            for structure0 in errorListContainer {
                if let structure0 = structure0 {
                    errorListDecoded0?.append(structure0)
                }
            }
        }
        errorList = errorListDecoded0
    }
}

extension ComprehendClientTypes.BatchItemError: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorCode = "ErrorCode"
        case errorMessage = "ErrorMessage"
        case index = "Index"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorCode = self.errorCode {
            try encodeContainer.encode(errorCode, forKey: .errorCode)
        }
        if let errorMessage = self.errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let index = self.index {
            try encodeContainer.encode(index, forKey: .index)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .index)
        index = indexDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}

extension ComprehendClientTypes {
    /// Describes an error that occurred while processing a document in a batch. The operation returns on BatchItemError object for each document that contained an error.
    public struct BatchItemError: Swift.Equatable {
        /// The numeric error code of the error.
        public var errorCode: Swift.String?
        /// A text description of the error.
        public var errorMessage: Swift.String?
        /// The zero-based index of the document in the input list.
        public var index: Swift.Int?

        public init (
            errorCode: Swift.String? = nil,
            errorMessage: Swift.String? = nil,
            index: Swift.Int? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.index = index
        }
    }

}

extension BatchSizeLimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BatchSizeLimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The number of documents in the request exceeds the limit of 25. Try your request again with fewer documents.
public struct BatchSizeLimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct BatchSizeLimitExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension BatchSizeLimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ComprehendClientTypes.Block: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blockType = "BlockType"
        case geometry = "Geometry"
        case id = "Id"
        case page = "Page"
        case relationships = "Relationships"
        case text = "Text"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let blockType = self.blockType {
            try encodeContainer.encode(blockType.rawValue, forKey: .blockType)
        }
        if let geometry = self.geometry {
            try encodeContainer.encode(geometry, forKey: .geometry)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let page = self.page {
            try encodeContainer.encode(page, forKey: .page)
        }
        if let relationships = relationships {
            var relationshipsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .relationships)
            for relationshipslistitem0 in relationships {
                try relationshipsContainer.encode(relationshipslistitem0)
            }
        }
        if let text = self.text {
            try encodeContainer.encode(text, forKey: .text)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let blockTypeDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.BlockType.self, forKey: .blockType)
        blockType = blockTypeDecoded
        let textDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .text)
        text = textDecoded
        let pageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .page)
        page = pageDecoded
        let geometryDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.Geometry.self, forKey: .geometry)
        geometry = geometryDecoded
        let relationshipsContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.RelationshipsListItem?].self, forKey: .relationships)
        var relationshipsDecoded0:[ComprehendClientTypes.RelationshipsListItem]? = nil
        if let relationshipsContainer = relationshipsContainer {
            relationshipsDecoded0 = [ComprehendClientTypes.RelationshipsListItem]()
            for structure0 in relationshipsContainer {
                if let structure0 = structure0 {
                    relationshipsDecoded0?.append(structure0)
                }
            }
        }
        relationships = relationshipsDecoded0
    }
}

extension ComprehendClientTypes {
    /// Information about each word or line of text in the input document. For additional information, see [Block](https://docs.aws.amazon.com/textract/latest/dg/API_Block.html) in the Amazon Textract API reference.
    public struct Block: Swift.Equatable {
        /// The block represents a line of text or one word of text.
        ///
        /// * WORD - A word that's detected on a document page. A word is one or more ISO basic Latin script characters that aren't separated by spaces.
        ///
        /// * LINE - A string of tab-delimited, contiguous words that are detected on a document page
        public var blockType: ComprehendClientTypes.BlockType?
        /// Co-ordinates of the rectangle or polygon that contains the text.
        public var geometry: ComprehendClientTypes.Geometry?
        /// Unique identifier for the block.
        public var id: Swift.String?
        /// Page number where the block appears.
        public var page: Swift.Int?
        /// A list of child blocks of the current block. For example, a LINE object has child blocks for each WORD block that's part of the line of text.
        public var relationships: [ComprehendClientTypes.RelationshipsListItem]?
        /// The word or line of text extracted from the block.
        public var text: Swift.String?

        public init (
            blockType: ComprehendClientTypes.BlockType? = nil,
            geometry: ComprehendClientTypes.Geometry? = nil,
            id: Swift.String? = nil,
            page: Swift.Int? = nil,
            relationships: [ComprehendClientTypes.RelationshipsListItem]? = nil,
            text: Swift.String? = nil
        )
        {
            self.blockType = blockType
            self.geometry = geometry
            self.id = id
            self.page = page
            self.relationships = relationships
            self.text = text
        }
    }

}

extension ComprehendClientTypes.BlockReference: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case beginOffset = "BeginOffset"
        case blockId = "BlockId"
        case childBlocks = "ChildBlocks"
        case endOffset = "EndOffset"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let beginOffset = self.beginOffset {
            try encodeContainer.encode(beginOffset, forKey: .beginOffset)
        }
        if let blockId = self.blockId {
            try encodeContainer.encode(blockId, forKey: .blockId)
        }
        if let childBlocks = childBlocks {
            var childBlocksContainer = encodeContainer.nestedUnkeyedContainer(forKey: .childBlocks)
            for childblock0 in childBlocks {
                try childBlocksContainer.encode(childblock0)
            }
        }
        if let endOffset = self.endOffset {
            try encodeContainer.encode(endOffset, forKey: .endOffset)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blockIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .blockId)
        blockId = blockIdDecoded
        let beginOffsetDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .beginOffset)
        beginOffset = beginOffsetDecoded
        let endOffsetDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .endOffset)
        endOffset = endOffsetDecoded
        let childBlocksContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.ChildBlock?].self, forKey: .childBlocks)
        var childBlocksDecoded0:[ComprehendClientTypes.ChildBlock]? = nil
        if let childBlocksContainer = childBlocksContainer {
            childBlocksDecoded0 = [ComprehendClientTypes.ChildBlock]()
            for structure0 in childBlocksContainer {
                if let structure0 = structure0 {
                    childBlocksDecoded0?.append(structure0)
                }
            }
        }
        childBlocks = childBlocksDecoded0
    }
}

extension ComprehendClientTypes {
    /// A reference to a block.
    public struct BlockReference: Swift.Equatable {
        /// Offset of the start of the block within its parent block.
        public var beginOffset: Swift.Int?
        /// Unique identifier for the block.
        public var blockId: Swift.String?
        /// List of child blocks within this block.
        public var childBlocks: [ComprehendClientTypes.ChildBlock]?
        /// Offset of the end of the block within its parent block.
        public var endOffset: Swift.Int?

        public init (
            beginOffset: Swift.Int? = nil,
            blockId: Swift.String? = nil,
            childBlocks: [ComprehendClientTypes.ChildBlock]? = nil,
            endOffset: Swift.Int? = nil
        )
        {
            self.beginOffset = beginOffset
            self.blockId = blockId
            self.childBlocks = childBlocks
            self.endOffset = endOffset
        }
    }

}

extension ComprehendClientTypes {
    public enum BlockType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case line
        case word
        case sdkUnknown(Swift.String)

        public static var allCases: [BlockType] {
            return [
                .line,
                .word,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .line: return "LINE"
            case .word: return "WORD"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BlockType(rawValue: rawValue) ?? BlockType.sdkUnknown(rawValue)
        }
    }
}

extension ComprehendClientTypes.BoundingBox: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case height = "Height"
        case `left` = "Left"
        case top = "Top"
        case width = "Width"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let height = self.height {
            try encodeContainer.encode(height, forKey: .height)
        }
        if let `left` = self.`left` {
            try encodeContainer.encode(`left`, forKey: .`left`)
        }
        if let top = self.top {
            try encodeContainer.encode(top, forKey: .top)
        }
        if let width = self.width {
            try encodeContainer.encode(width, forKey: .width)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let heightDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .height)
        height = heightDecoded
        let leftDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .left)
        `left` = leftDecoded
        let topDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .top)
        top = topDecoded
        let widthDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .width)
        width = widthDecoded
    }
}

extension ComprehendClientTypes {
    /// The bounding box around the detected page or around an element on a document page. The left (x-coordinate) and top (y-coordinate) are coordinates that represent the top and left sides of the bounding box. Note that the upper-left corner of the image is the origin (0,0). For additional information, see [BoundingBox](https://docs.aws.amazon.com/textract/latest/dg/API_BoundingBox.html) in the Amazon Textract API reference.
    public struct BoundingBox: Swift.Equatable {
        /// The height of the bounding box as a ratio of the overall document page height.
        public var height: Swift.Float?
        /// The left coordinate of the bounding box as a ratio of overall document page width.
        public var `left`: Swift.Float?
        /// The top coordinate of the bounding box as a ratio of overall document page height.
        public var top: Swift.Float?
        /// The width of the bounding box as a ratio of the overall document page width.
        public var width: Swift.Float?

        public init (
            height: Swift.Float? = nil,
            `left`: Swift.Float? = nil,
            top: Swift.Float? = nil,
            width: Swift.Float? = nil
        )
        {
            self.height = height
            self.`left` = `left`
            self.top = top
            self.width = width
        }
    }

}

extension ComprehendClientTypes.ChildBlock: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case beginOffset = "BeginOffset"
        case childBlockId = "ChildBlockId"
        case endOffset = "EndOffset"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let beginOffset = self.beginOffset {
            try encodeContainer.encode(beginOffset, forKey: .beginOffset)
        }
        if let childBlockId = self.childBlockId {
            try encodeContainer.encode(childBlockId, forKey: .childBlockId)
        }
        if let endOffset = self.endOffset {
            try encodeContainer.encode(endOffset, forKey: .endOffset)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let childBlockIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .childBlockId)
        childBlockId = childBlockIdDecoded
        let beginOffsetDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .beginOffset)
        beginOffset = beginOffsetDecoded
        let endOffsetDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .endOffset)
        endOffset = endOffsetDecoded
    }
}

extension ComprehendClientTypes {
    /// Nested block contained within a block.
    public struct ChildBlock: Swift.Equatable {
        /// Offset of the start of the child block within its parent block.
        public var beginOffset: Swift.Int?
        /// Unique identifier for the child block.
        public var childBlockId: Swift.String?
        /// Offset of the end of the child block within its parent block.
        public var endOffset: Swift.Int?

        public init (
            beginOffset: Swift.Int? = nil,
            childBlockId: Swift.String? = nil,
            endOffset: Swift.Int? = nil
        )
        {
            self.beginOffset = beginOffset
            self.childBlockId = childBlockId
            self.endOffset = endOffset
        }
    }

}

extension ComprehendClientTypes.ClassifierEvaluationMetrics: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accuracy = "Accuracy"
        case f1Score = "F1Score"
        case hammingLoss = "HammingLoss"
        case microF1Score = "MicroF1Score"
        case microPrecision = "MicroPrecision"
        case microRecall = "MicroRecall"
        case precision = "Precision"
        case recall = "Recall"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accuracy = self.accuracy {
            try encodeContainer.encode(accuracy, forKey: .accuracy)
        }
        if let f1Score = self.f1Score {
            try encodeContainer.encode(f1Score, forKey: .f1Score)
        }
        if let hammingLoss = self.hammingLoss {
            try encodeContainer.encode(hammingLoss, forKey: .hammingLoss)
        }
        if let microF1Score = self.microF1Score {
            try encodeContainer.encode(microF1Score, forKey: .microF1Score)
        }
        if let microPrecision = self.microPrecision {
            try encodeContainer.encode(microPrecision, forKey: .microPrecision)
        }
        if let microRecall = self.microRecall {
            try encodeContainer.encode(microRecall, forKey: .microRecall)
        }
        if let precision = self.precision {
            try encodeContainer.encode(precision, forKey: .precision)
        }
        if let recall = self.recall {
            try encodeContainer.encode(recall, forKey: .recall)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accuracyDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .accuracy)
        accuracy = accuracyDecoded
        let precisionDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .precision)
        precision = precisionDecoded
        let recallDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .recall)
        recall = recallDecoded
        let f1ScoreDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .f1Score)
        f1Score = f1ScoreDecoded
        let microPrecisionDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .microPrecision)
        microPrecision = microPrecisionDecoded
        let microRecallDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .microRecall)
        microRecall = microRecallDecoded
        let microF1ScoreDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .microF1Score)
        microF1Score = microF1ScoreDecoded
        let hammingLossDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .hammingLoss)
        hammingLoss = hammingLossDecoded
    }
}

extension ComprehendClientTypes {
    /// Describes the result metrics for the test data associated with an documentation classifier.
    public struct ClassifierEvaluationMetrics: Swift.Equatable {
        /// The fraction of the labels that were correct recognized. It is computed by dividing the number of labels in the test documents that were correctly recognized by the total number of labels in the test documents.
        public var accuracy: Swift.Double?
        /// A measure of how accurate the classifier results are for the test data. It is derived from the Precision and Recall values. The F1Score is the harmonic average of the two scores. The highest score is 1, and the worst score is 0.
        public var f1Score: Swift.Double?
        /// Indicates the fraction of labels that are incorrectly predicted. Also seen as the fraction of wrong labels compared to the total number of labels. Scores closer to zero are better.
        public var hammingLoss: Swift.Double?
        /// A measure of how accurate the classifier results are for the test data. It is a combination of the Micro Precision and Micro Recall values. The Micro F1Score is the harmonic mean of the two scores. The highest score is 1, and the worst score is 0.
        public var microF1Score: Swift.Double?
        /// A measure of the usefulness of the recognizer results in the test data. High precision means that the recognizer returned substantially more relevant results than irrelevant ones. Unlike the Precision metric which comes from averaging the precision of all available labels, this is based on the overall score of all precision scores added together.
        public var microPrecision: Swift.Double?
        /// A measure of how complete the classifier results are for the test data. High recall means that the classifier returned most of the relevant results. Specifically, this indicates how many of the correct categories in the text that the model can predict. It is a percentage of correct categories in the text that can found. Instead of averaging the recall scores of all labels (as with Recall), micro Recall is based on the overall score of all recall scores added together.
        public var microRecall: Swift.Double?
        /// A measure of the usefulness of the classifier results in the test data. High precision means that the classifier returned substantially more relevant results than irrelevant ones.
        public var precision: Swift.Double?
        /// A measure of how complete the classifier results are for the test data. High recall means that the classifier returned most of the relevant results.
        public var recall: Swift.Double?

        public init (
            accuracy: Swift.Double? = nil,
            f1Score: Swift.Double? = nil,
            hammingLoss: Swift.Double? = nil,
            microF1Score: Swift.Double? = nil,
            microPrecision: Swift.Double? = nil,
            microRecall: Swift.Double? = nil,
            precision: Swift.Double? = nil,
            recall: Swift.Double? = nil
        )
        {
            self.accuracy = accuracy
            self.f1Score = f1Score
            self.hammingLoss = hammingLoss
            self.microF1Score = microF1Score
            self.microPrecision = microPrecision
            self.microRecall = microRecall
            self.precision = precision
            self.recall = recall
        }
    }

}

extension ComprehendClientTypes.ClassifierMetadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case evaluationMetrics = "EvaluationMetrics"
        case numberOfLabels = "NumberOfLabels"
        case numberOfTestDocuments = "NumberOfTestDocuments"
        case numberOfTrainedDocuments = "NumberOfTrainedDocuments"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let evaluationMetrics = self.evaluationMetrics {
            try encodeContainer.encode(evaluationMetrics, forKey: .evaluationMetrics)
        }
        if let numberOfLabels = self.numberOfLabels {
            try encodeContainer.encode(numberOfLabels, forKey: .numberOfLabels)
        }
        if let numberOfTestDocuments = self.numberOfTestDocuments {
            try encodeContainer.encode(numberOfTestDocuments, forKey: .numberOfTestDocuments)
        }
        if let numberOfTrainedDocuments = self.numberOfTrainedDocuments {
            try encodeContainer.encode(numberOfTrainedDocuments, forKey: .numberOfTrainedDocuments)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let numberOfLabelsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfLabels)
        numberOfLabels = numberOfLabelsDecoded
        let numberOfTrainedDocumentsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfTrainedDocuments)
        numberOfTrainedDocuments = numberOfTrainedDocumentsDecoded
        let numberOfTestDocumentsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfTestDocuments)
        numberOfTestDocuments = numberOfTestDocumentsDecoded
        let evaluationMetricsDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.ClassifierEvaluationMetrics.self, forKey: .evaluationMetrics)
        evaluationMetrics = evaluationMetricsDecoded
    }
}

extension ComprehendClientTypes.ClassifierMetadata: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

extension ComprehendClientTypes {
    /// Provides information about a document classifier.
    public struct ClassifierMetadata: Swift.Equatable {
        /// Describes the result metrics for the test data associated with an documentation classifier.
        public var evaluationMetrics: ComprehendClientTypes.ClassifierEvaluationMetrics?
        /// The number of labels in the input data.
        public var numberOfLabels: Swift.Int?
        /// The number of documents in the input data that were used to test the classifier. Typically this is 10 to 20 percent of the input documents, up to 10,000 documents.
        public var numberOfTestDocuments: Swift.Int?
        /// The number of documents in the input data that were used to train the classifier. Typically this is 80 to 90 percent of the input documents.
        public var numberOfTrainedDocuments: Swift.Int?

        public init (
            evaluationMetrics: ComprehendClientTypes.ClassifierEvaluationMetrics? = nil,
            numberOfLabels: Swift.Int? = nil,
            numberOfTestDocuments: Swift.Int? = nil,
            numberOfTrainedDocuments: Swift.Int? = nil
        )
        {
            self.evaluationMetrics = evaluationMetrics
            self.numberOfLabels = numberOfLabels
            self.numberOfTestDocuments = numberOfTestDocuments
            self.numberOfTrainedDocuments = numberOfTrainedDocuments
        }
    }

}

extension ClassifyDocumentInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ClassifyDocumentInput(bytes: \(Swift.String(describing: bytes)), documentReaderConfig: \(Swift.String(describing: documentReaderConfig)), endpointArn: \(Swift.String(describing: endpointArn)), text: \"CONTENT_REDACTED\")"}
}

extension ClassifyDocumentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bytes = "Bytes"
        case documentReaderConfig = "DocumentReaderConfig"
        case endpointArn = "EndpointArn"
        case text = "Text"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bytes = self.bytes {
            try encodeContainer.encode(bytes.base64EncodedString(), forKey: .bytes)
        }
        if let documentReaderConfig = self.documentReaderConfig {
            try encodeContainer.encode(documentReaderConfig, forKey: .documentReaderConfig)
        }
        if let endpointArn = self.endpointArn {
            try encodeContainer.encode(endpointArn, forKey: .endpointArn)
        }
        if let text = self.text {
            try encodeContainer.encode(text, forKey: .text)
        }
    }
}

extension ClassifyDocumentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ClassifyDocumentInput: Swift.Equatable {
    /// Use the Bytes parameter to input a text, PDF, Word or image file. You can also use the Bytes parameter to input an Amazon Textract DetectDocumentText or AnalyzeDocument output file. Provide the input document as a sequence of base64-encoded bytes. If your code uses an Amazon Web Services SDK to classify documents, the SDK may encode the document file bytes for you. The maximum length of this field depends on the input document type. For details, see [ Inputs for real-time custom analysis](https://docs.aws.amazon.com/comprehend/latest/dg/idp-inputs-sync.html) in the Comprehend Developer Guide. If you use the Bytes parameter, do not use the Text parameter.
    public var bytes: ClientRuntime.Data?
    /// Provides configuration parameters to override the default actions for extracting text from PDF documents and image files.
    public var documentReaderConfig: ComprehendClientTypes.DocumentReaderConfig?
    /// The Amazon Resource Number (ARN) of the endpoint. For information about endpoints, see [Managing endpoints](https://docs.aws.amazon.com/comprehend/latest/dg/manage-endpoints.html).
    /// This member is required.
    public var endpointArn: Swift.String?
    /// The document text to be analyzed. If you enter text using this parameter, do not use the Bytes parameter.
    public var text: Swift.String?

    public init (
        bytes: ClientRuntime.Data? = nil,
        documentReaderConfig: ComprehendClientTypes.DocumentReaderConfig? = nil,
        endpointArn: Swift.String? = nil,
        text: Swift.String? = nil
    )
    {
        self.bytes = bytes
        self.documentReaderConfig = documentReaderConfig
        self.endpointArn = endpointArn
        self.text = text
    }
}

struct ClassifyDocumentInputBody: Swift.Equatable {
    let text: Swift.String?
    let endpointArn: Swift.String?
    let bytes: ClientRuntime.Data?
    let documentReaderConfig: ComprehendClientTypes.DocumentReaderConfig?
}

extension ClassifyDocumentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bytes = "Bytes"
        case documentReaderConfig = "DocumentReaderConfig"
        case endpointArn = "EndpointArn"
        case text = "Text"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let textDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .text)
        text = textDecoded
        let endpointArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointArn)
        endpointArn = endpointArnDecoded
        let bytesDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .bytes)
        bytes = bytesDecoded
        let documentReaderConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.DocumentReaderConfig.self, forKey: .documentReaderConfig)
        documentReaderConfig = documentReaderConfigDecoded
    }
}

extension ClassifyDocumentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ClassifyDocumentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceUnavailableException" : self = .resourceUnavailableException(try ResourceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TextSizeLimitExceededException" : self = .textSizeLimitExceededException(try TextSizeLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ClassifyDocumentOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case resourceUnavailableException(ResourceUnavailableException)
    case textSizeLimitExceededException(TextSizeLimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ClassifyDocumentOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

extension ClassifyDocumentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ClassifyDocumentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.classes = output.classes
            self.documentMetadata = output.documentMetadata
            self.documentType = output.documentType
            self.errors = output.errors
            self.labels = output.labels
        } else {
            self.classes = nil
            self.documentMetadata = nil
            self.documentType = nil
            self.errors = nil
            self.labels = nil
        }
    }
}

public struct ClassifyDocumentOutputResponse: Swift.Equatable {
    /// The classes used by the document being analyzed. These are used for multi-class trained models. Individual classes are mutually exclusive and each document is expected to have only a single class assigned to it. For example, an animal can be a dog or a cat, but not both at the same time.
    public var classes: [ComprehendClientTypes.DocumentClass]?
    /// Extraction information about the document. This field is present in the response only if your request includes the Byte parameter.
    public var documentMetadata: ComprehendClientTypes.DocumentMetadata?
    /// The document type for each page in the input document. This field is present in the response only if your request includes the Byte parameter.
    public var documentType: [ComprehendClientTypes.DocumentTypeListItem]?
    /// Page-level errors that the system detected while processing the input document. The field is empty if the system encountered no errors.
    public var errors: [ComprehendClientTypes.ErrorsListItem]?
    /// The labels used the document being analyzed. These are used for multi-label trained models. Individual labels represent different categories that are related in some manner and are not mutually exclusive. For example, a movie can be just an action movie, or it can be an action movie, a science fiction movie, and a comedy, all at the same time.
    public var labels: [ComprehendClientTypes.DocumentLabel]?

    public init (
        classes: [ComprehendClientTypes.DocumentClass]? = nil,
        documentMetadata: ComprehendClientTypes.DocumentMetadata? = nil,
        documentType: [ComprehendClientTypes.DocumentTypeListItem]? = nil,
        errors: [ComprehendClientTypes.ErrorsListItem]? = nil,
        labels: [ComprehendClientTypes.DocumentLabel]? = nil
    )
    {
        self.classes = classes
        self.documentMetadata = documentMetadata
        self.documentType = documentType
        self.errors = errors
        self.labels = labels
    }
}

struct ClassifyDocumentOutputResponseBody: Swift.Equatable {
    let classes: [ComprehendClientTypes.DocumentClass]?
    let labels: [ComprehendClientTypes.DocumentLabel]?
    let documentMetadata: ComprehendClientTypes.DocumentMetadata?
    let documentType: [ComprehendClientTypes.DocumentTypeListItem]?
    let errors: [ComprehendClientTypes.ErrorsListItem]?
}

extension ClassifyDocumentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case classes = "Classes"
        case documentMetadata = "DocumentMetadata"
        case documentType = "DocumentType"
        case errors = "Errors"
        case labels = "Labels"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let classesContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.DocumentClass?].self, forKey: .classes)
        var classesDecoded0:[ComprehendClientTypes.DocumentClass]? = nil
        if let classesContainer = classesContainer {
            classesDecoded0 = [ComprehendClientTypes.DocumentClass]()
            for structure0 in classesContainer {
                if let structure0 = structure0 {
                    classesDecoded0?.append(structure0)
                }
            }
        }
        classes = classesDecoded0
        let labelsContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.DocumentLabel?].self, forKey: .labels)
        var labelsDecoded0:[ComprehendClientTypes.DocumentLabel]? = nil
        if let labelsContainer = labelsContainer {
            labelsDecoded0 = [ComprehendClientTypes.DocumentLabel]()
            for structure0 in labelsContainer {
                if let structure0 = structure0 {
                    labelsDecoded0?.append(structure0)
                }
            }
        }
        labels = labelsDecoded0
        let documentMetadataDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.DocumentMetadata.self, forKey: .documentMetadata)
        documentMetadata = documentMetadataDecoded
        let documentTypeContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.DocumentTypeListItem?].self, forKey: .documentType)
        var documentTypeDecoded0:[ComprehendClientTypes.DocumentTypeListItem]? = nil
        if let documentTypeContainer = documentTypeContainer {
            documentTypeDecoded0 = [ComprehendClientTypes.DocumentTypeListItem]()
            for structure0 in documentTypeContainer {
                if let structure0 = structure0 {
                    documentTypeDecoded0?.append(structure0)
                }
            }
        }
        documentType = documentTypeDecoded0
        let errorsContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.ErrorsListItem?].self, forKey: .errors)
        var errorsDecoded0:[ComprehendClientTypes.ErrorsListItem]? = nil
        if let errorsContainer = errorsContainer {
            errorsDecoded0 = [ComprehendClientTypes.ErrorsListItem]()
            for structure0 in errorsContainer {
                if let structure0 = structure0 {
                    errorsDecoded0?.append(structure0)
                }
            }
        }
        errors = errorsDecoded0
    }
}

extension ConcurrentModificationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ConcurrentModificationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Concurrent modification of the tags associated with an Amazon Comprehend resource is not supported.
public struct ConcurrentModificationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ConcurrentModificationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ConcurrentModificationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ContainsPiiEntitiesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languageCode = "LanguageCode"
        case text = "Text"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let languageCode = self.languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let text = self.text {
            try encodeContainer.encode(text, forKey: .text)
        }
    }
}

extension ContainsPiiEntitiesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ContainsPiiEntitiesInput: Swift.Equatable {
    /// The language of the input documents. Currently, English is the only valid language.
    /// This member is required.
    public var languageCode: ComprehendClientTypes.LanguageCode?
    /// A UTF-8 text string. The maximum string size is 100 KB.
    /// This member is required.
    public var text: Swift.String?

    public init (
        languageCode: ComprehendClientTypes.LanguageCode? = nil,
        text: Swift.String? = nil
    )
    {
        self.languageCode = languageCode
        self.text = text
    }
}

struct ContainsPiiEntitiesInputBody: Swift.Equatable {
    let text: Swift.String?
    let languageCode: ComprehendClientTypes.LanguageCode?
}

extension ContainsPiiEntitiesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languageCode = "LanguageCode"
        case text = "Text"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let textDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .text)
        text = textDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
    }
}

extension ContainsPiiEntitiesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ContainsPiiEntitiesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TextSizeLimitExceededException" : self = .textSizeLimitExceededException(try TextSizeLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedLanguageException" : self = .unsupportedLanguageException(try UnsupportedLanguageException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ContainsPiiEntitiesOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case textSizeLimitExceededException(TextSizeLimitExceededException)
    case unsupportedLanguageException(UnsupportedLanguageException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ContainsPiiEntitiesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ContainsPiiEntitiesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.labels = output.labels
        } else {
            self.labels = nil
        }
    }
}

public struct ContainsPiiEntitiesOutputResponse: Swift.Equatable {
    /// The labels used in the document being analyzed. Individual labels represent personally identifiable information (PII) entity types.
    public var labels: [ComprehendClientTypes.EntityLabel]?

    public init (
        labels: [ComprehendClientTypes.EntityLabel]? = nil
    )
    {
        self.labels = labels
    }
}

struct ContainsPiiEntitiesOutputResponseBody: Swift.Equatable {
    let labels: [ComprehendClientTypes.EntityLabel]?
}

extension ContainsPiiEntitiesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labels = "Labels"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelsContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.EntityLabel?].self, forKey: .labels)
        var labelsDecoded0:[ComprehendClientTypes.EntityLabel]? = nil
        if let labelsContainer = labelsContainer {
            labelsDecoded0 = [ComprehendClientTypes.EntityLabel]()
            for structure0 in labelsContainer {
                if let structure0 = structure0 {
                    labelsDecoded0?.append(structure0)
                }
            }
        }
        labels = labelsDecoded0
    }
}

extension CreateDocumentClassifierInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case dataAccessRoleArn = "DataAccessRoleArn"
        case documentClassifierName = "DocumentClassifierName"
        case inputDataConfig = "InputDataConfig"
        case languageCode = "LanguageCode"
        case mode = "Mode"
        case modelKmsKeyId = "ModelKmsKeyId"
        case modelPolicy = "ModelPolicy"
        case outputDataConfig = "OutputDataConfig"
        case tags = "Tags"
        case versionName = "VersionName"
        case volumeKmsKeyId = "VolumeKmsKeyId"
        case vpcConfig = "VpcConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let dataAccessRoleArn = self.dataAccessRoleArn {
            try encodeContainer.encode(dataAccessRoleArn, forKey: .dataAccessRoleArn)
        }
        if let documentClassifierName = self.documentClassifierName {
            try encodeContainer.encode(documentClassifierName, forKey: .documentClassifierName)
        }
        if let inputDataConfig = self.inputDataConfig {
            try encodeContainer.encode(inputDataConfig, forKey: .inputDataConfig)
        }
        if let languageCode = self.languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let mode = self.mode {
            try encodeContainer.encode(mode.rawValue, forKey: .mode)
        }
        if let modelKmsKeyId = self.modelKmsKeyId {
            try encodeContainer.encode(modelKmsKeyId, forKey: .modelKmsKeyId)
        }
        if let modelPolicy = self.modelPolicy {
            try encodeContainer.encode(modelPolicy, forKey: .modelPolicy)
        }
        if let outputDataConfig = self.outputDataConfig {
            try encodeContainer.encode(outputDataConfig, forKey: .outputDataConfig)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let versionName = self.versionName {
            try encodeContainer.encode(versionName, forKey: .versionName)
        }
        if let volumeKmsKeyId = self.volumeKmsKeyId {
            try encodeContainer.encode(volumeKmsKeyId, forKey: .volumeKmsKeyId)
        }
        if let vpcConfig = self.vpcConfig {
            try encodeContainer.encode(vpcConfig, forKey: .vpcConfig)
        }
    }
}

extension CreateDocumentClassifierInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateDocumentClassifierInput: Swift.Equatable {
    /// A unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one.
    public var clientRequestToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the AWS Identity and Management (IAM) role that grants Amazon Comprehend read access to your input data.
    /// This member is required.
    public var dataAccessRoleArn: Swift.String?
    /// The name of the document classifier.
    /// This member is required.
    public var documentClassifierName: Swift.String?
    /// Specifies the format and location of the input data for the job.
    /// This member is required.
    public var inputDataConfig: ComprehendClientTypes.DocumentClassifierInputDataConfig?
    /// The language of the input documents. You can specify any of the following languages supported by Amazon Comprehend: German ("de"), English ("en"), Spanish ("es"), French ("fr"), Italian ("it"), or Portuguese ("pt"). All documents must be in the same language.
    /// This member is required.
    public var languageCode: ComprehendClientTypes.LanguageCode?
    /// Indicates the mode in which the classifier will be trained. The classifier can be trained in multi-class mode, which identifies one and only one class for each document, or multi-label mode, which identifies one or more labels for each document. In multi-label mode, multiple labels for an individual document are separated by a delimiter. The default delimiter between labels is a pipe (|).
    public var mode: ComprehendClientTypes.DocumentClassifierMode?
    /// ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt trained custom models. The ModelKmsKeyId can be either of the following formats:
    ///
    /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
    ///
    /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
    public var modelKmsKeyId: Swift.String?
    /// The resource-based policy to attach to your custom document classifier model. You can use this policy to allow another AWS account to import your custom model. Provide your policy as a JSON body that you enter as a UTF-8 encoded string without line breaks. To provide valid JSON, enclose the attribute names and values in double quotes. If the JSON body is also enclosed in double quotes, then you must escape the double quotes that are inside the policy: "{\"attribute\": \"value\", \"attribute\": [\"value\"]}" To avoid escaping quotes, you can use single quotes to enclose the policy and double quotes to enclose the JSON names and values: '{"attribute": "value", "attribute": ["value"]}'
    public var modelPolicy: Swift.String?
    /// Enables the addition of output results configuration parameters for custom classifier jobs.
    public var outputDataConfig: ComprehendClientTypes.DocumentClassifierOutputDataConfig?
    /// Tags to be associated with the document classifier being created. A tag is a key-value pair that adds as a metadata to a resource used by Amazon Comprehend. For example, a tag with "Sales" as the key might be added to a resource to indicate its use by the sales department.
    public var tags: [ComprehendClientTypes.Tag]?
    /// The version name given to the newly created classifier. Version names can have a maximum of 256 characters. Alphanumeric characters, hyphens (-) and underscores (_) are allowed. The version name must be unique among all models with the same classifier name in the account/AWS Region.
    public var versionName: Swift.String?
    /// ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:
    ///
    /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
    ///
    /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
    public var volumeKmsKeyId: Swift.String?
    /// Configuration parameters for an optional private Virtual Private Cloud (VPC) containing the resources you are using for your custom classifier. For more information, see [Amazon VPC](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html).
    public var vpcConfig: ComprehendClientTypes.VpcConfig?

    public init (
        clientRequestToken: Swift.String? = nil,
        dataAccessRoleArn: Swift.String? = nil,
        documentClassifierName: Swift.String? = nil,
        inputDataConfig: ComprehendClientTypes.DocumentClassifierInputDataConfig? = nil,
        languageCode: ComprehendClientTypes.LanguageCode? = nil,
        mode: ComprehendClientTypes.DocumentClassifierMode? = nil,
        modelKmsKeyId: Swift.String? = nil,
        modelPolicy: Swift.String? = nil,
        outputDataConfig: ComprehendClientTypes.DocumentClassifierOutputDataConfig? = nil,
        tags: [ComprehendClientTypes.Tag]? = nil,
        versionName: Swift.String? = nil,
        volumeKmsKeyId: Swift.String? = nil,
        vpcConfig: ComprehendClientTypes.VpcConfig? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.dataAccessRoleArn = dataAccessRoleArn
        self.documentClassifierName = documentClassifierName
        self.inputDataConfig = inputDataConfig
        self.languageCode = languageCode
        self.mode = mode
        self.modelKmsKeyId = modelKmsKeyId
        self.modelPolicy = modelPolicy
        self.outputDataConfig = outputDataConfig
        self.tags = tags
        self.versionName = versionName
        self.volumeKmsKeyId = volumeKmsKeyId
        self.vpcConfig = vpcConfig
    }
}

struct CreateDocumentClassifierInputBody: Swift.Equatable {
    let documentClassifierName: Swift.String?
    let versionName: Swift.String?
    let dataAccessRoleArn: Swift.String?
    let tags: [ComprehendClientTypes.Tag]?
    let inputDataConfig: ComprehendClientTypes.DocumentClassifierInputDataConfig?
    let outputDataConfig: ComprehendClientTypes.DocumentClassifierOutputDataConfig?
    let clientRequestToken: Swift.String?
    let languageCode: ComprehendClientTypes.LanguageCode?
    let volumeKmsKeyId: Swift.String?
    let vpcConfig: ComprehendClientTypes.VpcConfig?
    let mode: ComprehendClientTypes.DocumentClassifierMode?
    let modelKmsKeyId: Swift.String?
    let modelPolicy: Swift.String?
}

extension CreateDocumentClassifierInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case dataAccessRoleArn = "DataAccessRoleArn"
        case documentClassifierName = "DocumentClassifierName"
        case inputDataConfig = "InputDataConfig"
        case languageCode = "LanguageCode"
        case mode = "Mode"
        case modelKmsKeyId = "ModelKmsKeyId"
        case modelPolicy = "ModelPolicy"
        case outputDataConfig = "OutputDataConfig"
        case tags = "Tags"
        case versionName = "VersionName"
        case volumeKmsKeyId = "VolumeKmsKeyId"
        case vpcConfig = "VpcConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentClassifierNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentClassifierName)
        documentClassifierName = documentClassifierNameDecoded
        let versionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionName)
        versionName = versionNameDecoded
        let dataAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataAccessRoleArn)
        dataAccessRoleArn = dataAccessRoleArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[ComprehendClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [ComprehendClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let inputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.DocumentClassifierInputDataConfig.self, forKey: .inputDataConfig)
        inputDataConfig = inputDataConfigDecoded
        let outputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.DocumentClassifierOutputDataConfig.self, forKey: .outputDataConfig)
        outputDataConfig = outputDataConfigDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let volumeKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeKmsKeyId)
        volumeKmsKeyId = volumeKmsKeyIdDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
        let modeDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.DocumentClassifierMode.self, forKey: .mode)
        mode = modeDecoded
        let modelKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelKmsKeyId)
        modelKmsKeyId = modelKmsKeyIdDecoded
        let modelPolicyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPolicy)
        modelPolicy = modelPolicyDecoded
    }
}

extension CreateDocumentClassifierOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDocumentClassifierOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KmsKeyValidationException" : self = .kmsKeyValidationException(try KmsKeyValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceededException" : self = .resourceLimitExceededException(try ResourceLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedLanguageException" : self = .unsupportedLanguageException(try UnsupportedLanguageException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateDocumentClassifierOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case kmsKeyValidationException(KmsKeyValidationException)
    case resourceInUseException(ResourceInUseException)
    case resourceLimitExceededException(ResourceLimitExceededException)
    case tooManyRequestsException(TooManyRequestsException)
    case tooManyTagsException(TooManyTagsException)
    case unsupportedLanguageException(UnsupportedLanguageException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDocumentClassifierOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateDocumentClassifierOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.documentClassifierArn = output.documentClassifierArn
        } else {
            self.documentClassifierArn = nil
        }
    }
}

public struct CreateDocumentClassifierOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) that identifies the document classifier.
    public var documentClassifierArn: Swift.String?

    public init (
        documentClassifierArn: Swift.String? = nil
    )
    {
        self.documentClassifierArn = documentClassifierArn
    }
}

struct CreateDocumentClassifierOutputResponseBody: Swift.Equatable {
    let documentClassifierArn: Swift.String?
}

extension CreateDocumentClassifierOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case documentClassifierArn = "DocumentClassifierArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentClassifierArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentClassifierArn)
        documentClassifierArn = documentClassifierArnDecoded
    }
}

extension CreateEndpointInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case dataAccessRoleArn = "DataAccessRoleArn"
        case desiredInferenceUnits = "DesiredInferenceUnits"
        case endpointName = "EndpointName"
        case modelArn = "ModelArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let dataAccessRoleArn = self.dataAccessRoleArn {
            try encodeContainer.encode(dataAccessRoleArn, forKey: .dataAccessRoleArn)
        }
        if let desiredInferenceUnits = self.desiredInferenceUnits {
            try encodeContainer.encode(desiredInferenceUnits, forKey: .desiredInferenceUnits)
        }
        if let endpointName = self.endpointName {
            try encodeContainer.encode(endpointName, forKey: .endpointName)
        }
        if let modelArn = self.modelArn {
            try encodeContainer.encode(modelArn, forKey: .modelArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateEndpointInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateEndpointInput: Swift.Equatable {
    /// An idempotency token provided by the customer. If this token matches a previous endpoint creation request, Amazon Comprehend will not return a ResourceInUseException.
    public var clientRequestToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the AWS identity and Access Management (IAM) role that grants Amazon Comprehend read access to trained custom models encrypted with a customer managed key (ModelKmsKeyId).
    public var dataAccessRoleArn: Swift.String?
    /// The desired number of inference units to be used by the model using this endpoint. Each inference unit represents of a throughput of 100 characters per second.
    /// This member is required.
    public var desiredInferenceUnits: Swift.Int?
    /// This is the descriptive suffix that becomes part of the EndpointArn used for all subsequent requests to this resource.
    /// This member is required.
    public var endpointName: Swift.String?
    /// The Amazon Resource Number (ARN) of the model to which the endpoint will be attached.
    /// This member is required.
    public var modelArn: Swift.String?
    /// Tags associated with the endpoint being created. A tag is a key-value pair that adds metadata to the endpoint. For example, a tag with "Sales" as the key might be added to an endpoint to indicate its use by the sales department.
    public var tags: [ComprehendClientTypes.Tag]?

    public init (
        clientRequestToken: Swift.String? = nil,
        dataAccessRoleArn: Swift.String? = nil,
        desiredInferenceUnits: Swift.Int? = nil,
        endpointName: Swift.String? = nil,
        modelArn: Swift.String? = nil,
        tags: [ComprehendClientTypes.Tag]? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.dataAccessRoleArn = dataAccessRoleArn
        self.desiredInferenceUnits = desiredInferenceUnits
        self.endpointName = endpointName
        self.modelArn = modelArn
        self.tags = tags
    }
}

struct CreateEndpointInputBody: Swift.Equatable {
    let endpointName: Swift.String?
    let modelArn: Swift.String?
    let desiredInferenceUnits: Swift.Int?
    let clientRequestToken: Swift.String?
    let tags: [ComprehendClientTypes.Tag]?
    let dataAccessRoleArn: Swift.String?
}

extension CreateEndpointInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case dataAccessRoleArn = "DataAccessRoleArn"
        case desiredInferenceUnits = "DesiredInferenceUnits"
        case endpointName = "EndpointName"
        case modelArn = "ModelArn"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
        let modelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelArn)
        modelArn = modelArnDecoded
        let desiredInferenceUnitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .desiredInferenceUnits)
        desiredInferenceUnits = desiredInferenceUnitsDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[ComprehendClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [ComprehendClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let dataAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataAccessRoleArn)
        dataAccessRoleArn = dataAccessRoleArnDecoded
    }
}

extension CreateEndpointOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateEndpointOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceededException" : self = .resourceLimitExceededException(try ResourceLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceUnavailableException" : self = .resourceUnavailableException(try ResourceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateEndpointOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case resourceInUseException(ResourceInUseException)
    case resourceLimitExceededException(ResourceLimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case resourceUnavailableException(ResourceUnavailableException)
    case tooManyRequestsException(TooManyRequestsException)
    case tooManyTagsException(TooManyTagsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateEndpointOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateEndpointOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.endpointArn = output.endpointArn
        } else {
            self.endpointArn = nil
        }
    }
}

public struct CreateEndpointOutputResponse: Swift.Equatable {
    /// The Amazon Resource Number (ARN) of the endpoint being created.
    public var endpointArn: Swift.String?

    public init (
        endpointArn: Swift.String? = nil
    )
    {
        self.endpointArn = endpointArn
    }
}

struct CreateEndpointOutputResponseBody: Swift.Equatable {
    let endpointArn: Swift.String?
}

extension CreateEndpointOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointArn = "EndpointArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointArn)
        endpointArn = endpointArnDecoded
    }
}

extension CreateEntityRecognizerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case dataAccessRoleArn = "DataAccessRoleArn"
        case inputDataConfig = "InputDataConfig"
        case languageCode = "LanguageCode"
        case modelKmsKeyId = "ModelKmsKeyId"
        case modelPolicy = "ModelPolicy"
        case recognizerName = "RecognizerName"
        case tags = "Tags"
        case versionName = "VersionName"
        case volumeKmsKeyId = "VolumeKmsKeyId"
        case vpcConfig = "VpcConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let dataAccessRoleArn = self.dataAccessRoleArn {
            try encodeContainer.encode(dataAccessRoleArn, forKey: .dataAccessRoleArn)
        }
        if let inputDataConfig = self.inputDataConfig {
            try encodeContainer.encode(inputDataConfig, forKey: .inputDataConfig)
        }
        if let languageCode = self.languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let modelKmsKeyId = self.modelKmsKeyId {
            try encodeContainer.encode(modelKmsKeyId, forKey: .modelKmsKeyId)
        }
        if let modelPolicy = self.modelPolicy {
            try encodeContainer.encode(modelPolicy, forKey: .modelPolicy)
        }
        if let recognizerName = self.recognizerName {
            try encodeContainer.encode(recognizerName, forKey: .recognizerName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let versionName = self.versionName {
            try encodeContainer.encode(versionName, forKey: .versionName)
        }
        if let volumeKmsKeyId = self.volumeKmsKeyId {
            try encodeContainer.encode(volumeKmsKeyId, forKey: .volumeKmsKeyId)
        }
        if let vpcConfig = self.vpcConfig {
            try encodeContainer.encode(vpcConfig, forKey: .vpcConfig)
        }
    }
}

extension CreateEntityRecognizerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateEntityRecognizerInput: Swift.Equatable {
    /// A unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one.
    public var clientRequestToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the AWS Identity and Management (IAM) role that grants Amazon Comprehend read access to your input data.
    /// This member is required.
    public var dataAccessRoleArn: Swift.String?
    /// Specifies the format and location of the input data. The S3 bucket containing the input data must be located in the same region as the entity recognizer being created.
    /// This member is required.
    public var inputDataConfig: ComprehendClientTypes.EntityRecognizerInputDataConfig?
    /// You can specify any of the following languages: English ("en"), Spanish ("es"), French ("fr"), Italian ("it"), German ("de"), or Portuguese ("pt"). If you plan to use this entity recognizer with PDF, Word, or image input files, you must specify English as the language. All training documents must be in the same language.
    /// This member is required.
    public var languageCode: ComprehendClientTypes.LanguageCode?
    /// ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt trained custom models. The ModelKmsKeyId can be either of the following formats
    ///
    /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
    ///
    /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
    public var modelKmsKeyId: Swift.String?
    /// The JSON resource-based policy to attach to your custom entity recognizer model. You can use this policy to allow another AWS account to import your custom model. Provide your JSON as a UTF-8 encoded string without line breaks. To provide valid JSON for your policy, enclose the attribute names and values in double quotes. If the JSON body is also enclosed in double quotes, then you must escape the double quotes that are inside the policy: "{\"attribute\": \"value\", \"attribute\": [\"value\"]}" To avoid escaping quotes, you can use single quotes to enclose the policy and double quotes to enclose the JSON names and values: '{"attribute": "value", "attribute": ["value"]}'
    public var modelPolicy: Swift.String?
    /// The name given to the newly created recognizer. Recognizer names can be a maximum of 256 characters. Alphanumeric characters, hyphens (-) and underscores (_) are allowed. The name must be unique in the account/region.
    /// This member is required.
    public var recognizerName: Swift.String?
    /// Tags to be associated with the entity recognizer being created. A tag is a key-value pair that adds as a metadata to a resource used by Amazon Comprehend. For example, a tag with "Sales" as the key might be added to a resource to indicate its use by the sales department.
    public var tags: [ComprehendClientTypes.Tag]?
    /// The version name given to the newly created recognizer. Version names can be a maximum of 256 characters. Alphanumeric characters, hyphens (-) and underscores (_) are allowed. The version name must be unique among all models with the same recognizer name in the account/ AWS Region.
    public var versionName: Swift.String?
    /// ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:
    ///
    /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
    ///
    /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
    public var volumeKmsKeyId: Swift.String?
    /// Configuration parameters for an optional private Virtual Private Cloud (VPC) containing the resources you are using for your custom entity recognizer. For more information, see [Amazon VPC](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html).
    public var vpcConfig: ComprehendClientTypes.VpcConfig?

    public init (
        clientRequestToken: Swift.String? = nil,
        dataAccessRoleArn: Swift.String? = nil,
        inputDataConfig: ComprehendClientTypes.EntityRecognizerInputDataConfig? = nil,
        languageCode: ComprehendClientTypes.LanguageCode? = nil,
        modelKmsKeyId: Swift.String? = nil,
        modelPolicy: Swift.String? = nil,
        recognizerName: Swift.String? = nil,
        tags: [ComprehendClientTypes.Tag]? = nil,
        versionName: Swift.String? = nil,
        volumeKmsKeyId: Swift.String? = nil,
        vpcConfig: ComprehendClientTypes.VpcConfig? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.dataAccessRoleArn = dataAccessRoleArn
        self.inputDataConfig = inputDataConfig
        self.languageCode = languageCode
        self.modelKmsKeyId = modelKmsKeyId
        self.modelPolicy = modelPolicy
        self.recognizerName = recognizerName
        self.tags = tags
        self.versionName = versionName
        self.volumeKmsKeyId = volumeKmsKeyId
        self.vpcConfig = vpcConfig
    }
}

struct CreateEntityRecognizerInputBody: Swift.Equatable {
    let recognizerName: Swift.String?
    let versionName: Swift.String?
    let dataAccessRoleArn: Swift.String?
    let tags: [ComprehendClientTypes.Tag]?
    let inputDataConfig: ComprehendClientTypes.EntityRecognizerInputDataConfig?
    let clientRequestToken: Swift.String?
    let languageCode: ComprehendClientTypes.LanguageCode?
    let volumeKmsKeyId: Swift.String?
    let vpcConfig: ComprehendClientTypes.VpcConfig?
    let modelKmsKeyId: Swift.String?
    let modelPolicy: Swift.String?
}

extension CreateEntityRecognizerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case dataAccessRoleArn = "DataAccessRoleArn"
        case inputDataConfig = "InputDataConfig"
        case languageCode = "LanguageCode"
        case modelKmsKeyId = "ModelKmsKeyId"
        case modelPolicy = "ModelPolicy"
        case recognizerName = "RecognizerName"
        case tags = "Tags"
        case versionName = "VersionName"
        case volumeKmsKeyId = "VolumeKmsKeyId"
        case vpcConfig = "VpcConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recognizerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recognizerName)
        recognizerName = recognizerNameDecoded
        let versionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionName)
        versionName = versionNameDecoded
        let dataAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataAccessRoleArn)
        dataAccessRoleArn = dataAccessRoleArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[ComprehendClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [ComprehendClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let inputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.EntityRecognizerInputDataConfig.self, forKey: .inputDataConfig)
        inputDataConfig = inputDataConfigDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let volumeKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeKmsKeyId)
        volumeKmsKeyId = volumeKmsKeyIdDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
        let modelKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelKmsKeyId)
        modelKmsKeyId = modelKmsKeyIdDecoded
        let modelPolicyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPolicy)
        modelPolicy = modelPolicyDecoded
    }
}

extension CreateEntityRecognizerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateEntityRecognizerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KmsKeyValidationException" : self = .kmsKeyValidationException(try KmsKeyValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceededException" : self = .resourceLimitExceededException(try ResourceLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedLanguageException" : self = .unsupportedLanguageException(try UnsupportedLanguageException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateEntityRecognizerOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case kmsKeyValidationException(KmsKeyValidationException)
    case resourceInUseException(ResourceInUseException)
    case resourceLimitExceededException(ResourceLimitExceededException)
    case tooManyRequestsException(TooManyRequestsException)
    case tooManyTagsException(TooManyTagsException)
    case unsupportedLanguageException(UnsupportedLanguageException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateEntityRecognizerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateEntityRecognizerOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.entityRecognizerArn = output.entityRecognizerArn
        } else {
            self.entityRecognizerArn = nil
        }
    }
}

public struct CreateEntityRecognizerOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) that identifies the entity recognizer.
    public var entityRecognizerArn: Swift.String?

    public init (
        entityRecognizerArn: Swift.String? = nil
    )
    {
        self.entityRecognizerArn = entityRecognizerArn
    }
}

struct CreateEntityRecognizerOutputResponseBody: Swift.Equatable {
    let entityRecognizerArn: Swift.String?
}

extension CreateEntityRecognizerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entityRecognizerArn = "EntityRecognizerArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let entityRecognizerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .entityRecognizerArn)
        entityRecognizerArn = entityRecognizerArnDecoded
    }
}

extension DeleteDocumentClassifierInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case documentClassifierArn = "DocumentClassifierArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let documentClassifierArn = self.documentClassifierArn {
            try encodeContainer.encode(documentClassifierArn, forKey: .documentClassifierArn)
        }
    }
}

extension DeleteDocumentClassifierInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteDocumentClassifierInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) that identifies the document classifier.
    /// This member is required.
    public var documentClassifierArn: Swift.String?

    public init (
        documentClassifierArn: Swift.String? = nil
    )
    {
        self.documentClassifierArn = documentClassifierArn
    }
}

struct DeleteDocumentClassifierInputBody: Swift.Equatable {
    let documentClassifierArn: Swift.String?
}

extension DeleteDocumentClassifierInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case documentClassifierArn = "DocumentClassifierArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentClassifierArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentClassifierArn)
        documentClassifierArn = documentClassifierArnDecoded
    }
}

extension DeleteDocumentClassifierOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteDocumentClassifierOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceUnavailableException" : self = .resourceUnavailableException(try ResourceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteDocumentClassifierOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case resourceUnavailableException(ResourceUnavailableException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDocumentClassifierOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteDocumentClassifierOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteEndpointInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointArn = "EndpointArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endpointArn = self.endpointArn {
            try encodeContainer.encode(endpointArn, forKey: .endpointArn)
        }
    }
}

extension DeleteEndpointInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteEndpointInput: Swift.Equatable {
    /// The Amazon Resource Number (ARN) of the endpoint being deleted.
    /// This member is required.
    public var endpointArn: Swift.String?

    public init (
        endpointArn: Swift.String? = nil
    )
    {
        self.endpointArn = endpointArn
    }
}

struct DeleteEndpointInputBody: Swift.Equatable {
    let endpointArn: Swift.String?
}

extension DeleteEndpointInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointArn = "EndpointArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointArn)
        endpointArn = endpointArnDecoded
    }
}

extension DeleteEndpointOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteEndpointOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteEndpointOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteEndpointOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteEndpointOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteEntityRecognizerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entityRecognizerArn = "EntityRecognizerArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let entityRecognizerArn = self.entityRecognizerArn {
            try encodeContainer.encode(entityRecognizerArn, forKey: .entityRecognizerArn)
        }
    }
}

extension DeleteEntityRecognizerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteEntityRecognizerInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) that identifies the entity recognizer.
    /// This member is required.
    public var entityRecognizerArn: Swift.String?

    public init (
        entityRecognizerArn: Swift.String? = nil
    )
    {
        self.entityRecognizerArn = entityRecognizerArn
    }
}

struct DeleteEntityRecognizerInputBody: Swift.Equatable {
    let entityRecognizerArn: Swift.String?
}

extension DeleteEntityRecognizerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entityRecognizerArn = "EntityRecognizerArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let entityRecognizerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .entityRecognizerArn)
        entityRecognizerArn = entityRecognizerArnDecoded
    }
}

extension DeleteEntityRecognizerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteEntityRecognizerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceUnavailableException" : self = .resourceUnavailableException(try ResourceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteEntityRecognizerOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case resourceUnavailableException(ResourceUnavailableException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteEntityRecognizerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteEntityRecognizerOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteResourcePolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyRevisionId = "PolicyRevisionId"
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policyRevisionId = self.policyRevisionId {
            try encodeContainer.encode(policyRevisionId, forKey: .policyRevisionId)
        }
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

extension DeleteResourcePolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteResourcePolicyInput: Swift.Equatable {
    /// The revision ID of the policy to delete.
    public var policyRevisionId: Swift.String?
    /// The Amazon Resource Name (ARN) of the custom model version that has the policy to delete.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        policyRevisionId: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.policyRevisionId = policyRevisionId
        self.resourceArn = resourceArn
    }
}

struct DeleteResourcePolicyInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let policyRevisionId: Swift.String?
}

extension DeleteResourcePolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyRevisionId = "PolicyRevisionId"
        case resourceArn = "ResourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let policyRevisionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyRevisionId)
        policyRevisionId = policyRevisionIdDecoded
    }
}

extension DeleteResourcePolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteResourcePolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteResourcePolicyOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteResourcePolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteResourcePolicyOutputResponse: Swift.Equatable {

    public init () { }
}

extension DescribeDocumentClassificationJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
    }
}

extension DescribeDocumentClassificationJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeDocumentClassificationJobInput: Swift.Equatable {
    /// The identifier that Amazon Comprehend generated for the job. The operation returns this identifier in its response.
    /// This member is required.
    public var jobId: Swift.String?

    public init (
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

struct DescribeDocumentClassificationJobInputBody: Swift.Equatable {
    let jobId: Swift.String?
}

extension DescribeDocumentClassificationJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
    }
}

extension DescribeDocumentClassificationJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeDocumentClassificationJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "JobNotFoundException" : self = .jobNotFoundException(try JobNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeDocumentClassificationJobOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case jobNotFoundException(JobNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeDocumentClassificationJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeDocumentClassificationJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.documentClassificationJobProperties = output.documentClassificationJobProperties
        } else {
            self.documentClassificationJobProperties = nil
        }
    }
}

public struct DescribeDocumentClassificationJobOutputResponse: Swift.Equatable {
    /// An object that describes the properties associated with the document classification job.
    public var documentClassificationJobProperties: ComprehendClientTypes.DocumentClassificationJobProperties?

    public init (
        documentClassificationJobProperties: ComprehendClientTypes.DocumentClassificationJobProperties? = nil
    )
    {
        self.documentClassificationJobProperties = documentClassificationJobProperties
    }
}

struct DescribeDocumentClassificationJobOutputResponseBody: Swift.Equatable {
    let documentClassificationJobProperties: ComprehendClientTypes.DocumentClassificationJobProperties?
}

extension DescribeDocumentClassificationJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case documentClassificationJobProperties = "DocumentClassificationJobProperties"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentClassificationJobPropertiesDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.DocumentClassificationJobProperties.self, forKey: .documentClassificationJobProperties)
        documentClassificationJobProperties = documentClassificationJobPropertiesDecoded
    }
}

extension DescribeDocumentClassifierInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case documentClassifierArn = "DocumentClassifierArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let documentClassifierArn = self.documentClassifierArn {
            try encodeContainer.encode(documentClassifierArn, forKey: .documentClassifierArn)
        }
    }
}

extension DescribeDocumentClassifierInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeDocumentClassifierInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) that identifies the document classifier. The operation returns this identifier in its response.
    /// This member is required.
    public var documentClassifierArn: Swift.String?

    public init (
        documentClassifierArn: Swift.String? = nil
    )
    {
        self.documentClassifierArn = documentClassifierArn
    }
}

struct DescribeDocumentClassifierInputBody: Swift.Equatable {
    let documentClassifierArn: Swift.String?
}

extension DescribeDocumentClassifierInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case documentClassifierArn = "DocumentClassifierArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentClassifierArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentClassifierArn)
        documentClassifierArn = documentClassifierArnDecoded
    }
}

extension DescribeDocumentClassifierOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeDocumentClassifierOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeDocumentClassifierOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeDocumentClassifierOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeDocumentClassifierOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.documentClassifierProperties = output.documentClassifierProperties
        } else {
            self.documentClassifierProperties = nil
        }
    }
}

public struct DescribeDocumentClassifierOutputResponse: Swift.Equatable {
    /// An object that contains the properties associated with a document classifier.
    public var documentClassifierProperties: ComprehendClientTypes.DocumentClassifierProperties?

    public init (
        documentClassifierProperties: ComprehendClientTypes.DocumentClassifierProperties? = nil
    )
    {
        self.documentClassifierProperties = documentClassifierProperties
    }
}

struct DescribeDocumentClassifierOutputResponseBody: Swift.Equatable {
    let documentClassifierProperties: ComprehendClientTypes.DocumentClassifierProperties?
}

extension DescribeDocumentClassifierOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case documentClassifierProperties = "DocumentClassifierProperties"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentClassifierPropertiesDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.DocumentClassifierProperties.self, forKey: .documentClassifierProperties)
        documentClassifierProperties = documentClassifierPropertiesDecoded
    }
}

extension DescribeDominantLanguageDetectionJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
    }
}

extension DescribeDominantLanguageDetectionJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeDominantLanguageDetectionJobInput: Swift.Equatable {
    /// The identifier that Amazon Comprehend generated for the job. The operation returns this identifier in its response.
    /// This member is required.
    public var jobId: Swift.String?

    public init (
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

struct DescribeDominantLanguageDetectionJobInputBody: Swift.Equatable {
    let jobId: Swift.String?
}

extension DescribeDominantLanguageDetectionJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
    }
}

extension DescribeDominantLanguageDetectionJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeDominantLanguageDetectionJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "JobNotFoundException" : self = .jobNotFoundException(try JobNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeDominantLanguageDetectionJobOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case jobNotFoundException(JobNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeDominantLanguageDetectionJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeDominantLanguageDetectionJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dominantLanguageDetectionJobProperties = output.dominantLanguageDetectionJobProperties
        } else {
            self.dominantLanguageDetectionJobProperties = nil
        }
    }
}

public struct DescribeDominantLanguageDetectionJobOutputResponse: Swift.Equatable {
    /// An object that contains the properties associated with a dominant language detection job.
    public var dominantLanguageDetectionJobProperties: ComprehendClientTypes.DominantLanguageDetectionJobProperties?

    public init (
        dominantLanguageDetectionJobProperties: ComprehendClientTypes.DominantLanguageDetectionJobProperties? = nil
    )
    {
        self.dominantLanguageDetectionJobProperties = dominantLanguageDetectionJobProperties
    }
}

struct DescribeDominantLanguageDetectionJobOutputResponseBody: Swift.Equatable {
    let dominantLanguageDetectionJobProperties: ComprehendClientTypes.DominantLanguageDetectionJobProperties?
}

extension DescribeDominantLanguageDetectionJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dominantLanguageDetectionJobProperties = "DominantLanguageDetectionJobProperties"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dominantLanguageDetectionJobPropertiesDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.DominantLanguageDetectionJobProperties.self, forKey: .dominantLanguageDetectionJobProperties)
        dominantLanguageDetectionJobProperties = dominantLanguageDetectionJobPropertiesDecoded
    }
}

extension DescribeEndpointInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointArn = "EndpointArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endpointArn = self.endpointArn {
            try encodeContainer.encode(endpointArn, forKey: .endpointArn)
        }
    }
}

extension DescribeEndpointInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeEndpointInput: Swift.Equatable {
    /// The Amazon Resource Number (ARN) of the endpoint being described.
    /// This member is required.
    public var endpointArn: Swift.String?

    public init (
        endpointArn: Swift.String? = nil
    )
    {
        self.endpointArn = endpointArn
    }
}

struct DescribeEndpointInputBody: Swift.Equatable {
    let endpointArn: Swift.String?
}

extension DescribeEndpointInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointArn = "EndpointArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointArn)
        endpointArn = endpointArnDecoded
    }
}

extension DescribeEndpointOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeEndpointOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeEndpointOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeEndpointOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeEndpointOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.endpointProperties = output.endpointProperties
        } else {
            self.endpointProperties = nil
        }
    }
}

public struct DescribeEndpointOutputResponse: Swift.Equatable {
    /// Describes information associated with the specific endpoint.
    public var endpointProperties: ComprehendClientTypes.EndpointProperties?

    public init (
        endpointProperties: ComprehendClientTypes.EndpointProperties? = nil
    )
    {
        self.endpointProperties = endpointProperties
    }
}

struct DescribeEndpointOutputResponseBody: Swift.Equatable {
    let endpointProperties: ComprehendClientTypes.EndpointProperties?
}

extension DescribeEndpointOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointProperties = "EndpointProperties"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointPropertiesDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.EndpointProperties.self, forKey: .endpointProperties)
        endpointProperties = endpointPropertiesDecoded
    }
}

extension DescribeEntitiesDetectionJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
    }
}

extension DescribeEntitiesDetectionJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeEntitiesDetectionJobInput: Swift.Equatable {
    /// The identifier that Amazon Comprehend generated for the job. The operation returns this identifier in its response.
    /// This member is required.
    public var jobId: Swift.String?

    public init (
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

struct DescribeEntitiesDetectionJobInputBody: Swift.Equatable {
    let jobId: Swift.String?
}

extension DescribeEntitiesDetectionJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
    }
}

extension DescribeEntitiesDetectionJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeEntitiesDetectionJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "JobNotFoundException" : self = .jobNotFoundException(try JobNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeEntitiesDetectionJobOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case jobNotFoundException(JobNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeEntitiesDetectionJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeEntitiesDetectionJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.entitiesDetectionJobProperties = output.entitiesDetectionJobProperties
        } else {
            self.entitiesDetectionJobProperties = nil
        }
    }
}

public struct DescribeEntitiesDetectionJobOutputResponse: Swift.Equatable {
    /// An object that contains the properties associated with an entities detection job.
    public var entitiesDetectionJobProperties: ComprehendClientTypes.EntitiesDetectionJobProperties?

    public init (
        entitiesDetectionJobProperties: ComprehendClientTypes.EntitiesDetectionJobProperties? = nil
    )
    {
        self.entitiesDetectionJobProperties = entitiesDetectionJobProperties
    }
}

struct DescribeEntitiesDetectionJobOutputResponseBody: Swift.Equatable {
    let entitiesDetectionJobProperties: ComprehendClientTypes.EntitiesDetectionJobProperties?
}

extension DescribeEntitiesDetectionJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entitiesDetectionJobProperties = "EntitiesDetectionJobProperties"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let entitiesDetectionJobPropertiesDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.EntitiesDetectionJobProperties.self, forKey: .entitiesDetectionJobProperties)
        entitiesDetectionJobProperties = entitiesDetectionJobPropertiesDecoded
    }
}

extension DescribeEntityRecognizerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entityRecognizerArn = "EntityRecognizerArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let entityRecognizerArn = self.entityRecognizerArn {
            try encodeContainer.encode(entityRecognizerArn, forKey: .entityRecognizerArn)
        }
    }
}

extension DescribeEntityRecognizerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeEntityRecognizerInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) that identifies the entity recognizer.
    /// This member is required.
    public var entityRecognizerArn: Swift.String?

    public init (
        entityRecognizerArn: Swift.String? = nil
    )
    {
        self.entityRecognizerArn = entityRecognizerArn
    }
}

struct DescribeEntityRecognizerInputBody: Swift.Equatable {
    let entityRecognizerArn: Swift.String?
}

extension DescribeEntityRecognizerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entityRecognizerArn = "EntityRecognizerArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let entityRecognizerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .entityRecognizerArn)
        entityRecognizerArn = entityRecognizerArnDecoded
    }
}

extension DescribeEntityRecognizerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeEntityRecognizerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeEntityRecognizerOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeEntityRecognizerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeEntityRecognizerOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.entityRecognizerProperties = output.entityRecognizerProperties
        } else {
            self.entityRecognizerProperties = nil
        }
    }
}

public struct DescribeEntityRecognizerOutputResponse: Swift.Equatable {
    /// Describes information associated with an entity recognizer.
    public var entityRecognizerProperties: ComprehendClientTypes.EntityRecognizerProperties?

    public init (
        entityRecognizerProperties: ComprehendClientTypes.EntityRecognizerProperties? = nil
    )
    {
        self.entityRecognizerProperties = entityRecognizerProperties
    }
}

struct DescribeEntityRecognizerOutputResponseBody: Swift.Equatable {
    let entityRecognizerProperties: ComprehendClientTypes.EntityRecognizerProperties?
}

extension DescribeEntityRecognizerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entityRecognizerProperties = "EntityRecognizerProperties"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let entityRecognizerPropertiesDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.EntityRecognizerProperties.self, forKey: .entityRecognizerProperties)
        entityRecognizerProperties = entityRecognizerPropertiesDecoded
    }
}

extension DescribeEventsDetectionJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
    }
}

extension DescribeEventsDetectionJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeEventsDetectionJobInput: Swift.Equatable {
    /// The identifier of the events detection job.
    /// This member is required.
    public var jobId: Swift.String?

    public init (
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

struct DescribeEventsDetectionJobInputBody: Swift.Equatable {
    let jobId: Swift.String?
}

extension DescribeEventsDetectionJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
    }
}

extension DescribeEventsDetectionJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeEventsDetectionJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "JobNotFoundException" : self = .jobNotFoundException(try JobNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeEventsDetectionJobOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case jobNotFoundException(JobNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeEventsDetectionJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeEventsDetectionJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.eventsDetectionJobProperties = output.eventsDetectionJobProperties
        } else {
            self.eventsDetectionJobProperties = nil
        }
    }
}

public struct DescribeEventsDetectionJobOutputResponse: Swift.Equatable {
    /// An object that contains the properties associated with an event detection job.
    public var eventsDetectionJobProperties: ComprehendClientTypes.EventsDetectionJobProperties?

    public init (
        eventsDetectionJobProperties: ComprehendClientTypes.EventsDetectionJobProperties? = nil
    )
    {
        self.eventsDetectionJobProperties = eventsDetectionJobProperties
    }
}

struct DescribeEventsDetectionJobOutputResponseBody: Swift.Equatable {
    let eventsDetectionJobProperties: ComprehendClientTypes.EventsDetectionJobProperties?
}

extension DescribeEventsDetectionJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventsDetectionJobProperties = "EventsDetectionJobProperties"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventsDetectionJobPropertiesDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.EventsDetectionJobProperties.self, forKey: .eventsDetectionJobProperties)
        eventsDetectionJobProperties = eventsDetectionJobPropertiesDecoded
    }
}

extension DescribeKeyPhrasesDetectionJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
    }
}

extension DescribeKeyPhrasesDetectionJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeKeyPhrasesDetectionJobInput: Swift.Equatable {
    /// The identifier that Amazon Comprehend generated for the job. The operation returns this identifier in its response.
    /// This member is required.
    public var jobId: Swift.String?

    public init (
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

struct DescribeKeyPhrasesDetectionJobInputBody: Swift.Equatable {
    let jobId: Swift.String?
}

extension DescribeKeyPhrasesDetectionJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
    }
}

extension DescribeKeyPhrasesDetectionJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeKeyPhrasesDetectionJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "JobNotFoundException" : self = .jobNotFoundException(try JobNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeKeyPhrasesDetectionJobOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case jobNotFoundException(JobNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeKeyPhrasesDetectionJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeKeyPhrasesDetectionJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.keyPhrasesDetectionJobProperties = output.keyPhrasesDetectionJobProperties
        } else {
            self.keyPhrasesDetectionJobProperties = nil
        }
    }
}

public struct DescribeKeyPhrasesDetectionJobOutputResponse: Swift.Equatable {
    /// An object that contains the properties associated with a key phrases detection job.
    public var keyPhrasesDetectionJobProperties: ComprehendClientTypes.KeyPhrasesDetectionJobProperties?

    public init (
        keyPhrasesDetectionJobProperties: ComprehendClientTypes.KeyPhrasesDetectionJobProperties? = nil
    )
    {
        self.keyPhrasesDetectionJobProperties = keyPhrasesDetectionJobProperties
    }
}

struct DescribeKeyPhrasesDetectionJobOutputResponseBody: Swift.Equatable {
    let keyPhrasesDetectionJobProperties: ComprehendClientTypes.KeyPhrasesDetectionJobProperties?
}

extension DescribeKeyPhrasesDetectionJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyPhrasesDetectionJobProperties = "KeyPhrasesDetectionJobProperties"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyPhrasesDetectionJobPropertiesDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.KeyPhrasesDetectionJobProperties.self, forKey: .keyPhrasesDetectionJobProperties)
        keyPhrasesDetectionJobProperties = keyPhrasesDetectionJobPropertiesDecoded
    }
}

extension DescribePiiEntitiesDetectionJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
    }
}

extension DescribePiiEntitiesDetectionJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribePiiEntitiesDetectionJobInput: Swift.Equatable {
    /// The identifier that Amazon Comprehend generated for the job. The operation returns this identifier in its response.
    /// This member is required.
    public var jobId: Swift.String?

    public init (
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

struct DescribePiiEntitiesDetectionJobInputBody: Swift.Equatable {
    let jobId: Swift.String?
}

extension DescribePiiEntitiesDetectionJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
    }
}

extension DescribePiiEntitiesDetectionJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribePiiEntitiesDetectionJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "JobNotFoundException" : self = .jobNotFoundException(try JobNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribePiiEntitiesDetectionJobOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case jobNotFoundException(JobNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribePiiEntitiesDetectionJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribePiiEntitiesDetectionJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.piiEntitiesDetectionJobProperties = output.piiEntitiesDetectionJobProperties
        } else {
            self.piiEntitiesDetectionJobProperties = nil
        }
    }
}

public struct DescribePiiEntitiesDetectionJobOutputResponse: Swift.Equatable {
    /// Provides information about a PII entities detection job.
    public var piiEntitiesDetectionJobProperties: ComprehendClientTypes.PiiEntitiesDetectionJobProperties?

    public init (
        piiEntitiesDetectionJobProperties: ComprehendClientTypes.PiiEntitiesDetectionJobProperties? = nil
    )
    {
        self.piiEntitiesDetectionJobProperties = piiEntitiesDetectionJobProperties
    }
}

struct DescribePiiEntitiesDetectionJobOutputResponseBody: Swift.Equatable {
    let piiEntitiesDetectionJobProperties: ComprehendClientTypes.PiiEntitiesDetectionJobProperties?
}

extension DescribePiiEntitiesDetectionJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case piiEntitiesDetectionJobProperties = "PiiEntitiesDetectionJobProperties"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let piiEntitiesDetectionJobPropertiesDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.PiiEntitiesDetectionJobProperties.self, forKey: .piiEntitiesDetectionJobProperties)
        piiEntitiesDetectionJobProperties = piiEntitiesDetectionJobPropertiesDecoded
    }
}

extension DescribeResourcePolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

extension DescribeResourcePolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeResourcePolicyInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the custom model version that has the resource policy.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct DescribeResourcePolicyInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
}

extension DescribeResourcePolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension DescribeResourcePolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeResourcePolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeResourcePolicyOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeResourcePolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeResourcePolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.creationTime = output.creationTime
            self.lastModifiedTime = output.lastModifiedTime
            self.policyRevisionId = output.policyRevisionId
            self.resourcePolicy = output.resourcePolicy
        } else {
            self.creationTime = nil
            self.lastModifiedTime = nil
            self.policyRevisionId = nil
            self.resourcePolicy = nil
        }
    }
}

public struct DescribeResourcePolicyOutputResponse: Swift.Equatable {
    /// The time at which the policy was created.
    public var creationTime: ClientRuntime.Date?
    /// The time at which the policy was last modified.
    public var lastModifiedTime: ClientRuntime.Date?
    /// The revision ID of the policy. Each time you modify a policy, Amazon Comprehend assigns a new revision ID, and it deletes the prior version of the policy.
    public var policyRevisionId: Swift.String?
    /// The JSON body of the resource-based policy.
    public var resourcePolicy: Swift.String?

    public init (
        creationTime: ClientRuntime.Date? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        policyRevisionId: Swift.String? = nil,
        resourcePolicy: Swift.String? = nil
    )
    {
        self.creationTime = creationTime
        self.lastModifiedTime = lastModifiedTime
        self.policyRevisionId = policyRevisionId
        self.resourcePolicy = resourcePolicy
    }
}

struct DescribeResourcePolicyOutputResponseBody: Swift.Equatable {
    let resourcePolicy: Swift.String?
    let creationTime: ClientRuntime.Date?
    let lastModifiedTime: ClientRuntime.Date?
    let policyRevisionId: Swift.String?
}

extension DescribeResourcePolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case lastModifiedTime = "LastModifiedTime"
        case policyRevisionId = "PolicyRevisionId"
        case resourcePolicy = "ResourcePolicy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourcePolicyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourcePolicy)
        resourcePolicy = resourcePolicyDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let policyRevisionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyRevisionId)
        policyRevisionId = policyRevisionIdDecoded
    }
}

extension DescribeSentimentDetectionJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
    }
}

extension DescribeSentimentDetectionJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeSentimentDetectionJobInput: Swift.Equatable {
    /// The identifier that Amazon Comprehend generated for the job. The operation returns this identifier in its response.
    /// This member is required.
    public var jobId: Swift.String?

    public init (
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

struct DescribeSentimentDetectionJobInputBody: Swift.Equatable {
    let jobId: Swift.String?
}

extension DescribeSentimentDetectionJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
    }
}

extension DescribeSentimentDetectionJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeSentimentDetectionJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "JobNotFoundException" : self = .jobNotFoundException(try JobNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeSentimentDetectionJobOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case jobNotFoundException(JobNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeSentimentDetectionJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeSentimentDetectionJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.sentimentDetectionJobProperties = output.sentimentDetectionJobProperties
        } else {
            self.sentimentDetectionJobProperties = nil
        }
    }
}

public struct DescribeSentimentDetectionJobOutputResponse: Swift.Equatable {
    /// An object that contains the properties associated with a sentiment detection job.
    public var sentimentDetectionJobProperties: ComprehendClientTypes.SentimentDetectionJobProperties?

    public init (
        sentimentDetectionJobProperties: ComprehendClientTypes.SentimentDetectionJobProperties? = nil
    )
    {
        self.sentimentDetectionJobProperties = sentimentDetectionJobProperties
    }
}

struct DescribeSentimentDetectionJobOutputResponseBody: Swift.Equatable {
    let sentimentDetectionJobProperties: ComprehendClientTypes.SentimentDetectionJobProperties?
}

extension DescribeSentimentDetectionJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sentimentDetectionJobProperties = "SentimentDetectionJobProperties"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sentimentDetectionJobPropertiesDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.SentimentDetectionJobProperties.self, forKey: .sentimentDetectionJobProperties)
        sentimentDetectionJobProperties = sentimentDetectionJobPropertiesDecoded
    }
}

extension DescribeTargetedSentimentDetectionJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
    }
}

extension DescribeTargetedSentimentDetectionJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeTargetedSentimentDetectionJobInput: Swift.Equatable {
    /// The identifier that Amazon Comprehend generated for the job. The operation returns this identifier in its response.
    /// This member is required.
    public var jobId: Swift.String?

    public init (
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

struct DescribeTargetedSentimentDetectionJobInputBody: Swift.Equatable {
    let jobId: Swift.String?
}

extension DescribeTargetedSentimentDetectionJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
    }
}

extension DescribeTargetedSentimentDetectionJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeTargetedSentimentDetectionJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "JobNotFoundException" : self = .jobNotFoundException(try JobNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeTargetedSentimentDetectionJobOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case jobNotFoundException(JobNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeTargetedSentimentDetectionJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeTargetedSentimentDetectionJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.targetedSentimentDetectionJobProperties = output.targetedSentimentDetectionJobProperties
        } else {
            self.targetedSentimentDetectionJobProperties = nil
        }
    }
}

public struct DescribeTargetedSentimentDetectionJobOutputResponse: Swift.Equatable {
    /// An object that contains the properties associated with a targeted sentiment detection job.
    public var targetedSentimentDetectionJobProperties: ComprehendClientTypes.TargetedSentimentDetectionJobProperties?

    public init (
        targetedSentimentDetectionJobProperties: ComprehendClientTypes.TargetedSentimentDetectionJobProperties? = nil
    )
    {
        self.targetedSentimentDetectionJobProperties = targetedSentimentDetectionJobProperties
    }
}

struct DescribeTargetedSentimentDetectionJobOutputResponseBody: Swift.Equatable {
    let targetedSentimentDetectionJobProperties: ComprehendClientTypes.TargetedSentimentDetectionJobProperties?
}

extension DescribeTargetedSentimentDetectionJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case targetedSentimentDetectionJobProperties = "TargetedSentimentDetectionJobProperties"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetedSentimentDetectionJobPropertiesDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.TargetedSentimentDetectionJobProperties.self, forKey: .targetedSentimentDetectionJobProperties)
        targetedSentimentDetectionJobProperties = targetedSentimentDetectionJobPropertiesDecoded
    }
}

extension DescribeTopicsDetectionJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
    }
}

extension DescribeTopicsDetectionJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeTopicsDetectionJobInput: Swift.Equatable {
    /// The identifier assigned by the user to the detection job.
    /// This member is required.
    public var jobId: Swift.String?

    public init (
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

struct DescribeTopicsDetectionJobInputBody: Swift.Equatable {
    let jobId: Swift.String?
}

extension DescribeTopicsDetectionJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
    }
}

extension DescribeTopicsDetectionJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeTopicsDetectionJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "JobNotFoundException" : self = .jobNotFoundException(try JobNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeTopicsDetectionJobOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case jobNotFoundException(JobNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeTopicsDetectionJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeTopicsDetectionJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.topicsDetectionJobProperties = output.topicsDetectionJobProperties
        } else {
            self.topicsDetectionJobProperties = nil
        }
    }
}

public struct DescribeTopicsDetectionJobOutputResponse: Swift.Equatable {
    /// The list of properties for the requested job.
    public var topicsDetectionJobProperties: ComprehendClientTypes.TopicsDetectionJobProperties?

    public init (
        topicsDetectionJobProperties: ComprehendClientTypes.TopicsDetectionJobProperties? = nil
    )
    {
        self.topicsDetectionJobProperties = topicsDetectionJobProperties
    }
}

struct DescribeTopicsDetectionJobOutputResponseBody: Swift.Equatable {
    let topicsDetectionJobProperties: ComprehendClientTypes.TopicsDetectionJobProperties?
}

extension DescribeTopicsDetectionJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case topicsDetectionJobProperties = "TopicsDetectionJobProperties"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let topicsDetectionJobPropertiesDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.TopicsDetectionJobProperties.self, forKey: .topicsDetectionJobProperties)
        topicsDetectionJobProperties = topicsDetectionJobPropertiesDecoded
    }
}

extension DetectDominantLanguageInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetectDominantLanguageInput(text: \"CONTENT_REDACTED\")"}
}

extension DetectDominantLanguageInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case text = "Text"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let text = self.text {
            try encodeContainer.encode(text, forKey: .text)
        }
    }
}

extension DetectDominantLanguageInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DetectDominantLanguageInput: Swift.Equatable {
    /// A UTF-8 text string. The string must contain at least 20 characters. The maximum string size is 100 KB.
    /// This member is required.
    public var text: Swift.String?

    public init (
        text: Swift.String? = nil
    )
    {
        self.text = text
    }
}

struct DetectDominantLanguageInputBody: Swift.Equatable {
    let text: Swift.String?
}

extension DetectDominantLanguageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case text = "Text"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let textDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .text)
        text = textDecoded
    }
}

extension DetectDominantLanguageOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DetectDominantLanguageOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TextSizeLimitExceededException" : self = .textSizeLimitExceededException(try TextSizeLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DetectDominantLanguageOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case textSizeLimitExceededException(TextSizeLimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DetectDominantLanguageOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

extension DetectDominantLanguageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DetectDominantLanguageOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.languages = output.languages
        } else {
            self.languages = nil
        }
    }
}

public struct DetectDominantLanguageOutputResponse: Swift.Equatable {
    /// The languages that Amazon Comprehend detected in the input text. For each language, the response returns the RFC 5646 language code and the level of confidence that Amazon Comprehend has in the accuracy of its inference. For more information about RFC 5646, see [Tags for Identifying Languages](https://tools.ietf.org/html/rfc5646) on the IETF Tools web site.
    public var languages: [ComprehendClientTypes.DominantLanguage]?

    public init (
        languages: [ComprehendClientTypes.DominantLanguage]? = nil
    )
    {
        self.languages = languages
    }
}

struct DetectDominantLanguageOutputResponseBody: Swift.Equatable {
    let languages: [ComprehendClientTypes.DominantLanguage]?
}

extension DetectDominantLanguageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languages = "Languages"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let languagesContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.DominantLanguage?].self, forKey: .languages)
        var languagesDecoded0:[ComprehendClientTypes.DominantLanguage]? = nil
        if let languagesContainer = languagesContainer {
            languagesDecoded0 = [ComprehendClientTypes.DominantLanguage]()
            for structure0 in languagesContainer {
                if let structure0 = structure0 {
                    languagesDecoded0?.append(structure0)
                }
            }
        }
        languages = languagesDecoded0
    }
}

extension DetectEntitiesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetectEntitiesInput(bytes: \(Swift.String(describing: bytes)), documentReaderConfig: \(Swift.String(describing: documentReaderConfig)), endpointArn: \(Swift.String(describing: endpointArn)), languageCode: \(Swift.String(describing: languageCode)), text: \"CONTENT_REDACTED\")"}
}

extension DetectEntitiesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bytes = "Bytes"
        case documentReaderConfig = "DocumentReaderConfig"
        case endpointArn = "EndpointArn"
        case languageCode = "LanguageCode"
        case text = "Text"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bytes = self.bytes {
            try encodeContainer.encode(bytes.base64EncodedString(), forKey: .bytes)
        }
        if let documentReaderConfig = self.documentReaderConfig {
            try encodeContainer.encode(documentReaderConfig, forKey: .documentReaderConfig)
        }
        if let endpointArn = self.endpointArn {
            try encodeContainer.encode(endpointArn, forKey: .endpointArn)
        }
        if let languageCode = self.languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let text = self.text {
            try encodeContainer.encode(text, forKey: .text)
        }
    }
}

extension DetectEntitiesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DetectEntitiesInput: Swift.Equatable {
    /// This field applies only when you use a custom entity recognition model that was trained with PDF annotations. For other cases, enter your text input in the Text field. Use the Bytes parameter to input a text, PDF, Word or image file. Using a plain-text file in the Bytes parameter is equivelent to using the Text parameter (the Entities field in the response is identical). You can also use the Bytes parameter to input an Amazon Textract DetectDocumentText or AnalyzeDocument output file. Provide the input document as a sequence of base64-encoded bytes. If your code uses an Amazon Web Services SDK to detect entities, the SDK may encode the document file bytes for you. The maximum length of this field depends on the input document type. For details, see [ Inputs for real-time custom analysis](https://docs.aws.amazon.com/comprehend/latest/dg/idp-inputs-sync.html) in the Comprehend Developer Guide. If you use the Bytes parameter, do not use the Text parameter.
    public var bytes: ClientRuntime.Data?
    /// Provides configuration parameters to override the default actions for extracting text from PDF documents and image files.
    public var documentReaderConfig: ComprehendClientTypes.DocumentReaderConfig?
    /// The Amazon Resource Name of an endpoint that is associated with a custom entity recognition model. Provide an endpoint if you want to detect entities by using your own custom model instead of the default model that is used by Amazon Comprehend. If you specify an endpoint, Amazon Comprehend uses the language of your custom model, and it ignores any language code that you provide in your request. For information about endpoints, see [Managing endpoints](https://docs.aws.amazon.com/comprehend/latest/dg/manage-endpoints.html).
    public var endpointArn: Swift.String?
    /// The language of the input documents. You can specify any of the primary languages supported by Amazon Comprehend. If your request includes the endpoint for a custom entity recognition model, Amazon Comprehend uses the language of your custom model, and it ignores any language code that you specify here. All input documents must be in the same language.
    public var languageCode: ComprehendClientTypes.LanguageCode?
    /// A UTF-8 text string. The maximum string size is 100 KB. If you enter text using this parameter, do not use the Bytes parameter.
    public var text: Swift.String?

    public init (
        bytes: ClientRuntime.Data? = nil,
        documentReaderConfig: ComprehendClientTypes.DocumentReaderConfig? = nil,
        endpointArn: Swift.String? = nil,
        languageCode: ComprehendClientTypes.LanguageCode? = nil,
        text: Swift.String? = nil
    )
    {
        self.bytes = bytes
        self.documentReaderConfig = documentReaderConfig
        self.endpointArn = endpointArn
        self.languageCode = languageCode
        self.text = text
    }
}

struct DetectEntitiesInputBody: Swift.Equatable {
    let text: Swift.String?
    let languageCode: ComprehendClientTypes.LanguageCode?
    let endpointArn: Swift.String?
    let bytes: ClientRuntime.Data?
    let documentReaderConfig: ComprehendClientTypes.DocumentReaderConfig?
}

extension DetectEntitiesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bytes = "Bytes"
        case documentReaderConfig = "DocumentReaderConfig"
        case endpointArn = "EndpointArn"
        case languageCode = "LanguageCode"
        case text = "Text"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let textDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .text)
        text = textDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let endpointArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointArn)
        endpointArn = endpointArnDecoded
        let bytesDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .bytes)
        bytes = bytesDecoded
        let documentReaderConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.DocumentReaderConfig.self, forKey: .documentReaderConfig)
        documentReaderConfig = documentReaderConfigDecoded
    }
}

extension DetectEntitiesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DetectEntitiesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceUnavailableException" : self = .resourceUnavailableException(try ResourceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TextSizeLimitExceededException" : self = .textSizeLimitExceededException(try TextSizeLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedLanguageException" : self = .unsupportedLanguageException(try UnsupportedLanguageException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DetectEntitiesOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case resourceUnavailableException(ResourceUnavailableException)
    case textSizeLimitExceededException(TextSizeLimitExceededException)
    case unsupportedLanguageException(UnsupportedLanguageException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DetectEntitiesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

extension DetectEntitiesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DetectEntitiesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.blocks = output.blocks
            self.documentMetadata = output.documentMetadata
            self.documentType = output.documentType
            self.entities = output.entities
            self.errors = output.errors
        } else {
            self.blocks = nil
            self.documentMetadata = nil
            self.documentType = nil
            self.entities = nil
            self.errors = nil
        }
    }
}

public struct DetectEntitiesOutputResponse: Swift.Equatable {
    /// Information about each block of text in the input document. Blocks are nested. A page block contains a block for each line of text, which contains a block for each word. The Block content for a Word input document does not include a Geometry field. The Block field is not present in the response for plain-text inputs.
    public var blocks: [ComprehendClientTypes.Block]?
    /// Information about the document, discovered during text extraction. This field is present in the response only if your request used the Byte parameter.
    public var documentMetadata: ComprehendClientTypes.DocumentMetadata?
    /// The document type for each page in the input document. This field is present in the response only if your request used the Byte parameter.
    public var documentType: [ComprehendClientTypes.DocumentTypeListItem]?
    /// A collection of entities identified in the input text. For each entity, the response provides the entity text, entity type, where the entity text begins and ends, and the level of confidence that Amazon Comprehend has in the detection. If your request uses a custom entity recognition model, Amazon Comprehend detects the entities that the model is trained to recognize. Otherwise, it detects the default entity types. For a list of default entity types, see [Entities](https://docs.aws.amazon.com/comprehend/latest/dg/how-entities.html) in the Comprehend Developer Guide.
    public var entities: [ComprehendClientTypes.Entity]?
    /// Page-level errors that the system detected while processing the input document. The field is empty if the system encountered no errors.
    public var errors: [ComprehendClientTypes.ErrorsListItem]?

    public init (
        blocks: [ComprehendClientTypes.Block]? = nil,
        documentMetadata: ComprehendClientTypes.DocumentMetadata? = nil,
        documentType: [ComprehendClientTypes.DocumentTypeListItem]? = nil,
        entities: [ComprehendClientTypes.Entity]? = nil,
        errors: [ComprehendClientTypes.ErrorsListItem]? = nil
    )
    {
        self.blocks = blocks
        self.documentMetadata = documentMetadata
        self.documentType = documentType
        self.entities = entities
        self.errors = errors
    }
}

struct DetectEntitiesOutputResponseBody: Swift.Equatable {
    let entities: [ComprehendClientTypes.Entity]?
    let documentMetadata: ComprehendClientTypes.DocumentMetadata?
    let documentType: [ComprehendClientTypes.DocumentTypeListItem]?
    let blocks: [ComprehendClientTypes.Block]?
    let errors: [ComprehendClientTypes.ErrorsListItem]?
}

extension DetectEntitiesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blocks = "Blocks"
        case documentMetadata = "DocumentMetadata"
        case documentType = "DocumentType"
        case entities = "Entities"
        case errors = "Errors"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let entitiesContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.Entity?].self, forKey: .entities)
        var entitiesDecoded0:[ComprehendClientTypes.Entity]? = nil
        if let entitiesContainer = entitiesContainer {
            entitiesDecoded0 = [ComprehendClientTypes.Entity]()
            for structure0 in entitiesContainer {
                if let structure0 = structure0 {
                    entitiesDecoded0?.append(structure0)
                }
            }
        }
        entities = entitiesDecoded0
        let documentMetadataDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.DocumentMetadata.self, forKey: .documentMetadata)
        documentMetadata = documentMetadataDecoded
        let documentTypeContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.DocumentTypeListItem?].self, forKey: .documentType)
        var documentTypeDecoded0:[ComprehendClientTypes.DocumentTypeListItem]? = nil
        if let documentTypeContainer = documentTypeContainer {
            documentTypeDecoded0 = [ComprehendClientTypes.DocumentTypeListItem]()
            for structure0 in documentTypeContainer {
                if let structure0 = structure0 {
                    documentTypeDecoded0?.append(structure0)
                }
            }
        }
        documentType = documentTypeDecoded0
        let blocksContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.Block?].self, forKey: .blocks)
        var blocksDecoded0:[ComprehendClientTypes.Block]? = nil
        if let blocksContainer = blocksContainer {
            blocksDecoded0 = [ComprehendClientTypes.Block]()
            for structure0 in blocksContainer {
                if let structure0 = structure0 {
                    blocksDecoded0?.append(structure0)
                }
            }
        }
        blocks = blocksDecoded0
        let errorsContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.ErrorsListItem?].self, forKey: .errors)
        var errorsDecoded0:[ComprehendClientTypes.ErrorsListItem]? = nil
        if let errorsContainer = errorsContainer {
            errorsDecoded0 = [ComprehendClientTypes.ErrorsListItem]()
            for structure0 in errorsContainer {
                if let structure0 = structure0 {
                    errorsDecoded0?.append(structure0)
                }
            }
        }
        errors = errorsDecoded0
    }
}

extension DetectKeyPhrasesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetectKeyPhrasesInput(languageCode: \(Swift.String(describing: languageCode)), text: \"CONTENT_REDACTED\")"}
}

extension DetectKeyPhrasesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languageCode = "LanguageCode"
        case text = "Text"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let languageCode = self.languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let text = self.text {
            try encodeContainer.encode(text, forKey: .text)
        }
    }
}

extension DetectKeyPhrasesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DetectKeyPhrasesInput: Swift.Equatable {
    /// The language of the input documents. You can specify any of the primary languages supported by Amazon Comprehend. All documents must be in the same language.
    /// This member is required.
    public var languageCode: ComprehendClientTypes.LanguageCode?
    /// A UTF-8 text string. The string must contain less than 100 KB of UTF-8 encoded characters.
    /// This member is required.
    public var text: Swift.String?

    public init (
        languageCode: ComprehendClientTypes.LanguageCode? = nil,
        text: Swift.String? = nil
    )
    {
        self.languageCode = languageCode
        self.text = text
    }
}

struct DetectKeyPhrasesInputBody: Swift.Equatable {
    let text: Swift.String?
    let languageCode: ComprehendClientTypes.LanguageCode?
}

extension DetectKeyPhrasesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languageCode = "LanguageCode"
        case text = "Text"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let textDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .text)
        text = textDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
    }
}

extension DetectKeyPhrasesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DetectKeyPhrasesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TextSizeLimitExceededException" : self = .textSizeLimitExceededException(try TextSizeLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedLanguageException" : self = .unsupportedLanguageException(try UnsupportedLanguageException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DetectKeyPhrasesOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case textSizeLimitExceededException(TextSizeLimitExceededException)
    case unsupportedLanguageException(UnsupportedLanguageException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DetectKeyPhrasesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

extension DetectKeyPhrasesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DetectKeyPhrasesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.keyPhrases = output.keyPhrases
        } else {
            self.keyPhrases = nil
        }
    }
}

public struct DetectKeyPhrasesOutputResponse: Swift.Equatable {
    /// A collection of key phrases that Amazon Comprehend identified in the input text. For each key phrase, the response provides the text of the key phrase, where the key phrase begins and ends, and the level of confidence that Amazon Comprehend has in the accuracy of the detection.
    public var keyPhrases: [ComprehendClientTypes.KeyPhrase]?

    public init (
        keyPhrases: [ComprehendClientTypes.KeyPhrase]? = nil
    )
    {
        self.keyPhrases = keyPhrases
    }
}

struct DetectKeyPhrasesOutputResponseBody: Swift.Equatable {
    let keyPhrases: [ComprehendClientTypes.KeyPhrase]?
}

extension DetectKeyPhrasesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyPhrases = "KeyPhrases"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyPhrasesContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.KeyPhrase?].self, forKey: .keyPhrases)
        var keyPhrasesDecoded0:[ComprehendClientTypes.KeyPhrase]? = nil
        if let keyPhrasesContainer = keyPhrasesContainer {
            keyPhrasesDecoded0 = [ComprehendClientTypes.KeyPhrase]()
            for structure0 in keyPhrasesContainer {
                if let structure0 = structure0 {
                    keyPhrasesDecoded0?.append(structure0)
                }
            }
        }
        keyPhrases = keyPhrasesDecoded0
    }
}

extension DetectPiiEntitiesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languageCode = "LanguageCode"
        case text = "Text"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let languageCode = self.languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let text = self.text {
            try encodeContainer.encode(text, forKey: .text)
        }
    }
}

extension DetectPiiEntitiesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DetectPiiEntitiesInput: Swift.Equatable {
    /// The language of the input documents. Currently, English is the only valid language.
    /// This member is required.
    public var languageCode: ComprehendClientTypes.LanguageCode?
    /// A UTF-8 text string. The maximum string size is 100 KB.
    /// This member is required.
    public var text: Swift.String?

    public init (
        languageCode: ComprehendClientTypes.LanguageCode? = nil,
        text: Swift.String? = nil
    )
    {
        self.languageCode = languageCode
        self.text = text
    }
}

struct DetectPiiEntitiesInputBody: Swift.Equatable {
    let text: Swift.String?
    let languageCode: ComprehendClientTypes.LanguageCode?
}

extension DetectPiiEntitiesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languageCode = "LanguageCode"
        case text = "Text"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let textDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .text)
        text = textDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
    }
}

extension DetectPiiEntitiesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DetectPiiEntitiesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TextSizeLimitExceededException" : self = .textSizeLimitExceededException(try TextSizeLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedLanguageException" : self = .unsupportedLanguageException(try UnsupportedLanguageException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DetectPiiEntitiesOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case textSizeLimitExceededException(TextSizeLimitExceededException)
    case unsupportedLanguageException(UnsupportedLanguageException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DetectPiiEntitiesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DetectPiiEntitiesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.entities = output.entities
        } else {
            self.entities = nil
        }
    }
}

public struct DetectPiiEntitiesOutputResponse: Swift.Equatable {
    /// A collection of PII entities identified in the input text. For each entity, the response provides the entity type, where the entity text begins and ends, and the level of confidence that Amazon Comprehend has in the detection.
    public var entities: [ComprehendClientTypes.PiiEntity]?

    public init (
        entities: [ComprehendClientTypes.PiiEntity]? = nil
    )
    {
        self.entities = entities
    }
}

struct DetectPiiEntitiesOutputResponseBody: Swift.Equatable {
    let entities: [ComprehendClientTypes.PiiEntity]?
}

extension DetectPiiEntitiesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entities = "Entities"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let entitiesContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.PiiEntity?].self, forKey: .entities)
        var entitiesDecoded0:[ComprehendClientTypes.PiiEntity]? = nil
        if let entitiesContainer = entitiesContainer {
            entitiesDecoded0 = [ComprehendClientTypes.PiiEntity]()
            for structure0 in entitiesContainer {
                if let structure0 = structure0 {
                    entitiesDecoded0?.append(structure0)
                }
            }
        }
        entities = entitiesDecoded0
    }
}

extension DetectSentimentInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetectSentimentInput(languageCode: \(Swift.String(describing: languageCode)), text: \"CONTENT_REDACTED\")"}
}

extension DetectSentimentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languageCode = "LanguageCode"
        case text = "Text"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let languageCode = self.languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let text = self.text {
            try encodeContainer.encode(text, forKey: .text)
        }
    }
}

extension DetectSentimentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DetectSentimentInput: Swift.Equatable {
    /// The language of the input documents. You can specify any of the primary languages supported by Amazon Comprehend. All documents must be in the same language.
    /// This member is required.
    public var languageCode: ComprehendClientTypes.LanguageCode?
    /// A UTF-8 text string. The maximum string size is 5 KB. Amazon Comprehend performs real-time sentiment analysis on the first 500 characters of the input text and ignores any additional text in the input.
    /// This member is required.
    public var text: Swift.String?

    public init (
        languageCode: ComprehendClientTypes.LanguageCode? = nil,
        text: Swift.String? = nil
    )
    {
        self.languageCode = languageCode
        self.text = text
    }
}

struct DetectSentimentInputBody: Swift.Equatable {
    let text: Swift.String?
    let languageCode: ComprehendClientTypes.LanguageCode?
}

extension DetectSentimentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languageCode = "LanguageCode"
        case text = "Text"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let textDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .text)
        text = textDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
    }
}

extension DetectSentimentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DetectSentimentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TextSizeLimitExceededException" : self = .textSizeLimitExceededException(try TextSizeLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedLanguageException" : self = .unsupportedLanguageException(try UnsupportedLanguageException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DetectSentimentOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case textSizeLimitExceededException(TextSizeLimitExceededException)
    case unsupportedLanguageException(UnsupportedLanguageException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DetectSentimentOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

extension DetectSentimentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DetectSentimentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.sentiment = output.sentiment
            self.sentimentScore = output.sentimentScore
        } else {
            self.sentiment = nil
            self.sentimentScore = nil
        }
    }
}

public struct DetectSentimentOutputResponse: Swift.Equatable {
    /// The inferred sentiment that Amazon Comprehend has the highest level of confidence in.
    public var sentiment: ComprehendClientTypes.SentimentType?
    /// An object that lists the sentiments, and their corresponding confidence levels.
    public var sentimentScore: ComprehendClientTypes.SentimentScore?

    public init (
        sentiment: ComprehendClientTypes.SentimentType? = nil,
        sentimentScore: ComprehendClientTypes.SentimentScore? = nil
    )
    {
        self.sentiment = sentiment
        self.sentimentScore = sentimentScore
    }
}

struct DetectSentimentOutputResponseBody: Swift.Equatable {
    let sentiment: ComprehendClientTypes.SentimentType?
    let sentimentScore: ComprehendClientTypes.SentimentScore?
}

extension DetectSentimentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sentiment = "Sentiment"
        case sentimentScore = "SentimentScore"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sentimentDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.SentimentType.self, forKey: .sentiment)
        sentiment = sentimentDecoded
        let sentimentScoreDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.SentimentScore.self, forKey: .sentimentScore)
        sentimentScore = sentimentScoreDecoded
    }
}

extension DetectSyntaxInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetectSyntaxInput(languageCode: \(Swift.String(describing: languageCode)), text: \"CONTENT_REDACTED\")"}
}

extension DetectSyntaxInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languageCode = "LanguageCode"
        case text = "Text"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let languageCode = self.languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let text = self.text {
            try encodeContainer.encode(text, forKey: .text)
        }
    }
}

extension DetectSyntaxInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DetectSyntaxInput: Swift.Equatable {
    /// The language code of the input documents. You can specify any of the following languages supported by Amazon Comprehend: German ("de"), English ("en"), Spanish ("es"), French ("fr"), Italian ("it"), or Portuguese ("pt").
    /// This member is required.
    public var languageCode: ComprehendClientTypes.SyntaxLanguageCode?
    /// A UTF-8 string. The maximum string size is 5 KB.
    /// This member is required.
    public var text: Swift.String?

    public init (
        languageCode: ComprehendClientTypes.SyntaxLanguageCode? = nil,
        text: Swift.String? = nil
    )
    {
        self.languageCode = languageCode
        self.text = text
    }
}

struct DetectSyntaxInputBody: Swift.Equatable {
    let text: Swift.String?
    let languageCode: ComprehendClientTypes.SyntaxLanguageCode?
}

extension DetectSyntaxInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languageCode = "LanguageCode"
        case text = "Text"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let textDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .text)
        text = textDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.SyntaxLanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
    }
}

extension DetectSyntaxOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DetectSyntaxOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TextSizeLimitExceededException" : self = .textSizeLimitExceededException(try TextSizeLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedLanguageException" : self = .unsupportedLanguageException(try UnsupportedLanguageException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DetectSyntaxOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case textSizeLimitExceededException(TextSizeLimitExceededException)
    case unsupportedLanguageException(UnsupportedLanguageException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DetectSyntaxOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

extension DetectSyntaxOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DetectSyntaxOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.syntaxTokens = output.syntaxTokens
        } else {
            self.syntaxTokens = nil
        }
    }
}

public struct DetectSyntaxOutputResponse: Swift.Equatable {
    /// A collection of syntax tokens describing the text. For each token, the response provides the text, the token type, where the text begins and ends, and the level of confidence that Amazon Comprehend has that the token is correct. For a list of token types, see [Syntax](https://docs.aws.amazon.com/comprehend/latest/dg/how-syntax.html) in the Comprehend Developer Guide.
    public var syntaxTokens: [ComprehendClientTypes.SyntaxToken]?

    public init (
        syntaxTokens: [ComprehendClientTypes.SyntaxToken]? = nil
    )
    {
        self.syntaxTokens = syntaxTokens
    }
}

struct DetectSyntaxOutputResponseBody: Swift.Equatable {
    let syntaxTokens: [ComprehendClientTypes.SyntaxToken]?
}

extension DetectSyntaxOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case syntaxTokens = "SyntaxTokens"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let syntaxTokensContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.SyntaxToken?].self, forKey: .syntaxTokens)
        var syntaxTokensDecoded0:[ComprehendClientTypes.SyntaxToken]? = nil
        if let syntaxTokensContainer = syntaxTokensContainer {
            syntaxTokensDecoded0 = [ComprehendClientTypes.SyntaxToken]()
            for structure0 in syntaxTokensContainer {
                if let structure0 = structure0 {
                    syntaxTokensDecoded0?.append(structure0)
                }
            }
        }
        syntaxTokens = syntaxTokensDecoded0
    }
}

extension DetectTargetedSentimentInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetectTargetedSentimentInput(languageCode: \(Swift.String(describing: languageCode)), text: \"CONTENT_REDACTED\")"}
}

extension DetectTargetedSentimentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languageCode = "LanguageCode"
        case text = "Text"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let languageCode = self.languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let text = self.text {
            try encodeContainer.encode(text, forKey: .text)
        }
    }
}

extension DetectTargetedSentimentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DetectTargetedSentimentInput: Swift.Equatable {
    /// The language of the input documents. Currently, English is the only supported language.
    /// This member is required.
    public var languageCode: ComprehendClientTypes.LanguageCode?
    /// A UTF-8 text string. The maximum string length is 5 KB.
    /// This member is required.
    public var text: Swift.String?

    public init (
        languageCode: ComprehendClientTypes.LanguageCode? = nil,
        text: Swift.String? = nil
    )
    {
        self.languageCode = languageCode
        self.text = text
    }
}

struct DetectTargetedSentimentInputBody: Swift.Equatable {
    let text: Swift.String?
    let languageCode: ComprehendClientTypes.LanguageCode?
}

extension DetectTargetedSentimentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languageCode = "LanguageCode"
        case text = "Text"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let textDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .text)
        text = textDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
    }
}

extension DetectTargetedSentimentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DetectTargetedSentimentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TextSizeLimitExceededException" : self = .textSizeLimitExceededException(try TextSizeLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedLanguageException" : self = .unsupportedLanguageException(try UnsupportedLanguageException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DetectTargetedSentimentOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case textSizeLimitExceededException(TextSizeLimitExceededException)
    case unsupportedLanguageException(UnsupportedLanguageException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DetectTargetedSentimentOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

extension DetectTargetedSentimentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DetectTargetedSentimentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.entities = output.entities
        } else {
            self.entities = nil
        }
    }
}

public struct DetectTargetedSentimentOutputResponse: Swift.Equatable {
    /// Targeted sentiment analysis for each of the entities identified in the input text.
    public var entities: [ComprehendClientTypes.TargetedSentimentEntity]?

    public init (
        entities: [ComprehendClientTypes.TargetedSentimentEntity]? = nil
    )
    {
        self.entities = entities
    }
}

struct DetectTargetedSentimentOutputResponseBody: Swift.Equatable {
    let entities: [ComprehendClientTypes.TargetedSentimentEntity]?
}

extension DetectTargetedSentimentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entities = "Entities"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let entitiesContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.TargetedSentimentEntity?].self, forKey: .entities)
        var entitiesDecoded0:[ComprehendClientTypes.TargetedSentimentEntity]? = nil
        if let entitiesContainer = entitiesContainer {
            entitiesDecoded0 = [ComprehendClientTypes.TargetedSentimentEntity]()
            for structure0 in entitiesContainer {
                if let structure0 = structure0 {
                    entitiesDecoded0?.append(structure0)
                }
            }
        }
        entities = entitiesDecoded0
    }
}

extension ComprehendClientTypes.DocumentClass: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case page = "Page"
        case score = "Score"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let page = self.page {
            try encodeContainer.encode(page, forKey: .page)
        }
        if let score = self.score {
            try encodeContainer.encode(score, forKey: .score)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scoreDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .score)
        score = scoreDecoded
        let pageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .page)
        page = pageDecoded
    }
}

extension ComprehendClientTypes {
    /// Specifies the class that categorizes the document being analyzed
    public struct DocumentClass: Swift.Equatable {
        /// The name of the class.
        public var name: Swift.String?
        /// Page number in the input document. This field is present in the response only if your request includes the Byte parameter.
        public var page: Swift.Int?
        /// The confidence score that Amazon Comprehend has this class correctly attributed.
        public var score: Swift.Float?

        public init (
            name: Swift.String? = nil,
            page: Swift.Int? = nil,
            score: Swift.Float? = nil
        )
        {
            self.name = name
            self.page = page
            self.score = score
        }
    }

}

extension ComprehendClientTypes.DocumentClassificationJobFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobName = "JobName"
        case jobStatus = "JobStatus"
        case submitTimeAfter = "SubmitTimeAfter"
        case submitTimeBefore = "SubmitTimeBefore"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobName = self.jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let jobStatus = self.jobStatus {
            try encodeContainer.encode(jobStatus.rawValue, forKey: .jobStatus)
        }
        if let submitTimeAfter = self.submitTimeAfter {
            try encodeContainer.encodeTimestamp(submitTimeAfter, format: .epochSeconds, forKey: .submitTimeAfter)
        }
        if let submitTimeBefore = self.submitTimeBefore {
            try encodeContainer.encodeTimestamp(submitTimeBefore, format: .epochSeconds, forKey: .submitTimeBefore)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let submitTimeBeforeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .submitTimeBefore)
        submitTimeBefore = submitTimeBeforeDecoded
        let submitTimeAfterDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .submitTimeAfter)
        submitTimeAfter = submitTimeAfterDecoded
    }
}

extension ComprehendClientTypes {
    /// Provides information for filtering a list of document classification jobs. For more information, see the operation. You can provide only one filter parameter in each request.
    public struct DocumentClassificationJobFilter: Swift.Equatable {
        /// Filters on the name of the job.
        public var jobName: Swift.String?
        /// Filters the list based on job status. Returns only jobs with the specified status.
        public var jobStatus: ComprehendClientTypes.JobStatus?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest.
        public var submitTimeAfter: ClientRuntime.Date?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest.
        public var submitTimeBefore: ClientRuntime.Date?

        public init (
            jobName: Swift.String? = nil,
            jobStatus: ComprehendClientTypes.JobStatus? = nil,
            submitTimeAfter: ClientRuntime.Date? = nil,
            submitTimeBefore: ClientRuntime.Date? = nil
        )
        {
            self.jobName = jobName
            self.jobStatus = jobStatus
            self.submitTimeAfter = submitTimeAfter
            self.submitTimeBefore = submitTimeBefore
        }
    }

}

extension ComprehendClientTypes.DocumentClassificationJobProperties: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataAccessRoleArn = "DataAccessRoleArn"
        case documentClassifierArn = "DocumentClassifierArn"
        case endTime = "EndTime"
        case inputDataConfig = "InputDataConfig"
        case jobArn = "JobArn"
        case jobId = "JobId"
        case jobName = "JobName"
        case jobStatus = "JobStatus"
        case message = "Message"
        case outputDataConfig = "OutputDataConfig"
        case submitTime = "SubmitTime"
        case volumeKmsKeyId = "VolumeKmsKeyId"
        case vpcConfig = "VpcConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataAccessRoleArn = self.dataAccessRoleArn {
            try encodeContainer.encode(dataAccessRoleArn, forKey: .dataAccessRoleArn)
        }
        if let documentClassifierArn = self.documentClassifierArn {
            try encodeContainer.encode(documentClassifierArn, forKey: .documentClassifierArn)
        }
        if let endTime = self.endTime {
            try encodeContainer.encodeTimestamp(endTime, format: .epochSeconds, forKey: .endTime)
        }
        if let inputDataConfig = self.inputDataConfig {
            try encodeContainer.encode(inputDataConfig, forKey: .inputDataConfig)
        }
        if let jobArn = self.jobArn {
            try encodeContainer.encode(jobArn, forKey: .jobArn)
        }
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let jobName = self.jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let jobStatus = self.jobStatus {
            try encodeContainer.encode(jobStatus.rawValue, forKey: .jobStatus)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let outputDataConfig = self.outputDataConfig {
            try encodeContainer.encode(outputDataConfig, forKey: .outputDataConfig)
        }
        if let submitTime = self.submitTime {
            try encodeContainer.encodeTimestamp(submitTime, format: .epochSeconds, forKey: .submitTime)
        }
        if let volumeKmsKeyId = self.volumeKmsKeyId {
            try encodeContainer.encode(volumeKmsKeyId, forKey: .volumeKmsKeyId)
        }
        if let vpcConfig = self.vpcConfig {
            try encodeContainer.encode(vpcConfig, forKey: .vpcConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let jobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobArn)
        jobArn = jobArnDecoded
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let submitTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .submitTime)
        submitTime = submitTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endTime)
        endTime = endTimeDecoded
        let documentClassifierArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentClassifierArn)
        documentClassifierArn = documentClassifierArnDecoded
        let inputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.InputDataConfig.self, forKey: .inputDataConfig)
        inputDataConfig = inputDataConfigDecoded
        let outputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.OutputDataConfig.self, forKey: .outputDataConfig)
        outputDataConfig = outputDataConfigDecoded
        let dataAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataAccessRoleArn)
        dataAccessRoleArn = dataAccessRoleArnDecoded
        let volumeKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeKmsKeyId)
        volumeKmsKeyId = volumeKmsKeyIdDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
    }
}

extension ComprehendClientTypes {
    /// Provides information about a document classification job.
    public struct DocumentClassificationJobProperties: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the AWS identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data.
        public var dataAccessRoleArn: Swift.String?
        /// The Amazon Resource Name (ARN) that identifies the document classifier.
        public var documentClassifierArn: Swift.String?
        /// The time that the document classification job completed.
        public var endTime: ClientRuntime.Date?
        /// The input data configuration that you supplied when you created the document classification job.
        public var inputDataConfig: ComprehendClientTypes.InputDataConfig?
        /// The Amazon Resource Name (ARN) of the document classification job. It is a unique, fully qualified identifier for the job. It includes the AWS account, Region, and the job ID. The format of the ARN is as follows: arn::comprehend:::document-classification-job/ The following is an example job ARN: arn:aws:comprehend:us-west-2:111122223333:document-classification-job/1234abcd12ab34cd56ef1234567890ab
        public var jobArn: Swift.String?
        /// The identifier assigned to the document classification job.
        public var jobId: Swift.String?
        /// The name that you assigned to the document classification job.
        public var jobName: Swift.String?
        /// The current status of the document classification job. If the status is FAILED, the Message field shows the reason for the failure.
        public var jobStatus: ComprehendClientTypes.JobStatus?
        /// A description of the status of the job.
        public var message: Swift.String?
        /// The output data configuration that you supplied when you created the document classification job.
        public var outputDataConfig: ComprehendClientTypes.OutputDataConfig?
        /// The time that the document classification job was submitted for processing.
        public var submitTime: ClientRuntime.Date?
        /// ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:
        ///
        /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
        public var volumeKmsKeyId: Swift.String?
        /// Configuration parameters for a private Virtual Private Cloud (VPC) containing the resources you are using for your document classification job. For more information, see [Amazon VPC](https://docs.aws.amazon.com/vppc/latest/userguide/what-is-amazon-vpc.html).
        public var vpcConfig: ComprehendClientTypes.VpcConfig?

        public init (
            dataAccessRoleArn: Swift.String? = nil,
            documentClassifierArn: Swift.String? = nil,
            endTime: ClientRuntime.Date? = nil,
            inputDataConfig: ComprehendClientTypes.InputDataConfig? = nil,
            jobArn: Swift.String? = nil,
            jobId: Swift.String? = nil,
            jobName: Swift.String? = nil,
            jobStatus: ComprehendClientTypes.JobStatus? = nil,
            message: Swift.String? = nil,
            outputDataConfig: ComprehendClientTypes.OutputDataConfig? = nil,
            submitTime: ClientRuntime.Date? = nil,
            volumeKmsKeyId: Swift.String? = nil,
            vpcConfig: ComprehendClientTypes.VpcConfig? = nil
        )
        {
            self.dataAccessRoleArn = dataAccessRoleArn
            self.documentClassifierArn = documentClassifierArn
            self.endTime = endTime
            self.inputDataConfig = inputDataConfig
            self.jobArn = jobArn
            self.jobId = jobId
            self.jobName = jobName
            self.jobStatus = jobStatus
            self.message = message
            self.outputDataConfig = outputDataConfig
            self.submitTime = submitTime
            self.volumeKmsKeyId = volumeKmsKeyId
            self.vpcConfig = vpcConfig
        }
    }

}

extension ComprehendClientTypes {
    public enum DocumentClassifierDataFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case augmentedManifest
        case comprehendCsv
        case sdkUnknown(Swift.String)

        public static var allCases: [DocumentClassifierDataFormat] {
            return [
                .augmentedManifest,
                .comprehendCsv,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .augmentedManifest: return "AUGMENTED_MANIFEST"
            case .comprehendCsv: return "COMPREHEND_CSV"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DocumentClassifierDataFormat(rawValue: rawValue) ?? DocumentClassifierDataFormat.sdkUnknown(rawValue)
        }
    }
}

extension ComprehendClientTypes.DocumentClassifierFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case documentClassifierName = "DocumentClassifierName"
        case status = "Status"
        case submitTimeAfter = "SubmitTimeAfter"
        case submitTimeBefore = "SubmitTimeBefore"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let documentClassifierName = self.documentClassifierName {
            try encodeContainer.encode(documentClassifierName, forKey: .documentClassifierName)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let submitTimeAfter = self.submitTimeAfter {
            try encodeContainer.encodeTimestamp(submitTimeAfter, format: .epochSeconds, forKey: .submitTimeAfter)
        }
        if let submitTimeBefore = self.submitTimeBefore {
            try encodeContainer.encodeTimestamp(submitTimeBefore, format: .epochSeconds, forKey: .submitTimeBefore)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.ModelStatus.self, forKey: .status)
        status = statusDecoded
        let documentClassifierNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentClassifierName)
        documentClassifierName = documentClassifierNameDecoded
        let submitTimeBeforeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .submitTimeBefore)
        submitTimeBefore = submitTimeBeforeDecoded
        let submitTimeAfterDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .submitTimeAfter)
        submitTimeAfter = submitTimeAfterDecoded
    }
}

extension ComprehendClientTypes {
    /// Provides information for filtering a list of document classifiers. You can only specify one filtering parameter in a request. For more information, see the operation.
    public struct DocumentClassifierFilter: Swift.Equatable {
        /// The name that you assigned to the document classifier
        public var documentClassifierName: Swift.String?
        /// Filters the list of classifiers based on status.
        public var status: ComprehendClientTypes.ModelStatus?
        /// Filters the list of classifiers based on the time that the classifier was submitted for processing. Returns only classifiers submitted after the specified time. Classifiers are returned in descending order, newest to oldest.
        public var submitTimeAfter: ClientRuntime.Date?
        /// Filters the list of classifiers based on the time that the classifier was submitted for processing. Returns only classifiers submitted before the specified time. Classifiers are returned in ascending order, oldest to newest.
        public var submitTimeBefore: ClientRuntime.Date?

        public init (
            documentClassifierName: Swift.String? = nil,
            status: ComprehendClientTypes.ModelStatus? = nil,
            submitTimeAfter: ClientRuntime.Date? = nil,
            submitTimeBefore: ClientRuntime.Date? = nil
        )
        {
            self.documentClassifierName = documentClassifierName
            self.status = status
            self.submitTimeAfter = submitTimeAfter
            self.submitTimeBefore = submitTimeBefore
        }
    }

}

extension ComprehendClientTypes.DocumentClassifierInputDataConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case augmentedManifests = "AugmentedManifests"
        case dataFormat = "DataFormat"
        case labelDelimiter = "LabelDelimiter"
        case s3Uri = "S3Uri"
        case testS3Uri = "TestS3Uri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let augmentedManifests = augmentedManifests {
            var augmentedManifestsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .augmentedManifests)
            for augmentedmanifestslistitem0 in augmentedManifests {
                try augmentedManifestsContainer.encode(augmentedmanifestslistitem0)
            }
        }
        if let dataFormat = self.dataFormat {
            try encodeContainer.encode(dataFormat.rawValue, forKey: .dataFormat)
        }
        if let labelDelimiter = self.labelDelimiter {
            try encodeContainer.encode(labelDelimiter, forKey: .labelDelimiter)
        }
        if let s3Uri = self.s3Uri {
            try encodeContainer.encode(s3Uri, forKey: .s3Uri)
        }
        if let testS3Uri = self.testS3Uri {
            try encodeContainer.encode(testS3Uri, forKey: .testS3Uri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataFormatDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.DocumentClassifierDataFormat.self, forKey: .dataFormat)
        dataFormat = dataFormatDecoded
        let s3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Uri)
        s3Uri = s3UriDecoded
        let testS3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .testS3Uri)
        testS3Uri = testS3UriDecoded
        let labelDelimiterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelDelimiter)
        labelDelimiter = labelDelimiterDecoded
        let augmentedManifestsContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.AugmentedManifestsListItem?].self, forKey: .augmentedManifests)
        var augmentedManifestsDecoded0:[ComprehendClientTypes.AugmentedManifestsListItem]? = nil
        if let augmentedManifestsContainer = augmentedManifestsContainer {
            augmentedManifestsDecoded0 = [ComprehendClientTypes.AugmentedManifestsListItem]()
            for structure0 in augmentedManifestsContainer {
                if let structure0 = structure0 {
                    augmentedManifestsDecoded0?.append(structure0)
                }
            }
        }
        augmentedManifests = augmentedManifestsDecoded0
    }
}

extension ComprehendClientTypes {
    /// The input properties for training a document classifier. For more information on how the input file is formatted, see [Preparing training data](https://docs.aws.amazon.com/comprehend/latest/dg/prep-classifier-data.html) in the Comprehend Developer Guide.
    public struct DocumentClassifierInputDataConfig: Swift.Equatable {
        /// A list of augmented manifest files that provide training data for your custom model. An augmented manifest file is a labeled dataset that is produced by Amazon SageMaker Ground Truth. This parameter is required if you set DataFormat to AUGMENTED_MANIFEST.
        public var augmentedManifests: [ComprehendClientTypes.AugmentedManifestsListItem]?
        /// The format of your training data:
        ///
        /// * COMPREHEND_CSV: A two-column CSV file, where labels are provided in the first column, and documents are provided in the second. If you use this value, you must provide the S3Uri parameter in your request.
        ///
        /// * AUGMENTED_MANIFEST: A labeled dataset that is produced by Amazon SageMaker Ground Truth. This file is in JSON lines format. Each line is a complete JSON object that contains a training document and its associated labels. If you use this value, you must provide the AugmentedManifests parameter in your request.
        ///
        ///
        /// If you don't specify a value, Amazon Comprehend uses COMPREHEND_CSV as the default.
        public var dataFormat: ComprehendClientTypes.DocumentClassifierDataFormat?
        /// Indicates the delimiter used to separate each label for training a multi-label classifier. The default delimiter between labels is a pipe (|). You can use a different character as a delimiter (if it's an allowed character) by specifying it under Delimiter for labels. If the training documents use a delimiter other than the default or the delimiter you specify, the labels on that line will be combined to make a single unique label, such as LABELLABELLABEL.
        public var labelDelimiter: Swift.String?
        /// The Amazon S3 URI for the input data. The S3 bucket must be in the same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of input files. For example, if you use the URI S3://bucketName/prefix, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input. This parameter is required if you set DataFormat to COMPREHEND_CSV.
        public var s3Uri: Swift.String?
        /// This specifies the Amazon S3 location where the test annotations for an entity recognizer are located. The URI must be in the same AWS Region as the API endpoint that you are calling.
        public var testS3Uri: Swift.String?

        public init (
            augmentedManifests: [ComprehendClientTypes.AugmentedManifestsListItem]? = nil,
            dataFormat: ComprehendClientTypes.DocumentClassifierDataFormat? = nil,
            labelDelimiter: Swift.String? = nil,
            s3Uri: Swift.String? = nil,
            testS3Uri: Swift.String? = nil
        )
        {
            self.augmentedManifests = augmentedManifests
            self.dataFormat = dataFormat
            self.labelDelimiter = labelDelimiter
            self.s3Uri = s3Uri
            self.testS3Uri = testS3Uri
        }
    }

}

extension ComprehendClientTypes {
    public enum DocumentClassifierMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case multiClass
        case multiLabel
        case sdkUnknown(Swift.String)

        public static var allCases: [DocumentClassifierMode] {
            return [
                .multiClass,
                .multiLabel,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .multiClass: return "MULTI_CLASS"
            case .multiLabel: return "MULTI_LABEL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DocumentClassifierMode(rawValue: rawValue) ?? DocumentClassifierMode.sdkUnknown(rawValue)
        }
    }
}

extension ComprehendClientTypes.DocumentClassifierOutputDataConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kmsKeyId = "KmsKeyId"
        case s3Uri = "S3Uri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let s3Uri = self.s3Uri {
            try encodeContainer.encode(s3Uri, forKey: .s3Uri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Uri)
        s3Uri = s3UriDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
    }
}

extension ComprehendClientTypes {
    /// Provides output results configuration parameters for custom classifier jobs.
    public struct DocumentClassifierOutputDataConfig: Swift.Equatable {
        /// ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt the output results from an analysis job. The KmsKeyId can be one of the following formats:
        ///
        /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * KMS Key Alias: "alias/ExampleAlias"
        ///
        /// * ARN of a KMS Key Alias: "arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias"
        public var kmsKeyId: Swift.String?
        /// When you use the OutputDataConfig object while creating a custom classifier, you specify the Amazon S3 location where you want to write the confusion matrix. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of this output file. When the custom classifier job is finished, the service creates the output file in a directory specific to the job. The S3Uri field contains the location of the output file, called output.tar.gz. It is a compressed archive that contains the confusion matrix.
        public var s3Uri: Swift.String?

        public init (
            kmsKeyId: Swift.String? = nil,
            s3Uri: Swift.String? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
            self.s3Uri = s3Uri
        }
    }

}

extension ComprehendClientTypes.DocumentClassifierProperties: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case classifierMetadata = "ClassifierMetadata"
        case dataAccessRoleArn = "DataAccessRoleArn"
        case documentClassifierArn = "DocumentClassifierArn"
        case endTime = "EndTime"
        case inputDataConfig = "InputDataConfig"
        case languageCode = "LanguageCode"
        case message = "Message"
        case mode = "Mode"
        case modelKmsKeyId = "ModelKmsKeyId"
        case outputDataConfig = "OutputDataConfig"
        case sourceModelArn = "SourceModelArn"
        case status = "Status"
        case submitTime = "SubmitTime"
        case trainingEndTime = "TrainingEndTime"
        case trainingStartTime = "TrainingStartTime"
        case versionName = "VersionName"
        case volumeKmsKeyId = "VolumeKmsKeyId"
        case vpcConfig = "VpcConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let classifierMetadata = self.classifierMetadata {
            try encodeContainer.encode(classifierMetadata, forKey: .classifierMetadata)
        }
        if let dataAccessRoleArn = self.dataAccessRoleArn {
            try encodeContainer.encode(dataAccessRoleArn, forKey: .dataAccessRoleArn)
        }
        if let documentClassifierArn = self.documentClassifierArn {
            try encodeContainer.encode(documentClassifierArn, forKey: .documentClassifierArn)
        }
        if let endTime = self.endTime {
            try encodeContainer.encodeTimestamp(endTime, format: .epochSeconds, forKey: .endTime)
        }
        if let inputDataConfig = self.inputDataConfig {
            try encodeContainer.encode(inputDataConfig, forKey: .inputDataConfig)
        }
        if let languageCode = self.languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let mode = self.mode {
            try encodeContainer.encode(mode.rawValue, forKey: .mode)
        }
        if let modelKmsKeyId = self.modelKmsKeyId {
            try encodeContainer.encode(modelKmsKeyId, forKey: .modelKmsKeyId)
        }
        if let outputDataConfig = self.outputDataConfig {
            try encodeContainer.encode(outputDataConfig, forKey: .outputDataConfig)
        }
        if let sourceModelArn = self.sourceModelArn {
            try encodeContainer.encode(sourceModelArn, forKey: .sourceModelArn)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let submitTime = self.submitTime {
            try encodeContainer.encodeTimestamp(submitTime, format: .epochSeconds, forKey: .submitTime)
        }
        if let trainingEndTime = self.trainingEndTime {
            try encodeContainer.encodeTimestamp(trainingEndTime, format: .epochSeconds, forKey: .trainingEndTime)
        }
        if let trainingStartTime = self.trainingStartTime {
            try encodeContainer.encodeTimestamp(trainingStartTime, format: .epochSeconds, forKey: .trainingStartTime)
        }
        if let versionName = self.versionName {
            try encodeContainer.encode(versionName, forKey: .versionName)
        }
        if let volumeKmsKeyId = self.volumeKmsKeyId {
            try encodeContainer.encode(volumeKmsKeyId, forKey: .volumeKmsKeyId)
        }
        if let vpcConfig = self.vpcConfig {
            try encodeContainer.encode(vpcConfig, forKey: .vpcConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentClassifierArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentClassifierArn)
        documentClassifierArn = documentClassifierArnDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.ModelStatus.self, forKey: .status)
        status = statusDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let submitTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .submitTime)
        submitTime = submitTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endTime)
        endTime = endTimeDecoded
        let trainingStartTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .trainingStartTime)
        trainingStartTime = trainingStartTimeDecoded
        let trainingEndTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .trainingEndTime)
        trainingEndTime = trainingEndTimeDecoded
        let inputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.DocumentClassifierInputDataConfig.self, forKey: .inputDataConfig)
        inputDataConfig = inputDataConfigDecoded
        let outputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.DocumentClassifierOutputDataConfig.self, forKey: .outputDataConfig)
        outputDataConfig = outputDataConfigDecoded
        let classifierMetadataDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.ClassifierMetadata.self, forKey: .classifierMetadata)
        classifierMetadata = classifierMetadataDecoded
        let dataAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataAccessRoleArn)
        dataAccessRoleArn = dataAccessRoleArnDecoded
        let volumeKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeKmsKeyId)
        volumeKmsKeyId = volumeKmsKeyIdDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
        let modeDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.DocumentClassifierMode.self, forKey: .mode)
        mode = modeDecoded
        let modelKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelKmsKeyId)
        modelKmsKeyId = modelKmsKeyIdDecoded
        let versionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionName)
        versionName = versionNameDecoded
        let sourceModelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceModelArn)
        sourceModelArn = sourceModelArnDecoded
    }
}

extension ComprehendClientTypes.DocumentClassifierProperties: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DocumentClassifierProperties(dataAccessRoleArn: \(Swift.String(describing: dataAccessRoleArn)), documentClassifierArn: \(Swift.String(describing: documentClassifierArn)), endTime: \(Swift.String(describing: endTime)), inputDataConfig: \(Swift.String(describing: inputDataConfig)), languageCode: \(Swift.String(describing: languageCode)), message: \(Swift.String(describing: message)), mode: \(Swift.String(describing: mode)), modelKmsKeyId: \(Swift.String(describing: modelKmsKeyId)), outputDataConfig: \(Swift.String(describing: outputDataConfig)), sourceModelArn: \(Swift.String(describing: sourceModelArn)), status: \(Swift.String(describing: status)), submitTime: \(Swift.String(describing: submitTime)), trainingEndTime: \(Swift.String(describing: trainingEndTime)), trainingStartTime: \(Swift.String(describing: trainingStartTime)), versionName: \(Swift.String(describing: versionName)), volumeKmsKeyId: \(Swift.String(describing: volumeKmsKeyId)), vpcConfig: \(Swift.String(describing: vpcConfig)), classifierMetadata: \"CONTENT_REDACTED\")"}
}

extension ComprehendClientTypes {
    /// Provides information about a document classifier.
    public struct DocumentClassifierProperties: Swift.Equatable {
        /// Information about the document classifier, including the number of documents used for training the classifier, the number of documents used for test the classifier, and an accuracy rating.
        public var classifierMetadata: ComprehendClientTypes.ClassifierMetadata?
        /// The Amazon Resource Name (ARN) of the AWS Identity and Management (IAM) role that grants Amazon Comprehend read access to your input data.
        public var dataAccessRoleArn: Swift.String?
        /// The Amazon Resource Name (ARN) that identifies the document classifier.
        public var documentClassifierArn: Swift.String?
        /// The time that training the document classifier completed.
        public var endTime: ClientRuntime.Date?
        /// The input data configuration that you supplied when you created the document classifier for training.
        public var inputDataConfig: ComprehendClientTypes.DocumentClassifierInputDataConfig?
        /// The language code for the language of the documents that the classifier was trained on.
        public var languageCode: ComprehendClientTypes.LanguageCode?
        /// Additional information about the status of the classifier.
        public var message: Swift.String?
        /// Indicates the mode in which the specific classifier was trained. This also indicates the format of input documents and the format of the confusion matrix. Each classifier can only be trained in one mode and this cannot be changed once the classifier is trained.
        public var mode: ComprehendClientTypes.DocumentClassifierMode?
        /// ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt trained custom models. The ModelKmsKeyId can be either of the following formats:
        ///
        /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
        public var modelKmsKeyId: Swift.String?
        /// Provides output results configuration parameters for custom classifier jobs.
        public var outputDataConfig: ComprehendClientTypes.DocumentClassifierOutputDataConfig?
        /// The Amazon Resource Name (ARN) of the source model. This model was imported from a different AWS account to create the document classifier model in your AWS account.
        public var sourceModelArn: Swift.String?
        /// The status of the document classifier. If the status is TRAINED the classifier is ready to use. If the status is FAILED you can see additional information about why the classifier wasn't trained in the Message field.
        public var status: ComprehendClientTypes.ModelStatus?
        /// The time that the document classifier was submitted for training.
        public var submitTime: ClientRuntime.Date?
        /// The time that training of the document classifier was completed. Indicates the time when the training completes on documentation classifiers. You are billed for the time interval between this time and the value of TrainingStartTime.
        public var trainingEndTime: ClientRuntime.Date?
        /// Indicates the time when the training starts on documentation classifiers. You are billed for the time interval between this time and the value of TrainingEndTime.
        public var trainingStartTime: ClientRuntime.Date?
        /// The version name that you assigned to the document classifier.
        public var versionName: Swift.String?
        /// ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:
        ///
        /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
        public var volumeKmsKeyId: Swift.String?
        /// Configuration parameters for a private Virtual Private Cloud (VPC) containing the resources you are using for your custom classifier. For more information, see [Amazon VPC](https://docs.aws.amazon.com/vppc/latest/userguide/what-is-amazon-vpc.html).
        public var vpcConfig: ComprehendClientTypes.VpcConfig?

        public init (
            classifierMetadata: ComprehendClientTypes.ClassifierMetadata? = nil,
            dataAccessRoleArn: Swift.String? = nil,
            documentClassifierArn: Swift.String? = nil,
            endTime: ClientRuntime.Date? = nil,
            inputDataConfig: ComprehendClientTypes.DocumentClassifierInputDataConfig? = nil,
            languageCode: ComprehendClientTypes.LanguageCode? = nil,
            message: Swift.String? = nil,
            mode: ComprehendClientTypes.DocumentClassifierMode? = nil,
            modelKmsKeyId: Swift.String? = nil,
            outputDataConfig: ComprehendClientTypes.DocumentClassifierOutputDataConfig? = nil,
            sourceModelArn: Swift.String? = nil,
            status: ComprehendClientTypes.ModelStatus? = nil,
            submitTime: ClientRuntime.Date? = nil,
            trainingEndTime: ClientRuntime.Date? = nil,
            trainingStartTime: ClientRuntime.Date? = nil,
            versionName: Swift.String? = nil,
            volumeKmsKeyId: Swift.String? = nil,
            vpcConfig: ComprehendClientTypes.VpcConfig? = nil
        )
        {
            self.classifierMetadata = classifierMetadata
            self.dataAccessRoleArn = dataAccessRoleArn
            self.documentClassifierArn = documentClassifierArn
            self.endTime = endTime
            self.inputDataConfig = inputDataConfig
            self.languageCode = languageCode
            self.message = message
            self.mode = mode
            self.modelKmsKeyId = modelKmsKeyId
            self.outputDataConfig = outputDataConfig
            self.sourceModelArn = sourceModelArn
            self.status = status
            self.submitTime = submitTime
            self.trainingEndTime = trainingEndTime
            self.trainingStartTime = trainingStartTime
            self.versionName = versionName
            self.volumeKmsKeyId = volumeKmsKeyId
            self.vpcConfig = vpcConfig
        }
    }

}

extension ComprehendClientTypes.DocumentClassifierSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case documentClassifierName = "DocumentClassifierName"
        case latestVersionCreatedAt = "LatestVersionCreatedAt"
        case latestVersionName = "LatestVersionName"
        case latestVersionStatus = "LatestVersionStatus"
        case numberOfVersions = "NumberOfVersions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let documentClassifierName = self.documentClassifierName {
            try encodeContainer.encode(documentClassifierName, forKey: .documentClassifierName)
        }
        if let latestVersionCreatedAt = self.latestVersionCreatedAt {
            try encodeContainer.encodeTimestamp(latestVersionCreatedAt, format: .epochSeconds, forKey: .latestVersionCreatedAt)
        }
        if let latestVersionName = self.latestVersionName {
            try encodeContainer.encode(latestVersionName, forKey: .latestVersionName)
        }
        if let latestVersionStatus = self.latestVersionStatus {
            try encodeContainer.encode(latestVersionStatus.rawValue, forKey: .latestVersionStatus)
        }
        if let numberOfVersions = self.numberOfVersions {
            try encodeContainer.encode(numberOfVersions, forKey: .numberOfVersions)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentClassifierNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentClassifierName)
        documentClassifierName = documentClassifierNameDecoded
        let numberOfVersionsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfVersions)
        numberOfVersions = numberOfVersionsDecoded
        let latestVersionCreatedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .latestVersionCreatedAt)
        latestVersionCreatedAt = latestVersionCreatedAtDecoded
        let latestVersionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .latestVersionName)
        latestVersionName = latestVersionNameDecoded
        let latestVersionStatusDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.ModelStatus.self, forKey: .latestVersionStatus)
        latestVersionStatus = latestVersionStatusDecoded
    }
}

extension ComprehendClientTypes {
    /// Describes information about a document classifier and its versions.
    public struct DocumentClassifierSummary: Swift.Equatable {
        /// The name that you assigned the document classifier.
        public var documentClassifierName: Swift.String?
        /// The time that the latest document classifier version was submitted for processing.
        public var latestVersionCreatedAt: ClientRuntime.Date?
        /// The version name you assigned to the latest document classifier version.
        public var latestVersionName: Swift.String?
        /// Provides the status of the latest document classifier version.
        public var latestVersionStatus: ComprehendClientTypes.ModelStatus?
        /// The number of versions you created.
        public var numberOfVersions: Swift.Int?

        public init (
            documentClassifierName: Swift.String? = nil,
            latestVersionCreatedAt: ClientRuntime.Date? = nil,
            latestVersionName: Swift.String? = nil,
            latestVersionStatus: ComprehendClientTypes.ModelStatus? = nil,
            numberOfVersions: Swift.Int? = nil
        )
        {
            self.documentClassifierName = documentClassifierName
            self.latestVersionCreatedAt = latestVersionCreatedAt
            self.latestVersionName = latestVersionName
            self.latestVersionStatus = latestVersionStatus
            self.numberOfVersions = numberOfVersions
        }
    }

}

extension ComprehendClientTypes.DocumentLabel: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case page = "Page"
        case score = "Score"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let page = self.page {
            try encodeContainer.encode(page, forKey: .page)
        }
        if let score = self.score {
            try encodeContainer.encode(score, forKey: .score)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scoreDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .score)
        score = scoreDecoded
        let pageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .page)
        page = pageDecoded
    }
}

extension ComprehendClientTypes {
    /// Specifies one of the label or labels that categorize the document being analyzed.
    public struct DocumentLabel: Swift.Equatable {
        /// The name of the label.
        public var name: Swift.String?
        /// Page number where the label occurs. This field is present in the response only if your request includes the Byte parameter.
        public var page: Swift.Int?
        /// The confidence score that Amazon Comprehend has this label correctly attributed.
        public var score: Swift.Float?

        public init (
            name: Swift.String? = nil,
            page: Swift.Int? = nil,
            score: Swift.Float? = nil
        )
        {
            self.name = name
            self.page = page
            self.score = score
        }
    }

}

extension ComprehendClientTypes.DocumentMetadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case extractedCharacters = "ExtractedCharacters"
        case pages = "Pages"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let extractedCharacters = extractedCharacters {
            var extractedCharactersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .extractedCharacters)
            for extractedcharacterslistitem0 in extractedCharacters {
                try extractedCharactersContainer.encode(extractedcharacterslistitem0)
            }
        }
        if let pages = self.pages {
            try encodeContainer.encode(pages, forKey: .pages)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pagesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pages)
        pages = pagesDecoded
        let extractedCharactersContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.ExtractedCharactersListItem?].self, forKey: .extractedCharacters)
        var extractedCharactersDecoded0:[ComprehendClientTypes.ExtractedCharactersListItem]? = nil
        if let extractedCharactersContainer = extractedCharactersContainer {
            extractedCharactersDecoded0 = [ComprehendClientTypes.ExtractedCharactersListItem]()
            for structure0 in extractedCharactersContainer {
                if let structure0 = structure0 {
                    extractedCharactersDecoded0?.append(structure0)
                }
            }
        }
        extractedCharacters = extractedCharactersDecoded0
    }
}

extension ComprehendClientTypes {
    /// Information about the document, discovered during text extraction.
    public struct DocumentMetadata: Swift.Equatable {
        /// List of pages in the document, with the number of characters extracted from each page.
        public var extractedCharacters: [ComprehendClientTypes.ExtractedCharactersListItem]?
        /// Number of pages in the document.
        public var pages: Swift.Int?

        public init (
            extractedCharacters: [ComprehendClientTypes.ExtractedCharactersListItem]? = nil,
            pages: Swift.Int? = nil
        )
        {
            self.extractedCharacters = extractedCharacters
            self.pages = pages
        }
    }

}

extension ComprehendClientTypes {
    public enum DocumentReadAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case textractAnalyzeDocument
        case textractDetectDocumentText
        case sdkUnknown(Swift.String)

        public static var allCases: [DocumentReadAction] {
            return [
                .textractAnalyzeDocument,
                .textractDetectDocumentText,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .textractAnalyzeDocument: return "TEXTRACT_ANALYZE_DOCUMENT"
            case .textractDetectDocumentText: return "TEXTRACT_DETECT_DOCUMENT_TEXT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DocumentReadAction(rawValue: rawValue) ?? DocumentReadAction.sdkUnknown(rawValue)
        }
    }
}

extension ComprehendClientTypes {
    /// Specifies the type of Amazon Textract features to apply. If you chose TEXTRACT_ANALYZE_DOCUMENT as the read action, you must specify one or both of the following values:
    ///
    /// * TABLES - Returns additional information about any tables that are detected in the input document.
    ///
    /// * FORMS - Returns additional information about any forms that are detected in the input document.
    public enum DocumentReadFeatureTypes: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case forms
        case tables
        case sdkUnknown(Swift.String)

        public static var allCases: [DocumentReadFeatureTypes] {
            return [
                .forms,
                .tables,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .forms: return "FORMS"
            case .tables: return "TABLES"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DocumentReadFeatureTypes(rawValue: rawValue) ?? DocumentReadFeatureTypes.sdkUnknown(rawValue)
        }
    }
}

extension ComprehendClientTypes {
    public enum DocumentReadMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case forceDocumentReadAction
        case serviceDefault
        case sdkUnknown(Swift.String)

        public static var allCases: [DocumentReadMode] {
            return [
                .forceDocumentReadAction,
                .serviceDefault,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .forceDocumentReadAction: return "FORCE_DOCUMENT_READ_ACTION"
            case .serviceDefault: return "SERVICE_DEFAULT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DocumentReadMode(rawValue: rawValue) ?? DocumentReadMode.sdkUnknown(rawValue)
        }
    }
}

extension ComprehendClientTypes.DocumentReaderConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case documentReadAction = "DocumentReadAction"
        case documentReadMode = "DocumentReadMode"
        case featureTypes = "FeatureTypes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let documentReadAction = self.documentReadAction {
            try encodeContainer.encode(documentReadAction.rawValue, forKey: .documentReadAction)
        }
        if let documentReadMode = self.documentReadMode {
            try encodeContainer.encode(documentReadMode.rawValue, forKey: .documentReadMode)
        }
        if let featureTypes = featureTypes {
            var featureTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .featureTypes)
            for documentreadfeaturetypes0 in featureTypes {
                try featureTypesContainer.encode(documentreadfeaturetypes0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentReadActionDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.DocumentReadAction.self, forKey: .documentReadAction)
        documentReadAction = documentReadActionDecoded
        let documentReadModeDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.DocumentReadMode.self, forKey: .documentReadMode)
        documentReadMode = documentReadModeDecoded
        let featureTypesContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.DocumentReadFeatureTypes?].self, forKey: .featureTypes)
        var featureTypesDecoded0:[ComprehendClientTypes.DocumentReadFeatureTypes]? = nil
        if let featureTypesContainer = featureTypesContainer {
            featureTypesDecoded0 = [ComprehendClientTypes.DocumentReadFeatureTypes]()
            for enum0 in featureTypesContainer {
                if let enum0 = enum0 {
                    featureTypesDecoded0?.append(enum0)
                }
            }
        }
        featureTypes = featureTypesDecoded0
    }
}

extension ComprehendClientTypes {
    /// Provides configuration parameters to override the default actions for extracting text from PDF documents and image files. By default, Amazon Comprehend performs the following actions to extract text from files, based on the input file type:
    ///
    /// * Word files - Amazon Comprehend parser extracts the text.
    ///
    /// * Digital PDF files - Amazon Comprehend parser extracts the text.
    ///
    /// * Image files and scanned PDF files - Amazon Comprehend uses the Amazon Textract DetectDocumentText API to extract the text.
    ///
    ///
    /// DocumentReaderConfig does not apply to plain text files or Word files. For image files and PDF documents, you can override these default actions using the fields listed below. For more information, see [ Setting text extraction options](https://docs.aws.amazon.com/comprehend/latest/dg/detecting-cer.html#detecting-cer-pdf).
    public struct DocumentReaderConfig: Swift.Equatable {
        /// This field defines the Amazon Textract API operation that Amazon Comprehend uses to extract text from PDF files and image files. Enter one of the following values:
        ///
        /// * TEXTRACT_DETECT_DOCUMENT_TEXT - The Amazon Comprehend service uses the DetectDocumentText API operation.
        ///
        /// * TEXTRACT_ANALYZE_DOCUMENT - The Amazon Comprehend service uses the AnalyzeDocument API operation.
        /// This member is required.
        public var documentReadAction: ComprehendClientTypes.DocumentReadAction?
        /// Determines the text extraction actions for PDF files. Enter one of the following values:
        ///
        /// * SERVICE_DEFAULT - use the Amazon Comprehend service defaults for PDF files.
        ///
        /// * FORCE_DOCUMENT_READ_ACTION - Amazon Comprehend uses the Textract API specified by DocumentReadAction for all PDF files, including digital PDF files.
        public var documentReadMode: ComprehendClientTypes.DocumentReadMode?
        /// Specifies the type of Amazon Textract features to apply. If you chose TEXTRACT_ANALYZE_DOCUMENT as the read action, you must specify one or both of the following values:
        ///
        /// * TABLES - Returns information about any tables that are detected in the input document.
        ///
        /// * FORMS - Returns information and the data from any forms that are detected in the input document.
        public var featureTypes: [ComprehendClientTypes.DocumentReadFeatureTypes]?

        public init (
            documentReadAction: ComprehendClientTypes.DocumentReadAction? = nil,
            documentReadMode: ComprehendClientTypes.DocumentReadMode? = nil,
            featureTypes: [ComprehendClientTypes.DocumentReadFeatureTypes]? = nil
        )
        {
            self.documentReadAction = documentReadAction
            self.documentReadMode = documentReadMode
            self.featureTypes = featureTypes
        }
    }

}

extension ComprehendClientTypes {
    public enum DocumentType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case image
        case msWord
        case nativePdf
        case plainText
        case scannedPdf
        case textractAnalyzeDocumentJson
        case textractDetectDocumentTextJson
        case sdkUnknown(Swift.String)

        public static var allCases: [DocumentType] {
            return [
                .image,
                .msWord,
                .nativePdf,
                .plainText,
                .scannedPdf,
                .textractAnalyzeDocumentJson,
                .textractDetectDocumentTextJson,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .image: return "IMAGE"
            case .msWord: return "MS_WORD"
            case .nativePdf: return "NATIVE_PDF"
            case .plainText: return "PLAIN_TEXT"
            case .scannedPdf: return "SCANNED_PDF"
            case .textractAnalyzeDocumentJson: return "TEXTRACT_ANALYZE_DOCUMENT_JSON"
            case .textractDetectDocumentTextJson: return "TEXTRACT_DETECT_DOCUMENT_TEXT_JSON"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DocumentType(rawValue: rawValue) ?? DocumentType.sdkUnknown(rawValue)
        }
    }
}

extension ComprehendClientTypes.DocumentTypeListItem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case page = "Page"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let page = self.page {
            try encodeContainer.encode(page, forKey: .page)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .page)
        page = pageDecoded
        let typeDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.DocumentType.self, forKey: .type)
        type = typeDecoded
    }
}

extension ComprehendClientTypes {
    /// Document type for each page in the document.
    public struct DocumentTypeListItem: Swift.Equatable {
        /// Page number.
        public var page: Swift.Int?
        /// Document type.
        public var type: ComprehendClientTypes.DocumentType?

        public init (
            page: Swift.Int? = nil,
            type: ComprehendClientTypes.DocumentType? = nil
        )
        {
            self.page = page
            self.type = type
        }
    }

}

extension ComprehendClientTypes.DominantLanguage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languageCode = "LanguageCode"
        case score = "Score"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let languageCode = self.languageCode {
            try encodeContainer.encode(languageCode, forKey: .languageCode)
        }
        if let score = self.score {
            try encodeContainer.encode(score, forKey: .score)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let languageCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let scoreDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .score)
        score = scoreDecoded
    }
}

extension ComprehendClientTypes {
    /// Returns the code for the dominant language in the input text and the level of confidence that Amazon Comprehend has in the accuracy of the detection.
    public struct DominantLanguage: Swift.Equatable {
        /// The RFC 5646 language code for the dominant language. For more information about RFC 5646, see [Tags for Identifying Languages](https://tools.ietf.org/html/rfc5646) on the IETF Tools web site.
        public var languageCode: Swift.String?
        /// The level of confidence that Amazon Comprehend has in the accuracy of the detection.
        public var score: Swift.Float?

        public init (
            languageCode: Swift.String? = nil,
            score: Swift.Float? = nil
        )
        {
            self.languageCode = languageCode
            self.score = score
        }
    }

}

extension ComprehendClientTypes.DominantLanguageDetectionJobFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobName = "JobName"
        case jobStatus = "JobStatus"
        case submitTimeAfter = "SubmitTimeAfter"
        case submitTimeBefore = "SubmitTimeBefore"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobName = self.jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let jobStatus = self.jobStatus {
            try encodeContainer.encode(jobStatus.rawValue, forKey: .jobStatus)
        }
        if let submitTimeAfter = self.submitTimeAfter {
            try encodeContainer.encodeTimestamp(submitTimeAfter, format: .epochSeconds, forKey: .submitTimeAfter)
        }
        if let submitTimeBefore = self.submitTimeBefore {
            try encodeContainer.encodeTimestamp(submitTimeBefore, format: .epochSeconds, forKey: .submitTimeBefore)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let submitTimeBeforeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .submitTimeBefore)
        submitTimeBefore = submitTimeBeforeDecoded
        let submitTimeAfterDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .submitTimeAfter)
        submitTimeAfter = submitTimeAfterDecoded
    }
}

extension ComprehendClientTypes {
    /// Provides information for filtering a list of dominant language detection jobs. For more information, see the operation.
    public struct DominantLanguageDetectionJobFilter: Swift.Equatable {
        /// Filters on the name of the job.
        public var jobName: Swift.String?
        /// Filters the list of jobs based on job status. Returns only jobs with the specified status.
        public var jobStatus: ComprehendClientTypes.JobStatus?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest.
        public var submitTimeAfter: ClientRuntime.Date?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest.
        public var submitTimeBefore: ClientRuntime.Date?

        public init (
            jobName: Swift.String? = nil,
            jobStatus: ComprehendClientTypes.JobStatus? = nil,
            submitTimeAfter: ClientRuntime.Date? = nil,
            submitTimeBefore: ClientRuntime.Date? = nil
        )
        {
            self.jobName = jobName
            self.jobStatus = jobStatus
            self.submitTimeAfter = submitTimeAfter
            self.submitTimeBefore = submitTimeBefore
        }
    }

}

extension ComprehendClientTypes.DominantLanguageDetectionJobProperties: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataAccessRoleArn = "DataAccessRoleArn"
        case endTime = "EndTime"
        case inputDataConfig = "InputDataConfig"
        case jobArn = "JobArn"
        case jobId = "JobId"
        case jobName = "JobName"
        case jobStatus = "JobStatus"
        case message = "Message"
        case outputDataConfig = "OutputDataConfig"
        case submitTime = "SubmitTime"
        case volumeKmsKeyId = "VolumeKmsKeyId"
        case vpcConfig = "VpcConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataAccessRoleArn = self.dataAccessRoleArn {
            try encodeContainer.encode(dataAccessRoleArn, forKey: .dataAccessRoleArn)
        }
        if let endTime = self.endTime {
            try encodeContainer.encodeTimestamp(endTime, format: .epochSeconds, forKey: .endTime)
        }
        if let inputDataConfig = self.inputDataConfig {
            try encodeContainer.encode(inputDataConfig, forKey: .inputDataConfig)
        }
        if let jobArn = self.jobArn {
            try encodeContainer.encode(jobArn, forKey: .jobArn)
        }
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let jobName = self.jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let jobStatus = self.jobStatus {
            try encodeContainer.encode(jobStatus.rawValue, forKey: .jobStatus)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let outputDataConfig = self.outputDataConfig {
            try encodeContainer.encode(outputDataConfig, forKey: .outputDataConfig)
        }
        if let submitTime = self.submitTime {
            try encodeContainer.encodeTimestamp(submitTime, format: .epochSeconds, forKey: .submitTime)
        }
        if let volumeKmsKeyId = self.volumeKmsKeyId {
            try encodeContainer.encode(volumeKmsKeyId, forKey: .volumeKmsKeyId)
        }
        if let vpcConfig = self.vpcConfig {
            try encodeContainer.encode(vpcConfig, forKey: .vpcConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let jobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobArn)
        jobArn = jobArnDecoded
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let submitTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .submitTime)
        submitTime = submitTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endTime)
        endTime = endTimeDecoded
        let inputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.InputDataConfig.self, forKey: .inputDataConfig)
        inputDataConfig = inputDataConfigDecoded
        let outputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.OutputDataConfig.self, forKey: .outputDataConfig)
        outputDataConfig = outputDataConfigDecoded
        let dataAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataAccessRoleArn)
        dataAccessRoleArn = dataAccessRoleArnDecoded
        let volumeKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeKmsKeyId)
        volumeKmsKeyId = volumeKmsKeyIdDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
    }
}

extension ComprehendClientTypes {
    /// Provides information about a dominant language detection job.
    public struct DominantLanguageDetectionJobProperties: Swift.Equatable {
        /// The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.
        public var dataAccessRoleArn: Swift.String?
        /// The time that the dominant language detection job completed.
        public var endTime: ClientRuntime.Date?
        /// The input data configuration that you supplied when you created the dominant language detection job.
        public var inputDataConfig: ComprehendClientTypes.InputDataConfig?
        /// The Amazon Resource Name (ARN) of the dominant language detection job. It is a unique, fully qualified identifier for the job. It includes the AWS account, Region, and the job ID. The format of the ARN is as follows: arn::comprehend:::dominant-language-detection-job/ The following is an example job ARN: arn:aws:comprehend:us-west-2:111122223333:dominant-language-detection-job/1234abcd12ab34cd56ef1234567890ab
        public var jobArn: Swift.String?
        /// The identifier assigned to the dominant language detection job.
        public var jobId: Swift.String?
        /// The name that you assigned to the dominant language detection job.
        public var jobName: Swift.String?
        /// The current status of the dominant language detection job. If the status is FAILED, the Message field shows the reason for the failure.
        public var jobStatus: ComprehendClientTypes.JobStatus?
        /// A description for the status of a job.
        public var message: Swift.String?
        /// The output data configuration that you supplied when you created the dominant language detection job.
        public var outputDataConfig: ComprehendClientTypes.OutputDataConfig?
        /// The time that the dominant language detection job was submitted for processing.
        public var submitTime: ClientRuntime.Date?
        /// ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:
        ///
        /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
        public var volumeKmsKeyId: Swift.String?
        /// Configuration parameters for a private Virtual Private Cloud (VPC) containing the resources you are using for your dominant language detection job. For more information, see [Amazon VPC](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html).
        public var vpcConfig: ComprehendClientTypes.VpcConfig?

        public init (
            dataAccessRoleArn: Swift.String? = nil,
            endTime: ClientRuntime.Date? = nil,
            inputDataConfig: ComprehendClientTypes.InputDataConfig? = nil,
            jobArn: Swift.String? = nil,
            jobId: Swift.String? = nil,
            jobName: Swift.String? = nil,
            jobStatus: ComprehendClientTypes.JobStatus? = nil,
            message: Swift.String? = nil,
            outputDataConfig: ComprehendClientTypes.OutputDataConfig? = nil,
            submitTime: ClientRuntime.Date? = nil,
            volumeKmsKeyId: Swift.String? = nil,
            vpcConfig: ComprehendClientTypes.VpcConfig? = nil
        )
        {
            self.dataAccessRoleArn = dataAccessRoleArn
            self.endTime = endTime
            self.inputDataConfig = inputDataConfig
            self.jobArn = jobArn
            self.jobId = jobId
            self.jobName = jobName
            self.jobStatus = jobStatus
            self.message = message
            self.outputDataConfig = outputDataConfig
            self.submitTime = submitTime
            self.volumeKmsKeyId = volumeKmsKeyId
            self.vpcConfig = vpcConfig
        }
    }

}

extension ComprehendClientTypes.EndpointFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case modelArn = "ModelArn"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTimeAfter = self.creationTimeAfter {
            try encodeContainer.encodeTimestamp(creationTimeAfter, format: .epochSeconds, forKey: .creationTimeAfter)
        }
        if let creationTimeBefore = self.creationTimeBefore {
            try encodeContainer.encodeTimestamp(creationTimeBefore, format: .epochSeconds, forKey: .creationTimeBefore)
        }
        if let modelArn = self.modelArn {
            try encodeContainer.encode(modelArn, forKey: .modelArn)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelArn)
        modelArn = modelArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.EndpointStatus.self, forKey: .status)
        status = statusDecoded
        let creationTimeBeforeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTimeBefore)
        creationTimeBefore = creationTimeBeforeDecoded
        let creationTimeAfterDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTimeAfter)
        creationTimeAfter = creationTimeAfterDecoded
    }
}

extension ComprehendClientTypes {
    /// The filter used to determine which endpoints are returned. You can filter jobs on their name, model, status, or the date and time that they were created. You can only set one filter at a time.
    public struct EndpointFilter: Swift.Equatable {
        /// Specifies a date after which the returned endpoint or endpoints were created.
        public var creationTimeAfter: ClientRuntime.Date?
        /// Specifies a date before which the returned endpoint or endpoints were created.
        public var creationTimeBefore: ClientRuntime.Date?
        /// The Amazon Resource Number (ARN) of the model to which the endpoint is attached.
        public var modelArn: Swift.String?
        /// Specifies the status of the endpoint being returned. Possible values are: Creating, Ready, Updating, Deleting, Failed.
        public var status: ComprehendClientTypes.EndpointStatus?

        public init (
            creationTimeAfter: ClientRuntime.Date? = nil,
            creationTimeBefore: ClientRuntime.Date? = nil,
            modelArn: Swift.String? = nil,
            status: ComprehendClientTypes.EndpointStatus? = nil
        )
        {
            self.creationTimeAfter = creationTimeAfter
            self.creationTimeBefore = creationTimeBefore
            self.modelArn = modelArn
            self.status = status
        }
    }

}

extension ComprehendClientTypes.EndpointProperties: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case currentInferenceUnits = "CurrentInferenceUnits"
        case dataAccessRoleArn = "DataAccessRoleArn"
        case desiredDataAccessRoleArn = "DesiredDataAccessRoleArn"
        case desiredInferenceUnits = "DesiredInferenceUnits"
        case desiredModelArn = "DesiredModelArn"
        case endpointArn = "EndpointArn"
        case lastModifiedTime = "LastModifiedTime"
        case message = "Message"
        case modelArn = "ModelArn"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = self.creationTime {
            try encodeContainer.encodeTimestamp(creationTime, format: .epochSeconds, forKey: .creationTime)
        }
        if let currentInferenceUnits = self.currentInferenceUnits {
            try encodeContainer.encode(currentInferenceUnits, forKey: .currentInferenceUnits)
        }
        if let dataAccessRoleArn = self.dataAccessRoleArn {
            try encodeContainer.encode(dataAccessRoleArn, forKey: .dataAccessRoleArn)
        }
        if let desiredDataAccessRoleArn = self.desiredDataAccessRoleArn {
            try encodeContainer.encode(desiredDataAccessRoleArn, forKey: .desiredDataAccessRoleArn)
        }
        if let desiredInferenceUnits = self.desiredInferenceUnits {
            try encodeContainer.encode(desiredInferenceUnits, forKey: .desiredInferenceUnits)
        }
        if let desiredModelArn = self.desiredModelArn {
            try encodeContainer.encode(desiredModelArn, forKey: .desiredModelArn)
        }
        if let endpointArn = self.endpointArn {
            try encodeContainer.encode(endpointArn, forKey: .endpointArn)
        }
        if let lastModifiedTime = self.lastModifiedTime {
            try encodeContainer.encodeTimestamp(lastModifiedTime, format: .epochSeconds, forKey: .lastModifiedTime)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let modelArn = self.modelArn {
            try encodeContainer.encode(modelArn, forKey: .modelArn)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointArn)
        endpointArn = endpointArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.EndpointStatus.self, forKey: .status)
        status = statusDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let modelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelArn)
        modelArn = modelArnDecoded
        let desiredModelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .desiredModelArn)
        desiredModelArn = desiredModelArnDecoded
        let desiredInferenceUnitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .desiredInferenceUnits)
        desiredInferenceUnits = desiredInferenceUnitsDecoded
        let currentInferenceUnitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .currentInferenceUnits)
        currentInferenceUnits = currentInferenceUnitsDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let dataAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataAccessRoleArn)
        dataAccessRoleArn = dataAccessRoleArnDecoded
        let desiredDataAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .desiredDataAccessRoleArn)
        desiredDataAccessRoleArn = desiredDataAccessRoleArnDecoded
    }
}

extension ComprehendClientTypes {
    /// Specifies information about the specified endpoint. For information about endpoints, see [Managing endpoints](https://docs.aws.amazon.com/comprehend/latest/dg/manage-endpoints.html).
    public struct EndpointProperties: Swift.Equatable {
        /// The creation date and time of the endpoint.
        public var creationTime: ClientRuntime.Date?
        /// The number of inference units currently used by the model using this endpoint.
        public var currentInferenceUnits: Swift.Int?
        /// The Amazon Resource Name (ARN) of the AWS identity and Access Management (IAM) role that grants Amazon Comprehend read access to trained custom models encrypted with a customer managed key (ModelKmsKeyId).
        public var dataAccessRoleArn: Swift.String?
        /// Data access role ARN to use in case the new model is encrypted with a customer KMS key.
        public var desiredDataAccessRoleArn: Swift.String?
        /// The desired number of inference units to be used by the model using this endpoint. Each inference unit represents of a throughput of 100 characters per second.
        public var desiredInferenceUnits: Swift.Int?
        /// ARN of the new model to use for updating an existing endpoint. This ARN is going to be different from the model ARN when the update is in progress
        public var desiredModelArn: Swift.String?
        /// The Amazon Resource Number (ARN) of the endpoint.
        public var endpointArn: Swift.String?
        /// The date and time that the endpoint was last modified.
        public var lastModifiedTime: ClientRuntime.Date?
        /// Specifies a reason for failure in cases of Failed status.
        public var message: Swift.String?
        /// The Amazon Resource Number (ARN) of the model to which the endpoint is attached.
        public var modelArn: Swift.String?
        /// Specifies the status of the endpoint. Because the endpoint updates and creation are asynchronous, so customers will need to wait for the endpoint to be Ready status before making inference requests.
        public var status: ComprehendClientTypes.EndpointStatus?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            currentInferenceUnits: Swift.Int? = nil,
            dataAccessRoleArn: Swift.String? = nil,
            desiredDataAccessRoleArn: Swift.String? = nil,
            desiredInferenceUnits: Swift.Int? = nil,
            desiredModelArn: Swift.String? = nil,
            endpointArn: Swift.String? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            message: Swift.String? = nil,
            modelArn: Swift.String? = nil,
            status: ComprehendClientTypes.EndpointStatus? = nil
        )
        {
            self.creationTime = creationTime
            self.currentInferenceUnits = currentInferenceUnits
            self.dataAccessRoleArn = dataAccessRoleArn
            self.desiredDataAccessRoleArn = desiredDataAccessRoleArn
            self.desiredInferenceUnits = desiredInferenceUnits
            self.desiredModelArn = desiredModelArn
            self.endpointArn = endpointArn
            self.lastModifiedTime = lastModifiedTime
            self.message = message
            self.modelArn = modelArn
            self.status = status
        }
    }

}

extension ComprehendClientTypes {
    public enum EndpointStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creating
        case deleting
        case failed
        case inService
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [EndpointStatus] {
            return [
                .creating,
                .deleting,
                .failed,
                .inService,
                .updating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case .inService: return "IN_SERVICE"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EndpointStatus(rawValue: rawValue) ?? EndpointStatus.sdkUnknown(rawValue)
        }
    }
}

extension ComprehendClientTypes.EntitiesDetectionJobFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobName = "JobName"
        case jobStatus = "JobStatus"
        case submitTimeAfter = "SubmitTimeAfter"
        case submitTimeBefore = "SubmitTimeBefore"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobName = self.jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let jobStatus = self.jobStatus {
            try encodeContainer.encode(jobStatus.rawValue, forKey: .jobStatus)
        }
        if let submitTimeAfter = self.submitTimeAfter {
            try encodeContainer.encodeTimestamp(submitTimeAfter, format: .epochSeconds, forKey: .submitTimeAfter)
        }
        if let submitTimeBefore = self.submitTimeBefore {
            try encodeContainer.encodeTimestamp(submitTimeBefore, format: .epochSeconds, forKey: .submitTimeBefore)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let submitTimeBeforeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .submitTimeBefore)
        submitTimeBefore = submitTimeBeforeDecoded
        let submitTimeAfterDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .submitTimeAfter)
        submitTimeAfter = submitTimeAfterDecoded
    }
}

extension ComprehendClientTypes {
    /// Provides information for filtering a list of dominant language detection jobs. For more information, see the operation.
    public struct EntitiesDetectionJobFilter: Swift.Equatable {
        /// Filters on the name of the job.
        public var jobName: Swift.String?
        /// Filters the list of jobs based on job status. Returns only jobs with the specified status.
        public var jobStatus: ComprehendClientTypes.JobStatus?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest.
        public var submitTimeAfter: ClientRuntime.Date?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest.
        public var submitTimeBefore: ClientRuntime.Date?

        public init (
            jobName: Swift.String? = nil,
            jobStatus: ComprehendClientTypes.JobStatus? = nil,
            submitTimeAfter: ClientRuntime.Date? = nil,
            submitTimeBefore: ClientRuntime.Date? = nil
        )
        {
            self.jobName = jobName
            self.jobStatus = jobStatus
            self.submitTimeAfter = submitTimeAfter
            self.submitTimeBefore = submitTimeBefore
        }
    }

}

extension ComprehendClientTypes.EntitiesDetectionJobProperties: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataAccessRoleArn = "DataAccessRoleArn"
        case endTime = "EndTime"
        case entityRecognizerArn = "EntityRecognizerArn"
        case inputDataConfig = "InputDataConfig"
        case jobArn = "JobArn"
        case jobId = "JobId"
        case jobName = "JobName"
        case jobStatus = "JobStatus"
        case languageCode = "LanguageCode"
        case message = "Message"
        case outputDataConfig = "OutputDataConfig"
        case submitTime = "SubmitTime"
        case volumeKmsKeyId = "VolumeKmsKeyId"
        case vpcConfig = "VpcConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataAccessRoleArn = self.dataAccessRoleArn {
            try encodeContainer.encode(dataAccessRoleArn, forKey: .dataAccessRoleArn)
        }
        if let endTime = self.endTime {
            try encodeContainer.encodeTimestamp(endTime, format: .epochSeconds, forKey: .endTime)
        }
        if let entityRecognizerArn = self.entityRecognizerArn {
            try encodeContainer.encode(entityRecognizerArn, forKey: .entityRecognizerArn)
        }
        if let inputDataConfig = self.inputDataConfig {
            try encodeContainer.encode(inputDataConfig, forKey: .inputDataConfig)
        }
        if let jobArn = self.jobArn {
            try encodeContainer.encode(jobArn, forKey: .jobArn)
        }
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let jobName = self.jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let jobStatus = self.jobStatus {
            try encodeContainer.encode(jobStatus.rawValue, forKey: .jobStatus)
        }
        if let languageCode = self.languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let outputDataConfig = self.outputDataConfig {
            try encodeContainer.encode(outputDataConfig, forKey: .outputDataConfig)
        }
        if let submitTime = self.submitTime {
            try encodeContainer.encodeTimestamp(submitTime, format: .epochSeconds, forKey: .submitTime)
        }
        if let volumeKmsKeyId = self.volumeKmsKeyId {
            try encodeContainer.encode(volumeKmsKeyId, forKey: .volumeKmsKeyId)
        }
        if let vpcConfig = self.vpcConfig {
            try encodeContainer.encode(vpcConfig, forKey: .vpcConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let jobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobArn)
        jobArn = jobArnDecoded
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let submitTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .submitTime)
        submitTime = submitTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endTime)
        endTime = endTimeDecoded
        let entityRecognizerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .entityRecognizerArn)
        entityRecognizerArn = entityRecognizerArnDecoded
        let inputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.InputDataConfig.self, forKey: .inputDataConfig)
        inputDataConfig = inputDataConfigDecoded
        let outputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.OutputDataConfig.self, forKey: .outputDataConfig)
        outputDataConfig = outputDataConfigDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let dataAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataAccessRoleArn)
        dataAccessRoleArn = dataAccessRoleArnDecoded
        let volumeKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeKmsKeyId)
        volumeKmsKeyId = volumeKmsKeyIdDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
    }
}

extension ComprehendClientTypes {
    /// Provides information about an entities detection job.
    public struct EntitiesDetectionJobProperties: Swift.Equatable {
        /// The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.
        public var dataAccessRoleArn: Swift.String?
        /// The time that the entities detection job completed
        public var endTime: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) that identifies the entity recognizer.
        public var entityRecognizerArn: Swift.String?
        /// The input data configuration that you supplied when you created the entities detection job.
        public var inputDataConfig: ComprehendClientTypes.InputDataConfig?
        /// The Amazon Resource Name (ARN) of the entities detection job. It is a unique, fully qualified identifier for the job. It includes the AWS account, Region, and the job ID. The format of the ARN is as follows: arn::comprehend:::entities-detection-job/ The following is an example job ARN: arn:aws:comprehend:us-west-2:111122223333:entities-detection-job/1234abcd12ab34cd56ef1234567890ab
        public var jobArn: Swift.String?
        /// The identifier assigned to the entities detection job.
        public var jobId: Swift.String?
        /// The name that you assigned the entities detection job.
        public var jobName: Swift.String?
        /// The current status of the entities detection job. If the status is FAILED, the Message field shows the reason for the failure.
        public var jobStatus: ComprehendClientTypes.JobStatus?
        /// The language code of the input documents.
        public var languageCode: ComprehendClientTypes.LanguageCode?
        /// A description of the status of a job.
        public var message: Swift.String?
        /// The output data configuration that you supplied when you created the entities detection job.
        public var outputDataConfig: ComprehendClientTypes.OutputDataConfig?
        /// The time that the entities detection job was submitted for processing.
        public var submitTime: ClientRuntime.Date?
        /// ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:
        ///
        /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
        public var volumeKmsKeyId: Swift.String?
        /// Configuration parameters for a private Virtual Private Cloud (VPC) containing the resources you are using for your entity detection job. For more information, see [Amazon VPC](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html).
        public var vpcConfig: ComprehendClientTypes.VpcConfig?

        public init (
            dataAccessRoleArn: Swift.String? = nil,
            endTime: ClientRuntime.Date? = nil,
            entityRecognizerArn: Swift.String? = nil,
            inputDataConfig: ComprehendClientTypes.InputDataConfig? = nil,
            jobArn: Swift.String? = nil,
            jobId: Swift.String? = nil,
            jobName: Swift.String? = nil,
            jobStatus: ComprehendClientTypes.JobStatus? = nil,
            languageCode: ComprehendClientTypes.LanguageCode? = nil,
            message: Swift.String? = nil,
            outputDataConfig: ComprehendClientTypes.OutputDataConfig? = nil,
            submitTime: ClientRuntime.Date? = nil,
            volumeKmsKeyId: Swift.String? = nil,
            vpcConfig: ComprehendClientTypes.VpcConfig? = nil
        )
        {
            self.dataAccessRoleArn = dataAccessRoleArn
            self.endTime = endTime
            self.entityRecognizerArn = entityRecognizerArn
            self.inputDataConfig = inputDataConfig
            self.jobArn = jobArn
            self.jobId = jobId
            self.jobName = jobName
            self.jobStatus = jobStatus
            self.languageCode = languageCode
            self.message = message
            self.outputDataConfig = outputDataConfig
            self.submitTime = submitTime
            self.volumeKmsKeyId = volumeKmsKeyId
            self.vpcConfig = vpcConfig
        }
    }

}

extension ComprehendClientTypes.Entity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case beginOffset = "BeginOffset"
        case blockReferences = "BlockReferences"
        case endOffset = "EndOffset"
        case score = "Score"
        case text = "Text"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let beginOffset = self.beginOffset {
            try encodeContainer.encode(beginOffset, forKey: .beginOffset)
        }
        if let blockReferences = blockReferences {
            var blockReferencesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .blockReferences)
            for blockreference0 in blockReferences {
                try blockReferencesContainer.encode(blockreference0)
            }
        }
        if let endOffset = self.endOffset {
            try encodeContainer.encode(endOffset, forKey: .endOffset)
        }
        if let score = self.score {
            try encodeContainer.encode(score, forKey: .score)
        }
        if let text = self.text {
            try encodeContainer.encode(text, forKey: .text)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scoreDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .score)
        score = scoreDecoded
        let typeDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.EntityType.self, forKey: .type)
        type = typeDecoded
        let textDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .text)
        text = textDecoded
        let beginOffsetDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .beginOffset)
        beginOffset = beginOffsetDecoded
        let endOffsetDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .endOffset)
        endOffset = endOffsetDecoded
        let blockReferencesContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.BlockReference?].self, forKey: .blockReferences)
        var blockReferencesDecoded0:[ComprehendClientTypes.BlockReference]? = nil
        if let blockReferencesContainer = blockReferencesContainer {
            blockReferencesDecoded0 = [ComprehendClientTypes.BlockReference]()
            for structure0 in blockReferencesContainer {
                if let structure0 = structure0 {
                    blockReferencesDecoded0?.append(structure0)
                }
            }
        }
        blockReferences = blockReferencesDecoded0
    }
}

extension ComprehendClientTypes {
    /// Provides information about an entity.
    public struct Entity: Swift.Equatable {
        /// The zero-based offset from the beginning of the source text to the first character in the entity. This field is empty for non-text input.
        public var beginOffset: Swift.Int?
        /// A reference to each block for this entity. This field is empty for plain-text input.
        public var blockReferences: [ComprehendClientTypes.BlockReference]?
        /// The zero-based offset from the beginning of the source text to the last character in the entity. This field is empty for non-text input.
        public var endOffset: Swift.Int?
        /// The level of confidence that Amazon Comprehend has in the accuracy of the detection.
        public var score: Swift.Float?
        /// The text of the entity.
        public var text: Swift.String?
        /// The entity type. For entity detection using the built-in model, this field contains one of the standard entity types listed below. For custom entity detection, this field contains one of the entity types that you specified when you trained your custom model.
        public var type: ComprehendClientTypes.EntityType?

        public init (
            beginOffset: Swift.Int? = nil,
            blockReferences: [ComprehendClientTypes.BlockReference]? = nil,
            endOffset: Swift.Int? = nil,
            score: Swift.Float? = nil,
            text: Swift.String? = nil,
            type: ComprehendClientTypes.EntityType? = nil
        )
        {
            self.beginOffset = beginOffset
            self.blockReferences = blockReferences
            self.endOffset = endOffset
            self.score = score
            self.text = text
            self.type = type
        }
    }

}

extension ComprehendClientTypes.EntityLabel: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case score = "Score"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let score = self.score {
            try encodeContainer.encode(score, forKey: .score)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.PiiEntityType.self, forKey: .name)
        name = nameDecoded
        let scoreDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .score)
        score = scoreDecoded
    }
}

extension ComprehendClientTypes {
    /// Specifies one of the label or labels that categorize the personally identifiable information (PII) entity being analyzed.
    public struct EntityLabel: Swift.Equatable {
        /// The name of the label.
        public var name: ComprehendClientTypes.PiiEntityType?
        /// The level of confidence that Amazon Comprehend has in the accuracy of the detection.
        public var score: Swift.Float?

        public init (
            name: ComprehendClientTypes.PiiEntityType? = nil,
            score: Swift.Float? = nil
        )
        {
            self.name = name
            self.score = score
        }
    }

}

extension ComprehendClientTypes.EntityRecognizerAnnotations: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3Uri = "S3Uri"
        case testS3Uri = "TestS3Uri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let s3Uri = self.s3Uri {
            try encodeContainer.encode(s3Uri, forKey: .s3Uri)
        }
        if let testS3Uri = self.testS3Uri {
            try encodeContainer.encode(testS3Uri, forKey: .testS3Uri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Uri)
        s3Uri = s3UriDecoded
        let testS3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .testS3Uri)
        testS3Uri = testS3UriDecoded
    }
}

extension ComprehendClientTypes {
    /// Describes the annotations associated with a entity recognizer.
    public struct EntityRecognizerAnnotations: Swift.Equatable {
        /// Specifies the Amazon S3 location where the annotations for an entity recognizer are located. The URI must be in the same region as the API endpoint that you are calling.
        /// This member is required.
        public var s3Uri: Swift.String?
        /// Specifies the Amazon S3 location where the test annotations for an entity recognizer are located. The URI must be in the same region as the API endpoint that you are calling.
        public var testS3Uri: Swift.String?

        public init (
            s3Uri: Swift.String? = nil,
            testS3Uri: Swift.String? = nil
        )
        {
            self.s3Uri = s3Uri
            self.testS3Uri = testS3Uri
        }
    }

}

extension ComprehendClientTypes {
    public enum EntityRecognizerDataFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case augmentedManifest
        case comprehendCsv
        case sdkUnknown(Swift.String)

        public static var allCases: [EntityRecognizerDataFormat] {
            return [
                .augmentedManifest,
                .comprehendCsv,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .augmentedManifest: return "AUGMENTED_MANIFEST"
            case .comprehendCsv: return "COMPREHEND_CSV"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EntityRecognizerDataFormat(rawValue: rawValue) ?? EntityRecognizerDataFormat.sdkUnknown(rawValue)
        }
    }
}

extension ComprehendClientTypes.EntityRecognizerDocuments: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inputFormat = "InputFormat"
        case s3Uri = "S3Uri"
        case testS3Uri = "TestS3Uri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inputFormat = self.inputFormat {
            try encodeContainer.encode(inputFormat.rawValue, forKey: .inputFormat)
        }
        if let s3Uri = self.s3Uri {
            try encodeContainer.encode(s3Uri, forKey: .s3Uri)
        }
        if let testS3Uri = self.testS3Uri {
            try encodeContainer.encode(testS3Uri, forKey: .testS3Uri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Uri)
        s3Uri = s3UriDecoded
        let testS3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .testS3Uri)
        testS3Uri = testS3UriDecoded
        let inputFormatDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.InputFormat.self, forKey: .inputFormat)
        inputFormat = inputFormatDecoded
    }
}

extension ComprehendClientTypes {
    /// Describes the training documents submitted with an entity recognizer.
    public struct EntityRecognizerDocuments: Swift.Equatable {
        /// Specifies how the text in an input file should be processed. This is optional, and the default is ONE_DOC_PER_LINE. ONE_DOC_PER_FILE - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers. ONE_DOC_PER_LINE - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.
        public var inputFormat: ComprehendClientTypes.InputFormat?
        /// Specifies the Amazon S3 location where the training documents for an entity recognizer are located. The URI must be in the same region as the API endpoint that you are calling.
        /// This member is required.
        public var s3Uri: Swift.String?
        /// Specifies the Amazon S3 location where the test documents for an entity recognizer are located. The URI must be in the same AWS Region as the API endpoint that you are calling.
        public var testS3Uri: Swift.String?

        public init (
            inputFormat: ComprehendClientTypes.InputFormat? = nil,
            s3Uri: Swift.String? = nil,
            testS3Uri: Swift.String? = nil
        )
        {
            self.inputFormat = inputFormat
            self.s3Uri = s3Uri
            self.testS3Uri = testS3Uri
        }
    }

}

extension ComprehendClientTypes.EntityRecognizerEntityList: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3Uri = "S3Uri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let s3Uri = self.s3Uri {
            try encodeContainer.encode(s3Uri, forKey: .s3Uri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Uri)
        s3Uri = s3UriDecoded
    }
}

extension ComprehendClientTypes {
    /// Describes the entity recognizer submitted with an entity recognizer.
    public struct EntityRecognizerEntityList: Swift.Equatable {
        /// Specifies the Amazon S3 location where the entity list is located. The URI must be in the same region as the API endpoint that you are calling.
        /// This member is required.
        public var s3Uri: Swift.String?

        public init (
            s3Uri: Swift.String? = nil
        )
        {
            self.s3Uri = s3Uri
        }
    }

}

extension ComprehendClientTypes.EntityRecognizerEvaluationMetrics: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case f1Score = "F1Score"
        case precision = "Precision"
        case recall = "Recall"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let f1Score = self.f1Score {
            try encodeContainer.encode(f1Score, forKey: .f1Score)
        }
        if let precision = self.precision {
            try encodeContainer.encode(precision, forKey: .precision)
        }
        if let recall = self.recall {
            try encodeContainer.encode(recall, forKey: .recall)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let precisionDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .precision)
        precision = precisionDecoded
        let recallDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .recall)
        recall = recallDecoded
        let f1ScoreDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .f1Score)
        f1Score = f1ScoreDecoded
    }
}

extension ComprehendClientTypes {
    /// Detailed information about the accuracy of an entity recognizer.
    public struct EntityRecognizerEvaluationMetrics: Swift.Equatable {
        /// A measure of how accurate the recognizer results are for the test data. It is derived from the Precision and Recall values. The F1Score is the harmonic average of the two scores. For plain text entity recognizer models, the range is 0 to 100, where 100 is the best score. For PDF/Word entity recognizer models, the range is 0 to 1, where 1 is the best score.
        public var f1Score: Swift.Double?
        /// A measure of the usefulness of the recognizer results in the test data. High precision means that the recognizer returned substantially more relevant results than irrelevant ones.
        public var precision: Swift.Double?
        /// A measure of how complete the recognizer results are for the test data. High recall means that the recognizer returned most of the relevant results.
        public var recall: Swift.Double?

        public init (
            f1Score: Swift.Double? = nil,
            precision: Swift.Double? = nil,
            recall: Swift.Double? = nil
        )
        {
            self.f1Score = f1Score
            self.precision = precision
            self.recall = recall
        }
    }

}

extension ComprehendClientTypes.EntityRecognizerFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case recognizerName = "RecognizerName"
        case status = "Status"
        case submitTimeAfter = "SubmitTimeAfter"
        case submitTimeBefore = "SubmitTimeBefore"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let recognizerName = self.recognizerName {
            try encodeContainer.encode(recognizerName, forKey: .recognizerName)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let submitTimeAfter = self.submitTimeAfter {
            try encodeContainer.encodeTimestamp(submitTimeAfter, format: .epochSeconds, forKey: .submitTimeAfter)
        }
        if let submitTimeBefore = self.submitTimeBefore {
            try encodeContainer.encodeTimestamp(submitTimeBefore, format: .epochSeconds, forKey: .submitTimeBefore)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.ModelStatus.self, forKey: .status)
        status = statusDecoded
        let recognizerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recognizerName)
        recognizerName = recognizerNameDecoded
        let submitTimeBeforeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .submitTimeBefore)
        submitTimeBefore = submitTimeBeforeDecoded
        let submitTimeAfterDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .submitTimeAfter)
        submitTimeAfter = submitTimeAfterDecoded
    }
}

extension ComprehendClientTypes {
    /// Provides information for filtering a list of entity recognizers. You can only specify one filtering parameter in a request. For more information, see the operation./>
    public struct EntityRecognizerFilter: Swift.Equatable {
        /// The name that you assigned the entity recognizer.
        public var recognizerName: Swift.String?
        /// The status of an entity recognizer.
        public var status: ComprehendClientTypes.ModelStatus?
        /// Filters the list of entities based on the time that the list was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in ascending order, oldest to newest.
        public var submitTimeAfter: ClientRuntime.Date?
        /// Filters the list of entities based on the time that the list was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in descending order, newest to oldest.
        public var submitTimeBefore: ClientRuntime.Date?

        public init (
            recognizerName: Swift.String? = nil,
            status: ComprehendClientTypes.ModelStatus? = nil,
            submitTimeAfter: ClientRuntime.Date? = nil,
            submitTimeBefore: ClientRuntime.Date? = nil
        )
        {
            self.recognizerName = recognizerName
            self.status = status
            self.submitTimeAfter = submitTimeAfter
            self.submitTimeBefore = submitTimeBefore
        }
    }

}

extension ComprehendClientTypes.EntityRecognizerInputDataConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case annotations = "Annotations"
        case augmentedManifests = "AugmentedManifests"
        case dataFormat = "DataFormat"
        case documents = "Documents"
        case entityList = "EntityList"
        case entityTypes = "EntityTypes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let annotations = self.annotations {
            try encodeContainer.encode(annotations, forKey: .annotations)
        }
        if let augmentedManifests = augmentedManifests {
            var augmentedManifestsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .augmentedManifests)
            for augmentedmanifestslistitem0 in augmentedManifests {
                try augmentedManifestsContainer.encode(augmentedmanifestslistitem0)
            }
        }
        if let dataFormat = self.dataFormat {
            try encodeContainer.encode(dataFormat.rawValue, forKey: .dataFormat)
        }
        if let documents = self.documents {
            try encodeContainer.encode(documents, forKey: .documents)
        }
        if let entityList = self.entityList {
            try encodeContainer.encode(entityList, forKey: .entityList)
        }
        if let entityTypes = entityTypes {
            var entityTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .entityTypes)
            for entitytypeslistitem0 in entityTypes {
                try entityTypesContainer.encode(entitytypeslistitem0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataFormatDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.EntityRecognizerDataFormat.self, forKey: .dataFormat)
        dataFormat = dataFormatDecoded
        let entityTypesContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.EntityTypesListItem?].self, forKey: .entityTypes)
        var entityTypesDecoded0:[ComprehendClientTypes.EntityTypesListItem]? = nil
        if let entityTypesContainer = entityTypesContainer {
            entityTypesDecoded0 = [ComprehendClientTypes.EntityTypesListItem]()
            for structure0 in entityTypesContainer {
                if let structure0 = structure0 {
                    entityTypesDecoded0?.append(structure0)
                }
            }
        }
        entityTypes = entityTypesDecoded0
        let documentsDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.EntityRecognizerDocuments.self, forKey: .documents)
        documents = documentsDecoded
        let annotationsDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.EntityRecognizerAnnotations.self, forKey: .annotations)
        annotations = annotationsDecoded
        let entityListDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.EntityRecognizerEntityList.self, forKey: .entityList)
        entityList = entityListDecoded
        let augmentedManifestsContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.AugmentedManifestsListItem?].self, forKey: .augmentedManifests)
        var augmentedManifestsDecoded0:[ComprehendClientTypes.AugmentedManifestsListItem]? = nil
        if let augmentedManifestsContainer = augmentedManifestsContainer {
            augmentedManifestsDecoded0 = [ComprehendClientTypes.AugmentedManifestsListItem]()
            for structure0 in augmentedManifestsContainer {
                if let structure0 = structure0 {
                    augmentedManifestsDecoded0?.append(structure0)
                }
            }
        }
        augmentedManifests = augmentedManifestsDecoded0
    }
}

extension ComprehendClientTypes {
    /// Specifies the format and location of the input data.
    public struct EntityRecognizerInputDataConfig: Swift.Equatable {
        /// The S3 location of the CSV file that annotates your training documents.
        public var annotations: ComprehendClientTypes.EntityRecognizerAnnotations?
        /// A list of augmented manifest files that provide training data for your custom model. An augmented manifest file is a labeled dataset that is produced by Amazon SageMaker Ground Truth. This parameter is required if you set DataFormat to AUGMENTED_MANIFEST.
        public var augmentedManifests: [ComprehendClientTypes.AugmentedManifestsListItem]?
        /// The format of your training data:
        ///
        /// * COMPREHEND_CSV: A CSV file that supplements your training documents. The CSV file contains information about the custom entities that your trained model will detect. The required format of the file depends on whether you are providing annotations or an entity list. If you use this value, you must provide your CSV file by using either the Annotations or EntityList parameters. You must provide your training documents by using the Documents parameter.
        ///
        /// * AUGMENTED_MANIFEST: A labeled dataset that is produced by Amazon SageMaker Ground Truth. This file is in JSON lines format. Each line is a complete JSON object that contains a training document and its labels. Each label annotates a named entity in the training document. If you use this value, you must provide the AugmentedManifests parameter in your request.
        ///
        ///
        /// If you don't specify a value, Amazon Comprehend uses COMPREHEND_CSV as the default.
        public var dataFormat: ComprehendClientTypes.EntityRecognizerDataFormat?
        /// The S3 location of the folder that contains the training documents for your custom entity recognizer. This parameter is required if you set DataFormat to COMPREHEND_CSV.
        public var documents: ComprehendClientTypes.EntityRecognizerDocuments?
        /// The S3 location of the CSV file that has the entity list for your custom entity recognizer.
        public var entityList: ComprehendClientTypes.EntityRecognizerEntityList?
        /// The entity types in the labeled training data that Amazon Comprehend uses to train the custom entity recognizer. Any entity types that you don't specify are ignored. A maximum of 25 entity types can be used at one time to train an entity recognizer. Entity types must not contain the following invalid characters: \n (line break), \\n (escaped line break), \r (carriage return), \\r (escaped carriage return), \t (tab), \\t (escaped tab), space, and , (comma).
        /// This member is required.
        public var entityTypes: [ComprehendClientTypes.EntityTypesListItem]?

        public init (
            annotations: ComprehendClientTypes.EntityRecognizerAnnotations? = nil,
            augmentedManifests: [ComprehendClientTypes.AugmentedManifestsListItem]? = nil,
            dataFormat: ComprehendClientTypes.EntityRecognizerDataFormat? = nil,
            documents: ComprehendClientTypes.EntityRecognizerDocuments? = nil,
            entityList: ComprehendClientTypes.EntityRecognizerEntityList? = nil,
            entityTypes: [ComprehendClientTypes.EntityTypesListItem]? = nil
        )
        {
            self.annotations = annotations
            self.augmentedManifests = augmentedManifests
            self.dataFormat = dataFormat
            self.documents = documents
            self.entityList = entityList
            self.entityTypes = entityTypes
        }
    }

}

extension ComprehendClientTypes.EntityRecognizerMetadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entityTypes = "EntityTypes"
        case evaluationMetrics = "EvaluationMetrics"
        case numberOfTestDocuments = "NumberOfTestDocuments"
        case numberOfTrainedDocuments = "NumberOfTrainedDocuments"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let entityTypes = entityTypes {
            var entityTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .entityTypes)
            for entityrecognizermetadataentitytypeslistitem0 in entityTypes {
                try entityTypesContainer.encode(entityrecognizermetadataentitytypeslistitem0)
            }
        }
        if let evaluationMetrics = self.evaluationMetrics {
            try encodeContainer.encode(evaluationMetrics, forKey: .evaluationMetrics)
        }
        if let numberOfTestDocuments = self.numberOfTestDocuments {
            try encodeContainer.encode(numberOfTestDocuments, forKey: .numberOfTestDocuments)
        }
        if let numberOfTrainedDocuments = self.numberOfTrainedDocuments {
            try encodeContainer.encode(numberOfTrainedDocuments, forKey: .numberOfTrainedDocuments)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let numberOfTrainedDocumentsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfTrainedDocuments)
        numberOfTrainedDocuments = numberOfTrainedDocumentsDecoded
        let numberOfTestDocumentsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfTestDocuments)
        numberOfTestDocuments = numberOfTestDocumentsDecoded
        let evaluationMetricsDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.EntityRecognizerEvaluationMetrics.self, forKey: .evaluationMetrics)
        evaluationMetrics = evaluationMetricsDecoded
        let entityTypesContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.EntityRecognizerMetadataEntityTypesListItem?].self, forKey: .entityTypes)
        var entityTypesDecoded0:[ComprehendClientTypes.EntityRecognizerMetadataEntityTypesListItem]? = nil
        if let entityTypesContainer = entityTypesContainer {
            entityTypesDecoded0 = [ComprehendClientTypes.EntityRecognizerMetadataEntityTypesListItem]()
            for structure0 in entityTypesContainer {
                if let structure0 = structure0 {
                    entityTypesDecoded0?.append(structure0)
                }
            }
        }
        entityTypes = entityTypesDecoded0
    }
}

extension ComprehendClientTypes.EntityRecognizerMetadata: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

extension ComprehendClientTypes {
    /// Detailed information about an entity recognizer.
    public struct EntityRecognizerMetadata: Swift.Equatable {
        /// Entity types from the metadata of an entity recognizer.
        public var entityTypes: [ComprehendClientTypes.EntityRecognizerMetadataEntityTypesListItem]?
        /// Detailed information about the accuracy of an entity recognizer.
        public var evaluationMetrics: ComprehendClientTypes.EntityRecognizerEvaluationMetrics?
        /// The number of documents in the input data that were used to test the entity recognizer. Typically this is 10 to 20 percent of the input documents.
        public var numberOfTestDocuments: Swift.Int?
        /// The number of documents in the input data that were used to train the entity recognizer. Typically this is 80 to 90 percent of the input documents.
        public var numberOfTrainedDocuments: Swift.Int?

        public init (
            entityTypes: [ComprehendClientTypes.EntityRecognizerMetadataEntityTypesListItem]? = nil,
            evaluationMetrics: ComprehendClientTypes.EntityRecognizerEvaluationMetrics? = nil,
            numberOfTestDocuments: Swift.Int? = nil,
            numberOfTrainedDocuments: Swift.Int? = nil
        )
        {
            self.entityTypes = entityTypes
            self.evaluationMetrics = evaluationMetrics
            self.numberOfTestDocuments = numberOfTestDocuments
            self.numberOfTrainedDocuments = numberOfTrainedDocuments
        }
    }

}

extension ComprehendClientTypes.EntityRecognizerMetadataEntityTypesListItem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case evaluationMetrics = "EvaluationMetrics"
        case numberOfTrainMentions = "NumberOfTrainMentions"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let evaluationMetrics = self.evaluationMetrics {
            try encodeContainer.encode(evaluationMetrics, forKey: .evaluationMetrics)
        }
        if let numberOfTrainMentions = self.numberOfTrainMentions {
            try encodeContainer.encode(numberOfTrainMentions, forKey: .numberOfTrainMentions)
        }
        if let type = self.type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let evaluationMetricsDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.EntityTypesEvaluationMetrics.self, forKey: .evaluationMetrics)
        evaluationMetrics = evaluationMetricsDecoded
        let numberOfTrainMentionsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfTrainMentions)
        numberOfTrainMentions = numberOfTrainMentionsDecoded
    }
}

extension ComprehendClientTypes {
    /// Individual item from the list of entity types in the metadata of an entity recognizer.
    public struct EntityRecognizerMetadataEntityTypesListItem: Swift.Equatable {
        /// Detailed information about the accuracy of the entity recognizer for a specific item on the list of entity types.
        public var evaluationMetrics: ComprehendClientTypes.EntityTypesEvaluationMetrics?
        /// Indicates the number of times the given entity type was seen in the training data.
        public var numberOfTrainMentions: Swift.Int?
        /// Type of entity from the list of entity types in the metadata of an entity recognizer.
        public var type: Swift.String?

        public init (
            evaluationMetrics: ComprehendClientTypes.EntityTypesEvaluationMetrics? = nil,
            numberOfTrainMentions: Swift.Int? = nil,
            type: Swift.String? = nil
        )
        {
            self.evaluationMetrics = evaluationMetrics
            self.numberOfTrainMentions = numberOfTrainMentions
            self.type = type
        }
    }

}

extension ComprehendClientTypes.EntityRecognizerProperties: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataAccessRoleArn = "DataAccessRoleArn"
        case endTime = "EndTime"
        case entityRecognizerArn = "EntityRecognizerArn"
        case inputDataConfig = "InputDataConfig"
        case languageCode = "LanguageCode"
        case message = "Message"
        case modelKmsKeyId = "ModelKmsKeyId"
        case recognizerMetadata = "RecognizerMetadata"
        case sourceModelArn = "SourceModelArn"
        case status = "Status"
        case submitTime = "SubmitTime"
        case trainingEndTime = "TrainingEndTime"
        case trainingStartTime = "TrainingStartTime"
        case versionName = "VersionName"
        case volumeKmsKeyId = "VolumeKmsKeyId"
        case vpcConfig = "VpcConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataAccessRoleArn = self.dataAccessRoleArn {
            try encodeContainer.encode(dataAccessRoleArn, forKey: .dataAccessRoleArn)
        }
        if let endTime = self.endTime {
            try encodeContainer.encodeTimestamp(endTime, format: .epochSeconds, forKey: .endTime)
        }
        if let entityRecognizerArn = self.entityRecognizerArn {
            try encodeContainer.encode(entityRecognizerArn, forKey: .entityRecognizerArn)
        }
        if let inputDataConfig = self.inputDataConfig {
            try encodeContainer.encode(inputDataConfig, forKey: .inputDataConfig)
        }
        if let languageCode = self.languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let modelKmsKeyId = self.modelKmsKeyId {
            try encodeContainer.encode(modelKmsKeyId, forKey: .modelKmsKeyId)
        }
        if let recognizerMetadata = self.recognizerMetadata {
            try encodeContainer.encode(recognizerMetadata, forKey: .recognizerMetadata)
        }
        if let sourceModelArn = self.sourceModelArn {
            try encodeContainer.encode(sourceModelArn, forKey: .sourceModelArn)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let submitTime = self.submitTime {
            try encodeContainer.encodeTimestamp(submitTime, format: .epochSeconds, forKey: .submitTime)
        }
        if let trainingEndTime = self.trainingEndTime {
            try encodeContainer.encodeTimestamp(trainingEndTime, format: .epochSeconds, forKey: .trainingEndTime)
        }
        if let trainingStartTime = self.trainingStartTime {
            try encodeContainer.encodeTimestamp(trainingStartTime, format: .epochSeconds, forKey: .trainingStartTime)
        }
        if let versionName = self.versionName {
            try encodeContainer.encode(versionName, forKey: .versionName)
        }
        if let volumeKmsKeyId = self.volumeKmsKeyId {
            try encodeContainer.encode(volumeKmsKeyId, forKey: .volumeKmsKeyId)
        }
        if let vpcConfig = self.vpcConfig {
            try encodeContainer.encode(vpcConfig, forKey: .vpcConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let entityRecognizerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .entityRecognizerArn)
        entityRecognizerArn = entityRecognizerArnDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.ModelStatus.self, forKey: .status)
        status = statusDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let submitTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .submitTime)
        submitTime = submitTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endTime)
        endTime = endTimeDecoded
        let trainingStartTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .trainingStartTime)
        trainingStartTime = trainingStartTimeDecoded
        let trainingEndTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .trainingEndTime)
        trainingEndTime = trainingEndTimeDecoded
        let inputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.EntityRecognizerInputDataConfig.self, forKey: .inputDataConfig)
        inputDataConfig = inputDataConfigDecoded
        let recognizerMetadataDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.EntityRecognizerMetadata.self, forKey: .recognizerMetadata)
        recognizerMetadata = recognizerMetadataDecoded
        let dataAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataAccessRoleArn)
        dataAccessRoleArn = dataAccessRoleArnDecoded
        let volumeKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeKmsKeyId)
        volumeKmsKeyId = volumeKmsKeyIdDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
        let modelKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelKmsKeyId)
        modelKmsKeyId = modelKmsKeyIdDecoded
        let versionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionName)
        versionName = versionNameDecoded
        let sourceModelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceModelArn)
        sourceModelArn = sourceModelArnDecoded
    }
}

extension ComprehendClientTypes.EntityRecognizerProperties: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EntityRecognizerProperties(dataAccessRoleArn: \(Swift.String(describing: dataAccessRoleArn)), endTime: \(Swift.String(describing: endTime)), entityRecognizerArn: \(Swift.String(describing: entityRecognizerArn)), inputDataConfig: \(Swift.String(describing: inputDataConfig)), languageCode: \(Swift.String(describing: languageCode)), message: \(Swift.String(describing: message)), modelKmsKeyId: \(Swift.String(describing: modelKmsKeyId)), sourceModelArn: \(Swift.String(describing: sourceModelArn)), status: \(Swift.String(describing: status)), submitTime: \(Swift.String(describing: submitTime)), trainingEndTime: \(Swift.String(describing: trainingEndTime)), trainingStartTime: \(Swift.String(describing: trainingStartTime)), versionName: \(Swift.String(describing: versionName)), volumeKmsKeyId: \(Swift.String(describing: volumeKmsKeyId)), vpcConfig: \(Swift.String(describing: vpcConfig)), recognizerMetadata: \"CONTENT_REDACTED\")"}
}

extension ComprehendClientTypes {
    /// Describes information about an entity recognizer.
    public struct EntityRecognizerProperties: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the AWS Identity and Management (IAM) role that grants Amazon Comprehend read access to your input data.
        public var dataAccessRoleArn: Swift.String?
        /// The time that the recognizer creation completed.
        public var endTime: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) that identifies the entity recognizer.
        public var entityRecognizerArn: Swift.String?
        /// The input data properties of an entity recognizer.
        public var inputDataConfig: ComprehendClientTypes.EntityRecognizerInputDataConfig?
        /// The language of the input documents. All documents must be in the same language. Only English ("en") is currently supported.
        public var languageCode: ComprehendClientTypes.LanguageCode?
        /// A description of the status of the recognizer.
        public var message: Swift.String?
        /// ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt trained custom models. The ModelKmsKeyId can be either of the following formats:
        ///
        /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
        public var modelKmsKeyId: Swift.String?
        /// Provides information about an entity recognizer.
        public var recognizerMetadata: ComprehendClientTypes.EntityRecognizerMetadata?
        /// The Amazon Resource Name (ARN) of the source model. This model was imported from a different AWS account to create the entity recognizer model in your AWS account.
        public var sourceModelArn: Swift.String?
        /// Provides the status of the entity recognizer.
        public var status: ComprehendClientTypes.ModelStatus?
        /// The time that the recognizer was submitted for processing.
        public var submitTime: ClientRuntime.Date?
        /// The time that training of the entity recognizer was completed.
        public var trainingEndTime: ClientRuntime.Date?
        /// The time that training of the entity recognizer started.
        public var trainingStartTime: ClientRuntime.Date?
        /// The version name you assigned to the entity recognizer.
        public var versionName: Swift.String?
        /// ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:
        ///
        /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
        public var volumeKmsKeyId: Swift.String?
        /// Configuration parameters for a private Virtual Private Cloud (VPC) containing the resources you are using for your custom entity recognizer. For more information, see [Amazon VPC](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html).
        public var vpcConfig: ComprehendClientTypes.VpcConfig?

        public init (
            dataAccessRoleArn: Swift.String? = nil,
            endTime: ClientRuntime.Date? = nil,
            entityRecognizerArn: Swift.String? = nil,
            inputDataConfig: ComprehendClientTypes.EntityRecognizerInputDataConfig? = nil,
            languageCode: ComprehendClientTypes.LanguageCode? = nil,
            message: Swift.String? = nil,
            modelKmsKeyId: Swift.String? = nil,
            recognizerMetadata: ComprehendClientTypes.EntityRecognizerMetadata? = nil,
            sourceModelArn: Swift.String? = nil,
            status: ComprehendClientTypes.ModelStatus? = nil,
            submitTime: ClientRuntime.Date? = nil,
            trainingEndTime: ClientRuntime.Date? = nil,
            trainingStartTime: ClientRuntime.Date? = nil,
            versionName: Swift.String? = nil,
            volumeKmsKeyId: Swift.String? = nil,
            vpcConfig: ComprehendClientTypes.VpcConfig? = nil
        )
        {
            self.dataAccessRoleArn = dataAccessRoleArn
            self.endTime = endTime
            self.entityRecognizerArn = entityRecognizerArn
            self.inputDataConfig = inputDataConfig
            self.languageCode = languageCode
            self.message = message
            self.modelKmsKeyId = modelKmsKeyId
            self.recognizerMetadata = recognizerMetadata
            self.sourceModelArn = sourceModelArn
            self.status = status
            self.submitTime = submitTime
            self.trainingEndTime = trainingEndTime
            self.trainingStartTime = trainingStartTime
            self.versionName = versionName
            self.volumeKmsKeyId = volumeKmsKeyId
            self.vpcConfig = vpcConfig
        }
    }

}

extension ComprehendClientTypes.EntityRecognizerSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case latestVersionCreatedAt = "LatestVersionCreatedAt"
        case latestVersionName = "LatestVersionName"
        case latestVersionStatus = "LatestVersionStatus"
        case numberOfVersions = "NumberOfVersions"
        case recognizerName = "RecognizerName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let latestVersionCreatedAt = self.latestVersionCreatedAt {
            try encodeContainer.encodeTimestamp(latestVersionCreatedAt, format: .epochSeconds, forKey: .latestVersionCreatedAt)
        }
        if let latestVersionName = self.latestVersionName {
            try encodeContainer.encode(latestVersionName, forKey: .latestVersionName)
        }
        if let latestVersionStatus = self.latestVersionStatus {
            try encodeContainer.encode(latestVersionStatus.rawValue, forKey: .latestVersionStatus)
        }
        if let numberOfVersions = self.numberOfVersions {
            try encodeContainer.encode(numberOfVersions, forKey: .numberOfVersions)
        }
        if let recognizerName = self.recognizerName {
            try encodeContainer.encode(recognizerName, forKey: .recognizerName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recognizerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recognizerName)
        recognizerName = recognizerNameDecoded
        let numberOfVersionsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfVersions)
        numberOfVersions = numberOfVersionsDecoded
        let latestVersionCreatedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .latestVersionCreatedAt)
        latestVersionCreatedAt = latestVersionCreatedAtDecoded
        let latestVersionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .latestVersionName)
        latestVersionName = latestVersionNameDecoded
        let latestVersionStatusDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.ModelStatus.self, forKey: .latestVersionStatus)
        latestVersionStatus = latestVersionStatusDecoded
    }
}

extension ComprehendClientTypes {
    /// Describes the information about an entity recognizer and its versions.
    public struct EntityRecognizerSummary: Swift.Equatable {
        /// The time that the latest entity recognizer version was submitted for processing.
        public var latestVersionCreatedAt: ClientRuntime.Date?
        /// The version name you assigned to the latest entity recognizer version.
        public var latestVersionName: Swift.String?
        /// Provides the status of the latest entity recognizer version.
        public var latestVersionStatus: ComprehendClientTypes.ModelStatus?
        /// The number of versions you created.
        public var numberOfVersions: Swift.Int?
        /// The name that you assigned the entity recognizer.
        public var recognizerName: Swift.String?

        public init (
            latestVersionCreatedAt: ClientRuntime.Date? = nil,
            latestVersionName: Swift.String? = nil,
            latestVersionStatus: ComprehendClientTypes.ModelStatus? = nil,
            numberOfVersions: Swift.Int? = nil,
            recognizerName: Swift.String? = nil
        )
        {
            self.latestVersionCreatedAt = latestVersionCreatedAt
            self.latestVersionName = latestVersionName
            self.latestVersionStatus = latestVersionStatus
            self.numberOfVersions = numberOfVersions
            self.recognizerName = recognizerName
        }
    }

}

extension ComprehendClientTypes {
    public enum EntityType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case commercialItem
        case date
        case event
        case location
        case organization
        case other
        case person
        case quantity
        case title
        case sdkUnknown(Swift.String)

        public static var allCases: [EntityType] {
            return [
                .commercialItem,
                .date,
                .event,
                .location,
                .organization,
                .other,
                .person,
                .quantity,
                .title,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .commercialItem: return "COMMERCIAL_ITEM"
            case .date: return "DATE"
            case .event: return "EVENT"
            case .location: return "LOCATION"
            case .organization: return "ORGANIZATION"
            case .other: return "OTHER"
            case .person: return "PERSON"
            case .quantity: return "QUANTITY"
            case .title: return "TITLE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EntityType(rawValue: rawValue) ?? EntityType.sdkUnknown(rawValue)
        }
    }
}

extension ComprehendClientTypes.EntityTypesEvaluationMetrics: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case f1Score = "F1Score"
        case precision = "Precision"
        case recall = "Recall"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let f1Score = self.f1Score {
            try encodeContainer.encode(f1Score, forKey: .f1Score)
        }
        if let precision = self.precision {
            try encodeContainer.encode(precision, forKey: .precision)
        }
        if let recall = self.recall {
            try encodeContainer.encode(recall, forKey: .recall)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let precisionDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .precision)
        precision = precisionDecoded
        let recallDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .recall)
        recall = recallDecoded
        let f1ScoreDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .f1Score)
        f1Score = f1ScoreDecoded
    }
}

extension ComprehendClientTypes {
    /// Detailed information about the accuracy of an entity recognizer for a specific entity type.
    public struct EntityTypesEvaluationMetrics: Swift.Equatable {
        /// A measure of how accurate the recognizer results are for a specific entity type in the test data. It is derived from the Precision and Recall values. The F1Score is the harmonic average of the two scores. The highest score is 1, and the worst score is 0.
        public var f1Score: Swift.Double?
        /// A measure of the usefulness of the recognizer results for a specific entity type in the test data. High precision means that the recognizer returned substantially more relevant results than irrelevant ones.
        public var precision: Swift.Double?
        /// A measure of how complete the recognizer results are for a specific entity type in the test data. High recall means that the recognizer returned most of the relevant results.
        public var recall: Swift.Double?

        public init (
            f1Score: Swift.Double? = nil,
            precision: Swift.Double? = nil,
            recall: Swift.Double? = nil
        )
        {
            self.f1Score = f1Score
            self.precision = precision
            self.recall = recall
        }
    }

}

extension ComprehendClientTypes.EntityTypesListItem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let type = self.type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
    }
}

extension ComprehendClientTypes {
    /// An entity type within a labeled training dataset that Amazon Comprehend uses to train a custom entity recognizer.
    public struct EntityTypesListItem: Swift.Equatable {
        /// An entity type within a labeled training dataset that Amazon Comprehend uses to train a custom entity recognizer. Entity types must not contain the following invalid characters: \n (line break), \\n (escaped line break, \r (carriage return), \\r (escaped carriage return), \t (tab), \\t (escaped tab), space, and , (comma).
        /// This member is required.
        public var type: Swift.String?

        public init (
            type: Swift.String? = nil
        )
        {
            self.type = type
        }
    }

}

extension ComprehendClientTypes.ErrorsListItem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorCode = "ErrorCode"
        case errorMessage = "ErrorMessage"
        case page = "Page"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorCode = self.errorCode {
            try encodeContainer.encode(errorCode.rawValue, forKey: .errorCode)
        }
        if let errorMessage = self.errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let page = self.page {
            try encodeContainer.encode(page, forKey: .page)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .page)
        page = pageDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.PageBasedErrorCode.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}

extension ComprehendClientTypes {
    /// Text extraction encountered one or more page-level errors in the input document. The ErrorCode contains one of the following values:
    ///
    /// * TEXTRACT_BAD_PAGE - Amazon Textract cannot read the page. For more information about page limits in Amazon Textract, see [ Page Quotas in Amazon Textract](https://docs.aws.amazon.com/textract/latest/dg/limits-document.html).
    ///
    /// * TEXTRACT_PROVISIONED_THROUGHPUT_EXCEEDED - The number of requests exceeded your throughput limit. For more information about throughput quotas in Amazon Textract, see [ Default quotas in Amazon Textract](https://docs.aws.amazon.com/textract/latest/dg/limits-quotas-explained.html).
    ///
    /// * PAGE_CHARACTERS_EXCEEDED - Too many text characters on the page (10,000 characters maximum).
    ///
    /// * PAGE_SIZE_EXCEEDED - The maximum page size is 10 MB.
    ///
    /// * INTERNAL_SERVER_ERROR - The request encountered a service issue. Try the API request again.
    public struct ErrorsListItem: Swift.Equatable {
        /// Error code for the cause of the error.
        public var errorCode: ComprehendClientTypes.PageBasedErrorCode?
        /// Text message explaining the reason for the error.
        public var errorMessage: Swift.String?
        /// Page number where the error occurred.
        public var page: Swift.Int?

        public init (
            errorCode: ComprehendClientTypes.PageBasedErrorCode? = nil,
            errorMessage: Swift.String? = nil,
            page: Swift.Int? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.page = page
        }
    }

}

extension ComprehendClientTypes.EventsDetectionJobFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobName = "JobName"
        case jobStatus = "JobStatus"
        case submitTimeAfter = "SubmitTimeAfter"
        case submitTimeBefore = "SubmitTimeBefore"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobName = self.jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let jobStatus = self.jobStatus {
            try encodeContainer.encode(jobStatus.rawValue, forKey: .jobStatus)
        }
        if let submitTimeAfter = self.submitTimeAfter {
            try encodeContainer.encodeTimestamp(submitTimeAfter, format: .epochSeconds, forKey: .submitTimeAfter)
        }
        if let submitTimeBefore = self.submitTimeBefore {
            try encodeContainer.encodeTimestamp(submitTimeBefore, format: .epochSeconds, forKey: .submitTimeBefore)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let submitTimeBeforeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .submitTimeBefore)
        submitTimeBefore = submitTimeBeforeDecoded
        let submitTimeAfterDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .submitTimeAfter)
        submitTimeAfter = submitTimeAfterDecoded
    }
}

extension ComprehendClientTypes {
    /// Provides information for filtering a list of event detection jobs.
    public struct EventsDetectionJobFilter: Swift.Equatable {
        /// Filters on the name of the events detection job.
        public var jobName: Swift.String?
        /// Filters the list of jobs based on job status. Returns only jobs with the specified status.
        public var jobStatus: ComprehendClientTypes.JobStatus?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest.
        public var submitTimeAfter: ClientRuntime.Date?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest.
        public var submitTimeBefore: ClientRuntime.Date?

        public init (
            jobName: Swift.String? = nil,
            jobStatus: ComprehendClientTypes.JobStatus? = nil,
            submitTimeAfter: ClientRuntime.Date? = nil,
            submitTimeBefore: ClientRuntime.Date? = nil
        )
        {
            self.jobName = jobName
            self.jobStatus = jobStatus
            self.submitTimeAfter = submitTimeAfter
            self.submitTimeBefore = submitTimeBefore
        }
    }

}

extension ComprehendClientTypes.EventsDetectionJobProperties: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataAccessRoleArn = "DataAccessRoleArn"
        case endTime = "EndTime"
        case inputDataConfig = "InputDataConfig"
        case jobArn = "JobArn"
        case jobId = "JobId"
        case jobName = "JobName"
        case jobStatus = "JobStatus"
        case languageCode = "LanguageCode"
        case message = "Message"
        case outputDataConfig = "OutputDataConfig"
        case submitTime = "SubmitTime"
        case targetEventTypes = "TargetEventTypes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataAccessRoleArn = self.dataAccessRoleArn {
            try encodeContainer.encode(dataAccessRoleArn, forKey: .dataAccessRoleArn)
        }
        if let endTime = self.endTime {
            try encodeContainer.encodeTimestamp(endTime, format: .epochSeconds, forKey: .endTime)
        }
        if let inputDataConfig = self.inputDataConfig {
            try encodeContainer.encode(inputDataConfig, forKey: .inputDataConfig)
        }
        if let jobArn = self.jobArn {
            try encodeContainer.encode(jobArn, forKey: .jobArn)
        }
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let jobName = self.jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let jobStatus = self.jobStatus {
            try encodeContainer.encode(jobStatus.rawValue, forKey: .jobStatus)
        }
        if let languageCode = self.languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let outputDataConfig = self.outputDataConfig {
            try encodeContainer.encode(outputDataConfig, forKey: .outputDataConfig)
        }
        if let submitTime = self.submitTime {
            try encodeContainer.encodeTimestamp(submitTime, format: .epochSeconds, forKey: .submitTime)
        }
        if let targetEventTypes = targetEventTypes {
            var targetEventTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targetEventTypes)
            for eventtypestring0 in targetEventTypes {
                try targetEventTypesContainer.encode(eventtypestring0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let jobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobArn)
        jobArn = jobArnDecoded
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let submitTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .submitTime)
        submitTime = submitTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endTime)
        endTime = endTimeDecoded
        let inputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.InputDataConfig.self, forKey: .inputDataConfig)
        inputDataConfig = inputDataConfigDecoded
        let outputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.OutputDataConfig.self, forKey: .outputDataConfig)
        outputDataConfig = outputDataConfigDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let dataAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataAccessRoleArn)
        dataAccessRoleArn = dataAccessRoleArnDecoded
        let targetEventTypesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .targetEventTypes)
        var targetEventTypesDecoded0:[Swift.String]? = nil
        if let targetEventTypesContainer = targetEventTypesContainer {
            targetEventTypesDecoded0 = [Swift.String]()
            for string0 in targetEventTypesContainer {
                if let string0 = string0 {
                    targetEventTypesDecoded0?.append(string0)
                }
            }
        }
        targetEventTypes = targetEventTypesDecoded0
    }
}

extension ComprehendClientTypes {
    /// Provides information about an events detection job.
    public struct EventsDetectionJobProperties: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the AWS Identify and Access Management (IAM) role that grants Amazon Comprehend read access to your input data.
        public var dataAccessRoleArn: Swift.String?
        /// The time that the events detection job completed.
        public var endTime: ClientRuntime.Date?
        /// The input data configuration that you supplied when you created the events detection job.
        public var inputDataConfig: ComprehendClientTypes.InputDataConfig?
        /// The Amazon Resource Name (ARN) of the events detection job. It is a unique, fully qualified identifier for the job. It includes the AWS account, Region, and the job ID. The format of the ARN is as follows: arn::comprehend:::events-detection-job/ The following is an example job ARN: arn:aws:comprehend:us-west-2:111122223333:events-detection-job/1234abcd12ab34cd56ef1234567890ab
        public var jobArn: Swift.String?
        /// The identifier assigned to the events detection job.
        public var jobId: Swift.String?
        /// The name you assigned the events detection job.
        public var jobName: Swift.String?
        /// The current status of the events detection job.
        public var jobStatus: ComprehendClientTypes.JobStatus?
        /// The language code of the input documents.
        public var languageCode: ComprehendClientTypes.LanguageCode?
        /// A description of the status of the events detection job.
        public var message: Swift.String?
        /// The output data configuration that you supplied when you created the events detection job.
        public var outputDataConfig: ComprehendClientTypes.OutputDataConfig?
        /// The time that the events detection job was submitted for processing.
        public var submitTime: ClientRuntime.Date?
        /// The types of events that are detected by the job.
        public var targetEventTypes: [Swift.String]?

        public init (
            dataAccessRoleArn: Swift.String? = nil,
            endTime: ClientRuntime.Date? = nil,
            inputDataConfig: ComprehendClientTypes.InputDataConfig? = nil,
            jobArn: Swift.String? = nil,
            jobId: Swift.String? = nil,
            jobName: Swift.String? = nil,
            jobStatus: ComprehendClientTypes.JobStatus? = nil,
            languageCode: ComprehendClientTypes.LanguageCode? = nil,
            message: Swift.String? = nil,
            outputDataConfig: ComprehendClientTypes.OutputDataConfig? = nil,
            submitTime: ClientRuntime.Date? = nil,
            targetEventTypes: [Swift.String]? = nil
        )
        {
            self.dataAccessRoleArn = dataAccessRoleArn
            self.endTime = endTime
            self.inputDataConfig = inputDataConfig
            self.jobArn = jobArn
            self.jobId = jobId
            self.jobName = jobName
            self.jobStatus = jobStatus
            self.languageCode = languageCode
            self.message = message
            self.outputDataConfig = outputDataConfig
            self.submitTime = submitTime
            self.targetEventTypes = targetEventTypes
        }
    }

}

extension ComprehendClientTypes.ExtractedCharactersListItem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case count = "Count"
        case page = "Page"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let count = self.count {
            try encodeContainer.encode(count, forKey: .count)
        }
        if let page = self.page {
            try encodeContainer.encode(page, forKey: .page)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .page)
        page = pageDecoded
        let countDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .count)
        count = countDecoded
    }
}

extension ComprehendClientTypes {
    /// Array of the number of characters extracted from each page.
    public struct ExtractedCharactersListItem: Swift.Equatable {
        /// Number of characters extracted from each page.
        public var count: Swift.Int?
        /// Page number.
        public var page: Swift.Int?

        public init (
            count: Swift.Int? = nil,
            page: Swift.Int? = nil
        )
        {
            self.count = count
            self.page = page
        }
    }

}

extension ComprehendClientTypes.Geometry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case boundingBox = "BoundingBox"
        case polygon = "Polygon"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let boundingBox = self.boundingBox {
            try encodeContainer.encode(boundingBox, forKey: .boundingBox)
        }
        if let polygon = polygon {
            var polygonContainer = encodeContainer.nestedUnkeyedContainer(forKey: .polygon)
            for point0 in polygon {
                try polygonContainer.encode(point0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let boundingBoxDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.BoundingBox.self, forKey: .boundingBox)
        boundingBox = boundingBoxDecoded
        let polygonContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.Point?].self, forKey: .polygon)
        var polygonDecoded0:[ComprehendClientTypes.Point]? = nil
        if let polygonContainer = polygonContainer {
            polygonDecoded0 = [ComprehendClientTypes.Point]()
            for structure0 in polygonContainer {
                if let structure0 = structure0 {
                    polygonDecoded0?.append(structure0)
                }
            }
        }
        polygon = polygonDecoded0
    }
}

extension ComprehendClientTypes {
    /// Information about the location of items on a document page. For additional information, see [Geometry](https://docs.aws.amazon.com/textract/latest/dg/API_Geometry.html) in the Amazon Textract API reference.
    public struct Geometry: Swift.Equatable {
        /// An axis-aligned coarse representation of the location of the recognized item on the document page.
        public var boundingBox: ComprehendClientTypes.BoundingBox?
        /// Within the bounding box, a fine-grained polygon around the recognized item.
        public var polygon: [ComprehendClientTypes.Point]?

        public init (
            boundingBox: ComprehendClientTypes.BoundingBox? = nil,
            polygon: [ComprehendClientTypes.Point]? = nil
        )
        {
            self.boundingBox = boundingBox
            self.polygon = polygon
        }
    }

}

extension ImportModelInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataAccessRoleArn = "DataAccessRoleArn"
        case modelKmsKeyId = "ModelKmsKeyId"
        case modelName = "ModelName"
        case sourceModelArn = "SourceModelArn"
        case tags = "Tags"
        case versionName = "VersionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataAccessRoleArn = self.dataAccessRoleArn {
            try encodeContainer.encode(dataAccessRoleArn, forKey: .dataAccessRoleArn)
        }
        if let modelKmsKeyId = self.modelKmsKeyId {
            try encodeContainer.encode(modelKmsKeyId, forKey: .modelKmsKeyId)
        }
        if let modelName = self.modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let sourceModelArn = self.sourceModelArn {
            try encodeContainer.encode(sourceModelArn, forKey: .sourceModelArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let versionName = self.versionName {
            try encodeContainer.encode(versionName, forKey: .versionName)
        }
    }
}

extension ImportModelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ImportModelInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the AWS Identity and Management (IAM) role that allows Amazon Comprehend to use Amazon Key Management Service (KMS) to encrypt or decrypt the custom model.
    public var dataAccessRoleArn: Swift.String?
    /// ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt trained custom models. The ModelKmsKeyId can be either of the following formats:
    ///
    /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
    ///
    /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
    public var modelKmsKeyId: Swift.String?
    /// The name to assign to the custom model that is created in Amazon Comprehend by this import.
    public var modelName: Swift.String?
    /// The Amazon Resource Name (ARN) of the custom model to import.
    /// This member is required.
    public var sourceModelArn: Swift.String?
    /// Tags to be associated with the custom model that is created by this import. A tag is a key-value pair that adds as a metadata to a resource used by Amazon Comprehend. For example, a tag with "Sales" as the key might be added to a resource to indicate its use by the sales department.
    public var tags: [ComprehendClientTypes.Tag]?
    /// The version name given to the custom model that is created by this import. Version names can have a maximum of 256 characters. Alphanumeric characters, hyphens (-) and underscores (_) are allowed. The version name must be unique among all models with the same classifier name in the account/AWS Region.
    public var versionName: Swift.String?

    public init (
        dataAccessRoleArn: Swift.String? = nil,
        modelKmsKeyId: Swift.String? = nil,
        modelName: Swift.String? = nil,
        sourceModelArn: Swift.String? = nil,
        tags: [ComprehendClientTypes.Tag]? = nil,
        versionName: Swift.String? = nil
    )
    {
        self.dataAccessRoleArn = dataAccessRoleArn
        self.modelKmsKeyId = modelKmsKeyId
        self.modelName = modelName
        self.sourceModelArn = sourceModelArn
        self.tags = tags
        self.versionName = versionName
    }
}

struct ImportModelInputBody: Swift.Equatable {
    let sourceModelArn: Swift.String?
    let modelName: Swift.String?
    let versionName: Swift.String?
    let modelKmsKeyId: Swift.String?
    let dataAccessRoleArn: Swift.String?
    let tags: [ComprehendClientTypes.Tag]?
}

extension ImportModelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataAccessRoleArn = "DataAccessRoleArn"
        case modelKmsKeyId = "ModelKmsKeyId"
        case modelName = "ModelName"
        case sourceModelArn = "SourceModelArn"
        case tags = "Tags"
        case versionName = "VersionName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceModelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceModelArn)
        sourceModelArn = sourceModelArnDecoded
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let versionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionName)
        versionName = versionNameDecoded
        let modelKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelKmsKeyId)
        modelKmsKeyId = modelKmsKeyIdDecoded
        let dataAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataAccessRoleArn)
        dataAccessRoleArn = dataAccessRoleArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[ComprehendClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [ComprehendClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension ImportModelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ImportModelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KmsKeyValidationException" : self = .kmsKeyValidationException(try KmsKeyValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceededException" : self = .resourceLimitExceededException(try ResourceLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceUnavailableException" : self = .resourceUnavailableException(try ResourceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ImportModelOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case kmsKeyValidationException(KmsKeyValidationException)
    case resourceInUseException(ResourceInUseException)
    case resourceLimitExceededException(ResourceLimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case resourceUnavailableException(ResourceUnavailableException)
    case tooManyRequestsException(TooManyRequestsException)
    case tooManyTagsException(TooManyTagsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ImportModelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ImportModelOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.modelArn = output.modelArn
        } else {
            self.modelArn = nil
        }
    }
}

public struct ImportModelOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the custom model being imported.
    public var modelArn: Swift.String?

    public init (
        modelArn: Swift.String? = nil
    )
    {
        self.modelArn = modelArn
    }
}

struct ImportModelOutputResponseBody: Swift.Equatable {
    let modelArn: Swift.String?
}

extension ImportModelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelArn = "ModelArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelArn)
        modelArn = modelArnDecoded
    }
}

extension ComprehendClientTypes.InputDataConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case documentReaderConfig = "DocumentReaderConfig"
        case inputFormat = "InputFormat"
        case s3Uri = "S3Uri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let documentReaderConfig = self.documentReaderConfig {
            try encodeContainer.encode(documentReaderConfig, forKey: .documentReaderConfig)
        }
        if let inputFormat = self.inputFormat {
            try encodeContainer.encode(inputFormat.rawValue, forKey: .inputFormat)
        }
        if let s3Uri = self.s3Uri {
            try encodeContainer.encode(s3Uri, forKey: .s3Uri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Uri)
        s3Uri = s3UriDecoded
        let inputFormatDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.InputFormat.self, forKey: .inputFormat)
        inputFormat = inputFormatDecoded
        let documentReaderConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.DocumentReaderConfig.self, forKey: .documentReaderConfig)
        documentReaderConfig = documentReaderConfigDecoded
    }
}

extension ComprehendClientTypes {
    /// The input properties for an inference job. The document reader config field applies only to non-text inputs for custom analysis.
    public struct InputDataConfig: Swift.Equatable {
        /// Provides configuration parameters to override the default actions for extracting text from PDF documents and image files.
        public var documentReaderConfig: ComprehendClientTypes.DocumentReaderConfig?
        /// Specifies how the text in an input file should be processed:
        ///
        /// * ONE_DOC_PER_FILE - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.
        ///
        /// * ONE_DOC_PER_LINE - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.
        public var inputFormat: ComprehendClientTypes.InputFormat?
        /// The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. For example, if you use the URI S3://bucketName/prefix, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.
        /// This member is required.
        public var s3Uri: Swift.String?

        public init (
            documentReaderConfig: ComprehendClientTypes.DocumentReaderConfig? = nil,
            inputFormat: ComprehendClientTypes.InputFormat? = nil,
            s3Uri: Swift.String? = nil
        )
        {
            self.documentReaderConfig = documentReaderConfig
            self.inputFormat = inputFormat
            self.s3Uri = s3Uri
        }
    }

}

extension ComprehendClientTypes {
    public enum InputFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case oneDocPerFile
        case oneDocPerLine
        case sdkUnknown(Swift.String)

        public static var allCases: [InputFormat] {
            return [
                .oneDocPerFile,
                .oneDocPerLine,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .oneDocPerFile: return "ONE_DOC_PER_FILE"
            case .oneDocPerLine: return "ONE_DOC_PER_LINE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InputFormat(rawValue: rawValue) ?? InputFormat.sdkUnknown(rawValue)
        }
    }
}

extension InternalServerException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InternalServerExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An internal server error occurred. Retry your request.
public struct InternalServerException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InternalServerExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InternalServerExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidFilterException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidFilterExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The filter specified for the operation is invalid. Specify a different filter.
public struct InvalidFilterException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidFilterExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidFilterExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ComprehendClientTypes.InvalidRequestDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case reason = "Reason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let reason = self.reason {
            try encodeContainer.encode(reason.rawValue, forKey: .reason)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reasonDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.InvalidRequestDetailReason.self, forKey: .reason)
        reason = reasonDecoded
    }
}

extension ComprehendClientTypes {
    /// Provides additional detail about why the request failed:
    ///
    /// * Document size is too large - Check the size of your file and resubmit the request.
    ///
    /// * Document type is not supported - Check the file type and resubmit the request.
    ///
    /// * Too many pages in the document - Check the number of pages in your file and resubmit the request.
    ///
    /// * Access denied to Amazon Textract - Verify that your account has permission to use Amazon Textract API operations and resubmit the request.
    public struct InvalidRequestDetail: Swift.Equatable {
        /// Reason code is INVALID_DOCUMENT.
        public var reason: ComprehendClientTypes.InvalidRequestDetailReason?

        public init (
            reason: ComprehendClientTypes.InvalidRequestDetailReason? = nil
        )
        {
            self.reason = reason
        }
    }

}

extension ComprehendClientTypes {
    public enum InvalidRequestDetailReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case documentSizeExceeded
        case pageLimitExceeded
        case textractAccessDenied
        case unsupportedDocType
        case sdkUnknown(Swift.String)

        public static var allCases: [InvalidRequestDetailReason] {
            return [
                .documentSizeExceeded,
                .pageLimitExceeded,
                .textractAccessDenied,
                .unsupportedDocType,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .documentSizeExceeded: return "DOCUMENT_SIZE_EXCEEDED"
            case .pageLimitExceeded: return "PAGE_LIMIT_EXCEEDED"
            case .textractAccessDenied: return "TEXTRACT_ACCESS_DENIED"
            case .unsupportedDocType: return "UNSUPPORTED_DOC_TYPE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InvalidRequestDetailReason(rawValue: rawValue) ?? InvalidRequestDetailReason.sdkUnknown(rawValue)
        }
    }
}

extension InvalidRequestException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidRequestExceptionBody = try responseDecoder.decode(responseBody: data)
            self.detail = output.detail
            self.message = output.message
            self.reason = output.reason
        } else {
            self.detail = nil
            self.message = nil
            self.reason = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request is invalid.
public struct InvalidRequestException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Provides additional detail about why the request failed:
    ///
    /// * Document size is too large - Check the size of your file and resubmit the request.
    ///
    /// * Document type is not supported - Check the file type and resubmit the request.
    ///
    /// * Too many pages in the document - Check the number of pages in your file and resubmit the request.
    ///
    /// * Access denied to Amazon Textract - Verify that your account has permission to use Amazon Textract API operations and resubmit the request.
    public var detail: ComprehendClientTypes.InvalidRequestDetail?
    public var message: Swift.String?
    public var reason: ComprehendClientTypes.InvalidRequestReason?

    public init (
        detail: ComprehendClientTypes.InvalidRequestDetail? = nil,
        message: Swift.String? = nil,
        reason: ComprehendClientTypes.InvalidRequestReason? = nil
    )
    {
        self.detail = detail
        self.message = message
        self.reason = reason
    }
}

struct InvalidRequestExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let reason: ComprehendClientTypes.InvalidRequestReason?
    let detail: ComprehendClientTypes.InvalidRequestDetail?
}

extension InvalidRequestExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case detail = "Detail"
        case message = "Message"
        case reason = "Reason"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.InvalidRequestReason.self, forKey: .reason)
        reason = reasonDecoded
        let detailDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.InvalidRequestDetail.self, forKey: .detail)
        detail = detailDecoded
    }
}

extension ComprehendClientTypes {
    public enum InvalidRequestReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case invalidDocument
        case sdkUnknown(Swift.String)

        public static var allCases: [InvalidRequestReason] {
            return [
                .invalidDocument,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .invalidDocument: return "INVALID_DOCUMENT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InvalidRequestReason(rawValue: rawValue) ?? InvalidRequestReason.sdkUnknown(rawValue)
        }
    }
}

extension JobNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: JobNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified job was not found. Check the job ID and try again.
public struct JobNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct JobNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension JobNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ComprehendClientTypes {
    public enum JobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case failed
        case inProgress
        case stopped
        case stopRequested
        case submitted
        case sdkUnknown(Swift.String)

        public static var allCases: [JobStatus] {
            return [
                .completed,
                .failed,
                .inProgress,
                .stopped,
                .stopRequested,
                .submitted,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .stopped: return "STOPPED"
            case .stopRequested: return "STOP_REQUESTED"
            case .submitted: return "SUBMITTED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = JobStatus(rawValue: rawValue) ?? JobStatus.sdkUnknown(rawValue)
        }
    }
}

extension ComprehendClientTypes.KeyPhrase: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case beginOffset = "BeginOffset"
        case endOffset = "EndOffset"
        case score = "Score"
        case text = "Text"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let beginOffset = self.beginOffset {
            try encodeContainer.encode(beginOffset, forKey: .beginOffset)
        }
        if let endOffset = self.endOffset {
            try encodeContainer.encode(endOffset, forKey: .endOffset)
        }
        if let score = self.score {
            try encodeContainer.encode(score, forKey: .score)
        }
        if let text = self.text {
            try encodeContainer.encode(text, forKey: .text)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scoreDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .score)
        score = scoreDecoded
        let textDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .text)
        text = textDecoded
        let beginOffsetDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .beginOffset)
        beginOffset = beginOffsetDecoded
        let endOffsetDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .endOffset)
        endOffset = endOffsetDecoded
    }
}

extension ComprehendClientTypes {
    /// Describes a key noun phrase.
    public struct KeyPhrase: Swift.Equatable {
        /// The zero-based offset from the beginning of the source text to the first character in the key phrase.
        public var beginOffset: Swift.Int?
        /// The zero-based offset from the beginning of the source text to the last character in the key phrase.
        public var endOffset: Swift.Int?
        /// The level of confidence that Amazon Comprehend has in the accuracy of the detection.
        public var score: Swift.Float?
        /// The text of a key noun phrase.
        public var text: Swift.String?

        public init (
            beginOffset: Swift.Int? = nil,
            endOffset: Swift.Int? = nil,
            score: Swift.Float? = nil,
            text: Swift.String? = nil
        )
        {
            self.beginOffset = beginOffset
            self.endOffset = endOffset
            self.score = score
            self.text = text
        }
    }

}

extension ComprehendClientTypes.KeyPhrasesDetectionJobFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobName = "JobName"
        case jobStatus = "JobStatus"
        case submitTimeAfter = "SubmitTimeAfter"
        case submitTimeBefore = "SubmitTimeBefore"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobName = self.jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let jobStatus = self.jobStatus {
            try encodeContainer.encode(jobStatus.rawValue, forKey: .jobStatus)
        }
        if let submitTimeAfter = self.submitTimeAfter {
            try encodeContainer.encodeTimestamp(submitTimeAfter, format: .epochSeconds, forKey: .submitTimeAfter)
        }
        if let submitTimeBefore = self.submitTimeBefore {
            try encodeContainer.encodeTimestamp(submitTimeBefore, format: .epochSeconds, forKey: .submitTimeBefore)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let submitTimeBeforeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .submitTimeBefore)
        submitTimeBefore = submitTimeBeforeDecoded
        let submitTimeAfterDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .submitTimeAfter)
        submitTimeAfter = submitTimeAfterDecoded
    }
}

extension ComprehendClientTypes {
    /// Provides information for filtering a list of dominant language detection jobs. For more information, see the operation.
    public struct KeyPhrasesDetectionJobFilter: Swift.Equatable {
        /// Filters on the name of the job.
        public var jobName: Swift.String?
        /// Filters the list of jobs based on job status. Returns only jobs with the specified status.
        public var jobStatus: ComprehendClientTypes.JobStatus?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest.
        public var submitTimeAfter: ClientRuntime.Date?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest.
        public var submitTimeBefore: ClientRuntime.Date?

        public init (
            jobName: Swift.String? = nil,
            jobStatus: ComprehendClientTypes.JobStatus? = nil,
            submitTimeAfter: ClientRuntime.Date? = nil,
            submitTimeBefore: ClientRuntime.Date? = nil
        )
        {
            self.jobName = jobName
            self.jobStatus = jobStatus
            self.submitTimeAfter = submitTimeAfter
            self.submitTimeBefore = submitTimeBefore
        }
    }

}

extension ComprehendClientTypes.KeyPhrasesDetectionJobProperties: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataAccessRoleArn = "DataAccessRoleArn"
        case endTime = "EndTime"
        case inputDataConfig = "InputDataConfig"
        case jobArn = "JobArn"
        case jobId = "JobId"
        case jobName = "JobName"
        case jobStatus = "JobStatus"
        case languageCode = "LanguageCode"
        case message = "Message"
        case outputDataConfig = "OutputDataConfig"
        case submitTime = "SubmitTime"
        case volumeKmsKeyId = "VolumeKmsKeyId"
        case vpcConfig = "VpcConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataAccessRoleArn = self.dataAccessRoleArn {
            try encodeContainer.encode(dataAccessRoleArn, forKey: .dataAccessRoleArn)
        }
        if let endTime = self.endTime {
            try encodeContainer.encodeTimestamp(endTime, format: .epochSeconds, forKey: .endTime)
        }
        if let inputDataConfig = self.inputDataConfig {
            try encodeContainer.encode(inputDataConfig, forKey: .inputDataConfig)
        }
        if let jobArn = self.jobArn {
            try encodeContainer.encode(jobArn, forKey: .jobArn)
        }
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let jobName = self.jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let jobStatus = self.jobStatus {
            try encodeContainer.encode(jobStatus.rawValue, forKey: .jobStatus)
        }
        if let languageCode = self.languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let outputDataConfig = self.outputDataConfig {
            try encodeContainer.encode(outputDataConfig, forKey: .outputDataConfig)
        }
        if let submitTime = self.submitTime {
            try encodeContainer.encodeTimestamp(submitTime, format: .epochSeconds, forKey: .submitTime)
        }
        if let volumeKmsKeyId = self.volumeKmsKeyId {
            try encodeContainer.encode(volumeKmsKeyId, forKey: .volumeKmsKeyId)
        }
        if let vpcConfig = self.vpcConfig {
            try encodeContainer.encode(vpcConfig, forKey: .vpcConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let jobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobArn)
        jobArn = jobArnDecoded
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let submitTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .submitTime)
        submitTime = submitTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endTime)
        endTime = endTimeDecoded
        let inputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.InputDataConfig.self, forKey: .inputDataConfig)
        inputDataConfig = inputDataConfigDecoded
        let outputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.OutputDataConfig.self, forKey: .outputDataConfig)
        outputDataConfig = outputDataConfigDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let dataAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataAccessRoleArn)
        dataAccessRoleArn = dataAccessRoleArnDecoded
        let volumeKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeKmsKeyId)
        volumeKmsKeyId = volumeKmsKeyIdDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
    }
}

extension ComprehendClientTypes {
    /// Provides information about a key phrases detection job.
    public struct KeyPhrasesDetectionJobProperties: Swift.Equatable {
        /// The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.
        public var dataAccessRoleArn: Swift.String?
        /// The time that the key phrases detection job completed.
        public var endTime: ClientRuntime.Date?
        /// The input data configuration that you supplied when you created the key phrases detection job.
        public var inputDataConfig: ComprehendClientTypes.InputDataConfig?
        /// The Amazon Resource Name (ARN) of the key phrases detection job. It is a unique, fully qualified identifier for the job. It includes the AWS account, Region, and the job ID. The format of the ARN is as follows: arn::comprehend:::key-phrases-detection-job/ The following is an example job ARN: arn:aws:comprehend:us-west-2:111122223333:key-phrases-detection-job/1234abcd12ab34cd56ef1234567890ab
        public var jobArn: Swift.String?
        /// The identifier assigned to the key phrases detection job.
        public var jobId: Swift.String?
        /// The name that you assigned the key phrases detection job.
        public var jobName: Swift.String?
        /// The current status of the key phrases detection job. If the status is FAILED, the Message field shows the reason for the failure.
        public var jobStatus: ComprehendClientTypes.JobStatus?
        /// The language code of the input documents.
        public var languageCode: ComprehendClientTypes.LanguageCode?
        /// A description of the status of a job.
        public var message: Swift.String?
        /// The output data configuration that you supplied when you created the key phrases detection job.
        public var outputDataConfig: ComprehendClientTypes.OutputDataConfig?
        /// The time that the key phrases detection job was submitted for processing.
        public var submitTime: ClientRuntime.Date?
        /// ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:
        ///
        /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
        public var volumeKmsKeyId: Swift.String?
        /// Configuration parameters for a private Virtual Private Cloud (VPC) containing the resources you are using for your key phrases detection job. For more information, see [Amazon VPC](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html).
        public var vpcConfig: ComprehendClientTypes.VpcConfig?

        public init (
            dataAccessRoleArn: Swift.String? = nil,
            endTime: ClientRuntime.Date? = nil,
            inputDataConfig: ComprehendClientTypes.InputDataConfig? = nil,
            jobArn: Swift.String? = nil,
            jobId: Swift.String? = nil,
            jobName: Swift.String? = nil,
            jobStatus: ComprehendClientTypes.JobStatus? = nil,
            languageCode: ComprehendClientTypes.LanguageCode? = nil,
            message: Swift.String? = nil,
            outputDataConfig: ComprehendClientTypes.OutputDataConfig? = nil,
            submitTime: ClientRuntime.Date? = nil,
            volumeKmsKeyId: Swift.String? = nil,
            vpcConfig: ComprehendClientTypes.VpcConfig? = nil
        )
        {
            self.dataAccessRoleArn = dataAccessRoleArn
            self.endTime = endTime
            self.inputDataConfig = inputDataConfig
            self.jobArn = jobArn
            self.jobId = jobId
            self.jobName = jobName
            self.jobStatus = jobStatus
            self.languageCode = languageCode
            self.message = message
            self.outputDataConfig = outputDataConfig
            self.submitTime = submitTime
            self.volumeKmsKeyId = volumeKmsKeyId
            self.vpcConfig = vpcConfig
        }
    }

}

extension KmsKeyValidationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: KmsKeyValidationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The KMS customer managed key (CMK) entered cannot be validated. Verify the key and re-enter it.
public struct KmsKeyValidationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct KmsKeyValidationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension KmsKeyValidationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ComprehendClientTypes {
    public enum LanguageCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ar
        case de
        case en
        case es
        case fr
        case hi
        case it
        case ja
        case ko
        case pt
        case zh
        case zhTw
        case sdkUnknown(Swift.String)

        public static var allCases: [LanguageCode] {
            return [
                .ar,
                .de,
                .en,
                .es,
                .fr,
                .hi,
                .it,
                .ja,
                .ko,
                .pt,
                .zh,
                .zhTw,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ar: return "ar"
            case .de: return "de"
            case .en: return "en"
            case .es: return "es"
            case .fr: return "fr"
            case .hi: return "hi"
            case .it: return "it"
            case .ja: return "ja"
            case .ko: return "ko"
            case .pt: return "pt"
            case .zh: return "zh"
            case .zhTw: return "zh-TW"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LanguageCode(rawValue: rawValue) ?? LanguageCode.sdkUnknown(rawValue)
        }
    }
}

extension ListDocumentClassificationJobsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filter = self.filter {
            try encodeContainer.encode(filter, forKey: .filter)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListDocumentClassificationJobsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListDocumentClassificationJobsInput: Swift.Equatable {
    /// Filters the jobs that are returned. You can filter jobs on their names, status, or the date and time that they were submitted. You can only set one filter at a time.
    public var filter: ComprehendClientTypes.DocumentClassificationJobFilter?
    /// The maximum number of results to return in each page. The default is 100.
    public var maxResults: Swift.Int?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init (
        filter: ComprehendClientTypes.DocumentClassificationJobFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListDocumentClassificationJobsInputBody: Swift.Equatable {
    let filter: ComprehendClientTypes.DocumentClassificationJobFilter?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListDocumentClassificationJobsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.DocumentClassificationJobFilter.self, forKey: .filter)
        filter = filterDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListDocumentClassificationJobsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDocumentClassificationJobsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidFilterException" : self = .invalidFilterException(try InvalidFilterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListDocumentClassificationJobsOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidFilterException(InvalidFilterException)
    case invalidRequestException(InvalidRequestException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDocumentClassificationJobsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListDocumentClassificationJobsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.documentClassificationJobPropertiesList = output.documentClassificationJobPropertiesList
            self.nextToken = output.nextToken
        } else {
            self.documentClassificationJobPropertiesList = nil
            self.nextToken = nil
        }
    }
}

public struct ListDocumentClassificationJobsOutputResponse: Swift.Equatable {
    /// A list containing the properties of each job returned.
    public var documentClassificationJobPropertiesList: [ComprehendClientTypes.DocumentClassificationJobProperties]?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init (
        documentClassificationJobPropertiesList: [ComprehendClientTypes.DocumentClassificationJobProperties]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.documentClassificationJobPropertiesList = documentClassificationJobPropertiesList
        self.nextToken = nextToken
    }
}

struct ListDocumentClassificationJobsOutputResponseBody: Swift.Equatable {
    let documentClassificationJobPropertiesList: [ComprehendClientTypes.DocumentClassificationJobProperties]?
    let nextToken: Swift.String?
}

extension ListDocumentClassificationJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case documentClassificationJobPropertiesList = "DocumentClassificationJobPropertiesList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentClassificationJobPropertiesListContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.DocumentClassificationJobProperties?].self, forKey: .documentClassificationJobPropertiesList)
        var documentClassificationJobPropertiesListDecoded0:[ComprehendClientTypes.DocumentClassificationJobProperties]? = nil
        if let documentClassificationJobPropertiesListContainer = documentClassificationJobPropertiesListContainer {
            documentClassificationJobPropertiesListDecoded0 = [ComprehendClientTypes.DocumentClassificationJobProperties]()
            for structure0 in documentClassificationJobPropertiesListContainer {
                if let structure0 = structure0 {
                    documentClassificationJobPropertiesListDecoded0?.append(structure0)
                }
            }
        }
        documentClassificationJobPropertiesList = documentClassificationJobPropertiesListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListDocumentClassifierSummariesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListDocumentClassifierSummariesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListDocumentClassifierSummariesInput: Swift.Equatable {
    /// The maximum number of results to return on each page. The default is 100.
    public var maxResults: Swift.Int?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListDocumentClassifierSummariesInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListDocumentClassifierSummariesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListDocumentClassifierSummariesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDocumentClassifierSummariesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListDocumentClassifierSummariesOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDocumentClassifierSummariesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListDocumentClassifierSummariesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.documentClassifierSummariesList = output.documentClassifierSummariesList
            self.nextToken = output.nextToken
        } else {
            self.documentClassifierSummariesList = nil
            self.nextToken = nil
        }
    }
}

public struct ListDocumentClassifierSummariesOutputResponse: Swift.Equatable {
    /// The list of summaries of document classifiers.
    public var documentClassifierSummariesList: [ComprehendClientTypes.DocumentClassifierSummary]?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init (
        documentClassifierSummariesList: [ComprehendClientTypes.DocumentClassifierSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.documentClassifierSummariesList = documentClassifierSummariesList
        self.nextToken = nextToken
    }
}

struct ListDocumentClassifierSummariesOutputResponseBody: Swift.Equatable {
    let documentClassifierSummariesList: [ComprehendClientTypes.DocumentClassifierSummary]?
    let nextToken: Swift.String?
}

extension ListDocumentClassifierSummariesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case documentClassifierSummariesList = "DocumentClassifierSummariesList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentClassifierSummariesListContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.DocumentClassifierSummary?].self, forKey: .documentClassifierSummariesList)
        var documentClassifierSummariesListDecoded0:[ComprehendClientTypes.DocumentClassifierSummary]? = nil
        if let documentClassifierSummariesListContainer = documentClassifierSummariesListContainer {
            documentClassifierSummariesListDecoded0 = [ComprehendClientTypes.DocumentClassifierSummary]()
            for structure0 in documentClassifierSummariesListContainer {
                if let structure0 = structure0 {
                    documentClassifierSummariesListDecoded0?.append(structure0)
                }
            }
        }
        documentClassifierSummariesList = documentClassifierSummariesListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListDocumentClassifiersInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filter = self.filter {
            try encodeContainer.encode(filter, forKey: .filter)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListDocumentClassifiersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListDocumentClassifiersInput: Swift.Equatable {
    /// Filters the jobs that are returned. You can filter jobs on their name, status, or the date and time that they were submitted. You can only set one filter at a time.
    public var filter: ComprehendClientTypes.DocumentClassifierFilter?
    /// The maximum number of results to return in each page. The default is 100.
    public var maxResults: Swift.Int?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init (
        filter: ComprehendClientTypes.DocumentClassifierFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListDocumentClassifiersInputBody: Swift.Equatable {
    let filter: ComprehendClientTypes.DocumentClassifierFilter?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListDocumentClassifiersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.DocumentClassifierFilter.self, forKey: .filter)
        filter = filterDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListDocumentClassifiersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDocumentClassifiersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidFilterException" : self = .invalidFilterException(try InvalidFilterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListDocumentClassifiersOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidFilterException(InvalidFilterException)
    case invalidRequestException(InvalidRequestException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDocumentClassifiersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListDocumentClassifiersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.documentClassifierPropertiesList = output.documentClassifierPropertiesList
            self.nextToken = output.nextToken
        } else {
            self.documentClassifierPropertiesList = nil
            self.nextToken = nil
        }
    }
}

public struct ListDocumentClassifiersOutputResponse: Swift.Equatable {
    /// A list containing the properties of each job returned.
    public var documentClassifierPropertiesList: [ComprehendClientTypes.DocumentClassifierProperties]?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init (
        documentClassifierPropertiesList: [ComprehendClientTypes.DocumentClassifierProperties]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.documentClassifierPropertiesList = documentClassifierPropertiesList
        self.nextToken = nextToken
    }
}

struct ListDocumentClassifiersOutputResponseBody: Swift.Equatable {
    let documentClassifierPropertiesList: [ComprehendClientTypes.DocumentClassifierProperties]?
    let nextToken: Swift.String?
}

extension ListDocumentClassifiersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case documentClassifierPropertiesList = "DocumentClassifierPropertiesList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentClassifierPropertiesListContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.DocumentClassifierProperties?].self, forKey: .documentClassifierPropertiesList)
        var documentClassifierPropertiesListDecoded0:[ComprehendClientTypes.DocumentClassifierProperties]? = nil
        if let documentClassifierPropertiesListContainer = documentClassifierPropertiesListContainer {
            documentClassifierPropertiesListDecoded0 = [ComprehendClientTypes.DocumentClassifierProperties]()
            for structure0 in documentClassifierPropertiesListContainer {
                if let structure0 = structure0 {
                    documentClassifierPropertiesListDecoded0?.append(structure0)
                }
            }
        }
        documentClassifierPropertiesList = documentClassifierPropertiesListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListDominantLanguageDetectionJobsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filter = self.filter {
            try encodeContainer.encode(filter, forKey: .filter)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListDominantLanguageDetectionJobsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListDominantLanguageDetectionJobsInput: Swift.Equatable {
    /// Filters that jobs that are returned. You can filter jobs on their name, status, or the date and time that they were submitted. You can only set one filter at a time.
    public var filter: ComprehendClientTypes.DominantLanguageDetectionJobFilter?
    /// The maximum number of results to return in each page. The default is 100.
    public var maxResults: Swift.Int?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init (
        filter: ComprehendClientTypes.DominantLanguageDetectionJobFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListDominantLanguageDetectionJobsInputBody: Swift.Equatable {
    let filter: ComprehendClientTypes.DominantLanguageDetectionJobFilter?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListDominantLanguageDetectionJobsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.DominantLanguageDetectionJobFilter.self, forKey: .filter)
        filter = filterDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListDominantLanguageDetectionJobsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDominantLanguageDetectionJobsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidFilterException" : self = .invalidFilterException(try InvalidFilterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListDominantLanguageDetectionJobsOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidFilterException(InvalidFilterException)
    case invalidRequestException(InvalidRequestException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDominantLanguageDetectionJobsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListDominantLanguageDetectionJobsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dominantLanguageDetectionJobPropertiesList = output.dominantLanguageDetectionJobPropertiesList
            self.nextToken = output.nextToken
        } else {
            self.dominantLanguageDetectionJobPropertiesList = nil
            self.nextToken = nil
        }
    }
}

public struct ListDominantLanguageDetectionJobsOutputResponse: Swift.Equatable {
    /// A list containing the properties of each job that is returned.
    public var dominantLanguageDetectionJobPropertiesList: [ComprehendClientTypes.DominantLanguageDetectionJobProperties]?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init (
        dominantLanguageDetectionJobPropertiesList: [ComprehendClientTypes.DominantLanguageDetectionJobProperties]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.dominantLanguageDetectionJobPropertiesList = dominantLanguageDetectionJobPropertiesList
        self.nextToken = nextToken
    }
}

struct ListDominantLanguageDetectionJobsOutputResponseBody: Swift.Equatable {
    let dominantLanguageDetectionJobPropertiesList: [ComprehendClientTypes.DominantLanguageDetectionJobProperties]?
    let nextToken: Swift.String?
}

extension ListDominantLanguageDetectionJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dominantLanguageDetectionJobPropertiesList = "DominantLanguageDetectionJobPropertiesList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dominantLanguageDetectionJobPropertiesListContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.DominantLanguageDetectionJobProperties?].self, forKey: .dominantLanguageDetectionJobPropertiesList)
        var dominantLanguageDetectionJobPropertiesListDecoded0:[ComprehendClientTypes.DominantLanguageDetectionJobProperties]? = nil
        if let dominantLanguageDetectionJobPropertiesListContainer = dominantLanguageDetectionJobPropertiesListContainer {
            dominantLanguageDetectionJobPropertiesListDecoded0 = [ComprehendClientTypes.DominantLanguageDetectionJobProperties]()
            for structure0 in dominantLanguageDetectionJobPropertiesListContainer {
                if let structure0 = structure0 {
                    dominantLanguageDetectionJobPropertiesListDecoded0?.append(structure0)
                }
            }
        }
        dominantLanguageDetectionJobPropertiesList = dominantLanguageDetectionJobPropertiesListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListEndpointsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filter = self.filter {
            try encodeContainer.encode(filter, forKey: .filter)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListEndpointsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListEndpointsInput: Swift.Equatable {
    /// Filters the endpoints that are returned. You can filter endpoints on their name, model, status, or the date and time that they were created. You can only set one filter at a time.
    public var filter: ComprehendClientTypes.EndpointFilter?
    /// The maximum number of results to return in each page. The default is 100.
    public var maxResults: Swift.Int?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init (
        filter: ComprehendClientTypes.EndpointFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListEndpointsInputBody: Swift.Equatable {
    let filter: ComprehendClientTypes.EndpointFilter?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListEndpointsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.EndpointFilter.self, forKey: .filter)
        filter = filterDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListEndpointsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListEndpointsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListEndpointsOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListEndpointsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListEndpointsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.endpointPropertiesList = output.endpointPropertiesList
            self.nextToken = output.nextToken
        } else {
            self.endpointPropertiesList = nil
            self.nextToken = nil
        }
    }
}

public struct ListEndpointsOutputResponse: Swift.Equatable {
    /// Displays a list of endpoint properties being retrieved by the service in response to the request.
    public var endpointPropertiesList: [ComprehendClientTypes.EndpointProperties]?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init (
        endpointPropertiesList: [ComprehendClientTypes.EndpointProperties]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.endpointPropertiesList = endpointPropertiesList
        self.nextToken = nextToken
    }
}

struct ListEndpointsOutputResponseBody: Swift.Equatable {
    let endpointPropertiesList: [ComprehendClientTypes.EndpointProperties]?
    let nextToken: Swift.String?
}

extension ListEndpointsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointPropertiesList = "EndpointPropertiesList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointPropertiesListContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.EndpointProperties?].self, forKey: .endpointPropertiesList)
        var endpointPropertiesListDecoded0:[ComprehendClientTypes.EndpointProperties]? = nil
        if let endpointPropertiesListContainer = endpointPropertiesListContainer {
            endpointPropertiesListDecoded0 = [ComprehendClientTypes.EndpointProperties]()
            for structure0 in endpointPropertiesListContainer {
                if let structure0 = structure0 {
                    endpointPropertiesListDecoded0?.append(structure0)
                }
            }
        }
        endpointPropertiesList = endpointPropertiesListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListEntitiesDetectionJobsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filter = self.filter {
            try encodeContainer.encode(filter, forKey: .filter)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListEntitiesDetectionJobsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListEntitiesDetectionJobsInput: Swift.Equatable {
    /// Filters the jobs that are returned. You can filter jobs on their name, status, or the date and time that they were submitted. You can only set one filter at a time.
    public var filter: ComprehendClientTypes.EntitiesDetectionJobFilter?
    /// The maximum number of results to return in each page. The default is 100.
    public var maxResults: Swift.Int?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init (
        filter: ComprehendClientTypes.EntitiesDetectionJobFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListEntitiesDetectionJobsInputBody: Swift.Equatable {
    let filter: ComprehendClientTypes.EntitiesDetectionJobFilter?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListEntitiesDetectionJobsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.EntitiesDetectionJobFilter.self, forKey: .filter)
        filter = filterDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListEntitiesDetectionJobsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListEntitiesDetectionJobsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidFilterException" : self = .invalidFilterException(try InvalidFilterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListEntitiesDetectionJobsOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidFilterException(InvalidFilterException)
    case invalidRequestException(InvalidRequestException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListEntitiesDetectionJobsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListEntitiesDetectionJobsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.entitiesDetectionJobPropertiesList = output.entitiesDetectionJobPropertiesList
            self.nextToken = output.nextToken
        } else {
            self.entitiesDetectionJobPropertiesList = nil
            self.nextToken = nil
        }
    }
}

public struct ListEntitiesDetectionJobsOutputResponse: Swift.Equatable {
    /// A list containing the properties of each job that is returned.
    public var entitiesDetectionJobPropertiesList: [ComprehendClientTypes.EntitiesDetectionJobProperties]?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init (
        entitiesDetectionJobPropertiesList: [ComprehendClientTypes.EntitiesDetectionJobProperties]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.entitiesDetectionJobPropertiesList = entitiesDetectionJobPropertiesList
        self.nextToken = nextToken
    }
}

struct ListEntitiesDetectionJobsOutputResponseBody: Swift.Equatable {
    let entitiesDetectionJobPropertiesList: [ComprehendClientTypes.EntitiesDetectionJobProperties]?
    let nextToken: Swift.String?
}

extension ListEntitiesDetectionJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entitiesDetectionJobPropertiesList = "EntitiesDetectionJobPropertiesList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let entitiesDetectionJobPropertiesListContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.EntitiesDetectionJobProperties?].self, forKey: .entitiesDetectionJobPropertiesList)
        var entitiesDetectionJobPropertiesListDecoded0:[ComprehendClientTypes.EntitiesDetectionJobProperties]? = nil
        if let entitiesDetectionJobPropertiesListContainer = entitiesDetectionJobPropertiesListContainer {
            entitiesDetectionJobPropertiesListDecoded0 = [ComprehendClientTypes.EntitiesDetectionJobProperties]()
            for structure0 in entitiesDetectionJobPropertiesListContainer {
                if let structure0 = structure0 {
                    entitiesDetectionJobPropertiesListDecoded0?.append(structure0)
                }
            }
        }
        entitiesDetectionJobPropertiesList = entitiesDetectionJobPropertiesListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListEntityRecognizerSummariesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListEntityRecognizerSummariesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListEntityRecognizerSummariesInput: Swift.Equatable {
    /// The maximum number of results to return on each page. The default is 100.
    public var maxResults: Swift.Int?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListEntityRecognizerSummariesInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListEntityRecognizerSummariesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListEntityRecognizerSummariesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListEntityRecognizerSummariesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListEntityRecognizerSummariesOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListEntityRecognizerSummariesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListEntityRecognizerSummariesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.entityRecognizerSummariesList = output.entityRecognizerSummariesList
            self.nextToken = output.nextToken
        } else {
            self.entityRecognizerSummariesList = nil
            self.nextToken = nil
        }
    }
}

public struct ListEntityRecognizerSummariesOutputResponse: Swift.Equatable {
    /// The list entity recognizer summaries.
    public var entityRecognizerSummariesList: [ComprehendClientTypes.EntityRecognizerSummary]?
    /// The list entity recognizer summaries.
    public var nextToken: Swift.String?

    public init (
        entityRecognizerSummariesList: [ComprehendClientTypes.EntityRecognizerSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.entityRecognizerSummariesList = entityRecognizerSummariesList
        self.nextToken = nextToken
    }
}

struct ListEntityRecognizerSummariesOutputResponseBody: Swift.Equatable {
    let entityRecognizerSummariesList: [ComprehendClientTypes.EntityRecognizerSummary]?
    let nextToken: Swift.String?
}

extension ListEntityRecognizerSummariesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entityRecognizerSummariesList = "EntityRecognizerSummariesList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let entityRecognizerSummariesListContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.EntityRecognizerSummary?].self, forKey: .entityRecognizerSummariesList)
        var entityRecognizerSummariesListDecoded0:[ComprehendClientTypes.EntityRecognizerSummary]? = nil
        if let entityRecognizerSummariesListContainer = entityRecognizerSummariesListContainer {
            entityRecognizerSummariesListDecoded0 = [ComprehendClientTypes.EntityRecognizerSummary]()
            for structure0 in entityRecognizerSummariesListContainer {
                if let structure0 = structure0 {
                    entityRecognizerSummariesListDecoded0?.append(structure0)
                }
            }
        }
        entityRecognizerSummariesList = entityRecognizerSummariesListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListEntityRecognizersInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filter = self.filter {
            try encodeContainer.encode(filter, forKey: .filter)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListEntityRecognizersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListEntityRecognizersInput: Swift.Equatable {
    /// Filters the list of entities returned. You can filter on Status, SubmitTimeBefore, or SubmitTimeAfter. You can only set one filter at a time.
    public var filter: ComprehendClientTypes.EntityRecognizerFilter?
    /// The maximum number of results to return on each page. The default is 100.
    public var maxResults: Swift.Int?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init (
        filter: ComprehendClientTypes.EntityRecognizerFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListEntityRecognizersInputBody: Swift.Equatable {
    let filter: ComprehendClientTypes.EntityRecognizerFilter?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListEntityRecognizersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.EntityRecognizerFilter.self, forKey: .filter)
        filter = filterDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListEntityRecognizersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListEntityRecognizersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidFilterException" : self = .invalidFilterException(try InvalidFilterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListEntityRecognizersOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidFilterException(InvalidFilterException)
    case invalidRequestException(InvalidRequestException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListEntityRecognizersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListEntityRecognizersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.entityRecognizerPropertiesList = output.entityRecognizerPropertiesList
            self.nextToken = output.nextToken
        } else {
            self.entityRecognizerPropertiesList = nil
            self.nextToken = nil
        }
    }
}

public struct ListEntityRecognizersOutputResponse: Swift.Equatable {
    /// The list of properties of an entity recognizer.
    public var entityRecognizerPropertiesList: [ComprehendClientTypes.EntityRecognizerProperties]?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init (
        entityRecognizerPropertiesList: [ComprehendClientTypes.EntityRecognizerProperties]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.entityRecognizerPropertiesList = entityRecognizerPropertiesList
        self.nextToken = nextToken
    }
}

struct ListEntityRecognizersOutputResponseBody: Swift.Equatable {
    let entityRecognizerPropertiesList: [ComprehendClientTypes.EntityRecognizerProperties]?
    let nextToken: Swift.String?
}

extension ListEntityRecognizersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entityRecognizerPropertiesList = "EntityRecognizerPropertiesList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let entityRecognizerPropertiesListContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.EntityRecognizerProperties?].self, forKey: .entityRecognizerPropertiesList)
        var entityRecognizerPropertiesListDecoded0:[ComprehendClientTypes.EntityRecognizerProperties]? = nil
        if let entityRecognizerPropertiesListContainer = entityRecognizerPropertiesListContainer {
            entityRecognizerPropertiesListDecoded0 = [ComprehendClientTypes.EntityRecognizerProperties]()
            for structure0 in entityRecognizerPropertiesListContainer {
                if let structure0 = structure0 {
                    entityRecognizerPropertiesListDecoded0?.append(structure0)
                }
            }
        }
        entityRecognizerPropertiesList = entityRecognizerPropertiesListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListEventsDetectionJobsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filter = self.filter {
            try encodeContainer.encode(filter, forKey: .filter)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListEventsDetectionJobsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListEventsDetectionJobsInput: Swift.Equatable {
    /// Filters the jobs that are returned. You can filter jobs on their name, status, or the date and time that they were submitted. You can only set one filter at a time.
    public var filter: ComprehendClientTypes.EventsDetectionJobFilter?
    /// The maximum number of results to return in each page.
    public var maxResults: Swift.Int?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init (
        filter: ComprehendClientTypes.EventsDetectionJobFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListEventsDetectionJobsInputBody: Swift.Equatable {
    let filter: ComprehendClientTypes.EventsDetectionJobFilter?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListEventsDetectionJobsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.EventsDetectionJobFilter.self, forKey: .filter)
        filter = filterDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListEventsDetectionJobsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListEventsDetectionJobsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidFilterException" : self = .invalidFilterException(try InvalidFilterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListEventsDetectionJobsOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidFilterException(InvalidFilterException)
    case invalidRequestException(InvalidRequestException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListEventsDetectionJobsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListEventsDetectionJobsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.eventsDetectionJobPropertiesList = output.eventsDetectionJobPropertiesList
            self.nextToken = output.nextToken
        } else {
            self.eventsDetectionJobPropertiesList = nil
            self.nextToken = nil
        }
    }
}

public struct ListEventsDetectionJobsOutputResponse: Swift.Equatable {
    /// A list containing the properties of each job that is returned.
    public var eventsDetectionJobPropertiesList: [ComprehendClientTypes.EventsDetectionJobProperties]?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init (
        eventsDetectionJobPropertiesList: [ComprehendClientTypes.EventsDetectionJobProperties]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.eventsDetectionJobPropertiesList = eventsDetectionJobPropertiesList
        self.nextToken = nextToken
    }
}

struct ListEventsDetectionJobsOutputResponseBody: Swift.Equatable {
    let eventsDetectionJobPropertiesList: [ComprehendClientTypes.EventsDetectionJobProperties]?
    let nextToken: Swift.String?
}

extension ListEventsDetectionJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventsDetectionJobPropertiesList = "EventsDetectionJobPropertiesList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventsDetectionJobPropertiesListContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.EventsDetectionJobProperties?].self, forKey: .eventsDetectionJobPropertiesList)
        var eventsDetectionJobPropertiesListDecoded0:[ComprehendClientTypes.EventsDetectionJobProperties]? = nil
        if let eventsDetectionJobPropertiesListContainer = eventsDetectionJobPropertiesListContainer {
            eventsDetectionJobPropertiesListDecoded0 = [ComprehendClientTypes.EventsDetectionJobProperties]()
            for structure0 in eventsDetectionJobPropertiesListContainer {
                if let structure0 = structure0 {
                    eventsDetectionJobPropertiesListDecoded0?.append(structure0)
                }
            }
        }
        eventsDetectionJobPropertiesList = eventsDetectionJobPropertiesListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListKeyPhrasesDetectionJobsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filter = self.filter {
            try encodeContainer.encode(filter, forKey: .filter)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListKeyPhrasesDetectionJobsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListKeyPhrasesDetectionJobsInput: Swift.Equatable {
    /// Filters the jobs that are returned. You can filter jobs on their name, status, or the date and time that they were submitted. You can only set one filter at a time.
    public var filter: ComprehendClientTypes.KeyPhrasesDetectionJobFilter?
    /// The maximum number of results to return in each page. The default is 100.
    public var maxResults: Swift.Int?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init (
        filter: ComprehendClientTypes.KeyPhrasesDetectionJobFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListKeyPhrasesDetectionJobsInputBody: Swift.Equatable {
    let filter: ComprehendClientTypes.KeyPhrasesDetectionJobFilter?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListKeyPhrasesDetectionJobsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.KeyPhrasesDetectionJobFilter.self, forKey: .filter)
        filter = filterDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListKeyPhrasesDetectionJobsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListKeyPhrasesDetectionJobsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidFilterException" : self = .invalidFilterException(try InvalidFilterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListKeyPhrasesDetectionJobsOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidFilterException(InvalidFilterException)
    case invalidRequestException(InvalidRequestException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListKeyPhrasesDetectionJobsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListKeyPhrasesDetectionJobsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.keyPhrasesDetectionJobPropertiesList = output.keyPhrasesDetectionJobPropertiesList
            self.nextToken = output.nextToken
        } else {
            self.keyPhrasesDetectionJobPropertiesList = nil
            self.nextToken = nil
        }
    }
}

public struct ListKeyPhrasesDetectionJobsOutputResponse: Swift.Equatable {
    /// A list containing the properties of each job that is returned.
    public var keyPhrasesDetectionJobPropertiesList: [ComprehendClientTypes.KeyPhrasesDetectionJobProperties]?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init (
        keyPhrasesDetectionJobPropertiesList: [ComprehendClientTypes.KeyPhrasesDetectionJobProperties]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.keyPhrasesDetectionJobPropertiesList = keyPhrasesDetectionJobPropertiesList
        self.nextToken = nextToken
    }
}

struct ListKeyPhrasesDetectionJobsOutputResponseBody: Swift.Equatable {
    let keyPhrasesDetectionJobPropertiesList: [ComprehendClientTypes.KeyPhrasesDetectionJobProperties]?
    let nextToken: Swift.String?
}

extension ListKeyPhrasesDetectionJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyPhrasesDetectionJobPropertiesList = "KeyPhrasesDetectionJobPropertiesList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyPhrasesDetectionJobPropertiesListContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.KeyPhrasesDetectionJobProperties?].self, forKey: .keyPhrasesDetectionJobPropertiesList)
        var keyPhrasesDetectionJobPropertiesListDecoded0:[ComprehendClientTypes.KeyPhrasesDetectionJobProperties]? = nil
        if let keyPhrasesDetectionJobPropertiesListContainer = keyPhrasesDetectionJobPropertiesListContainer {
            keyPhrasesDetectionJobPropertiesListDecoded0 = [ComprehendClientTypes.KeyPhrasesDetectionJobProperties]()
            for structure0 in keyPhrasesDetectionJobPropertiesListContainer {
                if let structure0 = structure0 {
                    keyPhrasesDetectionJobPropertiesListDecoded0?.append(structure0)
                }
            }
        }
        keyPhrasesDetectionJobPropertiesList = keyPhrasesDetectionJobPropertiesListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListPiiEntitiesDetectionJobsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filter = self.filter {
            try encodeContainer.encode(filter, forKey: .filter)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListPiiEntitiesDetectionJobsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListPiiEntitiesDetectionJobsInput: Swift.Equatable {
    /// Filters the jobs that are returned. You can filter jobs on their name, status, or the date and time that they were submitted. You can only set one filter at a time.
    public var filter: ComprehendClientTypes.PiiEntitiesDetectionJobFilter?
    /// The maximum number of results to return in each page.
    public var maxResults: Swift.Int?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init (
        filter: ComprehendClientTypes.PiiEntitiesDetectionJobFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListPiiEntitiesDetectionJobsInputBody: Swift.Equatable {
    let filter: ComprehendClientTypes.PiiEntitiesDetectionJobFilter?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListPiiEntitiesDetectionJobsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.PiiEntitiesDetectionJobFilter.self, forKey: .filter)
        filter = filterDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListPiiEntitiesDetectionJobsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListPiiEntitiesDetectionJobsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidFilterException" : self = .invalidFilterException(try InvalidFilterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListPiiEntitiesDetectionJobsOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidFilterException(InvalidFilterException)
    case invalidRequestException(InvalidRequestException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListPiiEntitiesDetectionJobsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListPiiEntitiesDetectionJobsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.piiEntitiesDetectionJobPropertiesList = output.piiEntitiesDetectionJobPropertiesList
        } else {
            self.nextToken = nil
            self.piiEntitiesDetectionJobPropertiesList = nil
        }
    }
}

public struct ListPiiEntitiesDetectionJobsOutputResponse: Swift.Equatable {
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?
    /// A list containing the properties of each job that is returned.
    public var piiEntitiesDetectionJobPropertiesList: [ComprehendClientTypes.PiiEntitiesDetectionJobProperties]?

    public init (
        nextToken: Swift.String? = nil,
        piiEntitiesDetectionJobPropertiesList: [ComprehendClientTypes.PiiEntitiesDetectionJobProperties]? = nil
    )
    {
        self.nextToken = nextToken
        self.piiEntitiesDetectionJobPropertiesList = piiEntitiesDetectionJobPropertiesList
    }
}

struct ListPiiEntitiesDetectionJobsOutputResponseBody: Swift.Equatable {
    let piiEntitiesDetectionJobPropertiesList: [ComprehendClientTypes.PiiEntitiesDetectionJobProperties]?
    let nextToken: Swift.String?
}

extension ListPiiEntitiesDetectionJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case piiEntitiesDetectionJobPropertiesList = "PiiEntitiesDetectionJobPropertiesList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let piiEntitiesDetectionJobPropertiesListContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.PiiEntitiesDetectionJobProperties?].self, forKey: .piiEntitiesDetectionJobPropertiesList)
        var piiEntitiesDetectionJobPropertiesListDecoded0:[ComprehendClientTypes.PiiEntitiesDetectionJobProperties]? = nil
        if let piiEntitiesDetectionJobPropertiesListContainer = piiEntitiesDetectionJobPropertiesListContainer {
            piiEntitiesDetectionJobPropertiesListDecoded0 = [ComprehendClientTypes.PiiEntitiesDetectionJobProperties]()
            for structure0 in piiEntitiesDetectionJobPropertiesListContainer {
                if let structure0 = structure0 {
                    piiEntitiesDetectionJobPropertiesListDecoded0?.append(structure0)
                }
            }
        }
        piiEntitiesDetectionJobPropertiesList = piiEntitiesDetectionJobPropertiesListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListSentimentDetectionJobsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filter = self.filter {
            try encodeContainer.encode(filter, forKey: .filter)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListSentimentDetectionJobsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListSentimentDetectionJobsInput: Swift.Equatable {
    /// Filters the jobs that are returned. You can filter jobs on their name, status, or the date and time that they were submitted. You can only set one filter at a time.
    public var filter: ComprehendClientTypes.SentimentDetectionJobFilter?
    /// The maximum number of results to return in each page. The default is 100.
    public var maxResults: Swift.Int?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init (
        filter: ComprehendClientTypes.SentimentDetectionJobFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListSentimentDetectionJobsInputBody: Swift.Equatable {
    let filter: ComprehendClientTypes.SentimentDetectionJobFilter?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListSentimentDetectionJobsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.SentimentDetectionJobFilter.self, forKey: .filter)
        filter = filterDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListSentimentDetectionJobsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListSentimentDetectionJobsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidFilterException" : self = .invalidFilterException(try InvalidFilterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListSentimentDetectionJobsOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidFilterException(InvalidFilterException)
    case invalidRequestException(InvalidRequestException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListSentimentDetectionJobsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListSentimentDetectionJobsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.sentimentDetectionJobPropertiesList = output.sentimentDetectionJobPropertiesList
        } else {
            self.nextToken = nil
            self.sentimentDetectionJobPropertiesList = nil
        }
    }
}

public struct ListSentimentDetectionJobsOutputResponse: Swift.Equatable {
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?
    /// A list containing the properties of each job that is returned.
    public var sentimentDetectionJobPropertiesList: [ComprehendClientTypes.SentimentDetectionJobProperties]?

    public init (
        nextToken: Swift.String? = nil,
        sentimentDetectionJobPropertiesList: [ComprehendClientTypes.SentimentDetectionJobProperties]? = nil
    )
    {
        self.nextToken = nextToken
        self.sentimentDetectionJobPropertiesList = sentimentDetectionJobPropertiesList
    }
}

struct ListSentimentDetectionJobsOutputResponseBody: Swift.Equatable {
    let sentimentDetectionJobPropertiesList: [ComprehendClientTypes.SentimentDetectionJobProperties]?
    let nextToken: Swift.String?
}

extension ListSentimentDetectionJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case sentimentDetectionJobPropertiesList = "SentimentDetectionJobPropertiesList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sentimentDetectionJobPropertiesListContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.SentimentDetectionJobProperties?].self, forKey: .sentimentDetectionJobPropertiesList)
        var sentimentDetectionJobPropertiesListDecoded0:[ComprehendClientTypes.SentimentDetectionJobProperties]? = nil
        if let sentimentDetectionJobPropertiesListContainer = sentimentDetectionJobPropertiesListContainer {
            sentimentDetectionJobPropertiesListDecoded0 = [ComprehendClientTypes.SentimentDetectionJobProperties]()
            for structure0 in sentimentDetectionJobPropertiesListContainer {
                if let structure0 = structure0 {
                    sentimentDetectionJobPropertiesListDecoded0?.append(structure0)
                }
            }
        }
        sentimentDetectionJobPropertiesList = sentimentDetectionJobPropertiesListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTagsForResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

extension ListTagsForResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListTagsForResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the given Amazon Comprehend resource you are querying.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
}

extension ListTagsForResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.resourceArn = output.resourceArn
            self.tags = output.tags
        } else {
            self.resourceArn = nil
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the given Amazon Comprehend resource you are querying.
    public var resourceArn: Swift.String?
    /// Tags associated with the Amazon Comprehend resource being queried. A tag is a key-value pair that adds as a metadata to a resource used by Amazon Comprehend. For example, a tag with "Sales" as the key might be added to a resource to indicate its use by the sales department.
    public var tags: [ComprehendClientTypes.Tag]?

    public init (
        resourceArn: Swift.String? = nil,
        tags: [ComprehendClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let tags: [ComprehendClientTypes.Tag]?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[ComprehendClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [ComprehendClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension ListTargetedSentimentDetectionJobsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filter = self.filter {
            try encodeContainer.encode(filter, forKey: .filter)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListTargetedSentimentDetectionJobsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListTargetedSentimentDetectionJobsInput: Swift.Equatable {
    /// Filters the jobs that are returned. You can filter jobs on their name, status, or the date and time that they were submitted. You can only set one filter at a time.
    public var filter: ComprehendClientTypes.TargetedSentimentDetectionJobFilter?
    /// The maximum number of results to return in each page. The default is 100.
    public var maxResults: Swift.Int?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init (
        filter: ComprehendClientTypes.TargetedSentimentDetectionJobFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListTargetedSentimentDetectionJobsInputBody: Swift.Equatable {
    let filter: ComprehendClientTypes.TargetedSentimentDetectionJobFilter?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListTargetedSentimentDetectionJobsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.TargetedSentimentDetectionJobFilter.self, forKey: .filter)
        filter = filterDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListTargetedSentimentDetectionJobsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTargetedSentimentDetectionJobsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidFilterException" : self = .invalidFilterException(try InvalidFilterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListTargetedSentimentDetectionJobsOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidFilterException(InvalidFilterException)
    case invalidRequestException(InvalidRequestException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTargetedSentimentDetectionJobsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListTargetedSentimentDetectionJobsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.targetedSentimentDetectionJobPropertiesList = output.targetedSentimentDetectionJobPropertiesList
        } else {
            self.nextToken = nil
            self.targetedSentimentDetectionJobPropertiesList = nil
        }
    }
}

public struct ListTargetedSentimentDetectionJobsOutputResponse: Swift.Equatable {
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?
    /// A list containing the properties of each job that is returned.
    public var targetedSentimentDetectionJobPropertiesList: [ComprehendClientTypes.TargetedSentimentDetectionJobProperties]?

    public init (
        nextToken: Swift.String? = nil,
        targetedSentimentDetectionJobPropertiesList: [ComprehendClientTypes.TargetedSentimentDetectionJobProperties]? = nil
    )
    {
        self.nextToken = nextToken
        self.targetedSentimentDetectionJobPropertiesList = targetedSentimentDetectionJobPropertiesList
    }
}

struct ListTargetedSentimentDetectionJobsOutputResponseBody: Swift.Equatable {
    let targetedSentimentDetectionJobPropertiesList: [ComprehendClientTypes.TargetedSentimentDetectionJobProperties]?
    let nextToken: Swift.String?
}

extension ListTargetedSentimentDetectionJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case targetedSentimentDetectionJobPropertiesList = "TargetedSentimentDetectionJobPropertiesList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetedSentimentDetectionJobPropertiesListContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.TargetedSentimentDetectionJobProperties?].self, forKey: .targetedSentimentDetectionJobPropertiesList)
        var targetedSentimentDetectionJobPropertiesListDecoded0:[ComprehendClientTypes.TargetedSentimentDetectionJobProperties]? = nil
        if let targetedSentimentDetectionJobPropertiesListContainer = targetedSentimentDetectionJobPropertiesListContainer {
            targetedSentimentDetectionJobPropertiesListDecoded0 = [ComprehendClientTypes.TargetedSentimentDetectionJobProperties]()
            for structure0 in targetedSentimentDetectionJobPropertiesListContainer {
                if let structure0 = structure0 {
                    targetedSentimentDetectionJobPropertiesListDecoded0?.append(structure0)
                }
            }
        }
        targetedSentimentDetectionJobPropertiesList = targetedSentimentDetectionJobPropertiesListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTopicsDetectionJobsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filter = self.filter {
            try encodeContainer.encode(filter, forKey: .filter)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListTopicsDetectionJobsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListTopicsDetectionJobsInput: Swift.Equatable {
    /// Filters the jobs that are returned. Jobs can be filtered on their name, status, or the date and time that they were submitted. You can set only one filter at a time.
    public var filter: ComprehendClientTypes.TopicsDetectionJobFilter?
    /// The maximum number of results to return in each page. The default is 100.
    public var maxResults: Swift.Int?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init (
        filter: ComprehendClientTypes.TopicsDetectionJobFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListTopicsDetectionJobsInputBody: Swift.Equatable {
    let filter: ComprehendClientTypes.TopicsDetectionJobFilter?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListTopicsDetectionJobsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.TopicsDetectionJobFilter.self, forKey: .filter)
        filter = filterDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListTopicsDetectionJobsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTopicsDetectionJobsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidFilterException" : self = .invalidFilterException(try InvalidFilterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListTopicsDetectionJobsOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidFilterException(InvalidFilterException)
    case invalidRequestException(InvalidRequestException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTopicsDetectionJobsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListTopicsDetectionJobsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.topicsDetectionJobPropertiesList = output.topicsDetectionJobPropertiesList
        } else {
            self.nextToken = nil
            self.topicsDetectionJobPropertiesList = nil
        }
    }
}

public struct ListTopicsDetectionJobsOutputResponse: Swift.Equatable {
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?
    /// A list containing the properties of each job that is returned.
    public var topicsDetectionJobPropertiesList: [ComprehendClientTypes.TopicsDetectionJobProperties]?

    public init (
        nextToken: Swift.String? = nil,
        topicsDetectionJobPropertiesList: [ComprehendClientTypes.TopicsDetectionJobProperties]? = nil
    )
    {
        self.nextToken = nextToken
        self.topicsDetectionJobPropertiesList = topicsDetectionJobPropertiesList
    }
}

struct ListTopicsDetectionJobsOutputResponseBody: Swift.Equatable {
    let topicsDetectionJobPropertiesList: [ComprehendClientTypes.TopicsDetectionJobProperties]?
    let nextToken: Swift.String?
}

extension ListTopicsDetectionJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case topicsDetectionJobPropertiesList = "TopicsDetectionJobPropertiesList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let topicsDetectionJobPropertiesListContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.TopicsDetectionJobProperties?].self, forKey: .topicsDetectionJobPropertiesList)
        var topicsDetectionJobPropertiesListDecoded0:[ComprehendClientTypes.TopicsDetectionJobProperties]? = nil
        if let topicsDetectionJobPropertiesListContainer = topicsDetectionJobPropertiesListContainer {
            topicsDetectionJobPropertiesListDecoded0 = [ComprehendClientTypes.TopicsDetectionJobProperties]()
            for structure0 in topicsDetectionJobPropertiesListContainer {
                if let structure0 = structure0 {
                    topicsDetectionJobPropertiesListDecoded0?.append(structure0)
                }
            }
        }
        topicsDetectionJobPropertiesList = topicsDetectionJobPropertiesListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ComprehendClientTypes.MentionSentiment: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sentiment = "Sentiment"
        case sentimentScore = "SentimentScore"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sentiment = self.sentiment {
            try encodeContainer.encode(sentiment.rawValue, forKey: .sentiment)
        }
        if let sentimentScore = self.sentimentScore {
            try encodeContainer.encode(sentimentScore, forKey: .sentimentScore)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sentimentDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.SentimentType.self, forKey: .sentiment)
        sentiment = sentimentDecoded
        let sentimentScoreDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.SentimentScore.self, forKey: .sentimentScore)
        sentimentScore = sentimentScoreDecoded
    }
}

extension ComprehendClientTypes {
    /// Contains the sentiment and sentiment score for one mention of an entity. For more information about targeted sentiment, see [Targeted sentiment](https://docs.aws.amazon.com/comprehend/latest/dg/how-targeted-sentiment.html).
    public struct MentionSentiment: Swift.Equatable {
        /// The sentiment of the mention.
        public var sentiment: ComprehendClientTypes.SentimentType?
        /// Describes the level of confidence that Amazon Comprehend has in the accuracy of its detection of sentiments.
        public var sentimentScore: ComprehendClientTypes.SentimentScore?

        public init (
            sentiment: ComprehendClientTypes.SentimentType? = nil,
            sentimentScore: ComprehendClientTypes.SentimentScore? = nil
        )
        {
            self.sentiment = sentiment
            self.sentimentScore = sentimentScore
        }
    }

}

extension ComprehendClientTypes {
    public enum ModelStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deleting
        case inError
        case stopped
        case stopRequested
        case submitted
        case trained
        case training
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelStatus] {
            return [
                .deleting,
                .inError,
                .stopped,
                .stopRequested,
                .submitted,
                .trained,
                .training,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deleting: return "DELETING"
            case .inError: return "IN_ERROR"
            case .stopped: return "STOPPED"
            case .stopRequested: return "STOP_REQUESTED"
            case .submitted: return "SUBMITTED"
            case .trained: return "TRAINED"
            case .training: return "TRAINING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ModelStatus(rawValue: rawValue) ?? ModelStatus.sdkUnknown(rawValue)
        }
    }
}

extension ComprehendClientTypes.OutputDataConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kmsKeyId = "KmsKeyId"
        case s3Uri = "S3Uri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let s3Uri = self.s3Uri {
            try encodeContainer.encode(s3Uri, forKey: .s3Uri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Uri)
        s3Uri = s3UriDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
    }
}

extension ComprehendClientTypes {
    /// Provides configuration parameters for the output of inference jobs.
    public struct OutputDataConfig: Swift.Equatable {
        /// ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt the output results from an analysis job. The KmsKeyId can be one of the following formats:
        ///
        /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * KMS Key Alias: "alias/ExampleAlias"
        ///
        /// * ARN of a KMS Key Alias: "arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias"
        public var kmsKeyId: Swift.String?
        /// When you use the OutputDataConfig object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file. When the topic detection job is finished, the service creates an output file in a directory specific to the job. The S3Uri field contains the location of the output file, called output.tar.gz. It is a compressed archive that contains the ouput of the operation. For a PII entity detection job, the output file is plain text, not a compressed archive. The output file name is the same as the input file, with .out appended at the end.
        /// This member is required.
        public var s3Uri: Swift.String?

        public init (
            kmsKeyId: Swift.String? = nil,
            s3Uri: Swift.String? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
            self.s3Uri = s3Uri
        }
    }

}

extension ComprehendClientTypes {
    public enum PageBasedErrorCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case internalServerError
        case pageCharactersExceeded
        case pageSizeExceeded
        case textractBadPage
        case textractProvisionedThroughputExceeded
        case sdkUnknown(Swift.String)

        public static var allCases: [PageBasedErrorCode] {
            return [
                .internalServerError,
                .pageCharactersExceeded,
                .pageSizeExceeded,
                .textractBadPage,
                .textractProvisionedThroughputExceeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .internalServerError: return "INTERNAL_SERVER_ERROR"
            case .pageCharactersExceeded: return "PAGE_CHARACTERS_EXCEEDED"
            case .pageSizeExceeded: return "PAGE_SIZE_EXCEEDED"
            case .textractBadPage: return "TEXTRACT_BAD_PAGE"
            case .textractProvisionedThroughputExceeded: return "TEXTRACT_PROVISIONED_THROUGHPUT_EXCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PageBasedErrorCode(rawValue: rawValue) ?? PageBasedErrorCode.sdkUnknown(rawValue)
        }
    }
}

extension ComprehendClientTypes.PartOfSpeechTag: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case score = "Score"
        case tag = "Tag"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let score = self.score {
            try encodeContainer.encode(score, forKey: .score)
        }
        if let tag = self.tag {
            try encodeContainer.encode(tag.rawValue, forKey: .tag)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.PartOfSpeechTagType.self, forKey: .tag)
        tag = tagDecoded
        let scoreDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .score)
        score = scoreDecoded
    }
}

extension ComprehendClientTypes {
    /// Identifies the part of speech represented by the token and gives the confidence that Amazon Comprehend has that the part of speech was correctly identified. For more information about the parts of speech that Amazon Comprehend can identify, see [Syntax](https://docs.aws.amazon.com/comprehend/latest/dg/how-syntax.html) in the Comprehend Developer Guide.
    public struct PartOfSpeechTag: Swift.Equatable {
        /// The confidence that Amazon Comprehend has that the part of speech was correctly identified.
        public var score: Swift.Float?
        /// Identifies the part of speech that the token represents.
        public var tag: ComprehendClientTypes.PartOfSpeechTagType?

        public init (
            score: Swift.Float? = nil,
            tag: ComprehendClientTypes.PartOfSpeechTagType? = nil
        )
        {
            self.score = score
            self.tag = tag
        }
    }

}

extension ComprehendClientTypes {
    public enum PartOfSpeechTagType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case adj
        case adp
        case adv
        case aux
        case cconj
        case conj
        case det
        case intj
        case noun
        case num
        case o
        case part
        case pron
        case propn
        case punct
        case sconj
        case sym
        case verb
        case sdkUnknown(Swift.String)

        public static var allCases: [PartOfSpeechTagType] {
            return [
                .adj,
                .adp,
                .adv,
                .aux,
                .cconj,
                .conj,
                .det,
                .intj,
                .noun,
                .num,
                .o,
                .part,
                .pron,
                .propn,
                .punct,
                .sconj,
                .sym,
                .verb,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .adj: return "ADJ"
            case .adp: return "ADP"
            case .adv: return "ADV"
            case .aux: return "AUX"
            case .cconj: return "CCONJ"
            case .conj: return "CONJ"
            case .det: return "DET"
            case .intj: return "INTJ"
            case .noun: return "NOUN"
            case .num: return "NUM"
            case .o: return "O"
            case .part: return "PART"
            case .pron: return "PRON"
            case .propn: return "PROPN"
            case .punct: return "PUNCT"
            case .sconj: return "SCONJ"
            case .sym: return "SYM"
            case .verb: return "VERB"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PartOfSpeechTagType(rawValue: rawValue) ?? PartOfSpeechTagType.sdkUnknown(rawValue)
        }
    }
}

extension ComprehendClientTypes.PiiEntitiesDetectionJobFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobName = "JobName"
        case jobStatus = "JobStatus"
        case submitTimeAfter = "SubmitTimeAfter"
        case submitTimeBefore = "SubmitTimeBefore"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobName = self.jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let jobStatus = self.jobStatus {
            try encodeContainer.encode(jobStatus.rawValue, forKey: .jobStatus)
        }
        if let submitTimeAfter = self.submitTimeAfter {
            try encodeContainer.encodeTimestamp(submitTimeAfter, format: .epochSeconds, forKey: .submitTimeAfter)
        }
        if let submitTimeBefore = self.submitTimeBefore {
            try encodeContainer.encodeTimestamp(submitTimeBefore, format: .epochSeconds, forKey: .submitTimeBefore)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let submitTimeBeforeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .submitTimeBefore)
        submitTimeBefore = submitTimeBeforeDecoded
        let submitTimeAfterDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .submitTimeAfter)
        submitTimeAfter = submitTimeAfterDecoded
    }
}

extension ComprehendClientTypes {
    /// Provides information for filtering a list of PII entity detection jobs.
    public struct PiiEntitiesDetectionJobFilter: Swift.Equatable {
        /// Filters on the name of the job.
        public var jobName: Swift.String?
        /// Filters the list of jobs based on job status. Returns only jobs with the specified status.
        public var jobStatus: ComprehendClientTypes.JobStatus?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest.
        public var submitTimeAfter: ClientRuntime.Date?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest.
        public var submitTimeBefore: ClientRuntime.Date?

        public init (
            jobName: Swift.String? = nil,
            jobStatus: ComprehendClientTypes.JobStatus? = nil,
            submitTimeAfter: ClientRuntime.Date? = nil,
            submitTimeBefore: ClientRuntime.Date? = nil
        )
        {
            self.jobName = jobName
            self.jobStatus = jobStatus
            self.submitTimeAfter = submitTimeAfter
            self.submitTimeBefore = submitTimeBefore
        }
    }

}

extension ComprehendClientTypes.PiiEntitiesDetectionJobProperties: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataAccessRoleArn = "DataAccessRoleArn"
        case endTime = "EndTime"
        case inputDataConfig = "InputDataConfig"
        case jobArn = "JobArn"
        case jobId = "JobId"
        case jobName = "JobName"
        case jobStatus = "JobStatus"
        case languageCode = "LanguageCode"
        case message = "Message"
        case mode = "Mode"
        case outputDataConfig = "OutputDataConfig"
        case redactionConfig = "RedactionConfig"
        case submitTime = "SubmitTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataAccessRoleArn = self.dataAccessRoleArn {
            try encodeContainer.encode(dataAccessRoleArn, forKey: .dataAccessRoleArn)
        }
        if let endTime = self.endTime {
            try encodeContainer.encodeTimestamp(endTime, format: .epochSeconds, forKey: .endTime)
        }
        if let inputDataConfig = self.inputDataConfig {
            try encodeContainer.encode(inputDataConfig, forKey: .inputDataConfig)
        }
        if let jobArn = self.jobArn {
            try encodeContainer.encode(jobArn, forKey: .jobArn)
        }
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let jobName = self.jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let jobStatus = self.jobStatus {
            try encodeContainer.encode(jobStatus.rawValue, forKey: .jobStatus)
        }
        if let languageCode = self.languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let mode = self.mode {
            try encodeContainer.encode(mode.rawValue, forKey: .mode)
        }
        if let outputDataConfig = self.outputDataConfig {
            try encodeContainer.encode(outputDataConfig, forKey: .outputDataConfig)
        }
        if let redactionConfig = self.redactionConfig {
            try encodeContainer.encode(redactionConfig, forKey: .redactionConfig)
        }
        if let submitTime = self.submitTime {
            try encodeContainer.encodeTimestamp(submitTime, format: .epochSeconds, forKey: .submitTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let jobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobArn)
        jobArn = jobArnDecoded
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let submitTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .submitTime)
        submitTime = submitTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endTime)
        endTime = endTimeDecoded
        let inputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.InputDataConfig.self, forKey: .inputDataConfig)
        inputDataConfig = inputDataConfigDecoded
        let outputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.PiiOutputDataConfig.self, forKey: .outputDataConfig)
        outputDataConfig = outputDataConfigDecoded
        let redactionConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.RedactionConfig.self, forKey: .redactionConfig)
        redactionConfig = redactionConfigDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let dataAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataAccessRoleArn)
        dataAccessRoleArn = dataAccessRoleArnDecoded
        let modeDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.PiiEntitiesDetectionMode.self, forKey: .mode)
        mode = modeDecoded
    }
}

extension ComprehendClientTypes {
    /// Provides information about a PII entities detection job.
    public struct PiiEntitiesDetectionJobProperties: Swift.Equatable {
        /// The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.
        public var dataAccessRoleArn: Swift.String?
        /// The time that the PII entities detection job completed.
        public var endTime: ClientRuntime.Date?
        /// The input properties for a PII entities detection job.
        public var inputDataConfig: ComprehendClientTypes.InputDataConfig?
        /// The Amazon Resource Name (ARN) of the PII entities detection job. It is a unique, fully qualified identifier for the job. It includes the AWS account, Region, and the job ID. The format of the ARN is as follows: arn::comprehend:::pii-entities-detection-job/ The following is an example job ARN: arn:aws:comprehend:us-west-2:111122223333:pii-entities-detection-job/1234abcd12ab34cd56ef1234567890ab
        public var jobArn: Swift.String?
        /// The identifier assigned to the PII entities detection job.
        public var jobId: Swift.String?
        /// The name that you assigned the PII entities detection job.
        public var jobName: Swift.String?
        /// The current status of the PII entities detection job. If the status is FAILED, the Message field shows the reason for the failure.
        public var jobStatus: ComprehendClientTypes.JobStatus?
        /// The language code of the input documents
        public var languageCode: ComprehendClientTypes.LanguageCode?
        /// A description of the status of a job.
        public var message: Swift.String?
        /// Specifies whether the output provides the locations (offsets) of PII entities or a file in which PII entities are redacted.
        public var mode: ComprehendClientTypes.PiiEntitiesDetectionMode?
        /// The output data configuration that you supplied when you created the PII entities detection job.
        public var outputDataConfig: ComprehendClientTypes.PiiOutputDataConfig?
        /// Provides configuration parameters for PII entity redaction. This parameter is required if you set the Mode parameter to ONLY_REDACTION. In that case, you must provide a RedactionConfig definition that includes the PiiEntityTypes parameter.
        public var redactionConfig: ComprehendClientTypes.RedactionConfig?
        /// The time that the PII entities detection job was submitted for processing.
        public var submitTime: ClientRuntime.Date?

        public init (
            dataAccessRoleArn: Swift.String? = nil,
            endTime: ClientRuntime.Date? = nil,
            inputDataConfig: ComprehendClientTypes.InputDataConfig? = nil,
            jobArn: Swift.String? = nil,
            jobId: Swift.String? = nil,
            jobName: Swift.String? = nil,
            jobStatus: ComprehendClientTypes.JobStatus? = nil,
            languageCode: ComprehendClientTypes.LanguageCode? = nil,
            message: Swift.String? = nil,
            mode: ComprehendClientTypes.PiiEntitiesDetectionMode? = nil,
            outputDataConfig: ComprehendClientTypes.PiiOutputDataConfig? = nil,
            redactionConfig: ComprehendClientTypes.RedactionConfig? = nil,
            submitTime: ClientRuntime.Date? = nil
        )
        {
            self.dataAccessRoleArn = dataAccessRoleArn
            self.endTime = endTime
            self.inputDataConfig = inputDataConfig
            self.jobArn = jobArn
            self.jobId = jobId
            self.jobName = jobName
            self.jobStatus = jobStatus
            self.languageCode = languageCode
            self.message = message
            self.mode = mode
            self.outputDataConfig = outputDataConfig
            self.redactionConfig = redactionConfig
            self.submitTime = submitTime
        }
    }

}

extension ComprehendClientTypes {
    public enum PiiEntitiesDetectionMaskMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case mask
        case replaceWithPiiEntityType
        case sdkUnknown(Swift.String)

        public static var allCases: [PiiEntitiesDetectionMaskMode] {
            return [
                .mask,
                .replaceWithPiiEntityType,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .mask: return "MASK"
            case .replaceWithPiiEntityType: return "REPLACE_WITH_PII_ENTITY_TYPE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PiiEntitiesDetectionMaskMode(rawValue: rawValue) ?? PiiEntitiesDetectionMaskMode.sdkUnknown(rawValue)
        }
    }
}

extension ComprehendClientTypes {
    public enum PiiEntitiesDetectionMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case onlyOffsets
        case onlyRedaction
        case sdkUnknown(Swift.String)

        public static var allCases: [PiiEntitiesDetectionMode] {
            return [
                .onlyOffsets,
                .onlyRedaction,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .onlyOffsets: return "ONLY_OFFSETS"
            case .onlyRedaction: return "ONLY_REDACTION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PiiEntitiesDetectionMode(rawValue: rawValue) ?? PiiEntitiesDetectionMode.sdkUnknown(rawValue)
        }
    }
}

extension ComprehendClientTypes.PiiEntity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case beginOffset = "BeginOffset"
        case endOffset = "EndOffset"
        case score = "Score"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let beginOffset = self.beginOffset {
            try encodeContainer.encode(beginOffset, forKey: .beginOffset)
        }
        if let endOffset = self.endOffset {
            try encodeContainer.encode(endOffset, forKey: .endOffset)
        }
        if let score = self.score {
            try encodeContainer.encode(score, forKey: .score)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scoreDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .score)
        score = scoreDecoded
        let typeDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.PiiEntityType.self, forKey: .type)
        type = typeDecoded
        let beginOffsetDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .beginOffset)
        beginOffset = beginOffsetDecoded
        let endOffsetDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .endOffset)
        endOffset = endOffsetDecoded
    }
}

extension ComprehendClientTypes {
    /// Provides information about a PII entity.
    public struct PiiEntity: Swift.Equatable {
        /// The zero-based offset from the beginning of the source text to the first character in the entity.
        public var beginOffset: Swift.Int?
        /// The zero-based offset from the beginning of the source text to the last character in the entity.
        public var endOffset: Swift.Int?
        /// The level of confidence that Amazon Comprehend has in the accuracy of the detection.
        public var score: Swift.Float?
        /// The entity's type.
        public var type: ComprehendClientTypes.PiiEntityType?

        public init (
            beginOffset: Swift.Int? = nil,
            endOffset: Swift.Int? = nil,
            score: Swift.Float? = nil,
            type: ComprehendClientTypes.PiiEntityType? = nil
        )
        {
            self.beginOffset = beginOffset
            self.endOffset = endOffset
            self.score = score
            self.type = type
        }
    }

}

extension ComprehendClientTypes {
    public enum PiiEntityType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case address
        case age
        case all
        case awsAccessKey
        case awsSecretKey
        case bankAccountNumber
        case bankRouting
        case caHealthNumber
        case caSocialInsuranceNumber
        case creditDebitCvv
        case creditDebitExpiry
        case creditDebitNumber
        case dateTime
        case driverId
        case email
        case internationalBankAccountNumber
        case inAadhaar
        case inNrega
        case inPermanentAccountNumber
        case inVoterNumber
        case ipAddress
        case licensePlate
        case macAddress
        case name
        case passportNumber
        case password
        case phone
        case pin
        case ssn
        case swiftCode
        case ukNationalHealthServiceNumber
        case ukNationalInsuranceNumber
        case ukUniqueTaxpayerReferenceNumber
        case url
        case username
        case usIndividualTaxIdentificationNumber
        case vehicleIdentificationNumber
        case sdkUnknown(Swift.String)

        public static var allCases: [PiiEntityType] {
            return [
                .address,
                .age,
                .all,
                .awsAccessKey,
                .awsSecretKey,
                .bankAccountNumber,
                .bankRouting,
                .caHealthNumber,
                .caSocialInsuranceNumber,
                .creditDebitCvv,
                .creditDebitExpiry,
                .creditDebitNumber,
                .dateTime,
                .driverId,
                .email,
                .internationalBankAccountNumber,
                .inAadhaar,
                .inNrega,
                .inPermanentAccountNumber,
                .inVoterNumber,
                .ipAddress,
                .licensePlate,
                .macAddress,
                .name,
                .passportNumber,
                .password,
                .phone,
                .pin,
                .ssn,
                .swiftCode,
                .ukNationalHealthServiceNumber,
                .ukNationalInsuranceNumber,
                .ukUniqueTaxpayerReferenceNumber,
                .url,
                .username,
                .usIndividualTaxIdentificationNumber,
                .vehicleIdentificationNumber,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .address: return "ADDRESS"
            case .age: return "AGE"
            case .all: return "ALL"
            case .awsAccessKey: return "AWS_ACCESS_KEY"
            case .awsSecretKey: return "AWS_SECRET_KEY"
            case .bankAccountNumber: return "BANK_ACCOUNT_NUMBER"
            case .bankRouting: return "BANK_ROUTING"
            case .caHealthNumber: return "CA_HEALTH_NUMBER"
            case .caSocialInsuranceNumber: return "CA_SOCIAL_INSURANCE_NUMBER"
            case .creditDebitCvv: return "CREDIT_DEBIT_CVV"
            case .creditDebitExpiry: return "CREDIT_DEBIT_EXPIRY"
            case .creditDebitNumber: return "CREDIT_DEBIT_NUMBER"
            case .dateTime: return "DATE_TIME"
            case .driverId: return "DRIVER_ID"
            case .email: return "EMAIL"
            case .internationalBankAccountNumber: return "INTERNATIONAL_BANK_ACCOUNT_NUMBER"
            case .inAadhaar: return "IN_AADHAAR"
            case .inNrega: return "IN_NREGA"
            case .inPermanentAccountNumber: return "IN_PERMANENT_ACCOUNT_NUMBER"
            case .inVoterNumber: return "IN_VOTER_NUMBER"
            case .ipAddress: return "IP_ADDRESS"
            case .licensePlate: return "LICENSE_PLATE"
            case .macAddress: return "MAC_ADDRESS"
            case .name: return "NAME"
            case .passportNumber: return "PASSPORT_NUMBER"
            case .password: return "PASSWORD"
            case .phone: return "PHONE"
            case .pin: return "PIN"
            case .ssn: return "SSN"
            case .swiftCode: return "SWIFT_CODE"
            case .ukNationalHealthServiceNumber: return "UK_NATIONAL_HEALTH_SERVICE_NUMBER"
            case .ukNationalInsuranceNumber: return "UK_NATIONAL_INSURANCE_NUMBER"
            case .ukUniqueTaxpayerReferenceNumber: return "UK_UNIQUE_TAXPAYER_REFERENCE_NUMBER"
            case .url: return "URL"
            case .username: return "USERNAME"
            case .usIndividualTaxIdentificationNumber: return "US_INDIVIDUAL_TAX_IDENTIFICATION_NUMBER"
            case .vehicleIdentificationNumber: return "VEHICLE_IDENTIFICATION_NUMBER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PiiEntityType(rawValue: rawValue) ?? PiiEntityType.sdkUnknown(rawValue)
        }
    }
}

extension ComprehendClientTypes.PiiOutputDataConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kmsKeyId = "KmsKeyId"
        case s3Uri = "S3Uri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let s3Uri = self.s3Uri {
            try encodeContainer.encode(s3Uri, forKey: .s3Uri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Uri)
        s3Uri = s3UriDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
    }
}

extension ComprehendClientTypes {
    /// Provides configuration parameters for the output of PII entity detection jobs.
    public struct PiiOutputDataConfig: Swift.Equatable {
        /// ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt the output results from an analysis job.
        public var kmsKeyId: Swift.String?
        /// When you use the PiiOutputDataConfig object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. For a PII entity detection job, the output file is plain text, not a compressed archive. The output file name is the same as the input file, with .out appended at the end.
        /// This member is required.
        public var s3Uri: Swift.String?

        public init (
            kmsKeyId: Swift.String? = nil,
            s3Uri: Swift.String? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
            self.s3Uri = s3Uri
        }
    }

}

extension ComprehendClientTypes.Point: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case x = "X"
        case y = "Y"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let x = self.x {
            try encodeContainer.encode(x, forKey: .x)
        }
        if let y = self.y {
            try encodeContainer.encode(y, forKey: .y)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let xDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .x)
        x = xDecoded
        let yDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .y)
        y = yDecoded
    }
}

extension ComprehendClientTypes {
    /// The X and Y coordinates of a point on a document page. For additional information, see [Point](https://docs.aws.amazon.com/textract/latest/dg/API_Point.html) in the Amazon Textract API reference.
    public struct Point: Swift.Equatable {
        /// The value of the X coordinate for a point on a polygon
        public var x: Swift.Float?
        /// The value of the Y coordinate for a point on a polygon
        public var y: Swift.Float?

        public init (
            x: Swift.Float? = nil,
            y: Swift.Float? = nil
        )
        {
            self.x = x
            self.y = y
        }
    }

}

extension PutResourcePolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyRevisionId = "PolicyRevisionId"
        case resourceArn = "ResourceArn"
        case resourcePolicy = "ResourcePolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policyRevisionId = self.policyRevisionId {
            try encodeContainer.encode(policyRevisionId, forKey: .policyRevisionId)
        }
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let resourcePolicy = self.resourcePolicy {
            try encodeContainer.encode(resourcePolicy, forKey: .resourcePolicy)
        }
    }
}

extension PutResourcePolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutResourcePolicyInput: Swift.Equatable {
    /// The revision ID that Amazon Comprehend assigned to the policy that you are updating. If you are creating a new policy that has no prior version, don't use this parameter. Amazon Comprehend creates the revision ID for you.
    public var policyRevisionId: Swift.String?
    /// The Amazon Resource Name (ARN) of the custom model to attach the policy to.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The JSON resource-based policy to attach to your custom model. Provide your JSON as a UTF-8 encoded string without line breaks. To provide valid JSON for your policy, enclose the attribute names and values in double quotes. If the JSON body is also enclosed in double quotes, then you must escape the double quotes that are inside the policy: "{\"attribute\": \"value\", \"attribute\": [\"value\"]}" To avoid escaping quotes, you can use single quotes to enclose the policy and double quotes to enclose the JSON names and values: '{"attribute": "value", "attribute": ["value"]}'
    /// This member is required.
    public var resourcePolicy: Swift.String?

    public init (
        policyRevisionId: Swift.String? = nil,
        resourceArn: Swift.String? = nil,
        resourcePolicy: Swift.String? = nil
    )
    {
        self.policyRevisionId = policyRevisionId
        self.resourceArn = resourceArn
        self.resourcePolicy = resourcePolicy
    }
}

struct PutResourcePolicyInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let resourcePolicy: Swift.String?
    let policyRevisionId: Swift.String?
}

extension PutResourcePolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyRevisionId = "PolicyRevisionId"
        case resourceArn = "ResourceArn"
        case resourcePolicy = "ResourcePolicy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let resourcePolicyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourcePolicy)
        resourcePolicy = resourcePolicyDecoded
        let policyRevisionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyRevisionId)
        policyRevisionId = policyRevisionIdDecoded
    }
}

extension PutResourcePolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutResourcePolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutResourcePolicyOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutResourcePolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PutResourcePolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.policyRevisionId = output.policyRevisionId
        } else {
            self.policyRevisionId = nil
        }
    }
}

public struct PutResourcePolicyOutputResponse: Swift.Equatable {
    /// The revision ID of the policy. Each time you modify a policy, Amazon Comprehend assigns a new revision ID, and it deletes the prior version of the policy.
    public var policyRevisionId: Swift.String?

    public init (
        policyRevisionId: Swift.String? = nil
    )
    {
        self.policyRevisionId = policyRevisionId
    }
}

struct PutResourcePolicyOutputResponseBody: Swift.Equatable {
    let policyRevisionId: Swift.String?
}

extension PutResourcePolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyRevisionId = "PolicyRevisionId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyRevisionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyRevisionId)
        policyRevisionId = policyRevisionIdDecoded
    }
}

extension ComprehendClientTypes.RedactionConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maskCharacter = "MaskCharacter"
        case maskMode = "MaskMode"
        case piiEntityTypes = "PiiEntityTypes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maskCharacter = self.maskCharacter {
            try encodeContainer.encode(maskCharacter, forKey: .maskCharacter)
        }
        if let maskMode = self.maskMode {
            try encodeContainer.encode(maskMode.rawValue, forKey: .maskMode)
        }
        if let piiEntityTypes = piiEntityTypes {
            var piiEntityTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .piiEntityTypes)
            for piientitytype0 in piiEntityTypes {
                try piiEntityTypesContainer.encode(piientitytype0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let piiEntityTypesContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.PiiEntityType?].self, forKey: .piiEntityTypes)
        var piiEntityTypesDecoded0:[ComprehendClientTypes.PiiEntityType]? = nil
        if let piiEntityTypesContainer = piiEntityTypesContainer {
            piiEntityTypesDecoded0 = [ComprehendClientTypes.PiiEntityType]()
            for enum0 in piiEntityTypesContainer {
                if let enum0 = enum0 {
                    piiEntityTypesDecoded0?.append(enum0)
                }
            }
        }
        piiEntityTypes = piiEntityTypesDecoded0
        let maskModeDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.PiiEntitiesDetectionMaskMode.self, forKey: .maskMode)
        maskMode = maskModeDecoded
        let maskCharacterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maskCharacter)
        maskCharacter = maskCharacterDecoded
    }
}

extension ComprehendClientTypes {
    /// Provides configuration parameters for PII entity redaction.
    public struct RedactionConfig: Swift.Equatable {
        /// A character that replaces each character in the redacted PII entity.
        public var maskCharacter: Swift.String?
        /// Specifies whether the PII entity is redacted with the mask character or the entity type.
        public var maskMode: ComprehendClientTypes.PiiEntitiesDetectionMaskMode?
        /// An array of the types of PII entities that Amazon Comprehend detects in the input text for your request.
        public var piiEntityTypes: [ComprehendClientTypes.PiiEntityType]?

        public init (
            maskCharacter: Swift.String? = nil,
            maskMode: ComprehendClientTypes.PiiEntitiesDetectionMaskMode? = nil,
            piiEntityTypes: [ComprehendClientTypes.PiiEntityType]? = nil
        )
        {
            self.maskCharacter = maskCharacter
            self.maskMode = maskMode
            self.piiEntityTypes = piiEntityTypes
        }
    }

}

extension ComprehendClientTypes {
    public enum RelationshipType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case child
        case sdkUnknown(Swift.String)

        public static var allCases: [RelationshipType] {
            return [
                .child,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .child: return "CHILD"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RelationshipType(rawValue: rawValue) ?? RelationshipType.sdkUnknown(rawValue)
        }
    }
}

extension ComprehendClientTypes.RelationshipsListItem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ids = "Ids"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ids = ids {
            var idsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ids)
            for string0 in ids {
                try idsContainer.encode(string0)
            }
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .ids)
        var idsDecoded0:[Swift.String]? = nil
        if let idsContainer = idsContainer {
            idsDecoded0 = [Swift.String]()
            for string0 in idsContainer {
                if let string0 = string0 {
                    idsDecoded0?.append(string0)
                }
            }
        }
        ids = idsDecoded0
        let typeDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.RelationshipType.self, forKey: .type)
        type = typeDecoded
    }
}

extension ComprehendClientTypes {
    /// List of child blocks for the current block.
    public struct RelationshipsListItem: Swift.Equatable {
        /// Identifers of the child blocks.
        public var ids: [Swift.String]?
        /// Only supported relationship is a child relationship.
        public var type: ComprehendClientTypes.RelationshipType?

        public init (
            ids: [Swift.String]? = nil,
            type: ComprehendClientTypes.RelationshipType? = nil
        )
        {
            self.ids = ids
            self.type = type
        }
    }

}

extension ResourceInUseException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ResourceInUseExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified resource name is already in use. Use a different name and try your request again.
public struct ResourceInUseException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceInUseExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceInUseExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceLimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ResourceLimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The maximum number of resources per account has been exceeded. Review the resources, and then try your request again.
public struct ResourceLimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceLimitExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceLimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified resource ARN was not found. Check the ARN and try your request again.
public struct ResourceNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceUnavailableException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ResourceUnavailableExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified resource is not available. Check the resource and try your request again.
public struct ResourceUnavailableException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceUnavailableExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceUnavailableExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ComprehendClientTypes.SentimentDetectionJobFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobName = "JobName"
        case jobStatus = "JobStatus"
        case submitTimeAfter = "SubmitTimeAfter"
        case submitTimeBefore = "SubmitTimeBefore"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobName = self.jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let jobStatus = self.jobStatus {
            try encodeContainer.encode(jobStatus.rawValue, forKey: .jobStatus)
        }
        if let submitTimeAfter = self.submitTimeAfter {
            try encodeContainer.encodeTimestamp(submitTimeAfter, format: .epochSeconds, forKey: .submitTimeAfter)
        }
        if let submitTimeBefore = self.submitTimeBefore {
            try encodeContainer.encodeTimestamp(submitTimeBefore, format: .epochSeconds, forKey: .submitTimeBefore)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let submitTimeBeforeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .submitTimeBefore)
        submitTimeBefore = submitTimeBeforeDecoded
        let submitTimeAfterDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .submitTimeAfter)
        submitTimeAfter = submitTimeAfterDecoded
    }
}

extension ComprehendClientTypes {
    /// Provides information for filtering a list of dominant language detection jobs. For more information, see the operation.
    public struct SentimentDetectionJobFilter: Swift.Equatable {
        /// Filters on the name of the job.
        public var jobName: Swift.String?
        /// Filters the list of jobs based on job status. Returns only jobs with the specified status.
        public var jobStatus: ComprehendClientTypes.JobStatus?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest.
        public var submitTimeAfter: ClientRuntime.Date?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest.
        public var submitTimeBefore: ClientRuntime.Date?

        public init (
            jobName: Swift.String? = nil,
            jobStatus: ComprehendClientTypes.JobStatus? = nil,
            submitTimeAfter: ClientRuntime.Date? = nil,
            submitTimeBefore: ClientRuntime.Date? = nil
        )
        {
            self.jobName = jobName
            self.jobStatus = jobStatus
            self.submitTimeAfter = submitTimeAfter
            self.submitTimeBefore = submitTimeBefore
        }
    }

}

extension ComprehendClientTypes.SentimentDetectionJobProperties: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataAccessRoleArn = "DataAccessRoleArn"
        case endTime = "EndTime"
        case inputDataConfig = "InputDataConfig"
        case jobArn = "JobArn"
        case jobId = "JobId"
        case jobName = "JobName"
        case jobStatus = "JobStatus"
        case languageCode = "LanguageCode"
        case message = "Message"
        case outputDataConfig = "OutputDataConfig"
        case submitTime = "SubmitTime"
        case volumeKmsKeyId = "VolumeKmsKeyId"
        case vpcConfig = "VpcConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataAccessRoleArn = self.dataAccessRoleArn {
            try encodeContainer.encode(dataAccessRoleArn, forKey: .dataAccessRoleArn)
        }
        if let endTime = self.endTime {
            try encodeContainer.encodeTimestamp(endTime, format: .epochSeconds, forKey: .endTime)
        }
        if let inputDataConfig = self.inputDataConfig {
            try encodeContainer.encode(inputDataConfig, forKey: .inputDataConfig)
        }
        if let jobArn = self.jobArn {
            try encodeContainer.encode(jobArn, forKey: .jobArn)
        }
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let jobName = self.jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let jobStatus = self.jobStatus {
            try encodeContainer.encode(jobStatus.rawValue, forKey: .jobStatus)
        }
        if let languageCode = self.languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let outputDataConfig = self.outputDataConfig {
            try encodeContainer.encode(outputDataConfig, forKey: .outputDataConfig)
        }
        if let submitTime = self.submitTime {
            try encodeContainer.encodeTimestamp(submitTime, format: .epochSeconds, forKey: .submitTime)
        }
        if let volumeKmsKeyId = self.volumeKmsKeyId {
            try encodeContainer.encode(volumeKmsKeyId, forKey: .volumeKmsKeyId)
        }
        if let vpcConfig = self.vpcConfig {
            try encodeContainer.encode(vpcConfig, forKey: .vpcConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let jobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobArn)
        jobArn = jobArnDecoded
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let submitTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .submitTime)
        submitTime = submitTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endTime)
        endTime = endTimeDecoded
        let inputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.InputDataConfig.self, forKey: .inputDataConfig)
        inputDataConfig = inputDataConfigDecoded
        let outputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.OutputDataConfig.self, forKey: .outputDataConfig)
        outputDataConfig = outputDataConfigDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let dataAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataAccessRoleArn)
        dataAccessRoleArn = dataAccessRoleArnDecoded
        let volumeKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeKmsKeyId)
        volumeKmsKeyId = volumeKmsKeyIdDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
    }
}

extension ComprehendClientTypes {
    /// Provides information about a sentiment detection job.
    public struct SentimentDetectionJobProperties: Swift.Equatable {
        /// The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.
        public var dataAccessRoleArn: Swift.String?
        /// The time that the sentiment detection job ended.
        public var endTime: ClientRuntime.Date?
        /// The input data configuration that you supplied when you created the sentiment detection job.
        public var inputDataConfig: ComprehendClientTypes.InputDataConfig?
        /// The Amazon Resource Name (ARN) of the sentiment detection job. It is a unique, fully qualified identifier for the job. It includes the AWS account, Region, and the job ID. The format of the ARN is as follows: arn::comprehend:::sentiment-detection-job/ The following is an example job ARN: arn:aws:comprehend:us-west-2:111122223333:sentiment-detection-job/1234abcd12ab34cd56ef1234567890ab
        public var jobArn: Swift.String?
        /// The identifier assigned to the sentiment detection job.
        public var jobId: Swift.String?
        /// The name that you assigned to the sentiment detection job
        public var jobName: Swift.String?
        /// The current status of the sentiment detection job. If the status is FAILED, the Messages field shows the reason for the failure.
        public var jobStatus: ComprehendClientTypes.JobStatus?
        /// The language code of the input documents.
        public var languageCode: ComprehendClientTypes.LanguageCode?
        /// A description of the status of a job.
        public var message: Swift.String?
        /// The output data configuration that you supplied when you created the sentiment detection job.
        public var outputDataConfig: ComprehendClientTypes.OutputDataConfig?
        /// The time that the sentiment detection job was submitted for processing.
        public var submitTime: ClientRuntime.Date?
        /// ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:
        ///
        /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
        public var volumeKmsKeyId: Swift.String?
        /// Configuration parameters for a private Virtual Private Cloud (VPC) containing the resources you are using for your sentiment detection job. For more information, see [Amazon VPC](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html).
        public var vpcConfig: ComprehendClientTypes.VpcConfig?

        public init (
            dataAccessRoleArn: Swift.String? = nil,
            endTime: ClientRuntime.Date? = nil,
            inputDataConfig: ComprehendClientTypes.InputDataConfig? = nil,
            jobArn: Swift.String? = nil,
            jobId: Swift.String? = nil,
            jobName: Swift.String? = nil,
            jobStatus: ComprehendClientTypes.JobStatus? = nil,
            languageCode: ComprehendClientTypes.LanguageCode? = nil,
            message: Swift.String? = nil,
            outputDataConfig: ComprehendClientTypes.OutputDataConfig? = nil,
            submitTime: ClientRuntime.Date? = nil,
            volumeKmsKeyId: Swift.String? = nil,
            vpcConfig: ComprehendClientTypes.VpcConfig? = nil
        )
        {
            self.dataAccessRoleArn = dataAccessRoleArn
            self.endTime = endTime
            self.inputDataConfig = inputDataConfig
            self.jobArn = jobArn
            self.jobId = jobId
            self.jobName = jobName
            self.jobStatus = jobStatus
            self.languageCode = languageCode
            self.message = message
            self.outputDataConfig = outputDataConfig
            self.submitTime = submitTime
            self.volumeKmsKeyId = volumeKmsKeyId
            self.vpcConfig = vpcConfig
        }
    }

}

extension ComprehendClientTypes.SentimentScore: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mixed = "Mixed"
        case negative = "Negative"
        case neutral = "Neutral"
        case positive = "Positive"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let mixed = self.mixed {
            try encodeContainer.encode(mixed, forKey: .mixed)
        }
        if let negative = self.negative {
            try encodeContainer.encode(negative, forKey: .negative)
        }
        if let neutral = self.neutral {
            try encodeContainer.encode(neutral, forKey: .neutral)
        }
        if let positive = self.positive {
            try encodeContainer.encode(positive, forKey: .positive)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let positiveDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .positive)
        positive = positiveDecoded
        let negativeDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .negative)
        negative = negativeDecoded
        let neutralDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .neutral)
        neutral = neutralDecoded
        let mixedDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .mixed)
        mixed = mixedDecoded
    }
}

extension ComprehendClientTypes {
    /// Describes the level of confidence that Amazon Comprehend has in the accuracy of its detection of sentiments.
    public struct SentimentScore: Swift.Equatable {
        /// The level of confidence that Amazon Comprehend has in the accuracy of its detection of the MIXED sentiment.
        public var mixed: Swift.Float?
        /// The level of confidence that Amazon Comprehend has in the accuracy of its detection of the NEGATIVE sentiment.
        public var negative: Swift.Float?
        /// The level of confidence that Amazon Comprehend has in the accuracy of its detection of the NEUTRAL sentiment.
        public var neutral: Swift.Float?
        /// The level of confidence that Amazon Comprehend has in the accuracy of its detection of the POSITIVE sentiment.
        public var positive: Swift.Float?

        public init (
            mixed: Swift.Float? = nil,
            negative: Swift.Float? = nil,
            neutral: Swift.Float? = nil,
            positive: Swift.Float? = nil
        )
        {
            self.mixed = mixed
            self.negative = negative
            self.neutral = neutral
            self.positive = positive
        }
    }

}

extension ComprehendClientTypes {
    public enum SentimentType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case mixed
        case negative
        case neutral
        case positive
        case sdkUnknown(Swift.String)

        public static var allCases: [SentimentType] {
            return [
                .mixed,
                .negative,
                .neutral,
                .positive,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .mixed: return "MIXED"
            case .negative: return "NEGATIVE"
            case .neutral: return "NEUTRAL"
            case .positive: return "POSITIVE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SentimentType(rawValue: rawValue) ?? SentimentType.sdkUnknown(rawValue)
        }
    }
}

extension ComprehendClientTypes {
    public enum Split: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case test
        case train
        case sdkUnknown(Swift.String)

        public static var allCases: [Split] {
            return [
                .test,
                .train,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .test: return "TEST"
            case .train: return "TRAIN"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Split(rawValue: rawValue) ?? Split.sdkUnknown(rawValue)
        }
    }
}

extension StartDocumentClassificationJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case dataAccessRoleArn = "DataAccessRoleArn"
        case documentClassifierArn = "DocumentClassifierArn"
        case inputDataConfig = "InputDataConfig"
        case jobName = "JobName"
        case outputDataConfig = "OutputDataConfig"
        case tags = "Tags"
        case volumeKmsKeyId = "VolumeKmsKeyId"
        case vpcConfig = "VpcConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let dataAccessRoleArn = self.dataAccessRoleArn {
            try encodeContainer.encode(dataAccessRoleArn, forKey: .dataAccessRoleArn)
        }
        if let documentClassifierArn = self.documentClassifierArn {
            try encodeContainer.encode(documentClassifierArn, forKey: .documentClassifierArn)
        }
        if let inputDataConfig = self.inputDataConfig {
            try encodeContainer.encode(inputDataConfig, forKey: .inputDataConfig)
        }
        if let jobName = self.jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let outputDataConfig = self.outputDataConfig {
            try encodeContainer.encode(outputDataConfig, forKey: .outputDataConfig)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let volumeKmsKeyId = self.volumeKmsKeyId {
            try encodeContainer.encode(volumeKmsKeyId, forKey: .volumeKmsKeyId)
        }
        if let vpcConfig = self.vpcConfig {
            try encodeContainer.encode(vpcConfig, forKey: .vpcConfig)
        }
    }
}

extension StartDocumentClassificationJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartDocumentClassificationJobInput: Swift.Equatable {
    /// A unique identifier for the request. If you do not set the client request token, Amazon Comprehend generates one.
    public var clientRequestToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data.
    /// This member is required.
    public var dataAccessRoleArn: Swift.String?
    /// The Amazon Resource Name (ARN) of the document classifier to use to process the job.
    /// This member is required.
    public var documentClassifierArn: Swift.String?
    /// Specifies the format and location of the input data for the job.
    /// This member is required.
    public var inputDataConfig: ComprehendClientTypes.InputDataConfig?
    /// The identifier of the job.
    public var jobName: Swift.String?
    /// Specifies where to send the output files.
    /// This member is required.
    public var outputDataConfig: ComprehendClientTypes.OutputDataConfig?
    /// Tags to be associated with the document classification job. A tag is a key-value pair that adds metadata to a resource used by Amazon Comprehend. For example, a tag with "Sales" as the key might be added to a resource to indicate its use by the sales department.
    public var tags: [ComprehendClientTypes.Tag]?
    /// ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:
    ///
    /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
    ///
    /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
    public var volumeKmsKeyId: Swift.String?
    /// Configuration parameters for an optional private Virtual Private Cloud (VPC) containing the resources you are using for your document classification job. For more information, see [Amazon VPC](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html).
    public var vpcConfig: ComprehendClientTypes.VpcConfig?

    public init (
        clientRequestToken: Swift.String? = nil,
        dataAccessRoleArn: Swift.String? = nil,
        documentClassifierArn: Swift.String? = nil,
        inputDataConfig: ComprehendClientTypes.InputDataConfig? = nil,
        jobName: Swift.String? = nil,
        outputDataConfig: ComprehendClientTypes.OutputDataConfig? = nil,
        tags: [ComprehendClientTypes.Tag]? = nil,
        volumeKmsKeyId: Swift.String? = nil,
        vpcConfig: ComprehendClientTypes.VpcConfig? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.dataAccessRoleArn = dataAccessRoleArn
        self.documentClassifierArn = documentClassifierArn
        self.inputDataConfig = inputDataConfig
        self.jobName = jobName
        self.outputDataConfig = outputDataConfig
        self.tags = tags
        self.volumeKmsKeyId = volumeKmsKeyId
        self.vpcConfig = vpcConfig
    }
}

struct StartDocumentClassificationJobInputBody: Swift.Equatable {
    let jobName: Swift.String?
    let documentClassifierArn: Swift.String?
    let inputDataConfig: ComprehendClientTypes.InputDataConfig?
    let outputDataConfig: ComprehendClientTypes.OutputDataConfig?
    let dataAccessRoleArn: Swift.String?
    let clientRequestToken: Swift.String?
    let volumeKmsKeyId: Swift.String?
    let vpcConfig: ComprehendClientTypes.VpcConfig?
    let tags: [ComprehendClientTypes.Tag]?
}

extension StartDocumentClassificationJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case dataAccessRoleArn = "DataAccessRoleArn"
        case documentClassifierArn = "DocumentClassifierArn"
        case inputDataConfig = "InputDataConfig"
        case jobName = "JobName"
        case outputDataConfig = "OutputDataConfig"
        case tags = "Tags"
        case volumeKmsKeyId = "VolumeKmsKeyId"
        case vpcConfig = "VpcConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let documentClassifierArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentClassifierArn)
        documentClassifierArn = documentClassifierArnDecoded
        let inputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.InputDataConfig.self, forKey: .inputDataConfig)
        inputDataConfig = inputDataConfigDecoded
        let outputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.OutputDataConfig.self, forKey: .outputDataConfig)
        outputDataConfig = outputDataConfigDecoded
        let dataAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataAccessRoleArn)
        dataAccessRoleArn = dataAccessRoleArnDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let volumeKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeKmsKeyId)
        volumeKmsKeyId = volumeKmsKeyIdDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[ComprehendClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [ComprehendClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension StartDocumentClassificationJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartDocumentClassificationJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KmsKeyValidationException" : self = .kmsKeyValidationException(try KmsKeyValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceUnavailableException" : self = .resourceUnavailableException(try ResourceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartDocumentClassificationJobOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case kmsKeyValidationException(KmsKeyValidationException)
    case resourceNotFoundException(ResourceNotFoundException)
    case resourceUnavailableException(ResourceUnavailableException)
    case tooManyRequestsException(TooManyRequestsException)
    case tooManyTagsException(TooManyTagsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartDocumentClassificationJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartDocumentClassificationJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobArn = output.jobArn
            self.jobId = output.jobId
            self.jobStatus = output.jobStatus
        } else {
            self.jobArn = nil
            self.jobId = nil
            self.jobStatus = nil
        }
    }
}

public struct StartDocumentClassificationJobOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the document classification job. It is a unique, fully qualified identifier for the job. It includes the AWS account, Region, and the job ID. The format of the ARN is as follows: arn::comprehend:::document-classification-job/ The following is an example job ARN: arn:aws:comprehend:us-west-2:111122223333:document-classification-job/1234abcd12ab34cd56ef1234567890ab
    public var jobArn: Swift.String?
    /// The identifier generated for the job. To get the status of the job, use this identifier with the operation.
    public var jobId: Swift.String?
    /// The status of the job:
    ///
    /// * SUBMITTED - The job has been received and queued for processing.
    ///
    /// * IN_PROGRESS - Amazon Comprehend is processing the job.
    ///
    /// * COMPLETED - The job was successfully completed and the output is available.
    ///
    /// * FAILED - The job did not complete. For details, use the operation.
    ///
    /// * STOP_REQUESTED - Amazon Comprehend has received a stop request for the job and is processing the request.
    ///
    /// * STOPPED - The job was successfully stopped without completing.
    public var jobStatus: ComprehendClientTypes.JobStatus?

    public init (
        jobArn: Swift.String? = nil,
        jobId: Swift.String? = nil,
        jobStatus: ComprehendClientTypes.JobStatus? = nil
    )
    {
        self.jobArn = jobArn
        self.jobId = jobId
        self.jobStatus = jobStatus
    }
}

struct StartDocumentClassificationJobOutputResponseBody: Swift.Equatable {
    let jobId: Swift.String?
    let jobArn: Swift.String?
    let jobStatus: ComprehendClientTypes.JobStatus?
}

extension StartDocumentClassificationJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobArn = "JobArn"
        case jobId = "JobId"
        case jobStatus = "JobStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let jobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobArn)
        jobArn = jobArnDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
    }
}

extension StartDominantLanguageDetectionJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case dataAccessRoleArn = "DataAccessRoleArn"
        case inputDataConfig = "InputDataConfig"
        case jobName = "JobName"
        case outputDataConfig = "OutputDataConfig"
        case tags = "Tags"
        case volumeKmsKeyId = "VolumeKmsKeyId"
        case vpcConfig = "VpcConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let dataAccessRoleArn = self.dataAccessRoleArn {
            try encodeContainer.encode(dataAccessRoleArn, forKey: .dataAccessRoleArn)
        }
        if let inputDataConfig = self.inputDataConfig {
            try encodeContainer.encode(inputDataConfig, forKey: .inputDataConfig)
        }
        if let jobName = self.jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let outputDataConfig = self.outputDataConfig {
            try encodeContainer.encode(outputDataConfig, forKey: .outputDataConfig)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let volumeKmsKeyId = self.volumeKmsKeyId {
            try encodeContainer.encode(volumeKmsKeyId, forKey: .volumeKmsKeyId)
        }
        if let vpcConfig = self.vpcConfig {
            try encodeContainer.encode(vpcConfig, forKey: .vpcConfig)
        }
    }
}

extension StartDominantLanguageDetectionJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartDominantLanguageDetectionJobInput: Swift.Equatable {
    /// A unique identifier for the request. If you do not set the client request token, Amazon Comprehend generates one.
    public var clientRequestToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data. For more information, see [https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions](https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions).
    /// This member is required.
    public var dataAccessRoleArn: Swift.String?
    /// Specifies the format and location of the input data for the job.
    /// This member is required.
    public var inputDataConfig: ComprehendClientTypes.InputDataConfig?
    /// An identifier for the job.
    public var jobName: Swift.String?
    /// Specifies where to send the output files.
    /// This member is required.
    public var outputDataConfig: ComprehendClientTypes.OutputDataConfig?
    /// Tags to be associated with the dominant language detection job. A tag is a key-value pair that adds metadata to a resource used by Amazon Comprehend. For example, a tag with "Sales" as the key might be added to a resource to indicate its use by the sales department.
    public var tags: [ComprehendClientTypes.Tag]?
    /// ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:
    ///
    /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
    ///
    /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
    public var volumeKmsKeyId: Swift.String?
    /// Configuration parameters for an optional private Virtual Private Cloud (VPC) containing the resources you are using for your dominant language detection job. For more information, see [Amazon VPC](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html).
    public var vpcConfig: ComprehendClientTypes.VpcConfig?

    public init (
        clientRequestToken: Swift.String? = nil,
        dataAccessRoleArn: Swift.String? = nil,
        inputDataConfig: ComprehendClientTypes.InputDataConfig? = nil,
        jobName: Swift.String? = nil,
        outputDataConfig: ComprehendClientTypes.OutputDataConfig? = nil,
        tags: [ComprehendClientTypes.Tag]? = nil,
        volumeKmsKeyId: Swift.String? = nil,
        vpcConfig: ComprehendClientTypes.VpcConfig? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.dataAccessRoleArn = dataAccessRoleArn
        self.inputDataConfig = inputDataConfig
        self.jobName = jobName
        self.outputDataConfig = outputDataConfig
        self.tags = tags
        self.volumeKmsKeyId = volumeKmsKeyId
        self.vpcConfig = vpcConfig
    }
}

struct StartDominantLanguageDetectionJobInputBody: Swift.Equatable {
    let inputDataConfig: ComprehendClientTypes.InputDataConfig?
    let outputDataConfig: ComprehendClientTypes.OutputDataConfig?
    let dataAccessRoleArn: Swift.String?
    let jobName: Swift.String?
    let clientRequestToken: Swift.String?
    let volumeKmsKeyId: Swift.String?
    let vpcConfig: ComprehendClientTypes.VpcConfig?
    let tags: [ComprehendClientTypes.Tag]?
}

extension StartDominantLanguageDetectionJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case dataAccessRoleArn = "DataAccessRoleArn"
        case inputDataConfig = "InputDataConfig"
        case jobName = "JobName"
        case outputDataConfig = "OutputDataConfig"
        case tags = "Tags"
        case volumeKmsKeyId = "VolumeKmsKeyId"
        case vpcConfig = "VpcConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.InputDataConfig.self, forKey: .inputDataConfig)
        inputDataConfig = inputDataConfigDecoded
        let outputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.OutputDataConfig.self, forKey: .outputDataConfig)
        outputDataConfig = outputDataConfigDecoded
        let dataAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataAccessRoleArn)
        dataAccessRoleArn = dataAccessRoleArnDecoded
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let volumeKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeKmsKeyId)
        volumeKmsKeyId = volumeKmsKeyIdDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[ComprehendClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [ComprehendClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension StartDominantLanguageDetectionJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartDominantLanguageDetectionJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KmsKeyValidationException" : self = .kmsKeyValidationException(try KmsKeyValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartDominantLanguageDetectionJobOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case kmsKeyValidationException(KmsKeyValidationException)
    case tooManyRequestsException(TooManyRequestsException)
    case tooManyTagsException(TooManyTagsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartDominantLanguageDetectionJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartDominantLanguageDetectionJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobArn = output.jobArn
            self.jobId = output.jobId
            self.jobStatus = output.jobStatus
        } else {
            self.jobArn = nil
            self.jobId = nil
            self.jobStatus = nil
        }
    }
}

public struct StartDominantLanguageDetectionJobOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the dominant language detection job. It is a unique, fully qualified identifier for the job. It includes the AWS account, Region, and the job ID. The format of the ARN is as follows: arn::comprehend:::dominant-language-detection-job/ The following is an example job ARN: arn:aws:comprehend:us-west-2:111122223333:dominant-language-detection-job/1234abcd12ab34cd56ef1234567890ab
    public var jobArn: Swift.String?
    /// The identifier generated for the job. To get the status of a job, use this identifier with the operation.
    public var jobId: Swift.String?
    /// The status of the job.
    ///
    /// * SUBMITTED - The job has been received and is queued for processing.
    ///
    /// * IN_PROGRESS - Amazon Comprehend is processing the job.
    ///
    /// * COMPLETED - The job was successfully completed and the output is available.
    ///
    /// * FAILED - The job did not complete. To get details, use the operation.
    public var jobStatus: ComprehendClientTypes.JobStatus?

    public init (
        jobArn: Swift.String? = nil,
        jobId: Swift.String? = nil,
        jobStatus: ComprehendClientTypes.JobStatus? = nil
    )
    {
        self.jobArn = jobArn
        self.jobId = jobId
        self.jobStatus = jobStatus
    }
}

struct StartDominantLanguageDetectionJobOutputResponseBody: Swift.Equatable {
    let jobId: Swift.String?
    let jobArn: Swift.String?
    let jobStatus: ComprehendClientTypes.JobStatus?
}

extension StartDominantLanguageDetectionJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobArn = "JobArn"
        case jobId = "JobId"
        case jobStatus = "JobStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let jobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobArn)
        jobArn = jobArnDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
    }
}

extension StartEntitiesDetectionJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case dataAccessRoleArn = "DataAccessRoleArn"
        case entityRecognizerArn = "EntityRecognizerArn"
        case inputDataConfig = "InputDataConfig"
        case jobName = "JobName"
        case languageCode = "LanguageCode"
        case outputDataConfig = "OutputDataConfig"
        case tags = "Tags"
        case volumeKmsKeyId = "VolumeKmsKeyId"
        case vpcConfig = "VpcConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let dataAccessRoleArn = self.dataAccessRoleArn {
            try encodeContainer.encode(dataAccessRoleArn, forKey: .dataAccessRoleArn)
        }
        if let entityRecognizerArn = self.entityRecognizerArn {
            try encodeContainer.encode(entityRecognizerArn, forKey: .entityRecognizerArn)
        }
        if let inputDataConfig = self.inputDataConfig {
            try encodeContainer.encode(inputDataConfig, forKey: .inputDataConfig)
        }
        if let jobName = self.jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let languageCode = self.languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let outputDataConfig = self.outputDataConfig {
            try encodeContainer.encode(outputDataConfig, forKey: .outputDataConfig)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let volumeKmsKeyId = self.volumeKmsKeyId {
            try encodeContainer.encode(volumeKmsKeyId, forKey: .volumeKmsKeyId)
        }
        if let vpcConfig = self.vpcConfig {
            try encodeContainer.encode(vpcConfig, forKey: .vpcConfig)
        }
    }
}

extension StartEntitiesDetectionJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartEntitiesDetectionJobInput: Swift.Equatable {
    /// A unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one.
    public var clientRequestToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data. For more information, see [https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions](https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions).
    /// This member is required.
    public var dataAccessRoleArn: Swift.String?
    /// The Amazon Resource Name (ARN) that identifies the specific entity recognizer to be used by the StartEntitiesDetectionJob. This ARN is optional and is only used for a custom entity recognition job.
    public var entityRecognizerArn: Swift.String?
    /// Specifies the format and location of the input data for the job.
    /// This member is required.
    public var inputDataConfig: ComprehendClientTypes.InputDataConfig?
    /// The identifier of the job.
    public var jobName: Swift.String?
    /// The language of the input documents. All documents must be in the same language. You can specify any of the languages supported by Amazon Comprehend. If custom entities recognition is used, this parameter is ignored and the language used for training the model is used instead.
    /// This member is required.
    public var languageCode: ComprehendClientTypes.LanguageCode?
    /// Specifies where to send the output files.
    /// This member is required.
    public var outputDataConfig: ComprehendClientTypes.OutputDataConfig?
    /// Tags to be associated with the entities detection job. A tag is a key-value pair that adds metadata to a resource used by Amazon Comprehend. For example, a tag with "Sales" as the key might be added to a resource to indicate its use by the sales department.
    public var tags: [ComprehendClientTypes.Tag]?
    /// ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:
    ///
    /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
    ///
    /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
    public var volumeKmsKeyId: Swift.String?
    /// Configuration parameters for an optional private Virtual Private Cloud (VPC) containing the resources you are using for your entity detection job. For more information, see [Amazon VPC](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html).
    public var vpcConfig: ComprehendClientTypes.VpcConfig?

    public init (
        clientRequestToken: Swift.String? = nil,
        dataAccessRoleArn: Swift.String? = nil,
        entityRecognizerArn: Swift.String? = nil,
        inputDataConfig: ComprehendClientTypes.InputDataConfig? = nil,
        jobName: Swift.String? = nil,
        languageCode: ComprehendClientTypes.LanguageCode? = nil,
        outputDataConfig: ComprehendClientTypes.OutputDataConfig? = nil,
        tags: [ComprehendClientTypes.Tag]? = nil,
        volumeKmsKeyId: Swift.String? = nil,
        vpcConfig: ComprehendClientTypes.VpcConfig? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.dataAccessRoleArn = dataAccessRoleArn
        self.entityRecognizerArn = entityRecognizerArn
        self.inputDataConfig = inputDataConfig
        self.jobName = jobName
        self.languageCode = languageCode
        self.outputDataConfig = outputDataConfig
        self.tags = tags
        self.volumeKmsKeyId = volumeKmsKeyId
        self.vpcConfig = vpcConfig
    }
}

struct StartEntitiesDetectionJobInputBody: Swift.Equatable {
    let inputDataConfig: ComprehendClientTypes.InputDataConfig?
    let outputDataConfig: ComprehendClientTypes.OutputDataConfig?
    let dataAccessRoleArn: Swift.String?
    let jobName: Swift.String?
    let entityRecognizerArn: Swift.String?
    let languageCode: ComprehendClientTypes.LanguageCode?
    let clientRequestToken: Swift.String?
    let volumeKmsKeyId: Swift.String?
    let vpcConfig: ComprehendClientTypes.VpcConfig?
    let tags: [ComprehendClientTypes.Tag]?
}

extension StartEntitiesDetectionJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case dataAccessRoleArn = "DataAccessRoleArn"
        case entityRecognizerArn = "EntityRecognizerArn"
        case inputDataConfig = "InputDataConfig"
        case jobName = "JobName"
        case languageCode = "LanguageCode"
        case outputDataConfig = "OutputDataConfig"
        case tags = "Tags"
        case volumeKmsKeyId = "VolumeKmsKeyId"
        case vpcConfig = "VpcConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.InputDataConfig.self, forKey: .inputDataConfig)
        inputDataConfig = inputDataConfigDecoded
        let outputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.OutputDataConfig.self, forKey: .outputDataConfig)
        outputDataConfig = outputDataConfigDecoded
        let dataAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataAccessRoleArn)
        dataAccessRoleArn = dataAccessRoleArnDecoded
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let entityRecognizerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .entityRecognizerArn)
        entityRecognizerArn = entityRecognizerArnDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let volumeKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeKmsKeyId)
        volumeKmsKeyId = volumeKmsKeyIdDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[ComprehendClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [ComprehendClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension StartEntitiesDetectionJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartEntitiesDetectionJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KmsKeyValidationException" : self = .kmsKeyValidationException(try KmsKeyValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceUnavailableException" : self = .resourceUnavailableException(try ResourceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartEntitiesDetectionJobOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case kmsKeyValidationException(KmsKeyValidationException)
    case resourceNotFoundException(ResourceNotFoundException)
    case resourceUnavailableException(ResourceUnavailableException)
    case tooManyRequestsException(TooManyRequestsException)
    case tooManyTagsException(TooManyTagsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartEntitiesDetectionJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartEntitiesDetectionJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobArn = output.jobArn
            self.jobId = output.jobId
            self.jobStatus = output.jobStatus
        } else {
            self.jobArn = nil
            self.jobId = nil
            self.jobStatus = nil
        }
    }
}

public struct StartEntitiesDetectionJobOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the entities detection job. It is a unique, fully qualified identifier for the job. It includes the AWS account, Region, and the job ID. The format of the ARN is as follows: arn::comprehend:::entities-detection-job/ The following is an example job ARN: arn:aws:comprehend:us-west-2:111122223333:entities-detection-job/1234abcd12ab34cd56ef1234567890ab
    public var jobArn: Swift.String?
    /// The identifier generated for the job. To get the status of job, use this identifier with the operation.
    public var jobId: Swift.String?
    /// The status of the job.
    ///
    /// * SUBMITTED - The job has been received and is queued for processing.
    ///
    /// * IN_PROGRESS - Amazon Comprehend is processing the job.
    ///
    /// * COMPLETED - The job was successfully completed and the output is available.
    ///
    /// * FAILED - The job did not complete. To get details, use the operation.
    ///
    /// * STOP_REQUESTED - Amazon Comprehend has received a stop request for the job and is processing the request.
    ///
    /// * STOPPED - The job was successfully stopped without completing.
    public var jobStatus: ComprehendClientTypes.JobStatus?

    public init (
        jobArn: Swift.String? = nil,
        jobId: Swift.String? = nil,
        jobStatus: ComprehendClientTypes.JobStatus? = nil
    )
    {
        self.jobArn = jobArn
        self.jobId = jobId
        self.jobStatus = jobStatus
    }
}

struct StartEntitiesDetectionJobOutputResponseBody: Swift.Equatable {
    let jobId: Swift.String?
    let jobArn: Swift.String?
    let jobStatus: ComprehendClientTypes.JobStatus?
}

extension StartEntitiesDetectionJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobArn = "JobArn"
        case jobId = "JobId"
        case jobStatus = "JobStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let jobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobArn)
        jobArn = jobArnDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
    }
}

extension StartEventsDetectionJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case dataAccessRoleArn = "DataAccessRoleArn"
        case inputDataConfig = "InputDataConfig"
        case jobName = "JobName"
        case languageCode = "LanguageCode"
        case outputDataConfig = "OutputDataConfig"
        case tags = "Tags"
        case targetEventTypes = "TargetEventTypes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let dataAccessRoleArn = self.dataAccessRoleArn {
            try encodeContainer.encode(dataAccessRoleArn, forKey: .dataAccessRoleArn)
        }
        if let inputDataConfig = self.inputDataConfig {
            try encodeContainer.encode(inputDataConfig, forKey: .inputDataConfig)
        }
        if let jobName = self.jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let languageCode = self.languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let outputDataConfig = self.outputDataConfig {
            try encodeContainer.encode(outputDataConfig, forKey: .outputDataConfig)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let targetEventTypes = targetEventTypes {
            var targetEventTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targetEventTypes)
            for eventtypestring0 in targetEventTypes {
                try targetEventTypesContainer.encode(eventtypestring0)
            }
        }
    }
}

extension StartEventsDetectionJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartEventsDetectionJobInput: Swift.Equatable {
    /// An unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one.
    public var clientRequestToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data.
    /// This member is required.
    public var dataAccessRoleArn: Swift.String?
    /// Specifies the format and location of the input data for the job.
    /// This member is required.
    public var inputDataConfig: ComprehendClientTypes.InputDataConfig?
    /// The identifier of the events detection job.
    public var jobName: Swift.String?
    /// The language code of the input documents.
    /// This member is required.
    public var languageCode: ComprehendClientTypes.LanguageCode?
    /// Specifies where to send the output files.
    /// This member is required.
    public var outputDataConfig: ComprehendClientTypes.OutputDataConfig?
    /// Tags to be associated with the events detection job. A tag is a key-value pair that adds metadata to a resource used by Amazon Comprehend. For example, a tag with "Sales" as the key might be added to a resource to indicate its use by the sales department.
    public var tags: [ComprehendClientTypes.Tag]?
    /// The types of events to detect in the input documents.
    /// This member is required.
    public var targetEventTypes: [Swift.String]?

    public init (
        clientRequestToken: Swift.String? = nil,
        dataAccessRoleArn: Swift.String? = nil,
        inputDataConfig: ComprehendClientTypes.InputDataConfig? = nil,
        jobName: Swift.String? = nil,
        languageCode: ComprehendClientTypes.LanguageCode? = nil,
        outputDataConfig: ComprehendClientTypes.OutputDataConfig? = nil,
        tags: [ComprehendClientTypes.Tag]? = nil,
        targetEventTypes: [Swift.String]? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.dataAccessRoleArn = dataAccessRoleArn
        self.inputDataConfig = inputDataConfig
        self.jobName = jobName
        self.languageCode = languageCode
        self.outputDataConfig = outputDataConfig
        self.tags = tags
        self.targetEventTypes = targetEventTypes
    }
}

struct StartEventsDetectionJobInputBody: Swift.Equatable {
    let inputDataConfig: ComprehendClientTypes.InputDataConfig?
    let outputDataConfig: ComprehendClientTypes.OutputDataConfig?
    let dataAccessRoleArn: Swift.String?
    let jobName: Swift.String?
    let languageCode: ComprehendClientTypes.LanguageCode?
    let clientRequestToken: Swift.String?
    let targetEventTypes: [Swift.String]?
    let tags: [ComprehendClientTypes.Tag]?
}

extension StartEventsDetectionJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case dataAccessRoleArn = "DataAccessRoleArn"
        case inputDataConfig = "InputDataConfig"
        case jobName = "JobName"
        case languageCode = "LanguageCode"
        case outputDataConfig = "OutputDataConfig"
        case tags = "Tags"
        case targetEventTypes = "TargetEventTypes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.InputDataConfig.self, forKey: .inputDataConfig)
        inputDataConfig = inputDataConfigDecoded
        let outputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.OutputDataConfig.self, forKey: .outputDataConfig)
        outputDataConfig = outputDataConfigDecoded
        let dataAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataAccessRoleArn)
        dataAccessRoleArn = dataAccessRoleArnDecoded
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let targetEventTypesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .targetEventTypes)
        var targetEventTypesDecoded0:[Swift.String]? = nil
        if let targetEventTypesContainer = targetEventTypesContainer {
            targetEventTypesDecoded0 = [Swift.String]()
            for string0 in targetEventTypesContainer {
                if let string0 = string0 {
                    targetEventTypesDecoded0?.append(string0)
                }
            }
        }
        targetEventTypes = targetEventTypesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[ComprehendClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [ComprehendClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension StartEventsDetectionJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartEventsDetectionJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KmsKeyValidationException" : self = .kmsKeyValidationException(try KmsKeyValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartEventsDetectionJobOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case kmsKeyValidationException(KmsKeyValidationException)
    case tooManyRequestsException(TooManyRequestsException)
    case tooManyTagsException(TooManyTagsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartEventsDetectionJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartEventsDetectionJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobArn = output.jobArn
            self.jobId = output.jobId
            self.jobStatus = output.jobStatus
        } else {
            self.jobArn = nil
            self.jobId = nil
            self.jobStatus = nil
        }
    }
}

public struct StartEventsDetectionJobOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the events detection job. It is a unique, fully qualified identifier for the job. It includes the AWS account, Region, and the job ID. The format of the ARN is as follows: arn::comprehend:::events-detection-job/ The following is an example job ARN: arn:aws:comprehend:us-west-2:111122223333:events-detection-job/1234abcd12ab34cd56ef1234567890ab
    public var jobArn: Swift.String?
    /// An unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one.
    public var jobId: Swift.String?
    /// The status of the events detection job.
    public var jobStatus: ComprehendClientTypes.JobStatus?

    public init (
        jobArn: Swift.String? = nil,
        jobId: Swift.String? = nil,
        jobStatus: ComprehendClientTypes.JobStatus? = nil
    )
    {
        self.jobArn = jobArn
        self.jobId = jobId
        self.jobStatus = jobStatus
    }
}

struct StartEventsDetectionJobOutputResponseBody: Swift.Equatable {
    let jobId: Swift.String?
    let jobArn: Swift.String?
    let jobStatus: ComprehendClientTypes.JobStatus?
}

extension StartEventsDetectionJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobArn = "JobArn"
        case jobId = "JobId"
        case jobStatus = "JobStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let jobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobArn)
        jobArn = jobArnDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
    }
}

extension StartKeyPhrasesDetectionJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case dataAccessRoleArn = "DataAccessRoleArn"
        case inputDataConfig = "InputDataConfig"
        case jobName = "JobName"
        case languageCode = "LanguageCode"
        case outputDataConfig = "OutputDataConfig"
        case tags = "Tags"
        case volumeKmsKeyId = "VolumeKmsKeyId"
        case vpcConfig = "VpcConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let dataAccessRoleArn = self.dataAccessRoleArn {
            try encodeContainer.encode(dataAccessRoleArn, forKey: .dataAccessRoleArn)
        }
        if let inputDataConfig = self.inputDataConfig {
            try encodeContainer.encode(inputDataConfig, forKey: .inputDataConfig)
        }
        if let jobName = self.jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let languageCode = self.languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let outputDataConfig = self.outputDataConfig {
            try encodeContainer.encode(outputDataConfig, forKey: .outputDataConfig)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let volumeKmsKeyId = self.volumeKmsKeyId {
            try encodeContainer.encode(volumeKmsKeyId, forKey: .volumeKmsKeyId)
        }
        if let vpcConfig = self.vpcConfig {
            try encodeContainer.encode(vpcConfig, forKey: .vpcConfig)
        }
    }
}

extension StartKeyPhrasesDetectionJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartKeyPhrasesDetectionJobInput: Swift.Equatable {
    /// A unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one.
    public var clientRequestToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data. For more information, see [https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions](https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions).
    /// This member is required.
    public var dataAccessRoleArn: Swift.String?
    /// Specifies the format and location of the input data for the job.
    /// This member is required.
    public var inputDataConfig: ComprehendClientTypes.InputDataConfig?
    /// The identifier of the job.
    public var jobName: Swift.String?
    /// The language of the input documents. You can specify any of the primary languages supported by Amazon Comprehend. All documents must be in the same language.
    /// This member is required.
    public var languageCode: ComprehendClientTypes.LanguageCode?
    /// Specifies where to send the output files.
    /// This member is required.
    public var outputDataConfig: ComprehendClientTypes.OutputDataConfig?
    /// Tags to be associated with the key phrases detection job. A tag is a key-value pair that adds metadata to a resource used by Amazon Comprehend. For example, a tag with "Sales" as the key might be added to a resource to indicate its use by the sales department.
    public var tags: [ComprehendClientTypes.Tag]?
    /// ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:
    ///
    /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
    ///
    /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
    public var volumeKmsKeyId: Swift.String?
    /// Configuration parameters for an optional private Virtual Private Cloud (VPC) containing the resources you are using for your key phrases detection job. For more information, see [Amazon VPC](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html).
    public var vpcConfig: ComprehendClientTypes.VpcConfig?

    public init (
        clientRequestToken: Swift.String? = nil,
        dataAccessRoleArn: Swift.String? = nil,
        inputDataConfig: ComprehendClientTypes.InputDataConfig? = nil,
        jobName: Swift.String? = nil,
        languageCode: ComprehendClientTypes.LanguageCode? = nil,
        outputDataConfig: ComprehendClientTypes.OutputDataConfig? = nil,
        tags: [ComprehendClientTypes.Tag]? = nil,
        volumeKmsKeyId: Swift.String? = nil,
        vpcConfig: ComprehendClientTypes.VpcConfig? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.dataAccessRoleArn = dataAccessRoleArn
        self.inputDataConfig = inputDataConfig
        self.jobName = jobName
        self.languageCode = languageCode
        self.outputDataConfig = outputDataConfig
        self.tags = tags
        self.volumeKmsKeyId = volumeKmsKeyId
        self.vpcConfig = vpcConfig
    }
}

struct StartKeyPhrasesDetectionJobInputBody: Swift.Equatable {
    let inputDataConfig: ComprehendClientTypes.InputDataConfig?
    let outputDataConfig: ComprehendClientTypes.OutputDataConfig?
    let dataAccessRoleArn: Swift.String?
    let jobName: Swift.String?
    let languageCode: ComprehendClientTypes.LanguageCode?
    let clientRequestToken: Swift.String?
    let volumeKmsKeyId: Swift.String?
    let vpcConfig: ComprehendClientTypes.VpcConfig?
    let tags: [ComprehendClientTypes.Tag]?
}

extension StartKeyPhrasesDetectionJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case dataAccessRoleArn = "DataAccessRoleArn"
        case inputDataConfig = "InputDataConfig"
        case jobName = "JobName"
        case languageCode = "LanguageCode"
        case outputDataConfig = "OutputDataConfig"
        case tags = "Tags"
        case volumeKmsKeyId = "VolumeKmsKeyId"
        case vpcConfig = "VpcConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.InputDataConfig.self, forKey: .inputDataConfig)
        inputDataConfig = inputDataConfigDecoded
        let outputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.OutputDataConfig.self, forKey: .outputDataConfig)
        outputDataConfig = outputDataConfigDecoded
        let dataAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataAccessRoleArn)
        dataAccessRoleArn = dataAccessRoleArnDecoded
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let volumeKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeKmsKeyId)
        volumeKmsKeyId = volumeKmsKeyIdDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[ComprehendClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [ComprehendClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension StartKeyPhrasesDetectionJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartKeyPhrasesDetectionJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KmsKeyValidationException" : self = .kmsKeyValidationException(try KmsKeyValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartKeyPhrasesDetectionJobOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case kmsKeyValidationException(KmsKeyValidationException)
    case tooManyRequestsException(TooManyRequestsException)
    case tooManyTagsException(TooManyTagsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartKeyPhrasesDetectionJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartKeyPhrasesDetectionJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobArn = output.jobArn
            self.jobId = output.jobId
            self.jobStatus = output.jobStatus
        } else {
            self.jobArn = nil
            self.jobId = nil
            self.jobStatus = nil
        }
    }
}

public struct StartKeyPhrasesDetectionJobOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the key phrase detection job. It is a unique, fully qualified identifier for the job. It includes the AWS account, Region, and the job ID. The format of the ARN is as follows: arn::comprehend:::key-phrases-detection-job/ The following is an example job ARN: arn:aws:comprehend:us-west-2:111122223333:key-phrases-detection-job/1234abcd12ab34cd56ef1234567890ab
    public var jobArn: Swift.String?
    /// The identifier generated for the job. To get the status of a job, use this identifier with the operation.
    public var jobId: Swift.String?
    /// The status of the job.
    ///
    /// * SUBMITTED - The job has been received and is queued for processing.
    ///
    /// * IN_PROGRESS - Amazon Comprehend is processing the job.
    ///
    /// * COMPLETED - The job was successfully completed and the output is available.
    ///
    /// * FAILED - The job did not complete. To get details, use the operation.
    public var jobStatus: ComprehendClientTypes.JobStatus?

    public init (
        jobArn: Swift.String? = nil,
        jobId: Swift.String? = nil,
        jobStatus: ComprehendClientTypes.JobStatus? = nil
    )
    {
        self.jobArn = jobArn
        self.jobId = jobId
        self.jobStatus = jobStatus
    }
}

struct StartKeyPhrasesDetectionJobOutputResponseBody: Swift.Equatable {
    let jobId: Swift.String?
    let jobArn: Swift.String?
    let jobStatus: ComprehendClientTypes.JobStatus?
}

extension StartKeyPhrasesDetectionJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobArn = "JobArn"
        case jobId = "JobId"
        case jobStatus = "JobStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let jobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobArn)
        jobArn = jobArnDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
    }
}

extension StartPiiEntitiesDetectionJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case dataAccessRoleArn = "DataAccessRoleArn"
        case inputDataConfig = "InputDataConfig"
        case jobName = "JobName"
        case languageCode = "LanguageCode"
        case mode = "Mode"
        case outputDataConfig = "OutputDataConfig"
        case redactionConfig = "RedactionConfig"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let dataAccessRoleArn = self.dataAccessRoleArn {
            try encodeContainer.encode(dataAccessRoleArn, forKey: .dataAccessRoleArn)
        }
        if let inputDataConfig = self.inputDataConfig {
            try encodeContainer.encode(inputDataConfig, forKey: .inputDataConfig)
        }
        if let jobName = self.jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let languageCode = self.languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let mode = self.mode {
            try encodeContainer.encode(mode.rawValue, forKey: .mode)
        }
        if let outputDataConfig = self.outputDataConfig {
            try encodeContainer.encode(outputDataConfig, forKey: .outputDataConfig)
        }
        if let redactionConfig = self.redactionConfig {
            try encodeContainer.encode(redactionConfig, forKey: .redactionConfig)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension StartPiiEntitiesDetectionJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartPiiEntitiesDetectionJobInput: Swift.Equatable {
    /// A unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one.
    public var clientRequestToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data.
    /// This member is required.
    public var dataAccessRoleArn: Swift.String?
    /// The input properties for a PII entities detection job.
    /// This member is required.
    public var inputDataConfig: ComprehendClientTypes.InputDataConfig?
    /// The identifier of the job.
    public var jobName: Swift.String?
    /// The language of the input documents. Currently, English is the only valid language.
    /// This member is required.
    public var languageCode: ComprehendClientTypes.LanguageCode?
    /// Specifies whether the output provides the locations (offsets) of PII entities or a file in which PII entities are redacted.
    /// This member is required.
    public var mode: ComprehendClientTypes.PiiEntitiesDetectionMode?
    /// Provides conﬁguration parameters for the output of PII entity detection jobs.
    /// This member is required.
    public var outputDataConfig: ComprehendClientTypes.OutputDataConfig?
    /// Provides configuration parameters for PII entity redaction. This parameter is required if you set the Mode parameter to ONLY_REDACTION. In that case, you must provide a RedactionConfig definition that includes the PiiEntityTypes parameter.
    public var redactionConfig: ComprehendClientTypes.RedactionConfig?
    /// Tags to be associated with the PII entities detection job. A tag is a key-value pair that adds metadata to a resource used by Amazon Comprehend. For example, a tag with "Sales" as the key might be added to a resource to indicate its use by the sales department.
    public var tags: [ComprehendClientTypes.Tag]?

    public init (
        clientRequestToken: Swift.String? = nil,
        dataAccessRoleArn: Swift.String? = nil,
        inputDataConfig: ComprehendClientTypes.InputDataConfig? = nil,
        jobName: Swift.String? = nil,
        languageCode: ComprehendClientTypes.LanguageCode? = nil,
        mode: ComprehendClientTypes.PiiEntitiesDetectionMode? = nil,
        outputDataConfig: ComprehendClientTypes.OutputDataConfig? = nil,
        redactionConfig: ComprehendClientTypes.RedactionConfig? = nil,
        tags: [ComprehendClientTypes.Tag]? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.dataAccessRoleArn = dataAccessRoleArn
        self.inputDataConfig = inputDataConfig
        self.jobName = jobName
        self.languageCode = languageCode
        self.mode = mode
        self.outputDataConfig = outputDataConfig
        self.redactionConfig = redactionConfig
        self.tags = tags
    }
}

struct StartPiiEntitiesDetectionJobInputBody: Swift.Equatable {
    let inputDataConfig: ComprehendClientTypes.InputDataConfig?
    let outputDataConfig: ComprehendClientTypes.OutputDataConfig?
    let mode: ComprehendClientTypes.PiiEntitiesDetectionMode?
    let redactionConfig: ComprehendClientTypes.RedactionConfig?
    let dataAccessRoleArn: Swift.String?
    let jobName: Swift.String?
    let languageCode: ComprehendClientTypes.LanguageCode?
    let clientRequestToken: Swift.String?
    let tags: [ComprehendClientTypes.Tag]?
}

extension StartPiiEntitiesDetectionJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case dataAccessRoleArn = "DataAccessRoleArn"
        case inputDataConfig = "InputDataConfig"
        case jobName = "JobName"
        case languageCode = "LanguageCode"
        case mode = "Mode"
        case outputDataConfig = "OutputDataConfig"
        case redactionConfig = "RedactionConfig"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.InputDataConfig.self, forKey: .inputDataConfig)
        inputDataConfig = inputDataConfigDecoded
        let outputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.OutputDataConfig.self, forKey: .outputDataConfig)
        outputDataConfig = outputDataConfigDecoded
        let modeDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.PiiEntitiesDetectionMode.self, forKey: .mode)
        mode = modeDecoded
        let redactionConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.RedactionConfig.self, forKey: .redactionConfig)
        redactionConfig = redactionConfigDecoded
        let dataAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataAccessRoleArn)
        dataAccessRoleArn = dataAccessRoleArnDecoded
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[ComprehendClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [ComprehendClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension StartPiiEntitiesDetectionJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartPiiEntitiesDetectionJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KmsKeyValidationException" : self = .kmsKeyValidationException(try KmsKeyValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartPiiEntitiesDetectionJobOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case kmsKeyValidationException(KmsKeyValidationException)
    case tooManyRequestsException(TooManyRequestsException)
    case tooManyTagsException(TooManyTagsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartPiiEntitiesDetectionJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartPiiEntitiesDetectionJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobArn = output.jobArn
            self.jobId = output.jobId
            self.jobStatus = output.jobStatus
        } else {
            self.jobArn = nil
            self.jobId = nil
            self.jobStatus = nil
        }
    }
}

public struct StartPiiEntitiesDetectionJobOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the PII entity detection job. It is a unique, fully qualified identifier for the job. It includes the AWS account, Region, and the job ID. The format of the ARN is as follows: arn::comprehend:::pii-entities-detection-job/ The following is an example job ARN: arn:aws:comprehend:us-west-2:111122223333:pii-entities-detection-job/1234abcd12ab34cd56ef1234567890ab
    public var jobArn: Swift.String?
    /// The identifier generated for the job.
    public var jobId: Swift.String?
    /// The status of the job.
    public var jobStatus: ComprehendClientTypes.JobStatus?

    public init (
        jobArn: Swift.String? = nil,
        jobId: Swift.String? = nil,
        jobStatus: ComprehendClientTypes.JobStatus? = nil
    )
    {
        self.jobArn = jobArn
        self.jobId = jobId
        self.jobStatus = jobStatus
    }
}

struct StartPiiEntitiesDetectionJobOutputResponseBody: Swift.Equatable {
    let jobId: Swift.String?
    let jobArn: Swift.String?
    let jobStatus: ComprehendClientTypes.JobStatus?
}

extension StartPiiEntitiesDetectionJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobArn = "JobArn"
        case jobId = "JobId"
        case jobStatus = "JobStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let jobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobArn)
        jobArn = jobArnDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
    }
}

extension StartSentimentDetectionJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case dataAccessRoleArn = "DataAccessRoleArn"
        case inputDataConfig = "InputDataConfig"
        case jobName = "JobName"
        case languageCode = "LanguageCode"
        case outputDataConfig = "OutputDataConfig"
        case tags = "Tags"
        case volumeKmsKeyId = "VolumeKmsKeyId"
        case vpcConfig = "VpcConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let dataAccessRoleArn = self.dataAccessRoleArn {
            try encodeContainer.encode(dataAccessRoleArn, forKey: .dataAccessRoleArn)
        }
        if let inputDataConfig = self.inputDataConfig {
            try encodeContainer.encode(inputDataConfig, forKey: .inputDataConfig)
        }
        if let jobName = self.jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let languageCode = self.languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let outputDataConfig = self.outputDataConfig {
            try encodeContainer.encode(outputDataConfig, forKey: .outputDataConfig)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let volumeKmsKeyId = self.volumeKmsKeyId {
            try encodeContainer.encode(volumeKmsKeyId, forKey: .volumeKmsKeyId)
        }
        if let vpcConfig = self.vpcConfig {
            try encodeContainer.encode(vpcConfig, forKey: .vpcConfig)
        }
    }
}

extension StartSentimentDetectionJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartSentimentDetectionJobInput: Swift.Equatable {
    /// A unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one.
    public var clientRequestToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data. For more information, see [https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions](https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions).
    /// This member is required.
    public var dataAccessRoleArn: Swift.String?
    /// Specifies the format and location of the input data for the job.
    /// This member is required.
    public var inputDataConfig: ComprehendClientTypes.InputDataConfig?
    /// The identifier of the job.
    public var jobName: Swift.String?
    /// The language of the input documents. You can specify any of the primary languages supported by Amazon Comprehend. All documents must be in the same language.
    /// This member is required.
    public var languageCode: ComprehendClientTypes.LanguageCode?
    /// Specifies where to send the output files.
    /// This member is required.
    public var outputDataConfig: ComprehendClientTypes.OutputDataConfig?
    /// Tags to be associated with the sentiment detection job. A tag is a key-value pair that adds metadata to a resource used by Amazon Comprehend. For example, a tag with "Sales" as the key might be added to a resource to indicate its use by the sales department.
    public var tags: [ComprehendClientTypes.Tag]?
    /// ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:
    ///
    /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
    ///
    /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
    public var volumeKmsKeyId: Swift.String?
    /// Configuration parameters for an optional private Virtual Private Cloud (VPC) containing the resources you are using for your sentiment detection job. For more information, see [Amazon VPC](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html).
    public var vpcConfig: ComprehendClientTypes.VpcConfig?

    public init (
        clientRequestToken: Swift.String? = nil,
        dataAccessRoleArn: Swift.String? = nil,
        inputDataConfig: ComprehendClientTypes.InputDataConfig? = nil,
        jobName: Swift.String? = nil,
        languageCode: ComprehendClientTypes.LanguageCode? = nil,
        outputDataConfig: ComprehendClientTypes.OutputDataConfig? = nil,
        tags: [ComprehendClientTypes.Tag]? = nil,
        volumeKmsKeyId: Swift.String? = nil,
        vpcConfig: ComprehendClientTypes.VpcConfig? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.dataAccessRoleArn = dataAccessRoleArn
        self.inputDataConfig = inputDataConfig
        self.jobName = jobName
        self.languageCode = languageCode
        self.outputDataConfig = outputDataConfig
        self.tags = tags
        self.volumeKmsKeyId = volumeKmsKeyId
        self.vpcConfig = vpcConfig
    }
}

struct StartSentimentDetectionJobInputBody: Swift.Equatable {
    let inputDataConfig: ComprehendClientTypes.InputDataConfig?
    let outputDataConfig: ComprehendClientTypes.OutputDataConfig?
    let dataAccessRoleArn: Swift.String?
    let jobName: Swift.String?
    let languageCode: ComprehendClientTypes.LanguageCode?
    let clientRequestToken: Swift.String?
    let volumeKmsKeyId: Swift.String?
    let vpcConfig: ComprehendClientTypes.VpcConfig?
    let tags: [ComprehendClientTypes.Tag]?
}

extension StartSentimentDetectionJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case dataAccessRoleArn = "DataAccessRoleArn"
        case inputDataConfig = "InputDataConfig"
        case jobName = "JobName"
        case languageCode = "LanguageCode"
        case outputDataConfig = "OutputDataConfig"
        case tags = "Tags"
        case volumeKmsKeyId = "VolumeKmsKeyId"
        case vpcConfig = "VpcConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.InputDataConfig.self, forKey: .inputDataConfig)
        inputDataConfig = inputDataConfigDecoded
        let outputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.OutputDataConfig.self, forKey: .outputDataConfig)
        outputDataConfig = outputDataConfigDecoded
        let dataAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataAccessRoleArn)
        dataAccessRoleArn = dataAccessRoleArnDecoded
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let volumeKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeKmsKeyId)
        volumeKmsKeyId = volumeKmsKeyIdDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[ComprehendClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [ComprehendClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension StartSentimentDetectionJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartSentimentDetectionJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KmsKeyValidationException" : self = .kmsKeyValidationException(try KmsKeyValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartSentimentDetectionJobOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case kmsKeyValidationException(KmsKeyValidationException)
    case tooManyRequestsException(TooManyRequestsException)
    case tooManyTagsException(TooManyTagsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartSentimentDetectionJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartSentimentDetectionJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobArn = output.jobArn
            self.jobId = output.jobId
            self.jobStatus = output.jobStatus
        } else {
            self.jobArn = nil
            self.jobId = nil
            self.jobStatus = nil
        }
    }
}

public struct StartSentimentDetectionJobOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the sentiment detection job. It is a unique, fully qualified identifier for the job. It includes the AWS account, Region, and the job ID. The format of the ARN is as follows: arn::comprehend:::sentiment-detection-job/ The following is an example job ARN: arn:aws:comprehend:us-west-2:111122223333:sentiment-detection-job/1234abcd12ab34cd56ef1234567890ab
    public var jobArn: Swift.String?
    /// The identifier generated for the job. To get the status of a job, use this identifier with the operation.
    public var jobId: Swift.String?
    /// The status of the job.
    ///
    /// * SUBMITTED - The job has been received and is queued for processing.
    ///
    /// * IN_PROGRESS - Amazon Comprehend is processing the job.
    ///
    /// * COMPLETED - The job was successfully completed and the output is available.
    ///
    /// * FAILED - The job did not complete. To get details, use the operation.
    public var jobStatus: ComprehendClientTypes.JobStatus?

    public init (
        jobArn: Swift.String? = nil,
        jobId: Swift.String? = nil,
        jobStatus: ComprehendClientTypes.JobStatus? = nil
    )
    {
        self.jobArn = jobArn
        self.jobId = jobId
        self.jobStatus = jobStatus
    }
}

struct StartSentimentDetectionJobOutputResponseBody: Swift.Equatable {
    let jobId: Swift.String?
    let jobArn: Swift.String?
    let jobStatus: ComprehendClientTypes.JobStatus?
}

extension StartSentimentDetectionJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobArn = "JobArn"
        case jobId = "JobId"
        case jobStatus = "JobStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let jobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobArn)
        jobArn = jobArnDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
    }
}

extension StartTargetedSentimentDetectionJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case dataAccessRoleArn = "DataAccessRoleArn"
        case inputDataConfig = "InputDataConfig"
        case jobName = "JobName"
        case languageCode = "LanguageCode"
        case outputDataConfig = "OutputDataConfig"
        case tags = "Tags"
        case volumeKmsKeyId = "VolumeKmsKeyId"
        case vpcConfig = "VpcConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let dataAccessRoleArn = self.dataAccessRoleArn {
            try encodeContainer.encode(dataAccessRoleArn, forKey: .dataAccessRoleArn)
        }
        if let inputDataConfig = self.inputDataConfig {
            try encodeContainer.encode(inputDataConfig, forKey: .inputDataConfig)
        }
        if let jobName = self.jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let languageCode = self.languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let outputDataConfig = self.outputDataConfig {
            try encodeContainer.encode(outputDataConfig, forKey: .outputDataConfig)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let volumeKmsKeyId = self.volumeKmsKeyId {
            try encodeContainer.encode(volumeKmsKeyId, forKey: .volumeKmsKeyId)
        }
        if let vpcConfig = self.vpcConfig {
            try encodeContainer.encode(vpcConfig, forKey: .vpcConfig)
        }
    }
}

extension StartTargetedSentimentDetectionJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartTargetedSentimentDetectionJobInput: Swift.Equatable {
    /// A unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one.
    public var clientRequestToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data. For more information, see [Role-based permissions](https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions).
    /// This member is required.
    public var dataAccessRoleArn: Swift.String?
    /// The input properties for an inference job. The document reader config field applies only to non-text inputs for custom analysis.
    /// This member is required.
    public var inputDataConfig: ComprehendClientTypes.InputDataConfig?
    /// The identifier of the job.
    public var jobName: Swift.String?
    /// The language of the input documents. Currently, English is the only supported language.
    /// This member is required.
    public var languageCode: ComprehendClientTypes.LanguageCode?
    /// Specifies where to send the output files.
    /// This member is required.
    public var outputDataConfig: ComprehendClientTypes.OutputDataConfig?
    /// Tags to be associated with the targeted sentiment detection job. A tag is a key-value pair that adds metadata to a resource used by Amazon Comprehend. For example, a tag with "Sales" as the key might be added to a resource to indicate its use by the sales department.
    public var tags: [ComprehendClientTypes.Tag]?
    /// ID for the KMS key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:
    ///
    /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
    ///
    /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
    public var volumeKmsKeyId: Swift.String?
    /// Configuration parameters for an optional private Virtual Private Cloud (VPC) containing the resources you are using for the job. For more information, see [Amazon VPC](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html).
    public var vpcConfig: ComprehendClientTypes.VpcConfig?

    public init (
        clientRequestToken: Swift.String? = nil,
        dataAccessRoleArn: Swift.String? = nil,
        inputDataConfig: ComprehendClientTypes.InputDataConfig? = nil,
        jobName: Swift.String? = nil,
        languageCode: ComprehendClientTypes.LanguageCode? = nil,
        outputDataConfig: ComprehendClientTypes.OutputDataConfig? = nil,
        tags: [ComprehendClientTypes.Tag]? = nil,
        volumeKmsKeyId: Swift.String? = nil,
        vpcConfig: ComprehendClientTypes.VpcConfig? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.dataAccessRoleArn = dataAccessRoleArn
        self.inputDataConfig = inputDataConfig
        self.jobName = jobName
        self.languageCode = languageCode
        self.outputDataConfig = outputDataConfig
        self.tags = tags
        self.volumeKmsKeyId = volumeKmsKeyId
        self.vpcConfig = vpcConfig
    }
}

struct StartTargetedSentimentDetectionJobInputBody: Swift.Equatable {
    let inputDataConfig: ComprehendClientTypes.InputDataConfig?
    let outputDataConfig: ComprehendClientTypes.OutputDataConfig?
    let dataAccessRoleArn: Swift.String?
    let jobName: Swift.String?
    let languageCode: ComprehendClientTypes.LanguageCode?
    let clientRequestToken: Swift.String?
    let volumeKmsKeyId: Swift.String?
    let vpcConfig: ComprehendClientTypes.VpcConfig?
    let tags: [ComprehendClientTypes.Tag]?
}

extension StartTargetedSentimentDetectionJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case dataAccessRoleArn = "DataAccessRoleArn"
        case inputDataConfig = "InputDataConfig"
        case jobName = "JobName"
        case languageCode = "LanguageCode"
        case outputDataConfig = "OutputDataConfig"
        case tags = "Tags"
        case volumeKmsKeyId = "VolumeKmsKeyId"
        case vpcConfig = "VpcConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.InputDataConfig.self, forKey: .inputDataConfig)
        inputDataConfig = inputDataConfigDecoded
        let outputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.OutputDataConfig.self, forKey: .outputDataConfig)
        outputDataConfig = outputDataConfigDecoded
        let dataAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataAccessRoleArn)
        dataAccessRoleArn = dataAccessRoleArnDecoded
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let volumeKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeKmsKeyId)
        volumeKmsKeyId = volumeKmsKeyIdDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[ComprehendClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [ComprehendClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension StartTargetedSentimentDetectionJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartTargetedSentimentDetectionJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KmsKeyValidationException" : self = .kmsKeyValidationException(try KmsKeyValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartTargetedSentimentDetectionJobOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case kmsKeyValidationException(KmsKeyValidationException)
    case tooManyRequestsException(TooManyRequestsException)
    case tooManyTagsException(TooManyTagsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartTargetedSentimentDetectionJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartTargetedSentimentDetectionJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobArn = output.jobArn
            self.jobId = output.jobId
            self.jobStatus = output.jobStatus
        } else {
            self.jobArn = nil
            self.jobId = nil
            self.jobStatus = nil
        }
    }
}

public struct StartTargetedSentimentDetectionJobOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the targeted sentiment detection job. It is a unique, fully qualified identifier for the job. It includes the AWS account, Region, and the job ID. The format of the ARN is as follows: arn::comprehend:::targeted-sentiment-detection-job/ The following is an example job ARN: arn:aws:comprehend:us-west-2:111122223333:targeted-sentiment-detection-job/1234abcd12ab34cd56ef1234567890ab
    public var jobArn: Swift.String?
    /// The identifier generated for the job. To get the status of a job, use this identifier with the operation.
    public var jobId: Swift.String?
    /// The status of the job.
    ///
    /// * SUBMITTED - The job has been received and is queued for processing.
    ///
    /// * IN_PROGRESS - Amazon Comprehend is processing the job.
    ///
    /// * COMPLETED - The job was successfully completed and the output is available.
    ///
    /// * FAILED - The job did not complete. To get details, use the operation.
    public var jobStatus: ComprehendClientTypes.JobStatus?

    public init (
        jobArn: Swift.String? = nil,
        jobId: Swift.String? = nil,
        jobStatus: ComprehendClientTypes.JobStatus? = nil
    )
    {
        self.jobArn = jobArn
        self.jobId = jobId
        self.jobStatus = jobStatus
    }
}

struct StartTargetedSentimentDetectionJobOutputResponseBody: Swift.Equatable {
    let jobId: Swift.String?
    let jobArn: Swift.String?
    let jobStatus: ComprehendClientTypes.JobStatus?
}

extension StartTargetedSentimentDetectionJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobArn = "JobArn"
        case jobId = "JobId"
        case jobStatus = "JobStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let jobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobArn)
        jobArn = jobArnDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
    }
}

extension StartTopicsDetectionJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case dataAccessRoleArn = "DataAccessRoleArn"
        case inputDataConfig = "InputDataConfig"
        case jobName = "JobName"
        case numberOfTopics = "NumberOfTopics"
        case outputDataConfig = "OutputDataConfig"
        case tags = "Tags"
        case volumeKmsKeyId = "VolumeKmsKeyId"
        case vpcConfig = "VpcConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let dataAccessRoleArn = self.dataAccessRoleArn {
            try encodeContainer.encode(dataAccessRoleArn, forKey: .dataAccessRoleArn)
        }
        if let inputDataConfig = self.inputDataConfig {
            try encodeContainer.encode(inputDataConfig, forKey: .inputDataConfig)
        }
        if let jobName = self.jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let numberOfTopics = self.numberOfTopics {
            try encodeContainer.encode(numberOfTopics, forKey: .numberOfTopics)
        }
        if let outputDataConfig = self.outputDataConfig {
            try encodeContainer.encode(outputDataConfig, forKey: .outputDataConfig)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let volumeKmsKeyId = self.volumeKmsKeyId {
            try encodeContainer.encode(volumeKmsKeyId, forKey: .volumeKmsKeyId)
        }
        if let vpcConfig = self.vpcConfig {
            try encodeContainer.encode(vpcConfig, forKey: .vpcConfig)
        }
    }
}

extension StartTopicsDetectionJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartTopicsDetectionJobInput: Swift.Equatable {
    /// A unique identifier for the request. If you do not set the client request token, Amazon Comprehend generates one.
    public var clientRequestToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data. For more information, see [https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions](https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions).
    /// This member is required.
    public var dataAccessRoleArn: Swift.String?
    /// Specifies the format and location of the input data for the job.
    /// This member is required.
    public var inputDataConfig: ComprehendClientTypes.InputDataConfig?
    /// The identifier of the job.
    public var jobName: Swift.String?
    /// The number of topics to detect.
    public var numberOfTopics: Swift.Int?
    /// Specifies where to send the output files. The output is a compressed archive with two files, topic-terms.csv that lists the terms associated with each topic, and doc-topics.csv that lists the documents associated with each topic
    /// This member is required.
    public var outputDataConfig: ComprehendClientTypes.OutputDataConfig?
    /// Tags to be associated with the topics detection job. A tag is a key-value pair that adds metadata to a resource used by Amazon Comprehend. For example, a tag with "Sales" as the key might be added to a resource to indicate its use by the sales department.
    public var tags: [ComprehendClientTypes.Tag]?
    /// ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:
    ///
    /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
    ///
    /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
    public var volumeKmsKeyId: Swift.String?
    /// Configuration parameters for an optional private Virtual Private Cloud (VPC) containing the resources you are using for your topic detection job. For more information, see [Amazon VPC](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html).
    public var vpcConfig: ComprehendClientTypes.VpcConfig?

    public init (
        clientRequestToken: Swift.String? = nil,
        dataAccessRoleArn: Swift.String? = nil,
        inputDataConfig: ComprehendClientTypes.InputDataConfig? = nil,
        jobName: Swift.String? = nil,
        numberOfTopics: Swift.Int? = nil,
        outputDataConfig: ComprehendClientTypes.OutputDataConfig? = nil,
        tags: [ComprehendClientTypes.Tag]? = nil,
        volumeKmsKeyId: Swift.String? = nil,
        vpcConfig: ComprehendClientTypes.VpcConfig? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.dataAccessRoleArn = dataAccessRoleArn
        self.inputDataConfig = inputDataConfig
        self.jobName = jobName
        self.numberOfTopics = numberOfTopics
        self.outputDataConfig = outputDataConfig
        self.tags = tags
        self.volumeKmsKeyId = volumeKmsKeyId
        self.vpcConfig = vpcConfig
    }
}

struct StartTopicsDetectionJobInputBody: Swift.Equatable {
    let inputDataConfig: ComprehendClientTypes.InputDataConfig?
    let outputDataConfig: ComprehendClientTypes.OutputDataConfig?
    let dataAccessRoleArn: Swift.String?
    let jobName: Swift.String?
    let numberOfTopics: Swift.Int?
    let clientRequestToken: Swift.String?
    let volumeKmsKeyId: Swift.String?
    let vpcConfig: ComprehendClientTypes.VpcConfig?
    let tags: [ComprehendClientTypes.Tag]?
}

extension StartTopicsDetectionJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case dataAccessRoleArn = "DataAccessRoleArn"
        case inputDataConfig = "InputDataConfig"
        case jobName = "JobName"
        case numberOfTopics = "NumberOfTopics"
        case outputDataConfig = "OutputDataConfig"
        case tags = "Tags"
        case volumeKmsKeyId = "VolumeKmsKeyId"
        case vpcConfig = "VpcConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.InputDataConfig.self, forKey: .inputDataConfig)
        inputDataConfig = inputDataConfigDecoded
        let outputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.OutputDataConfig.self, forKey: .outputDataConfig)
        outputDataConfig = outputDataConfigDecoded
        let dataAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataAccessRoleArn)
        dataAccessRoleArn = dataAccessRoleArnDecoded
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let numberOfTopicsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfTopics)
        numberOfTopics = numberOfTopicsDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let volumeKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeKmsKeyId)
        volumeKmsKeyId = volumeKmsKeyIdDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[ComprehendClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [ComprehendClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension StartTopicsDetectionJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartTopicsDetectionJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KmsKeyValidationException" : self = .kmsKeyValidationException(try KmsKeyValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartTopicsDetectionJobOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case kmsKeyValidationException(KmsKeyValidationException)
    case tooManyRequestsException(TooManyRequestsException)
    case tooManyTagsException(TooManyTagsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartTopicsDetectionJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartTopicsDetectionJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobArn = output.jobArn
            self.jobId = output.jobId
            self.jobStatus = output.jobStatus
        } else {
            self.jobArn = nil
            self.jobId = nil
            self.jobStatus = nil
        }
    }
}

public struct StartTopicsDetectionJobOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the topics detection job. It is a unique, fully qualified identifier for the job. It includes the AWS account, Region, and the job ID. The format of the ARN is as follows: arn::comprehend:::topics-detection-job/ The following is an example job ARN: arn:aws:comprehend:us-west-2:111122223333:document-classification-job/1234abcd12ab34cd56ef1234567890ab
    public var jobArn: Swift.String?
    /// The identifier generated for the job. To get the status of the job, use this identifier with the DescribeTopicDetectionJob operation.
    public var jobId: Swift.String?
    /// The status of the job:
    ///
    /// * SUBMITTED - The job has been received and is queued for processing.
    ///
    /// * IN_PROGRESS - Amazon Comprehend is processing the job.
    ///
    /// * COMPLETED - The job was successfully completed and the output is available.
    ///
    /// * FAILED - The job did not complete. To get details, use the DescribeTopicDetectionJob operation.
    public var jobStatus: ComprehendClientTypes.JobStatus?

    public init (
        jobArn: Swift.String? = nil,
        jobId: Swift.String? = nil,
        jobStatus: ComprehendClientTypes.JobStatus? = nil
    )
    {
        self.jobArn = jobArn
        self.jobId = jobId
        self.jobStatus = jobStatus
    }
}

struct StartTopicsDetectionJobOutputResponseBody: Swift.Equatable {
    let jobId: Swift.String?
    let jobArn: Swift.String?
    let jobStatus: ComprehendClientTypes.JobStatus?
}

extension StartTopicsDetectionJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobArn = "JobArn"
        case jobId = "JobId"
        case jobStatus = "JobStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let jobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobArn)
        jobArn = jobArnDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
    }
}

extension StopDominantLanguageDetectionJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
    }
}

extension StopDominantLanguageDetectionJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopDominantLanguageDetectionJobInput: Swift.Equatable {
    /// The identifier of the dominant language detection job to stop.
    /// This member is required.
    public var jobId: Swift.String?

    public init (
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

struct StopDominantLanguageDetectionJobInputBody: Swift.Equatable {
    let jobId: Swift.String?
}

extension StopDominantLanguageDetectionJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
    }
}

extension StopDominantLanguageDetectionJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopDominantLanguageDetectionJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "JobNotFoundException" : self = .jobNotFoundException(try JobNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StopDominantLanguageDetectionJobOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case jobNotFoundException(JobNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopDominantLanguageDetectionJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StopDominantLanguageDetectionJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobId = output.jobId
            self.jobStatus = output.jobStatus
        } else {
            self.jobId = nil
            self.jobStatus = nil
        }
    }
}

public struct StopDominantLanguageDetectionJobOutputResponse: Swift.Equatable {
    /// The identifier of the dominant language detection job to stop.
    public var jobId: Swift.String?
    /// Either STOP_REQUESTED if the job is currently running, or STOPPED if the job was previously stopped with the StopDominantLanguageDetectionJob operation.
    public var jobStatus: ComprehendClientTypes.JobStatus?

    public init (
        jobId: Swift.String? = nil,
        jobStatus: ComprehendClientTypes.JobStatus? = nil
    )
    {
        self.jobId = jobId
        self.jobStatus = jobStatus
    }
}

struct StopDominantLanguageDetectionJobOutputResponseBody: Swift.Equatable {
    let jobId: Swift.String?
    let jobStatus: ComprehendClientTypes.JobStatus?
}

extension StopDominantLanguageDetectionJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
        case jobStatus = "JobStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
    }
}

extension StopEntitiesDetectionJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
    }
}

extension StopEntitiesDetectionJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopEntitiesDetectionJobInput: Swift.Equatable {
    /// The identifier of the entities detection job to stop.
    /// This member is required.
    public var jobId: Swift.String?

    public init (
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

struct StopEntitiesDetectionJobInputBody: Swift.Equatable {
    let jobId: Swift.String?
}

extension StopEntitiesDetectionJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
    }
}

extension StopEntitiesDetectionJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopEntitiesDetectionJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "JobNotFoundException" : self = .jobNotFoundException(try JobNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StopEntitiesDetectionJobOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case jobNotFoundException(JobNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopEntitiesDetectionJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StopEntitiesDetectionJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobId = output.jobId
            self.jobStatus = output.jobStatus
        } else {
            self.jobId = nil
            self.jobStatus = nil
        }
    }
}

public struct StopEntitiesDetectionJobOutputResponse: Swift.Equatable {
    /// The identifier of the entities detection job to stop.
    public var jobId: Swift.String?
    /// Either STOP_REQUESTED if the job is currently running, or STOPPED if the job was previously stopped with the StopEntitiesDetectionJob operation.
    public var jobStatus: ComprehendClientTypes.JobStatus?

    public init (
        jobId: Swift.String? = nil,
        jobStatus: ComprehendClientTypes.JobStatus? = nil
    )
    {
        self.jobId = jobId
        self.jobStatus = jobStatus
    }
}

struct StopEntitiesDetectionJobOutputResponseBody: Swift.Equatable {
    let jobId: Swift.String?
    let jobStatus: ComprehendClientTypes.JobStatus?
}

extension StopEntitiesDetectionJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
        case jobStatus = "JobStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
    }
}

extension StopEventsDetectionJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
    }
}

extension StopEventsDetectionJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopEventsDetectionJobInput: Swift.Equatable {
    /// The identifier of the events detection job to stop.
    /// This member is required.
    public var jobId: Swift.String?

    public init (
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

struct StopEventsDetectionJobInputBody: Swift.Equatable {
    let jobId: Swift.String?
}

extension StopEventsDetectionJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
    }
}

extension StopEventsDetectionJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopEventsDetectionJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "JobNotFoundException" : self = .jobNotFoundException(try JobNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StopEventsDetectionJobOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case jobNotFoundException(JobNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopEventsDetectionJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StopEventsDetectionJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobId = output.jobId
            self.jobStatus = output.jobStatus
        } else {
            self.jobId = nil
            self.jobStatus = nil
        }
    }
}

public struct StopEventsDetectionJobOutputResponse: Swift.Equatable {
    /// The identifier of the events detection job to stop.
    public var jobId: Swift.String?
    /// The status of the events detection job.
    public var jobStatus: ComprehendClientTypes.JobStatus?

    public init (
        jobId: Swift.String? = nil,
        jobStatus: ComprehendClientTypes.JobStatus? = nil
    )
    {
        self.jobId = jobId
        self.jobStatus = jobStatus
    }
}

struct StopEventsDetectionJobOutputResponseBody: Swift.Equatable {
    let jobId: Swift.String?
    let jobStatus: ComprehendClientTypes.JobStatus?
}

extension StopEventsDetectionJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
        case jobStatus = "JobStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
    }
}

extension StopKeyPhrasesDetectionJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
    }
}

extension StopKeyPhrasesDetectionJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopKeyPhrasesDetectionJobInput: Swift.Equatable {
    /// The identifier of the key phrases detection job to stop.
    /// This member is required.
    public var jobId: Swift.String?

    public init (
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

struct StopKeyPhrasesDetectionJobInputBody: Swift.Equatable {
    let jobId: Swift.String?
}

extension StopKeyPhrasesDetectionJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
    }
}

extension StopKeyPhrasesDetectionJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopKeyPhrasesDetectionJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "JobNotFoundException" : self = .jobNotFoundException(try JobNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StopKeyPhrasesDetectionJobOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case jobNotFoundException(JobNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopKeyPhrasesDetectionJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StopKeyPhrasesDetectionJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobId = output.jobId
            self.jobStatus = output.jobStatus
        } else {
            self.jobId = nil
            self.jobStatus = nil
        }
    }
}

public struct StopKeyPhrasesDetectionJobOutputResponse: Swift.Equatable {
    /// The identifier of the key phrases detection job to stop.
    public var jobId: Swift.String?
    /// Either STOP_REQUESTED if the job is currently running, or STOPPED if the job was previously stopped with the StopKeyPhrasesDetectionJob operation.
    public var jobStatus: ComprehendClientTypes.JobStatus?

    public init (
        jobId: Swift.String? = nil,
        jobStatus: ComprehendClientTypes.JobStatus? = nil
    )
    {
        self.jobId = jobId
        self.jobStatus = jobStatus
    }
}

struct StopKeyPhrasesDetectionJobOutputResponseBody: Swift.Equatable {
    let jobId: Swift.String?
    let jobStatus: ComprehendClientTypes.JobStatus?
}

extension StopKeyPhrasesDetectionJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
        case jobStatus = "JobStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
    }
}

extension StopPiiEntitiesDetectionJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
    }
}

extension StopPiiEntitiesDetectionJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopPiiEntitiesDetectionJobInput: Swift.Equatable {
    /// The identifier of the PII entities detection job to stop.
    /// This member is required.
    public var jobId: Swift.String?

    public init (
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

struct StopPiiEntitiesDetectionJobInputBody: Swift.Equatable {
    let jobId: Swift.String?
}

extension StopPiiEntitiesDetectionJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
    }
}

extension StopPiiEntitiesDetectionJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopPiiEntitiesDetectionJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "JobNotFoundException" : self = .jobNotFoundException(try JobNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StopPiiEntitiesDetectionJobOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case jobNotFoundException(JobNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopPiiEntitiesDetectionJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StopPiiEntitiesDetectionJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobId = output.jobId
            self.jobStatus = output.jobStatus
        } else {
            self.jobId = nil
            self.jobStatus = nil
        }
    }
}

public struct StopPiiEntitiesDetectionJobOutputResponse: Swift.Equatable {
    /// The identifier of the PII entities detection job to stop.
    public var jobId: Swift.String?
    /// The status of the PII entities detection job.
    public var jobStatus: ComprehendClientTypes.JobStatus?

    public init (
        jobId: Swift.String? = nil,
        jobStatus: ComprehendClientTypes.JobStatus? = nil
    )
    {
        self.jobId = jobId
        self.jobStatus = jobStatus
    }
}

struct StopPiiEntitiesDetectionJobOutputResponseBody: Swift.Equatable {
    let jobId: Swift.String?
    let jobStatus: ComprehendClientTypes.JobStatus?
}

extension StopPiiEntitiesDetectionJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
        case jobStatus = "JobStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
    }
}

extension StopSentimentDetectionJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
    }
}

extension StopSentimentDetectionJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopSentimentDetectionJobInput: Swift.Equatable {
    /// The identifier of the sentiment detection job to stop.
    /// This member is required.
    public var jobId: Swift.String?

    public init (
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

struct StopSentimentDetectionJobInputBody: Swift.Equatable {
    let jobId: Swift.String?
}

extension StopSentimentDetectionJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
    }
}

extension StopSentimentDetectionJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopSentimentDetectionJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "JobNotFoundException" : self = .jobNotFoundException(try JobNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StopSentimentDetectionJobOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case jobNotFoundException(JobNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopSentimentDetectionJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StopSentimentDetectionJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobId = output.jobId
            self.jobStatus = output.jobStatus
        } else {
            self.jobId = nil
            self.jobStatus = nil
        }
    }
}

public struct StopSentimentDetectionJobOutputResponse: Swift.Equatable {
    /// The identifier of the sentiment detection job to stop.
    public var jobId: Swift.String?
    /// Either STOP_REQUESTED if the job is currently running, or STOPPED if the job was previously stopped with the StopSentimentDetectionJob operation.
    public var jobStatus: ComprehendClientTypes.JobStatus?

    public init (
        jobId: Swift.String? = nil,
        jobStatus: ComprehendClientTypes.JobStatus? = nil
    )
    {
        self.jobId = jobId
        self.jobStatus = jobStatus
    }
}

struct StopSentimentDetectionJobOutputResponseBody: Swift.Equatable {
    let jobId: Swift.String?
    let jobStatus: ComprehendClientTypes.JobStatus?
}

extension StopSentimentDetectionJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
        case jobStatus = "JobStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
    }
}

extension StopTargetedSentimentDetectionJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
    }
}

extension StopTargetedSentimentDetectionJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopTargetedSentimentDetectionJobInput: Swift.Equatable {
    /// The identifier of the targeted sentiment detection job to stop.
    /// This member is required.
    public var jobId: Swift.String?

    public init (
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

struct StopTargetedSentimentDetectionJobInputBody: Swift.Equatable {
    let jobId: Swift.String?
}

extension StopTargetedSentimentDetectionJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
    }
}

extension StopTargetedSentimentDetectionJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopTargetedSentimentDetectionJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "JobNotFoundException" : self = .jobNotFoundException(try JobNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StopTargetedSentimentDetectionJobOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case jobNotFoundException(JobNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopTargetedSentimentDetectionJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StopTargetedSentimentDetectionJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobId = output.jobId
            self.jobStatus = output.jobStatus
        } else {
            self.jobId = nil
            self.jobStatus = nil
        }
    }
}

public struct StopTargetedSentimentDetectionJobOutputResponse: Swift.Equatable {
    /// The identifier of the targeted sentiment detection job to stop.
    public var jobId: Swift.String?
    /// Either STOP_REQUESTED if the job is currently running, or STOPPED if the job was previously stopped with the StopSentimentDetectionJob operation.
    public var jobStatus: ComprehendClientTypes.JobStatus?

    public init (
        jobId: Swift.String? = nil,
        jobStatus: ComprehendClientTypes.JobStatus? = nil
    )
    {
        self.jobId = jobId
        self.jobStatus = jobStatus
    }
}

struct StopTargetedSentimentDetectionJobOutputResponseBody: Swift.Equatable {
    let jobId: Swift.String?
    let jobStatus: ComprehendClientTypes.JobStatus?
}

extension StopTargetedSentimentDetectionJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
        case jobStatus = "JobStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
    }
}

extension StopTrainingDocumentClassifierInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case documentClassifierArn = "DocumentClassifierArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let documentClassifierArn = self.documentClassifierArn {
            try encodeContainer.encode(documentClassifierArn, forKey: .documentClassifierArn)
        }
    }
}

extension StopTrainingDocumentClassifierInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopTrainingDocumentClassifierInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) that identifies the document classifier currently being trained.
    /// This member is required.
    public var documentClassifierArn: Swift.String?

    public init (
        documentClassifierArn: Swift.String? = nil
    )
    {
        self.documentClassifierArn = documentClassifierArn
    }
}

struct StopTrainingDocumentClassifierInputBody: Swift.Equatable {
    let documentClassifierArn: Swift.String?
}

extension StopTrainingDocumentClassifierInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case documentClassifierArn = "DocumentClassifierArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentClassifierArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentClassifierArn)
        documentClassifierArn = documentClassifierArnDecoded
    }
}

extension StopTrainingDocumentClassifierOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopTrainingDocumentClassifierOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StopTrainingDocumentClassifierOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopTrainingDocumentClassifierOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct StopTrainingDocumentClassifierOutputResponse: Swift.Equatable {

    public init () { }
}

extension StopTrainingEntityRecognizerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entityRecognizerArn = "EntityRecognizerArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let entityRecognizerArn = self.entityRecognizerArn {
            try encodeContainer.encode(entityRecognizerArn, forKey: .entityRecognizerArn)
        }
    }
}

extension StopTrainingEntityRecognizerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopTrainingEntityRecognizerInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) that identifies the entity recognizer currently being trained.
    /// This member is required.
    public var entityRecognizerArn: Swift.String?

    public init (
        entityRecognizerArn: Swift.String? = nil
    )
    {
        self.entityRecognizerArn = entityRecognizerArn
    }
}

struct StopTrainingEntityRecognizerInputBody: Swift.Equatable {
    let entityRecognizerArn: Swift.String?
}

extension StopTrainingEntityRecognizerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entityRecognizerArn = "EntityRecognizerArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let entityRecognizerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .entityRecognizerArn)
        entityRecognizerArn = entityRecognizerArnDecoded
    }
}

extension StopTrainingEntityRecognizerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopTrainingEntityRecognizerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StopTrainingEntityRecognizerOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopTrainingEntityRecognizerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct StopTrainingEntityRecognizerOutputResponse: Swift.Equatable {

    public init () { }
}

extension ComprehendClientTypes {
    public enum SyntaxLanguageCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case de
        case en
        case es
        case fr
        case it
        case pt
        case sdkUnknown(Swift.String)

        public static var allCases: [SyntaxLanguageCode] {
            return [
                .de,
                .en,
                .es,
                .fr,
                .it,
                .pt,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .de: return "de"
            case .en: return "en"
            case .es: return "es"
            case .fr: return "fr"
            case .it: return "it"
            case .pt: return "pt"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SyntaxLanguageCode(rawValue: rawValue) ?? SyntaxLanguageCode.sdkUnknown(rawValue)
        }
    }
}

extension ComprehendClientTypes.SyntaxToken: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case beginOffset = "BeginOffset"
        case endOffset = "EndOffset"
        case partOfSpeech = "PartOfSpeech"
        case text = "Text"
        case tokenId = "TokenId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let beginOffset = self.beginOffset {
            try encodeContainer.encode(beginOffset, forKey: .beginOffset)
        }
        if let endOffset = self.endOffset {
            try encodeContainer.encode(endOffset, forKey: .endOffset)
        }
        if let partOfSpeech = self.partOfSpeech {
            try encodeContainer.encode(partOfSpeech, forKey: .partOfSpeech)
        }
        if let text = self.text {
            try encodeContainer.encode(text, forKey: .text)
        }
        if let tokenId = self.tokenId {
            try encodeContainer.encode(tokenId, forKey: .tokenId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tokenIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .tokenId)
        tokenId = tokenIdDecoded
        let textDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .text)
        text = textDecoded
        let beginOffsetDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .beginOffset)
        beginOffset = beginOffsetDecoded
        let endOffsetDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .endOffset)
        endOffset = endOffsetDecoded
        let partOfSpeechDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.PartOfSpeechTag.self, forKey: .partOfSpeech)
        partOfSpeech = partOfSpeechDecoded
    }
}

extension ComprehendClientTypes {
    /// Represents a work in the input text that was recognized and assigned a part of speech. There is one syntax token record for each word in the source text.
    public struct SyntaxToken: Swift.Equatable {
        /// The zero-based offset from the beginning of the source text to the first character in the word.
        public var beginOffset: Swift.Int?
        /// The zero-based offset from the beginning of the source text to the last character in the word.
        public var endOffset: Swift.Int?
        /// Provides the part of speech label and the confidence level that Amazon Comprehend has that the part of speech was correctly identified. For more information, see [Syntax](https://docs.aws.amazon.com/comprehend/latest/dg/how-syntax.html) in the Comprehend Developer Guide.
        public var partOfSpeech: ComprehendClientTypes.PartOfSpeechTag?
        /// The word that was recognized in the source text.
        public var text: Swift.String?
        /// A unique identifier for a token.
        public var tokenId: Swift.Int?

        public init (
            beginOffset: Swift.Int? = nil,
            endOffset: Swift.Int? = nil,
            partOfSpeech: ComprehendClientTypes.PartOfSpeechTag? = nil,
            text: Swift.String? = nil,
            tokenId: Swift.Int? = nil
        )
        {
            self.beginOffset = beginOffset
            self.endOffset = endOffset
            self.partOfSpeech = partOfSpeech
            self.text = text
            self.tokenId = tokenId
        }
    }

}

extension ComprehendClientTypes.Tag: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension ComprehendClientTypes {
    /// A key-value pair that adds as a metadata to a resource used by Amazon Comprehend. For example, a tag with the key-value pair ‘Department’:’Sales’ might be added to a resource to indicate its use by a particular department.
    public struct Tag: Swift.Equatable {
        /// The initial part of a key-value pair that forms a tag associated with a given resource. For instance, if you want to show which resources are used by which departments, you might use “Department” as the key portion of the pair, with multiple possible values such as “sales,” “legal,” and “administration.”
        /// This member is required.
        public var key: Swift.String?
        /// The second part of a key-value pair that forms a tag associated with a given resource. For instance, if you want to show which resources are used by which departments, you might use “Department” as the initial (key) portion of the pair, with a value of “sales” to indicate the sales department.
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension TagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension TagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct TagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the given Amazon Comprehend resource to which you want to associate the tags.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// Tags being associated with a specific Amazon Comprehend resource. There can be a maximum of 50 tags (both existing and pending) associated with a specific resource.
    /// This member is required.
    public var tags: [ComprehendClientTypes.Tag]?

    public init (
        resourceArn: Swift.String? = nil,
        tags: [ComprehendClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let tags: [ComprehendClientTypes.Tag]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[ComprehendClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [ComprehendClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyTagsException(TooManyTagsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension ComprehendClientTypes.TargetedSentimentDetectionJobFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobName = "JobName"
        case jobStatus = "JobStatus"
        case submitTimeAfter = "SubmitTimeAfter"
        case submitTimeBefore = "SubmitTimeBefore"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobName = self.jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let jobStatus = self.jobStatus {
            try encodeContainer.encode(jobStatus.rawValue, forKey: .jobStatus)
        }
        if let submitTimeAfter = self.submitTimeAfter {
            try encodeContainer.encodeTimestamp(submitTimeAfter, format: .epochSeconds, forKey: .submitTimeAfter)
        }
        if let submitTimeBefore = self.submitTimeBefore {
            try encodeContainer.encodeTimestamp(submitTimeBefore, format: .epochSeconds, forKey: .submitTimeBefore)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let submitTimeBeforeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .submitTimeBefore)
        submitTimeBefore = submitTimeBeforeDecoded
        let submitTimeAfterDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .submitTimeAfter)
        submitTimeAfter = submitTimeAfterDecoded
    }
}

extension ComprehendClientTypes {
    /// Provides information for filtering a list of dominant language detection jobs. For more information, see the operation.
    public struct TargetedSentimentDetectionJobFilter: Swift.Equatable {
        /// Filters on the name of the job.
        public var jobName: Swift.String?
        /// Filters the list of jobs based on job status. Returns only jobs with the specified status.
        public var jobStatus: ComprehendClientTypes.JobStatus?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest.
        public var submitTimeAfter: ClientRuntime.Date?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest.
        public var submitTimeBefore: ClientRuntime.Date?

        public init (
            jobName: Swift.String? = nil,
            jobStatus: ComprehendClientTypes.JobStatus? = nil,
            submitTimeAfter: ClientRuntime.Date? = nil,
            submitTimeBefore: ClientRuntime.Date? = nil
        )
        {
            self.jobName = jobName
            self.jobStatus = jobStatus
            self.submitTimeAfter = submitTimeAfter
            self.submitTimeBefore = submitTimeBefore
        }
    }

}

extension ComprehendClientTypes.TargetedSentimentDetectionJobProperties: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataAccessRoleArn = "DataAccessRoleArn"
        case endTime = "EndTime"
        case inputDataConfig = "InputDataConfig"
        case jobArn = "JobArn"
        case jobId = "JobId"
        case jobName = "JobName"
        case jobStatus = "JobStatus"
        case languageCode = "LanguageCode"
        case message = "Message"
        case outputDataConfig = "OutputDataConfig"
        case submitTime = "SubmitTime"
        case volumeKmsKeyId = "VolumeKmsKeyId"
        case vpcConfig = "VpcConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataAccessRoleArn = self.dataAccessRoleArn {
            try encodeContainer.encode(dataAccessRoleArn, forKey: .dataAccessRoleArn)
        }
        if let endTime = self.endTime {
            try encodeContainer.encodeTimestamp(endTime, format: .epochSeconds, forKey: .endTime)
        }
        if let inputDataConfig = self.inputDataConfig {
            try encodeContainer.encode(inputDataConfig, forKey: .inputDataConfig)
        }
        if let jobArn = self.jobArn {
            try encodeContainer.encode(jobArn, forKey: .jobArn)
        }
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let jobName = self.jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let jobStatus = self.jobStatus {
            try encodeContainer.encode(jobStatus.rawValue, forKey: .jobStatus)
        }
        if let languageCode = self.languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let outputDataConfig = self.outputDataConfig {
            try encodeContainer.encode(outputDataConfig, forKey: .outputDataConfig)
        }
        if let submitTime = self.submitTime {
            try encodeContainer.encodeTimestamp(submitTime, format: .epochSeconds, forKey: .submitTime)
        }
        if let volumeKmsKeyId = self.volumeKmsKeyId {
            try encodeContainer.encode(volumeKmsKeyId, forKey: .volumeKmsKeyId)
        }
        if let vpcConfig = self.vpcConfig {
            try encodeContainer.encode(vpcConfig, forKey: .vpcConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let jobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobArn)
        jobArn = jobArnDecoded
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let submitTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .submitTime)
        submitTime = submitTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endTime)
        endTime = endTimeDecoded
        let inputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.InputDataConfig.self, forKey: .inputDataConfig)
        inputDataConfig = inputDataConfigDecoded
        let outputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.OutputDataConfig.self, forKey: .outputDataConfig)
        outputDataConfig = outputDataConfigDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let dataAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataAccessRoleArn)
        dataAccessRoleArn = dataAccessRoleArnDecoded
        let volumeKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeKmsKeyId)
        volumeKmsKeyId = volumeKmsKeyIdDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
    }
}

extension ComprehendClientTypes {
    /// Provides information about a targeted sentiment detection job.
    public struct TargetedSentimentDetectionJobProperties: Swift.Equatable {
        /// The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input data.
        public var dataAccessRoleArn: Swift.String?
        /// The time that the targeted sentiment detection job ended.
        public var endTime: ClientRuntime.Date?
        /// The input properties for an inference job. The document reader config field applies only to non-text inputs for custom analysis.
        public var inputDataConfig: ComprehendClientTypes.InputDataConfig?
        /// The Amazon Resource Name (ARN) of the targeted sentiment detection job. It is a unique, fully qualified identifier for the job. It includes the AWS account, Region, and the job ID. The format of the ARN is as follows: arn::comprehend:::targeted-sentiment-detection-job/ The following is an example job ARN: arn:aws:comprehend:us-west-2:111122223333:targeted-sentiment-detection-job/1234abcd12ab34cd56ef1234567890ab
        public var jobArn: Swift.String?
        /// The identifier assigned to the targeted sentiment detection job.
        public var jobId: Swift.String?
        /// The name that you assigned to the targeted sentiment detection job.
        public var jobName: Swift.String?
        /// The current status of the targeted sentiment detection job. If the status is FAILED, the Messages field shows the reason for the failure.
        public var jobStatus: ComprehendClientTypes.JobStatus?
        /// The language code of the input documents.
        public var languageCode: ComprehendClientTypes.LanguageCode?
        /// A description of the status of a job.
        public var message: Swift.String?
        /// Provides configuration parameters for the output of inference jobs.
        public var outputDataConfig: ComprehendClientTypes.OutputDataConfig?
        /// The time that the targeted sentiment detection job was submitted for processing.
        public var submitTime: ClientRuntime.Date?
        /// ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the targeted sentiment detection job. The VolumeKmsKeyId can be either of the following formats:
        ///
        /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
        public var volumeKmsKeyId: Swift.String?
        /// Configuration parameters for an optional private Virtual Private Cloud (VPC) containing the resources you are using for the job. For more information, see [Amazon VPC](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html).
        public var vpcConfig: ComprehendClientTypes.VpcConfig?

        public init (
            dataAccessRoleArn: Swift.String? = nil,
            endTime: ClientRuntime.Date? = nil,
            inputDataConfig: ComprehendClientTypes.InputDataConfig? = nil,
            jobArn: Swift.String? = nil,
            jobId: Swift.String? = nil,
            jobName: Swift.String? = nil,
            jobStatus: ComprehendClientTypes.JobStatus? = nil,
            languageCode: ComprehendClientTypes.LanguageCode? = nil,
            message: Swift.String? = nil,
            outputDataConfig: ComprehendClientTypes.OutputDataConfig? = nil,
            submitTime: ClientRuntime.Date? = nil,
            volumeKmsKeyId: Swift.String? = nil,
            vpcConfig: ComprehendClientTypes.VpcConfig? = nil
        )
        {
            self.dataAccessRoleArn = dataAccessRoleArn
            self.endTime = endTime
            self.inputDataConfig = inputDataConfig
            self.jobArn = jobArn
            self.jobId = jobId
            self.jobName = jobName
            self.jobStatus = jobStatus
            self.languageCode = languageCode
            self.message = message
            self.outputDataConfig = outputDataConfig
            self.submitTime = submitTime
            self.volumeKmsKeyId = volumeKmsKeyId
            self.vpcConfig = vpcConfig
        }
    }

}

extension ComprehendClientTypes.TargetedSentimentEntity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case descriptiveMentionIndex = "DescriptiveMentionIndex"
        case mentions = "Mentions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let descriptiveMentionIndex = descriptiveMentionIndex {
            var descriptiveMentionIndexContainer = encodeContainer.nestedUnkeyedContainer(forKey: .descriptiveMentionIndex)
            for integer0 in descriptiveMentionIndex {
                try descriptiveMentionIndexContainer.encode(integer0)
            }
        }
        if let mentions = mentions {
            var mentionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mentions)
            for targetedsentimentmention0 in mentions {
                try mentionsContainer.encode(targetedsentimentmention0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptiveMentionIndexContainer = try containerValues.decodeIfPresent([Swift.Int?].self, forKey: .descriptiveMentionIndex)
        var descriptiveMentionIndexDecoded0:[Swift.Int]? = nil
        if let descriptiveMentionIndexContainer = descriptiveMentionIndexContainer {
            descriptiveMentionIndexDecoded0 = [Swift.Int]()
            for integer0 in descriptiveMentionIndexContainer {
                if let integer0 = integer0 {
                    descriptiveMentionIndexDecoded0?.append(integer0)
                }
            }
        }
        descriptiveMentionIndex = descriptiveMentionIndexDecoded0
        let mentionsContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.TargetedSentimentMention?].self, forKey: .mentions)
        var mentionsDecoded0:[ComprehendClientTypes.TargetedSentimentMention]? = nil
        if let mentionsContainer = mentionsContainer {
            mentionsDecoded0 = [ComprehendClientTypes.TargetedSentimentMention]()
            for structure0 in mentionsContainer {
                if let structure0 = structure0 {
                    mentionsDecoded0?.append(structure0)
                }
            }
        }
        mentions = mentionsDecoded0
    }
}

extension ComprehendClientTypes {
    /// Information about one of the entities found by targeted sentiment analysis. For more information about targeted sentiment, see [Targeted sentiment](https://docs.aws.amazon.com/comprehend/latest/dg/how-targeted-sentiment.html).
    public struct TargetedSentimentEntity: Swift.Equatable {
        /// One or more index into the Mentions array that provides the best name for the entity group.
        public var descriptiveMentionIndex: [Swift.Int]?
        /// An array of mentions of the entity in the document. The array represents a co-reference group. See [ Co-reference group](https://docs.aws.amazon.com/comprehend/latest/dg/how-targeted-sentiment.html#how-targeted-sentiment-values) for an example.
        public var mentions: [ComprehendClientTypes.TargetedSentimentMention]?

        public init (
            descriptiveMentionIndex: [Swift.Int]? = nil,
            mentions: [ComprehendClientTypes.TargetedSentimentMention]? = nil
        )
        {
            self.descriptiveMentionIndex = descriptiveMentionIndex
            self.mentions = mentions
        }
    }

}

extension ComprehendClientTypes {
    public enum TargetedSentimentEntityType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case attribute
        case book
        case brand
        case commercialItem
        case date
        case event
        case facility
        case game
        case location
        case movie
        case music
        case organization
        case other
        case person
        case personalTitle
        case quantity
        case software
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetedSentimentEntityType] {
            return [
                .attribute,
                .book,
                .brand,
                .commercialItem,
                .date,
                .event,
                .facility,
                .game,
                .location,
                .movie,
                .music,
                .organization,
                .other,
                .person,
                .personalTitle,
                .quantity,
                .software,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .attribute: return "ATTRIBUTE"
            case .book: return "BOOK"
            case .brand: return "BRAND"
            case .commercialItem: return "COMMERCIAL_ITEM"
            case .date: return "DATE"
            case .event: return "EVENT"
            case .facility: return "FACILITY"
            case .game: return "GAME"
            case .location: return "LOCATION"
            case .movie: return "MOVIE"
            case .music: return "MUSIC"
            case .organization: return "ORGANIZATION"
            case .other: return "OTHER"
            case .person: return "PERSON"
            case .personalTitle: return "PERSONAL_TITLE"
            case .quantity: return "QUANTITY"
            case .software: return "SOFTWARE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TargetedSentimentEntityType(rawValue: rawValue) ?? TargetedSentimentEntityType.sdkUnknown(rawValue)
        }
    }
}

extension ComprehendClientTypes.TargetedSentimentMention: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case beginOffset = "BeginOffset"
        case endOffset = "EndOffset"
        case groupScore = "GroupScore"
        case mentionSentiment = "MentionSentiment"
        case score = "Score"
        case text = "Text"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let beginOffset = self.beginOffset {
            try encodeContainer.encode(beginOffset, forKey: .beginOffset)
        }
        if let endOffset = self.endOffset {
            try encodeContainer.encode(endOffset, forKey: .endOffset)
        }
        if let groupScore = self.groupScore {
            try encodeContainer.encode(groupScore, forKey: .groupScore)
        }
        if let mentionSentiment = self.mentionSentiment {
            try encodeContainer.encode(mentionSentiment, forKey: .mentionSentiment)
        }
        if let score = self.score {
            try encodeContainer.encode(score, forKey: .score)
        }
        if let text = self.text {
            try encodeContainer.encode(text, forKey: .text)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scoreDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .score)
        score = scoreDecoded
        let groupScoreDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .groupScore)
        groupScore = groupScoreDecoded
        let textDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .text)
        text = textDecoded
        let typeDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.TargetedSentimentEntityType.self, forKey: .type)
        type = typeDecoded
        let mentionSentimentDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.MentionSentiment.self, forKey: .mentionSentiment)
        mentionSentiment = mentionSentimentDecoded
        let beginOffsetDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .beginOffset)
        beginOffset = beginOffsetDecoded
        let endOffsetDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .endOffset)
        endOffset = endOffsetDecoded
    }
}

extension ComprehendClientTypes {
    /// Information about one mention of an entity. The mention information includes the location of the mention in the text and the sentiment of the mention. For more information about targeted sentiment, see [Targeted sentiment](https://docs.aws.amazon.com/comprehend/latest/dg/how-targeted-sentiment.html).
    public struct TargetedSentimentMention: Swift.Equatable {
        /// The offset into the document text where the mention begins.
        public var beginOffset: Swift.Int?
        /// The offset into the document text where the mention ends.
        public var endOffset: Swift.Int?
        /// The confidence that all the entities mentioned in the group relate to the same entity.
        public var groupScore: Swift.Float?
        /// Contains the sentiment and sentiment score for the mention.
        public var mentionSentiment: ComprehendClientTypes.MentionSentiment?
        /// Model confidence that the entity is relevant. Value range is zero to one, where one is highest confidence.
        public var score: Swift.Float?
        /// The text in the document that identifies the entity.
        public var text: Swift.String?
        /// The type of the entity. Amazon Comprehend supports a variety of [entity types](https://docs.aws.amazon.com/comprehend/latest/dg/how-targeted-sentiment.html#how-targeted-sentiment-entities).
        public var type: ComprehendClientTypes.TargetedSentimentEntityType?

        public init (
            beginOffset: Swift.Int? = nil,
            endOffset: Swift.Int? = nil,
            groupScore: Swift.Float? = nil,
            mentionSentiment: ComprehendClientTypes.MentionSentiment? = nil,
            score: Swift.Float? = nil,
            text: Swift.String? = nil,
            type: ComprehendClientTypes.TargetedSentimentEntityType? = nil
        )
        {
            self.beginOffset = beginOffset
            self.endOffset = endOffset
            self.groupScore = groupScore
            self.mentionSentiment = mentionSentiment
            self.score = score
            self.text = text
            self.type = type
        }
    }

}

extension TextSizeLimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TextSizeLimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The size of the input text exceeds the limit. Use a smaller document.
public struct TextSizeLimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TextSizeLimitExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension TextSizeLimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TooManyRequestsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TooManyRequestsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The number of requests exceeds the limit. Resubmit your request later.
public struct TooManyRequestsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TooManyRequestsExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension TooManyRequestsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TooManyTagKeysException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TooManyTagKeysExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request contains more tag keys than can be associated with a resource (50 tag keys per resource).
public struct TooManyTagKeysException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TooManyTagKeysExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension TooManyTagKeysExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TooManyTagsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TooManyTagsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request contains more tags than can be associated with a resource (50 tags per resource). The maximum number of tags includes both existing tags and those included in your current request.
public struct TooManyTagsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TooManyTagsExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension TooManyTagsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ComprehendClientTypes.TopicsDetectionJobFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobName = "JobName"
        case jobStatus = "JobStatus"
        case submitTimeAfter = "SubmitTimeAfter"
        case submitTimeBefore = "SubmitTimeBefore"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobName = self.jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let jobStatus = self.jobStatus {
            try encodeContainer.encode(jobStatus.rawValue, forKey: .jobStatus)
        }
        if let submitTimeAfter = self.submitTimeAfter {
            try encodeContainer.encodeTimestamp(submitTimeAfter, format: .epochSeconds, forKey: .submitTimeAfter)
        }
        if let submitTimeBefore = self.submitTimeBefore {
            try encodeContainer.encodeTimestamp(submitTimeBefore, format: .epochSeconds, forKey: .submitTimeBefore)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let submitTimeBeforeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .submitTimeBefore)
        submitTimeBefore = submitTimeBeforeDecoded
        let submitTimeAfterDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .submitTimeAfter)
        submitTimeAfter = submitTimeAfterDecoded
    }
}

extension ComprehendClientTypes {
    /// Provides information for filtering topic detection jobs. For more information, see .
    public struct TopicsDetectionJobFilter: Swift.Equatable {
        ///
        public var jobName: Swift.String?
        /// Filters the list of topic detection jobs based on job status. Returns only jobs with the specified status.
        public var jobStatus: ComprehendClientTypes.JobStatus?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Only returns jobs submitted after the specified time. Jobs are returned in ascending order, oldest to newest.
        public var submitTimeAfter: ClientRuntime.Date?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Only returns jobs submitted before the specified time. Jobs are returned in descending order, newest to oldest.
        public var submitTimeBefore: ClientRuntime.Date?

        public init (
            jobName: Swift.String? = nil,
            jobStatus: ComprehendClientTypes.JobStatus? = nil,
            submitTimeAfter: ClientRuntime.Date? = nil,
            submitTimeBefore: ClientRuntime.Date? = nil
        )
        {
            self.jobName = jobName
            self.jobStatus = jobStatus
            self.submitTimeAfter = submitTimeAfter
            self.submitTimeBefore = submitTimeBefore
        }
    }

}

extension ComprehendClientTypes.TopicsDetectionJobProperties: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataAccessRoleArn = "DataAccessRoleArn"
        case endTime = "EndTime"
        case inputDataConfig = "InputDataConfig"
        case jobArn = "JobArn"
        case jobId = "JobId"
        case jobName = "JobName"
        case jobStatus = "JobStatus"
        case message = "Message"
        case numberOfTopics = "NumberOfTopics"
        case outputDataConfig = "OutputDataConfig"
        case submitTime = "SubmitTime"
        case volumeKmsKeyId = "VolumeKmsKeyId"
        case vpcConfig = "VpcConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataAccessRoleArn = self.dataAccessRoleArn {
            try encodeContainer.encode(dataAccessRoleArn, forKey: .dataAccessRoleArn)
        }
        if let endTime = self.endTime {
            try encodeContainer.encodeTimestamp(endTime, format: .epochSeconds, forKey: .endTime)
        }
        if let inputDataConfig = self.inputDataConfig {
            try encodeContainer.encode(inputDataConfig, forKey: .inputDataConfig)
        }
        if let jobArn = self.jobArn {
            try encodeContainer.encode(jobArn, forKey: .jobArn)
        }
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let jobName = self.jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let jobStatus = self.jobStatus {
            try encodeContainer.encode(jobStatus.rawValue, forKey: .jobStatus)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let numberOfTopics = self.numberOfTopics {
            try encodeContainer.encode(numberOfTopics, forKey: .numberOfTopics)
        }
        if let outputDataConfig = self.outputDataConfig {
            try encodeContainer.encode(outputDataConfig, forKey: .outputDataConfig)
        }
        if let submitTime = self.submitTime {
            try encodeContainer.encodeTimestamp(submitTime, format: .epochSeconds, forKey: .submitTime)
        }
        if let volumeKmsKeyId = self.volumeKmsKeyId {
            try encodeContainer.encode(volumeKmsKeyId, forKey: .volumeKmsKeyId)
        }
        if let vpcConfig = self.vpcConfig {
            try encodeContainer.encode(vpcConfig, forKey: .vpcConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let jobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobArn)
        jobArn = jobArnDecoded
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let submitTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .submitTime)
        submitTime = submitTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endTime)
        endTime = endTimeDecoded
        let inputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.InputDataConfig.self, forKey: .inputDataConfig)
        inputDataConfig = inputDataConfigDecoded
        let outputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.OutputDataConfig.self, forKey: .outputDataConfig)
        outputDataConfig = outputDataConfigDecoded
        let numberOfTopicsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfTopics)
        numberOfTopics = numberOfTopicsDecoded
        let dataAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataAccessRoleArn)
        dataAccessRoleArn = dataAccessRoleArnDecoded
        let volumeKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeKmsKeyId)
        volumeKmsKeyId = volumeKmsKeyIdDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
    }
}

extension ComprehendClientTypes {
    /// Provides information about a topic detection job.
    public struct TopicsDetectionJobProperties: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the AWS Identity and Management (IAM) role that grants Amazon Comprehend read access to your job data.
        public var dataAccessRoleArn: Swift.String?
        /// The time that the topic detection job was completed.
        public var endTime: ClientRuntime.Date?
        /// The input data configuration supplied when you created the topic detection job.
        public var inputDataConfig: ComprehendClientTypes.InputDataConfig?
        /// The Amazon Resource Name (ARN) of the topics detection job. It is a unique, fully qualified identifier for the job. It includes the AWS account, Region, and the job ID. The format of the ARN is as follows: arn::comprehend:::topics-detection-job/ The following is an example job ARN: arn:aws:comprehend:us-west-2:111122223333:topics-detection-job/1234abcd12ab34cd56ef1234567890ab
        public var jobArn: Swift.String?
        /// The identifier assigned to the topic detection job.
        public var jobId: Swift.String?
        /// The name of the topic detection job.
        public var jobName: Swift.String?
        /// The current status of the topic detection job. If the status is Failed, the reason for the failure is shown in the Message field.
        public var jobStatus: ComprehendClientTypes.JobStatus?
        /// A description for the status of a job.
        public var message: Swift.String?
        /// The number of topics to detect supplied when you created the topic detection job. The default is 10.
        public var numberOfTopics: Swift.Int?
        /// The output data configuration supplied when you created the topic detection job.
        public var outputDataConfig: ComprehendClientTypes.OutputDataConfig?
        /// The time that the topic detection job was submitted for processing.
        public var submitTime: ClientRuntime.Date?
        /// ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:
        ///
        /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
        public var volumeKmsKeyId: Swift.String?
        /// Configuration parameters for a private Virtual Private Cloud (VPC) containing the resources you are using for your topic detection job. For more information, see [Amazon VPC](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html).
        public var vpcConfig: ComprehendClientTypes.VpcConfig?

        public init (
            dataAccessRoleArn: Swift.String? = nil,
            endTime: ClientRuntime.Date? = nil,
            inputDataConfig: ComprehendClientTypes.InputDataConfig? = nil,
            jobArn: Swift.String? = nil,
            jobId: Swift.String? = nil,
            jobName: Swift.String? = nil,
            jobStatus: ComprehendClientTypes.JobStatus? = nil,
            message: Swift.String? = nil,
            numberOfTopics: Swift.Int? = nil,
            outputDataConfig: ComprehendClientTypes.OutputDataConfig? = nil,
            submitTime: ClientRuntime.Date? = nil,
            volumeKmsKeyId: Swift.String? = nil,
            vpcConfig: ComprehendClientTypes.VpcConfig? = nil
        )
        {
            self.dataAccessRoleArn = dataAccessRoleArn
            self.endTime = endTime
            self.inputDataConfig = inputDataConfig
            self.jobArn = jobArn
            self.jobId = jobId
            self.jobName = jobName
            self.jobStatus = jobStatus
            self.message = message
            self.numberOfTopics = numberOfTopics
            self.outputDataConfig = outputDataConfig
            self.submitTime = submitTime
            self.volumeKmsKeyId = volumeKmsKeyId
            self.vpcConfig = vpcConfig
        }
    }

}

extension UnsupportedLanguageException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UnsupportedLanguageExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Amazon Comprehend can't process the language of the input text. For custom entity recognition APIs, only English, Spanish, French, Italian, German, or Portuguese are accepted. For a list of supported languages, [Supported languages](https://docs.aws.amazon.com/comprehend/latest/dg/supported-languages.html) in the Comprehend Developer Guide.
public struct UnsupportedLanguageException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct UnsupportedLanguageExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension UnsupportedLanguageExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UntagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tagKeys = "TagKeys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for tagkey0 in tagKeys {
                try tagKeysContainer.encode(tagkey0)
            }
        }
    }
}

extension UntagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UntagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the given Amazon Comprehend resource from which you want to remove the tags.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The initial part of a key-value pair that forms a tag being removed from a given resource. For example, a tag with "Sales" as the key might be added to a resource to indicate its use by the sales department. Keys must be unique and cannot be duplicated for a particular resource.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let tagKeys: [Swift.String]?
}

extension UntagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tagKeys = "TagKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[Swift.String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [Swift.String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagKeysException" : self = .tooManyTagKeysException(try TooManyTagKeysException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyTagKeysException(TooManyTagKeysException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateEndpointInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case desiredDataAccessRoleArn = "DesiredDataAccessRoleArn"
        case desiredInferenceUnits = "DesiredInferenceUnits"
        case desiredModelArn = "DesiredModelArn"
        case endpointArn = "EndpointArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let desiredDataAccessRoleArn = self.desiredDataAccessRoleArn {
            try encodeContainer.encode(desiredDataAccessRoleArn, forKey: .desiredDataAccessRoleArn)
        }
        if let desiredInferenceUnits = self.desiredInferenceUnits {
            try encodeContainer.encode(desiredInferenceUnits, forKey: .desiredInferenceUnits)
        }
        if let desiredModelArn = self.desiredModelArn {
            try encodeContainer.encode(desiredModelArn, forKey: .desiredModelArn)
        }
        if let endpointArn = self.endpointArn {
            try encodeContainer.encode(endpointArn, forKey: .endpointArn)
        }
    }
}

extension UpdateEndpointInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateEndpointInput: Swift.Equatable {
    /// Data access role ARN to use in case the new model is encrypted with a customer CMK.
    public var desiredDataAccessRoleArn: Swift.String?
    /// The desired number of inference units to be used by the model using this endpoint. Each inference unit represents of a throughput of 100 characters per second.
    public var desiredInferenceUnits: Swift.Int?
    /// The ARN of the new model to use when updating an existing endpoint.
    public var desiredModelArn: Swift.String?
    /// The Amazon Resource Number (ARN) of the endpoint being updated.
    /// This member is required.
    public var endpointArn: Swift.String?

    public init (
        desiredDataAccessRoleArn: Swift.String? = nil,
        desiredInferenceUnits: Swift.Int? = nil,
        desiredModelArn: Swift.String? = nil,
        endpointArn: Swift.String? = nil
    )
    {
        self.desiredDataAccessRoleArn = desiredDataAccessRoleArn
        self.desiredInferenceUnits = desiredInferenceUnits
        self.desiredModelArn = desiredModelArn
        self.endpointArn = endpointArn
    }
}

struct UpdateEndpointInputBody: Swift.Equatable {
    let endpointArn: Swift.String?
    let desiredModelArn: Swift.String?
    let desiredInferenceUnits: Swift.Int?
    let desiredDataAccessRoleArn: Swift.String?
}

extension UpdateEndpointInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case desiredDataAccessRoleArn = "DesiredDataAccessRoleArn"
        case desiredInferenceUnits = "DesiredInferenceUnits"
        case desiredModelArn = "DesiredModelArn"
        case endpointArn = "EndpointArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointArn)
        endpointArn = endpointArnDecoded
        let desiredModelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .desiredModelArn)
        desiredModelArn = desiredModelArnDecoded
        let desiredInferenceUnitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .desiredInferenceUnits)
        desiredInferenceUnits = desiredInferenceUnitsDecoded
        let desiredDataAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .desiredDataAccessRoleArn)
        desiredDataAccessRoleArn = desiredDataAccessRoleArnDecoded
    }
}

extension UpdateEndpointOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateEndpointOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceededException" : self = .resourceLimitExceededException(try ResourceLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceUnavailableException" : self = .resourceUnavailableException(try ResourceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateEndpointOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case resourceInUseException(ResourceInUseException)
    case resourceLimitExceededException(ResourceLimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case resourceUnavailableException(ResourceUnavailableException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateEndpointOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateEndpointOutputResponse: Swift.Equatable {

    public init () { }
}

extension ComprehendClientTypes.VpcConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case securityGroupIds = "SecurityGroupIds"
        case subnets = "Subnets"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for securitygroupid0 in securityGroupIds {
                try securityGroupIdsContainer.encode(securitygroupid0)
            }
        }
        if let subnets = subnets {
            var subnetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnets)
            for subnetid0 in subnets {
                try subnetsContainer.encode(subnetid0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
        let subnetsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnets)
        var subnetsDecoded0:[Swift.String]? = nil
        if let subnetsContainer = subnetsContainer {
            subnetsDecoded0 = [Swift.String]()
            for string0 in subnetsContainer {
                if let string0 = string0 {
                    subnetsDecoded0?.append(string0)
                }
            }
        }
        subnets = subnetsDecoded0
    }
}

extension ComprehendClientTypes {
    /// Configuration parameters for an optional private Virtual Private Cloud (VPC) containing the resources you are using for the job. For more information, see [Amazon VPC](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html).
    public struct VpcConfig: Swift.Equatable {
        /// The ID number for a security group on an instance of your private VPC. Security groups on your VPC function serve as a virtual firewall to control inbound and outbound traffic and provides security for the resources that you’ll be accessing on the VPC. This ID number is preceded by "sg-", for instance: "sg-03b388029b0a285ea". For more information, see [Security Groups for your VPC](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html).
        /// This member is required.
        public var securityGroupIds: [Swift.String]?
        /// The ID for each subnet being used in your private VPC. This subnet is a subset of the a range of IPv4 addresses used by the VPC and is specific to a given availability zone in the VPC’s region. This ID number is preceded by "subnet-", for instance: "subnet-04ccf456919e69055". For more information, see [VPCs and Subnets](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html).
        /// This member is required.
        public var subnets: [Swift.String]?

        public init (
            securityGroupIds: [Swift.String]? = nil,
            subnets: [Swift.String]? = nil
        )
        {
            self.securityGroupIds = securityGroupIds
            self.subnets = subnets
        }
    }

}
