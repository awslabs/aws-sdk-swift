//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!



@_spi(AuthTokenGenerator) import class AWSClientRuntime.AuthTokenGenerator
import SmithyIdentity
import struct Foundation.TimeInterval

/// A utility class with methods that generate IAM authentication token used for connecting to DSQL.
public class AuthTokenGenerator {
    private let generator: AWSClientRuntime.AuthTokenGenerator

    /// The initializer that takes in AWSCredentialIdentity struct to use to generate the IAM authentication token.
    public init(awsCredentialIdentity: AWSCredentialIdentity) {
        self.generator = AWSClientRuntime.AuthTokenGenerator(awsCredentialIdentity: awsCredentialIdentity)
    }

    /// The initializer that takes in a specific AWSCredentialIdentityResolver, used to resolve the AWSCredentialIdentity used to generate the IAM authentication token.
    public init(awsCredentialIdentityResolver: any AWSCredentialIdentityResolver) async throws {
        self.generator = try await AWSClientRuntime.AuthTokenGenerator(awsCredentialIdentityResolver: awsCredentialIdentityResolver)
    }

    /// Updates the AWS credentials used to generate the IAM auth token.
    public func updateCredentials(newAWSCredentialIdentity: AWSCredentialIdentity) {
        generator.updateCredentials(newAWSCredentialIdentity: newAWSCredentialIdentity)
    }

    /// Updates the AWS credentials used to generate the IAM auth token by resolving credentials from passed in resolver.
    public func updateCredentials(awsCredentialIdentityResolver: any AWSCredentialIdentityResolver) async throws {
        try await generator.updateCredentials(awsCredentialIdentityResolver: awsCredentialIdentityResolver)
    }

    /// Generates authenetication token for non-admin connection using given inputs to the method and credential identity instance variable.
    ///
    /// - Parameters:
    ///   - endpoint: The endpoint of the RDS instance. E.g., `peccy.dsql.us-east-1.on.aws`
    ///   - region: The region that RDS instance is located in. E.g., `us-east-1`
    ///   - expiration: The expiration for the token in seconds. Default is 900 seconds (15 minutes).
    public func generateDBConnectAuthToken(
        endpoint: String,
        region: String,
        expiration: TimeInterval = 900
    ) async throws -> String {
        return try await generator.generateDSQLAuthToken(
            endpoint: endpoint,
            region: region,
            expiration: expiration,
            isForAdmin: false
        )
    }

    /// Generates authenetication token for admin connection using given inputs to the method and credential identity instance variable.
    ///
    /// - Parameters:
    ///   - endpoint: The endpoint of the RDS instance. E.g., `peccy.dsql.us-east-1.on.aws`
    ///   - region: The region that RDS instance is located in. E.g., `us-east-1`
    ///   - expiration: The expiration for the token in seconds. Default is 900 seconds (15 minutes).
    public func generateDBConnectAdminAuthToken(
        endpoint: String,
        region: String,
        expiration: TimeInterval = 900
    ) async throws -> String {
        return try await generator.generateDSQLAuthToken(
            endpoint: endpoint,
            region: region,
            expiration: expiration,
            isForAdmin: true
        )
    }
}
