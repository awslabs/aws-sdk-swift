// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MedicalImagingClient {
    /// Paginate over `[ListDICOMImportJobsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListDICOMImportJobsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListDICOMImportJobsOutputResponse`
    public func listDICOMImportJobsPaginated(input: ListDICOMImportJobsInput) -> ClientRuntime.PaginatorSequence<ListDICOMImportJobsInput, ListDICOMImportJobsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListDICOMImportJobsInput, ListDICOMImportJobsOutputResponse>(input: input, inputKey: \ListDICOMImportJobsInput.nextToken, outputKey: \ListDICOMImportJobsOutputResponse.nextToken, paginationFunction: self.listDICOMImportJobs(input:))
    }
}

extension ListDICOMImportJobsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListDICOMImportJobsInput {
        return ListDICOMImportJobsInput(
            datastoreId: self.datastoreId,
            jobStatus: self.jobStatus,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListDICOMImportJobsInput, Output == ListDICOMImportJobsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listDICOMImportJobsPaginated`
    /// to access the nested member `[MedicalImagingClientTypes.DICOMImportJobSummary]`
    /// - Returns: `[MedicalImagingClientTypes.DICOMImportJobSummary]`
    public func jobSummaries() async throws -> [MedicalImagingClientTypes.DICOMImportJobSummary] {
        return try await self.asyncCompactMap { item in item.jobSummaries }
    }
}
extension MedicalImagingClient {
    /// Paginate over `[ListImageSetVersionsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListImageSetVersionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListImageSetVersionsOutputResponse`
    public func listImageSetVersionsPaginated(input: ListImageSetVersionsInput) -> ClientRuntime.PaginatorSequence<ListImageSetVersionsInput, ListImageSetVersionsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListImageSetVersionsInput, ListImageSetVersionsOutputResponse>(input: input, inputKey: \ListImageSetVersionsInput.nextToken, outputKey: \ListImageSetVersionsOutputResponse.nextToken, paginationFunction: self.listImageSetVersions(input:))
    }
}

extension ListImageSetVersionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListImageSetVersionsInput {
        return ListImageSetVersionsInput(
            datastoreId: self.datastoreId,
            imageSetId: self.imageSetId,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListImageSetVersionsInput, Output == ListImageSetVersionsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listImageSetVersionsPaginated`
    /// to access the nested member `[MedicalImagingClientTypes.ImageSetProperties]`
    /// - Returns: `[MedicalImagingClientTypes.ImageSetProperties]`
    public func imageSetPropertiesList() async throws -> [MedicalImagingClientTypes.ImageSetProperties] {
        return try await self.asyncCompactMap { item in item.imageSetPropertiesList }
    }
}
extension MedicalImagingClient {
    /// Paginate over `[SearchImageSetsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[SearchImageSetsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `SearchImageSetsOutputResponse`
    public func searchImageSetsPaginated(input: SearchImageSetsInput) -> ClientRuntime.PaginatorSequence<SearchImageSetsInput, SearchImageSetsOutputResponse> {
        return ClientRuntime.PaginatorSequence<SearchImageSetsInput, SearchImageSetsOutputResponse>(input: input, inputKey: \SearchImageSetsInput.nextToken, outputKey: \SearchImageSetsOutputResponse.nextToken, paginationFunction: self.searchImageSets(input:))
    }
}

extension SearchImageSetsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> SearchImageSetsInput {
        return SearchImageSetsInput(
            datastoreId: self.datastoreId,
            maxResults: self.maxResults,
            nextToken: token,
            searchCriteria: self.searchCriteria
        )}
}

extension PaginatorSequence where Input == SearchImageSetsInput, Output == SearchImageSetsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `searchImageSetsPaginated`
    /// to access the nested member `[MedicalImagingClientTypes.ImageSetsMetadataSummary]`
    /// - Returns: `[MedicalImagingClientTypes.ImageSetsMetadataSummary]`
    public func imageSetsMetadataSummaries() async throws -> [MedicalImagingClientTypes.ImageSetsMetadataSummary] {
        return try await self.asyncCompactMap { item in item.imageSetsMetadataSummaries }
    }
}
