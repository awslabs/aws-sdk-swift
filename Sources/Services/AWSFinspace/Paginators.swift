// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FinspaceClient {
    /// Paginate over `[ListKxChangesetsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListKxChangesetsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListKxChangesetsOutputResponse`
    public func listKxChangesetsPaginated(input: ListKxChangesetsInput) -> ClientRuntime.PaginatorSequence<ListKxChangesetsInput, ListKxChangesetsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListKxChangesetsInput, ListKxChangesetsOutputResponse>(input: input, inputKey: \ListKxChangesetsInput.nextToken, outputKey: \ListKxChangesetsOutputResponse.nextToken, paginationFunction: self.listKxChangesets(input:))
    }
}

extension ListKxChangesetsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListKxChangesetsInput {
        return ListKxChangesetsInput(
            databaseName: self.databaseName,
            environmentId: self.environmentId,
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension FinspaceClient {
    /// Paginate over `[ListKxClusterNodesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListKxClusterNodesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListKxClusterNodesOutputResponse`
    public func listKxClusterNodesPaginated(input: ListKxClusterNodesInput) -> ClientRuntime.PaginatorSequence<ListKxClusterNodesInput, ListKxClusterNodesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListKxClusterNodesInput, ListKxClusterNodesOutputResponse>(input: input, inputKey: \ListKxClusterNodesInput.nextToken, outputKey: \ListKxClusterNodesOutputResponse.nextToken, paginationFunction: self.listKxClusterNodes(input:))
    }
}

extension ListKxClusterNodesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListKxClusterNodesInput {
        return ListKxClusterNodesInput(
            clusterName: self.clusterName,
            environmentId: self.environmentId,
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension FinspaceClient {
    /// Paginate over `[ListKxDatabasesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListKxDatabasesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListKxDatabasesOutputResponse`
    public func listKxDatabasesPaginated(input: ListKxDatabasesInput) -> ClientRuntime.PaginatorSequence<ListKxDatabasesInput, ListKxDatabasesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListKxDatabasesInput, ListKxDatabasesOutputResponse>(input: input, inputKey: \ListKxDatabasesInput.nextToken, outputKey: \ListKxDatabasesOutputResponse.nextToken, paginationFunction: self.listKxDatabases(input:))
    }
}

extension ListKxDatabasesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListKxDatabasesInput {
        return ListKxDatabasesInput(
            environmentId: self.environmentId,
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension FinspaceClient {
    /// Paginate over `[ListKxEnvironmentsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListKxEnvironmentsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListKxEnvironmentsOutputResponse`
    public func listKxEnvironmentsPaginated(input: ListKxEnvironmentsInput) -> ClientRuntime.PaginatorSequence<ListKxEnvironmentsInput, ListKxEnvironmentsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListKxEnvironmentsInput, ListKxEnvironmentsOutputResponse>(input: input, inputKey: \ListKxEnvironmentsInput.nextToken, outputKey: \ListKxEnvironmentsOutputResponse.nextToken, paginationFunction: self.listKxEnvironments(input:))
    }
}

extension ListKxEnvironmentsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListKxEnvironmentsInput {
        return ListKxEnvironmentsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListKxEnvironmentsInput, Output == ListKxEnvironmentsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listKxEnvironmentsPaginated`
    /// to access the nested member `[FinspaceClientTypes.KxEnvironment]`
    /// - Returns: `[FinspaceClientTypes.KxEnvironment]`
    public func environments() async throws -> [FinspaceClientTypes.KxEnvironment] {
        return try await self.asyncCompactMap { item in item.environments }
    }
}
