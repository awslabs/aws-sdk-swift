//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox


public struct AttachPolicyOutput: Swift.Sendable {

    public init() { }
}

public struct CloseAccountOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteOrganizationalUnitOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteOrganizationInput: Swift.Sendable {

    public init() { }
}

public struct DeleteOrganizationOutput: Swift.Sendable {

    public init() { }
}

public struct DeletePolicyOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteResourcePolicyInput: Swift.Sendable {

    public init() { }
}

public struct DeleteResourcePolicyOutput: Swift.Sendable {

    public init() { }
}

public struct DeregisterDelegatedAdministratorOutput: Swift.Sendable {

    public init() { }
}

public struct DescribeOrganizationInput: Swift.Sendable {

    public init() { }
}

public struct DescribeResourcePolicyInput: Swift.Sendable {

    public init() { }
}

public struct DetachPolicyOutput: Swift.Sendable {

    public init() { }
}

public struct DisableAWSServiceAccessOutput: Swift.Sendable {

    public init() { }
}

public struct EnableAWSServiceAccessOutput: Swift.Sendable {

    public init() { }
}

public struct LeaveOrganizationInput: Swift.Sendable {

    public init() { }
}

public struct LeaveOrganizationOutput: Swift.Sendable {

    public init() { }
}

public struct MoveAccountOutput: Swift.Sendable {

    public init() { }
}

public struct RegisterDelegatedAdministratorOutput: Swift.Sendable {

    public init() { }
}

public struct RemoveAccountFromOrganizationOutput: Swift.Sendable {

    public init() { }
}

public struct TagResourceOutput: Swift.Sendable {

    public init() { }
}

public struct UntagResourceOutput: Swift.Sendable {

    public init() { }
}

/// You don't have permissions to perform the requested operation. The user or role that is making the request must have at least one IAM permissions policy attached that grants the required permissions. For more information, see [Access Management](https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html) in the IAM User Guide.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension OrganizationsClientTypes {

    public enum AccessDeniedForDependencyExceptionReason: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accessDeniedDuringCreateServiceLinkedRole
        case sdkUnknown(Swift.String)

        public static var allCases: [AccessDeniedForDependencyExceptionReason] {
            return [
                .accessDeniedDuringCreateServiceLinkedRole
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accessDeniedDuringCreateServiceLinkedRole: return "ACCESS_DENIED_DURING_CREATE_SERVICE_LINKED_ROLE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// The operation that you attempted requires you to have the iam:CreateServiceLinkedRole for organizations.amazonaws.com permission so that Organizations can create the required service-linked role. You don't have that permission.
public struct AccessDeniedForDependencyException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        public internal(set) var reason: OrganizationsClientTypes.AccessDeniedForDependencyExceptionReason? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedForDependencyException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        reason: OrganizationsClientTypes.AccessDeniedForDependencyExceptionReason? = nil
    )
    {
        self.properties.message = message
        self.properties.reason = reason
    }
}

/// Your account isn't a member of an organization. To make this request, you must use the credentials of an account that belongs to an organization.
public struct AWSOrganizationsNotInUseException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AWSOrganizationsNotInUseException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The target of the operation is currently being modified by a different request. Try again later.
public struct ConcurrentModificationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConcurrentModificationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified handshake is already in the requested state. For example, you can't accept a handshake that was already accepted.
public struct HandshakeAlreadyInStateException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "HandshakeAlreadyInStateException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension OrganizationsClientTypes {

    public enum HandshakeConstraintViolationExceptionReason: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accountNumberLimitExceeded
        case alreadyInAnOrganization
        case handshakeRateLimitExceeded
        case inviteDisabledDuringEnableAllFeatures
        case managementAccountEmailNotVerified
        case organizationAlreadyHasAllFeatures
        case organizationFromDifferentSellerOfRecord
        case organizationIsAlreadyPendingAllFeaturesMigration
        case organizationMembershipChangeRateLimitExceeded
        case paymentInstrumentRequired
        case sdkUnknown(Swift.String)

        public static var allCases: [HandshakeConstraintViolationExceptionReason] {
            return [
                .accountNumberLimitExceeded,
                .alreadyInAnOrganization,
                .handshakeRateLimitExceeded,
                .inviteDisabledDuringEnableAllFeatures,
                .managementAccountEmailNotVerified,
                .organizationAlreadyHasAllFeatures,
                .organizationFromDifferentSellerOfRecord,
                .organizationIsAlreadyPendingAllFeaturesMigration,
                .organizationMembershipChangeRateLimitExceeded,
                .paymentInstrumentRequired
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accountNumberLimitExceeded: return "ACCOUNT_NUMBER_LIMIT_EXCEEDED"
            case .alreadyInAnOrganization: return "ALREADY_IN_AN_ORGANIZATION"
            case .handshakeRateLimitExceeded: return "HANDSHAKE_RATE_LIMIT_EXCEEDED"
            case .inviteDisabledDuringEnableAllFeatures: return "INVITE_DISABLED_DURING_ENABLE_ALL_FEATURES"
            case .managementAccountEmailNotVerified: return "MANAGEMENT_ACCOUNT_EMAIL_NOT_VERIFIED"
            case .organizationAlreadyHasAllFeatures: return "ORGANIZATION_ALREADY_HAS_ALL_FEATURES"
            case .organizationFromDifferentSellerOfRecord: return "ORGANIZATION_FROM_DIFFERENT_SELLER_OF_RECORD"
            case .organizationIsAlreadyPendingAllFeaturesMigration: return "ORGANIZATION_IS_ALREADY_PENDING_ALL_FEATURES_MIGRATION"
            case .organizationMembershipChangeRateLimitExceeded: return "ORGANIZATION_MEMBERSHIP_CHANGE_RATE_LIMIT_EXCEEDED"
            case .paymentInstrumentRequired: return "PAYMENT_INSTRUMENT_REQUIRED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// The requested operation would violate the constraint identified in the reason code. Some of the reasons in the following list might not be applicable to this specific API or operation:
///
/// * ACCOUNT_NUMBER_LIMIT_EXCEEDED: You attempted to exceed the limit on the number of accounts in an organization. Note that deleted and closed accounts still count toward your limit. If you get this exception immediately after creating the organization, wait one hour and try again. If after an hour it continues to fail with this error, contact [Amazon Web Services Support](https://console.aws.amazon.com/support/home#/).
///
/// * ALREADY_IN_AN_ORGANIZATION: The handshake request is invalid because the invited account is already a member of an organization.
///
/// * HANDSHAKE_RATE_LIMIT_EXCEEDED: You attempted to exceed the number of handshakes that you can send in one day.
///
/// * INVITE_DISABLED_DURING_ENABLE_ALL_FEATURES: You can't issue new invitations to join an organization while it's in the process of enabling all features. You can resume inviting accounts after you finalize the process when all accounts have agreed to the change.
///
/// * ORGANIZATION_ALREADY_HAS_ALL_FEATURES: The handshake request is invalid because the organization has already enabled all features.
///
/// * ORGANIZATION_IS_ALREADY_PENDING_ALL_FEATURES_MIGRATION: The handshake request is invalid because the organization has already started the process to enable all features.
///
/// * ORGANIZATION_FROM_DIFFERENT_SELLER_OF_RECORD: The request failed because the account is from a different marketplace than the accounts in the organization. For example, accounts with India addresses must be associated with the AISPL marketplace. All accounts in an organization must be from the same marketplace.
///
/// * ORGANIZATION_MEMBERSHIP_CHANGE_RATE_LIMIT_EXCEEDED: You attempted to change the membership of an account too quickly after its previous change.
///
/// * PAYMENT_INSTRUMENT_REQUIRED: You can't complete the operation with an account that doesn't have a payment instrument, such as a credit card, associated with it.
public struct HandshakeConstraintViolationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        public internal(set) var reason: OrganizationsClientTypes.HandshakeConstraintViolationExceptionReason? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "HandshakeConstraintViolationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        reason: OrganizationsClientTypes.HandshakeConstraintViolationExceptionReason? = nil
    )
    {
        self.properties.message = message
        self.properties.reason = reason
    }
}

/// We can't find a handshake with the HandshakeId that you specified.
public struct HandshakeNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "HandshakeNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// You can't perform the operation on the handshake in its current state. For example, you can't cancel a handshake that was already accepted or accept a handshake that was already declined.
public struct InvalidHandshakeTransitionException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidHandshakeTransitionException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension OrganizationsClientTypes {

    public enum InvalidInputExceptionReason: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case duplicateTagKey
        case immutablePolicy
        case inputRequired
        case invalidEmailAddressTarget
        case invalidEnum
        case invalidEnumPolicyType
        case invalidFullNameTarget
        case invalidListMember
        case invalidPaginationToken
        case invalidPartyTypeTarget
        case invalidPattern
        case invalidPatternTargetId
        case invalidResourcePolicyJson
        case invalidRoleName
        case invalidSyntaxOrganization
        case invalidSyntaxPolicy
        case invalidSystemTagsParameter
        case maxFilterLimitExceeded
        case maxLengthExceeded
        case maxValueExceeded
        case minLengthExceeded
        case minValueExceeded
        case movingAccountBetweenDifferentRoots
        case targetNotSupported
        case unrecognizedServicePrincipal
        case unsupportedActionInResourcePolicy
        case unsupportedPolicyTypeInResourcePolicy
        case unsupportedResourceInResourcePolicy
        case sdkUnknown(Swift.String)

        public static var allCases: [InvalidInputExceptionReason] {
            return [
                .duplicateTagKey,
                .immutablePolicy,
                .inputRequired,
                .invalidEmailAddressTarget,
                .invalidEnum,
                .invalidEnumPolicyType,
                .invalidFullNameTarget,
                .invalidListMember,
                .invalidPaginationToken,
                .invalidPartyTypeTarget,
                .invalidPattern,
                .invalidPatternTargetId,
                .invalidResourcePolicyJson,
                .invalidRoleName,
                .invalidSyntaxOrganization,
                .invalidSyntaxPolicy,
                .invalidSystemTagsParameter,
                .maxFilterLimitExceeded,
                .maxLengthExceeded,
                .maxValueExceeded,
                .minLengthExceeded,
                .minValueExceeded,
                .movingAccountBetweenDifferentRoots,
                .targetNotSupported,
                .unrecognizedServicePrincipal,
                .unsupportedActionInResourcePolicy,
                .unsupportedPolicyTypeInResourcePolicy,
                .unsupportedResourceInResourcePolicy
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .duplicateTagKey: return "DUPLICATE_TAG_KEY"
            case .immutablePolicy: return "IMMUTABLE_POLICY"
            case .inputRequired: return "INPUT_REQUIRED"
            case .invalidEmailAddressTarget: return "INVALID_EMAIL_ADDRESS_TARGET"
            case .invalidEnum: return "INVALID_ENUM"
            case .invalidEnumPolicyType: return "INVALID_ENUM_POLICY_TYPE"
            case .invalidFullNameTarget: return "INVALID_FULL_NAME_TARGET"
            case .invalidListMember: return "INVALID_LIST_MEMBER"
            case .invalidPaginationToken: return "INVALID_NEXT_TOKEN"
            case .invalidPartyTypeTarget: return "INVALID_PARTY_TYPE_TARGET"
            case .invalidPattern: return "INVALID_PATTERN"
            case .invalidPatternTargetId: return "INVALID_PATTERN_TARGET_ID"
            case .invalidResourcePolicyJson: return "INVALID_RESOURCE_POLICY_JSON"
            case .invalidRoleName: return "INVALID_ROLE_NAME"
            case .invalidSyntaxOrganization: return "INVALID_SYNTAX_ORGANIZATION_ARN"
            case .invalidSyntaxPolicy: return "INVALID_SYNTAX_POLICY_ID"
            case .invalidSystemTagsParameter: return "INVALID_SYSTEM_TAGS_PARAMETER"
            case .maxFilterLimitExceeded: return "MAX_LIMIT_EXCEEDED_FILTER"
            case .maxLengthExceeded: return "MAX_LENGTH_EXCEEDED"
            case .maxValueExceeded: return "MAX_VALUE_EXCEEDED"
            case .minLengthExceeded: return "MIN_LENGTH_EXCEEDED"
            case .minValueExceeded: return "MIN_VALUE_EXCEEDED"
            case .movingAccountBetweenDifferentRoots: return "MOVING_ACCOUNT_BETWEEN_DIFFERENT_ROOTS"
            case .targetNotSupported: return "TARGET_NOT_SUPPORTED"
            case .unrecognizedServicePrincipal: return "UNRECOGNIZED_SERVICE_PRINCIPAL"
            case .unsupportedActionInResourcePolicy: return "UNSUPPORTED_ACTION_IN_RESOURCE_POLICY"
            case .unsupportedPolicyTypeInResourcePolicy: return "UNSUPPORTED_POLICY_TYPE_IN_RESOURCE_POLICY"
            case .unsupportedResourceInResourcePolicy: return "UNSUPPORTED_RESOURCE_IN_RESOURCE_POLICY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// The requested operation failed because you provided invalid values for one or more of the request parameters. This exception includes a reason that contains additional information about the violated limit: Some of the reasons in the following list might not be applicable to this specific API or operation.
///
/// * DUPLICATE_TAG_KEY: Tag keys must be unique among the tags attached to the same entity.
///
/// * IMMUTABLE_POLICY: You specified a policy that is managed by Amazon Web Services and can't be modified.
///
/// * INPUT_REQUIRED: You must include a value for all required parameters.
///
/// * INVALID_EMAIL_ADDRESS_TARGET: You specified an invalid email address for the invited account owner.
///
/// * INVALID_ENUM: You specified an invalid value.
///
/// * INVALID_ENUM_POLICY_TYPE: You specified an invalid policy type string.
///
/// * INVALID_FULL_NAME_TARGET: You specified a full name that contains invalid characters.
///
/// * INVALID_LIST_MEMBER: You provided a list to a parameter that contains at least one invalid value.
///
/// * INVALID_PAGINATION_TOKEN: Get the value for the NextToken parameter from the response to a previous call of the operation.
///
/// * INVALID_PARTY_TYPE_TARGET: You specified the wrong type of entity (account, organization, or email) as a party.
///
/// * INVALID_PATTERN: You provided a value that doesn't match the required pattern.
///
/// * INVALID_PATTERN_TARGET_ID: You specified a policy target ID that doesn't match the required pattern.
///
/// * INVALID_ROLE_NAME: You provided a role name that isn't valid. A role name can't begin with the reserved prefix AWSServiceRoleFor.
///
/// * INVALID_SYNTAX_ORGANIZATION_ARN: You specified an invalid Amazon Resource Name (ARN) for the organization.
///
/// * INVALID_SYNTAX_POLICY_ID: You specified an invalid policy ID.
///
/// * INVALID_SYSTEM_TAGS_PARAMETER: You specified a tag key that is a system tag. You can’t add, edit, or delete system tag keys because they're reserved for Amazon Web Services use. System tags don’t count against your tags per resource limit.
///
/// * MAX_FILTER_LIMIT_EXCEEDED: You can specify only one filter parameter for the operation.
///
/// * MAX_LENGTH_EXCEEDED: You provided a string parameter that is longer than allowed.
///
/// * MAX_VALUE_EXCEEDED: You provided a numeric parameter that has a larger value than allowed.
///
/// * MIN_LENGTH_EXCEEDED: You provided a string parameter that is shorter than allowed.
///
/// * MIN_VALUE_EXCEEDED: You provided a numeric parameter that has a smaller value than allowed.
///
/// * MOVING_ACCOUNT_BETWEEN_DIFFERENT_ROOTS: You can move an account only between entities in the same root.
///
/// * TARGET_NOT_SUPPORTED: You can't perform the specified operation on that target entity.
///
/// * UNRECOGNIZED_SERVICE_PRINCIPAL: You specified a service principal that isn't recognized.
public struct InvalidInputException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        public internal(set) var reason: OrganizationsClientTypes.InvalidInputExceptionReason? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidInputException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        reason: OrganizationsClientTypes.InvalidInputExceptionReason? = nil
    )
    {
        self.properties.message = message
        self.properties.reason = reason
    }
}

/// Organizations can't complete your request because of an internal service error. Try again later.
public struct ServiceException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// You have sent too many requests in too short a period of time. The quota helps protect against denial-of-service attacks. Try again later. For information about quotas that affect Organizations, see [Quotas for Organizations](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_reference_limits.html) in the Organizations User Guide.
public struct TooManyRequestsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        public internal(set) var type: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyRequestsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        type: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.type = type
    }
}

public struct AcceptHandshakeInput: Swift.Sendable {
    /// The unique identifier (ID) of the handshake that you want to accept. The [regex pattern](http://wikipedia.org/wiki/regex) for handshake ID string requires "h-" followed by from 8 to 32 lowercase letters or digits.
    /// This member is required.
    public var handshakeId: Swift.String?

    public init(
        handshakeId: Swift.String? = nil
    )
    {
        self.handshakeId = handshakeId
    }
}

extension OrganizationsClientTypes {

    public enum ActionType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case addOrganizationsServiceLinkedRole
        case approveAllFeatures
        case enableAllFeatures
        case inviteAccountToOrganization
        case sdkUnknown(Swift.String)

        public static var allCases: [ActionType] {
            return [
                .addOrganizationsServiceLinkedRole,
                .approveAllFeatures,
                .enableAllFeatures,
                .inviteAccountToOrganization
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .addOrganizationsServiceLinkedRole: return "ADD_ORGANIZATIONS_SERVICE_LINKED_ROLE"
            case .approveAllFeatures: return "APPROVE_ALL_FEATURES"
            case .enableAllFeatures: return "ENABLE_ALL_FEATURES"
            case .inviteAccountToOrganization: return "INVITE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension OrganizationsClientTypes {

    public enum HandshakePartyType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case account
        case email
        case organization
        case sdkUnknown(Swift.String)

        public static var allCases: [HandshakePartyType] {
            return [
                .account,
                .email,
                .organization
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .account: return "ACCOUNT"
            case .email: return "EMAIL"
            case .organization: return "ORGANIZATION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension OrganizationsClientTypes {

    /// Identifies a participant in a handshake.
    public struct HandshakeParty: Swift.Sendable {
        /// The unique identifier (ID) for the party. The [regex pattern](http://wikipedia.org/wiki/regex) for handshake ID string requires "h-" followed by from 8 to 32 lowercase letters or digits.
        /// This member is required.
        public var id: Swift.String?
        /// The type of party.
        /// This member is required.
        public var type: OrganizationsClientTypes.HandshakePartyType?

        public init(
            id: Swift.String? = nil,
            type: OrganizationsClientTypes.HandshakePartyType? = nil
        )
        {
            self.id = id
            self.type = type
        }
    }
}

extension OrganizationsClientTypes.HandshakeParty: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HandshakeParty(type: \(Swift.String(describing: type)), id: \"CONTENT_REDACTED\")"}
}

extension OrganizationsClientTypes {

    public enum HandshakeResourceType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case account
        case email
        case masterEmail
        case masterName
        case notes
        case organization
        case organizationFeatureSet
        case parentHandshake
        case sdkUnknown(Swift.String)

        public static var allCases: [HandshakeResourceType] {
            return [
                .account,
                .email,
                .masterEmail,
                .masterName,
                .notes,
                .organization,
                .organizationFeatureSet,
                .parentHandshake
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .account: return "ACCOUNT"
            case .email: return "EMAIL"
            case .masterEmail: return "MASTER_EMAIL"
            case .masterName: return "MASTER_NAME"
            case .notes: return "NOTES"
            case .organization: return "ORGANIZATION"
            case .organizationFeatureSet: return "ORGANIZATION_FEATURE_SET"
            case .parentHandshake: return "PARENT_HANDSHAKE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension OrganizationsClientTypes {

    public enum HandshakeState: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accepted
        case canceled
        case declined
        case expired
        case `open`
        case requested
        case sdkUnknown(Swift.String)

        public static var allCases: [HandshakeState] {
            return [
                .accepted,
                .canceled,
                .declined,
                .expired,
                .open,
                .requested
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accepted: return "ACCEPTED"
            case .canceled: return "CANCELED"
            case .declined: return "DECLINED"
            case .expired: return "EXPIRED"
            case .open: return "OPEN"
            case .requested: return "REQUESTED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension OrganizationsClientTypes {

    public enum AccountJoinedMethod: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case created
        case invited
        case sdkUnknown(Swift.String)

        public static var allCases: [AccountJoinedMethod] {
            return [
                .created,
                .invited
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .created: return "CREATED"
            case .invited: return "INVITED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension OrganizationsClientTypes {

    public enum AccountStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case pendingClosure
        case suspended
        case sdkUnknown(Swift.String)

        public static var allCases: [AccountStatus] {
            return [
                .active,
                .pendingClosure,
                .suspended
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .pendingClosure: return "PENDING_CLOSURE"
            case .suspended: return "SUSPENDED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension OrganizationsClientTypes {

    /// Contains information about an Amazon Web Services account that is a member of an organization.
    public struct Account: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the account. For more information about ARNs in Organizations, see [ARN Formats Supported by Organizations](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsorganizations.html#awsorganizations-resources-for-iam-policies) in the Amazon Web Services Service Authorization Reference.
        public var arn: Swift.String?
        /// The email address associated with the Amazon Web Services account. The [regex pattern](http://wikipedia.org/wiki/regex) for this parameter is a string of characters that represents a standard internet email address.
        public var email: Swift.String?
        /// The unique identifier (ID) of the account. The [regex pattern](http://wikipedia.org/wiki/regex) for an account ID string requires exactly 12 digits.
        public var id: Swift.String?
        /// The method by which the account joined the organization.
        public var joinedMethod: OrganizationsClientTypes.AccountJoinedMethod?
        /// The date the account became a part of the organization.
        public var joinedTimestamp: Foundation.Date?
        /// The friendly name of the account. The [regex pattern](http://wikipedia.org/wiki/regex) that is used to validate this parameter is a string of any of the characters in the ASCII character range.
        public var name: Swift.String?
        /// The status of the account in the organization.
        public var status: OrganizationsClientTypes.AccountStatus?

        public init(
            arn: Swift.String? = nil,
            email: Swift.String? = nil,
            id: Swift.String? = nil,
            joinedMethod: OrganizationsClientTypes.AccountJoinedMethod? = nil,
            joinedTimestamp: Foundation.Date? = nil,
            name: Swift.String? = nil,
            status: OrganizationsClientTypes.AccountStatus? = nil
        )
        {
            self.arn = arn
            self.email = email
            self.id = id
            self.joinedMethod = joinedMethod
            self.joinedTimestamp = joinedTimestamp
            self.name = name
            self.status = status
        }
    }
}

extension OrganizationsClientTypes.Account: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Account(arn: \(Swift.String(describing: arn)), id: \(Swift.String(describing: id)), joinedMethod: \(Swift.String(describing: joinedMethod)), joinedTimestamp: \(Swift.String(describing: joinedTimestamp)), status: \(Swift.String(describing: status)), email: \"CONTENT_REDACTED\", name: \"CONTENT_REDACTED\")"}
}

/// You attempted to close an account that is already closed.
public struct AccountAlreadyClosedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccountAlreadyClosedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified account is already a delegated administrator for this Amazon Web Services service.
public struct AccountAlreadyRegisteredException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccountAlreadyRegisteredException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// We can't find an Amazon Web Services account with the AccountId that you specified, or the account whose credentials you used to make this request isn't a member of an organization.
public struct AccountNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccountNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified account is not a delegated administrator for this Amazon Web Services service.
public struct AccountNotRegisteredException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccountNotRegisteredException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// You can't invite an existing account to your organization until you verify that you own the email address associated with the management account. For more information, see [Email address verification](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_create.html#about-email-verification) in the Organizations User Guide.
public struct AccountOwnerNotVerifiedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccountOwnerNotVerifiedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// This account is already a member of an organization. An account can belong to only one organization at a time.
public struct AlreadyInOrganizationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AlreadyInOrganizationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension OrganizationsClientTypes {

    public enum ConstraintViolationExceptionReason: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accountCannotLeaveOrganization
        case accountCannotLeaveWithoutEula
        case accountCannotLeaveWithoutPhoneVerification
        case accountCreationNotComplete
        case accountCreationRateLimitExceeded
        case accountNumberLimitExceeded
        case cannotCloseManagementAccount
        case cannotRegisterMasterAsDelegatedAdministrator
        case cannotRegisterSuspendedAccountAsDelegatedAdministrator
        case cannotRemoveDelegatedAdministratorFromOrg
        case closeAccountQuotaExceeded
        case closeAccountRequestsLimitExceeded
        case createOrganizationInBillingModeUnsupportedRegion
        case delegatedAdministratorExistsForThisService
        case emailVerificationCodeExpired
        case handshakeRateLimitExceeded
        case invalidPaymentInstrument
        case masterAccountAddressDoesNotMatchMarketplace
        case masterAccountMissingBusinessLicense
        case masterAccountMissingContactInfo
        case masterAccountNotGovcloudEnabled
        case masterAccountPaymentInstrumentRequired
        case maxDelegatedAdministratorsForServiceLimitExceeded
        case maxPolicyTypeAttachmentLimitExceeded
        case maxTagLimitExceeded
        case memberAccountPaymentInstrumentRequired
        case minPolicyTypeAttachmentLimitExceeded
        case organizationNotInAllFeaturesMode
        case ouDepthLimitExceeded
        case ouNumberLimitExceeded
        case policyContentLimitExceeded
        case policyNumberLimitExceeded
        case serviceAccessNotEnabled
        case tagPolicyViolation
        case waitPeriodActive
        case sdkUnknown(Swift.String)

        public static var allCases: [ConstraintViolationExceptionReason] {
            return [
                .accountCannotLeaveOrganization,
                .accountCannotLeaveWithoutEula,
                .accountCannotLeaveWithoutPhoneVerification,
                .accountCreationNotComplete,
                .accountCreationRateLimitExceeded,
                .accountNumberLimitExceeded,
                .cannotCloseManagementAccount,
                .cannotRegisterMasterAsDelegatedAdministrator,
                .cannotRegisterSuspendedAccountAsDelegatedAdministrator,
                .cannotRemoveDelegatedAdministratorFromOrg,
                .closeAccountQuotaExceeded,
                .closeAccountRequestsLimitExceeded,
                .createOrganizationInBillingModeUnsupportedRegion,
                .delegatedAdministratorExistsForThisService,
                .emailVerificationCodeExpired,
                .handshakeRateLimitExceeded,
                .invalidPaymentInstrument,
                .masterAccountAddressDoesNotMatchMarketplace,
                .masterAccountMissingBusinessLicense,
                .masterAccountMissingContactInfo,
                .masterAccountNotGovcloudEnabled,
                .masterAccountPaymentInstrumentRequired,
                .maxDelegatedAdministratorsForServiceLimitExceeded,
                .maxPolicyTypeAttachmentLimitExceeded,
                .maxTagLimitExceeded,
                .memberAccountPaymentInstrumentRequired,
                .minPolicyTypeAttachmentLimitExceeded,
                .organizationNotInAllFeaturesMode,
                .ouDepthLimitExceeded,
                .ouNumberLimitExceeded,
                .policyContentLimitExceeded,
                .policyNumberLimitExceeded,
                .serviceAccessNotEnabled,
                .tagPolicyViolation,
                .waitPeriodActive
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accountCannotLeaveOrganization: return "ACCOUNT_CANNOT_LEAVE_ORGANIZATION"
            case .accountCannotLeaveWithoutEula: return "ACCOUNT_CANNOT_LEAVE_WITHOUT_EULA"
            case .accountCannotLeaveWithoutPhoneVerification: return "ACCOUNT_CANNOT_LEAVE_WITHOUT_PHONE_VERIFICATION"
            case .accountCreationNotComplete: return "ACCOUNT_CREATION_NOT_COMPLETE"
            case .accountCreationRateLimitExceeded: return "ACCOUNT_CREATION_RATE_LIMIT_EXCEEDED"
            case .accountNumberLimitExceeded: return "ACCOUNT_NUMBER_LIMIT_EXCEEDED"
            case .cannotCloseManagementAccount: return "CANNOT_CLOSE_MANAGEMENT_ACCOUNT"
            case .cannotRegisterMasterAsDelegatedAdministrator: return "CANNOT_REGISTER_MASTER_AS_DELEGATED_ADMINISTRATOR"
            case .cannotRegisterSuspendedAccountAsDelegatedAdministrator: return "CANNOT_REGISTER_SUSPENDED_ACCOUNT_AS_DELEGATED_ADMINISTRATOR"
            case .cannotRemoveDelegatedAdministratorFromOrg: return "CANNOT_REMOVE_DELEGATED_ADMINISTRATOR_FROM_ORG"
            case .closeAccountQuotaExceeded: return "CLOSE_ACCOUNT_QUOTA_EXCEEDED"
            case .closeAccountRequestsLimitExceeded: return "CLOSE_ACCOUNT_REQUESTS_LIMIT_EXCEEDED"
            case .createOrganizationInBillingModeUnsupportedRegion: return "CREATE_ORGANIZATION_IN_BILLING_MODE_UNSUPPORTED_REGION"
            case .delegatedAdministratorExistsForThisService: return "DELEGATED_ADMINISTRATOR_EXISTS_FOR_THIS_SERVICE"
            case .emailVerificationCodeExpired: return "EMAIL_VERIFICATION_CODE_EXPIRED"
            case .handshakeRateLimitExceeded: return "HANDSHAKE_RATE_LIMIT_EXCEEDED"
            case .invalidPaymentInstrument: return "INVALID_PAYMENT_INSTRUMENT"
            case .masterAccountAddressDoesNotMatchMarketplace: return "MASTER_ACCOUNT_ADDRESS_DOES_NOT_MATCH_MARKETPLACE"
            case .masterAccountMissingBusinessLicense: return "MASTER_ACCOUNT_MISSING_BUSINESS_LICENSE"
            case .masterAccountMissingContactInfo: return "MASTER_ACCOUNT_MISSING_CONTACT_INFO"
            case .masterAccountNotGovcloudEnabled: return "MASTER_ACCOUNT_NOT_GOVCLOUD_ENABLED"
            case .masterAccountPaymentInstrumentRequired: return "MASTER_ACCOUNT_PAYMENT_INSTRUMENT_REQUIRED"
            case .maxDelegatedAdministratorsForServiceLimitExceeded: return "MAX_DELEGATED_ADMINISTRATORS_FOR_SERVICE_LIMIT_EXCEEDED"
            case .maxPolicyTypeAttachmentLimitExceeded: return "MAX_POLICY_TYPE_ATTACHMENT_LIMIT_EXCEEDED"
            case .maxTagLimitExceeded: return "MAX_TAG_LIMIT_EXCEEDED"
            case .memberAccountPaymentInstrumentRequired: return "MEMBER_ACCOUNT_PAYMENT_INSTRUMENT_REQUIRED"
            case .minPolicyTypeAttachmentLimitExceeded: return "MIN_POLICY_TYPE_ATTACHMENT_LIMIT_EXCEEDED"
            case .organizationNotInAllFeaturesMode: return "ORGANIZATION_NOT_IN_ALL_FEATURES_MODE"
            case .ouDepthLimitExceeded: return "OU_DEPTH_LIMIT_EXCEEDED"
            case .ouNumberLimitExceeded: return "OU_NUMBER_LIMIT_EXCEEDED"
            case .policyContentLimitExceeded: return "POLICY_CONTENT_LIMIT_EXCEEDED"
            case .policyNumberLimitExceeded: return "POLICY_NUMBER_LIMIT_EXCEEDED"
            case .serviceAccessNotEnabled: return "SERVICE_ACCESS_NOT_ENABLED"
            case .tagPolicyViolation: return "TAG_POLICY_VIOLATION"
            case .waitPeriodActive: return "WAIT_PERIOD_ACTIVE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// Performing this operation violates a minimum or maximum value limit. For example, attempting to remove the last service control policy (SCP) from an OU or root, inviting or creating too many accounts to the organization, or attaching too many policies to an account, OU, or root. This exception includes a reason that contains additional information about the violated limit: Some of the reasons in the following list might not be applicable to this specific API or operation.
///
/// * ACCOUNT_CANNOT_LEAVE_ORGANIZATION: You attempted to remove the management account from the organization. You can't remove the management account. Instead, after you remove all member accounts, delete the organization itself.
///
/// * ACCOUNT_CANNOT_LEAVE_WITHOUT_PHONE_VERIFICATION: You attempted to remove an account from the organization that doesn't yet have enough information to exist as a standalone account. This account requires you to first complete phone verification. Follow the steps at [Removing a member account from your organization](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_remove.html#orgs_manage_accounts_remove-from-master) in the Organizations User Guide.
///
/// * ACCOUNT_CREATION_RATE_LIMIT_EXCEEDED: You attempted to exceed the number of accounts that you can create in one day.
///
/// * ACCOUNT_CREATION_NOT_COMPLETE: Your account setup isn't complete or your account isn't fully active. You must complete the account setup before you create an organization.
///
/// * ACCOUNT_NUMBER_LIMIT_EXCEEDED: You attempted to exceed the limit on the number of accounts in an organization. If you need more accounts, contact [Amazon Web Services Support](https://console.aws.amazon.com/support/home#/) to request an increase in your limit. Or the number of invitations that you tried to send would cause you to exceed the limit of accounts in your organization. Send fewer invitations or contact Amazon Web Services Support to request an increase in the number of accounts. Deleted and closed accounts still count toward your limit. If you get this exception when running a command immediately after creating the organization, wait one hour and try again. After an hour, if the command continues to fail with this error, contact [Amazon Web Services Support](https://console.aws.amazon.com/support/home#/).
///
/// * CANNOT_REGISTER_SUSPENDED_ACCOUNT_AS_DELEGATED_ADMINISTRATOR: You cannot register a suspended account as a delegated administrator.
///
/// * CANNOT_REGISTER_MASTER_AS_DELEGATED_ADMINISTRATOR: You attempted to register the management account of the organization as a delegated administrator for an Amazon Web Services service integrated with Organizations. You can designate only a member account as a delegated administrator.
///
/// * CANNOT_CLOSE_MANAGEMENT_ACCOUNT: You attempted to close the management account. To close the management account for the organization, you must first either remove or close all member accounts in the organization. Follow standard account closure process using root credentials.
///
/// * CANNOT_REMOVE_DELEGATED_ADMINISTRATOR_FROM_ORG: You attempted to remove an account that is registered as a delegated administrator for a service integrated with your organization. To complete this operation, you must first deregister this account as a delegated administrator.
///
/// * CLOSE_ACCOUNT_QUOTA_EXCEEDED: You have exceeded close account quota for the past 30 days.
///
/// * CLOSE_ACCOUNT_REQUESTS_LIMIT_EXCEEDED: You attempted to exceed the number of accounts that you can close at a time.
///
/// * CREATE_ORGANIZATION_IN_BILLING_MODE_UNSUPPORTED_REGION: To create an organization in the specified region, you must enable all features mode.
///
/// * DELEGATED_ADMINISTRATOR_EXISTS_FOR_THIS_SERVICE: You attempted to register an Amazon Web Services account as a delegated administrator for an Amazon Web Services service that already has a delegated administrator. To complete this operation, you must first deregister any existing delegated administrators for this service.
///
/// * EMAIL_VERIFICATION_CODE_EXPIRED: The email verification code is only valid for a limited period of time. You must resubmit the request and generate a new verfication code.
///
/// * HANDSHAKE_RATE_LIMIT_EXCEEDED: You attempted to exceed the number of handshakes that you can send in one day.
///
/// * INVALID_PAYMENT_INSTRUMENT: You cannot remove an account because no supported payment method is associated with the account. Amazon Web Services does not support cards issued by financial institutions in Russia or Belarus. For more information, see [Managing your Amazon Web Services payments](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/manage-general.html).
///
/// * MASTER_ACCOUNT_ADDRESS_DOES_NOT_MATCH_MARKETPLACE: To create an account in this organization, you first must migrate the organization's management account to the marketplace that corresponds to the management account's address. All accounts in an organization must be associated with the same marketplace.
///
/// * MASTER_ACCOUNT_MISSING_BUSINESS_LICENSE: Applies only to the Amazon Web Services Regions in China. To create an organization, the master must have a valid business license. For more information, contact customer support.
///
/// * MASTER_ACCOUNT_MISSING_CONTACT_INFO: To complete this operation, you must first provide a valid contact address and phone number for the management account. Then try the operation again.
///
/// * MASTER_ACCOUNT_NOT_GOVCLOUD_ENABLED: To complete this operation, the management account must have an associated account in the Amazon Web Services GovCloud (US-West) Region. For more information, see [Organizations](https://docs.aws.amazon.com/govcloud-us/latest/UserGuide/govcloud-organizations.html) in the Amazon Web Services GovCloud User Guide.
///
/// * MASTER_ACCOUNT_PAYMENT_INSTRUMENT_REQUIRED: To create an organization with this management account, you first must associate a valid payment instrument, such as a credit card, with the account. For more information, see [Considerations before removing an account from an organization](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_account-before-remove.html) in the Organizations User Guide.
///
/// * MAX_DELEGATED_ADMINISTRATORS_FOR_SERVICE_LIMIT_EXCEEDED: You attempted to register more delegated administrators than allowed for the service principal.
///
/// * MAX_POLICY_TYPE_ATTACHMENT_LIMIT_EXCEEDED: You attempted to exceed the number of policies of a certain type that can be attached to an entity at one time.
///
/// * MAX_TAG_LIMIT_EXCEEDED: You have exceeded the number of tags allowed on this resource.
///
/// * MEMBER_ACCOUNT_PAYMENT_INSTRUMENT_REQUIRED: To complete this operation with this member account, you first must associate a valid payment instrument, such as a credit card, with the account. For more information, see [Considerations before removing an account from an organization](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_account-before-remove.html) in the Organizations User Guide.
///
/// * MIN_POLICY_TYPE_ATTACHMENT_LIMIT_EXCEEDED: You attempted to detach a policy from an entity that would cause the entity to have fewer than the minimum number of policies of a certain type required.
///
/// * ORGANIZATION_NOT_IN_ALL_FEATURES_MODE: You attempted to perform an operation that requires the organization to be configured to support all features. An organization that supports only consolidated billing features can't perform this operation.
///
/// * OU_DEPTH_LIMIT_EXCEEDED: You attempted to create an OU tree that is too many levels deep.
///
/// * OU_NUMBER_LIMIT_EXCEEDED: You attempted to exceed the number of OUs that you can have in an organization.
///
/// * POLICY_CONTENT_LIMIT_EXCEEDED: You attempted to create a policy that is larger than the maximum size.
///
/// * POLICY_NUMBER_LIMIT_EXCEEDED: You attempted to exceed the number of policies that you can have in an organization.
///
/// * SERVICE_ACCESS_NOT_ENABLED: You attempted to register a delegated administrator before you enabled service access. Call the EnableAWSServiceAccess API first.
///
/// * TAG_POLICY_VIOLATION: You attempted to create or update a resource with tags that are not compliant with the tag policy requirements for this account.
///
/// * WAIT_PERIOD_ACTIVE: After you create an Amazon Web Services account, you must wait until at least seven days after the account was created. Invited accounts aren't subject to this waiting period.
public struct ConstraintViolationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        public internal(set) var reason: OrganizationsClientTypes.ConstraintViolationExceptionReason? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConstraintViolationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        reason: OrganizationsClientTypes.ConstraintViolationExceptionReason? = nil
    )
    {
        self.properties.message = message
        self.properties.reason = reason
    }
}

/// The selected policy is already attached to the specified target.
public struct DuplicatePolicyAttachmentException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DuplicatePolicyAttachmentException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Changes to the effective policy are in progress, and its contents can't be returned. Try the operation again later.
public struct PolicyChangesInProgressException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "PolicyChangesInProgressException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// We can't find a policy with the PolicyId that you specified.
public struct PolicyNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "PolicyNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified policy type isn't currently enabled in this root. You can't attach policies of the specified type to entities in a root until you enable that type in the root. For more information, see [Enabling all features in your organization](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html) in the Organizations User Guide.
public struct PolicyTypeNotEnabledException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "PolicyTypeNotEnabledException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// We can't find a root, OU, account, or policy with the TargetId that you specified.
public struct TargetNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TargetNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// This action isn't available in the current Amazon Web Services Region.
public struct UnsupportedAPIEndpointException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnsupportedAPIEndpointException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct AttachPolicyInput: Swift.Sendable {
    /// The unique identifier (ID) of the policy that you want to attach to the target. You can get the ID for the policy by calling the [ListPolicies] operation. The [regex pattern](http://wikipedia.org/wiki/regex) for a policy ID string requires "p-" followed by from 8 to 128 lowercase or uppercase letters, digits, or the underscore character (_).
    /// This member is required.
    public var policyId: Swift.String?
    /// The unique identifier (ID) of the root, OU, or account that you want to attach the policy to. You can get the ID by calling the [ListRoots], [ListOrganizationalUnitsForParent], or [ListAccounts] operations. The [regex pattern](http://wikipedia.org/wiki/regex) for a target ID string requires one of the following:
    ///
    /// * Root - A string that begins with "r-" followed by from 4 to 32 lowercase letters or digits.
    ///
    /// * Account - A string that consists of exactly 12 digits.
    ///
    /// * Organizational unit (OU) - A string that begins with "ou-" followed by from 4 to 32 lowercase letters or digits (the ID of the root that the OU is in). This string is followed by a second "-" dash and from 8 to 32 additional lowercase letters or digits.
    /// This member is required.
    public var targetId: Swift.String?

    public init(
        policyId: Swift.String? = nil,
        targetId: Swift.String? = nil
    )
    {
        self.policyId = policyId
        self.targetId = targetId
    }
}

public struct CancelHandshakeInput: Swift.Sendable {
    /// The unique identifier (ID) of the handshake that you want to cancel. You can get the ID from the [ListHandshakesForOrganization] operation. The [regex pattern](http://wikipedia.org/wiki/regex) for handshake ID string requires "h-" followed by from 8 to 32 lowercase letters or digits.
    /// This member is required.
    public var handshakeId: Swift.String?

    public init(
        handshakeId: Swift.String? = nil
    )
    {
        self.handshakeId = handshakeId
    }
}

/// The request failed because it conflicts with the current state of the specified resource.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CloseAccountInput: Swift.Sendable {
    /// Retrieves the Amazon Web Services account Id for the current CloseAccount API request.
    /// This member is required.
    public var accountId: Swift.String?

    public init(
        accountId: Swift.String? = nil
    )
    {
        self.accountId = accountId
    }
}

/// Organizations couldn't perform the operation because your organization hasn't finished initializing. This can take up to an hour. Try again later. If after one hour you continue to receive this error, contact [Amazon Web Services Support](https://console.aws.amazon.com/support/home#/).
public struct FinalizingOrganizationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "FinalizingOrganizationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension OrganizationsClientTypes {

    public enum IAMUserAccessToBilling: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case allow
        case deny
        case sdkUnknown(Swift.String)

        public static var allCases: [IAMUserAccessToBilling] {
            return [
                .allow,
                .deny
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .allow: return "ALLOW"
            case .deny: return "DENY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension OrganizationsClientTypes {

    /// A custom key-value pair associated with a resource within your organization. You can attach tags to any of the following organization resources.
    ///
    /// * Amazon Web Services account
    ///
    /// * Organizational unit (OU)
    ///
    /// * Organization root
    ///
    /// * Policy
    public struct Tag: Swift.Sendable {
        /// The key identifier, or name, of the tag.
        /// This member is required.
        public var key: Swift.String?
        /// The string value that's associated with the key of the tag. You can set the value of a tag to an empty string, but you can't set the value of a tag to null.
        /// This member is required.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }
}

public struct CreateAccountInput: Swift.Sendable {
    /// The friendly name of the member account.
    /// This member is required.
    public var accountName: Swift.String?
    /// The email address of the owner to assign to the new member account. This email address must not already be associated with another Amazon Web Services account. You must use a valid email address to complete account creation. The rules for a valid email address:
    ///
    /// * The address must be a minimum of 6 and a maximum of 64 characters long.
    ///
    /// * All characters must be 7-bit ASCII characters.
    ///
    /// * There must be one and only one @ symbol, which separates the local name from the domain name.
    ///
    /// * The local name can't contain any of the following characters: whitespace, " ' ( ) < > [ ] : ; , \ | % &
    ///
    /// * The local name can't begin with a dot (.)
    ///
    /// * The domain name can consist of only the characters [a-z],[A-Z],[0-9], hyphen (-), or dot (.)
    ///
    /// * The domain name can't begin or end with a hyphen (-) or dot (.)
    ///
    /// * The domain name must contain at least one dot
    ///
    ///
    /// You can't access the root user of the account or remove an account that was created with an invalid email address.
    /// This member is required.
    public var email: Swift.String?
    /// If set to ALLOW, the new account enables IAM users to access account billing information if they have the required permissions. If set to DENY, only the root user of the new account can access account billing information. For more information, see [About IAM access to the Billing and Cost Management console](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/grantaccess.html#ControllingAccessWebsite-Activate) in the Amazon Web Services Billing and Cost Management User Guide. If you don't specify this parameter, the value defaults to ALLOW, and IAM users and roles with the required permissions can access billing information for the new account.
    public var iamUserAccessToBilling: OrganizationsClientTypes.IAMUserAccessToBilling?
    /// The name of an IAM role that Organizations automatically preconfigures in the new member account. This role trusts the management account, allowing users in the management account to assume the role, as permitted by the management account administrator. The role has administrator permissions in the new member account. If you don't specify this parameter, the role name defaults to OrganizationAccountAccessRole. For more information about how to use this role to access the member account, see the following links:
    ///
    /// * [Creating the OrganizationAccountAccessRole in an invited member account](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_access.html#orgs_manage_accounts_create-cross-account-role) in the Organizations User Guide
    ///
    /// * Steps 2 and 3 in [IAM Tutorial: Delegate access across Amazon Web Services accounts using IAM roles](https://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_cross-account-with-roles.html) in the IAM User Guide
    ///
    ///
    /// The [regex pattern](http://wikipedia.org/wiki/regex) that is used to validate this parameter. The pattern can include uppercase letters, lowercase letters, digits with no spaces, and any of the following characters: =,.@-
    public var roleName: Swift.String?
    /// A list of tags that you want to attach to the newly created account. For each tag in the list, you must specify both a tag key and a value. You can set the value to an empty string, but you can't set it to null. For more information about tagging, see [Tagging Organizations resources](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_tagging.html) in the Organizations User Guide. If any one of the tags is not valid or if you exceed the maximum allowed number of tags for an account, then the entire request fails and the account is not created.
    public var tags: [OrganizationsClientTypes.Tag]?

    public init(
        accountName: Swift.String? = nil,
        email: Swift.String? = nil,
        iamUserAccessToBilling: OrganizationsClientTypes.IAMUserAccessToBilling? = nil,
        roleName: Swift.String? = nil,
        tags: [OrganizationsClientTypes.Tag]? = nil
    )
    {
        self.accountName = accountName
        self.email = email
        self.iamUserAccessToBilling = iamUserAccessToBilling
        self.roleName = roleName
        self.tags = tags
    }
}

extension CreateAccountInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateAccountInput(iamUserAccessToBilling: \(Swift.String(describing: iamUserAccessToBilling)), roleName: \(Swift.String(describing: roleName)), tags: \(Swift.String(describing: tags)), accountName: \"CONTENT_REDACTED\", email: \"CONTENT_REDACTED\")"}
}

extension OrganizationsClientTypes {

    public enum CreateAccountFailureReason: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accountLimitExceeded
        case concurrentAccountModification
        case emailAlreadyExists
        case failedBusinessValidation
        case govcloudAccountAlreadyExists
        case internalFailure
        case invalidAddress
        case invalidEmail
        case invalidIdentityForBusinessValidation
        case invalidPaymentInstrument
        case missingBusinessValidation
        case missingPaymentInstrument
        case pendingBusinessValidationv
        case unknownBusinessValidation
        case updateExistingResourcePolicyWithTagsNotSupported
        case sdkUnknown(Swift.String)

        public static var allCases: [CreateAccountFailureReason] {
            return [
                .accountLimitExceeded,
                .concurrentAccountModification,
                .emailAlreadyExists,
                .failedBusinessValidation,
                .govcloudAccountAlreadyExists,
                .internalFailure,
                .invalidAddress,
                .invalidEmail,
                .invalidIdentityForBusinessValidation,
                .invalidPaymentInstrument,
                .missingBusinessValidation,
                .missingPaymentInstrument,
                .pendingBusinessValidationv,
                .unknownBusinessValidation,
                .updateExistingResourcePolicyWithTagsNotSupported
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accountLimitExceeded: return "ACCOUNT_LIMIT_EXCEEDED"
            case .concurrentAccountModification: return "CONCURRENT_ACCOUNT_MODIFICATION"
            case .emailAlreadyExists: return "EMAIL_ALREADY_EXISTS"
            case .failedBusinessValidation: return "FAILED_BUSINESS_VALIDATION"
            case .govcloudAccountAlreadyExists: return "GOVCLOUD_ACCOUNT_ALREADY_EXISTS"
            case .internalFailure: return "INTERNAL_FAILURE"
            case .invalidAddress: return "INVALID_ADDRESS"
            case .invalidEmail: return "INVALID_EMAIL"
            case .invalidIdentityForBusinessValidation: return "INVALID_IDENTITY_FOR_BUSINESS_VALIDATION"
            case .invalidPaymentInstrument: return "INVALID_PAYMENT_INSTRUMENT"
            case .missingBusinessValidation: return "MISSING_BUSINESS_VALIDATION"
            case .missingPaymentInstrument: return "MISSING_PAYMENT_INSTRUMENT"
            case .pendingBusinessValidationv: return "PENDING_BUSINESS_VALIDATION"
            case .unknownBusinessValidation: return "UNKNOWN_BUSINESS_VALIDATION"
            case .updateExistingResourcePolicyWithTagsNotSupported: return "UPDATE_EXISTING_RESOURCE_POLICY_WITH_TAGS_NOT_SUPPORTED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension OrganizationsClientTypes {

    public enum CreateAccountState: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case inProgress
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [CreateAccountState] {
            return [
                .failed,
                .inProgress,
                .succeeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension OrganizationsClientTypes {

    /// Contains the status about a [CreateAccount] or [CreateGovCloudAccount] request to create an Amazon Web Services account or an Amazon Web Services GovCloud (US) account in an organization.
    public struct CreateAccountStatus: Swift.Sendable {
        /// If the account was created successfully, the unique identifier (ID) of the new account. The [regex pattern](http://wikipedia.org/wiki/regex) for an account ID string requires exactly 12 digits.
        public var accountId: Swift.String?
        /// The account name given to the account when it was created.
        public var accountName: Swift.String?
        /// The date and time that the account was created and the request completed.
        public var completedTimestamp: Foundation.Date?
        /// If the request failed, a description of the reason for the failure.
        ///
        /// * ACCOUNT_LIMIT_EXCEEDED: The account couldn't be created because you reached the limit on the number of accounts in your organization.
        ///
        /// * CONCURRENT_ACCOUNT_MODIFICATION: You already submitted a request with the same information.
        ///
        /// * EMAIL_ALREADY_EXISTS: The account could not be created because another Amazon Web Services account with that email address already exists.
        ///
        /// * FAILED_BUSINESS_VALIDATION: The Amazon Web Services account that owns your organization failed to receive business license validation.
        ///
        /// * GOVCLOUD_ACCOUNT_ALREADY_EXISTS: The account in the Amazon Web Services GovCloud (US) Region could not be created because this Region already includes an account with that email address.
        ///
        /// * IDENTITY_INVALID_BUSINESS_VALIDATION: The Amazon Web Services account that owns your organization can't complete business license validation because it doesn't have valid identity data.
        ///
        /// * INVALID_ADDRESS: The account could not be created because the address you provided is not valid.
        ///
        /// * INVALID_EMAIL: The account could not be created because the email address you provided is not valid.
        ///
        /// * INVALID_PAYMENT_INSTRUMENT: The Amazon Web Services account that owns your organization does not have a supported payment method associated with the account. Amazon Web Services does not support cards issued by financial institutions in Russia or Belarus. For more information, see [Managing your Amazon Web Services payments](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/manage-general.html).
        ///
        /// * INTERNAL_FAILURE: The account could not be created because of an internal failure. Try again later. If the problem persists, contact Amazon Web Services Customer Support.
        ///
        /// * MISSING_BUSINESS_VALIDATION: The Amazon Web Services account that owns your organization has not received Business Validation.
        ///
        /// * MISSING_PAYMENT_INSTRUMENT: You must configure the management account with a valid payment method, such as a credit card.
        ///
        /// * PENDING_BUSINESS_VALIDATION: The Amazon Web Services account that owns your organization is still in the process of completing business license validation.
        ///
        /// * UNKNOWN_BUSINESS_VALIDATION: The Amazon Web Services account that owns your organization has an unknown issue with business license validation.
        public var failureReason: OrganizationsClientTypes.CreateAccountFailureReason?
        /// If the account was created successfully, the unique identifier (ID) of the new account in the Amazon Web Services GovCloud (US) Region.
        public var govCloudAccountId: Swift.String?
        /// The unique identifier (ID) that references this request. You get this value from the response of the initial [CreateAccount] request to create the account. The [regex pattern](http://wikipedia.org/wiki/regex) for a create account request ID string requires "car-" followed by from 8 to 32 lowercase letters or digits.
        public var id: Swift.String?
        /// The date and time that the request was made for the account creation.
        public var requestedTimestamp: Foundation.Date?
        /// The status of the asynchronous request to create an Amazon Web Services account.
        public var state: OrganizationsClientTypes.CreateAccountState?

        public init(
            accountId: Swift.String? = nil,
            accountName: Swift.String? = nil,
            completedTimestamp: Foundation.Date? = nil,
            failureReason: OrganizationsClientTypes.CreateAccountFailureReason? = nil,
            govCloudAccountId: Swift.String? = nil,
            id: Swift.String? = nil,
            requestedTimestamp: Foundation.Date? = nil,
            state: OrganizationsClientTypes.CreateAccountState? = nil
        )
        {
            self.accountId = accountId
            self.accountName = accountName
            self.completedTimestamp = completedTimestamp
            self.failureReason = failureReason
            self.govCloudAccountId = govCloudAccountId
            self.id = id
            self.requestedTimestamp = requestedTimestamp
            self.state = state
        }
    }
}

extension OrganizationsClientTypes.CreateAccountStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateAccountStatus(accountId: \(Swift.String(describing: accountId)), completedTimestamp: \(Swift.String(describing: completedTimestamp)), failureReason: \(Swift.String(describing: failureReason)), govCloudAccountId: \(Swift.String(describing: govCloudAccountId)), id: \(Swift.String(describing: id)), requestedTimestamp: \(Swift.String(describing: requestedTimestamp)), state: \(Swift.String(describing: state)), accountName: \"CONTENT_REDACTED\")"}
}

public struct CreateAccountOutput: Swift.Sendable {
    /// A structure that contains details about the request to create an account. This response structure might not be fully populated when you first receive it because account creation is an asynchronous process. You can pass the returned CreateAccountStatus ID as a parameter to [DescribeCreateAccountStatus] to get status about the progress of the request at later times. You can also check the CloudTrail log for the CreateAccountResult event. For more information, see [Logging and monitoring in Organizations](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_security_incident-response.html) in the Organizations User Guide.
    public var createAccountStatus: OrganizationsClientTypes.CreateAccountStatus?

    public init(
        createAccountStatus: OrganizationsClientTypes.CreateAccountStatus? = nil
    )
    {
        self.createAccountStatus = createAccountStatus
    }
}

public struct CreateGovCloudAccountInput: Swift.Sendable {
    /// The friendly name of the member account. The account name can consist of only the characters [a-z],[A-Z],[0-9], hyphen (-), or dot (.) You can't separate characters with a dash (–).
    /// This member is required.
    public var accountName: Swift.String?
    /// Specifies the email address of the owner to assign to the new member account in the commercial Region. This email address must not already be associated with another Amazon Web Services account. You must use a valid email address to complete account creation. The rules for a valid email address:
    ///
    /// * The address must be a minimum of 6 and a maximum of 64 characters long.
    ///
    /// * All characters must be 7-bit ASCII characters.
    ///
    /// * There must be one and only one @ symbol, which separates the local name from the domain name.
    ///
    /// * The local name can't contain any of the following characters: whitespace, " ' ( ) < > [ ] : ; , \ | % &
    ///
    /// * The local name can't begin with a dot (.)
    ///
    /// * The domain name can consist of only the characters [a-z],[A-Z],[0-9], hyphen (-), or dot (.)
    ///
    /// * The domain name can't begin or end with a hyphen (-) or dot (.)
    ///
    /// * The domain name must contain at least one dot
    ///
    ///
    /// You can't access the root user of the account or remove an account that was created with an invalid email address. Like all request parameters for CreateGovCloudAccount, the request for the email address for the Amazon Web Services GovCloud (US) account originates from the commercial Region, not from the Amazon Web Services GovCloud (US) Region.
    /// This member is required.
    public var email: Swift.String?
    /// If set to ALLOW, the new linked account in the commercial Region enables IAM users to access account billing information if they have the required permissions. If set to DENY, only the root user of the new account can access account billing information. For more information, see [About IAM access to the Billing and Cost Management console](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/grantaccess.html#ControllingAccessWebsite-Activate) in the Amazon Web Services Billing and Cost Management User Guide. If you don't specify this parameter, the value defaults to ALLOW, and IAM users and roles with the required permissions can access billing information for the new account.
    public var iamUserAccessToBilling: OrganizationsClientTypes.IAMUserAccessToBilling?
    /// (Optional) The name of an IAM role that Organizations automatically preconfigures in the new member accounts in both the Amazon Web Services GovCloud (US) Region and in the commercial Region. This role trusts the management account, allowing users in the management account to assume the role, as permitted by the management account administrator. The role has administrator permissions in the new member account. If you don't specify this parameter, the role name defaults to OrganizationAccountAccessRole. For more information about how to use this role to access the member account, see the following links:
    ///
    /// * [Creating the OrganizationAccountAccessRole in an invited member account](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_access.html#orgs_manage_accounts_create-cross-account-role) in the Organizations User Guide
    ///
    /// * Steps 2 and 3 in [IAM Tutorial: Delegate access across Amazon Web Services accounts using IAM roles](https://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_cross-account-with-roles.html) in the IAM User Guide
    ///
    ///
    /// The [regex pattern](http://wikipedia.org/wiki/regex) that is used to validate this parameter. The pattern can include uppercase letters, lowercase letters, digits with no spaces, and any of the following characters: =,.@-
    public var roleName: Swift.String?
    /// A list of tags that you want to attach to the newly created account. These tags are attached to the commercial account associated with the GovCloud account, and not to the GovCloud account itself. To add tags to the actual GovCloud account, call the [TagResource] operation in the GovCloud region after the new GovCloud account exists. For each tag in the list, you must specify both a tag key and a value. You can set the value to an empty string, but you can't set it to null. For more information about tagging, see [Tagging Organizations resources](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_tagging.html) in the Organizations User Guide. If any one of the tags is not valid or if you exceed the maximum allowed number of tags for an account, then the entire request fails and the account is not created.
    public var tags: [OrganizationsClientTypes.Tag]?

    public init(
        accountName: Swift.String? = nil,
        email: Swift.String? = nil,
        iamUserAccessToBilling: OrganizationsClientTypes.IAMUserAccessToBilling? = nil,
        roleName: Swift.String? = nil,
        tags: [OrganizationsClientTypes.Tag]? = nil
    )
    {
        self.accountName = accountName
        self.email = email
        self.iamUserAccessToBilling = iamUserAccessToBilling
        self.roleName = roleName
        self.tags = tags
    }
}

extension CreateGovCloudAccountInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateGovCloudAccountInput(iamUserAccessToBilling: \(Swift.String(describing: iamUserAccessToBilling)), roleName: \(Swift.String(describing: roleName)), tags: \(Swift.String(describing: tags)), accountName: \"CONTENT_REDACTED\", email: \"CONTENT_REDACTED\")"}
}

public struct CreateGovCloudAccountOutput: Swift.Sendable {
    /// Contains the status about a [CreateAccount] or [CreateGovCloudAccount] request to create an Amazon Web Services account or an Amazon Web Services GovCloud (US) account in an organization.
    public var createAccountStatus: OrganizationsClientTypes.CreateAccountStatus?

    public init(
        createAccountStatus: OrganizationsClientTypes.CreateAccountStatus? = nil
    )
    {
        self.createAccountStatus = createAccountStatus
    }
}

extension OrganizationsClientTypes {

    public enum OrganizationFeatureSet: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case all
        case consolidatedBilling
        case sdkUnknown(Swift.String)

        public static var allCases: [OrganizationFeatureSet] {
            return [
                .all,
                .consolidatedBilling
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case .consolidatedBilling: return "CONSOLIDATED_BILLING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateOrganizationInput: Swift.Sendable {
    /// Specifies the feature set supported by the new organization. Each feature set supports different levels of functionality.
    ///
    /// * CONSOLIDATED_BILLING: All member accounts have their bills consolidated to and paid by the management account. For more information, see [Consolidated billing](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#feature-set-cb-only) in the Organizations User Guide. The consolidated billing feature subset isn't available for organizations in the Amazon Web Services GovCloud (US) Region.
    ///
    /// * ALL: In addition to all the features supported by the consolidated billing feature set, the management account can also apply any policy type to any member account in the organization. For more information, see [All features](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#feature-set-all) in the Organizations User Guide.
    public var featureSet: OrganizationsClientTypes.OrganizationFeatureSet?

    public init(
        featureSet: OrganizationsClientTypes.OrganizationFeatureSet? = nil
    )
    {
        self.featureSet = featureSet
    }
}

extension OrganizationsClientTypes {

    public enum PolicyTypeStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case enabled
        case pendingDisable
        case pendingEnable
        case sdkUnknown(Swift.String)

        public static var allCases: [PolicyTypeStatus] {
            return [
                .enabled,
                .pendingDisable,
                .pendingEnable
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .enabled: return "ENABLED"
            case .pendingDisable: return "PENDING_DISABLE"
            case .pendingEnable: return "PENDING_ENABLE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension OrganizationsClientTypes {

    public enum PolicyType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case aiservicesOptOutPolicy
        case backupPolicy
        case chatbotPolicy
        case serviceControlPolicy
        case tagPolicy
        case sdkUnknown(Swift.String)

        public static var allCases: [PolicyType] {
            return [
                .aiservicesOptOutPolicy,
                .backupPolicy,
                .chatbotPolicy,
                .serviceControlPolicy,
                .tagPolicy
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .aiservicesOptOutPolicy: return "AISERVICES_OPT_OUT_POLICY"
            case .backupPolicy: return "BACKUP_POLICY"
            case .chatbotPolicy: return "CHATBOT_POLICY"
            case .serviceControlPolicy: return "SERVICE_CONTROL_POLICY"
            case .tagPolicy: return "TAG_POLICY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension OrganizationsClientTypes {

    /// Contains information about a policy type and its status in the associated root.
    public struct PolicyTypeSummary: Swift.Sendable {
        /// The status of the policy type as it relates to the associated root. To attach a policy of the specified type to a root or to an OU or account in that root, it must be available in the organization and enabled for that root.
        public var status: OrganizationsClientTypes.PolicyTypeStatus?
        /// The name of the policy type.
        public var type: OrganizationsClientTypes.PolicyType?

        public init(
            status: OrganizationsClientTypes.PolicyTypeStatus? = nil,
            type: OrganizationsClientTypes.PolicyType? = nil
        )
        {
            self.status = status
            self.type = type
        }
    }
}

extension OrganizationsClientTypes {

    /// Contains details about an organization. An organization is a collection of accounts that are centrally managed together using consolidated billing, organized hierarchically with organizational units (OUs), and controlled with policies .
    public struct Organization: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of an organization. For more information about ARNs in Organizations, see [ARN Formats Supported by Organizations](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsorganizations.html#awsorganizations-resources-for-iam-policies) in the Amazon Web Services Service Authorization Reference.
        public var arn: Swift.String?
        /// Do not use. This field is deprecated and doesn't provide complete information about the policies in your organization. To determine the policies that are enabled and available for use in your organization, use the [ListRoots] operation instead.
        public var availablePolicyTypes: [OrganizationsClientTypes.PolicyTypeSummary]?
        /// Specifies the functionality that currently is available to the organization. If set to "ALL", then all features are enabled and policies can be applied to accounts in the organization. If set to "CONSOLIDATED_BILLING", then only consolidated billing functionality is available. For more information, see [Enabling all features in your organization](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html) in the Organizations User Guide.
        public var featureSet: OrganizationsClientTypes.OrganizationFeatureSet?
        /// The unique identifier (ID) of an organization. The [regex pattern](http://wikipedia.org/wiki/regex) for an organization ID string requires "o-" followed by from 10 to 32 lowercase letters or digits.
        public var id: Swift.String?
        /// The Amazon Resource Name (ARN) of the account that is designated as the management account for the organization. For more information about ARNs in Organizations, see [ARN Formats Supported by Organizations](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsorganizations.html#awsorganizations-resources-for-iam-policies) in the Amazon Web Services Service Authorization Reference.
        public var masterAccountArn: Swift.String?
        /// The email address that is associated with the Amazon Web Services account that is designated as the management account for the organization.
        public var masterAccountEmail: Swift.String?
        /// The unique identifier (ID) of the management account of an organization. The [regex pattern](http://wikipedia.org/wiki/regex) for an account ID string requires exactly 12 digits.
        public var masterAccountId: Swift.String?

        public init(
            arn: Swift.String? = nil,
            availablePolicyTypes: [OrganizationsClientTypes.PolicyTypeSummary]? = nil,
            featureSet: OrganizationsClientTypes.OrganizationFeatureSet? = nil,
            id: Swift.String? = nil,
            masterAccountArn: Swift.String? = nil,
            masterAccountEmail: Swift.String? = nil,
            masterAccountId: Swift.String? = nil
        )
        {
            self.arn = arn
            self.availablePolicyTypes = availablePolicyTypes
            self.featureSet = featureSet
            self.id = id
            self.masterAccountArn = masterAccountArn
            self.masterAccountEmail = masterAccountEmail
            self.masterAccountId = masterAccountId
        }
    }
}

extension OrganizationsClientTypes.Organization: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Organization(arn: \(Swift.String(describing: arn)), availablePolicyTypes: \(Swift.String(describing: availablePolicyTypes)), featureSet: \(Swift.String(describing: featureSet)), id: \(Swift.String(describing: id)), masterAccountArn: \(Swift.String(describing: masterAccountArn)), masterAccountId: \(Swift.String(describing: masterAccountId)), masterAccountEmail: \"CONTENT_REDACTED\")"}
}

public struct CreateOrganizationOutput: Swift.Sendable {
    /// A structure that contains details about the newly created organization.
    public var organization: OrganizationsClientTypes.Organization?

    public init(
        organization: OrganizationsClientTypes.Organization? = nil
    )
    {
        self.organization = organization
    }
}

/// An OU with the same name already exists.
public struct DuplicateOrganizationalUnitException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DuplicateOrganizationalUnitException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// We can't find a root or OU with the ParentId that you specified.
public struct ParentNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ParentNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CreateOrganizationalUnitInput: Swift.Sendable {
    /// The friendly name to assign to the new OU.
    /// This member is required.
    public var name: Swift.String?
    /// The unique identifier (ID) of the parent root or OU that you want to create the new OU in. The [regex pattern](http://wikipedia.org/wiki/regex) for a parent ID string requires one of the following:
    ///
    /// * Root - A string that begins with "r-" followed by from 4 to 32 lowercase letters or digits.
    ///
    /// * Organizational unit (OU) - A string that begins with "ou-" followed by from 4 to 32 lowercase letters or digits (the ID of the root that the OU is in). This string is followed by a second "-" dash and from 8 to 32 additional lowercase letters or digits.
    /// This member is required.
    public var parentId: Swift.String?
    /// A list of tags that you want to attach to the newly created OU. For each tag in the list, you must specify both a tag key and a value. You can set the value to an empty string, but you can't set it to null. For more information about tagging, see [Tagging Organizations resources](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_tagging.html) in the Organizations User Guide. If any one of the tags is not valid or if you exceed the allowed number of tags for an OU, then the entire request fails and the OU is not created.
    public var tags: [OrganizationsClientTypes.Tag]?

    public init(
        name: Swift.String? = nil,
        parentId: Swift.String? = nil,
        tags: [OrganizationsClientTypes.Tag]? = nil
    )
    {
        self.name = name
        self.parentId = parentId
        self.tags = tags
    }
}

extension OrganizationsClientTypes {

    /// Contains details about an organizational unit (OU). An OU is a container of Amazon Web Services accounts within a root of an organization. Policies that are attached to an OU apply to all accounts contained in that OU and in any child OUs.
    public struct OrganizationalUnit: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of this OU. For more information about ARNs in Organizations, see [ARN Formats Supported by Organizations](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsorganizations.html#awsorganizations-resources-for-iam-policies) in the Amazon Web Services Service Authorization Reference.
        public var arn: Swift.String?
        /// The unique identifier (ID) associated with this OU. The ID is unique to the organization only. The [regex pattern](http://wikipedia.org/wiki/regex) for an organizational unit ID string requires "ou-" followed by from 4 to 32 lowercase letters or digits (the ID of the root that contains the OU). This string is followed by a second "-" dash and from 8 to 32 additional lowercase letters or digits.
        public var id: Swift.String?
        /// The friendly name of this OU. The [regex pattern](http://wikipedia.org/wiki/regex) that is used to validate this parameter is a string of any of the characters in the ASCII character range.
        public var name: Swift.String?

        public init(
            arn: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.arn = arn
            self.id = id
            self.name = name
        }
    }
}

public struct CreateOrganizationalUnitOutput: Swift.Sendable {
    /// A structure that contains details about the newly created OU.
    public var organizationalUnit: OrganizationsClientTypes.OrganizationalUnit?

    public init(
        organizationalUnit: OrganizationsClientTypes.OrganizationalUnit? = nil
    )
    {
        self.organizationalUnit = organizationalUnit
    }
}

/// A policy with the same name already exists.
public struct DuplicatePolicyException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DuplicatePolicyException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The provided policy document doesn't meet the requirements of the specified policy type. For example, the syntax might be incorrect. For details about service control policy syntax, see [SCP syntax](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scps_syntax.html) in the Organizations User Guide.
public struct MalformedPolicyDocumentException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "MalformedPolicyDocumentException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// You can't use the specified policy type with the feature set currently enabled for this organization. For example, you can enable SCPs only after you enable all features in the organization. For more information, see [Managing Organizations policies](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies.html#enable_policies_on_root)in the Organizations User Guide.
public struct PolicyTypeNotAvailableForOrganizationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "PolicyTypeNotAvailableForOrganizationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CreatePolicyInput: Swift.Sendable {
    /// The policy text content to add to the new policy. The text that you supply must adhere to the rules of the policy type you specify in the Type parameter. The maximum size of a policy document depends on the policy's type. For more information, see [Maximum and minimum values](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_reference_limits.html#min-max-values) in the Organizations User Guide.
    /// This member is required.
    public var content: Swift.String?
    /// An optional description to assign to the policy.
    /// This member is required.
    public var description: Swift.String?
    /// The friendly name to assign to the policy. The [regex pattern](http://wikipedia.org/wiki/regex) that is used to validate this parameter is a string of any of the characters in the ASCII character range.
    /// This member is required.
    public var name: Swift.String?
    /// A list of tags that you want to attach to the newly created policy. For each tag in the list, you must specify both a tag key and a value. You can set the value to an empty string, but you can't set it to null. For more information about tagging, see [Tagging Organizations resources](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_tagging.html) in the Organizations User Guide. If any one of the tags is not valid or if you exceed the allowed number of tags for a policy, then the entire request fails and the policy is not created.
    public var tags: [OrganizationsClientTypes.Tag]?
    /// The type of policy to create. You can specify one of the following values:
    ///
    /// * [SERVICE_CONTROL_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html)
    ///
    /// * [BACKUP_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_backup.html)
    ///
    /// * [TAG_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html)
    ///
    /// * [CHATBOT_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_chatbot.html)
    ///
    /// * [AISERVICES_OPT_OUT_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html)
    /// This member is required.
    public var type: OrganizationsClientTypes.PolicyType?

    public init(
        content: Swift.String? = nil,
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        tags: [OrganizationsClientTypes.Tag]? = nil,
        type: OrganizationsClientTypes.PolicyType? = nil
    )
    {
        self.content = content
        self.description = description
        self.name = name
        self.tags = tags
        self.type = type
    }
}

extension OrganizationsClientTypes {

    /// Contains information about a policy, but does not include the content. To see the content of a policy, see [DescribePolicy].
    public struct PolicySummary: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the policy. For more information about ARNs in Organizations, see [ARN Formats Supported by Organizations](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsorganizations.html#awsorganizations-resources-for-iam-policies) in the Amazon Web Services Service Authorization Reference.
        public var arn: Swift.String?
        /// A boolean value that indicates whether the specified policy is an Amazon Web Services managed policy. If true, then you can attach the policy to roots, OUs, or accounts, but you cannot edit it.
        public var awsManaged: Swift.Bool
        /// The description of the policy.
        public var description: Swift.String?
        /// The unique identifier (ID) of the policy. The [regex pattern](http://wikipedia.org/wiki/regex) for a policy ID string requires "p-" followed by from 8 to 128 lowercase or uppercase letters, digits, or the underscore character (_).
        public var id: Swift.String?
        /// The friendly name of the policy. The [regex pattern](http://wikipedia.org/wiki/regex) that is used to validate this parameter is a string of any of the characters in the ASCII character range.
        public var name: Swift.String?
        /// The type of policy.
        public var type: OrganizationsClientTypes.PolicyType?

        public init(
            arn: Swift.String? = nil,
            awsManaged: Swift.Bool = false,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            type: OrganizationsClientTypes.PolicyType? = nil
        )
        {
            self.arn = arn
            self.awsManaged = awsManaged
            self.description = description
            self.id = id
            self.name = name
            self.type = type
        }
    }
}

extension OrganizationsClientTypes {

    /// Contains rules to be applied to the affected accounts. Policies can be attached directly to accounts, or to roots and OUs to affect all accounts in those hierarchies.
    public struct Policy: Swift.Sendable {
        /// The text content of the policy.
        public var content: Swift.String?
        /// A structure that contains additional details about the policy.
        public var policySummary: OrganizationsClientTypes.PolicySummary?

        public init(
            content: Swift.String? = nil,
            policySummary: OrganizationsClientTypes.PolicySummary? = nil
        )
        {
            self.content = content
            self.policySummary = policySummary
        }
    }
}

public struct CreatePolicyOutput: Swift.Sendable {
    /// A structure that contains details about the newly created policy.
    public var policy: OrganizationsClientTypes.Policy?

    public init(
        policy: OrganizationsClientTypes.Policy? = nil
    )
    {
        self.policy = policy
    }
}

public struct DeclineHandshakeInput: Swift.Sendable {
    /// The unique identifier (ID) of the handshake that you want to decline. You can get the ID from the [ListHandshakesForAccount] operation. The [regex pattern](http://wikipedia.org/wiki/regex) for handshake ID string requires "h-" followed by from 8 to 32 lowercase letters or digits.
    /// This member is required.
    public var handshakeId: Swift.String?

    public init(
        handshakeId: Swift.String? = nil
    )
    {
        self.handshakeId = handshakeId
    }
}

/// The organization isn't empty. To delete an organization, you must first remove all accounts except the management account.
public struct OrganizationNotEmptyException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "OrganizationNotEmptyException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified OU is not empty. Move all accounts to another root or to other OUs, remove all child OUs, and try the operation again.
public struct OrganizationalUnitNotEmptyException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "OrganizationalUnitNotEmptyException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// We can't find an OU with the OrganizationalUnitId that you specified.
public struct OrganizationalUnitNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "OrganizationalUnitNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteOrganizationalUnitInput: Swift.Sendable {
    /// The unique identifier (ID) of the organizational unit that you want to delete. You can get the ID from the [ListOrganizationalUnitsForParent] operation. The [regex pattern](http://wikipedia.org/wiki/regex) for an organizational unit ID string requires "ou-" followed by from 4 to 32 lowercase letters or digits (the ID of the root that contains the OU). This string is followed by a second "-" dash and from 8 to 32 additional lowercase letters or digits.
    /// This member is required.
    public var organizationalUnitId: Swift.String?

    public init(
        organizationalUnitId: Swift.String? = nil
    )
    {
        self.organizationalUnitId = organizationalUnitId
    }
}

/// The policy is attached to one or more entities. You must detach it from all roots, OUs, and accounts before performing this operation.
public struct PolicyInUseException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "PolicyInUseException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeletePolicyInput: Swift.Sendable {
    /// The unique identifier (ID) of the policy that you want to delete. You can get the ID from the [ListPolicies] or [ListPoliciesForTarget] operations. The [regex pattern](http://wikipedia.org/wiki/regex) for a policy ID string requires "p-" followed by from 8 to 128 lowercase or uppercase letters, digits, or the underscore character (_).
    /// This member is required.
    public var policyId: Swift.String?

    public init(
        policyId: Swift.String? = nil
    )
    {
        self.policyId = policyId
    }
}

/// We can't find a resource policy request with the parameter that you specified.
public struct ResourcePolicyNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourcePolicyNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeregisterDelegatedAdministratorInput: Swift.Sendable {
    /// The account ID number of the member account in the organization that you want to deregister as a delegated administrator.
    /// This member is required.
    public var accountId: Swift.String?
    /// The service principal name of an Amazon Web Services service for which the account is a delegated administrator. Delegated administrator privileges are revoked for only the specified Amazon Web Services service from the member account. If the specified service is the only service for which the member account is a delegated administrator, the operation also revokes Organizations read action permissions.
    /// This member is required.
    public var servicePrincipal: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        servicePrincipal: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.servicePrincipal = servicePrincipal
    }
}

public struct DescribeAccountInput: Swift.Sendable {
    /// The unique identifier (ID) of the Amazon Web Services account that you want information about. You can get the ID from the [ListAccounts] or [ListAccountsForParent] operations. The [regex pattern](http://wikipedia.org/wiki/regex) for an account ID string requires exactly 12 digits.
    /// This member is required.
    public var accountId: Swift.String?

    public init(
        accountId: Swift.String? = nil
    )
    {
        self.accountId = accountId
    }
}

public struct DescribeAccountOutput: Swift.Sendable {
    /// A structure that contains information about the requested account.
    public var account: OrganizationsClientTypes.Account?

    public init(
        account: OrganizationsClientTypes.Account? = nil
    )
    {
        self.account = account
    }
}

/// We can't find an create account request with the CreateAccountRequestId that you specified.
public struct CreateAccountStatusNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CreateAccountStatusNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DescribeCreateAccountStatusInput: Swift.Sendable {
    /// Specifies the Id value that uniquely identifies the CreateAccount request. You can get the value from the CreateAccountStatus.Id response in an earlier [CreateAccount] request, or from the [ListCreateAccountStatus] operation. The [regex pattern](http://wikipedia.org/wiki/regex) for a create account request ID string requires "car-" followed by from 8 to 32 lowercase letters or digits.
    /// This member is required.
    public var createAccountRequestId: Swift.String?

    public init(
        createAccountRequestId: Swift.String? = nil
    )
    {
        self.createAccountRequestId = createAccountRequestId
    }
}

public struct DescribeCreateAccountStatusOutput: Swift.Sendable {
    /// A structure that contains the current status of an account creation request.
    public var createAccountStatus: OrganizationsClientTypes.CreateAccountStatus?

    public init(
        createAccountStatus: OrganizationsClientTypes.CreateAccountStatus? = nil
    )
    {
        self.createAccountStatus = createAccountStatus
    }
}

/// If you ran this action on the management account, this policy type is not enabled. If you ran the action on a member account, the account doesn't have an effective policy of this type. Contact the administrator of your organization about attaching a policy of this type to the account.
public struct EffectivePolicyNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "EffectivePolicyNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension OrganizationsClientTypes {

    public enum EffectivePolicyType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case aiservicesOptOutPolicy
        case backupPolicy
        case chatbotPolicy
        case tagPolicy
        case sdkUnknown(Swift.String)

        public static var allCases: [EffectivePolicyType] {
            return [
                .aiservicesOptOutPolicy,
                .backupPolicy,
                .chatbotPolicy,
                .tagPolicy
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .aiservicesOptOutPolicy: return "AISERVICES_OPT_OUT_POLICY"
            case .backupPolicy: return "BACKUP_POLICY"
            case .chatbotPolicy: return "CHATBOT_POLICY"
            case .tagPolicy: return "TAG_POLICY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeEffectivePolicyInput: Swift.Sendable {
    /// The type of policy that you want information about. You can specify one of the following values:
    ///
    /// * [BACKUP_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_backup.html)
    ///
    /// * [TAG_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html)
    ///
    /// * [CHATBOT_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_chatbot.html)
    ///
    /// * [AISERVICES_OPT_OUT_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html)
    /// This member is required.
    public var policyType: OrganizationsClientTypes.EffectivePolicyType?
    /// When you're signed in as the management account, specify the ID of the account that you want details about. Specifying an organization root or organizational unit (OU) as the target is not supported.
    public var targetId: Swift.String?

    public init(
        policyType: OrganizationsClientTypes.EffectivePolicyType? = nil,
        targetId: Swift.String? = nil
    )
    {
        self.policyType = policyType
        self.targetId = targetId
    }
}

extension OrganizationsClientTypes {

    /// Contains rules to be applied to the affected accounts. The effective policy is the aggregation of any policies the account inherits, plus any policy directly attached to the account.
    public struct EffectivePolicy: Swift.Sendable {
        /// The time of the last update to this policy.
        public var lastUpdatedTimestamp: Foundation.Date?
        /// The text content of the policy.
        public var policyContent: Swift.String?
        /// The policy type.
        public var policyType: OrganizationsClientTypes.EffectivePolicyType?
        /// The account ID of the policy target.
        public var targetId: Swift.String?

        public init(
            lastUpdatedTimestamp: Foundation.Date? = nil,
            policyContent: Swift.String? = nil,
            policyType: OrganizationsClientTypes.EffectivePolicyType? = nil,
            targetId: Swift.String? = nil
        )
        {
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.policyContent = policyContent
            self.policyType = policyType
            self.targetId = targetId
        }
    }
}

public struct DescribeEffectivePolicyOutput: Swift.Sendable {
    /// The contents of the effective policy.
    public var effectivePolicy: OrganizationsClientTypes.EffectivePolicy?

    public init(
        effectivePolicy: OrganizationsClientTypes.EffectivePolicy? = nil
    )
    {
        self.effectivePolicy = effectivePolicy
    }
}

public struct DescribeHandshakeInput: Swift.Sendable {
    /// The unique identifier (ID) of the handshake that you want information about. You can get the ID from the original call to [InviteAccountToOrganization], or from a call to [ListHandshakesForAccount] or [ListHandshakesForOrganization]. The [regex pattern](http://wikipedia.org/wiki/regex) for handshake ID string requires "h-" followed by from 8 to 32 lowercase letters or digits.
    /// This member is required.
    public var handshakeId: Swift.String?

    public init(
        handshakeId: Swift.String? = nil
    )
    {
        self.handshakeId = handshakeId
    }
}

public struct DescribeOrganizationOutput: Swift.Sendable {
    /// A structure that contains information about the organization. The AvailablePolicyTypes part of the response is deprecated, and you shouldn't use it in your apps. It doesn't include any policy type supported by Organizations other than SCPs. In the China (Ningxia) Region, no policy type is included. To determine which policy types are enabled in your organization, use the [ListRoots] operation.
    public var organization: OrganizationsClientTypes.Organization?

    public init(
        organization: OrganizationsClientTypes.Organization? = nil
    )
    {
        self.organization = organization
    }
}

public struct DescribeOrganizationalUnitInput: Swift.Sendable {
    /// The unique identifier (ID) of the organizational unit that you want details about. You can get the ID from the [ListOrganizationalUnitsForParent] operation. The [regex pattern](http://wikipedia.org/wiki/regex) for an organizational unit ID string requires "ou-" followed by from 4 to 32 lowercase letters or digits (the ID of the root that contains the OU). This string is followed by a second "-" dash and from 8 to 32 additional lowercase letters or digits.
    /// This member is required.
    public var organizationalUnitId: Swift.String?

    public init(
        organizationalUnitId: Swift.String? = nil
    )
    {
        self.organizationalUnitId = organizationalUnitId
    }
}

public struct DescribeOrganizationalUnitOutput: Swift.Sendable {
    /// A structure that contains details about the specified OU.
    public var organizationalUnit: OrganizationsClientTypes.OrganizationalUnit?

    public init(
        organizationalUnit: OrganizationsClientTypes.OrganizationalUnit? = nil
    )
    {
        self.organizationalUnit = organizationalUnit
    }
}

public struct DescribePolicyInput: Swift.Sendable {
    /// The unique identifier (ID) of the policy that you want details about. You can get the ID from the [ListPolicies] or [ListPoliciesForTarget] operations. The [regex pattern](http://wikipedia.org/wiki/regex) for a policy ID string requires "p-" followed by from 8 to 128 lowercase or uppercase letters, digits, or the underscore character (_).
    /// This member is required.
    public var policyId: Swift.String?

    public init(
        policyId: Swift.String? = nil
    )
    {
        self.policyId = policyId
    }
}

public struct DescribePolicyOutput: Swift.Sendable {
    /// A structure that contains details about the specified policy.
    public var policy: OrganizationsClientTypes.Policy?

    public init(
        policy: OrganizationsClientTypes.Policy? = nil
    )
    {
        self.policy = policy
    }
}

extension OrganizationsClientTypes {

    /// A structure that contains resource policy ID and Amazon Resource Name (ARN).
    public struct ResourcePolicySummary: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the resource policy.
        public var arn: Swift.String?
        /// The unique identifier (ID) of the resource policy.
        public var id: Swift.String?

        public init(
            arn: Swift.String? = nil,
            id: Swift.String? = nil
        )
        {
            self.arn = arn
            self.id = id
        }
    }
}

extension OrganizationsClientTypes {

    /// A structure that contains details about a resource policy.
    public struct ResourcePolicy: Swift.Sendable {
        /// The policy text of the resource policy.
        public var content: Swift.String?
        /// A structure that contains resource policy ID and Amazon Resource Name (ARN).
        public var resourcePolicySummary: OrganizationsClientTypes.ResourcePolicySummary?

        public init(
            content: Swift.String? = nil,
            resourcePolicySummary: OrganizationsClientTypes.ResourcePolicySummary? = nil
        )
        {
            self.content = content
            self.resourcePolicySummary = resourcePolicySummary
        }
    }
}

public struct DescribeResourcePolicyOutput: Swift.Sendable {
    /// A structure that contains details about the resource policy.
    public var resourcePolicy: OrganizationsClientTypes.ResourcePolicy?

    public init(
        resourcePolicy: OrganizationsClientTypes.ResourcePolicy? = nil
    )
    {
        self.resourcePolicy = resourcePolicy
    }
}

/// The policy isn't attached to the specified target in the specified root.
public struct PolicyNotAttachedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "PolicyNotAttachedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DetachPolicyInput: Swift.Sendable {
    /// The unique identifier (ID) of the policy you want to detach. You can get the ID from the [ListPolicies] or [ListPoliciesForTarget] operations. The [regex pattern](http://wikipedia.org/wiki/regex) for a policy ID string requires "p-" followed by from 8 to 128 lowercase or uppercase letters, digits, or the underscore character (_).
    /// This member is required.
    public var policyId: Swift.String?
    /// The unique identifier (ID) of the root, OU, or account that you want to detach the policy from. You can get the ID from the [ListRoots], [ListOrganizationalUnitsForParent], or [ListAccounts] operations. The [regex pattern](http://wikipedia.org/wiki/regex) for a target ID string requires one of the following:
    ///
    /// * Root - A string that begins with "r-" followed by from 4 to 32 lowercase letters or digits.
    ///
    /// * Account - A string that consists of exactly 12 digits.
    ///
    /// * Organizational unit (OU) - A string that begins with "ou-" followed by from 4 to 32 lowercase letters or digits (the ID of the root that the OU is in). This string is followed by a second "-" dash and from 8 to 32 additional lowercase letters or digits.
    /// This member is required.
    public var targetId: Swift.String?

    public init(
        policyId: Swift.String? = nil,
        targetId: Swift.String? = nil
    )
    {
        self.policyId = policyId
        self.targetId = targetId
    }
}

public struct DisableAWSServiceAccessInput: Swift.Sendable {
    /// The service principal name of the Amazon Web Services service for which you want to disable integration with your organization. This is typically in the form of a URL, such as  service-abbreviation.amazonaws.com.
    /// This member is required.
    public var servicePrincipal: Swift.String?

    public init(
        servicePrincipal: Swift.String? = nil
    )
    {
        self.servicePrincipal = servicePrincipal
    }
}

/// We can't find a root with the RootId that you specified.
public struct RootNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "RootNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DisablePolicyTypeInput: Swift.Sendable {
    /// The policy type that you want to disable in this root. You can specify one of the following values:
    ///
    /// * [SERVICE_CONTROL_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html)
    ///
    /// * [BACKUP_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_backup.html)
    ///
    /// * [TAG_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html)
    ///
    /// * [CHATBOT_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_chatbot.html)
    ///
    /// * [AISERVICES_OPT_OUT_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html)
    /// This member is required.
    public var policyType: OrganizationsClientTypes.PolicyType?
    /// The unique identifier (ID) of the root in which you want to disable a policy type. You can get the ID from the [ListRoots] operation. The [regex pattern](http://wikipedia.org/wiki/regex) for a root ID string requires "r-" followed by from 4 to 32 lowercase letters or digits.
    /// This member is required.
    public var rootId: Swift.String?

    public init(
        policyType: OrganizationsClientTypes.PolicyType? = nil,
        rootId: Swift.String? = nil
    )
    {
        self.policyType = policyType
        self.rootId = rootId
    }
}

extension OrganizationsClientTypes {

    /// Contains details about a root. A root is a top-level parent node in the hierarchy of an organization that can contain organizational units (OUs) and accounts. The root contains every Amazon Web Services account in the organization.
    public struct Root: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the root. For more information about ARNs in Organizations, see [ARN Formats Supported by Organizations](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsorganizations.html#awsorganizations-resources-for-iam-policies) in the Amazon Web Services Service Authorization Reference.
        public var arn: Swift.String?
        /// The unique identifier (ID) for the root. The ID is unique to the organization only. The [regex pattern](http://wikipedia.org/wiki/regex) for a root ID string requires "r-" followed by from 4 to 32 lowercase letters or digits.
        public var id: Swift.String?
        /// The friendly name of the root. The [regex pattern](http://wikipedia.org/wiki/regex) that is used to validate this parameter is a string of any of the characters in the ASCII character range.
        public var name: Swift.String?
        /// The types of policies that are currently enabled for the root and therefore can be attached to the root or to its OUs or accounts. Even if a policy type is shown as available in the organization, you can separately enable and disable them at the root level by using [EnablePolicyType] and [DisablePolicyType]. Use [DescribeOrganization] to see the availability of the policy types in that organization.
        public var policyTypes: [OrganizationsClientTypes.PolicyTypeSummary]?

        public init(
            arn: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            policyTypes: [OrganizationsClientTypes.PolicyTypeSummary]? = nil
        )
        {
            self.arn = arn
            self.id = id
            self.name = name
            self.policyTypes = policyTypes
        }
    }
}

public struct DisablePolicyTypeOutput: Swift.Sendable {
    /// A structure that shows the root with the updated list of enabled policy types.
    public var root: OrganizationsClientTypes.Root?

    public init(
        root: OrganizationsClientTypes.Root? = nil
    )
    {
        self.root = root
    }
}

public struct EnableAllFeaturesInput: Swift.Sendable {

    public init() { }
}

public struct EnableAWSServiceAccessInput: Swift.Sendable {
    /// The service principal name of the Amazon Web Services service for which you want to enable integration with your organization. This is typically in the form of a URL, such as  service-abbreviation.amazonaws.com.
    /// This member is required.
    public var servicePrincipal: Swift.String?

    public init(
        servicePrincipal: Swift.String? = nil
    )
    {
        self.servicePrincipal = servicePrincipal
    }
}

/// The specified policy type is already enabled in the specified root.
public struct PolicyTypeAlreadyEnabledException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "PolicyTypeAlreadyEnabledException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct EnablePolicyTypeInput: Swift.Sendable {
    /// The policy type that you want to enable. You can specify one of the following values:
    ///
    /// * [SERVICE_CONTROL_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html)
    ///
    /// * [BACKUP_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_backup.html)
    ///
    /// * [TAG_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html)
    ///
    /// * [CHATBOT_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_chatbot.html)
    ///
    /// * [AISERVICES_OPT_OUT_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html)
    /// This member is required.
    public var policyType: OrganizationsClientTypes.PolicyType?
    /// The unique identifier (ID) of the root in which you want to enable a policy type. You can get the ID from the [ListRoots] operation. The [regex pattern](http://wikipedia.org/wiki/regex) for a root ID string requires "r-" followed by from 4 to 32 lowercase letters or digits.
    /// This member is required.
    public var rootId: Swift.String?

    public init(
        policyType: OrganizationsClientTypes.PolicyType? = nil,
        rootId: Swift.String? = nil
    )
    {
        self.policyType = policyType
        self.rootId = rootId
    }
}

public struct EnablePolicyTypeOutput: Swift.Sendable {
    /// A structure that shows the root with the updated list of enabled policy types.
    public var root: OrganizationsClientTypes.Root?

    public init(
        root: OrganizationsClientTypes.Root? = nil
    )
    {
        self.root = root
    }
}

/// A handshake with the same action and target already exists. For example, if you invited an account to join your organization, the invited account might already have a pending invitation from this organization. If you intend to resend an invitation to an account, ensure that existing handshakes that might be considered duplicates are canceled or declined.
public struct DuplicateHandshakeException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DuplicateHandshakeException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct InviteAccountToOrganizationInput: Swift.Sendable {
    /// Additional information that you want to include in the generated email to the recipient account owner.
    public var notes: Swift.String?
    /// A list of tags that you want to attach to the account when it becomes a member of the organization. For each tag in the list, you must specify both a tag key and a value. You can set the value to an empty string, but you can't set it to null. For more information about tagging, see [Tagging Organizations resources](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_tagging.html) in the Organizations User Guide. Any tags in the request are checked for compliance with any applicable tag policies when the request is made. The request is rejected if the tags in the request don't match the requirements of the policy at that time. Tag policy compliance is not checked again when the invitation is accepted and the tags are actually attached to the account. That means that if the tag policy changes between the invitation and the acceptance, then that tags could potentially be non-compliant. If any one of the tags is not valid or if you exceed the allowed number of tags for an account, then the entire request fails and invitations are not sent.
    public var tags: [OrganizationsClientTypes.Tag]?
    /// The identifier (ID) of the Amazon Web Services account that you want to invite to join your organization. This is a JSON object that contains the following elements: { "Type": "ACCOUNT", "Id": "< account id number >" } If you use the CLI, you can submit this as a single string, similar to the following example: --target Id=123456789012,Type=ACCOUNT If you specify "Type": "ACCOUNT", you must provide the Amazon Web Services account ID number as the Id. If you specify "Type": "EMAIL", you must specify the email address that is associated with the account. --target Id=diego@example.com,Type=EMAIL
    /// This member is required.
    public var target: OrganizationsClientTypes.HandshakeParty?

    public init(
        notes: Swift.String? = nil,
        tags: [OrganizationsClientTypes.Tag]? = nil,
        target: OrganizationsClientTypes.HandshakeParty? = nil
    )
    {
        self.notes = notes
        self.tags = tags
        self.target = target
    }
}

extension InviteAccountToOrganizationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InviteAccountToOrganizationInput(tags: \(Swift.String(describing: tags)), target: \(Swift.String(describing: target)), notes: \"CONTENT_REDACTED\")"}
}

/// You can't remove a management account from an organization. If you want the management account to become a member account in another organization, you must first delete the current organization of the management account.
public struct MasterCannotLeaveOrganizationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "MasterCannotLeaveOrganizationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct ListAccountsInput: Swift.Sendable {
    /// The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// The parameter for receiving additional results if you receive a NextToken response in a previous request. A NextToken response indicates that more output is available. Set this parameter to the value of the previous call's NextToken response to indicate where the output should continue from.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListAccountsOutput: Swift.Sendable {
    /// A list of objects in the organization.
    public var accounts: [OrganizationsClientTypes.Account]?
    /// If present, indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
    public var nextToken: Swift.String?

    public init(
        accounts: [OrganizationsClientTypes.Account]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.accounts = accounts
        self.nextToken = nextToken
    }
}

public struct ListAccountsForParentInput: Swift.Sendable {
    /// The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// The parameter for receiving additional results if you receive a NextToken response in a previous request. A NextToken response indicates that more output is available. Set this parameter to the value of the previous call's NextToken response to indicate where the output should continue from.
    public var nextToken: Swift.String?
    /// The unique identifier (ID) for the parent root or organization unit (OU) whose accounts you want to list.
    /// This member is required.
    public var parentId: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        parentId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.parentId = parentId
    }
}

public struct ListAccountsForParentOutput: Swift.Sendable {
    /// A list of the accounts in the specified root or OU.
    public var accounts: [OrganizationsClientTypes.Account]?
    /// If present, indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
    public var nextToken: Swift.String?

    public init(
        accounts: [OrganizationsClientTypes.Account]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.accounts = accounts
        self.nextToken = nextToken
    }
}

public struct ListAWSServiceAccessForOrganizationInput: Swift.Sendable {
    /// The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// The parameter for receiving additional results if you receive a NextToken response in a previous request. A NextToken response indicates that more output is available. Set this parameter to the value of the previous call's NextToken response to indicate where the output should continue from.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension OrganizationsClientTypes {

    /// A structure that contains details of a service principal that represents an Amazon Web Services service that is enabled to integrate with Organizations.
    public struct EnabledServicePrincipal: Swift.Sendable {
        /// The date that the service principal was enabled for integration with Organizations.
        public var dateEnabled: Foundation.Date?
        /// The name of the service principal. This is typically in the form of a URL, such as:  servicename.amazonaws.com.
        public var servicePrincipal: Swift.String?

        public init(
            dateEnabled: Foundation.Date? = nil,
            servicePrincipal: Swift.String? = nil
        )
        {
            self.dateEnabled = dateEnabled
            self.servicePrincipal = servicePrincipal
        }
    }
}

public struct ListAWSServiceAccessForOrganizationOutput: Swift.Sendable {
    /// A list of the service principals for the services that are enabled to integrate with your organization. Each principal is a structure that includes the name and the date that it was enabled for integration with Organizations.
    public var enabledServicePrincipals: [OrganizationsClientTypes.EnabledServicePrincipal]?
    /// If present, indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
    public var nextToken: Swift.String?

    public init(
        enabledServicePrincipals: [OrganizationsClientTypes.EnabledServicePrincipal]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.enabledServicePrincipals = enabledServicePrincipals
        self.nextToken = nextToken
    }
}

extension OrganizationsClientTypes {

    public enum ChildType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case account
        case organizationalUnit
        case sdkUnknown(Swift.String)

        public static var allCases: [ChildType] {
            return [
                .account,
                .organizationalUnit
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .account: return "ACCOUNT"
            case .organizationalUnit: return "ORGANIZATIONAL_UNIT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListChildrenInput: Swift.Sendable {
    /// Filters the output to include only the specified child type.
    /// This member is required.
    public var childType: OrganizationsClientTypes.ChildType?
    /// The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// The parameter for receiving additional results if you receive a NextToken response in a previous request. A NextToken response indicates that more output is available. Set this parameter to the value of the previous call's NextToken response to indicate where the output should continue from.
    public var nextToken: Swift.String?
    /// The unique identifier (ID) for the parent root or OU whose children you want to list. The [regex pattern](http://wikipedia.org/wiki/regex) for a parent ID string requires one of the following:
    ///
    /// * Root - A string that begins with "r-" followed by from 4 to 32 lowercase letters or digits.
    ///
    /// * Organizational unit (OU) - A string that begins with "ou-" followed by from 4 to 32 lowercase letters or digits (the ID of the root that the OU is in). This string is followed by a second "-" dash and from 8 to 32 additional lowercase letters or digits.
    /// This member is required.
    public var parentId: Swift.String?

    public init(
        childType: OrganizationsClientTypes.ChildType? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        parentId: Swift.String? = nil
    )
    {
        self.childType = childType
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.parentId = parentId
    }
}

extension OrganizationsClientTypes {

    /// Contains a list of child entities, either OUs or accounts.
    public struct Child: Swift.Sendable {
        /// The unique identifier (ID) of this child entity. The [regex pattern](http://wikipedia.org/wiki/regex) for a child ID string requires one of the following:
        ///
        /// * Account - A string that consists of exactly 12 digits.
        ///
        /// * Organizational unit (OU) - A string that begins with "ou-" followed by from 4 to 32 lowercase letters or digits (the ID of the root that contains the OU). This string is followed by a second "-" dash and from 8 to 32 additional lowercase letters or digits.
        public var id: Swift.String?
        /// The type of this child entity.
        public var type: OrganizationsClientTypes.ChildType?

        public init(
            id: Swift.String? = nil,
            type: OrganizationsClientTypes.ChildType? = nil
        )
        {
            self.id = id
            self.type = type
        }
    }
}

public struct ListChildrenOutput: Swift.Sendable {
    /// The list of children of the specified parent container.
    public var children: [OrganizationsClientTypes.Child]?
    /// If present, indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
    public var nextToken: Swift.String?

    public init(
        children: [OrganizationsClientTypes.Child]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.children = children
        self.nextToken = nextToken
    }
}

public struct ListCreateAccountStatusInput: Swift.Sendable {
    /// The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// The parameter for receiving additional results if you receive a NextToken response in a previous request. A NextToken response indicates that more output is available. Set this parameter to the value of the previous call's NextToken response to indicate where the output should continue from.
    public var nextToken: Swift.String?
    /// A list of one or more states that you want included in the response. If this parameter isn't present, all requests are included in the response.
    public var states: [OrganizationsClientTypes.CreateAccountState]?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        states: [OrganizationsClientTypes.CreateAccountState]? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.states = states
    }
}

public struct ListCreateAccountStatusOutput: Swift.Sendable {
    /// A list of objects with details about the requests. Certain elements, such as the accountId number, are present in the output only after the account has been successfully created.
    public var createAccountStatuses: [OrganizationsClientTypes.CreateAccountStatus]?
    /// If present, indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
    public var nextToken: Swift.String?

    public init(
        createAccountStatuses: [OrganizationsClientTypes.CreateAccountStatus]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.createAccountStatuses = createAccountStatuses
        self.nextToken = nextToken
    }
}

public struct ListDelegatedAdministratorsInput: Swift.Sendable {
    /// The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// The parameter for receiving additional results if you receive a NextToken response in a previous request. A NextToken response indicates that more output is available. Set this parameter to the value of the previous call's NextToken response to indicate where the output should continue from.
    public var nextToken: Swift.String?
    /// Specifies a service principal name. If specified, then the operation lists the delegated administrators only for the specified service. If you don't specify a service principal, the operation lists all delegated administrators for all services in your organization.
    public var servicePrincipal: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        servicePrincipal: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.servicePrincipal = servicePrincipal
    }
}

extension OrganizationsClientTypes {

    /// Contains information about the delegated administrator.
    public struct DelegatedAdministrator: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the delegated administrator's account.
        public var arn: Swift.String?
        /// The date when the account was made a delegated administrator.
        public var delegationEnabledDate: Foundation.Date?
        /// The email address that is associated with the delegated administrator's Amazon Web Services account.
        public var email: Swift.String?
        /// The unique identifier (ID) of the delegated administrator's account.
        public var id: Swift.String?
        /// The method by which the delegated administrator's account joined the organization.
        public var joinedMethod: OrganizationsClientTypes.AccountJoinedMethod?
        /// The date when the delegated administrator's account became a part of the organization.
        public var joinedTimestamp: Foundation.Date?
        /// The friendly name of the delegated administrator's account.
        public var name: Swift.String?
        /// The status of the delegated administrator's account in the organization.
        public var status: OrganizationsClientTypes.AccountStatus?

        public init(
            arn: Swift.String? = nil,
            delegationEnabledDate: Foundation.Date? = nil,
            email: Swift.String? = nil,
            id: Swift.String? = nil,
            joinedMethod: OrganizationsClientTypes.AccountJoinedMethod? = nil,
            joinedTimestamp: Foundation.Date? = nil,
            name: Swift.String? = nil,
            status: OrganizationsClientTypes.AccountStatus? = nil
        )
        {
            self.arn = arn
            self.delegationEnabledDate = delegationEnabledDate
            self.email = email
            self.id = id
            self.joinedMethod = joinedMethod
            self.joinedTimestamp = joinedTimestamp
            self.name = name
            self.status = status
        }
    }
}

extension OrganizationsClientTypes.DelegatedAdministrator: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DelegatedAdministrator(arn: \(Swift.String(describing: arn)), delegationEnabledDate: \(Swift.String(describing: delegationEnabledDate)), id: \(Swift.String(describing: id)), joinedMethod: \(Swift.String(describing: joinedMethod)), joinedTimestamp: \(Swift.String(describing: joinedTimestamp)), status: \(Swift.String(describing: status)), email: \"CONTENT_REDACTED\", name: \"CONTENT_REDACTED\")"}
}

public struct ListDelegatedAdministratorsOutput: Swift.Sendable {
    /// The list of delegated administrators in your organization.
    public var delegatedAdministrators: [OrganizationsClientTypes.DelegatedAdministrator]?
    /// If present, indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
    public var nextToken: Swift.String?

    public init(
        delegatedAdministrators: [OrganizationsClientTypes.DelegatedAdministrator]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.delegatedAdministrators = delegatedAdministrators
        self.nextToken = nextToken
    }
}

public struct ListDelegatedServicesForAccountInput: Swift.Sendable {
    /// The account ID number of a delegated administrator account in the organization.
    /// This member is required.
    public var accountId: Swift.String?
    /// The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// The parameter for receiving additional results if you receive a NextToken response in a previous request. A NextToken response indicates that more output is available. Set this parameter to the value of the previous call's NextToken response to indicate where the output should continue from.
    public var nextToken: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension OrganizationsClientTypes {

    /// Contains information about the Amazon Web Services service for which the account is a delegated administrator.
    public struct DelegatedService: Swift.Sendable {
        /// The date that the account became a delegated administrator for this service.
        public var delegationEnabledDate: Foundation.Date?
        /// The name of an Amazon Web Services service that can request an operation for the specified service. This is typically in the form of a URL, such as:  servicename.amazonaws.com.
        public var servicePrincipal: Swift.String?

        public init(
            delegationEnabledDate: Foundation.Date? = nil,
            servicePrincipal: Swift.String? = nil
        )
        {
            self.delegationEnabledDate = delegationEnabledDate
            self.servicePrincipal = servicePrincipal
        }
    }
}

public struct ListDelegatedServicesForAccountOutput: Swift.Sendable {
    /// The services for which the account is a delegated administrator.
    public var delegatedServices: [OrganizationsClientTypes.DelegatedService]?
    /// If present, indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
    public var nextToken: Swift.String?

    public init(
        delegatedServices: [OrganizationsClientTypes.DelegatedService]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.delegatedServices = delegatedServices
        self.nextToken = nextToken
    }
}

extension OrganizationsClientTypes {

    /// Specifies the criteria that are used to select the handshakes for the operation.
    public struct HandshakeFilter: Swift.Sendable {
        /// Specifies the type of handshake action. If you specify ActionType, you cannot also specify ParentHandshakeId.
        public var actionType: OrganizationsClientTypes.ActionType?
        /// Specifies the parent handshake. Only used for handshake types that are a child of another type. If you specify ParentHandshakeId, you cannot also specify ActionType. The [regex pattern](http://wikipedia.org/wiki/regex) for handshake ID string requires "h-" followed by from 8 to 32 lowercase letters or digits.
        public var parentHandshakeId: Swift.String?

        public init(
            actionType: OrganizationsClientTypes.ActionType? = nil,
            parentHandshakeId: Swift.String? = nil
        )
        {
            self.actionType = actionType
            self.parentHandshakeId = parentHandshakeId
        }
    }
}

public struct ListHandshakesForAccountInput: Swift.Sendable {
    /// Filters the handshakes that you want included in the response. The default is all types. Use the ActionType element to limit the output to only a specified type, such as INVITE, ENABLE_ALL_FEATURES, or APPROVE_ALL_FEATURES. Alternatively, for the ENABLE_ALL_FEATURES handshake that generates a separate child handshake for each member account, you can specify ParentHandshakeId to see only the handshakes that were generated by that parent request.
    public var filter: OrganizationsClientTypes.HandshakeFilter?
    /// The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// The parameter for receiving additional results if you receive a NextToken response in a previous request. A NextToken response indicates that more output is available. Set this parameter to the value of the previous call's NextToken response to indicate where the output should continue from.
    public var nextToken: Swift.String?

    public init(
        filter: OrganizationsClientTypes.HandshakeFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListHandshakesForOrganizationInput: Swift.Sendable {
    /// A filter of the handshakes that you want included in the response. The default is all types. Use the ActionType element to limit the output to only a specified type, such as INVITE, ENABLE-ALL-FEATURES, or APPROVE-ALL-FEATURES. Alternatively, for the ENABLE-ALL-FEATURES handshake that generates a separate child handshake for each member account, you can specify the ParentHandshakeId to see only the handshakes that were generated by that parent request.
    public var filter: OrganizationsClientTypes.HandshakeFilter?
    /// The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// The parameter for receiving additional results if you receive a NextToken response in a previous request. A NextToken response indicates that more output is available. Set this parameter to the value of the previous call's NextToken response to indicate where the output should continue from.
    public var nextToken: Swift.String?

    public init(
        filter: OrganizationsClientTypes.HandshakeFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListOrganizationalUnitsForParentInput: Swift.Sendable {
    /// The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// The parameter for receiving additional results if you receive a NextToken response in a previous request. A NextToken response indicates that more output is available. Set this parameter to the value of the previous call's NextToken response to indicate where the output should continue from.
    public var nextToken: Swift.String?
    /// The unique identifier (ID) of the root or OU whose child OUs you want to list. The [regex pattern](http://wikipedia.org/wiki/regex) for a parent ID string requires one of the following:
    ///
    /// * Root - A string that begins with "r-" followed by from 4 to 32 lowercase letters or digits.
    ///
    /// * Organizational unit (OU) - A string that begins with "ou-" followed by from 4 to 32 lowercase letters or digits (the ID of the root that the OU is in). This string is followed by a second "-" dash and from 8 to 32 additional lowercase letters or digits.
    /// This member is required.
    public var parentId: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        parentId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.parentId = parentId
    }
}

public struct ListOrganizationalUnitsForParentOutput: Swift.Sendable {
    /// If present, indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
    public var nextToken: Swift.String?
    /// A list of the OUs in the specified root or parent OU.
    public var organizationalUnits: [OrganizationsClientTypes.OrganizationalUnit]?

    public init(
        nextToken: Swift.String? = nil,
        organizationalUnits: [OrganizationsClientTypes.OrganizationalUnit]? = nil
    )
    {
        self.nextToken = nextToken
        self.organizationalUnits = organizationalUnits
    }
}

/// We can't find an organizational unit (OU) or Amazon Web Services account with the ChildId that you specified.
public struct ChildNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ChildNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct ListParentsInput: Swift.Sendable {
    /// The unique identifier (ID) of the OU or account whose parent containers you want to list. Don't specify a root. The [regex pattern](http://wikipedia.org/wiki/regex) for a child ID string requires one of the following:
    ///
    /// * Account - A string that consists of exactly 12 digits.
    ///
    /// * Organizational unit (OU) - A string that begins with "ou-" followed by from 4 to 32 lowercase letters or digits (the ID of the root that contains the OU). This string is followed by a second "-" dash and from 8 to 32 additional lowercase letters or digits.
    /// This member is required.
    public var childId: Swift.String?
    /// The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// The parameter for receiving additional results if you receive a NextToken response in a previous request. A NextToken response indicates that more output is available. Set this parameter to the value of the previous call's NextToken response to indicate where the output should continue from.
    public var nextToken: Swift.String?

    public init(
        childId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.childId = childId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension OrganizationsClientTypes {

    public enum ParentType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case organizationalUnit
        case root
        case sdkUnknown(Swift.String)

        public static var allCases: [ParentType] {
            return [
                .organizationalUnit,
                .root
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .organizationalUnit: return "ORGANIZATIONAL_UNIT"
            case .root: return "ROOT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension OrganizationsClientTypes {

    /// Contains information about either a root or an organizational unit (OU) that can contain OUs or accounts in an organization.
    public struct Parent: Swift.Sendable {
        /// The unique identifier (ID) of the parent entity. The [regex pattern](http://wikipedia.org/wiki/regex) for a parent ID string requires one of the following:
        ///
        /// * Root - A string that begins with "r-" followed by from 4 to 32 lowercase letters or digits.
        ///
        /// * Organizational unit (OU) - A string that begins with "ou-" followed by from 4 to 32 lowercase letters or digits (the ID of the root that the OU is in). This string is followed by a second "-" dash and from 8 to 32 additional lowercase letters or digits.
        public var id: Swift.String?
        /// The type of the parent entity.
        public var type: OrganizationsClientTypes.ParentType?

        public init(
            id: Swift.String? = nil,
            type: OrganizationsClientTypes.ParentType? = nil
        )
        {
            self.id = id
            self.type = type
        }
    }
}

public struct ListParentsOutput: Swift.Sendable {
    /// If present, indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
    public var nextToken: Swift.String?
    /// A list of parents for the specified child account or OU.
    public var parents: [OrganizationsClientTypes.Parent]?

    public init(
        nextToken: Swift.String? = nil,
        parents: [OrganizationsClientTypes.Parent]? = nil
    )
    {
        self.nextToken = nextToken
        self.parents = parents
    }
}

public struct ListPoliciesInput: Swift.Sendable {
    /// Specifies the type of policy that you want to include in the response. You must specify one of the following values:
    ///
    /// * [SERVICE_CONTROL_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html)
    ///
    /// * [BACKUP_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_backup.html)
    ///
    /// * [TAG_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html)
    ///
    /// * [CHATBOT_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_chatbot.html)
    ///
    /// * [AISERVICES_OPT_OUT_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html)
    /// This member is required.
    public var filter: OrganizationsClientTypes.PolicyType?
    /// The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// The parameter for receiving additional results if you receive a NextToken response in a previous request. A NextToken response indicates that more output is available. Set this parameter to the value of the previous call's NextToken response to indicate where the output should continue from.
    public var nextToken: Swift.String?

    public init(
        filter: OrganizationsClientTypes.PolicyType? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListPoliciesOutput: Swift.Sendable {
    /// If present, indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
    public var nextToken: Swift.String?
    /// A list of policies that match the filter criteria in the request. The output list doesn't include the policy contents. To see the content for a policy, see [DescribePolicy].
    public var policies: [OrganizationsClientTypes.PolicySummary]?

    public init(
        nextToken: Swift.String? = nil,
        policies: [OrganizationsClientTypes.PolicySummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.policies = policies
    }
}

public struct ListPoliciesForTargetInput: Swift.Sendable {
    /// The type of policy that you want to include in the returned list. You must specify one of the following values:
    ///
    /// * [SERVICE_CONTROL_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html)
    ///
    /// * [BACKUP_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_backup.html)
    ///
    /// * [TAG_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html)
    ///
    /// * [CHATBOT_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_chatbot.html)
    ///
    /// * [AISERVICES_OPT_OUT_POLICY](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html)
    /// This member is required.
    public var filter: OrganizationsClientTypes.PolicyType?
    /// The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// The parameter for receiving additional results if you receive a NextToken response in a previous request. A NextToken response indicates that more output is available. Set this parameter to the value of the previous call's NextToken response to indicate where the output should continue from.
    public var nextToken: Swift.String?
    /// The unique identifier (ID) of the root, organizational unit, or account whose policies you want to list. The [regex pattern](http://wikipedia.org/wiki/regex) for a target ID string requires one of the following:
    ///
    /// * Root - A string that begins with "r-" followed by from 4 to 32 lowercase letters or digits.
    ///
    /// * Account - A string that consists of exactly 12 digits.
    ///
    /// * Organizational unit (OU) - A string that begins with "ou-" followed by from 4 to 32 lowercase letters or digits (the ID of the root that the OU is in). This string is followed by a second "-" dash and from 8 to 32 additional lowercase letters or digits.
    /// This member is required.
    public var targetId: Swift.String?

    public init(
        filter: OrganizationsClientTypes.PolicyType? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        targetId: Swift.String? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.targetId = targetId
    }
}

public struct ListPoliciesForTargetOutput: Swift.Sendable {
    /// If present, indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
    public var nextToken: Swift.String?
    /// The list of policies that match the criteria in the request.
    public var policies: [OrganizationsClientTypes.PolicySummary]?

    public init(
        nextToken: Swift.String? = nil,
        policies: [OrganizationsClientTypes.PolicySummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.policies = policies
    }
}

public struct ListRootsInput: Swift.Sendable {
    /// The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// The parameter for receiving additional results if you receive a NextToken response in a previous request. A NextToken response indicates that more output is available. Set this parameter to the value of the previous call's NextToken response to indicate where the output should continue from.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListRootsOutput: Swift.Sendable {
    /// If present, indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
    public var nextToken: Swift.String?
    /// A list of roots that are defined in an organization.
    public var roots: [OrganizationsClientTypes.Root]?

    public init(
        nextToken: Swift.String? = nil,
        roots: [OrganizationsClientTypes.Root]? = nil
    )
    {
        self.nextToken = nextToken
        self.roots = roots
    }
}

public struct ListTagsForResourceInput: Swift.Sendable {
    /// The parameter for receiving additional results if you receive a NextToken response in a previous request. A NextToken response indicates that more output is available. Set this parameter to the value of the previous call's NextToken response to indicate where the output should continue from.
    public var nextToken: Swift.String?
    /// The ID of the resource with the tags to list. You can specify any of the following taggable resources.
    ///
    /// * Amazon Web Services account – specify the account ID number.
    ///
    /// * Organizational unit – specify the OU ID that begins with ou- and looks similar to: ou-1a2b-34uvwxyz
    ///
    /// * Root – specify the root ID that begins with r- and looks similar to: r-1a2b
    ///
    /// * Policy – specify the policy ID that begins with p- andlooks similar to: p-12abcdefg3
    /// This member is required.
    public var resourceId: Swift.String?

    public init(
        nextToken: Swift.String? = nil,
        resourceId: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
        self.resourceId = resourceId
    }
}

public struct ListTagsForResourceOutput: Swift.Sendable {
    /// If present, indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
    public var nextToken: Swift.String?
    /// The tags that are assigned to the resource.
    public var tags: [OrganizationsClientTypes.Tag]?

    public init(
        nextToken: Swift.String? = nil,
        tags: [OrganizationsClientTypes.Tag]? = nil
    )
    {
        self.nextToken = nextToken
        self.tags = tags
    }
}

public struct ListTargetsForPolicyInput: Swift.Sendable {
    /// The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// The parameter for receiving additional results if you receive a NextToken response in a previous request. A NextToken response indicates that more output is available. Set this parameter to the value of the previous call's NextToken response to indicate where the output should continue from.
    public var nextToken: Swift.String?
    /// The unique identifier (ID) of the policy whose attachments you want to know. The [regex pattern](http://wikipedia.org/wiki/regex) for a policy ID string requires "p-" followed by from 8 to 128 lowercase or uppercase letters, digits, or the underscore character (_).
    /// This member is required.
    public var policyId: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        policyId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.policyId = policyId
    }
}

extension OrganizationsClientTypes {

    public enum TargetType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case account
        case organizationalUnit
        case root
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetType] {
            return [
                .account,
                .organizationalUnit,
                .root
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .account: return "ACCOUNT"
            case .organizationalUnit: return "ORGANIZATIONAL_UNIT"
            case .root: return "ROOT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension OrganizationsClientTypes {

    /// Contains information about a root, OU, or account that a policy is attached to.
    public struct PolicyTargetSummary: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the policy target. For more information about ARNs in Organizations, see [ARN Formats Supported by Organizations](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsorganizations.html#awsorganizations-resources-for-iam-policies) in the Amazon Web Services Service Authorization Reference.
        public var arn: Swift.String?
        /// The friendly name of the policy target. The [regex pattern](http://wikipedia.org/wiki/regex) that is used to validate this parameter is a string of any of the characters in the ASCII character range.
        public var name: Swift.String?
        /// The unique identifier (ID) of the policy target. The [regex pattern](http://wikipedia.org/wiki/regex) for a target ID string requires one of the following:
        ///
        /// * Root - A string that begins with "r-" followed by from 4 to 32 lowercase letters or digits.
        ///
        /// * Account - A string that consists of exactly 12 digits.
        ///
        /// * Organizational unit (OU) - A string that begins with "ou-" followed by from 4 to 32 lowercase letters or digits (the ID of the root that the OU is in). This string is followed by a second "-" dash and from 8 to 32 additional lowercase letters or digits.
        public var targetId: Swift.String?
        /// The type of the policy target.
        public var type: OrganizationsClientTypes.TargetType?

        public init(
            arn: Swift.String? = nil,
            name: Swift.String? = nil,
            targetId: Swift.String? = nil,
            type: OrganizationsClientTypes.TargetType? = nil
        )
        {
            self.arn = arn
            self.name = name
            self.targetId = targetId
            self.type = type
        }
    }
}

public struct ListTargetsForPolicyOutput: Swift.Sendable {
    /// If present, indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
    public var nextToken: Swift.String?
    /// A list of structures, each of which contains details about one of the entities to which the specified policy is attached.
    public var targets: [OrganizationsClientTypes.PolicyTargetSummary]?

    public init(
        nextToken: Swift.String? = nil,
        targets: [OrganizationsClientTypes.PolicyTargetSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.targets = targets
    }
}

/// We can't find the destination container (a root or OU) with the ParentId that you specified.
public struct DestinationParentNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DestinationParentNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// That account is already present in the specified destination.
public struct DuplicateAccountException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DuplicateAccountException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// We can't find a source root or OU with the ParentId that you specified.
public struct SourceParentNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SourceParentNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct MoveAccountInput: Swift.Sendable {
    /// The unique identifier (ID) of the account that you want to move. The [regex pattern](http://wikipedia.org/wiki/regex) for an account ID string requires exactly 12 digits.
    /// This member is required.
    public var accountId: Swift.String?
    /// The unique identifier (ID) of the root or organizational unit that you want to move the account to. The [regex pattern](http://wikipedia.org/wiki/regex) for a parent ID string requires one of the following:
    ///
    /// * Root - A string that begins with "r-" followed by from 4 to 32 lowercase letters or digits.
    ///
    /// * Organizational unit (OU) - A string that begins with "ou-" followed by from 4 to 32 lowercase letters or digits (the ID of the root that the OU is in). This string is followed by a second "-" dash and from 8 to 32 additional lowercase letters or digits.
    /// This member is required.
    public var destinationParentId: Swift.String?
    /// The unique identifier (ID) of the root or organizational unit that you want to move the account from. The [regex pattern](http://wikipedia.org/wiki/regex) for a parent ID string requires one of the following:
    ///
    /// * Root - A string that begins with "r-" followed by from 4 to 32 lowercase letters or digits.
    ///
    /// * Organizational unit (OU) - A string that begins with "ou-" followed by from 4 to 32 lowercase letters or digits (the ID of the root that the OU is in). This string is followed by a second "-" dash and from 8 to 32 additional lowercase letters or digits.
    /// This member is required.
    public var sourceParentId: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        destinationParentId: Swift.String? = nil,
        sourceParentId: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.destinationParentId = destinationParentId
        self.sourceParentId = sourceParentId
    }
}

public struct PutResourcePolicyInput: Swift.Sendable {
    /// If provided, the new content for the resource policy. The text must be correctly formatted JSON that complies with the syntax for the resource policy's type. For more information, see [SCP syntax](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scps_syntax.html) in the Organizations User Guide.
    /// This member is required.
    public var content: Swift.String?
    /// A list of tags that you want to attach to the newly created resource policy. For each tag in the list, you must specify both a tag key and a value. You can set the value to an empty string, but you can't set it to null. For more information about tagging, see [Tagging Organizations resources](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_tagging.html) in the Organizations User Guide. Calls with tags apply to the initial creation of the resource policy, otherwise an exception is thrown. If any one of the tags is not valid or if you exceed the allowed number of tags for the resource policy, then the entire request fails and the resource policy is not created.
    public var tags: [OrganizationsClientTypes.Tag]?

    public init(
        content: Swift.String? = nil,
        tags: [OrganizationsClientTypes.Tag]? = nil
    )
    {
        self.content = content
        self.tags = tags
    }
}

public struct PutResourcePolicyOutput: Swift.Sendable {
    /// A structure that contains details about the resource policy.
    public var resourcePolicy: OrganizationsClientTypes.ResourcePolicy?

    public init(
        resourcePolicy: OrganizationsClientTypes.ResourcePolicy? = nil
    )
    {
        self.resourcePolicy = resourcePolicy
    }
}

public struct RegisterDelegatedAdministratorInput: Swift.Sendable {
    /// The account ID number of the member account in the organization to register as a delegated administrator.
    /// This member is required.
    public var accountId: Swift.String?
    /// The service principal of the Amazon Web Services service for which you want to make the member account a delegated administrator.
    /// This member is required.
    public var servicePrincipal: Swift.String?

    public init(
        accountId: Swift.String? = nil,
        servicePrincipal: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.servicePrincipal = servicePrincipal
    }
}

public struct RemoveAccountFromOrganizationInput: Swift.Sendable {
    /// The unique identifier (ID) of the member account that you want to remove from the organization. The [regex pattern](http://wikipedia.org/wiki/regex) for an account ID string requires exactly 12 digits.
    /// This member is required.
    public var accountId: Swift.String?

    public init(
        accountId: Swift.String? = nil
    )
    {
        self.accountId = accountId
    }
}

public struct TagResourceInput: Swift.Sendable {
    /// The ID of the resource to add a tag to. You can specify any of the following taggable resources.
    ///
    /// * Amazon Web Services account – specify the account ID number.
    ///
    /// * Organizational unit – specify the OU ID that begins with ou- and looks similar to: ou-1a2b-34uvwxyz
    ///
    /// * Root – specify the root ID that begins with r- and looks similar to: r-1a2b
    ///
    /// * Policy – specify the policy ID that begins with p- andlooks similar to: p-12abcdefg3
    /// This member is required.
    public var resourceId: Swift.String?
    /// A list of tags to add to the specified resource. For each tag in the list, you must specify both a tag key and a value. The value can be an empty string, but you can't set it to null. If any one of the tags is not valid or if you exceed the maximum allowed number of tags for a resource, then the entire request fails.
    /// This member is required.
    public var tags: [OrganizationsClientTypes.Tag]?

    public init(
        resourceId: Swift.String? = nil,
        tags: [OrganizationsClientTypes.Tag]? = nil
    )
    {
        self.resourceId = resourceId
        self.tags = tags
    }
}

public struct UntagResourceInput: Swift.Sendable {
    /// The ID of the resource to remove a tag from. You can specify any of the following taggable resources.
    ///
    /// * Amazon Web Services account – specify the account ID number.
    ///
    /// * Organizational unit – specify the OU ID that begins with ou- and looks similar to: ou-1a2b-34uvwxyz
    ///
    /// * Root – specify the root ID that begins with r- and looks similar to: r-1a2b
    ///
    /// * Policy – specify the policy ID that begins with p- andlooks similar to: p-12abcdefg3
    /// This member is required.
    public var resourceId: Swift.String?
    /// The list of keys for tags to remove from the specified resource.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceId: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceId = resourceId
        self.tagKeys = tagKeys
    }
}

public struct UpdateOrganizationalUnitInput: Swift.Sendable {
    /// The new name that you want to assign to the OU. The [regex pattern](http://wikipedia.org/wiki/regex) that is used to validate this parameter is a string of any of the characters in the ASCII character range.
    public var name: Swift.String?
    /// The unique identifier (ID) of the OU that you want to rename. You can get the ID from the [ListOrganizationalUnitsForParent] operation. The [regex pattern](http://wikipedia.org/wiki/regex) for an organizational unit ID string requires "ou-" followed by from 4 to 32 lowercase letters or digits (the ID of the root that contains the OU). This string is followed by a second "-" dash and from 8 to 32 additional lowercase letters or digits.
    /// This member is required.
    public var organizationalUnitId: Swift.String?

    public init(
        name: Swift.String? = nil,
        organizationalUnitId: Swift.String? = nil
    )
    {
        self.name = name
        self.organizationalUnitId = organizationalUnitId
    }
}

public struct UpdateOrganizationalUnitOutput: Swift.Sendable {
    /// A structure that contains the details about the specified OU, including its new name.
    public var organizationalUnit: OrganizationsClientTypes.OrganizationalUnit?

    public init(
        organizationalUnit: OrganizationsClientTypes.OrganizationalUnit? = nil
    )
    {
        self.organizationalUnit = organizationalUnit
    }
}

public struct UpdatePolicyInput: Swift.Sendable {
    /// If provided, the new content for the policy. The text must be correctly formatted JSON that complies with the syntax for the policy's type. For more information, see [SCP syntax](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scps_syntax.html) in the Organizations User Guide. The maximum size of a policy document depends on the policy's type. For more information, see [Maximum and minimum values](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_reference_limits.html#min-max-values) in the Organizations User Guide.
    public var content: Swift.String?
    /// If provided, the new description for the policy.
    public var description: Swift.String?
    /// If provided, the new name for the policy. The [regex pattern](http://wikipedia.org/wiki/regex) that is used to validate this parameter is a string of any of the characters in the ASCII character range.
    public var name: Swift.String?
    /// The unique identifier (ID) of the policy that you want to update. The [regex pattern](http://wikipedia.org/wiki/regex) for a policy ID string requires "p-" followed by from 8 to 128 lowercase or uppercase letters, digits, or the underscore character (_).
    /// This member is required.
    public var policyId: Swift.String?

    public init(
        content: Swift.String? = nil,
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        policyId: Swift.String? = nil
    )
    {
        self.content = content
        self.description = description
        self.name = name
        self.policyId = policyId
    }
}

public struct UpdatePolicyOutput: Swift.Sendable {
    /// A structure that contains details about the updated policy, showing the requested changes.
    public var policy: OrganizationsClientTypes.Policy?

    public init(
        policy: OrganizationsClientTypes.Policy? = nil
    )
    {
        self.policy = policy
    }
}

extension OrganizationsClientTypes {

    /// Contains additional data that is needed to process a handshake.
    public struct HandshakeResource: Swift.Sendable {
        /// When needed, contains an additional array of HandshakeResource objects.
        public var resources: [OrganizationsClientTypes.HandshakeResource]?
        /// The type of information being passed, specifying how the value is to be interpreted by the other party:
        ///
        /// * ACCOUNT - Specifies an Amazon Web Services account ID number.
        ///
        /// * ORGANIZATION - Specifies an organization ID number.
        ///
        /// * EMAIL - Specifies the email address that is associated with the account that receives the handshake.
        ///
        /// * OWNER_EMAIL - Specifies the email address associated with the management account. Included as information about an organization.
        ///
        /// * OWNER_NAME - Specifies the name associated with the management account. Included as information about an organization.
        ///
        /// * NOTES - Additional text provided by the handshake initiator and intended for the recipient to read.
        public var type: OrganizationsClientTypes.HandshakeResourceType?
        /// The information that is passed to the other party in the handshake. The format of the value string must match the requirements of the specified type.
        public var value: Swift.String?

        public init(
            resources: [OrganizationsClientTypes.HandshakeResource]? = nil,
            type: OrganizationsClientTypes.HandshakeResourceType? = nil,
            value: Swift.String? = nil
        )
        {
            self.resources = resources
            self.type = type
            self.value = value
        }
    }
}

extension OrganizationsClientTypes.HandshakeResource: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HandshakeResource(resources: \(Swift.String(describing: resources)), type: \(Swift.String(describing: type)), value: \"CONTENT_REDACTED\")"}
}

extension OrganizationsClientTypes {

    /// Contains information that must be exchanged to securely establish a relationship between two accounts (an originator and a recipient). For example, when a management account (the originator) invites another account (the recipient) to join its organization, the two accounts exchange information as a series of handshake requests and responses. Note: Handshakes that are CANCELED, ACCEPTED, DECLINED, or EXPIRED show up in lists for only 30 days after entering that state After that they are deleted.
    public struct Handshake: Swift.Sendable {
        /// The type of handshake, indicating what action occurs when the recipient accepts the handshake. The following handshake types are supported:
        ///
        /// * INVITE: This type of handshake represents a request to join an organization. It is always sent from the management account to only non-member accounts.
        ///
        /// * ENABLE_ALL_FEATURES: This type of handshake represents a request to enable all features in an organization. It is always sent from the management account to only invited member accounts. Created accounts do not receive this because those accounts were created by the organization's management account and approval is inferred.
        ///
        /// * APPROVE_ALL_FEATURES: This type of handshake is sent from the Organizations service when all member accounts have approved the ENABLE_ALL_FEATURES invitation. It is sent only to the management account and signals the master that it can finalize the process to enable all features.
        public var action: OrganizationsClientTypes.ActionType?
        /// The Amazon Resource Name (ARN) of a handshake. For more information about ARNs in Organizations, see [ARN Formats Supported by Organizations](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsorganizations.html#awsorganizations-resources-for-iam-policies) in the Amazon Web Services Service Authorization Reference.
        public var arn: Swift.String?
        /// The date and time that the handshake expires. If the recipient of the handshake request fails to respond before the specified date and time, the handshake becomes inactive and is no longer valid.
        public var expirationTimestamp: Foundation.Date?
        /// The unique identifier (ID) of a handshake. The originating account creates the ID when it initiates the handshake. The [regex pattern](http://wikipedia.org/wiki/regex) for handshake ID string requires "h-" followed by from 8 to 32 lowercase letters or digits.
        public var id: Swift.String?
        /// Information about the two accounts that are participating in the handshake.
        public var parties: [OrganizationsClientTypes.HandshakeParty]?
        /// The date and time that the handshake request was made.
        public var requestedTimestamp: Foundation.Date?
        /// Additional information that is needed to process the handshake.
        public var resources: [OrganizationsClientTypes.HandshakeResource]?
        /// The current state of the handshake. Use the state to trace the flow of the handshake through the process from its creation to its acceptance. The meaning of each of the valid values is as follows:
        ///
        /// * REQUESTED: This handshake was sent to multiple recipients (applicable to only some handshake types) and not all recipients have responded yet. The request stays in this state until all recipients respond.
        ///
        /// * OPEN: This handshake was sent to multiple recipients (applicable to only some policy types) and all recipients have responded, allowing the originator to complete the handshake action.
        ///
        /// * CANCELED: This handshake is no longer active because it was canceled by the originating account.
        ///
        /// * ACCEPTED: This handshake is complete because it has been accepted by the recipient.
        ///
        /// * DECLINED: This handshake is no longer active because it was declined by the recipient account.
        ///
        /// * EXPIRED: This handshake is no longer active because the originator did not receive a response of any kind from the recipient before the expiration time (15 days).
        public var state: OrganizationsClientTypes.HandshakeState?

        public init(
            action: OrganizationsClientTypes.ActionType? = nil,
            arn: Swift.String? = nil,
            expirationTimestamp: Foundation.Date? = nil,
            id: Swift.String? = nil,
            parties: [OrganizationsClientTypes.HandshakeParty]? = nil,
            requestedTimestamp: Foundation.Date? = nil,
            resources: [OrganizationsClientTypes.HandshakeResource]? = nil,
            state: OrganizationsClientTypes.HandshakeState? = nil
        )
        {
            self.action = action
            self.arn = arn
            self.expirationTimestamp = expirationTimestamp
            self.id = id
            self.parties = parties
            self.requestedTimestamp = requestedTimestamp
            self.resources = resources
            self.state = state
        }
    }
}

public struct AcceptHandshakeOutput: Swift.Sendable {
    /// A structure that contains details about the accepted handshake.
    public var handshake: OrganizationsClientTypes.Handshake?

    public init(
        handshake: OrganizationsClientTypes.Handshake? = nil
    )
    {
        self.handshake = handshake
    }
}

public struct CancelHandshakeOutput: Swift.Sendable {
    /// A structure that contains details about the handshake that you canceled.
    public var handshake: OrganizationsClientTypes.Handshake?

    public init(
        handshake: OrganizationsClientTypes.Handshake? = nil
    )
    {
        self.handshake = handshake
    }
}

public struct DeclineHandshakeOutput: Swift.Sendable {
    /// A structure that contains details about the declined handshake. The state is updated to show the value DECLINED.
    public var handshake: OrganizationsClientTypes.Handshake?

    public init(
        handshake: OrganizationsClientTypes.Handshake? = nil
    )
    {
        self.handshake = handshake
    }
}

public struct DescribeHandshakeOutput: Swift.Sendable {
    /// A structure that contains information about the specified handshake.
    public var handshake: OrganizationsClientTypes.Handshake?

    public init(
        handshake: OrganizationsClientTypes.Handshake? = nil
    )
    {
        self.handshake = handshake
    }
}

public struct EnableAllFeaturesOutput: Swift.Sendable {
    /// A structure that contains details about the handshake created to support this request to enable all features in the organization.
    public var handshake: OrganizationsClientTypes.Handshake?

    public init(
        handshake: OrganizationsClientTypes.Handshake? = nil
    )
    {
        self.handshake = handshake
    }
}

public struct InviteAccountToOrganizationOutput: Swift.Sendable {
    /// A structure that contains details about the handshake that is created to support this invitation request.
    public var handshake: OrganizationsClientTypes.Handshake?

    public init(
        handshake: OrganizationsClientTypes.Handshake? = nil
    )
    {
        self.handshake = handshake
    }
}

public struct ListHandshakesForAccountOutput: Swift.Sendable {
    /// A list of [Handshake] objects with details about each of the handshakes that is associated with the specified account.
    public var handshakes: [OrganizationsClientTypes.Handshake]?
    /// If present, indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
    public var nextToken: Swift.String?

    public init(
        handshakes: [OrganizationsClientTypes.Handshake]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.handshakes = handshakes
        self.nextToken = nextToken
    }
}

public struct ListHandshakesForOrganizationOutput: Swift.Sendable {
    /// A list of [Handshake] objects with details about each of the handshakes that are associated with an organization.
    public var handshakes: [OrganizationsClientTypes.Handshake]?
    /// If present, indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
    public var nextToken: Swift.String?

    public init(
        handshakes: [OrganizationsClientTypes.Handshake]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.handshakes = handshakes
        self.nextToken = nextToken
    }
}

extension AcceptHandshakeInput {

    static func urlPathProvider(_ value: AcceptHandshakeInput) -> Swift.String? {
        return "/"
    }
}

extension AttachPolicyInput {

    static func urlPathProvider(_ value: AttachPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension CancelHandshakeInput {

    static func urlPathProvider(_ value: CancelHandshakeInput) -> Swift.String? {
        return "/"
    }
}

extension CloseAccountInput {

    static func urlPathProvider(_ value: CloseAccountInput) -> Swift.String? {
        return "/"
    }
}

extension CreateAccountInput {

    static func urlPathProvider(_ value: CreateAccountInput) -> Swift.String? {
        return "/"
    }
}

extension CreateGovCloudAccountInput {

    static func urlPathProvider(_ value: CreateGovCloudAccountInput) -> Swift.String? {
        return "/"
    }
}

extension CreateOrganizationInput {

    static func urlPathProvider(_ value: CreateOrganizationInput) -> Swift.String? {
        return "/"
    }
}

extension CreateOrganizationalUnitInput {

    static func urlPathProvider(_ value: CreateOrganizationalUnitInput) -> Swift.String? {
        return "/"
    }
}

extension CreatePolicyInput {

    static func urlPathProvider(_ value: CreatePolicyInput) -> Swift.String? {
        return "/"
    }
}

extension DeclineHandshakeInput {

    static func urlPathProvider(_ value: DeclineHandshakeInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteOrganizationInput {

    static func urlPathProvider(_ value: DeleteOrganizationInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteOrganizationalUnitInput {

    static func urlPathProvider(_ value: DeleteOrganizationalUnitInput) -> Swift.String? {
        return "/"
    }
}

extension DeletePolicyInput {

    static func urlPathProvider(_ value: DeletePolicyInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteResourcePolicyInput {

    static func urlPathProvider(_ value: DeleteResourcePolicyInput) -> Swift.String? {
        return "/"
    }
}

extension DeregisterDelegatedAdministratorInput {

    static func urlPathProvider(_ value: DeregisterDelegatedAdministratorInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeAccountInput {

    static func urlPathProvider(_ value: DescribeAccountInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeCreateAccountStatusInput {

    static func urlPathProvider(_ value: DescribeCreateAccountStatusInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeEffectivePolicyInput {

    static func urlPathProvider(_ value: DescribeEffectivePolicyInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeHandshakeInput {

    static func urlPathProvider(_ value: DescribeHandshakeInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeOrganizationInput {

    static func urlPathProvider(_ value: DescribeOrganizationInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeOrganizationalUnitInput {

    static func urlPathProvider(_ value: DescribeOrganizationalUnitInput) -> Swift.String? {
        return "/"
    }
}

extension DescribePolicyInput {

    static func urlPathProvider(_ value: DescribePolicyInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeResourcePolicyInput {

    static func urlPathProvider(_ value: DescribeResourcePolicyInput) -> Swift.String? {
        return "/"
    }
}

extension DetachPolicyInput {

    static func urlPathProvider(_ value: DetachPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension DisableAWSServiceAccessInput {

    static func urlPathProvider(_ value: DisableAWSServiceAccessInput) -> Swift.String? {
        return "/"
    }
}

extension DisablePolicyTypeInput {

    static func urlPathProvider(_ value: DisablePolicyTypeInput) -> Swift.String? {
        return "/"
    }
}

extension EnableAllFeaturesInput {

    static func urlPathProvider(_ value: EnableAllFeaturesInput) -> Swift.String? {
        return "/"
    }
}

extension EnableAWSServiceAccessInput {

    static func urlPathProvider(_ value: EnableAWSServiceAccessInput) -> Swift.String? {
        return "/"
    }
}

extension EnablePolicyTypeInput {

    static func urlPathProvider(_ value: EnablePolicyTypeInput) -> Swift.String? {
        return "/"
    }
}

extension InviteAccountToOrganizationInput {

    static func urlPathProvider(_ value: InviteAccountToOrganizationInput) -> Swift.String? {
        return "/"
    }
}

extension LeaveOrganizationInput {

    static func urlPathProvider(_ value: LeaveOrganizationInput) -> Swift.String? {
        return "/"
    }
}

extension ListAccountsInput {

    static func urlPathProvider(_ value: ListAccountsInput) -> Swift.String? {
        return "/"
    }
}

extension ListAccountsForParentInput {

    static func urlPathProvider(_ value: ListAccountsForParentInput) -> Swift.String? {
        return "/"
    }
}

extension ListAWSServiceAccessForOrganizationInput {

    static func urlPathProvider(_ value: ListAWSServiceAccessForOrganizationInput) -> Swift.String? {
        return "/"
    }
}

extension ListChildrenInput {

    static func urlPathProvider(_ value: ListChildrenInput) -> Swift.String? {
        return "/"
    }
}

extension ListCreateAccountStatusInput {

    static func urlPathProvider(_ value: ListCreateAccountStatusInput) -> Swift.String? {
        return "/"
    }
}

extension ListDelegatedAdministratorsInput {

    static func urlPathProvider(_ value: ListDelegatedAdministratorsInput) -> Swift.String? {
        return "/"
    }
}

extension ListDelegatedServicesForAccountInput {

    static func urlPathProvider(_ value: ListDelegatedServicesForAccountInput) -> Swift.String? {
        return "/"
    }
}

extension ListHandshakesForAccountInput {

    static func urlPathProvider(_ value: ListHandshakesForAccountInput) -> Swift.String? {
        return "/"
    }
}

extension ListHandshakesForOrganizationInput {

    static func urlPathProvider(_ value: ListHandshakesForOrganizationInput) -> Swift.String? {
        return "/"
    }
}

extension ListOrganizationalUnitsForParentInput {

    static func urlPathProvider(_ value: ListOrganizationalUnitsForParentInput) -> Swift.String? {
        return "/"
    }
}

extension ListParentsInput {

    static func urlPathProvider(_ value: ListParentsInput) -> Swift.String? {
        return "/"
    }
}

extension ListPoliciesInput {

    static func urlPathProvider(_ value: ListPoliciesInput) -> Swift.String? {
        return "/"
    }
}

extension ListPoliciesForTargetInput {

    static func urlPathProvider(_ value: ListPoliciesForTargetInput) -> Swift.String? {
        return "/"
    }
}

extension ListRootsInput {

    static func urlPathProvider(_ value: ListRootsInput) -> Swift.String? {
        return "/"
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        return "/"
    }
}

extension ListTargetsForPolicyInput {

    static func urlPathProvider(_ value: ListTargetsForPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension MoveAccountInput {

    static func urlPathProvider(_ value: MoveAccountInput) -> Swift.String? {
        return "/"
    }
}

extension PutResourcePolicyInput {

    static func urlPathProvider(_ value: PutResourcePolicyInput) -> Swift.String? {
        return "/"
    }
}

extension RegisterDelegatedAdministratorInput {

    static func urlPathProvider(_ value: RegisterDelegatedAdministratorInput) -> Swift.String? {
        return "/"
    }
}

extension RemoveAccountFromOrganizationInput {

    static func urlPathProvider(_ value: RemoveAccountFromOrganizationInput) -> Swift.String? {
        return "/"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateOrganizationalUnitInput {

    static func urlPathProvider(_ value: UpdateOrganizationalUnitInput) -> Swift.String? {
        return "/"
    }
}

extension UpdatePolicyInput {

    static func urlPathProvider(_ value: UpdatePolicyInput) -> Swift.String? {
        return "/"
    }
}

extension AcceptHandshakeInput {

    static func write(value: AcceptHandshakeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HandshakeId"].write(value.handshakeId)
    }
}

extension AttachPolicyInput {

    static func write(value: AttachPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PolicyId"].write(value.policyId)
        try writer["TargetId"].write(value.targetId)
    }
}

extension CancelHandshakeInput {

    static func write(value: CancelHandshakeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HandshakeId"].write(value.handshakeId)
    }
}

extension CloseAccountInput {

    static func write(value: CloseAccountInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccountId"].write(value.accountId)
    }
}

extension CreateAccountInput {

    static func write(value: CreateAccountInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccountName"].write(value.accountName)
        try writer["Email"].write(value.email)
        try writer["IamUserAccessToBilling"].write(value.iamUserAccessToBilling)
        try writer["RoleName"].write(value.roleName)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: OrganizationsClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateGovCloudAccountInput {

    static func write(value: CreateGovCloudAccountInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccountName"].write(value.accountName)
        try writer["Email"].write(value.email)
        try writer["IamUserAccessToBilling"].write(value.iamUserAccessToBilling)
        try writer["RoleName"].write(value.roleName)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: OrganizationsClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateOrganizationInput {

    static func write(value: CreateOrganizationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FeatureSet"].write(value.featureSet)
    }
}

extension CreateOrganizationalUnitInput {

    static func write(value: CreateOrganizationalUnitInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["ParentId"].write(value.parentId)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: OrganizationsClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreatePolicyInput {

    static func write(value: CreatePolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Content"].write(value.content)
        try writer["Description"].write(value.description)
        try writer["Name"].write(value.name)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: OrganizationsClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Type"].write(value.type)
    }
}

extension DeclineHandshakeInput {

    static func write(value: DeclineHandshakeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HandshakeId"].write(value.handshakeId)
    }
}

extension DeleteOrganizationInput {

    static func write(value: DeleteOrganizationInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension DeleteOrganizationalUnitInput {

    static func write(value: DeleteOrganizationalUnitInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["OrganizationalUnitId"].write(value.organizationalUnitId)
    }
}

extension DeletePolicyInput {

    static func write(value: DeletePolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PolicyId"].write(value.policyId)
    }
}

extension DeleteResourcePolicyInput {

    static func write(value: DeleteResourcePolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension DeregisterDelegatedAdministratorInput {

    static func write(value: DeregisterDelegatedAdministratorInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccountId"].write(value.accountId)
        try writer["ServicePrincipal"].write(value.servicePrincipal)
    }
}

extension DescribeAccountInput {

    static func write(value: DescribeAccountInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccountId"].write(value.accountId)
    }
}

extension DescribeCreateAccountStatusInput {

    static func write(value: DescribeCreateAccountStatusInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreateAccountRequestId"].write(value.createAccountRequestId)
    }
}

extension DescribeEffectivePolicyInput {

    static func write(value: DescribeEffectivePolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PolicyType"].write(value.policyType)
        try writer["TargetId"].write(value.targetId)
    }
}

extension DescribeHandshakeInput {

    static func write(value: DescribeHandshakeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HandshakeId"].write(value.handshakeId)
    }
}

extension DescribeOrganizationInput {

    static func write(value: DescribeOrganizationInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension DescribeOrganizationalUnitInput {

    static func write(value: DescribeOrganizationalUnitInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["OrganizationalUnitId"].write(value.organizationalUnitId)
    }
}

extension DescribePolicyInput {

    static func write(value: DescribePolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PolicyId"].write(value.policyId)
    }
}

extension DescribeResourcePolicyInput {

    static func write(value: DescribeResourcePolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension DetachPolicyInput {

    static func write(value: DetachPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PolicyId"].write(value.policyId)
        try writer["TargetId"].write(value.targetId)
    }
}

extension DisableAWSServiceAccessInput {

    static func write(value: DisableAWSServiceAccessInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ServicePrincipal"].write(value.servicePrincipal)
    }
}

extension DisablePolicyTypeInput {

    static func write(value: DisablePolicyTypeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PolicyType"].write(value.policyType)
        try writer["RootId"].write(value.rootId)
    }
}

extension EnableAllFeaturesInput {

    static func write(value: EnableAllFeaturesInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension EnableAWSServiceAccessInput {

    static func write(value: EnableAWSServiceAccessInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ServicePrincipal"].write(value.servicePrincipal)
    }
}

extension EnablePolicyTypeInput {

    static func write(value: EnablePolicyTypeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PolicyType"].write(value.policyType)
        try writer["RootId"].write(value.rootId)
    }
}

extension InviteAccountToOrganizationInput {

    static func write(value: InviteAccountToOrganizationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Notes"].write(value.notes)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: OrganizationsClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Target"].write(value.target, with: OrganizationsClientTypes.HandshakeParty.write(value:to:))
    }
}

extension LeaveOrganizationInput {

    static func write(value: LeaveOrganizationInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension ListAccountsInput {

    static func write(value: ListAccountsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListAccountsForParentInput {

    static func write(value: ListAccountsForParentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["ParentId"].write(value.parentId)
    }
}

extension ListAWSServiceAccessForOrganizationInput {

    static func write(value: ListAWSServiceAccessForOrganizationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListChildrenInput {

    static func write(value: ListChildrenInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChildType"].write(value.childType)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["ParentId"].write(value.parentId)
    }
}

extension ListCreateAccountStatusInput {

    static func write(value: ListCreateAccountStatusInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["States"].writeList(value.states, memberWritingClosure: SmithyReadWrite.WritingClosureBox<OrganizationsClientTypes.CreateAccountState>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension ListDelegatedAdministratorsInput {

    static func write(value: ListDelegatedAdministratorsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["ServicePrincipal"].write(value.servicePrincipal)
    }
}

extension ListDelegatedServicesForAccountInput {

    static func write(value: ListDelegatedServicesForAccountInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccountId"].write(value.accountId)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListHandshakesForAccountInput {

    static func write(value: ListHandshakesForAccountInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Filter"].write(value.filter, with: OrganizationsClientTypes.HandshakeFilter.write(value:to:))
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListHandshakesForOrganizationInput {

    static func write(value: ListHandshakesForOrganizationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Filter"].write(value.filter, with: OrganizationsClientTypes.HandshakeFilter.write(value:to:))
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListOrganizationalUnitsForParentInput {

    static func write(value: ListOrganizationalUnitsForParentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["ParentId"].write(value.parentId)
    }
}

extension ListParentsInput {

    static func write(value: ListParentsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChildId"].write(value.childId)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListPoliciesInput {

    static func write(value: ListPoliciesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Filter"].write(value.filter)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListPoliciesForTargetInput {

    static func write(value: ListPoliciesForTargetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Filter"].write(value.filter)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["TargetId"].write(value.targetId)
    }
}

extension ListRootsInput {

    static func write(value: ListRootsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListTagsForResourceInput {

    static func write(value: ListTagsForResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["NextToken"].write(value.nextToken)
        try writer["ResourceId"].write(value.resourceId)
    }
}

extension ListTargetsForPolicyInput {

    static func write(value: ListTargetsForPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["PolicyId"].write(value.policyId)
    }
}

extension MoveAccountInput {

    static func write(value: MoveAccountInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccountId"].write(value.accountId)
        try writer["DestinationParentId"].write(value.destinationParentId)
        try writer["SourceParentId"].write(value.sourceParentId)
    }
}

extension PutResourcePolicyInput {

    static func write(value: PutResourcePolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Content"].write(value.content)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: OrganizationsClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension RegisterDelegatedAdministratorInput {

    static func write(value: RegisterDelegatedAdministratorInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccountId"].write(value.accountId)
        try writer["ServicePrincipal"].write(value.servicePrincipal)
    }
}

extension RemoveAccountFromOrganizationInput {

    static func write(value: RemoveAccountFromOrganizationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccountId"].write(value.accountId)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceId"].write(value.resourceId)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: OrganizationsClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UntagResourceInput {

    static func write(value: UntagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceId"].write(value.resourceId)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateOrganizationalUnitInput {

    static func write(value: UpdateOrganizationalUnitInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["OrganizationalUnitId"].write(value.organizationalUnitId)
    }
}

extension UpdatePolicyInput {

    static func write(value: UpdatePolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Content"].write(value.content)
        try writer["Description"].write(value.description)
        try writer["Name"].write(value.name)
        try writer["PolicyId"].write(value.policyId)
    }
}

extension AcceptHandshakeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AcceptHandshakeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AcceptHandshakeOutput()
        value.handshake = try reader["Handshake"].readIfPresent(with: OrganizationsClientTypes.Handshake.read(from:))
        return value
    }
}

extension AttachPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AttachPolicyOutput {
        return AttachPolicyOutput()
    }
}

extension CancelHandshakeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CancelHandshakeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CancelHandshakeOutput()
        value.handshake = try reader["Handshake"].readIfPresent(with: OrganizationsClientTypes.Handshake.read(from:))
        return value
    }
}

extension CloseAccountOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CloseAccountOutput {
        return CloseAccountOutput()
    }
}

extension CreateAccountOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateAccountOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateAccountOutput()
        value.createAccountStatus = try reader["CreateAccountStatus"].readIfPresent(with: OrganizationsClientTypes.CreateAccountStatus.read(from:))
        return value
    }
}

extension CreateGovCloudAccountOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateGovCloudAccountOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateGovCloudAccountOutput()
        value.createAccountStatus = try reader["CreateAccountStatus"].readIfPresent(with: OrganizationsClientTypes.CreateAccountStatus.read(from:))
        return value
    }
}

extension CreateOrganizationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateOrganizationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateOrganizationOutput()
        value.organization = try reader["Organization"].readIfPresent(with: OrganizationsClientTypes.Organization.read(from:))
        return value
    }
}

extension CreateOrganizationalUnitOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateOrganizationalUnitOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateOrganizationalUnitOutput()
        value.organizationalUnit = try reader["OrganizationalUnit"].readIfPresent(with: OrganizationsClientTypes.OrganizationalUnit.read(from:))
        return value
    }
}

extension CreatePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreatePolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreatePolicyOutput()
        value.policy = try reader["Policy"].readIfPresent(with: OrganizationsClientTypes.Policy.read(from:))
        return value
    }
}

extension DeclineHandshakeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeclineHandshakeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeclineHandshakeOutput()
        value.handshake = try reader["Handshake"].readIfPresent(with: OrganizationsClientTypes.Handshake.read(from:))
        return value
    }
}

extension DeleteOrganizationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteOrganizationOutput {
        return DeleteOrganizationOutput()
    }
}

extension DeleteOrganizationalUnitOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteOrganizationalUnitOutput {
        return DeleteOrganizationalUnitOutput()
    }
}

extension DeletePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeletePolicyOutput {
        return DeletePolicyOutput()
    }
}

extension DeleteResourcePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteResourcePolicyOutput {
        return DeleteResourcePolicyOutput()
    }
}

extension DeregisterDelegatedAdministratorOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeregisterDelegatedAdministratorOutput {
        return DeregisterDelegatedAdministratorOutput()
    }
}

extension DescribeAccountOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeAccountOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeAccountOutput()
        value.account = try reader["Account"].readIfPresent(with: OrganizationsClientTypes.Account.read(from:))
        return value
    }
}

extension DescribeCreateAccountStatusOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeCreateAccountStatusOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeCreateAccountStatusOutput()
        value.createAccountStatus = try reader["CreateAccountStatus"].readIfPresent(with: OrganizationsClientTypes.CreateAccountStatus.read(from:))
        return value
    }
}

extension DescribeEffectivePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeEffectivePolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeEffectivePolicyOutput()
        value.effectivePolicy = try reader["EffectivePolicy"].readIfPresent(with: OrganizationsClientTypes.EffectivePolicy.read(from:))
        return value
    }
}

extension DescribeHandshakeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeHandshakeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeHandshakeOutput()
        value.handshake = try reader["Handshake"].readIfPresent(with: OrganizationsClientTypes.Handshake.read(from:))
        return value
    }
}

extension DescribeOrganizationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeOrganizationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeOrganizationOutput()
        value.organization = try reader["Organization"].readIfPresent(with: OrganizationsClientTypes.Organization.read(from:))
        return value
    }
}

extension DescribeOrganizationalUnitOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeOrganizationalUnitOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeOrganizationalUnitOutput()
        value.organizationalUnit = try reader["OrganizationalUnit"].readIfPresent(with: OrganizationsClientTypes.OrganizationalUnit.read(from:))
        return value
    }
}

extension DescribePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribePolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribePolicyOutput()
        value.policy = try reader["Policy"].readIfPresent(with: OrganizationsClientTypes.Policy.read(from:))
        return value
    }
}

extension DescribeResourcePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeResourcePolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeResourcePolicyOutput()
        value.resourcePolicy = try reader["ResourcePolicy"].readIfPresent(with: OrganizationsClientTypes.ResourcePolicy.read(from:))
        return value
    }
}

extension DetachPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DetachPolicyOutput {
        return DetachPolicyOutput()
    }
}

extension DisableAWSServiceAccessOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisableAWSServiceAccessOutput {
        return DisableAWSServiceAccessOutput()
    }
}

extension DisablePolicyTypeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisablePolicyTypeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DisablePolicyTypeOutput()
        value.root = try reader["Root"].readIfPresent(with: OrganizationsClientTypes.Root.read(from:))
        return value
    }
}

extension EnableAllFeaturesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> EnableAllFeaturesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = EnableAllFeaturesOutput()
        value.handshake = try reader["Handshake"].readIfPresent(with: OrganizationsClientTypes.Handshake.read(from:))
        return value
    }
}

extension EnableAWSServiceAccessOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> EnableAWSServiceAccessOutput {
        return EnableAWSServiceAccessOutput()
    }
}

extension EnablePolicyTypeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> EnablePolicyTypeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = EnablePolicyTypeOutput()
        value.root = try reader["Root"].readIfPresent(with: OrganizationsClientTypes.Root.read(from:))
        return value
    }
}

extension InviteAccountToOrganizationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> InviteAccountToOrganizationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = InviteAccountToOrganizationOutput()
        value.handshake = try reader["Handshake"].readIfPresent(with: OrganizationsClientTypes.Handshake.read(from:))
        return value
    }
}

extension LeaveOrganizationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> LeaveOrganizationOutput {
        return LeaveOrganizationOutput()
    }
}

extension ListAccountsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAccountsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAccountsOutput()
        value.accounts = try reader["Accounts"].readListIfPresent(memberReadingClosure: OrganizationsClientTypes.Account.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListAccountsForParentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAccountsForParentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAccountsForParentOutput()
        value.accounts = try reader["Accounts"].readListIfPresent(memberReadingClosure: OrganizationsClientTypes.Account.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListAWSServiceAccessForOrganizationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAWSServiceAccessForOrganizationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAWSServiceAccessForOrganizationOutput()
        value.enabledServicePrincipals = try reader["EnabledServicePrincipals"].readListIfPresent(memberReadingClosure: OrganizationsClientTypes.EnabledServicePrincipal.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListChildrenOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListChildrenOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListChildrenOutput()
        value.children = try reader["Children"].readListIfPresent(memberReadingClosure: OrganizationsClientTypes.Child.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListCreateAccountStatusOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListCreateAccountStatusOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListCreateAccountStatusOutput()
        value.createAccountStatuses = try reader["CreateAccountStatuses"].readListIfPresent(memberReadingClosure: OrganizationsClientTypes.CreateAccountStatus.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListDelegatedAdministratorsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDelegatedAdministratorsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDelegatedAdministratorsOutput()
        value.delegatedAdministrators = try reader["DelegatedAdministrators"].readListIfPresent(memberReadingClosure: OrganizationsClientTypes.DelegatedAdministrator.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListDelegatedServicesForAccountOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDelegatedServicesForAccountOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDelegatedServicesForAccountOutput()
        value.delegatedServices = try reader["DelegatedServices"].readListIfPresent(memberReadingClosure: OrganizationsClientTypes.DelegatedService.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListHandshakesForAccountOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListHandshakesForAccountOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListHandshakesForAccountOutput()
        value.handshakes = try reader["Handshakes"].readListIfPresent(memberReadingClosure: OrganizationsClientTypes.Handshake.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListHandshakesForOrganizationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListHandshakesForOrganizationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListHandshakesForOrganizationOutput()
        value.handshakes = try reader["Handshakes"].readListIfPresent(memberReadingClosure: OrganizationsClientTypes.Handshake.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListOrganizationalUnitsForParentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListOrganizationalUnitsForParentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListOrganizationalUnitsForParentOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.organizationalUnits = try reader["OrganizationalUnits"].readListIfPresent(memberReadingClosure: OrganizationsClientTypes.OrganizationalUnit.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListParentsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListParentsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListParentsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.parents = try reader["Parents"].readListIfPresent(memberReadingClosure: OrganizationsClientTypes.Parent.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListPoliciesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListPoliciesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListPoliciesOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.policies = try reader["Policies"].readListIfPresent(memberReadingClosure: OrganizationsClientTypes.PolicySummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListPoliciesForTargetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListPoliciesForTargetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListPoliciesForTargetOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.policies = try reader["Policies"].readListIfPresent(memberReadingClosure: OrganizationsClientTypes.PolicySummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListRootsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListRootsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListRootsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.roots = try reader["Roots"].readListIfPresent(memberReadingClosure: OrganizationsClientTypes.Root.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: OrganizationsClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTargetsForPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTargetsForPolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTargetsForPolicyOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.targets = try reader["Targets"].readListIfPresent(memberReadingClosure: OrganizationsClientTypes.PolicyTargetSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MoveAccountOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> MoveAccountOutput {
        return MoveAccountOutput()
    }
}

extension PutResourcePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutResourcePolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutResourcePolicyOutput()
        value.resourcePolicy = try reader["ResourcePolicy"].readIfPresent(with: OrganizationsClientTypes.ResourcePolicy.read(from:))
        return value
    }
}

extension RegisterDelegatedAdministratorOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RegisterDelegatedAdministratorOutput {
        return RegisterDelegatedAdministratorOutput()
    }
}

extension RemoveAccountFromOrganizationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RemoveAccountFromOrganizationOutput {
        return RemoveAccountFromOrganizationOutput()
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateOrganizationalUnitOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateOrganizationalUnitOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateOrganizationalUnitOutput()
        value.organizationalUnit = try reader["OrganizationalUnit"].readIfPresent(with: OrganizationsClientTypes.OrganizationalUnit.read(from:))
        return value
    }
}

extension UpdatePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdatePolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdatePolicyOutput()
        value.policy = try reader["Policy"].readIfPresent(with: OrganizationsClientTypes.Policy.read(from:))
        return value
    }
}

enum AcceptHandshakeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccessDeniedForDependencyException": return try AccessDeniedForDependencyException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "HandshakeAlreadyInStateException": return try HandshakeAlreadyInStateException.makeError(baseError: baseError)
            case "HandshakeConstraintViolationException": return try HandshakeConstraintViolationException.makeError(baseError: baseError)
            case "HandshakeNotFoundException": return try HandshakeNotFoundException.makeError(baseError: baseError)
            case "InvalidHandshakeTransitionException": return try InvalidHandshakeTransitionException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AttachPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "ConstraintViolationException": return try ConstraintViolationException.makeError(baseError: baseError)
            case "DuplicatePolicyAttachmentException": return try DuplicatePolicyAttachmentException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "PolicyChangesInProgressException": return try PolicyChangesInProgressException.makeError(baseError: baseError)
            case "PolicyNotFoundException": return try PolicyNotFoundException.makeError(baseError: baseError)
            case "PolicyTypeNotEnabledException": return try PolicyTypeNotEnabledException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TargetNotFoundException": return try TargetNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnsupportedAPIEndpointException": return try UnsupportedAPIEndpointException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CancelHandshakeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "HandshakeAlreadyInStateException": return try HandshakeAlreadyInStateException.makeError(baseError: baseError)
            case "HandshakeNotFoundException": return try HandshakeNotFoundException.makeError(baseError: baseError)
            case "InvalidHandshakeTransitionException": return try InvalidHandshakeTransitionException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CloseAccountOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountAlreadyClosedException": return try AccountAlreadyClosedException.makeError(baseError: baseError)
            case "AccountNotFoundException": return try AccountNotFoundException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ConstraintViolationException": return try ConstraintViolationException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnsupportedAPIEndpointException": return try UnsupportedAPIEndpointException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateAccountOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "ConstraintViolationException": return try ConstraintViolationException.makeError(baseError: baseError)
            case "FinalizingOrganizationException": return try FinalizingOrganizationException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnsupportedAPIEndpointException": return try UnsupportedAPIEndpointException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateGovCloudAccountOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "ConstraintViolationException": return try ConstraintViolationException.makeError(baseError: baseError)
            case "FinalizingOrganizationException": return try FinalizingOrganizationException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnsupportedAPIEndpointException": return try UnsupportedAPIEndpointException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateOrganizationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccessDeniedForDependencyException": return try AccessDeniedForDependencyException.makeError(baseError: baseError)
            case "AlreadyInOrganizationException": return try AlreadyInOrganizationException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "ConstraintViolationException": return try ConstraintViolationException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateOrganizationalUnitOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "ConstraintViolationException": return try ConstraintViolationException.makeError(baseError: baseError)
            case "DuplicateOrganizationalUnitException": return try DuplicateOrganizationalUnitException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ParentNotFoundException": return try ParentNotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreatePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "ConstraintViolationException": return try ConstraintViolationException.makeError(baseError: baseError)
            case "DuplicatePolicyException": return try DuplicatePolicyException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "MalformedPolicyDocumentException": return try MalformedPolicyDocumentException.makeError(baseError: baseError)
            case "PolicyTypeNotAvailableForOrganizationException": return try PolicyTypeNotAvailableForOrganizationException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnsupportedAPIEndpointException": return try UnsupportedAPIEndpointException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeclineHandshakeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "HandshakeAlreadyInStateException": return try HandshakeAlreadyInStateException.makeError(baseError: baseError)
            case "HandshakeNotFoundException": return try HandshakeNotFoundException.makeError(baseError: baseError)
            case "InvalidHandshakeTransitionException": return try InvalidHandshakeTransitionException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteOrganizationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "OrganizationNotEmptyException": return try OrganizationNotEmptyException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteOrganizationalUnitOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "OrganizationalUnitNotEmptyException": return try OrganizationalUnitNotEmptyException.makeError(baseError: baseError)
            case "OrganizationalUnitNotFoundException": return try OrganizationalUnitNotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeletePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "PolicyInUseException": return try PolicyInUseException.makeError(baseError: baseError)
            case "PolicyNotFoundException": return try PolicyNotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnsupportedAPIEndpointException": return try UnsupportedAPIEndpointException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteResourcePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "ConstraintViolationException": return try ConstraintViolationException.makeError(baseError: baseError)
            case "ResourcePolicyNotFoundException": return try ResourcePolicyNotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnsupportedAPIEndpointException": return try UnsupportedAPIEndpointException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeregisterDelegatedAdministratorOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountNotFoundException": return try AccountNotFoundException.makeError(baseError: baseError)
            case "AccountNotRegisteredException": return try AccountNotRegisteredException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "ConstraintViolationException": return try ConstraintViolationException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnsupportedAPIEndpointException": return try UnsupportedAPIEndpointException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeAccountOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountNotFoundException": return try AccountNotFoundException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeCreateAccountStatusOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "CreateAccountStatusNotFoundException": return try CreateAccountStatusNotFoundException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnsupportedAPIEndpointException": return try UnsupportedAPIEndpointException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeEffectivePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "ConstraintViolationException": return try ConstraintViolationException.makeError(baseError: baseError)
            case "EffectivePolicyNotFoundException": return try EffectivePolicyNotFoundException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TargetNotFoundException": return try TargetNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnsupportedAPIEndpointException": return try UnsupportedAPIEndpointException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeHandshakeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "HandshakeNotFoundException": return try HandshakeNotFoundException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeOrganizationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeOrganizationalUnitOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "OrganizationalUnitNotFoundException": return try OrganizationalUnitNotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "PolicyNotFoundException": return try PolicyNotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnsupportedAPIEndpointException": return try UnsupportedAPIEndpointException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeResourcePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "ConstraintViolationException": return try ConstraintViolationException.makeError(baseError: baseError)
            case "ResourcePolicyNotFoundException": return try ResourcePolicyNotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnsupportedAPIEndpointException": return try UnsupportedAPIEndpointException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DetachPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "ConstraintViolationException": return try ConstraintViolationException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "PolicyChangesInProgressException": return try PolicyChangesInProgressException.makeError(baseError: baseError)
            case "PolicyNotAttachedException": return try PolicyNotAttachedException.makeError(baseError: baseError)
            case "PolicyNotFoundException": return try PolicyNotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TargetNotFoundException": return try TargetNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnsupportedAPIEndpointException": return try UnsupportedAPIEndpointException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisableAWSServiceAccessOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "ConstraintViolationException": return try ConstraintViolationException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnsupportedAPIEndpointException": return try UnsupportedAPIEndpointException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisablePolicyTypeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "ConstraintViolationException": return try ConstraintViolationException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "PolicyChangesInProgressException": return try PolicyChangesInProgressException.makeError(baseError: baseError)
            case "PolicyTypeNotEnabledException": return try PolicyTypeNotEnabledException.makeError(baseError: baseError)
            case "RootNotFoundException": return try RootNotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnsupportedAPIEndpointException": return try UnsupportedAPIEndpointException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum EnableAllFeaturesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "HandshakeConstraintViolationException": return try HandshakeConstraintViolationException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum EnableAWSServiceAccessOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "ConstraintViolationException": return try ConstraintViolationException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnsupportedAPIEndpointException": return try UnsupportedAPIEndpointException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum EnablePolicyTypeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "ConstraintViolationException": return try ConstraintViolationException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "PolicyChangesInProgressException": return try PolicyChangesInProgressException.makeError(baseError: baseError)
            case "PolicyTypeAlreadyEnabledException": return try PolicyTypeAlreadyEnabledException.makeError(baseError: baseError)
            case "PolicyTypeNotAvailableForOrganizationException": return try PolicyTypeNotAvailableForOrganizationException.makeError(baseError: baseError)
            case "RootNotFoundException": return try RootNotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnsupportedAPIEndpointException": return try UnsupportedAPIEndpointException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum InviteAccountToOrganizationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountOwnerNotVerifiedException": return try AccountOwnerNotVerifiedException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "ConstraintViolationException": return try ConstraintViolationException.makeError(baseError: baseError)
            case "DuplicateHandshakeException": return try DuplicateHandshakeException.makeError(baseError: baseError)
            case "FinalizingOrganizationException": return try FinalizingOrganizationException.makeError(baseError: baseError)
            case "HandshakeConstraintViolationException": return try HandshakeConstraintViolationException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum LeaveOrganizationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountNotFoundException": return try AccountNotFoundException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "ConstraintViolationException": return try ConstraintViolationException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "MasterCannotLeaveOrganizationException": return try MasterCannotLeaveOrganizationException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAccountsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAccountsForParentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ParentNotFoundException": return try ParentNotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAWSServiceAccessForOrganizationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "ConstraintViolationException": return try ConstraintViolationException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnsupportedAPIEndpointException": return try UnsupportedAPIEndpointException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListChildrenOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ParentNotFoundException": return try ParentNotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListCreateAccountStatusOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnsupportedAPIEndpointException": return try UnsupportedAPIEndpointException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDelegatedAdministratorsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "ConstraintViolationException": return try ConstraintViolationException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnsupportedAPIEndpointException": return try UnsupportedAPIEndpointException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDelegatedServicesForAccountOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountNotFoundException": return try AccountNotFoundException.makeError(baseError: baseError)
            case "AccountNotRegisteredException": return try AccountNotRegisteredException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "ConstraintViolationException": return try ConstraintViolationException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnsupportedAPIEndpointException": return try UnsupportedAPIEndpointException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListHandshakesForAccountOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListHandshakesForOrganizationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListOrganizationalUnitsForParentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ParentNotFoundException": return try ParentNotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListParentsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "ChildNotFoundException": return try ChildNotFoundException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListPoliciesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnsupportedAPIEndpointException": return try UnsupportedAPIEndpointException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListPoliciesForTargetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TargetNotFoundException": return try TargetNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnsupportedAPIEndpointException": return try UnsupportedAPIEndpointException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListRootsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TargetNotFoundException": return try TargetNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTargetsForPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "PolicyNotFoundException": return try PolicyNotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnsupportedAPIEndpointException": return try UnsupportedAPIEndpointException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum MoveAccountOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountNotFoundException": return try AccountNotFoundException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "DestinationParentNotFoundException": return try DestinationParentNotFoundException.makeError(baseError: baseError)
            case "DuplicateAccountException": return try DuplicateAccountException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "SourceParentNotFoundException": return try SourceParentNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutResourcePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "ConstraintViolationException": return try ConstraintViolationException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnsupportedAPIEndpointException": return try UnsupportedAPIEndpointException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RegisterDelegatedAdministratorOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountAlreadyRegisteredException": return try AccountAlreadyRegisteredException.makeError(baseError: baseError)
            case "AccountNotFoundException": return try AccountNotFoundException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "ConstraintViolationException": return try ConstraintViolationException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnsupportedAPIEndpointException": return try UnsupportedAPIEndpointException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RemoveAccountFromOrganizationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AccountNotFoundException": return try AccountNotFoundException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "ConstraintViolationException": return try ConstraintViolationException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "MasterCannotLeaveOrganizationException": return try MasterCannotLeaveOrganizationException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "ConstraintViolationException": return try ConstraintViolationException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TargetNotFoundException": return try TargetNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "ConstraintViolationException": return try ConstraintViolationException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TargetNotFoundException": return try TargetNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateOrganizationalUnitOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "DuplicateOrganizationalUnitException": return try DuplicateOrganizationalUnitException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "OrganizationalUnitNotFoundException": return try OrganizationalUnitNotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdatePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "AWSOrganizationsNotInUseException": return try AWSOrganizationsNotInUseException.makeError(baseError: baseError)
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "ConstraintViolationException": return try ConstraintViolationException.makeError(baseError: baseError)
            case "DuplicatePolicyException": return try DuplicatePolicyException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "MalformedPolicyDocumentException": return try MalformedPolicyDocumentException.makeError(baseError: baseError)
            case "PolicyChangesInProgressException": return try PolicyChangesInProgressException.makeError(baseError: baseError)
            case "PolicyNotFoundException": return try PolicyNotFoundException.makeError(baseError: baseError)
            case "ServiceException": return try ServiceException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnsupportedAPIEndpointException": return try UnsupportedAPIEndpointException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension HandshakeNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> HandshakeNotFoundException {
        let reader = baseError.errorBodyReader
        var value = HandshakeNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedForDependencyException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> AccessDeniedForDependencyException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedForDependencyException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.properties.reason = try reader["Reason"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension HandshakeConstraintViolationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> HandshakeConstraintViolationException {
        let reader = baseError.errorBodyReader
        var value = HandshakeConstraintViolationException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.properties.reason = try reader["Reason"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension HandshakeAlreadyInStateException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> HandshakeAlreadyInStateException {
        let reader = baseError.errorBodyReader
        var value = HandshakeAlreadyInStateException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidInputException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidInputException {
        let reader = baseError.errorBodyReader
        var value = InvalidInputException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.properties.reason = try reader["Reason"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AWSOrganizationsNotInUseException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> AWSOrganizationsNotInUseException {
        let reader = baseError.errorBodyReader
        var value = AWSOrganizationsNotInUseException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConcurrentModificationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ConcurrentModificationException {
        let reader = baseError.errorBodyReader
        var value = ConcurrentModificationException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ServiceException {
        let reader = baseError.errorBodyReader
        var value = ServiceException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TooManyRequestsException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> TooManyRequestsException {
        let reader = baseError.errorBodyReader
        var value = TooManyRequestsException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.properties.type = try reader["Type"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidHandshakeTransitionException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidHandshakeTransitionException {
        let reader = baseError.errorBodyReader
        var value = InvalidHandshakeTransitionException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DuplicatePolicyAttachmentException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> DuplicatePolicyAttachmentException {
        let reader = baseError.errorBodyReader
        var value = DuplicatePolicyAttachmentException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConstraintViolationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ConstraintViolationException {
        let reader = baseError.errorBodyReader
        var value = ConstraintViolationException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.properties.reason = try reader["Reason"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension PolicyTypeNotEnabledException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> PolicyTypeNotEnabledException {
        let reader = baseError.errorBodyReader
        var value = PolicyTypeNotEnabledException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TargetNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> TargetNotFoundException {
        let reader = baseError.errorBodyReader
        var value = TargetNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UnsupportedAPIEndpointException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> UnsupportedAPIEndpointException {
        let reader = baseError.errorBodyReader
        var value = UnsupportedAPIEndpointException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension PolicyChangesInProgressException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> PolicyChangesInProgressException {
        let reader = baseError.errorBodyReader
        var value = PolicyChangesInProgressException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension PolicyNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> PolicyNotFoundException {
        let reader = baseError.errorBodyReader
        var value = PolicyNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccountAlreadyClosedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> AccountAlreadyClosedException {
        let reader = baseError.errorBodyReader
        var value = AccountAlreadyClosedException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccountNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> AccountNotFoundException {
        let reader = baseError.errorBodyReader
        var value = AccountNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension FinalizingOrganizationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> FinalizingOrganizationException {
        let reader = baseError.errorBodyReader
        var value = FinalizingOrganizationException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AlreadyInOrganizationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> AlreadyInOrganizationException {
        let reader = baseError.errorBodyReader
        var value = AlreadyInOrganizationException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DuplicateOrganizationalUnitException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> DuplicateOrganizationalUnitException {
        let reader = baseError.errorBodyReader
        var value = DuplicateOrganizationalUnitException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ParentNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ParentNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ParentNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension PolicyTypeNotAvailableForOrganizationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> PolicyTypeNotAvailableForOrganizationException {
        let reader = baseError.errorBodyReader
        var value = PolicyTypeNotAvailableForOrganizationException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DuplicatePolicyException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> DuplicatePolicyException {
        let reader = baseError.errorBodyReader
        var value = DuplicatePolicyException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension MalformedPolicyDocumentException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> MalformedPolicyDocumentException {
        let reader = baseError.errorBodyReader
        var value = MalformedPolicyDocumentException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension OrganizationNotEmptyException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> OrganizationNotEmptyException {
        let reader = baseError.errorBodyReader
        var value = OrganizationNotEmptyException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension OrganizationalUnitNotEmptyException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> OrganizationalUnitNotEmptyException {
        let reader = baseError.errorBodyReader
        var value = OrganizationalUnitNotEmptyException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension OrganizationalUnitNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> OrganizationalUnitNotFoundException {
        let reader = baseError.errorBodyReader
        var value = OrganizationalUnitNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension PolicyInUseException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> PolicyInUseException {
        let reader = baseError.errorBodyReader
        var value = PolicyInUseException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourcePolicyNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourcePolicyNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourcePolicyNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccountNotRegisteredException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> AccountNotRegisteredException {
        let reader = baseError.errorBodyReader
        var value = AccountNotRegisteredException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension CreateAccountStatusNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> CreateAccountStatusNotFoundException {
        let reader = baseError.errorBodyReader
        var value = CreateAccountStatusNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension EffectivePolicyNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> EffectivePolicyNotFoundException {
        let reader = baseError.errorBodyReader
        var value = EffectivePolicyNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension PolicyNotAttachedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> PolicyNotAttachedException {
        let reader = baseError.errorBodyReader
        var value = PolicyNotAttachedException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension RootNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> RootNotFoundException {
        let reader = baseError.errorBodyReader
        var value = RootNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension PolicyTypeAlreadyEnabledException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> PolicyTypeAlreadyEnabledException {
        let reader = baseError.errorBodyReader
        var value = PolicyTypeAlreadyEnabledException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DuplicateHandshakeException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> DuplicateHandshakeException {
        let reader = baseError.errorBodyReader
        var value = DuplicateHandshakeException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccountOwnerNotVerifiedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> AccountOwnerNotVerifiedException {
        let reader = baseError.errorBodyReader
        var value = AccountOwnerNotVerifiedException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension MasterCannotLeaveOrganizationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> MasterCannotLeaveOrganizationException {
        let reader = baseError.errorBodyReader
        var value = MasterCannotLeaveOrganizationException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ChildNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ChildNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ChildNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SourceParentNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> SourceParentNotFoundException {
        let reader = baseError.errorBodyReader
        var value = SourceParentNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DestinationParentNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> DestinationParentNotFoundException {
        let reader = baseError.errorBodyReader
        var value = DestinationParentNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DuplicateAccountException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> DuplicateAccountException {
        let reader = baseError.errorBodyReader
        var value = DuplicateAccountException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccountAlreadyRegisteredException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> AccountAlreadyRegisteredException {
        let reader = baseError.errorBodyReader
        var value = AccountAlreadyRegisteredException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension OrganizationsClientTypes.Handshake {

    static func read(from reader: SmithyJSON.Reader) throws -> OrganizationsClientTypes.Handshake {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = OrganizationsClientTypes.Handshake()
        value.id = try reader["Id"].readIfPresent()
        value.arn = try reader["Arn"].readIfPresent()
        value.parties = try reader["Parties"].readListIfPresent(memberReadingClosure: OrganizationsClientTypes.HandshakeParty.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.state = try reader["State"].readIfPresent()
        value.requestedTimestamp = try reader["RequestedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.expirationTimestamp = try reader["ExpirationTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.action = try reader["Action"].readIfPresent()
        value.resources = try reader["Resources"].readListIfPresent(memberReadingClosure: OrganizationsClientTypes.HandshakeResource.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension OrganizationsClientTypes.HandshakeResource {

    static func read(from reader: SmithyJSON.Reader) throws -> OrganizationsClientTypes.HandshakeResource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = OrganizationsClientTypes.HandshakeResource()
        value.value = try reader["Value"].readIfPresent()
        value.type = try reader["Type"].readIfPresent()
        value.resources = try reader["Resources"].readListIfPresent(memberReadingClosure: OrganizationsClientTypes.HandshakeResource.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension OrganizationsClientTypes.HandshakeParty {

    static func write(value: OrganizationsClientTypes.HandshakeParty?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Id"].write(value.id)
        try writer["Type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> OrganizationsClientTypes.HandshakeParty {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = OrganizationsClientTypes.HandshakeParty()
        value.id = try reader["Id"].readIfPresent() ?? ""
        value.type = try reader["Type"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension OrganizationsClientTypes.CreateAccountStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> OrganizationsClientTypes.CreateAccountStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = OrganizationsClientTypes.CreateAccountStatus()
        value.id = try reader["Id"].readIfPresent()
        value.accountName = try reader["AccountName"].readIfPresent()
        value.state = try reader["State"].readIfPresent()
        value.requestedTimestamp = try reader["RequestedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.completedTimestamp = try reader["CompletedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.accountId = try reader["AccountId"].readIfPresent()
        value.govCloudAccountId = try reader["GovCloudAccountId"].readIfPresent()
        value.failureReason = try reader["FailureReason"].readIfPresent()
        return value
    }
}

extension OrganizationsClientTypes.Organization {

    static func read(from reader: SmithyJSON.Reader) throws -> OrganizationsClientTypes.Organization {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = OrganizationsClientTypes.Organization()
        value.id = try reader["Id"].readIfPresent()
        value.arn = try reader["Arn"].readIfPresent()
        value.featureSet = try reader["FeatureSet"].readIfPresent()
        value.masterAccountArn = try reader["MasterAccountArn"].readIfPresent()
        value.masterAccountId = try reader["MasterAccountId"].readIfPresent()
        value.masterAccountEmail = try reader["MasterAccountEmail"].readIfPresent()
        value.availablePolicyTypes = try reader["AvailablePolicyTypes"].readListIfPresent(memberReadingClosure: OrganizationsClientTypes.PolicyTypeSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension OrganizationsClientTypes.PolicyTypeSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> OrganizationsClientTypes.PolicyTypeSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = OrganizationsClientTypes.PolicyTypeSummary()
        value.type = try reader["Type"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension OrganizationsClientTypes.OrganizationalUnit {

    static func read(from reader: SmithyJSON.Reader) throws -> OrganizationsClientTypes.OrganizationalUnit {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = OrganizationsClientTypes.OrganizationalUnit()
        value.id = try reader["Id"].readIfPresent()
        value.arn = try reader["Arn"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        return value
    }
}

extension OrganizationsClientTypes.Policy {

    static func read(from reader: SmithyJSON.Reader) throws -> OrganizationsClientTypes.Policy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = OrganizationsClientTypes.Policy()
        value.policySummary = try reader["PolicySummary"].readIfPresent(with: OrganizationsClientTypes.PolicySummary.read(from:))
        value.content = try reader["Content"].readIfPresent()
        return value
    }
}

extension OrganizationsClientTypes.PolicySummary {

    static func read(from reader: SmithyJSON.Reader) throws -> OrganizationsClientTypes.PolicySummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = OrganizationsClientTypes.PolicySummary()
        value.id = try reader["Id"].readIfPresent()
        value.arn = try reader["Arn"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.type = try reader["Type"].readIfPresent()
        value.awsManaged = try reader["AwsManaged"].readIfPresent() ?? false
        return value
    }
}

extension OrganizationsClientTypes.Account {

    static func read(from reader: SmithyJSON.Reader) throws -> OrganizationsClientTypes.Account {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = OrganizationsClientTypes.Account()
        value.id = try reader["Id"].readIfPresent()
        value.arn = try reader["Arn"].readIfPresent()
        value.email = try reader["Email"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.joinedMethod = try reader["JoinedMethod"].readIfPresent()
        value.joinedTimestamp = try reader["JoinedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension OrganizationsClientTypes.EffectivePolicy {

    static func read(from reader: SmithyJSON.Reader) throws -> OrganizationsClientTypes.EffectivePolicy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = OrganizationsClientTypes.EffectivePolicy()
        value.policyContent = try reader["PolicyContent"].readIfPresent()
        value.lastUpdatedTimestamp = try reader["LastUpdatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.targetId = try reader["TargetId"].readIfPresent()
        value.policyType = try reader["PolicyType"].readIfPresent()
        return value
    }
}

extension OrganizationsClientTypes.ResourcePolicy {

    static func read(from reader: SmithyJSON.Reader) throws -> OrganizationsClientTypes.ResourcePolicy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = OrganizationsClientTypes.ResourcePolicy()
        value.resourcePolicySummary = try reader["ResourcePolicySummary"].readIfPresent(with: OrganizationsClientTypes.ResourcePolicySummary.read(from:))
        value.content = try reader["Content"].readIfPresent()
        return value
    }
}

extension OrganizationsClientTypes.ResourcePolicySummary {

    static func read(from reader: SmithyJSON.Reader) throws -> OrganizationsClientTypes.ResourcePolicySummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = OrganizationsClientTypes.ResourcePolicySummary()
        value.id = try reader["Id"].readIfPresent()
        value.arn = try reader["Arn"].readIfPresent()
        return value
    }
}

extension OrganizationsClientTypes.Root {

    static func read(from reader: SmithyJSON.Reader) throws -> OrganizationsClientTypes.Root {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = OrganizationsClientTypes.Root()
        value.id = try reader["Id"].readIfPresent()
        value.arn = try reader["Arn"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.policyTypes = try reader["PolicyTypes"].readListIfPresent(memberReadingClosure: OrganizationsClientTypes.PolicyTypeSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension OrganizationsClientTypes.EnabledServicePrincipal {

    static func read(from reader: SmithyJSON.Reader) throws -> OrganizationsClientTypes.EnabledServicePrincipal {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = OrganizationsClientTypes.EnabledServicePrincipal()
        value.servicePrincipal = try reader["ServicePrincipal"].readIfPresent()
        value.dateEnabled = try reader["DateEnabled"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension OrganizationsClientTypes.Child {

    static func read(from reader: SmithyJSON.Reader) throws -> OrganizationsClientTypes.Child {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = OrganizationsClientTypes.Child()
        value.id = try reader["Id"].readIfPresent()
        value.type = try reader["Type"].readIfPresent()
        return value
    }
}

extension OrganizationsClientTypes.DelegatedAdministrator {

    static func read(from reader: SmithyJSON.Reader) throws -> OrganizationsClientTypes.DelegatedAdministrator {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = OrganizationsClientTypes.DelegatedAdministrator()
        value.id = try reader["Id"].readIfPresent()
        value.arn = try reader["Arn"].readIfPresent()
        value.email = try reader["Email"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.joinedMethod = try reader["JoinedMethod"].readIfPresent()
        value.joinedTimestamp = try reader["JoinedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.delegationEnabledDate = try reader["DelegationEnabledDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension OrganizationsClientTypes.DelegatedService {

    static func read(from reader: SmithyJSON.Reader) throws -> OrganizationsClientTypes.DelegatedService {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = OrganizationsClientTypes.DelegatedService()
        value.servicePrincipal = try reader["ServicePrincipal"].readIfPresent()
        value.delegationEnabledDate = try reader["DelegationEnabledDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension OrganizationsClientTypes.Parent {

    static func read(from reader: SmithyJSON.Reader) throws -> OrganizationsClientTypes.Parent {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = OrganizationsClientTypes.Parent()
        value.id = try reader["Id"].readIfPresent()
        value.type = try reader["Type"].readIfPresent()
        return value
    }
}

extension OrganizationsClientTypes.Tag {

    static func write(value: OrganizationsClientTypes.Tag?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> OrganizationsClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = OrganizationsClientTypes.Tag()
        value.key = try reader["Key"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent() ?? ""
        return value
    }
}

extension OrganizationsClientTypes.PolicyTargetSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> OrganizationsClientTypes.PolicyTargetSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = OrganizationsClientTypes.PolicyTargetSummary()
        value.targetId = try reader["TargetId"].readIfPresent()
        value.arn = try reader["Arn"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.type = try reader["Type"].readIfPresent()
        return value
    }
}

extension OrganizationsClientTypes.HandshakeFilter {

    static func write(value: OrganizationsClientTypes.HandshakeFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ActionType"].write(value.actionType)
        try writer["ParentHandshakeId"].write(value.parentHandshakeId)
    }
}

public enum OrganizationsClientTypes {}
