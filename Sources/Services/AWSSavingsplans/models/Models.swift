// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime
import SmithyJSON
import SmithyReadWrite

extension CreateSavingsPlanInput {

    static func urlPathProvider(_ value: CreateSavingsPlanInput) -> Swift.String? {
        return "/CreateSavingsPlan"
    }
}

extension CreateSavingsPlanInput {

    static func write(value: CreateSavingsPlanInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
        try writer["commitment"].write(value.commitment)
        try writer["purchaseTime"].writeTimestamp(value.purchaseTime, format: .epochSeconds)
        try writer["savingsPlanOfferingId"].write(value.savingsPlanOfferingId)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: Swift.String.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["upfrontPaymentAmount"].write(value.upfrontPaymentAmount)
    }
}

public struct CreateSavingsPlanInput {
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    public var clientToken: Swift.String?
    /// The hourly commitment, in the same currency of the savingsPlanOfferingId. This is a value between 0.001 and 1 million. You cannot specify more than five digits after the decimal point.
    /// This member is required.
    public var commitment: Swift.String?
    /// The purchase time of the Savings Plan in UTC format (YYYY-MM-DDTHH:MM:SSZ).
    public var purchaseTime: ClientRuntime.Date?
    /// The ID of the offering.
    /// This member is required.
    public var savingsPlanOfferingId: Swift.String?
    /// One or more tags.
    public var tags: [Swift.String:Swift.String]?
    /// The up-front payment amount. This is a whole number between 50 and 99 percent of the total value of the Savings Plan. This parameter is only supported if the payment option is Partial Upfront.
    public var upfrontPaymentAmount: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        commitment: Swift.String? = nil,
        purchaseTime: ClientRuntime.Date? = nil,
        savingsPlanOfferingId: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        upfrontPaymentAmount: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.commitment = commitment
        self.purchaseTime = purchaseTime
        self.savingsPlanOfferingId = savingsPlanOfferingId
        self.tags = tags
        self.upfrontPaymentAmount = upfrontPaymentAmount
    }
}

extension CreateSavingsPlanOutput {

    static func httpOutput(from httpResponse: ClientRuntime.HttpResponse) async throws -> CreateSavingsPlanOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateSavingsPlanOutput()
        value.savingsPlanId = try reader["savingsPlanId"].readIfPresent()
        return value
    }
}

public struct CreateSavingsPlanOutput {
    /// The ID of the Savings Plan.
    public var savingsPlanId: Swift.String?

    public init(
        savingsPlanId: Swift.String? = nil
    )
    {
        self.savingsPlanId = savingsPlanId
    }
}

enum CreateSavingsPlanOutputError {

    static func httpError(from httpResponse: ClientRuntime.HttpResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension SavingsplansClientTypes {

    public enum CurrencyCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cny
        case usd
        case sdkUnknown(Swift.String)

        public static var allCases: [CurrencyCode] {
            return [
                .cny,
                .usd,
                .sdkUnknown("")
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cny: return "CNY"
            case .usd: return "USD"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension DeleteQueuedSavingsPlanInput {

    static func urlPathProvider(_ value: DeleteQueuedSavingsPlanInput) -> Swift.String? {
        return "/DeleteQueuedSavingsPlan"
    }
}

extension DeleteQueuedSavingsPlanInput {

    static func write(value: DeleteQueuedSavingsPlanInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["savingsPlanId"].write(value.savingsPlanId)
    }
}

public struct DeleteQueuedSavingsPlanInput {
    /// The ID of the Savings Plan.
    /// This member is required.
    public var savingsPlanId: Swift.String?

    public init(
        savingsPlanId: Swift.String? = nil
    )
    {
        self.savingsPlanId = savingsPlanId
    }
}

extension DeleteQueuedSavingsPlanOutput {

    static func httpOutput(from httpResponse: ClientRuntime.HttpResponse) async throws -> DeleteQueuedSavingsPlanOutput {
        return DeleteQueuedSavingsPlanOutput()
    }
}

public struct DeleteQueuedSavingsPlanOutput {

    public init() { }
}

enum DeleteQueuedSavingsPlanOutputError {

    static func httpError(from httpResponse: ClientRuntime.HttpResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension DescribeSavingsPlanRatesInput {

    static func urlPathProvider(_ value: DescribeSavingsPlanRatesInput) -> Swift.String? {
        return "/DescribeSavingsPlanRates"
    }
}

extension DescribeSavingsPlanRatesInput {

    static func write(value: DescribeSavingsPlanRatesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["filters"].writeList(value.filters, memberWritingClosure: SavingsplansClientTypes.SavingsPlanRateFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["savingsPlanId"].write(value.savingsPlanId)
    }
}

public struct DescribeSavingsPlanRatesInput {
    /// The filters.
    public var filters: [SavingsplansClientTypes.SavingsPlanRateFilter]?
    /// The maximum number of results to return with a single call. To retrieve additional results, make another call with the returned token value.
    public var maxResults: Swift.Int?
    /// The token for the next page of results.
    public var nextToken: Swift.String?
    /// The ID of the Savings Plan.
    /// This member is required.
    public var savingsPlanId: Swift.String?

    public init(
        filters: [SavingsplansClientTypes.SavingsPlanRateFilter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        savingsPlanId: Swift.String? = nil
    )
    {
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.savingsPlanId = savingsPlanId
    }
}

extension DescribeSavingsPlanRatesOutput {

    static func httpOutput(from httpResponse: ClientRuntime.HttpResponse) async throws -> DescribeSavingsPlanRatesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeSavingsPlanRatesOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.savingsPlanId = try reader["savingsPlanId"].readIfPresent()
        value.searchResults = try reader["searchResults"].readListIfPresent(memberReadingClosure: SavingsplansClientTypes.SavingsPlanRate.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

public struct DescribeSavingsPlanRatesOutput {
    /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
    public var nextToken: Swift.String?
    /// The ID of the Savings Plan.
    public var savingsPlanId: Swift.String?
    /// Information about the Savings Plan rates.
    public var searchResults: [SavingsplansClientTypes.SavingsPlanRate]?

    public init(
        nextToken: Swift.String? = nil,
        savingsPlanId: Swift.String? = nil,
        searchResults: [SavingsplansClientTypes.SavingsPlanRate]? = nil
    )
    {
        self.nextToken = nextToken
        self.savingsPlanId = savingsPlanId
        self.searchResults = searchResults
    }
}

enum DescribeSavingsPlanRatesOutputError {

    static func httpError(from httpResponse: ClientRuntime.HttpResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension DescribeSavingsPlansInput {

    static func urlPathProvider(_ value: DescribeSavingsPlansInput) -> Swift.String? {
        return "/DescribeSavingsPlans"
    }
}

extension DescribeSavingsPlansInput {

    static func write(value: DescribeSavingsPlansInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["filters"].writeList(value.filters, memberWritingClosure: SavingsplansClientTypes.SavingsPlanFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["savingsPlanArns"].writeList(value.savingsPlanArns, memberWritingClosure: Swift.String.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["savingsPlanIds"].writeList(value.savingsPlanIds, memberWritingClosure: Swift.String.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["states"].writeList(value.states, memberWritingClosure: SavingsplansClientTypes.SavingsPlanState.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

public struct DescribeSavingsPlansInput {
    /// The filters.
    public var filters: [SavingsplansClientTypes.SavingsPlanFilter]?
    /// The maximum number of results to return with a single call. To retrieve additional results, make another call with the returned token value.
    public var maxResults: Swift.Int?
    /// The token for the next page of results.
    public var nextToken: Swift.String?
    /// The Amazon Resource Names (ARN) of the Savings Plans.
    public var savingsPlanArns: [Swift.String]?
    /// The IDs of the Savings Plans.
    public var savingsPlanIds: [Swift.String]?
    /// The current states of the Savings Plans.
    public var states: [SavingsplansClientTypes.SavingsPlanState]?

    public init(
        filters: [SavingsplansClientTypes.SavingsPlanFilter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        savingsPlanArns: [Swift.String]? = nil,
        savingsPlanIds: [Swift.String]? = nil,
        states: [SavingsplansClientTypes.SavingsPlanState]? = nil
    )
    {
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.savingsPlanArns = savingsPlanArns
        self.savingsPlanIds = savingsPlanIds
        self.states = states
    }
}

extension DescribeSavingsPlansOfferingRatesInput {

    static func urlPathProvider(_ value: DescribeSavingsPlansOfferingRatesInput) -> Swift.String? {
        return "/DescribeSavingsPlansOfferingRates"
    }
}

extension DescribeSavingsPlansOfferingRatesInput {

    static func write(value: DescribeSavingsPlansOfferingRatesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["filters"].writeList(value.filters, memberWritingClosure: SavingsplansClientTypes.SavingsPlanOfferingRateFilterElement.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["operations"].writeList(value.operations, memberWritingClosure: Swift.String.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["products"].writeList(value.products, memberWritingClosure: SavingsplansClientTypes.SavingsPlanProductType.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["savingsPlanOfferingIds"].writeList(value.savingsPlanOfferingIds, memberWritingClosure: Swift.String.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["savingsPlanPaymentOptions"].writeList(value.savingsPlanPaymentOptions, memberWritingClosure: SavingsplansClientTypes.SavingsPlanPaymentOption.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["savingsPlanTypes"].writeList(value.savingsPlanTypes, memberWritingClosure: SavingsplansClientTypes.SavingsPlanType.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["serviceCodes"].writeList(value.serviceCodes, memberWritingClosure: SavingsplansClientTypes.SavingsPlanRateServiceCode.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["usageTypes"].writeList(value.usageTypes, memberWritingClosure: Swift.String.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

public struct DescribeSavingsPlansOfferingRatesInput {
    /// The filters.
    public var filters: [SavingsplansClientTypes.SavingsPlanOfferingRateFilterElement]?
    /// The maximum number of results to return with a single call. To retrieve additional results, make another call with the returned token value.
    public var maxResults: Swift.Int?
    /// The token for the next page of results.
    public var nextToken: Swift.String?
    /// The specific Amazon Web Services operation for the line item in the billing report.
    public var operations: [Swift.String]?
    /// The Amazon Web Services products.
    public var products: [SavingsplansClientTypes.SavingsPlanProductType]?
    /// The IDs of the offerings.
    public var savingsPlanOfferingIds: [Swift.String]?
    /// The payment options.
    public var savingsPlanPaymentOptions: [SavingsplansClientTypes.SavingsPlanPaymentOption]?
    /// The plan types.
    public var savingsPlanTypes: [SavingsplansClientTypes.SavingsPlanType]?
    /// The services.
    public var serviceCodes: [SavingsplansClientTypes.SavingsPlanRateServiceCode]?
    /// The usage details of the line item in the billing report.
    public var usageTypes: [Swift.String]?

    public init(
        filters: [SavingsplansClientTypes.SavingsPlanOfferingRateFilterElement]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        operations: [Swift.String]? = nil,
        products: [SavingsplansClientTypes.SavingsPlanProductType]? = nil,
        savingsPlanOfferingIds: [Swift.String]? = nil,
        savingsPlanPaymentOptions: [SavingsplansClientTypes.SavingsPlanPaymentOption]? = nil,
        savingsPlanTypes: [SavingsplansClientTypes.SavingsPlanType]? = nil,
        serviceCodes: [SavingsplansClientTypes.SavingsPlanRateServiceCode]? = nil,
        usageTypes: [Swift.String]? = nil
    )
    {
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.operations = operations
        self.products = products
        self.savingsPlanOfferingIds = savingsPlanOfferingIds
        self.savingsPlanPaymentOptions = savingsPlanPaymentOptions
        self.savingsPlanTypes = savingsPlanTypes
        self.serviceCodes = serviceCodes
        self.usageTypes = usageTypes
    }
}

extension DescribeSavingsPlansOfferingRatesOutput {

    static func httpOutput(from httpResponse: ClientRuntime.HttpResponse) async throws -> DescribeSavingsPlansOfferingRatesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeSavingsPlansOfferingRatesOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.searchResults = try reader["searchResults"].readListIfPresent(memberReadingClosure: SavingsplansClientTypes.SavingsPlanOfferingRate.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

public struct DescribeSavingsPlansOfferingRatesOutput {
    /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
    public var nextToken: Swift.String?
    /// Information about the Savings Plans offering rates.
    public var searchResults: [SavingsplansClientTypes.SavingsPlanOfferingRate]?

    public init(
        nextToken: Swift.String? = nil,
        searchResults: [SavingsplansClientTypes.SavingsPlanOfferingRate]? = nil
    )
    {
        self.nextToken = nextToken
        self.searchResults = searchResults
    }
}

enum DescribeSavingsPlansOfferingRatesOutputError {

    static func httpError(from httpResponse: ClientRuntime.HttpResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension DescribeSavingsPlansOfferingsInput {

    static func urlPathProvider(_ value: DescribeSavingsPlansOfferingsInput) -> Swift.String? {
        return "/DescribeSavingsPlansOfferings"
    }
}

extension DescribeSavingsPlansOfferingsInput {

    static func write(value: DescribeSavingsPlansOfferingsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["currencies"].writeList(value.currencies, memberWritingClosure: SavingsplansClientTypes.CurrencyCode.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["descriptions"].writeList(value.descriptions, memberWritingClosure: Swift.String.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["durations"].writeList(value.durations, memberWritingClosure: Swift.Int.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["filters"].writeList(value.filters, memberWritingClosure: SavingsplansClientTypes.SavingsPlanOfferingFilterElement.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["offeringIds"].writeList(value.offeringIds, memberWritingClosure: Swift.String.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["operations"].writeList(value.operations, memberWritingClosure: Swift.String.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["paymentOptions"].writeList(value.paymentOptions, memberWritingClosure: SavingsplansClientTypes.SavingsPlanPaymentOption.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["planTypes"].writeList(value.planTypes, memberWritingClosure: SavingsplansClientTypes.SavingsPlanType.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["productType"].write(value.productType)
        try writer["serviceCodes"].writeList(value.serviceCodes, memberWritingClosure: Swift.String.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["usageTypes"].writeList(value.usageTypes, memberWritingClosure: Swift.String.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

public struct DescribeSavingsPlansOfferingsInput {
    /// The currencies.
    public var currencies: [SavingsplansClientTypes.CurrencyCode]?
    /// The descriptions.
    public var descriptions: [Swift.String]?
    /// The duration, in seconds.
    public var durations: [Swift.Int]?
    /// The filters.
    public var filters: [SavingsplansClientTypes.SavingsPlanOfferingFilterElement]?
    /// The maximum number of results to return with a single call. To retrieve additional results, make another call with the returned token value.
    public var maxResults: Swift.Int?
    /// The token for the next page of results.
    public var nextToken: Swift.String?
    /// The IDs of the offerings.
    public var offeringIds: [Swift.String]?
    /// The specific Amazon Web Services operation for the line item in the billing report.
    public var operations: [Swift.String]?
    /// The payment options.
    public var paymentOptions: [SavingsplansClientTypes.SavingsPlanPaymentOption]?
    /// The plan types.
    public var planTypes: [SavingsplansClientTypes.SavingsPlanType]?
    /// The product type.
    public var productType: SavingsplansClientTypes.SavingsPlanProductType?
    /// The services.
    public var serviceCodes: [Swift.String]?
    /// The usage details of the line item in the billing report.
    public var usageTypes: [Swift.String]?

    public init(
        currencies: [SavingsplansClientTypes.CurrencyCode]? = nil,
        descriptions: [Swift.String]? = nil,
        durations: [Swift.Int]? = nil,
        filters: [SavingsplansClientTypes.SavingsPlanOfferingFilterElement]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        offeringIds: [Swift.String]? = nil,
        operations: [Swift.String]? = nil,
        paymentOptions: [SavingsplansClientTypes.SavingsPlanPaymentOption]? = nil,
        planTypes: [SavingsplansClientTypes.SavingsPlanType]? = nil,
        productType: SavingsplansClientTypes.SavingsPlanProductType? = nil,
        serviceCodes: [Swift.String]? = nil,
        usageTypes: [Swift.String]? = nil
    )
    {
        self.currencies = currencies
        self.descriptions = descriptions
        self.durations = durations
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.offeringIds = offeringIds
        self.operations = operations
        self.paymentOptions = paymentOptions
        self.planTypes = planTypes
        self.productType = productType
        self.serviceCodes = serviceCodes
        self.usageTypes = usageTypes
    }
}

extension DescribeSavingsPlansOfferingsOutput {

    static func httpOutput(from httpResponse: ClientRuntime.HttpResponse) async throws -> DescribeSavingsPlansOfferingsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeSavingsPlansOfferingsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.searchResults = try reader["searchResults"].readListIfPresent(memberReadingClosure: SavingsplansClientTypes.SavingsPlanOffering.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

public struct DescribeSavingsPlansOfferingsOutput {
    /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
    public var nextToken: Swift.String?
    /// Information about the Savings Plans offerings.
    public var searchResults: [SavingsplansClientTypes.SavingsPlanOffering]?

    public init(
        nextToken: Swift.String? = nil,
        searchResults: [SavingsplansClientTypes.SavingsPlanOffering]? = nil
    )
    {
        self.nextToken = nextToken
        self.searchResults = searchResults
    }
}

enum DescribeSavingsPlansOfferingsOutputError {

    static func httpError(from httpResponse: ClientRuntime.HttpResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension DescribeSavingsPlansOutput {

    static func httpOutput(from httpResponse: ClientRuntime.HttpResponse) async throws -> DescribeSavingsPlansOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeSavingsPlansOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.savingsPlans = try reader["savingsPlans"].readListIfPresent(memberReadingClosure: SavingsplansClientTypes.SavingsPlan.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

public struct DescribeSavingsPlansOutput {
    /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
    public var nextToken: Swift.String?
    /// Information about the Savings Plans.
    public var savingsPlans: [SavingsplansClientTypes.SavingsPlan]?

    public init(
        nextToken: Swift.String? = nil,
        savingsPlans: [SavingsplansClientTypes.SavingsPlan]? = nil
    )
    {
        self.nextToken = nextToken
        self.savingsPlans = savingsPlans
    }
}

enum DescribeSavingsPlansOutputError {

    static func httpError(from httpResponse: ClientRuntime.HttpResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension InternalServerException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalServerException {
        let reader = baseError.errorBodyReader
        var value = InternalServerException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

/// An unexpected error occurred.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        return "/ListTagsForResource"
    }
}

extension ListTagsForResourceInput {

    static func write(value: ListTagsForResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resourceArn"].write(value.resourceArn)
    }
}

public struct ListTagsForResourceInput {
    /// The Amazon Resource Name (ARN) of the resource.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: ClientRuntime.HttpResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: Swift.String.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

public struct ListTagsForResourceOutput {
    /// Information about the tags.
    public var tags: [Swift.String:Swift.String]?

    public init(
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: ClientRuntime.HttpResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension SavingsplansClientTypes.ParentSavingsPlanOffering {

    static func write(value: SavingsplansClientTypes.ParentSavingsPlanOffering?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["currency"].write(value.currency)
        try writer["durationSeconds"].write(value.durationSeconds)
        try writer["offeringId"].write(value.offeringId)
        try writer["paymentOption"].write(value.paymentOption)
        try writer["planDescription"].write(value.planDescription)
        try writer["planType"].write(value.planType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SavingsplansClientTypes.ParentSavingsPlanOffering {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SavingsplansClientTypes.ParentSavingsPlanOffering()
        value.offeringId = try reader["offeringId"].readIfPresent()
        value.paymentOption = try reader["paymentOption"].readIfPresent()
        value.planType = try reader["planType"].readIfPresent()
        value.durationSeconds = try reader["durationSeconds"].readIfPresent() ?? 0
        value.currency = try reader["currency"].readIfPresent()
        value.planDescription = try reader["planDescription"].readIfPresent()
        return value
    }
}

extension SavingsplansClientTypes {
    /// Information about a Savings Plan offering.
    public struct ParentSavingsPlanOffering {
        /// The currency.
        public var currency: SavingsplansClientTypes.CurrencyCode?
        /// The duration, in seconds.
        public var durationSeconds: Swift.Int
        /// The ID of the offering.
        public var offeringId: Swift.String?
        /// The payment option.
        public var paymentOption: SavingsplansClientTypes.SavingsPlanPaymentOption?
        /// The description.
        public var planDescription: Swift.String?
        /// The plan type.
        public var planType: SavingsplansClientTypes.SavingsPlanType?

        public init(
            currency: SavingsplansClientTypes.CurrencyCode? = nil,
            durationSeconds: Swift.Int = 0,
            offeringId: Swift.String? = nil,
            paymentOption: SavingsplansClientTypes.SavingsPlanPaymentOption? = nil,
            planDescription: Swift.String? = nil,
            planType: SavingsplansClientTypes.SavingsPlanType? = nil
        )
        {
            self.currency = currency
            self.durationSeconds = durationSeconds
            self.offeringId = offeringId
            self.paymentOption = paymentOption
            self.planDescription = planDescription
            self.planType = planType
        }
    }

}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

/// The specified resource was not found.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ReturnSavingsPlanInput {

    static func urlPathProvider(_ value: ReturnSavingsPlanInput) -> Swift.String? {
        return "/ReturnSavingsPlan"
    }
}

extension ReturnSavingsPlanInput {

    static func write(value: ReturnSavingsPlanInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
        try writer["savingsPlanId"].write(value.savingsPlanId)
    }
}

public struct ReturnSavingsPlanInput {
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    public var clientToken: Swift.String?
    /// The ID of the Savings Plan.
    /// This member is required.
    public var savingsPlanId: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        savingsPlanId: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.savingsPlanId = savingsPlanId
    }
}

extension ReturnSavingsPlanOutput {

    static func httpOutput(from httpResponse: ClientRuntime.HttpResponse) async throws -> ReturnSavingsPlanOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ReturnSavingsPlanOutput()
        value.savingsPlanId = try reader["savingsPlanId"].readIfPresent()
        return value
    }
}

public struct ReturnSavingsPlanOutput {
    /// The ID of the Savings Plan.
    public var savingsPlanId: Swift.String?

    public init(
        savingsPlanId: Swift.String? = nil
    )
    {
        self.savingsPlanId = savingsPlanId
    }
}

enum ReturnSavingsPlanOutputError {

    static func httpError(from httpResponse: ClientRuntime.HttpResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension SavingsplansClientTypes.SavingsPlan {

    static func write(value: SavingsplansClientTypes.SavingsPlan?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["commitment"].write(value.commitment)
        try writer["currency"].write(value.currency)
        try writer["description"].write(value.description)
        try writer["ec2InstanceFamily"].write(value.ec2InstanceFamily)
        try writer["end"].write(value.end)
        try writer["offeringId"].write(value.offeringId)
        try writer["paymentOption"].write(value.paymentOption)
        try writer["productTypes"].writeList(value.productTypes, memberWritingClosure: SavingsplansClientTypes.SavingsPlanProductType.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["recurringPaymentAmount"].write(value.recurringPaymentAmount)
        try writer["region"].write(value.region)
        try writer["returnableUntil"].write(value.returnableUntil)
        try writer["savingsPlanArn"].write(value.savingsPlanArn)
        try writer["savingsPlanId"].write(value.savingsPlanId)
        try writer["savingsPlanType"].write(value.savingsPlanType)
        try writer["start"].write(value.start)
        try writer["state"].write(value.state)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: Swift.String.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["termDurationInSeconds"].write(value.termDurationInSeconds)
        try writer["upfrontPaymentAmount"].write(value.upfrontPaymentAmount)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SavingsplansClientTypes.SavingsPlan {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SavingsplansClientTypes.SavingsPlan()
        value.offeringId = try reader["offeringId"].readIfPresent()
        value.savingsPlanId = try reader["savingsPlanId"].readIfPresent()
        value.savingsPlanArn = try reader["savingsPlanArn"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.start = try reader["start"].readIfPresent()
        value.end = try reader["end"].readIfPresent()
        value.state = try reader["state"].readIfPresent()
        value.region = try reader["region"].readIfPresent()
        value.ec2InstanceFamily = try reader["ec2InstanceFamily"].readIfPresent()
        value.savingsPlanType = try reader["savingsPlanType"].readIfPresent()
        value.paymentOption = try reader["paymentOption"].readIfPresent()
        value.productTypes = try reader["productTypes"].readListIfPresent(memberReadingClosure: SavingsplansClientTypes.SavingsPlanProductType.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.currency = try reader["currency"].readIfPresent()
        value.commitment = try reader["commitment"].readIfPresent()
        value.upfrontPaymentAmount = try reader["upfrontPaymentAmount"].readIfPresent()
        value.recurringPaymentAmount = try reader["recurringPaymentAmount"].readIfPresent()
        value.termDurationInSeconds = try reader["termDurationInSeconds"].readIfPresent() ?? 0
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: Swift.String.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.returnableUntil = try reader["returnableUntil"].readIfPresent()
        return value
    }
}

extension SavingsplansClientTypes {
    /// Information about a Savings Plan.
    public struct SavingsPlan {
        /// The hourly commitment amount in the specified currency.
        public var commitment: Swift.String?
        /// The currency.
        public var currency: SavingsplansClientTypes.CurrencyCode?
        /// The description.
        public var description: Swift.String?
        /// The EC2 instance family.
        public var ec2InstanceFamily: Swift.String?
        /// The end time.
        public var end: Swift.String?
        /// The ID of the offering.
        public var offeringId: Swift.String?
        /// The payment option.
        public var paymentOption: SavingsplansClientTypes.SavingsPlanPaymentOption?
        /// The product types.
        public var productTypes: [SavingsplansClientTypes.SavingsPlanProductType]?
        /// The recurring payment amount.
        public var recurringPaymentAmount: Swift.String?
        /// The Amazon Web Services Region.
        public var region: Swift.String?
        /// The time until when a return for the Savings Plan can be requested. If the Savings Plan is not returnable, the field reflects the Savings Plan start time.
        public var returnableUntil: Swift.String?
        /// The Amazon Resource Name (ARN) of the Savings Plan.
        public var savingsPlanArn: Swift.String?
        /// The ID of the Savings Plan.
        public var savingsPlanId: Swift.String?
        /// The plan type.
        public var savingsPlanType: SavingsplansClientTypes.SavingsPlanType?
        /// The start time.
        public var start: Swift.String?
        /// The current state.
        public var state: SavingsplansClientTypes.SavingsPlanState?
        /// One or more tags.
        public var tags: [Swift.String:Swift.String]?
        /// The duration of the term, in seconds.
        public var termDurationInSeconds: Swift.Int
        /// The up-front payment amount.
        public var upfrontPaymentAmount: Swift.String?

        public init(
            commitment: Swift.String? = nil,
            currency: SavingsplansClientTypes.CurrencyCode? = nil,
            description: Swift.String? = nil,
            ec2InstanceFamily: Swift.String? = nil,
            end: Swift.String? = nil,
            offeringId: Swift.String? = nil,
            paymentOption: SavingsplansClientTypes.SavingsPlanPaymentOption? = nil,
            productTypes: [SavingsplansClientTypes.SavingsPlanProductType]? = nil,
            recurringPaymentAmount: Swift.String? = nil,
            region: Swift.String? = nil,
            returnableUntil: Swift.String? = nil,
            savingsPlanArn: Swift.String? = nil,
            savingsPlanId: Swift.String? = nil,
            savingsPlanType: SavingsplansClientTypes.SavingsPlanType? = nil,
            start: Swift.String? = nil,
            state: SavingsplansClientTypes.SavingsPlanState? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            termDurationInSeconds: Swift.Int = 0,
            upfrontPaymentAmount: Swift.String? = nil
        )
        {
            self.commitment = commitment
            self.currency = currency
            self.description = description
            self.ec2InstanceFamily = ec2InstanceFamily
            self.end = end
            self.offeringId = offeringId
            self.paymentOption = paymentOption
            self.productTypes = productTypes
            self.recurringPaymentAmount = recurringPaymentAmount
            self.region = region
            self.returnableUntil = returnableUntil
            self.savingsPlanArn = savingsPlanArn
            self.savingsPlanId = savingsPlanId
            self.savingsPlanType = savingsPlanType
            self.start = start
            self.state = state
            self.tags = tags
            self.termDurationInSeconds = termDurationInSeconds
            self.upfrontPaymentAmount = upfrontPaymentAmount
        }
    }

}

extension SavingsplansClientTypes.SavingsPlanFilter {

    static func write(value: SavingsplansClientTypes.SavingsPlanFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["values"].writeList(value.values, memberWritingClosure: Swift.String.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SavingsplansClientTypes.SavingsPlanFilter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SavingsplansClientTypes.SavingsPlanFilter()
        value.name = try reader["name"].readIfPresent()
        value.values = try reader["values"].readListIfPresent(memberReadingClosure: Swift.String.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SavingsplansClientTypes {
    /// Information about a Savings Plan filter.
    public struct SavingsPlanFilter {
        /// The filter name.
        public var name: SavingsplansClientTypes.SavingsPlansFilterName?
        /// The filter value.
        public var values: [Swift.String]?

        public init(
            name: SavingsplansClientTypes.SavingsPlansFilterName? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

extension SavingsplansClientTypes.SavingsPlanOffering {

    static func write(value: SavingsplansClientTypes.SavingsPlanOffering?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["currency"].write(value.currency)
        try writer["description"].write(value.description)
        try writer["durationSeconds"].write(value.durationSeconds)
        try writer["offeringId"].write(value.offeringId)
        try writer["operation"].write(value.operation)
        try writer["paymentOption"].write(value.paymentOption)
        try writer["planType"].write(value.planType)
        try writer["productTypes"].writeList(value.productTypes, memberWritingClosure: SavingsplansClientTypes.SavingsPlanProductType.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["properties"].writeList(value.properties, memberWritingClosure: SavingsplansClientTypes.SavingsPlanOfferingProperty.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["serviceCode"].write(value.serviceCode)
        try writer["usageType"].write(value.usageType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SavingsplansClientTypes.SavingsPlanOffering {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SavingsplansClientTypes.SavingsPlanOffering()
        value.offeringId = try reader["offeringId"].readIfPresent()
        value.productTypes = try reader["productTypes"].readListIfPresent(memberReadingClosure: SavingsplansClientTypes.SavingsPlanProductType.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.planType = try reader["planType"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.paymentOption = try reader["paymentOption"].readIfPresent()
        value.durationSeconds = try reader["durationSeconds"].readIfPresent() ?? 0
        value.currency = try reader["currency"].readIfPresent()
        value.serviceCode = try reader["serviceCode"].readIfPresent()
        value.usageType = try reader["usageType"].readIfPresent()
        value.operation = try reader["operation"].readIfPresent()
        value.properties = try reader["properties"].readListIfPresent(memberReadingClosure: SavingsplansClientTypes.SavingsPlanOfferingProperty.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SavingsplansClientTypes {
    /// Information about a Savings Plan offering.
    public struct SavingsPlanOffering {
        /// The currency.
        public var currency: SavingsplansClientTypes.CurrencyCode?
        /// The description.
        public var description: Swift.String?
        /// The duration, in seconds.
        public var durationSeconds: Swift.Int
        /// The ID of the offering.
        public var offeringId: Swift.String?
        /// The specific Amazon Web Services operation for the line item in the billing report.
        public var operation: Swift.String?
        /// The payment option.
        public var paymentOption: SavingsplansClientTypes.SavingsPlanPaymentOption?
        /// The plan type.
        public var planType: SavingsplansClientTypes.SavingsPlanType?
        /// The product type.
        public var productTypes: [SavingsplansClientTypes.SavingsPlanProductType]?
        /// The properties.
        public var properties: [SavingsplansClientTypes.SavingsPlanOfferingProperty]?
        /// The service.
        public var serviceCode: Swift.String?
        /// The usage details of the line item in the billing report.
        public var usageType: Swift.String?

        public init(
            currency: SavingsplansClientTypes.CurrencyCode? = nil,
            description: Swift.String? = nil,
            durationSeconds: Swift.Int = 0,
            offeringId: Swift.String? = nil,
            operation: Swift.String? = nil,
            paymentOption: SavingsplansClientTypes.SavingsPlanPaymentOption? = nil,
            planType: SavingsplansClientTypes.SavingsPlanType? = nil,
            productTypes: [SavingsplansClientTypes.SavingsPlanProductType]? = nil,
            properties: [SavingsplansClientTypes.SavingsPlanOfferingProperty]? = nil,
            serviceCode: Swift.String? = nil,
            usageType: Swift.String? = nil
        )
        {
            self.currency = currency
            self.description = description
            self.durationSeconds = durationSeconds
            self.offeringId = offeringId
            self.operation = operation
            self.paymentOption = paymentOption
            self.planType = planType
            self.productTypes = productTypes
            self.properties = properties
            self.serviceCode = serviceCode
            self.usageType = usageType
        }
    }

}

extension SavingsplansClientTypes {

    public enum SavingsPlanOfferingFilterAttribute: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case instancefamily
        case region
        case sdkUnknown(Swift.String)

        public static var allCases: [SavingsPlanOfferingFilterAttribute] {
            return [
                .instancefamily,
                .region,
                .sdkUnknown("")
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .instancefamily: return "instanceFamily"
            case .region: return "region"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SavingsplansClientTypes.SavingsPlanOfferingFilterElement {

    static func write(value: SavingsplansClientTypes.SavingsPlanOfferingFilterElement?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["values"].writeList(value.values, memberWritingClosure: Swift.String.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SavingsplansClientTypes.SavingsPlanOfferingFilterElement {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SavingsplansClientTypes.SavingsPlanOfferingFilterElement()
        value.name = try reader["name"].readIfPresent()
        value.values = try reader["values"].readListIfPresent(memberReadingClosure: Swift.String.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SavingsplansClientTypes {
    /// Information about a Savings Plan offering filter.
    public struct SavingsPlanOfferingFilterElement {
        /// The filter name.
        public var name: SavingsplansClientTypes.SavingsPlanOfferingFilterAttribute?
        /// The filter values.
        public var values: [Swift.String]?

        public init(
            name: SavingsplansClientTypes.SavingsPlanOfferingFilterAttribute? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

extension SavingsplansClientTypes.SavingsPlanOfferingProperty {

    static func write(value: SavingsplansClientTypes.SavingsPlanOfferingProperty?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SavingsplansClientTypes.SavingsPlanOfferingProperty {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SavingsplansClientTypes.SavingsPlanOfferingProperty()
        value.name = try reader["name"].readIfPresent()
        value.value = try reader["value"].readIfPresent()
        return value
    }
}

extension SavingsplansClientTypes {
    /// Information about a Savings Plan offering property.
    public struct SavingsPlanOfferingProperty {
        /// The property name.
        public var name: SavingsplansClientTypes.SavingsPlanOfferingPropertyKey?
        /// The property value.
        public var value: Swift.String?

        public init(
            name: SavingsplansClientTypes.SavingsPlanOfferingPropertyKey? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension SavingsplansClientTypes {

    public enum SavingsPlanOfferingPropertyKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case instanceFamily
        case region
        case sdkUnknown(Swift.String)

        public static var allCases: [SavingsPlanOfferingPropertyKey] {
            return [
                .instanceFamily,
                .region,
                .sdkUnknown("")
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .instanceFamily: return "instanceFamily"
            case .region: return "region"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SavingsplansClientTypes.SavingsPlanOfferingRate {

    static func write(value: SavingsplansClientTypes.SavingsPlanOfferingRate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["operation"].write(value.operation)
        try writer["productType"].write(value.productType)
        try writer["properties"].writeList(value.properties, memberWritingClosure: SavingsplansClientTypes.SavingsPlanOfferingRateProperty.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["rate"].write(value.rate)
        try writer["savingsPlanOffering"].write(value.savingsPlanOffering, with: SavingsplansClientTypes.ParentSavingsPlanOffering.write(value:to:))
        try writer["serviceCode"].write(value.serviceCode)
        try writer["unit"].write(value.unit)
        try writer["usageType"].write(value.usageType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SavingsplansClientTypes.SavingsPlanOfferingRate {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SavingsplansClientTypes.SavingsPlanOfferingRate()
        value.savingsPlanOffering = try reader["savingsPlanOffering"].readIfPresent(with: SavingsplansClientTypes.ParentSavingsPlanOffering.read(from:))
        value.rate = try reader["rate"].readIfPresent()
        value.unit = try reader["unit"].readIfPresent()
        value.productType = try reader["productType"].readIfPresent()
        value.serviceCode = try reader["serviceCode"].readIfPresent()
        value.usageType = try reader["usageType"].readIfPresent()
        value.operation = try reader["operation"].readIfPresent()
        value.properties = try reader["properties"].readListIfPresent(memberReadingClosure: SavingsplansClientTypes.SavingsPlanOfferingRateProperty.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SavingsplansClientTypes {
    /// Information about a Savings Plan offering rate.
    public struct SavingsPlanOfferingRate {
        /// The specific Amazon Web Services operation for the line item in the billing report.
        public var operation: Swift.String?
        /// The product type.
        public var productType: SavingsplansClientTypes.SavingsPlanProductType?
        /// The properties.
        public var properties: [SavingsplansClientTypes.SavingsPlanOfferingRateProperty]?
        /// The Savings Plan rate.
        public var rate: Swift.String?
        /// The Savings Plan offering.
        public var savingsPlanOffering: SavingsplansClientTypes.ParentSavingsPlanOffering?
        /// The service.
        public var serviceCode: SavingsplansClientTypes.SavingsPlanRateServiceCode?
        /// The unit.
        public var unit: SavingsplansClientTypes.SavingsPlanRateUnit?
        /// The usage details of the line item in the billing report.
        public var usageType: Swift.String?

        public init(
            operation: Swift.String? = nil,
            productType: SavingsplansClientTypes.SavingsPlanProductType? = nil,
            properties: [SavingsplansClientTypes.SavingsPlanOfferingRateProperty]? = nil,
            rate: Swift.String? = nil,
            savingsPlanOffering: SavingsplansClientTypes.ParentSavingsPlanOffering? = nil,
            serviceCode: SavingsplansClientTypes.SavingsPlanRateServiceCode? = nil,
            unit: SavingsplansClientTypes.SavingsPlanRateUnit? = nil,
            usageType: Swift.String? = nil
        )
        {
            self.operation = operation
            self.productType = productType
            self.properties = properties
            self.rate = rate
            self.savingsPlanOffering = savingsPlanOffering
            self.serviceCode = serviceCode
            self.unit = unit
            self.usageType = usageType
        }
    }

}

extension SavingsplansClientTypes.SavingsPlanOfferingRateFilterElement {

    static func write(value: SavingsplansClientTypes.SavingsPlanOfferingRateFilterElement?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["values"].writeList(value.values, memberWritingClosure: Swift.String.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SavingsplansClientTypes.SavingsPlanOfferingRateFilterElement {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SavingsplansClientTypes.SavingsPlanOfferingRateFilterElement()
        value.name = try reader["name"].readIfPresent()
        value.values = try reader["values"].readListIfPresent(memberReadingClosure: Swift.String.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SavingsplansClientTypes {
    /// Information about a Savings Plan offering rate filter.
    public struct SavingsPlanOfferingRateFilterElement {
        /// The filter name.
        public var name: SavingsplansClientTypes.SavingsPlanRateFilterAttribute?
        /// The filter values.
        public var values: [Swift.String]?

        public init(
            name: SavingsplansClientTypes.SavingsPlanRateFilterAttribute? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

extension SavingsplansClientTypes.SavingsPlanOfferingRateProperty {

    static func write(value: SavingsplansClientTypes.SavingsPlanOfferingRateProperty?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SavingsplansClientTypes.SavingsPlanOfferingRateProperty {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SavingsplansClientTypes.SavingsPlanOfferingRateProperty()
        value.name = try reader["name"].readIfPresent()
        value.value = try reader["value"].readIfPresent()
        return value
    }
}

extension SavingsplansClientTypes {
    /// Information about a Savings Plan offering rate property.
    public struct SavingsPlanOfferingRateProperty {
        /// The property name.
        public var name: Swift.String?
        /// The property value.
        public var value: Swift.String?

        public init(
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension SavingsplansClientTypes {

    public enum SavingsPlanPaymentOption: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case allUpfront
        case noUpfront
        case partialUpfront
        case sdkUnknown(Swift.String)

        public static var allCases: [SavingsPlanPaymentOption] {
            return [
                .allUpfront,
                .noUpfront,
                .partialUpfront,
                .sdkUnknown("")
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .allUpfront: return "All Upfront"
            case .noUpfront: return "No Upfront"
            case .partialUpfront: return "Partial Upfront"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SavingsplansClientTypes {

    public enum SavingsPlanProductType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ec2
        case fargate
        case lambda
        case sagemaker
        case sdkUnknown(Swift.String)

        public static var allCases: [SavingsPlanProductType] {
            return [
                .ec2,
                .fargate,
                .lambda,
                .sagemaker,
                .sdkUnknown("")
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ec2: return "EC2"
            case .fargate: return "Fargate"
            case .lambda: return "Lambda"
            case .sagemaker: return "SageMaker"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SavingsplansClientTypes.SavingsPlanRate {

    static func write(value: SavingsplansClientTypes.SavingsPlanRate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["currency"].write(value.currency)
        try writer["operation"].write(value.operation)
        try writer["productType"].write(value.productType)
        try writer["properties"].writeList(value.properties, memberWritingClosure: SavingsplansClientTypes.SavingsPlanRateProperty.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["rate"].write(value.rate)
        try writer["serviceCode"].write(value.serviceCode)
        try writer["unit"].write(value.unit)
        try writer["usageType"].write(value.usageType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SavingsplansClientTypes.SavingsPlanRate {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SavingsplansClientTypes.SavingsPlanRate()
        value.rate = try reader["rate"].readIfPresent()
        value.currency = try reader["currency"].readIfPresent()
        value.unit = try reader["unit"].readIfPresent()
        value.productType = try reader["productType"].readIfPresent()
        value.serviceCode = try reader["serviceCode"].readIfPresent()
        value.usageType = try reader["usageType"].readIfPresent()
        value.operation = try reader["operation"].readIfPresent()
        value.properties = try reader["properties"].readListIfPresent(memberReadingClosure: SavingsplansClientTypes.SavingsPlanRateProperty.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SavingsplansClientTypes {
    /// Information about a Savings Plan rate.
    public struct SavingsPlanRate {
        /// The currency.
        public var currency: SavingsplansClientTypes.CurrencyCode?
        /// The specific Amazon Web Services operation for the line item in the billing report.
        public var operation: Swift.String?
        /// The product type.
        public var productType: SavingsplansClientTypes.SavingsPlanProductType?
        /// The properties.
        public var properties: [SavingsplansClientTypes.SavingsPlanRateProperty]?
        /// The rate.
        public var rate: Swift.String?
        /// The service.
        public var serviceCode: SavingsplansClientTypes.SavingsPlanRateServiceCode?
        /// The unit.
        public var unit: SavingsplansClientTypes.SavingsPlanRateUnit?
        /// The usage details of the line item in the billing report.
        public var usageType: Swift.String?

        public init(
            currency: SavingsplansClientTypes.CurrencyCode? = nil,
            operation: Swift.String? = nil,
            productType: SavingsplansClientTypes.SavingsPlanProductType? = nil,
            properties: [SavingsplansClientTypes.SavingsPlanRateProperty]? = nil,
            rate: Swift.String? = nil,
            serviceCode: SavingsplansClientTypes.SavingsPlanRateServiceCode? = nil,
            unit: SavingsplansClientTypes.SavingsPlanRateUnit? = nil,
            usageType: Swift.String? = nil
        )
        {
            self.currency = currency
            self.operation = operation
            self.productType = productType
            self.properties = properties
            self.rate = rate
            self.serviceCode = serviceCode
            self.unit = unit
            self.usageType = usageType
        }
    }

}

extension SavingsplansClientTypes.SavingsPlanRateFilter {

    static func write(value: SavingsplansClientTypes.SavingsPlanRateFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["values"].writeList(value.values, memberWritingClosure: Swift.String.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SavingsplansClientTypes.SavingsPlanRateFilter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SavingsplansClientTypes.SavingsPlanRateFilter()
        value.name = try reader["name"].readIfPresent()
        value.values = try reader["values"].readListIfPresent(memberReadingClosure: Swift.String.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SavingsplansClientTypes {
    /// Information about a Savings Plan rate filter.
    public struct SavingsPlanRateFilter {
        /// The filter name.
        public var name: SavingsplansClientTypes.SavingsPlanRateFilterName?
        /// The filter values.
        public var values: [Swift.String]?

        public init(
            name: SavingsplansClientTypes.SavingsPlanRateFilterName? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

extension SavingsplansClientTypes {

    public enum SavingsPlanRateFilterAttribute: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case instanceFamily
        case instanceType
        case productDescription
        case productId
        case region
        case tenancy
        case sdkUnknown(Swift.String)

        public static var allCases: [SavingsPlanRateFilterAttribute] {
            return [
                .instanceFamily,
                .instanceType,
                .productDescription,
                .productId,
                .region,
                .tenancy,
                .sdkUnknown("")
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .instanceFamily: return "instanceFamily"
            case .instanceType: return "instanceType"
            case .productDescription: return "productDescription"
            case .productId: return "productId"
            case .region: return "region"
            case .tenancy: return "tenancy"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SavingsplansClientTypes {

    public enum SavingsPlanRateFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case instanceType
        case operation
        case productDescription
        case productType
        case region
        case serviceCode
        case tenancy
        case usageType
        case sdkUnknown(Swift.String)

        public static var allCases: [SavingsPlanRateFilterName] {
            return [
                .instanceType,
                .operation,
                .productDescription,
                .productType,
                .region,
                .serviceCode,
                .tenancy,
                .usageType,
                .sdkUnknown("")
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .instanceType: return "instanceType"
            case .operation: return "operation"
            case .productDescription: return "productDescription"
            case .productType: return "productType"
            case .region: return "region"
            case .serviceCode: return "serviceCode"
            case .tenancy: return "tenancy"
            case .usageType: return "usageType"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SavingsplansClientTypes.SavingsPlanRateProperty {

    static func write(value: SavingsplansClientTypes.SavingsPlanRateProperty?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SavingsplansClientTypes.SavingsPlanRateProperty {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SavingsplansClientTypes.SavingsPlanRateProperty()
        value.name = try reader["name"].readIfPresent()
        value.value = try reader["value"].readIfPresent()
        return value
    }
}

extension SavingsplansClientTypes {
    /// Information about a Savings Plan rate property.
    public struct SavingsPlanRateProperty {
        /// The property name.
        public var name: SavingsplansClientTypes.SavingsPlanRatePropertyKey?
        /// The property value.
        public var value: Swift.String?

        public init(
            name: SavingsplansClientTypes.SavingsPlanRatePropertyKey? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension SavingsplansClientTypes {

    public enum SavingsPlanRatePropertyKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case instanceFamily
        case instanceType
        case productDescription
        case region
        case tenancy
        case sdkUnknown(Swift.String)

        public static var allCases: [SavingsPlanRatePropertyKey] {
            return [
                .instanceFamily,
                .instanceType,
                .productDescription,
                .region,
                .tenancy,
                .sdkUnknown("")
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .instanceFamily: return "instanceFamily"
            case .instanceType: return "instanceType"
            case .productDescription: return "productDescription"
            case .region: return "region"
            case .tenancy: return "tenancy"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SavingsplansClientTypes {

    public enum SavingsPlanRateServiceCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ec2
        case fargate
        case fargateEks
        case lambda
        case sagemaker
        case sdkUnknown(Swift.String)

        public static var allCases: [SavingsPlanRateServiceCode] {
            return [
                .ec2,
                .fargate,
                .fargateEks,
                .lambda,
                .sagemaker,
                .sdkUnknown("")
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ec2: return "AmazonEC2"
            case .fargate: return "AmazonECS"
            case .fargateEks: return "AmazonEKS"
            case .lambda: return "AWSLambda"
            case .sagemaker: return "AmazonSageMaker"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SavingsplansClientTypes {

    public enum SavingsPlanRateUnit: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case hours
        case lambdaGbSecond
        case request
        case sdkUnknown(Swift.String)

        public static var allCases: [SavingsPlanRateUnit] {
            return [
                .hours,
                .lambdaGbSecond,
                .request,
                .sdkUnknown("")
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .hours: return "Hrs"
            case .lambdaGbSecond: return "Lambda-GB-Second"
            case .request: return "Request"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SavingsplansClientTypes {

    public enum SavingsPlanState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case paymentFailed
        case paymentPending
        case pendingReturn
        case queued
        case queuedDeleted
        case retired
        case returned
        case sdkUnknown(Swift.String)

        public static var allCases: [SavingsPlanState] {
            return [
                .active,
                .paymentFailed,
                .paymentPending,
                .pendingReturn,
                .queued,
                .queuedDeleted,
                .retired,
                .returned,
                .sdkUnknown("")
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "active"
            case .paymentFailed: return "payment-failed"
            case .paymentPending: return "payment-pending"
            case .pendingReturn: return "pending-return"
            case .queued: return "queued"
            case .queuedDeleted: return "queued-deleted"
            case .retired: return "retired"
            case .returned: return "returned"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SavingsplansClientTypes {

    public enum SavingsPlanType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case compute
        case ec2Instance
        case sagemaker
        case sdkUnknown(Swift.String)

        public static var allCases: [SavingsPlanType] {
            return [
                .compute,
                .ec2Instance,
                .sagemaker,
                .sdkUnknown("")
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .compute: return "Compute"
            case .ec2Instance: return "EC2Instance"
            case .sagemaker: return "SageMaker"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SavingsplansClientTypes {

    public enum SavingsPlansFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case commitment
        case ec2InstanceFamily
        case end
        case paymentOption
        case region
        case savingsPlanType
        case start
        case term
        case upfront
        case sdkUnknown(Swift.String)

        public static var allCases: [SavingsPlansFilterName] {
            return [
                .commitment,
                .ec2InstanceFamily,
                .end,
                .paymentOption,
                .region,
                .savingsPlanType,
                .start,
                .term,
                .upfront,
                .sdkUnknown("")
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .commitment: return "commitment"
            case .ec2InstanceFamily: return "ec2-instance-family"
            case .end: return "end"
            case .paymentOption: return "payment-option"
            case .region: return "region"
            case .savingsPlanType: return "savings-plan-type"
            case .start: return "start"
            case .term: return "term"
            case .upfront: return "upfront"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public enum SavingsplansClientTypes {}

extension ServiceQuotaExceededException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ServiceQuotaExceededException {
        let reader = baseError.errorBodyReader
        var value = ServiceQuotaExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

/// A service quota has been exceeded.
public struct ServiceQuotaExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceQuotaExceededException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        return "/TagResource"
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resourceArn"].write(value.resourceArn)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: Swift.String.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

public struct TagResourceInput {
    /// The Amazon Resource Name (ARN) of the resource.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// One or more tags. For example, { "tags": {"key1":"value1", "key2":"value2"} }.
    /// This member is required.
    public var tags: [Swift.String:Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: ClientRuntime.HttpResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

public struct TagResourceOutput {

    public init() { }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: ClientRuntime.HttpResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        return "/UntagResource"
    }
}

extension UntagResourceInput {

    static func write(value: UntagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resourceArn"].write(value.resourceArn)
        try writer["tagKeys"].writeList(value.tagKeys, memberWritingClosure: Swift.String.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

public struct UntagResourceInput {
    /// The Amazon Resource Name (ARN) of the resource.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The tag keys.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: ClientRuntime.HttpResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

public struct UntagResourceOutput {

    public init() { }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: ClientRuntime.HttpResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

/// One of the input parameters is not valid.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}
