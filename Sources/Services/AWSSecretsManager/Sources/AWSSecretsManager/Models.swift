//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
@_spi(SmithyReadWrite) import func SmithyReadWrite.listReadingClosure
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError

public struct TagResourceOutput {

    public init() { }
}

public struct UntagResourceOutput {

    public init() { }
}

extension SecretsManagerClientTypes {
    /// A custom type that specifies a Region and the KmsKeyId for a replica secret.
    public struct ReplicaRegionType {
        /// The ARN, key ID, or alias of the KMS key to encrypt the secret. If you don't include this field, Secrets Manager uses aws/secretsmanager.
        public var kmsKeyId: Swift.String?
        /// A Region code. For a list of Region codes, see [Name and code of Regions](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints).
        public var region: Swift.String?

        public init(
            kmsKeyId: Swift.String? = nil,
            region: Swift.String? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
            self.region = region
        }
    }

}

extension SecretsManagerClientTypes {
    /// The error Secrets Manager encountered while retrieving an individual secret as part of [BatchGetSecretValue].
    public struct APIErrorType {
        /// The error Secrets Manager encountered while retrieving an individual secret as part of [BatchGetSecretValue], for example ResourceNotFoundException,InvalidParameterException, InvalidRequestException, DecryptionFailure, or AccessDeniedException.
        public var errorCode: Swift.String?
        /// A message describing the error.
        public var message: Swift.String?
        /// The ARN or name of the secret.
        public var secretId: Swift.String?

        public init(
            errorCode: Swift.String? = nil,
            message: Swift.String? = nil,
            secretId: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.message = message
            self.secretId = secretId
        }
    }

}

/// Secrets Manager can't decrypt the protected secret text using the provided KMS key.
public struct DecryptionFailure: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DecryptionFailure" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// An error occurred on the server side.
public struct InternalServiceError: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServiceError" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The NextToken value is invalid.
public struct InvalidNextTokenException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidNextTokenException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The parameter name or value is invalid.
public struct InvalidParameterException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidParameterException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// A parameter value is not valid for the current state of the resource. Possible causes:
///
/// * The secret is scheduled for deletion.
///
/// * You tried to enable rotation on a secret that doesn't already have a Lambda function ARN configured and you didn't include such an ARN as a parameter in this call.
///
/// * The secret is managed by another service, and you must use that service to update it. For more information, see [Secrets managed by other Amazon Web Services services](https://docs.aws.amazon.com/secretsmanager/latest/userguide/service-linked-secrets.html).
public struct InvalidRequestException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidRequestException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Secrets Manager can't find the resource that you asked for.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SecretsManagerClientTypes {

    public enum FilterNameStringType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case all
        case description
        case name
        case owningService
        case primaryRegion
        case tagKey
        case tagValue
        case sdkUnknown(Swift.String)

        public static var allCases: [FilterNameStringType] {
            return [
                .all,
                .description,
                .name,
                .owningService,
                .primaryRegion,
                .tagKey,
                .tagValue
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .all: return "all"
            case .description: return "description"
            case .name: return "name"
            case .owningService: return "owning-service"
            case .primaryRegion: return "primary-region"
            case .tagKey: return "tag-key"
            case .tagValue: return "tag-value"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SecretsManagerClientTypes {
    /// Allows you to add filters when you use the search function in Secrets Manager. For more information, see [Find secrets in Secrets Manager](https://docs.aws.amazon.com/secretsmanager/latest/userguide/manage_search-secret.html).
    public struct Filter {
        /// The following are keys you can use:
        ///
        /// * description: Prefix match, not case-sensitive.
        ///
        /// * name: Prefix match, case-sensitive.
        ///
        /// * tag-key: Prefix match, case-sensitive.
        ///
        /// * tag-value: Prefix match, case-sensitive.
        ///
        /// * primary-region: Prefix match, case-sensitive.
        ///
        /// * owning-service: Prefix match, case-sensitive.
        ///
        /// * all: Breaks the filter value string into words and then searches all attributes for matches. Not case-sensitive.
        public var key: SecretsManagerClientTypes.FilterNameStringType?
        /// The keyword to filter for. You can prefix your search value with an exclamation mark (!) in order to perform negation filters.
        public var values: [Swift.String]?

        public init(
            key: SecretsManagerClientTypes.FilterNameStringType? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.key = key
            self.values = values
        }
    }

}

public struct BatchGetSecretValueInput {
    /// The filters to choose which secrets to retrieve. You must include Filters or SecretIdList, but not both.
    public var filters: [SecretsManagerClientTypes.Filter]?
    /// The number of results to include in the response. If there are more results available, in the response, Secrets Manager includes NextToken. To get the next results, call BatchGetSecretValue again with the value from NextToken. To use this parameter, you must also use the Filters parameter.
    public var maxResults: Swift.Int?
    /// A token that indicates where the output should continue from, if a previous call did not show all results. To get the next results, call BatchGetSecretValue again with this value.
    public var nextToken: Swift.String?
    /// The ARN or names of the secrets to retrieve. You must include Filters or SecretIdList, but not both.
    public var secretIdList: [Swift.String]?

    public init(
        filters: [SecretsManagerClientTypes.Filter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        secretIdList: [Swift.String]? = nil
    )
    {
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.secretIdList = secretIdList
    }
}

extension SecretsManagerClientTypes {
    /// A structure that contains the secret value and other details for a secret.
    public struct SecretValueEntry {
        /// The Amazon Resource Name (ARN) of the secret.
        public var arn: Swift.String?
        /// The date the secret was created.
        public var createdDate: Foundation.Date?
        /// The friendly name of the secret.
        public var name: Swift.String?
        /// The decrypted secret value, if the secret value was originally provided as binary data in the form of a byte array. The parameter represents the binary data as a [base64-encoded](https://tools.ietf.org/html/rfc4648#section-4) string.
        public var secretBinary: Foundation.Data?
        /// The decrypted secret value, if the secret value was originally provided as a string or through the Secrets Manager console.
        public var secretString: Swift.String?
        /// The unique version identifier of this version of the secret.
        public var versionId: Swift.String?
        /// A list of all of the staging labels currently attached to this version of the secret.
        public var versionStages: [Swift.String]?

        public init(
            arn: Swift.String? = nil,
            createdDate: Foundation.Date? = nil,
            name: Swift.String? = nil,
            secretBinary: Foundation.Data? = nil,
            secretString: Swift.String? = nil,
            versionId: Swift.String? = nil,
            versionStages: [Swift.String]? = nil
        )
        {
            self.arn = arn
            self.createdDate = createdDate
            self.name = name
            self.secretBinary = secretBinary
            self.secretString = secretString
            self.versionId = versionId
            self.versionStages = versionStages
        }
    }

}

extension SecretsManagerClientTypes.SecretValueEntry: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SecretValueEntry(arn: \(Swift.String(describing: arn)), createdDate: \(Swift.String(describing: createdDate)), name: \(Swift.String(describing: name)), versionId: \(Swift.String(describing: versionId)), versionStages: \(Swift.String(describing: versionStages)), secretBinary: \"CONTENT_REDACTED\", secretString: \"CONTENT_REDACTED\")"}
}

public struct BatchGetSecretValueOutput {
    /// A list of errors Secrets Manager encountered while attempting to retrieve individual secrets.
    public var errors: [SecretsManagerClientTypes.APIErrorType]?
    /// Secrets Manager includes this value if there's more output available than what is included in the current response. This can occur even when the response includes no values at all, such as when you ask for a filtered view of a long list. To get the next results, call BatchGetSecretValue again with this value.
    public var nextToken: Swift.String?
    /// A list of secret values.
    public var secretValues: [SecretsManagerClientTypes.SecretValueEntry]?

    public init(
        errors: [SecretsManagerClientTypes.APIErrorType]? = nil,
        nextToken: Swift.String? = nil,
        secretValues: [SecretsManagerClientTypes.SecretValueEntry]? = nil
    )
    {
        self.errors = errors
        self.nextToken = nextToken
        self.secretValues = secretValues
    }
}

public struct CancelRotateSecretInput {
    /// The ARN or name of the secret. For an ARN, we recommend that you specify a complete ARN rather than a partial ARN. See [Finding a secret from a partial ARN](https://docs.aws.amazon.com/secretsmanager/latest/userguide/troubleshoot.html#ARN_secretnamehyphen).
    /// This member is required.
    public var secretId: Swift.String?

    public init(
        secretId: Swift.String? = nil
    )
    {
        self.secretId = secretId
    }
}

public struct CancelRotateSecretOutput {
    /// The ARN of the secret.
    public var arn: Swift.String?
    /// The name of the secret.
    public var name: Swift.String?
    /// The unique identifier of the version of the secret created during the rotation. This version might not be complete, and should be evaluated for possible deletion. We recommend that you remove the VersionStage value AWSPENDING from this version so that Secrets Manager can delete it. Failing to clean up a cancelled rotation can block you from starting future rotations.
    public var versionId: Swift.String?

    public init(
        arn: Swift.String? = nil,
        name: Swift.String? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.arn = arn
        self.name = name
        self.versionId = versionId
    }
}

/// Secrets Manager can't encrypt the protected secret text using the provided KMS key. Check that the KMS key is available, enabled, and not in an invalid state. For more information, see [Key state: Effect on your KMS key](https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html).
public struct EncryptionFailure: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "EncryptionFailure" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request failed because it would exceed one of the Secrets Manager quotas.
public struct LimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The resource policy has syntax errors.
public struct MalformedPolicyDocumentException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "MalformedPolicyDocumentException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request failed because you did not complete all the prerequisite steps.
public struct PreconditionNotMetException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "PreconditionNotMetException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// A resource with the ID you requested already exists.
public struct ResourceExistsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceExistsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SecretsManagerClientTypes {
    /// A structure that contains information about a tag.
    public struct Tag {
        /// The key identifier, or name, of the tag.
        public var key: Swift.String?
        /// The string value associated with the key of the tag.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

public struct CreateSecretInput {
    /// A list of Regions and KMS keys to replicate secrets.
    public var addReplicaRegions: [SecretsManagerClientTypes.ReplicaRegionType]?
    /// If you include SecretString or SecretBinary, then Secrets Manager creates an initial version for the secret, and this parameter specifies the unique identifier for the new version. If you use the Amazon Web Services CLI or one of the Amazon Web Services SDKs to call this operation, then you can leave this parameter empty. The CLI or SDK generates a random UUID for you and includes it as the value for this parameter in the request. If you generate a raw HTTP request to the Secrets Manager service endpoint, then you must generate a ClientRequestToken and include it in the request. This value helps ensure idempotency. Secrets Manager uses this value to prevent the accidental creation of duplicate versions if there are failures and retries during a rotation. We recommend that you generate a [UUID-type](https://wikipedia.org/wiki/Universally_unique_identifier) value to ensure uniqueness of your versions within the specified secret.
    ///
    /// * If the ClientRequestToken value isn't already associated with a version of the secret then a new version of the secret is created.
    ///
    /// * If a version with this value already exists and the version SecretString and SecretBinary values are the same as those in the request, then the request is ignored.
    ///
    /// * If a version with this value already exists and that version's SecretString and SecretBinary values are different from those in the request, then the request fails because you cannot modify an existing version. Instead, use [PutSecretValue] to create a new version.
    ///
    ///
    /// This value becomes the VersionId of the new version.
    public var clientRequestToken: Swift.String?
    /// The description of the secret.
    public var description: Swift.String?
    /// Specifies whether to overwrite a secret with the same name in the destination Region. By default, secrets aren't overwritten.
    public var forceOverwriteReplicaSecret: Swift.Bool?
    /// The ARN, key ID, or alias of the KMS key that Secrets Manager uses to encrypt the secret value in the secret. An alias is always prefixed by alias/, for example alias/aws/secretsmanager. For more information, see [About aliases](https://docs.aws.amazon.com/kms/latest/developerguide/alias-about.html). To use a KMS key in a different account, use the key ARN or the alias ARN. If you don't specify this value, then Secrets Manager uses the key aws/secretsmanager. If that key doesn't yet exist, then Secrets Manager creates it for you automatically the first time it encrypts the secret value. If the secret is in a different Amazon Web Services account from the credentials calling the API, then you can't use aws/secretsmanager to encrypt the secret, and you must create and use a customer managed KMS key.
    public var kmsKeyId: Swift.String?
    /// The name of the new secret. The secret name can contain ASCII letters, numbers, and the following characters: /_+=.@- Do not end your secret name with a hyphen followed by six characters. If you do so, you risk confusion and unexpected results when searching for a secret by partial ARN. Secrets Manager automatically adds a hyphen and six random characters after the secret name at the end of the ARN.
    /// This member is required.
    public var name: Swift.String?
    /// The binary data to encrypt and store in the new version of the secret. We recommend that you store your binary data in a file and then pass the contents of the file as a parameter. Either SecretString or SecretBinary must have a value, but not both. This parameter is not available in the Secrets Manager console. Sensitive: This field contains sensitive information, so the service does not include it in CloudTrail log entries. If you create your own log entries, you must also avoid logging the information in this field.
    public var secretBinary: Foundation.Data?
    /// The text data to encrypt and store in this new version of the secret. We recommend you use a JSON structure of key/value pairs for your secret value. Either SecretString or SecretBinary must have a value, but not both. If you create a secret by using the Secrets Manager console then Secrets Manager puts the protected secret text in only the SecretString parameter. The Secrets Manager console stores the information as a JSON structure of key/value pairs that a Lambda rotation function can parse. Sensitive: This field contains sensitive information, so the service does not include it in CloudTrail log entries. If you create your own log entries, you must also avoid logging the information in this field.
    public var secretString: Swift.String?
    /// A list of tags to attach to the secret. Each tag is a key and value pair of strings in a JSON text string, for example: [{"Key":"CostCenter","Value":"12345"},{"Key":"environment","Value":"production"}] Secrets Manager tag key names are case sensitive. A tag with the key "ABC" is a different tag from one with key "abc". If you check tags in permissions policies as part of your security strategy, then adding or removing a tag can change permissions. If the completion of this operation would result in you losing your permissions for this secret, then Secrets Manager blocks the operation and returns an Access Denied error. For more information, see [Control access to secrets using tags](https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_examples.html#tag-secrets-abac) and [Limit access to identities with tags that match secrets' tags](https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_examples.html#auth-and-access_tags2). For information about how to format a JSON parameter for the various command line tool environments, see [Using JSON for Parameters](https://docs.aws.amazon.com/cli/latest/userguide/cli-using-param.html#cli-using-param-json). If your command-line tool or SDK requires quotation marks around the parameter, you should use single quotes to avoid confusion with the double quotes required in the JSON text. For tag quotas and naming restrictions, see [Service quotas for Tagging](https://docs.aws.amazon.com/general/latest/gr/arg.html#taged-reference-quotas) in the Amazon Web Services General Reference guide.
    public var tags: [SecretsManagerClientTypes.Tag]?

    public init(
        addReplicaRegions: [SecretsManagerClientTypes.ReplicaRegionType]? = nil,
        clientRequestToken: Swift.String? = nil,
        description: Swift.String? = nil,
        forceOverwriteReplicaSecret: Swift.Bool? = false,
        kmsKeyId: Swift.String? = nil,
        name: Swift.String? = nil,
        secretBinary: Foundation.Data? = nil,
        secretString: Swift.String? = nil,
        tags: [SecretsManagerClientTypes.Tag]? = nil
    )
    {
        self.addReplicaRegions = addReplicaRegions
        self.clientRequestToken = clientRequestToken
        self.description = description
        self.forceOverwriteReplicaSecret = forceOverwriteReplicaSecret
        self.kmsKeyId = kmsKeyId
        self.name = name
        self.secretBinary = secretBinary
        self.secretString = secretString
        self.tags = tags
    }
}

extension CreateSecretInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateSecretInput(addReplicaRegions: \(Swift.String(describing: addReplicaRegions)), clientRequestToken: \(Swift.String(describing: clientRequestToken)), description: \(Swift.String(describing: description)), forceOverwriteReplicaSecret: \(Swift.String(describing: forceOverwriteReplicaSecret)), kmsKeyId: \(Swift.String(describing: kmsKeyId)), name: \(Swift.String(describing: name)), tags: \(Swift.String(describing: tags)), secretBinary: \"CONTENT_REDACTED\", secretString: \"CONTENT_REDACTED\")"}
}

extension SecretsManagerClientTypes {

    public enum StatusType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case inprogress
        case insync
        case sdkUnknown(Swift.String)

        public static var allCases: [StatusType] {
            return [
                .failed,
                .inprogress,
                .insync
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "Failed"
            case .inprogress: return "InProgress"
            case .insync: return "InSync"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SecretsManagerClientTypes {
    /// A replication object consisting of a RegionReplicationStatus object and includes a Region, KMSKeyId, status, and status message.
    public struct ReplicationStatusType {
        /// Can be an ARN, Key ID, or Alias.
        public var kmsKeyId: Swift.String?
        /// The date that the secret was last accessed in the Region. This field is omitted if the secret has never been retrieved in the Region.
        public var lastAccessedDate: Foundation.Date?
        /// The Region where replication occurs.
        public var region: Swift.String?
        /// The status can be InProgress, Failed, or InSync.
        public var status: SecretsManagerClientTypes.StatusType?
        /// Status message such as "Secret with this name already exists in this region".
        public var statusMessage: Swift.String?

        public init(
            kmsKeyId: Swift.String? = nil,
            lastAccessedDate: Foundation.Date? = nil,
            region: Swift.String? = nil,
            status: SecretsManagerClientTypes.StatusType? = nil,
            statusMessage: Swift.String? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
            self.lastAccessedDate = lastAccessedDate
            self.region = region
            self.status = status
            self.statusMessage = statusMessage
        }
    }

}

public struct CreateSecretOutput {
    /// The ARN of the new secret. The ARN includes the name of the secret followed by six random characters. This ensures that if you create a new secret with the same name as a deleted secret, then users with access to the old secret don't get access to the new secret because the ARNs are different.
    public var arn: Swift.String?
    /// The name of the new secret.
    public var name: Swift.String?
    /// A list of the replicas of this secret and their status:
    ///
    /// * Failed, which indicates that the replica was not created.
    ///
    /// * InProgress, which indicates that Secrets Manager is in the process of creating the replica.
    ///
    /// * InSync, which indicates that the replica was created.
    public var replicationStatus: [SecretsManagerClientTypes.ReplicationStatusType]?
    /// The unique identifier associated with the version of the new secret.
    public var versionId: Swift.String?

    public init(
        arn: Swift.String? = nil,
        name: Swift.String? = nil,
        replicationStatus: [SecretsManagerClientTypes.ReplicationStatusType]? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.arn = arn
        self.name = name
        self.replicationStatus = replicationStatus
        self.versionId = versionId
    }
}

public struct DeleteResourcePolicyInput {
    /// The ARN or name of the secret to delete the attached resource-based policy for. For an ARN, we recommend that you specify a complete ARN rather than a partial ARN. See [Finding a secret from a partial ARN](https://docs.aws.amazon.com/secretsmanager/latest/userguide/troubleshoot.html#ARN_secretnamehyphen).
    /// This member is required.
    public var secretId: Swift.String?

    public init(
        secretId: Swift.String? = nil
    )
    {
        self.secretId = secretId
    }
}

public struct DeleteResourcePolicyOutput {
    /// The ARN of the secret that the resource-based policy was deleted for.
    public var arn: Swift.String?
    /// The name of the secret that the resource-based policy was deleted for.
    public var name: Swift.String?

    public init(
        arn: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.arn = arn
        self.name = name
    }
}

public struct DeleteSecretInput {
    /// Specifies whether to delete the secret without any recovery window. You can't use both this parameter and RecoveryWindowInDays in the same call. If you don't use either, then by default Secrets Manager uses a 30 day recovery window. Secrets Manager performs the actual deletion with an asynchronous background process, so there might be a short delay before the secret is permanently deleted. If you delete a secret and then immediately create a secret with the same name, use appropriate back off and retry logic. If you forcibly delete an already deleted or nonexistent secret, the operation does not return ResourceNotFoundException. Use this parameter with caution. This parameter causes the operation to skip the normal recovery window before the permanent deletion that Secrets Manager would normally impose with the RecoveryWindowInDays parameter. If you delete a secret with the ForceDeleteWithoutRecovery parameter, then you have no opportunity to recover the secret. You lose the secret permanently.
    public var forceDeleteWithoutRecovery: Swift.Bool?
    /// The number of days from 7 to 30 that Secrets Manager waits before permanently deleting the secret. You can't use both this parameter and ForceDeleteWithoutRecovery in the same call. If you don't use either, then by default Secrets Manager uses a 30 day recovery window.
    public var recoveryWindowInDays: Swift.Int?
    /// The ARN or name of the secret to delete. For an ARN, we recommend that you specify a complete ARN rather than a partial ARN. See [Finding a secret from a partial ARN](https://docs.aws.amazon.com/secretsmanager/latest/userguide/troubleshoot.html#ARN_secretnamehyphen).
    /// This member is required.
    public var secretId: Swift.String?

    public init(
        forceDeleteWithoutRecovery: Swift.Bool? = false,
        recoveryWindowInDays: Swift.Int? = 0,
        secretId: Swift.String? = nil
    )
    {
        self.forceDeleteWithoutRecovery = forceDeleteWithoutRecovery
        self.recoveryWindowInDays = recoveryWindowInDays
        self.secretId = secretId
    }
}

public struct DeleteSecretOutput {
    /// The ARN of the secret.
    public var arn: Swift.String?
    /// The date and time after which this secret Secrets Manager can permanently delete this secret, and it can no longer be restored. This value is the date and time of the delete request plus the number of days in RecoveryWindowInDays.
    public var deletionDate: Foundation.Date?
    /// The name of the secret.
    public var name: Swift.String?

    public init(
        arn: Swift.String? = nil,
        deletionDate: Foundation.Date? = nil,
        name: Swift.String? = nil
    )
    {
        self.arn = arn
        self.deletionDate = deletionDate
        self.name = name
    }
}

public struct DescribeSecretInput {
    /// The ARN or name of the secret. For an ARN, we recommend that you specify a complete ARN rather than a partial ARN. See [Finding a secret from a partial ARN](https://docs.aws.amazon.com/secretsmanager/latest/userguide/troubleshoot.html#ARN_secretnamehyphen).
    /// This member is required.
    public var secretId: Swift.String?

    public init(
        secretId: Swift.String? = nil
    )
    {
        self.secretId = secretId
    }
}

extension SecretsManagerClientTypes {
    /// A structure that defines the rotation configuration for the secret.
    public struct RotationRulesType {
        /// The number of days between rotations of the secret. You can use this value to check that your secret meets your compliance guidelines for how often secrets must be rotated. If you use this field to set the rotation schedule, Secrets Manager calculates the next rotation date based on the previous rotation. Manually updating the secret value by calling PutSecretValue or UpdateSecret is considered a valid rotation. In DescribeSecret and ListSecrets, this value is calculated from the rotation schedule after every successful rotation. In RotateSecret, you can set the rotation schedule in RotationRules with AutomaticallyAfterDays or ScheduleExpression, but not both. To set a rotation schedule in hours, use ScheduleExpression.
        public var automaticallyAfterDays: Swift.Int?
        /// The length of the rotation window in hours, for example 3h for a three hour window. Secrets Manager rotates your secret at any time during this window. The window must not extend into the next rotation window or the next UTC day. The window starts according to the ScheduleExpression. If you don't specify a Duration, for a ScheduleExpression in hours, the window automatically closes after one hour. For a ScheduleExpression in days, the window automatically closes at the end of the UTC day. For more information, including examples, see [Schedule expressions in Secrets Manager rotation](https://docs.aws.amazon.com/secretsmanager/latest/userguide/rotate-secrets_schedule.html) in the Secrets Manager Users Guide.
        public var duration: Swift.String?
        /// A cron() or rate() expression that defines the schedule for rotating your secret. Secrets Manager rotation schedules use UTC time zone. Secrets Manager rotates your secret any time during a rotation window. Secrets Manager rate() expressions represent the interval in hours or days that you want to rotate your secret, for example rate(12 hours) or rate(10 days). You can rotate a secret as often as every four hours. If you use a rate() expression, the rotation window starts at midnight. For a rate in hours, the default rotation window closes after one hour. For a rate in days, the default rotation window closes at the end of the day. You can set the Duration to change the rotation window. The rotation window must not extend into the next UTC day or into the next rotation window. You can use a cron() expression to create a rotation schedule that is more detailed than a rotation interval. For more information, including examples, see [Schedule expressions in Secrets Manager rotation](https://docs.aws.amazon.com/secretsmanager/latest/userguide/rotate-secrets_schedule.html) in the Secrets Manager Users Guide. For a cron expression that represents a schedule in hours, the default rotation window closes after one hour. For a cron expression that represents a schedule in days, the default rotation window closes at the end of the day. You can set the Duration to change the rotation window. The rotation window must not extend into the next UTC day or into the next rotation window.
        public var scheduleExpression: Swift.String?

        public init(
            automaticallyAfterDays: Swift.Int? = nil,
            duration: Swift.String? = nil,
            scheduleExpression: Swift.String? = nil
        )
        {
            self.automaticallyAfterDays = automaticallyAfterDays
            self.duration = duration
            self.scheduleExpression = scheduleExpression
        }
    }

}

public struct DescribeSecretOutput {
    /// The ARN of the secret.
    public var arn: Swift.String?
    /// The date the secret was created.
    public var createdDate: Foundation.Date?
    /// The date the secret is scheduled for deletion. If it is not scheduled for deletion, this field is omitted. When you delete a secret, Secrets Manager requires a recovery window of at least 7 days before deleting the secret. Some time after the deleted date, Secrets Manager deletes the secret, including all of its versions. If a secret is scheduled for deletion, then its details, including the encrypted secret value, is not accessible. To cancel a scheduled deletion and restore access to the secret, use [RestoreSecret].
    public var deletedDate: Foundation.Date?
    /// The description of the secret.
    public var description: Swift.String?
    /// The key ID or alias ARN of the KMS key that Secrets Manager uses to encrypt the secret value. If the secret is encrypted with the Amazon Web Services managed key aws/secretsmanager, this field is omitted. Secrets created using the console use an KMS key ID.
    public var kmsKeyId: Swift.String?
    /// The date that the secret was last accessed in the Region. This field is omitted if the secret has never been retrieved in the Region.
    public var lastAccessedDate: Foundation.Date?
    /// The last date and time that this secret was modified in any way.
    public var lastChangedDate: Foundation.Date?
    /// The last date and time that Secrets Manager rotated the secret. If the secret isn't configured for rotation or rotation has been disabled, Secrets Manager returns null.
    public var lastRotatedDate: Foundation.Date?
    /// The name of the secret.
    public var name: Swift.String?
    /// The next rotation is scheduled to occur on or before this date. If the secret isn't configured for rotation or rotation has been disabled, Secrets Manager returns null. If rotation fails, Secrets Manager retries the entire rotation process multiple times. If rotation is unsuccessful, this date may be in the past. This date represents the latest date that rotation will occur, but it is not an approximate rotation date. In some cases, for example if you turn off automatic rotation and then turn it back on, the next rotation may occur much sooner than this date.
    public var nextRotationDate: Foundation.Date?
    /// The ID of the service that created this secret. For more information, see [Secrets managed by other Amazon Web Services services](https://docs.aws.amazon.com/secretsmanager/latest/userguide/service-linked-secrets.html).
    public var owningService: Swift.String?
    /// The Region the secret is in. If a secret is replicated to other Regions, the replicas are listed in ReplicationStatus.
    public var primaryRegion: Swift.String?
    /// A list of the replicas of this secret and their status:
    ///
    /// * Failed, which indicates that the replica was not created.
    ///
    /// * InProgress, which indicates that Secrets Manager is in the process of creating the replica.
    ///
    /// * InSync, which indicates that the replica was created.
    public var replicationStatus: [SecretsManagerClientTypes.ReplicationStatusType]?
    /// Specifies whether automatic rotation is turned on for this secret. If the secret has never been configured for rotation, Secrets Manager returns null. To turn on rotation, use [RotateSecret]. To turn off rotation, use [CancelRotateSecret].
    public var rotationEnabled: Swift.Bool?
    /// The ARN of the Lambda function that Secrets Manager invokes to rotate the secret.
    public var rotationLambdaARN: Swift.String?
    /// The rotation schedule and Lambda function for this secret. If the secret previously had rotation turned on, but it is now turned off, this field shows the previous rotation schedule and rotation function. If the secret never had rotation turned on, this field is omitted.
    public var rotationRules: SecretsManagerClientTypes.RotationRulesType?
    /// The list of tags attached to the secret. To add tags to a secret, use [TagResource]. To remove tags, use [UntagResource].
    public var tags: [SecretsManagerClientTypes.Tag]?
    /// A list of the versions of the secret that have staging labels attached. Versions that don't have staging labels are considered deprecated and Secrets Manager can delete them. Secrets Manager uses staging labels to indicate the status of a secret version during rotation. The three staging labels for rotation are:
    ///
    /// * AWSCURRENT, which indicates the current version of the secret.
    ///
    /// * AWSPENDING, which indicates the version of the secret that contains new secret information that will become the next current version when rotation finishes. During rotation, Secrets Manager creates an AWSPENDING version ID before creating the new secret version. To check if a secret version exists, call [GetSecretValue].
    ///
    /// * AWSPREVIOUS, which indicates the previous current version of the secret. You can use this as the last known good version.
    ///
    ///
    /// For more information about rotation and staging labels, see [How rotation works](https://docs.aws.amazon.com/secretsmanager/latest/userguide/rotate-secrets_how.html).
    public var versionIdsToStages: [Swift.String: [Swift.String]]?

    public init(
        arn: Swift.String? = nil,
        createdDate: Foundation.Date? = nil,
        deletedDate: Foundation.Date? = nil,
        description: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        lastAccessedDate: Foundation.Date? = nil,
        lastChangedDate: Foundation.Date? = nil,
        lastRotatedDate: Foundation.Date? = nil,
        name: Swift.String? = nil,
        nextRotationDate: Foundation.Date? = nil,
        owningService: Swift.String? = nil,
        primaryRegion: Swift.String? = nil,
        replicationStatus: [SecretsManagerClientTypes.ReplicationStatusType]? = nil,
        rotationEnabled: Swift.Bool? = false,
        rotationLambdaARN: Swift.String? = nil,
        rotationRules: SecretsManagerClientTypes.RotationRulesType? = nil,
        tags: [SecretsManagerClientTypes.Tag]? = nil,
        versionIdsToStages: [Swift.String: [Swift.String]]? = nil
    )
    {
        self.arn = arn
        self.createdDate = createdDate
        self.deletedDate = deletedDate
        self.description = description
        self.kmsKeyId = kmsKeyId
        self.lastAccessedDate = lastAccessedDate
        self.lastChangedDate = lastChangedDate
        self.lastRotatedDate = lastRotatedDate
        self.name = name
        self.nextRotationDate = nextRotationDate
        self.owningService = owningService
        self.primaryRegion = primaryRegion
        self.replicationStatus = replicationStatus
        self.rotationEnabled = rotationEnabled
        self.rotationLambdaARN = rotationLambdaARN
        self.rotationRules = rotationRules
        self.tags = tags
        self.versionIdsToStages = versionIdsToStages
    }
}

public struct GetRandomPasswordInput {
    /// A string of the characters that you don't want in the password.
    public var excludeCharacters: Swift.String?
    /// Specifies whether to exclude lowercase letters from the password. If you don't include this switch, the password can contain lowercase letters.
    public var excludeLowercase: Swift.Bool?
    /// Specifies whether to exclude numbers from the password. If you don't include this switch, the password can contain numbers.
    public var excludeNumbers: Swift.Bool?
    /// Specifies whether to exclude the following punctuation characters from the password: ! " # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \ ] ^ _ ` { | } ~. If you don't include this switch, the password can contain punctuation.
    public var excludePunctuation: Swift.Bool?
    /// Specifies whether to exclude uppercase letters from the password. If you don't include this switch, the password can contain uppercase letters.
    public var excludeUppercase: Swift.Bool?
    /// Specifies whether to include the space character. If you include this switch, the password can contain space characters.
    public var includeSpace: Swift.Bool?
    /// The length of the password. If you don't include this parameter, the default length is 32 characters.
    public var passwordLength: Swift.Int?
    /// Specifies whether to include at least one upper and lowercase letter, one number, and one punctuation. If you don't include this switch, the password contains at least one of every character type.
    public var requireEachIncludedType: Swift.Bool?

    public init(
        excludeCharacters: Swift.String? = nil,
        excludeLowercase: Swift.Bool? = false,
        excludeNumbers: Swift.Bool? = false,
        excludePunctuation: Swift.Bool? = false,
        excludeUppercase: Swift.Bool? = false,
        includeSpace: Swift.Bool? = false,
        passwordLength: Swift.Int? = nil,
        requireEachIncludedType: Swift.Bool? = false
    )
    {
        self.excludeCharacters = excludeCharacters
        self.excludeLowercase = excludeLowercase
        self.excludeNumbers = excludeNumbers
        self.excludePunctuation = excludePunctuation
        self.excludeUppercase = excludeUppercase
        self.includeSpace = includeSpace
        self.passwordLength = passwordLength
        self.requireEachIncludedType = requireEachIncludedType
    }
}

public struct GetRandomPasswordOutput {
    /// A string with the password.
    public var randomPassword: Swift.String?

    public init(
        randomPassword: Swift.String? = nil
    )
    {
        self.randomPassword = randomPassword
    }
}

extension GetRandomPasswordOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRandomPasswordOutput(randomPassword: \"CONTENT_REDACTED\")"}
}

public struct GetResourcePolicyInput {
    /// The ARN or name of the secret to retrieve the attached resource-based policy for. For an ARN, we recommend that you specify a complete ARN rather than a partial ARN. See [Finding a secret from a partial ARN](https://docs.aws.amazon.com/secretsmanager/latest/userguide/troubleshoot.html#ARN_secretnamehyphen).
    /// This member is required.
    public var secretId: Swift.String?

    public init(
        secretId: Swift.String? = nil
    )
    {
        self.secretId = secretId
    }
}

public struct GetResourcePolicyOutput {
    /// The ARN of the secret that the resource-based policy was retrieved for.
    public var arn: Swift.String?
    /// The name of the secret that the resource-based policy was retrieved for.
    public var name: Swift.String?
    /// A JSON-formatted string that contains the permissions policy attached to the secret. For more information about permissions policies, see [Authentication and access control for Secrets Manager](https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html).
    public var resourcePolicy: Swift.String?

    public init(
        arn: Swift.String? = nil,
        name: Swift.String? = nil,
        resourcePolicy: Swift.String? = nil
    )
    {
        self.arn = arn
        self.name = name
        self.resourcePolicy = resourcePolicy
    }
}

public struct GetSecretValueInput {
    /// The ARN or name of the secret to retrieve. To retrieve a secret from another account, you must use an ARN. For an ARN, we recommend that you specify a complete ARN rather than a partial ARN. See [Finding a secret from a partial ARN](https://docs.aws.amazon.com/secretsmanager/latest/userguide/troubleshoot.html#ARN_secretnamehyphen).
    /// This member is required.
    public var secretId: Swift.String?
    /// The unique identifier of the version of the secret to retrieve. If you include both this parameter and VersionStage, the two parameters must refer to the same secret version. If you don't specify either a VersionStage or VersionId, then Secrets Manager returns the AWSCURRENT version. This value is typically a [UUID-type](https://wikipedia.org/wiki/Universally_unique_identifier) value with 32 hexadecimal digits.
    public var versionId: Swift.String?
    /// The staging label of the version of the secret to retrieve. Secrets Manager uses staging labels to keep track of different versions during the rotation process. If you include both this parameter and VersionId, the two parameters must refer to the same secret version. If you don't specify either a VersionStage or VersionId, Secrets Manager returns the AWSCURRENT version.
    public var versionStage: Swift.String?

    public init(
        secretId: Swift.String? = nil,
        versionId: Swift.String? = nil,
        versionStage: Swift.String? = nil
    )
    {
        self.secretId = secretId
        self.versionId = versionId
        self.versionStage = versionStage
    }
}

public struct GetSecretValueOutput {
    /// The ARN of the secret.
    public var arn: Swift.String?
    /// The date and time that this version of the secret was created. If you don't specify which version in VersionId or VersionStage, then Secrets Manager uses the AWSCURRENT version.
    public var createdDate: Foundation.Date?
    /// The friendly name of the secret.
    public var name: Swift.String?
    /// The decrypted secret value, if the secret value was originally provided as binary data in the form of a byte array. When you retrieve a SecretBinary using the HTTP API, the Python SDK, or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not encoded. If the secret was created by using the Secrets Manager console, or if the secret value was originally provided as a string, then this field is omitted. The secret value appears in SecretString instead. Sensitive: This field contains sensitive information, so the service does not include it in CloudTrail log entries. If you create your own log entries, you must also avoid logging the information in this field.
    public var secretBinary: Foundation.Data?
    /// The decrypted secret value, if the secret value was originally provided as a string or through the Secrets Manager console. If this secret was created by using the console, then Secrets Manager stores the information as a JSON structure of key/value pairs. Sensitive: This field contains sensitive information, so the service does not include it in CloudTrail log entries. If you create your own log entries, you must also avoid logging the information in this field.
    public var secretString: Swift.String?
    /// The unique identifier of this version of the secret.
    public var versionId: Swift.String?
    /// A list of all of the staging labels currently attached to this version of the secret.
    public var versionStages: [Swift.String]?

    public init(
        arn: Swift.String? = nil,
        createdDate: Foundation.Date? = nil,
        name: Swift.String? = nil,
        secretBinary: Foundation.Data? = nil,
        secretString: Swift.String? = nil,
        versionId: Swift.String? = nil,
        versionStages: [Swift.String]? = nil
    )
    {
        self.arn = arn
        self.createdDate = createdDate
        self.name = name
        self.secretBinary = secretBinary
        self.secretString = secretString
        self.versionId = versionId
        self.versionStages = versionStages
    }
}

extension GetSecretValueOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetSecretValueOutput(arn: \(Swift.String(describing: arn)), createdDate: \(Swift.String(describing: createdDate)), name: \(Swift.String(describing: name)), versionId: \(Swift.String(describing: versionId)), versionStages: \(Swift.String(describing: versionStages)), secretBinary: \"CONTENT_REDACTED\", secretString: \"CONTENT_REDACTED\")"}
}

extension SecretsManagerClientTypes {

    public enum SortOrderType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case asc
        case desc
        case sdkUnknown(Swift.String)

        public static var allCases: [SortOrderType] {
            return [
                .asc,
                .desc
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .asc: return "asc"
            case .desc: return "desc"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListSecretsInput {
    /// The filters to apply to the list of secrets.
    public var filters: [SecretsManagerClientTypes.Filter]?
    /// Specifies whether to include secrets scheduled for deletion. By default, secrets scheduled for deletion aren't included.
    public var includePlannedDeletion: Swift.Bool?
    /// The number of results to include in the response. If there are more results available, in the response, Secrets Manager includes NextToken. To get the next results, call ListSecrets again with the value from NextToken.
    public var maxResults: Swift.Int?
    /// A token that indicates where the output should continue from, if a previous call did not show all results. To get the next results, call ListSecrets again with this value.
    public var nextToken: Swift.String?
    /// Secrets are listed by CreatedDate.
    public var sortOrder: SecretsManagerClientTypes.SortOrderType?

    public init(
        filters: [SecretsManagerClientTypes.Filter]? = nil,
        includePlannedDeletion: Swift.Bool? = false,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortOrder: SecretsManagerClientTypes.SortOrderType? = nil
    )
    {
        self.filters = filters
        self.includePlannedDeletion = includePlannedDeletion
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortOrder = sortOrder
    }
}

extension SecretsManagerClientTypes {
    /// A structure that contains the details about a secret. It does not include the encrypted SecretString and SecretBinary values. To get those values, use [GetSecretValue](https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_GetSecretValue.html) .
    public struct SecretListEntry {
        /// The Amazon Resource Name (ARN) of the secret.
        public var arn: Swift.String?
        /// The date and time when a secret was created.
        public var createdDate: Foundation.Date?
        /// The date and time the deletion of the secret occurred. Not present on active secrets. The secret can be recovered until the number of days in the recovery window has passed, as specified in the RecoveryWindowInDays parameter of the [DeleteSecret](https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_DeleteSecret.html) operation.
        public var deletedDate: Foundation.Date?
        /// The user-provided description of the secret.
        public var description: Swift.String?
        /// The ARN of the KMS key that Secrets Manager uses to encrypt the secret value. If the secret is encrypted with the Amazon Web Services managed key aws/secretsmanager, this field is omitted.
        public var kmsKeyId: Swift.String?
        /// The date that the secret was last accessed in the Region. This field is omitted if the secret has never been retrieved in the Region.
        public var lastAccessedDate: Foundation.Date?
        /// The last date and time that this secret was modified in any way.
        public var lastChangedDate: Foundation.Date?
        /// The most recent date and time that the Secrets Manager rotation process was successfully completed. This value is null if the secret hasn't ever rotated.
        public var lastRotatedDate: Foundation.Date?
        /// The friendly name of the secret.
        public var name: Swift.String?
        /// The next rotation is scheduled to occur on or before this date. If the secret isn't configured for rotation or rotation has been disabled, Secrets Manager returns null.
        public var nextRotationDate: Foundation.Date?
        /// Returns the name of the service that created the secret.
        public var owningService: Swift.String?
        /// The Region where Secrets Manager originated the secret.
        public var primaryRegion: Swift.String?
        /// Indicates whether automatic, scheduled rotation is enabled for this secret.
        public var rotationEnabled: Swift.Bool?
        /// The ARN of an Amazon Web Services Lambda function invoked by Secrets Manager to rotate and expire the secret either automatically per the schedule or manually by a call to [RotateSecret](https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_RotateSecret.html).
        public var rotationLambdaARN: Swift.String?
        /// A structure that defines the rotation configuration for the secret.
        public var rotationRules: SecretsManagerClientTypes.RotationRulesType?
        /// A list of all of the currently assigned SecretVersionStage staging labels and the SecretVersionId attached to each one. Staging labels are used to keep track of the different versions during the rotation process. A version that does not have any SecretVersionStage is considered deprecated and subject to deletion. Such versions are not included in this list.
        public var secretVersionsToStages: [Swift.String: [Swift.String]]?
        /// The list of user-defined tags associated with the secret. To add tags to a secret, use [TagResource](https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_TagResource.html). To remove tags, use [UntagResource](https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_UntagResource.html).
        public var tags: [SecretsManagerClientTypes.Tag]?

        public init(
            arn: Swift.String? = nil,
            createdDate: Foundation.Date? = nil,
            deletedDate: Foundation.Date? = nil,
            description: Swift.String? = nil,
            kmsKeyId: Swift.String? = nil,
            lastAccessedDate: Foundation.Date? = nil,
            lastChangedDate: Foundation.Date? = nil,
            lastRotatedDate: Foundation.Date? = nil,
            name: Swift.String? = nil,
            nextRotationDate: Foundation.Date? = nil,
            owningService: Swift.String? = nil,
            primaryRegion: Swift.String? = nil,
            rotationEnabled: Swift.Bool? = false,
            rotationLambdaARN: Swift.String? = nil,
            rotationRules: SecretsManagerClientTypes.RotationRulesType? = nil,
            secretVersionsToStages: [Swift.String: [Swift.String]]? = nil,
            tags: [SecretsManagerClientTypes.Tag]? = nil
        )
        {
            self.arn = arn
            self.createdDate = createdDate
            self.deletedDate = deletedDate
            self.description = description
            self.kmsKeyId = kmsKeyId
            self.lastAccessedDate = lastAccessedDate
            self.lastChangedDate = lastChangedDate
            self.lastRotatedDate = lastRotatedDate
            self.name = name
            self.nextRotationDate = nextRotationDate
            self.owningService = owningService
            self.primaryRegion = primaryRegion
            self.rotationEnabled = rotationEnabled
            self.rotationLambdaARN = rotationLambdaARN
            self.rotationRules = rotationRules
            self.secretVersionsToStages = secretVersionsToStages
            self.tags = tags
        }
    }

}

public struct ListSecretsOutput {
    /// Secrets Manager includes this value if there's more output available than what is included in the current response. This can occur even when the response includes no values at all, such as when you ask for a filtered view of a long list. To get the next results, call ListSecrets again with this value.
    public var nextToken: Swift.String?
    /// A list of the secrets in the account.
    public var secretList: [SecretsManagerClientTypes.SecretListEntry]?

    public init(
        nextToken: Swift.String? = nil,
        secretList: [SecretsManagerClientTypes.SecretListEntry]? = nil
    )
    {
        self.nextToken = nextToken
        self.secretList = secretList
    }
}

public struct ListSecretVersionIdsInput {
    /// Specifies whether to include versions of secrets that don't have any staging labels attached to them. Versions without staging labels are considered deprecated and are subject to deletion by Secrets Manager. By default, versions without staging labels aren't included.
    public var includeDeprecated: Swift.Bool?
    /// The number of results to include in the response. If there are more results available, in the response, Secrets Manager includes NextToken. To get the next results, call ListSecretVersionIds again with the value from NextToken.
    public var maxResults: Swift.Int?
    /// A token that indicates where the output should continue from, if a previous call did not show all results. To get the next results, call ListSecretVersionIds again with this value.
    public var nextToken: Swift.String?
    /// The ARN or name of the secret whose versions you want to list. For an ARN, we recommend that you specify a complete ARN rather than a partial ARN. See [Finding a secret from a partial ARN](https://docs.aws.amazon.com/secretsmanager/latest/userguide/troubleshoot.html#ARN_secretnamehyphen).
    /// This member is required.
    public var secretId: Swift.String?

    public init(
        includeDeprecated: Swift.Bool? = false,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        secretId: Swift.String? = nil
    )
    {
        self.includeDeprecated = includeDeprecated
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.secretId = secretId
    }
}

extension SecretsManagerClientTypes {
    /// A structure that contains information about one version of a secret.
    public struct SecretVersionsListEntry {
        /// The date and time this version of the secret was created.
        public var createdDate: Foundation.Date?
        /// The KMS keys used to encrypt the secret version.
        public var kmsKeyIds: [Swift.String]?
        /// The date that this version of the secret was last accessed. Note that the resolution of this field is at the date level and does not include the time.
        public var lastAccessedDate: Foundation.Date?
        /// The unique version identifier of this version of the secret.
        public var versionId: Swift.String?
        /// An array of staging labels that are currently associated with this version of the secret.
        public var versionStages: [Swift.String]?

        public init(
            createdDate: Foundation.Date? = nil,
            kmsKeyIds: [Swift.String]? = nil,
            lastAccessedDate: Foundation.Date? = nil,
            versionId: Swift.String? = nil,
            versionStages: [Swift.String]? = nil
        )
        {
            self.createdDate = createdDate
            self.kmsKeyIds = kmsKeyIds
            self.lastAccessedDate = lastAccessedDate
            self.versionId = versionId
            self.versionStages = versionStages
        }
    }

}

public struct ListSecretVersionIdsOutput {
    /// The ARN of the secret.
    public var arn: Swift.String?
    /// The name of the secret.
    public var name: Swift.String?
    /// Secrets Manager includes this value if there's more output available than what is included in the current response. This can occur even when the response includes no values at all, such as when you ask for a filtered view of a long list. To get the next results, call ListSecretVersionIds again with this value.
    public var nextToken: Swift.String?
    /// A list of the versions of the secret.
    public var versions: [SecretsManagerClientTypes.SecretVersionsListEntry]?

    public init(
        arn: Swift.String? = nil,
        name: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        versions: [SecretsManagerClientTypes.SecretVersionsListEntry]? = nil
    )
    {
        self.arn = arn
        self.name = name
        self.nextToken = nextToken
        self.versions = versions
    }
}

/// The BlockPublicPolicy parameter is set to true, and the resource policy did not prevent broad access to the secret.
public struct PublicPolicyException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "PublicPolicyException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct PutResourcePolicyInput {
    /// Specifies whether to block resource-based policies that allow broad access to the secret, for example those that use a wildcard for the principal. By default, public policies aren't blocked. Resource policy validation and the BlockPublicPolicy parameter help protect your resources by preventing public access from being granted through the resource policies that are directly attached to your secrets. In addition to using these features, carefully inspect the following policies to confirm that they do not grant public access:
    ///
    /// * Identity-based policies attached to associated Amazon Web Services principals (for example, IAM roles)
    ///
    /// * Resource-based policies attached to associated Amazon Web Services resources (for example, Key Management Service (KMS) keys)
    ///
    ///
    /// To review permissions to your secrets, see [Determine who has permissions to your secrets](https://docs.aws.amazon.com/secretsmanager/latest/userguide/determine-acccess_examine-iam-policies.html).
    public var blockPublicPolicy: Swift.Bool?
    /// A JSON-formatted string for an Amazon Web Services resource-based policy. For example policies, see [Permissions policy examples](https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_examples.html).
    /// This member is required.
    public var resourcePolicy: Swift.String?
    /// The ARN or name of the secret to attach the resource-based policy. For an ARN, we recommend that you specify a complete ARN rather than a partial ARN. See [Finding a secret from a partial ARN](https://docs.aws.amazon.com/secretsmanager/latest/userguide/troubleshoot.html#ARN_secretnamehyphen).
    /// This member is required.
    public var secretId: Swift.String?

    public init(
        blockPublicPolicy: Swift.Bool? = false,
        resourcePolicy: Swift.String? = nil,
        secretId: Swift.String? = nil
    )
    {
        self.blockPublicPolicy = blockPublicPolicy
        self.resourcePolicy = resourcePolicy
        self.secretId = secretId
    }
}

public struct PutResourcePolicyOutput {
    /// The ARN of the secret.
    public var arn: Swift.String?
    /// The name of the secret.
    public var name: Swift.String?

    public init(
        arn: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.arn = arn
        self.name = name
    }
}

public struct PutSecretValueInput {
    /// A unique identifier for the new version of the secret. If you use the Amazon Web Services CLI or one of the Amazon Web Services SDKs to call this operation, then you can leave this parameter empty. The CLI or SDK generates a random UUID for you and includes it as the value for this parameter in the request. If you generate a raw HTTP request to the Secrets Manager service endpoint, then you must generate a ClientRequestToken and include it in the request. This value helps ensure idempotency. Secrets Manager uses this value to prevent the accidental creation of duplicate versions if there are failures and retries during a rotation. We recommend that you generate a [UUID-type](https://wikipedia.org/wiki/Universally_unique_identifier) value to ensure uniqueness of your versions within the specified secret.
    ///
    /// * If the ClientRequestToken value isn't already associated with a version of the secret then a new version of the secret is created.
    ///
    /// * If a version with this value already exists and that version's SecretString or SecretBinary values are the same as those in the request then the request is ignored. The operation is idempotent.
    ///
    /// * If a version with this value already exists and the version of the SecretString and SecretBinary values are different from those in the request, then the request fails because you can't modify a secret version. You can only create new versions to store new secret values.
    ///
    ///
    /// This value becomes the VersionId of the new version.
    public var clientRequestToken: Swift.String?
    /// A unique identifier that indicates the source of the request. For cross-account rotation (when you rotate a secret in one account by using a Lambda rotation function in another account) and the Lambda rotation function assumes an IAM role to call Secrets Manager, Secrets Manager validates the identity with the rotation token. For more information, see [How rotation works](https://docs.aws.amazon.com/secretsmanager/latest/userguide/rotating-secrets.html). Sensitive: This field contains sensitive information, so the service does not include it in CloudTrail log entries. If you create your own log entries, you must also avoid logging the information in this field.
    public var rotationToken: Swift.String?
    /// The binary data to encrypt and store in the new version of the secret. To use this parameter in the command-line tools, we recommend that you store your binary data in a file and then pass the contents of the file as a parameter. You must include SecretBinary or SecretString, but not both. You can't access this value from the Secrets Manager console. Sensitive: This field contains sensitive information, so the service does not include it in CloudTrail log entries. If you create your own log entries, you must also avoid logging the information in this field.
    public var secretBinary: Foundation.Data?
    /// The ARN or name of the secret to add a new version to. For an ARN, we recommend that you specify a complete ARN rather than a partial ARN. See [Finding a secret from a partial ARN](https://docs.aws.amazon.com/secretsmanager/latest/userguide/troubleshoot.html#ARN_secretnamehyphen). If the secret doesn't already exist, use CreateSecret instead.
    /// This member is required.
    public var secretId: Swift.String?
    /// The text to encrypt and store in the new version of the secret. You must include SecretBinary or SecretString, but not both. We recommend you create the secret string as JSON key/value pairs, as shown in the example. Sensitive: This field contains sensitive information, so the service does not include it in CloudTrail log entries. If you create your own log entries, you must also avoid logging the information in this field.
    public var secretString: Swift.String?
    /// A list of staging labels to attach to this version of the secret. Secrets Manager uses staging labels to track versions of a secret through the rotation process. If you specify a staging label that's already associated with a different version of the same secret, then Secrets Manager removes the label from the other version and attaches it to this version. If you specify AWSCURRENT, and it is already attached to another version, then Secrets Manager also moves the staging label AWSPREVIOUS to the version that AWSCURRENT was removed from. If you don't include VersionStages, then Secrets Manager automatically moves the staging label AWSCURRENT to this version.
    public var versionStages: [Swift.String]?

    public init(
        clientRequestToken: Swift.String? = nil,
        rotationToken: Swift.String? = nil,
        secretBinary: Foundation.Data? = nil,
        secretId: Swift.String? = nil,
        secretString: Swift.String? = nil,
        versionStages: [Swift.String]? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.rotationToken = rotationToken
        self.secretBinary = secretBinary
        self.secretId = secretId
        self.secretString = secretString
        self.versionStages = versionStages
    }
}

extension PutSecretValueInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutSecretValueInput(clientRequestToken: \(Swift.String(describing: clientRequestToken)), secretId: \(Swift.String(describing: secretId)), versionStages: \(Swift.String(describing: versionStages)), rotationToken: \"CONTENT_REDACTED\", secretBinary: \"CONTENT_REDACTED\", secretString: \"CONTENT_REDACTED\")"}
}

public struct PutSecretValueOutput {
    /// The ARN of the secret.
    public var arn: Swift.String?
    /// The name of the secret.
    public var name: Swift.String?
    /// The unique identifier of the version of the secret.
    public var versionId: Swift.String?
    /// The list of staging labels that are currently attached to this version of the secret. Secrets Manager uses staging labels to track a version as it progresses through the secret rotation process.
    public var versionStages: [Swift.String]?

    public init(
        arn: Swift.String? = nil,
        name: Swift.String? = nil,
        versionId: Swift.String? = nil,
        versionStages: [Swift.String]? = nil
    )
    {
        self.arn = arn
        self.name = name
        self.versionId = versionId
        self.versionStages = versionStages
    }
}

public struct RemoveRegionsFromReplicationInput {
    /// The Regions of the replicas to remove.
    /// This member is required.
    public var removeReplicaRegions: [Swift.String]?
    /// The ARN or name of the secret.
    /// This member is required.
    public var secretId: Swift.String?

    public init(
        removeReplicaRegions: [Swift.String]? = nil,
        secretId: Swift.String? = nil
    )
    {
        self.removeReplicaRegions = removeReplicaRegions
        self.secretId = secretId
    }
}

public struct RemoveRegionsFromReplicationOutput {
    /// The ARN of the primary secret.
    public var arn: Swift.String?
    /// The status of replicas for this secret after you remove Regions.
    public var replicationStatus: [SecretsManagerClientTypes.ReplicationStatusType]?

    public init(
        arn: Swift.String? = nil,
        replicationStatus: [SecretsManagerClientTypes.ReplicationStatusType]? = nil
    )
    {
        self.arn = arn
        self.replicationStatus = replicationStatus
    }
}

public struct ReplicateSecretToRegionsInput {
    /// A list of Regions in which to replicate the secret.
    /// This member is required.
    public var addReplicaRegions: [SecretsManagerClientTypes.ReplicaRegionType]?
    /// Specifies whether to overwrite a secret with the same name in the destination Region. By default, secrets aren't overwritten.
    public var forceOverwriteReplicaSecret: Swift.Bool?
    /// The ARN or name of the secret to replicate.
    /// This member is required.
    public var secretId: Swift.String?

    public init(
        addReplicaRegions: [SecretsManagerClientTypes.ReplicaRegionType]? = nil,
        forceOverwriteReplicaSecret: Swift.Bool? = false,
        secretId: Swift.String? = nil
    )
    {
        self.addReplicaRegions = addReplicaRegions
        self.forceOverwriteReplicaSecret = forceOverwriteReplicaSecret
        self.secretId = secretId
    }
}

public struct ReplicateSecretToRegionsOutput {
    /// The ARN of the primary secret.
    public var arn: Swift.String?
    /// The status of replication.
    public var replicationStatus: [SecretsManagerClientTypes.ReplicationStatusType]?

    public init(
        arn: Swift.String? = nil,
        replicationStatus: [SecretsManagerClientTypes.ReplicationStatusType]? = nil
    )
    {
        self.arn = arn
        self.replicationStatus = replicationStatus
    }
}

public struct RestoreSecretInput {
    /// The ARN or name of the secret to restore. For an ARN, we recommend that you specify a complete ARN rather than a partial ARN. See [Finding a secret from a partial ARN](https://docs.aws.amazon.com/secretsmanager/latest/userguide/troubleshoot.html#ARN_secretnamehyphen).
    /// This member is required.
    public var secretId: Swift.String?

    public init(
        secretId: Swift.String? = nil
    )
    {
        self.secretId = secretId
    }
}

public struct RestoreSecretOutput {
    /// The ARN of the secret that was restored.
    public var arn: Swift.String?
    /// The name of the secret that was restored.
    public var name: Swift.String?

    public init(
        arn: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.arn = arn
        self.name = name
    }
}

public struct RotateSecretInput {
    /// A unique identifier for the new version of the secret. You only need to specify this value if you implement your own retry logic and you want to ensure that Secrets Manager doesn't attempt to create a secret version twice. If you use the Amazon Web Services CLI or one of the Amazon Web Services SDKs to call this operation, then you can leave this parameter empty. The CLI or SDK generates a random UUID for you and includes it as the value for this parameter in the request. If you generate a raw HTTP request to the Secrets Manager service endpoint, then you must generate a ClientRequestToken and include it in the request. This value helps ensure idempotency. Secrets Manager uses this value to prevent the accidental creation of duplicate versions if there are failures and retries during a rotation. We recommend that you generate a [UUID-type](https://wikipedia.org/wiki/Universally_unique_identifier) value to ensure uniqueness of your versions within the specified secret.
    public var clientRequestToken: Swift.String?
    /// Specifies whether to rotate the secret immediately or wait until the next scheduled rotation window. The rotation schedule is defined in [RotateSecretRequest$RotationRules]. For secrets that use a Lambda rotation function to rotate, if you don't immediately rotate the secret, Secrets Manager tests the rotation configuration by running the [testSecret] step(https://docs.aws.amazon.com/secretsmanager/latest/userguide/rotate-secrets_lambda-functions.html#rotate-secrets_lambda-functions-code) of the Lambda rotation function. The test creates an AWSPENDING version of the secret and then removes it. By default, Secrets Manager rotates the secret immediately.
    public var rotateImmediately: Swift.Bool?
    /// For secrets that use a Lambda rotation function to rotate, the ARN of the Lambda rotation function. For secrets that use managed rotation, omit this field. For more information, see [Managed rotation](https://docs.aws.amazon.com/secretsmanager/latest/userguide/rotate-secrets_managed.html) in the Secrets Manager User Guide.
    public var rotationLambdaARN: Swift.String?
    /// A structure that defines the rotation configuration for this secret.
    public var rotationRules: SecretsManagerClientTypes.RotationRulesType?
    /// The ARN or name of the secret to rotate. For an ARN, we recommend that you specify a complete ARN rather than a partial ARN. See [Finding a secret from a partial ARN](https://docs.aws.amazon.com/secretsmanager/latest/userguide/troubleshoot.html#ARN_secretnamehyphen).
    /// This member is required.
    public var secretId: Swift.String?

    public init(
        clientRequestToken: Swift.String? = nil,
        rotateImmediately: Swift.Bool? = false,
        rotationLambdaARN: Swift.String? = nil,
        rotationRules: SecretsManagerClientTypes.RotationRulesType? = nil,
        secretId: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.rotateImmediately = rotateImmediately
        self.rotationLambdaARN = rotationLambdaARN
        self.rotationRules = rotationRules
        self.secretId = secretId
    }
}

public struct RotateSecretOutput {
    /// The ARN of the secret.
    public var arn: Swift.String?
    /// The name of the secret.
    public var name: Swift.String?
    /// The ID of the new version of the secret.
    public var versionId: Swift.String?

    public init(
        arn: Swift.String? = nil,
        name: Swift.String? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.arn = arn
        self.name = name
        self.versionId = versionId
    }
}

public struct StopReplicationToReplicaInput {
    /// The ARN of the primary secret.
    /// This member is required.
    public var secretId: Swift.String?

    public init(
        secretId: Swift.String? = nil
    )
    {
        self.secretId = secretId
    }
}

public struct StopReplicationToReplicaOutput {
    /// The ARN of the promoted secret. The ARN is the same as the original primary secret except the Region is changed.
    public var arn: Swift.String?

    public init(
        arn: Swift.String? = nil
    )
    {
        self.arn = arn
    }
}

public struct TagResourceInput {
    /// The identifier for the secret to attach tags to. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret. For an ARN, we recommend that you specify a complete ARN rather than a partial ARN. See [Finding a secret from a partial ARN](https://docs.aws.amazon.com/secretsmanager/latest/userguide/troubleshoot.html#ARN_secretnamehyphen).
    /// This member is required.
    public var secretId: Swift.String?
    /// The tags to attach to the secret as a JSON text string argument. Each element in the list consists of a Key and a Value. For storing multiple values, we recommend that you use a JSON text string argument and specify key/value pairs. For more information, see [Specifying parameter values for the Amazon Web Services CLI](https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-parameters.html) in the Amazon Web Services CLI User Guide.
    /// This member is required.
    public var tags: [SecretsManagerClientTypes.Tag]?

    public init(
        secretId: Swift.String? = nil,
        tags: [SecretsManagerClientTypes.Tag]? = nil
    )
    {
        self.secretId = secretId
        self.tags = tags
    }
}

public struct UntagResourceInput {
    /// The ARN or name of the secret. For an ARN, we recommend that you specify a complete ARN rather than a partial ARN. See [Finding a secret from a partial ARN](https://docs.aws.amazon.com/secretsmanager/latest/userguide/troubleshoot.html#ARN_secretnamehyphen).
    /// This member is required.
    public var secretId: Swift.String?
    /// A list of tag key names to remove from the secret. You don't specify the value. Both the key and its associated value are removed. This parameter requires a JSON text string argument. For storing multiple values, we recommend that you use a JSON text string argument and specify key/value pairs. For more information, see [Specifying parameter values for the Amazon Web Services CLI](https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-parameters.html) in the Amazon Web Services CLI User Guide.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        secretId: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.secretId = secretId
        self.tagKeys = tagKeys
    }
}

public struct UpdateSecretInput {
    /// If you include SecretString or SecretBinary, then Secrets Manager creates a new version for the secret, and this parameter specifies the unique identifier for the new version. If you use the Amazon Web Services CLI or one of the Amazon Web Services SDKs to call this operation, then you can leave this parameter empty. The CLI or SDK generates a random UUID for you and includes it as the value for this parameter in the request. If you generate a raw HTTP request to the Secrets Manager service endpoint, then you must generate a ClientRequestToken and include it in the request. This value helps ensure idempotency. Secrets Manager uses this value to prevent the accidental creation of duplicate versions if there are failures and retries during a rotation. We recommend that you generate a [UUID-type](https://wikipedia.org/wiki/Universally_unique_identifier) value to ensure uniqueness of your versions within the specified secret.
    public var clientRequestToken: Swift.String?
    /// The description of the secret.
    public var description: Swift.String?
    /// The ARN, key ID, or alias of the KMS key that Secrets Manager uses to encrypt new secret versions as well as any existing versions with the staging labels AWSCURRENT, AWSPENDING, or AWSPREVIOUS. If you don't have kms:Encrypt permission to the new key, Secrets Manager does not re-ecrypt existing secret versions with the new key. For more information about versions and staging labels, see [Concepts: Version](https://docs.aws.amazon.com/secretsmanager/latest/userguide/getting-started.html#term_version). A key alias is always prefixed by alias/, for example alias/aws/secretsmanager. For more information, see [About aliases](https://docs.aws.amazon.com/kms/latest/developerguide/alias-about.html). If you set this to an empty string, Secrets Manager uses the Amazon Web Services managed key aws/secretsmanager. If this key doesn't already exist in your account, then Secrets Manager creates it for you automatically. All users and roles in the Amazon Web Services account automatically have access to use aws/secretsmanager. Creating aws/secretsmanager can result in a one-time significant delay in returning the result. You can only use the Amazon Web Services managed key aws/secretsmanager if you call this operation using credentials from the same Amazon Web Services account that owns the secret. If the secret is in a different account, then you must use a customer managed key and provide the ARN of that KMS key in this field. The user making the call must have permissions to both the secret and the KMS key in their respective accounts.
    public var kmsKeyId: Swift.String?
    /// The binary data to encrypt and store in the new version of the secret. We recommend that you store your binary data in a file and then pass the contents of the file as a parameter. Either SecretBinary or SecretString must have a value, but not both. You can't access this parameter in the Secrets Manager console. Sensitive: This field contains sensitive information, so the service does not include it in CloudTrail log entries. If you create your own log entries, you must also avoid logging the information in this field.
    public var secretBinary: Foundation.Data?
    /// The ARN or name of the secret. For an ARN, we recommend that you specify a complete ARN rather than a partial ARN. See [Finding a secret from a partial ARN](https://docs.aws.amazon.com/secretsmanager/latest/userguide/troubleshoot.html#ARN_secretnamehyphen).
    /// This member is required.
    public var secretId: Swift.String?
    /// The text data to encrypt and store in the new version of the secret. We recommend you use a JSON structure of key/value pairs for your secret value. Either SecretBinary or SecretString must have a value, but not both. Sensitive: This field contains sensitive information, so the service does not include it in CloudTrail log entries. If you create your own log entries, you must also avoid logging the information in this field.
    public var secretString: Swift.String?

    public init(
        clientRequestToken: Swift.String? = nil,
        description: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        secretBinary: Foundation.Data? = nil,
        secretId: Swift.String? = nil,
        secretString: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.description = description
        self.kmsKeyId = kmsKeyId
        self.secretBinary = secretBinary
        self.secretId = secretId
        self.secretString = secretString
    }
}

extension UpdateSecretInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateSecretInput(clientRequestToken: \(Swift.String(describing: clientRequestToken)), description: \(Swift.String(describing: description)), kmsKeyId: \(Swift.String(describing: kmsKeyId)), secretId: \(Swift.String(describing: secretId)), secretBinary: \"CONTENT_REDACTED\", secretString: \"CONTENT_REDACTED\")"}
}

public struct UpdateSecretOutput {
    /// The ARN of the secret that was updated.
    public var arn: Swift.String?
    /// The name of the secret that was updated.
    public var name: Swift.String?
    /// If Secrets Manager created a new version of the secret during this operation, then VersionId contains the unique identifier of the new version.
    public var versionId: Swift.String?

    public init(
        arn: Swift.String? = nil,
        name: Swift.String? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.arn = arn
        self.name = name
        self.versionId = versionId
    }
}

public struct UpdateSecretVersionStageInput {
    /// The ID of the version to add the staging label to. To remove a label from a version, then do not specify this parameter. If the staging label is already attached to a different version of the secret, then you must also specify the RemoveFromVersionId parameter.
    public var moveToVersionId: Swift.String?
    /// The ID of the version that the staging label is to be removed from. If the staging label you are trying to attach to one version is already attached to a different version, then you must include this parameter and specify the version that the label is to be removed from. If the label is attached and you either do not specify this parameter, or the version ID does not match, then the operation fails.
    public var removeFromVersionId: Swift.String?
    /// The ARN or the name of the secret with the version and staging labelsto modify. For an ARN, we recommend that you specify a complete ARN rather than a partial ARN. See [Finding a secret from a partial ARN](https://docs.aws.amazon.com/secretsmanager/latest/userguide/troubleshoot.html#ARN_secretnamehyphen).
    /// This member is required.
    public var secretId: Swift.String?
    /// The staging label to add to this version.
    /// This member is required.
    public var versionStage: Swift.String?

    public init(
        moveToVersionId: Swift.String? = nil,
        removeFromVersionId: Swift.String? = nil,
        secretId: Swift.String? = nil,
        versionStage: Swift.String? = nil
    )
    {
        self.moveToVersionId = moveToVersionId
        self.removeFromVersionId = removeFromVersionId
        self.secretId = secretId
        self.versionStage = versionStage
    }
}

public struct UpdateSecretVersionStageOutput {
    /// The ARN of the secret that was updated.
    public var arn: Swift.String?
    /// The name of the secret that was updated.
    public var name: Swift.String?

    public init(
        arn: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.arn = arn
        self.name = name
    }
}

public struct ValidateResourcePolicyInput {
    /// A JSON-formatted string that contains an Amazon Web Services resource-based policy. The policy in the string identifies who can access or manage this secret and its versions. For example policies, see [Permissions policy examples](https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_examples.html).
    /// This member is required.
    public var resourcePolicy: Swift.String?
    /// The ARN or name of the secret with the resource-based policy you want to validate.
    public var secretId: Swift.String?

    public init(
        resourcePolicy: Swift.String? = nil,
        secretId: Swift.String? = nil
    )
    {
        self.resourcePolicy = resourcePolicy
        self.secretId = secretId
    }
}

extension SecretsManagerClientTypes {
    /// Displays errors that occurred during validation of the resource policy.
    public struct ValidationErrorsEntry {
        /// Checks the name of the policy.
        public var checkName: Swift.String?
        /// Displays error messages if validation encounters problems during validation of the resource policy.
        public var errorMessage: Swift.String?

        public init(
            checkName: Swift.String? = nil,
            errorMessage: Swift.String? = nil
        )
        {
            self.checkName = checkName
            self.errorMessage = errorMessage
        }
    }

}

public struct ValidateResourcePolicyOutput {
    /// True if your policy passes validation, otherwise false.
    public var policyValidationPassed: Swift.Bool
    /// Validation errors if your policy didn't pass validation.
    public var validationErrors: [SecretsManagerClientTypes.ValidationErrorsEntry]?

    public init(
        policyValidationPassed: Swift.Bool = false,
        validationErrors: [SecretsManagerClientTypes.ValidationErrorsEntry]? = nil
    )
    {
        self.policyValidationPassed = policyValidationPassed
        self.validationErrors = validationErrors
    }
}

extension BatchGetSecretValueInput {

    static func urlPathProvider(_ value: BatchGetSecretValueInput) -> Swift.String? {
        return "/"
    }
}

extension CancelRotateSecretInput {

    static func urlPathProvider(_ value: CancelRotateSecretInput) -> Swift.String? {
        return "/"
    }
}

extension CreateSecretInput {

    static func urlPathProvider(_ value: CreateSecretInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteResourcePolicyInput {

    static func urlPathProvider(_ value: DeleteResourcePolicyInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteSecretInput {

    static func urlPathProvider(_ value: DeleteSecretInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeSecretInput {

    static func urlPathProvider(_ value: DescribeSecretInput) -> Swift.String? {
        return "/"
    }
}

extension GetRandomPasswordInput {

    static func urlPathProvider(_ value: GetRandomPasswordInput) -> Swift.String? {
        return "/"
    }
}

extension GetResourcePolicyInput {

    static func urlPathProvider(_ value: GetResourcePolicyInput) -> Swift.String? {
        return "/"
    }
}

extension GetSecretValueInput {

    static func urlPathProvider(_ value: GetSecretValueInput) -> Swift.String? {
        return "/"
    }
}

extension ListSecretsInput {

    static func urlPathProvider(_ value: ListSecretsInput) -> Swift.String? {
        return "/"
    }
}

extension ListSecretVersionIdsInput {

    static func urlPathProvider(_ value: ListSecretVersionIdsInput) -> Swift.String? {
        return "/"
    }
}

extension PutResourcePolicyInput {

    static func urlPathProvider(_ value: PutResourcePolicyInput) -> Swift.String? {
        return "/"
    }
}

extension PutSecretValueInput {

    static func urlPathProvider(_ value: PutSecretValueInput) -> Swift.String? {
        return "/"
    }
}

extension RemoveRegionsFromReplicationInput {

    static func urlPathProvider(_ value: RemoveRegionsFromReplicationInput) -> Swift.String? {
        return "/"
    }
}

extension ReplicateSecretToRegionsInput {

    static func urlPathProvider(_ value: ReplicateSecretToRegionsInput) -> Swift.String? {
        return "/"
    }
}

extension RestoreSecretInput {

    static func urlPathProvider(_ value: RestoreSecretInput) -> Swift.String? {
        return "/"
    }
}

extension RotateSecretInput {

    static func urlPathProvider(_ value: RotateSecretInput) -> Swift.String? {
        return "/"
    }
}

extension StopReplicationToReplicaInput {

    static func urlPathProvider(_ value: StopReplicationToReplicaInput) -> Swift.String? {
        return "/"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateSecretInput {

    static func urlPathProvider(_ value: UpdateSecretInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateSecretVersionStageInput {

    static func urlPathProvider(_ value: UpdateSecretVersionStageInput) -> Swift.String? {
        return "/"
    }
}

extension ValidateResourcePolicyInput {

    static func urlPathProvider(_ value: ValidateResourcePolicyInput) -> Swift.String? {
        return "/"
    }
}

extension BatchGetSecretValueInput {

    static func write(value: BatchGetSecretValueInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Filters"].writeList(value.filters, memberWritingClosure: SecretsManagerClientTypes.Filter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["SecretIdList"].writeList(value.secretIdList, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CancelRotateSecretInput {

    static func write(value: CancelRotateSecretInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SecretId"].write(value.secretId)
    }
}

extension CreateSecretInput {

    static func write(value: CreateSecretInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AddReplicaRegions"].writeList(value.addReplicaRegions, memberWritingClosure: SecretsManagerClientTypes.ReplicaRegionType.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["Description"].write(value.description)
        try writer["ForceOverwriteReplicaSecret"].write(value.forceOverwriteReplicaSecret)
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["Name"].write(value.name)
        try writer["SecretBinary"].write(value.secretBinary)
        try writer["SecretString"].write(value.secretString)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SecretsManagerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DeleteResourcePolicyInput {

    static func write(value: DeleteResourcePolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SecretId"].write(value.secretId)
    }
}

extension DeleteSecretInput {

    static func write(value: DeleteSecretInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ForceDeleteWithoutRecovery"].write(value.forceDeleteWithoutRecovery)
        try writer["RecoveryWindowInDays"].write(value.recoveryWindowInDays)
        try writer["SecretId"].write(value.secretId)
    }
}

extension DescribeSecretInput {

    static func write(value: DescribeSecretInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SecretId"].write(value.secretId)
    }
}

extension GetRandomPasswordInput {

    static func write(value: GetRandomPasswordInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ExcludeCharacters"].write(value.excludeCharacters)
        try writer["ExcludeLowercase"].write(value.excludeLowercase)
        try writer["ExcludeNumbers"].write(value.excludeNumbers)
        try writer["ExcludePunctuation"].write(value.excludePunctuation)
        try writer["ExcludeUppercase"].write(value.excludeUppercase)
        try writer["IncludeSpace"].write(value.includeSpace)
        try writer["PasswordLength"].write(value.passwordLength)
        try writer["RequireEachIncludedType"].write(value.requireEachIncludedType)
    }
}

extension GetResourcePolicyInput {

    static func write(value: GetResourcePolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SecretId"].write(value.secretId)
    }
}

extension GetSecretValueInput {

    static func write(value: GetSecretValueInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SecretId"].write(value.secretId)
        try writer["VersionId"].write(value.versionId)
        try writer["VersionStage"].write(value.versionStage)
    }
}

extension ListSecretsInput {

    static func write(value: ListSecretsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Filters"].writeList(value.filters, memberWritingClosure: SecretsManagerClientTypes.Filter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["IncludePlannedDeletion"].write(value.includePlannedDeletion)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortOrder"].write(value.sortOrder)
    }
}

extension ListSecretVersionIdsInput {

    static func write(value: ListSecretVersionIdsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IncludeDeprecated"].write(value.includeDeprecated)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["SecretId"].write(value.secretId)
    }
}

extension PutResourcePolicyInput {

    static func write(value: PutResourcePolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BlockPublicPolicy"].write(value.blockPublicPolicy)
        try writer["ResourcePolicy"].write(value.resourcePolicy)
        try writer["SecretId"].write(value.secretId)
    }
}

extension PutSecretValueInput {

    static func write(value: PutSecretValueInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["RotationToken"].write(value.rotationToken)
        try writer["SecretBinary"].write(value.secretBinary)
        try writer["SecretId"].write(value.secretId)
        try writer["SecretString"].write(value.secretString)
        try writer["VersionStages"].writeList(value.versionStages, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension RemoveRegionsFromReplicationInput {

    static func write(value: RemoveRegionsFromReplicationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RemoveReplicaRegions"].writeList(value.removeReplicaRegions, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SecretId"].write(value.secretId)
    }
}

extension ReplicateSecretToRegionsInput {

    static func write(value: ReplicateSecretToRegionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AddReplicaRegions"].writeList(value.addReplicaRegions, memberWritingClosure: SecretsManagerClientTypes.ReplicaRegionType.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ForceOverwriteReplicaSecret"].write(value.forceOverwriteReplicaSecret)
        try writer["SecretId"].write(value.secretId)
    }
}

extension RestoreSecretInput {

    static func write(value: RestoreSecretInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SecretId"].write(value.secretId)
    }
}

extension RotateSecretInput {

    static func write(value: RotateSecretInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["RotateImmediately"].write(value.rotateImmediately)
        try writer["RotationLambdaARN"].write(value.rotationLambdaARN)
        try writer["RotationRules"].write(value.rotationRules, with: SecretsManagerClientTypes.RotationRulesType.write(value:to:))
        try writer["SecretId"].write(value.secretId)
    }
}

extension StopReplicationToReplicaInput {

    static func write(value: StopReplicationToReplicaInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SecretId"].write(value.secretId)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SecretId"].write(value.secretId)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SecretsManagerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UntagResourceInput {

    static func write(value: UntagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SecretId"].write(value.secretId)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateSecretInput {

    static func write(value: UpdateSecretInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["Description"].write(value.description)
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["SecretBinary"].write(value.secretBinary)
        try writer["SecretId"].write(value.secretId)
        try writer["SecretString"].write(value.secretString)
    }
}

extension UpdateSecretVersionStageInput {

    static func write(value: UpdateSecretVersionStageInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MoveToVersionId"].write(value.moveToVersionId)
        try writer["RemoveFromVersionId"].write(value.removeFromVersionId)
        try writer["SecretId"].write(value.secretId)
        try writer["VersionStage"].write(value.versionStage)
    }
}

extension ValidateResourcePolicyInput {

    static func write(value: ValidateResourcePolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourcePolicy"].write(value.resourcePolicy)
        try writer["SecretId"].write(value.secretId)
    }
}

extension BatchGetSecretValueOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchGetSecretValueOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchGetSecretValueOutput()
        value.errors = try reader["Errors"].readListIfPresent(memberReadingClosure: SecretsManagerClientTypes.APIErrorType.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.secretValues = try reader["SecretValues"].readListIfPresent(memberReadingClosure: SecretsManagerClientTypes.SecretValueEntry.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CancelRotateSecretOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CancelRotateSecretOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CancelRotateSecretOutput()
        value.arn = try reader["ARN"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.versionId = try reader["VersionId"].readIfPresent()
        return value
    }
}

extension CreateSecretOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateSecretOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateSecretOutput()
        value.arn = try reader["ARN"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.replicationStatus = try reader["ReplicationStatus"].readListIfPresent(memberReadingClosure: SecretsManagerClientTypes.ReplicationStatusType.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.versionId = try reader["VersionId"].readIfPresent()
        return value
    }
}

extension DeleteResourcePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteResourcePolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteResourcePolicyOutput()
        value.arn = try reader["ARN"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        return value
    }
}

extension DeleteSecretOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteSecretOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteSecretOutput()
        value.arn = try reader["ARN"].readIfPresent()
        value.deletionDate = try reader["DeletionDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.name = try reader["Name"].readIfPresent()
        return value
    }
}

extension DescribeSecretOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeSecretOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeSecretOutput()
        value.arn = try reader["ARN"].readIfPresent()
        value.createdDate = try reader["CreatedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.deletedDate = try reader["DeletedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["Description"].readIfPresent()
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        value.lastAccessedDate = try reader["LastAccessedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastChangedDate = try reader["LastChangedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastRotatedDate = try reader["LastRotatedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.name = try reader["Name"].readIfPresent()
        value.nextRotationDate = try reader["NextRotationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.owningService = try reader["OwningService"].readIfPresent()
        value.primaryRegion = try reader["PrimaryRegion"].readIfPresent()
        value.replicationStatus = try reader["ReplicationStatus"].readListIfPresent(memberReadingClosure: SecretsManagerClientTypes.ReplicationStatusType.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.rotationEnabled = try reader["RotationEnabled"].readIfPresent()
        value.rotationLambdaARN = try reader["RotationLambdaARN"].readIfPresent()
        value.rotationRules = try reader["RotationRules"].readIfPresent(with: SecretsManagerClientTypes.RotationRulesType.read(from:))
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: SecretsManagerClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.versionIdsToStages = try reader["VersionIdsToStages"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.listReadingClosure(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension GetRandomPasswordOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetRandomPasswordOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetRandomPasswordOutput()
        value.randomPassword = try reader["RandomPassword"].readIfPresent()
        return value
    }
}

extension GetResourcePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetResourcePolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetResourcePolicyOutput()
        value.arn = try reader["ARN"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.resourcePolicy = try reader["ResourcePolicy"].readIfPresent()
        return value
    }
}

extension GetSecretValueOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetSecretValueOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetSecretValueOutput()
        value.arn = try reader["ARN"].readIfPresent()
        value.createdDate = try reader["CreatedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.name = try reader["Name"].readIfPresent()
        value.secretBinary = try reader["SecretBinary"].readIfPresent()
        value.secretString = try reader["SecretString"].readIfPresent()
        value.versionId = try reader["VersionId"].readIfPresent()
        value.versionStages = try reader["VersionStages"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListSecretsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListSecretsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListSecretsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.secretList = try reader["SecretList"].readListIfPresent(memberReadingClosure: SecretsManagerClientTypes.SecretListEntry.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListSecretVersionIdsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListSecretVersionIdsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListSecretVersionIdsOutput()
        value.arn = try reader["ARN"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.versions = try reader["Versions"].readListIfPresent(memberReadingClosure: SecretsManagerClientTypes.SecretVersionsListEntry.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PutResourcePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutResourcePolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutResourcePolicyOutput()
        value.arn = try reader["ARN"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        return value
    }
}

extension PutSecretValueOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutSecretValueOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutSecretValueOutput()
        value.arn = try reader["ARN"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.versionId = try reader["VersionId"].readIfPresent()
        value.versionStages = try reader["VersionStages"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension RemoveRegionsFromReplicationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RemoveRegionsFromReplicationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RemoveRegionsFromReplicationOutput()
        value.arn = try reader["ARN"].readIfPresent()
        value.replicationStatus = try reader["ReplicationStatus"].readListIfPresent(memberReadingClosure: SecretsManagerClientTypes.ReplicationStatusType.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ReplicateSecretToRegionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ReplicateSecretToRegionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ReplicateSecretToRegionsOutput()
        value.arn = try reader["ARN"].readIfPresent()
        value.replicationStatus = try reader["ReplicationStatus"].readListIfPresent(memberReadingClosure: SecretsManagerClientTypes.ReplicationStatusType.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension RestoreSecretOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RestoreSecretOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RestoreSecretOutput()
        value.arn = try reader["ARN"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        return value
    }
}

extension RotateSecretOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RotateSecretOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RotateSecretOutput()
        value.arn = try reader["ARN"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.versionId = try reader["VersionId"].readIfPresent()
        return value
    }
}

extension StopReplicationToReplicaOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopReplicationToReplicaOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StopReplicationToReplicaOutput()
        value.arn = try reader["ARN"].readIfPresent()
        return value
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateSecretOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateSecretOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateSecretOutput()
        value.arn = try reader["ARN"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.versionId = try reader["VersionId"].readIfPresent()
        return value
    }
}

extension UpdateSecretVersionStageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateSecretVersionStageOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateSecretVersionStageOutput()
        value.arn = try reader["ARN"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        return value
    }
}

extension ValidateResourcePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ValidateResourcePolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ValidateResourcePolicyOutput()
        value.policyValidationPassed = try reader["PolicyValidationPassed"].readIfPresent() ?? false
        value.validationErrors = try reader["ValidationErrors"].readListIfPresent(memberReadingClosure: SecretsManagerClientTypes.ValidationErrorsEntry.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

enum BatchGetSecretValueOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DecryptionFailure": return try DecryptionFailure.makeError(baseError: baseError)
            case "InternalServiceError": return try InternalServiceError.makeError(baseError: baseError)
            case "InvalidNextTokenException": return try InvalidNextTokenException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CancelRotateSecretOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceError": return try InternalServiceError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateSecretOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DecryptionFailure": return try DecryptionFailure.makeError(baseError: baseError)
            case "EncryptionFailure": return try EncryptionFailure.makeError(baseError: baseError)
            case "InternalServiceError": return try InternalServiceError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "MalformedPolicyDocumentException": return try MalformedPolicyDocumentException.makeError(baseError: baseError)
            case "PreconditionNotMetException": return try PreconditionNotMetException.makeError(baseError: baseError)
            case "ResourceExistsException": return try ResourceExistsException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteResourcePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceError": return try InternalServiceError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteSecretOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceError": return try InternalServiceError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeSecretOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceError": return try InternalServiceError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetRandomPasswordOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceError": return try InternalServiceError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetResourcePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceError": return try InternalServiceError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetSecretValueOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DecryptionFailure": return try DecryptionFailure.makeError(baseError: baseError)
            case "InternalServiceError": return try InternalServiceError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListSecretsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceError": return try InternalServiceError.makeError(baseError: baseError)
            case "InvalidNextTokenException": return try InvalidNextTokenException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListSecretVersionIdsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceError": return try InternalServiceError.makeError(baseError: baseError)
            case "InvalidNextTokenException": return try InvalidNextTokenException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutResourcePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceError": return try InternalServiceError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "MalformedPolicyDocumentException": return try MalformedPolicyDocumentException.makeError(baseError: baseError)
            case "PublicPolicyException": return try PublicPolicyException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutSecretValueOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DecryptionFailure": return try DecryptionFailure.makeError(baseError: baseError)
            case "EncryptionFailure": return try EncryptionFailure.makeError(baseError: baseError)
            case "InternalServiceError": return try InternalServiceError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceExistsException": return try ResourceExistsException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RemoveRegionsFromReplicationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceError": return try InternalServiceError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ReplicateSecretToRegionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceError": return try InternalServiceError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RestoreSecretOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceError": return try InternalServiceError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RotateSecretOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceError": return try InternalServiceError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopReplicationToReplicaOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceError": return try InternalServiceError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceError": return try InternalServiceError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceError": return try InternalServiceError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateSecretOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DecryptionFailure": return try DecryptionFailure.makeError(baseError: baseError)
            case "EncryptionFailure": return try EncryptionFailure.makeError(baseError: baseError)
            case "InternalServiceError": return try InternalServiceError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "MalformedPolicyDocumentException": return try MalformedPolicyDocumentException.makeError(baseError: baseError)
            case "PreconditionNotMetException": return try PreconditionNotMetException.makeError(baseError: baseError)
            case "ResourceExistsException": return try ResourceExistsException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateSecretVersionStageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceError": return try InternalServiceError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ValidateResourcePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceError": return try InternalServiceError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "MalformedPolicyDocumentException": return try MalformedPolicyDocumentException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension InvalidNextTokenException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidNextTokenException {
        let reader = baseError.errorBodyReader
        var value = InvalidNextTokenException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DecryptionFailure {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> DecryptionFailure {
        let reader = baseError.errorBodyReader
        var value = DecryptionFailure()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidParameterException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidParameterException {
        let reader = baseError.errorBodyReader
        var value = InvalidParameterException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidRequestException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidRequestException {
        let reader = baseError.errorBodyReader
        var value = InvalidRequestException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServiceError {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InternalServiceError {
        let reader = baseError.errorBodyReader
        var value = InternalServiceError()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension EncryptionFailure {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> EncryptionFailure {
        let reader = baseError.errorBodyReader
        var value = EncryptionFailure()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceExistsException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceExistsException {
        let reader = baseError.errorBodyReader
        var value = ResourceExistsException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension PreconditionNotMetException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> PreconditionNotMetException {
        let reader = baseError.errorBodyReader
        var value = PreconditionNotMetException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension MalformedPolicyDocumentException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> MalformedPolicyDocumentException {
        let reader = baseError.errorBodyReader
        var value = MalformedPolicyDocumentException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension LimitExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> LimitExceededException {
        let reader = baseError.errorBodyReader
        var value = LimitExceededException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension PublicPolicyException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> PublicPolicyException {
        let reader = baseError.errorBodyReader
        var value = PublicPolicyException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SecretsManagerClientTypes.SecretValueEntry {

    static func read(from reader: SmithyJSON.Reader) throws -> SecretsManagerClientTypes.SecretValueEntry {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SecretsManagerClientTypes.SecretValueEntry()
        value.arn = try reader["ARN"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.versionId = try reader["VersionId"].readIfPresent()
        value.secretBinary = try reader["SecretBinary"].readIfPresent()
        value.secretString = try reader["SecretString"].readIfPresent()
        value.versionStages = try reader["VersionStages"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.createdDate = try reader["CreatedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension SecretsManagerClientTypes.APIErrorType {

    static func read(from reader: SmithyJSON.Reader) throws -> SecretsManagerClientTypes.APIErrorType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SecretsManagerClientTypes.APIErrorType()
        value.secretId = try reader["SecretId"].readIfPresent()
        value.errorCode = try reader["ErrorCode"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension SecretsManagerClientTypes.ReplicationStatusType {

    static func read(from reader: SmithyJSON.Reader) throws -> SecretsManagerClientTypes.ReplicationStatusType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SecretsManagerClientTypes.ReplicationStatusType()
        value.region = try reader["Region"].readIfPresent()
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.statusMessage = try reader["StatusMessage"].readIfPresent()
        value.lastAccessedDate = try reader["LastAccessedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension SecretsManagerClientTypes.RotationRulesType {

    static func write(value: SecretsManagerClientTypes.RotationRulesType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AutomaticallyAfterDays"].write(value.automaticallyAfterDays)
        try writer["Duration"].write(value.duration)
        try writer["ScheduleExpression"].write(value.scheduleExpression)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SecretsManagerClientTypes.RotationRulesType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SecretsManagerClientTypes.RotationRulesType()
        value.automaticallyAfterDays = try reader["AutomaticallyAfterDays"].readIfPresent()
        value.duration = try reader["Duration"].readIfPresent()
        value.scheduleExpression = try reader["ScheduleExpression"].readIfPresent()
        return value
    }
}

extension SecretsManagerClientTypes.Tag {

    static func write(value: SecretsManagerClientTypes.Tag?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SecretsManagerClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SecretsManagerClientTypes.Tag()
        value.key = try reader["Key"].readIfPresent()
        value.value = try reader["Value"].readIfPresent()
        return value
    }
}

extension SecretsManagerClientTypes.SecretListEntry {

    static func read(from reader: SmithyJSON.Reader) throws -> SecretsManagerClientTypes.SecretListEntry {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SecretsManagerClientTypes.SecretListEntry()
        value.arn = try reader["ARN"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        value.rotationEnabled = try reader["RotationEnabled"].readIfPresent()
        value.rotationLambdaARN = try reader["RotationLambdaARN"].readIfPresent()
        value.rotationRules = try reader["RotationRules"].readIfPresent(with: SecretsManagerClientTypes.RotationRulesType.read(from:))
        value.lastRotatedDate = try reader["LastRotatedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastChangedDate = try reader["LastChangedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastAccessedDate = try reader["LastAccessedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.deletedDate = try reader["DeletedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.nextRotationDate = try reader["NextRotationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: SecretsManagerClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.secretVersionsToStages = try reader["SecretVersionsToStages"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.listReadingClosure(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.owningService = try reader["OwningService"].readIfPresent()
        value.createdDate = try reader["CreatedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.primaryRegion = try reader["PrimaryRegion"].readIfPresent()
        return value
    }
}

extension SecretsManagerClientTypes.SecretVersionsListEntry {

    static func read(from reader: SmithyJSON.Reader) throws -> SecretsManagerClientTypes.SecretVersionsListEntry {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SecretsManagerClientTypes.SecretVersionsListEntry()
        value.versionId = try reader["VersionId"].readIfPresent()
        value.versionStages = try reader["VersionStages"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.lastAccessedDate = try reader["LastAccessedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.createdDate = try reader["CreatedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.kmsKeyIds = try reader["KmsKeyIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SecretsManagerClientTypes.ValidationErrorsEntry {

    static func read(from reader: SmithyJSON.Reader) throws -> SecretsManagerClientTypes.ValidationErrorsEntry {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SecretsManagerClientTypes.ValidationErrorsEntry()
        value.checkName = try reader["CheckName"].readIfPresent()
        value.errorMessage = try reader["ErrorMessage"].readIfPresent()
        return value
    }
}

extension SecretsManagerClientTypes.Filter {

    static func write(value: SecretsManagerClientTypes.Filter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension SecretsManagerClientTypes.ReplicaRegionType {

    static func write(value: SecretsManagerClientTypes.ReplicaRegionType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["Region"].write(value.region)
    }
}

public enum SecretsManagerClientTypes {}
