// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// CodeCommit This is the CodeCommit API Reference. This reference provides descriptions of the operations and data types for CodeCommit API along with usage examples. You can use the CodeCommit API to work with the following objects: Repositories, by calling the following:
///
/// * [BatchGetRepositories], which returns information about one or more repositories associated with your Amazon Web Services account.
///
/// * [CreateRepository], which creates an CodeCommit repository.
///
/// * [DeleteRepository], which deletes an CodeCommit repository.
///
/// * [GetRepository], which returns information about a specified repository.
///
/// * [ListRepositories], which lists all CodeCommit repositories associated with your Amazon Web Services account.
///
/// * [UpdateRepositoryDescription], which sets or updates the description of the repository.
///
/// * [UpdateRepositoryName], which changes the name of the repository. If you change the name of a repository, no other users of that repository can access it until you send them the new HTTPS or SSH URL to use.
///
///
/// Branches, by calling the following:
///
/// * [CreateBranch], which creates a branch in a specified repository.
///
/// * [DeleteBranch], which deletes the specified branch in a repository unless it is the default branch.
///
/// * [GetBranch], which returns information about a specified branch.
///
/// * [ListBranches], which lists all branches for a specified repository.
///
/// * [UpdateDefaultBranch], which changes the default branch for a repository.
///
///
/// Files, by calling the following:
///
/// * [DeleteFile], which deletes the content of a specified file from a specified branch.
///
/// * [GetBlob], which returns the base-64 encoded content of an individual Git blob object in a repository.
///
/// * [GetFile], which returns the base-64 encoded content of a specified file.
///
/// * [GetFolder], which returns the contents of a specified folder or directory.
///
/// * [ListFileCommitHistory], which retrieves a list of commits and changes to a specified file.
///
/// * [PutFile], which adds or modifies a single file in a specified repository and branch.
///
///
/// Commits, by calling the following:
///
/// * [BatchGetCommits], which returns information about one or more commits in a repository.
///
/// * [CreateCommit], which creates a commit for changes to a repository.
///
/// * [GetCommit], which returns information about a commit, including commit messages and author and committer information.
///
/// * [GetDifferences], which returns information about the differences in a valid commit specifier (such as a branch, tag, HEAD, commit ID, or other fully qualified reference).
///
///
/// Merges, by calling the following:
///
/// * [BatchDescribeMergeConflicts], which returns information about conflicts in a merge between commits in a repository.
///
/// * [CreateUnreferencedMergeCommit], which creates an unreferenced commit between two branches or commits for the purpose of comparing them and identifying any potential conflicts.
///
/// * [DescribeMergeConflicts], which returns information about merge conflicts between the base, source, and destination versions of a file in a potential merge.
///
/// * [GetMergeCommit], which returns information about the merge between a source and destination commit.
///
/// * [GetMergeConflicts], which returns information about merge conflicts between the source and destination branch in a pull request.
///
/// * [GetMergeOptions], which returns information about the available merge options between two branches or commit specifiers.
///
/// * [MergeBranchesByFastForward], which merges two branches using the fast-forward merge option.
///
/// * [MergeBranchesBySquash], which merges two branches using the squash merge option.
///
/// * [MergeBranchesByThreeWay], which merges two branches using the three-way merge option.
///
///
/// Pull requests, by calling the following:
///
/// * [CreatePullRequest], which creates a pull request in a specified repository.
///
/// * [CreatePullRequestApprovalRule], which creates an approval rule for a specified pull request.
///
/// * [DeletePullRequestApprovalRule], which deletes an approval rule for a specified pull request.
///
/// * [DescribePullRequestEvents], which returns information about one or more pull request events.
///
/// * [EvaluatePullRequestApprovalRules], which evaluates whether a pull request has met all the conditions specified in its associated approval rules.
///
/// * [GetCommentsForPullRequest], which returns information about comments on a specified pull request.
///
/// * [GetPullRequest], which returns information about a specified pull request.
///
/// * [GetPullRequestApprovalStates], which returns information about the approval states for a specified pull request.
///
/// * [GetPullRequestOverrideState], which returns information about whether approval rules have been set aside (overriden) for a pull request, and if so, the Amazon Resource Name (ARN) of the user or identity that overrode the rules and their requirements for the pull request.
///
/// * [ListPullRequests], which lists all pull requests for a repository.
///
/// * [MergePullRequestByFastForward], which merges the source destination branch of a pull request into the specified destination branch for that pull request using the fast-forward merge option.
///
/// * [MergePullRequestBySquash], which merges the source destination branch of a pull request into the specified destination branch for that pull request using the squash merge option.
///
/// * [MergePullRequestByThreeWay], which merges the source destination branch of a pull request into the specified destination branch for that pull request using the three-way merge option.
///
/// * [OverridePullRequestApprovalRules], which sets aside all approval rule requirements for a pull request.
///
/// * [PostCommentForPullRequest], which posts a comment to a pull request at the specified line, file, or request.
///
/// * [UpdatePullRequestApprovalRuleContent], which updates the structure of an approval rule for a pull request.
///
/// * [UpdatePullRequestApprovalState], which updates the state of an approval on a pull request.
///
/// * [UpdatePullRequestDescription], which updates the description of a pull request.
///
/// * [UpdatePullRequestStatus], which updates the status of a pull request.
///
/// * [UpdatePullRequestTitle], which updates the title of a pull request.
///
///
/// Approval rule templates, by calling the following:
///
/// * [AssociateApprovalRuleTemplateWithRepository], which associates a template with a specified repository. After the template is associated with a repository, CodeCommit creates approval rules that match the template conditions on every pull request created in the specified repository.
///
/// * [BatchAssociateApprovalRuleTemplateWithRepositories], which associates a template with one or more specified repositories. After the template is associated with a repository, CodeCommit creates approval rules that match the template conditions on every pull request created in the specified repositories.
///
/// * [BatchDisassociateApprovalRuleTemplateFromRepositories], which removes the association between a template and specified repositories so that approval rules based on the template are not automatically created when pull requests are created in those repositories.
///
/// * [CreateApprovalRuleTemplate], which creates a template for approval rules that can then be associated with one or more repositories in your Amazon Web Services account.
///
/// * [DeleteApprovalRuleTemplate], which deletes the specified template. It does not remove approval rules on pull requests already created with the template.
///
/// * [DisassociateApprovalRuleTemplateFromRepository], which removes the association between a template and a repository so that approval rules based on the template are not automatically created when pull requests are created in the specified repository.
///
/// * [GetApprovalRuleTemplate], which returns information about an approval rule template.
///
/// * [ListApprovalRuleTemplates], which lists all approval rule templates in the Amazon Web Services Region in your Amazon Web Services account.
///
/// * [ListAssociatedApprovalRuleTemplatesForRepository], which lists all approval rule templates that are associated with a specified repository.
///
/// * [ListRepositoriesForApprovalRuleTemplate], which lists all repositories associated with the specified approval rule template.
///
/// * [UpdateApprovalRuleTemplateDescription], which updates the description of an approval rule template.
///
/// * [UpdateApprovalRuleTemplateName], which updates the name of an approval rule template.
///
/// * [UpdateApprovalRuleTemplateContent], which updates the content of an approval rule template.
///
///
/// Comments in a repository, by calling the following:
///
/// * [DeleteCommentContent], which deletes the content of a comment on a commit in a repository.
///
/// * [GetComment], which returns information about a comment on a commit.
///
/// * [GetCommentReactions], which returns information about emoji reactions to comments.
///
/// * [GetCommentsForComparedCommit], which returns information about comments on the comparison between two commit specifiers in a repository.
///
/// * [PostCommentForComparedCommit], which creates a comment on the comparison between two commit specifiers in a repository.
///
/// * [PostCommentReply], which creates a reply to a comment.
///
/// * [PutCommentReaction], which creates or updates an emoji reaction to a comment.
///
/// * [UpdateComment], which updates the content of a comment on a commit in a repository.
///
///
/// Tags used to tag resources in CodeCommit (not Git tags), by calling the following:
///
/// * [ListTagsForResource], which gets information about Amazon Web Servicestags for a specified Amazon Resource Name (ARN) in CodeCommit.
///
/// * [TagResource], which adds or updates tags for a resource in CodeCommit.
///
/// * [UntagResource], which removes tags for a resource in CodeCommit.
///
///
/// Triggers, by calling the following:
///
/// * [GetRepositoryTriggers], which returns information about triggers configured for a repository.
///
/// * [PutRepositoryTriggers], which replaces all triggers for a repository and can be used to create or delete triggers.
///
/// * [TestRepositoryTriggers], which tests the functionality of a repository trigger by sending data to the trigger target.
///
///
/// For information about how to use CodeCommit, see the [CodeCommit User Guide](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html).
public protocol CodeCommitClientProtocol {
    /// Creates an association between an approval rule template and a specified repository. Then, the next time a pull request is created in the repository where the destination reference (if specified) matches the destination reference (branch) for the pull request, an approval rule that matches the template conditions is automatically created for that pull request. If no destination references are specified in the template, an approval rule that matches the template contents is created for all pull requests in that repository.
    ///
    /// - Parameter AssociateApprovalRuleTemplateWithRepositoryInput : [no documentation found]
    ///
    /// - Returns: `AssociateApprovalRuleTemplateWithRepositoryOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ApprovalRuleTemplateDoesNotExistException` : The specified approval rule template does not exist. Verify that the name is correct and that you are signed in to the Amazon Web Services Region where the template was created, and then try again.
    /// - `ApprovalRuleTemplateNameRequiredException` : An approval rule template name is required, but was not specified.
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `InvalidApprovalRuleTemplateNameException` : The name of the approval rule template is not valid. Template names must be between 1 and 100 valid characters in length. For more information about limits in CodeCommit, see [Quotas](https://docs.aws.amazon.com/codecommit/latest/userguide/limits.html) in the CodeCommit User Guide.
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `MaximumRuleTemplatesAssociatedWithRepositoryException` : The maximum number of approval rule templates for a repository has been exceeded. You cannot associate more than 25 approval rule templates with a repository.
    /// - `RepositoryDoesNotExistException` : The specified repository does not exist.
    /// - `RepositoryNameRequiredException` : A repository name is required, but was not specified.
    func associateApprovalRuleTemplateWithRepository(input: AssociateApprovalRuleTemplateWithRepositoryInput) async throws -> AssociateApprovalRuleTemplateWithRepositoryOutput
    /// Creates an association between an approval rule template and one or more specified repositories.
    ///
    /// - Parameter BatchAssociateApprovalRuleTemplateWithRepositoriesInput : [no documentation found]
    ///
    /// - Returns: `BatchAssociateApprovalRuleTemplateWithRepositoriesOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ApprovalRuleTemplateDoesNotExistException` : The specified approval rule template does not exist. Verify that the name is correct and that you are signed in to the Amazon Web Services Region where the template was created, and then try again.
    /// - `ApprovalRuleTemplateNameRequiredException` : An approval rule template name is required, but was not specified.
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `InvalidApprovalRuleTemplateNameException` : The name of the approval rule template is not valid. Template names must be between 1 and 100 valid characters in length. For more information about limits in CodeCommit, see [Quotas](https://docs.aws.amazon.com/codecommit/latest/userguide/limits.html) in the CodeCommit User Guide.
    /// - `MaximumRepositoryNamesExceededException` : The maximum number of allowed repository names was exceeded. Currently, this number is 100.
    /// - `RepositoryNamesRequiredException` : At least one repository name object is required, but was not specified.
    func batchAssociateApprovalRuleTemplateWithRepositories(input: BatchAssociateApprovalRuleTemplateWithRepositoriesInput) async throws -> BatchAssociateApprovalRuleTemplateWithRepositoriesOutput
    /// Returns information about one or more merge conflicts in the attempted merge of two commit specifiers using the squash or three-way merge strategy.
    ///
    /// - Parameter BatchDescribeMergeConflictsInput : [no documentation found]
    ///
    /// - Returns: `BatchDescribeMergeConflictsOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `CommitDoesNotExistException` : The specified commit does not exist or no commit was specified, and the specified repository has no default branch.
    /// - `CommitRequiredException` : A commit was not specified.
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `InvalidCommitException` : The specified commit is not valid.
    /// - `InvalidConflictDetailLevelException` : The specified conflict detail level is not valid.
    /// - `InvalidConflictResolutionStrategyException` : The specified conflict resolution strategy is not valid.
    /// - `InvalidContinuationTokenException` : The specified continuation token is not valid.
    /// - `InvalidMaxConflictFilesException` : The specified value for the number of conflict files to return is not valid.
    /// - `InvalidMaxMergeHunksException` : The specified value for the number of merge hunks to return is not valid.
    /// - `InvalidMergeOptionException` : The specified merge option is not valid for this operation. Not all merge strategies are supported for all operations.
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `MaximumFileContentToLoadExceededException` : The number of files to load exceeds the allowed limit.
    /// - `MaximumItemsToCompareExceededException` : The number of items to compare between the source or destination branches and the merge base has exceeded the maximum allowed.
    /// - `MergeOptionRequiredException` : A merge option or stategy is required, and none was provided.
    /// - `RepositoryDoesNotExistException` : The specified repository does not exist.
    /// - `RepositoryNameRequiredException` : A repository name is required, but was not specified.
    /// - `TipsDivergenceExceededException` : The divergence between the tips of the provided commit specifiers is too great to determine whether there might be any merge conflicts. Locally compare the specifiers using git diff or a diff tool.
    func batchDescribeMergeConflicts(input: BatchDescribeMergeConflictsInput) async throws -> BatchDescribeMergeConflictsOutput
    /// Removes the association between an approval rule template and one or more specified repositories.
    ///
    /// - Parameter BatchDisassociateApprovalRuleTemplateFromRepositoriesInput : [no documentation found]
    ///
    /// - Returns: `BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ApprovalRuleTemplateDoesNotExistException` : The specified approval rule template does not exist. Verify that the name is correct and that you are signed in to the Amazon Web Services Region where the template was created, and then try again.
    /// - `ApprovalRuleTemplateNameRequiredException` : An approval rule template name is required, but was not specified.
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `InvalidApprovalRuleTemplateNameException` : The name of the approval rule template is not valid. Template names must be between 1 and 100 valid characters in length. For more information about limits in CodeCommit, see [Quotas](https://docs.aws.amazon.com/codecommit/latest/userguide/limits.html) in the CodeCommit User Guide.
    /// - `MaximumRepositoryNamesExceededException` : The maximum number of allowed repository names was exceeded. Currently, this number is 100.
    /// - `RepositoryNamesRequiredException` : At least one repository name object is required, but was not specified.
    func batchDisassociateApprovalRuleTemplateFromRepositories(input: BatchDisassociateApprovalRuleTemplateFromRepositoriesInput) async throws -> BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput
    /// Returns information about the contents of one or more commits in a repository.
    ///
    /// - Parameter BatchGetCommitsInput : [no documentation found]
    ///
    /// - Returns: `BatchGetCommitsOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `CommitIdsLimitExceededException` : The maximum number of allowed commit IDs in a batch request is 100. Verify that your batch requests contains no more than 100 commit IDs, and then try again.
    /// - `CommitIdsListRequiredException` : A list of commit IDs is required, but was either not specified or the list was empty.
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `RepositoryDoesNotExistException` : The specified repository does not exist.
    /// - `RepositoryNameRequiredException` : A repository name is required, but was not specified.
    func batchGetCommits(input: BatchGetCommitsInput) async throws -> BatchGetCommitsOutput
    /// Returns information about one or more repositories. The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a webpage can expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a webpage.
    ///
    /// - Parameter BatchGetRepositoriesInput : Represents the input of a batch get repositories operation.
    ///
    /// - Returns: `BatchGetRepositoriesOutput` : Represents the output of a batch get repositories operation.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `MaximumRepositoryNamesExceededException` : The maximum number of allowed repository names was exceeded. Currently, this number is 100.
    /// - `RepositoryNamesRequiredException` : At least one repository name object is required, but was not specified.
    func batchGetRepositories(input: BatchGetRepositoriesInput) async throws -> BatchGetRepositoriesOutput
    /// Creates a template for approval rules that can then be associated with one or more repositories in your Amazon Web Services account. When you associate a template with a repository, CodeCommit creates an approval rule that matches the conditions of the template for all pull requests that meet the conditions of the template. For more information, see [AssociateApprovalRuleTemplateWithRepository].
    ///
    /// - Parameter CreateApprovalRuleTemplateInput : [no documentation found]
    ///
    /// - Returns: `CreateApprovalRuleTemplateOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ApprovalRuleTemplateContentRequiredException` : The content for the approval rule template is empty. You must provide some content for an approval rule template. The content cannot be null.
    /// - `ApprovalRuleTemplateNameAlreadyExistsException` : You cannot create an approval rule template with that name because a template with that name already exists in this Amazon Web Services Region for your Amazon Web Services account. Approval rule template names must be unique.
    /// - `ApprovalRuleTemplateNameRequiredException` : An approval rule template name is required, but was not specified.
    /// - `InvalidApprovalRuleTemplateContentException` : The content of the approval rule template is not valid.
    /// - `InvalidApprovalRuleTemplateDescriptionException` : The description for the approval rule template is not valid because it exceeds the maximum characters allowed for a description. For more information about limits in CodeCommit, see [Quotas](https://docs.aws.amazon.com/codecommit/latest/userguide/limits.html) in the CodeCommit User Guide.
    /// - `InvalidApprovalRuleTemplateNameException` : The name of the approval rule template is not valid. Template names must be between 1 and 100 valid characters in length. For more information about limits in CodeCommit, see [Quotas](https://docs.aws.amazon.com/codecommit/latest/userguide/limits.html) in the CodeCommit User Guide.
    /// - `NumberOfRuleTemplatesExceededException` : The maximum number of approval rule templates has been exceeded for this Amazon Web Services Region.
    func createApprovalRuleTemplate(input: CreateApprovalRuleTemplateInput) async throws -> CreateApprovalRuleTemplateOutput
    /// Creates a branch in a repository and points the branch to a commit. Calling the create branch operation does not set a repository's default branch. To do this, call the update default branch operation.
    ///
    /// - Parameter CreateBranchInput : Represents the input of a create branch operation.
    ///
    /// - Returns: `CreateBranchOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `BranchNameExistsException` : Cannot create the branch with the specified name because the commit conflicts with an existing branch with the same name. Branch names must be unique.
    /// - `BranchNameRequiredException` : A branch name is required, but was not specified.
    /// - `CommitDoesNotExistException` : The specified commit does not exist or no commit was specified, and the specified repository has no default branch.
    /// - `CommitIdRequiredException` : A commit ID was not specified.
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `InvalidBranchNameException` : The specified reference name is not valid.
    /// - `InvalidCommitIdException` : The specified commit ID is not valid.
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `RepositoryDoesNotExistException` : The specified repository does not exist.
    /// - `RepositoryNameRequiredException` : A repository name is required, but was not specified.
    func createBranch(input: CreateBranchInput) async throws -> CreateBranchOutput
    /// Creates a commit for a repository on the tip of a specified branch.
    ///
    /// - Parameter CreateCommitInput : [no documentation found]
    ///
    /// - Returns: `CreateCommitOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `BranchDoesNotExistException` : The specified branch does not exist.
    /// - `BranchNameIsTagNameException` : The specified branch name is not valid because it is a tag name. Enter the name of a branch in the repository. For a list of valid branch names, use [ListBranches].
    /// - `BranchNameRequiredException` : A branch name is required, but was not specified.
    /// - `CommitMessageLengthExceededException` : The commit message is too long. Provide a shorter string.
    /// - `DirectoryNameConflictsWithFileNameException` : A file cannot be added to the repository because the specified path name has the same name as a file that already exists in this repository. Either provide a different name for the file, or specify a different path for the file.
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `FileContentAndSourceFileSpecifiedException` : The commit cannot be created because both a source file and file content have been specified for the same file. You cannot provide both. Either specify a source file or provide the file content directly.
    /// - `FileContentSizeLimitExceededException` : The file cannot be added because it is too large. The maximum file size is 6 MB, and the combined file content change size is 7 MB. Consider making these changes using a Git client.
    /// - `FileDoesNotExistException` : The specified file does not exist. Verify that you have used the correct file name, full path, and extension.
    /// - `FileEntryRequiredException` : The commit cannot be created because no files have been specified as added, updated, or changed (PutFile or DeleteFile) for the commit.
    /// - `FileModeRequiredException` : The commit cannot be created because no file mode has been specified. A file mode is required to update mode permissions for a file.
    /// - `FileNameConflictsWithDirectoryNameException` : A file cannot be added to the repository because the specified file name has the same name as a directory in this repository. Either provide another name for the file, or add the file in a directory that does not match the file name.
    /// - `FilePathConflictsWithSubmodulePathException` : The commit cannot be created because a specified file path points to a submodule. Verify that the destination files have valid file paths that do not point to a submodule.
    /// - `FolderContentSizeLimitExceededException` : The commit cannot be created because at least one of the overall changes in the commit results in a folder whose contents exceed the limit of 6 MB. Either reduce the number and size of your changes, or split the changes across multiple folders.
    /// - `InvalidBranchNameException` : The specified reference name is not valid.
    /// - `InvalidDeletionParameterException` : The specified deletion parameter is not valid.
    /// - `InvalidEmailException` : The specified email address either contains one or more characters that are not allowed, or it exceeds the maximum number of characters allowed for an email address.
    /// - `InvalidFileModeException` : The specified file mode permission is not valid. For a list of valid file mode permissions, see [PutFile].
    /// - `InvalidParentCommitIdException` : The parent commit ID is not valid. The commit ID cannot be empty, and must match the head commit ID for the branch of the repository where you want to add or update a file.
    /// - `InvalidPathException` : The specified path is not valid.
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `MaximumFileEntriesExceededException` : The number of specified files to change as part of this commit exceeds the maximum number of files that can be changed in a single commit. Consider using a Git client for these changes.
    /// - `NameLengthExceededException` : The user name is not valid because it has exceeded the character limit for author names.
    /// - `NoChangeException` : The commit cannot be created because no changes will be made to the repository as a result of this commit. A commit must contain at least one change.
    /// - `ParentCommitDoesNotExistException` : The parent commit ID is not valid because it does not exist. The specified parent commit ID does not exist in the specified branch of the repository.
    /// - `ParentCommitIdOutdatedException` : The file could not be added because the provided parent commit ID is not the current tip of the specified branch. To view the full commit ID of the current head of the branch, use [GetBranch].
    /// - `ParentCommitIdRequiredException` : A parent commit ID is required. To view the full commit ID of a branch in a repository, use [GetBranch] or a Git command (for example, git pull or git log).
    /// - `PathRequiredException` : The folderPath for a location cannot be null.
    /// - `PutFileEntryConflictException` : The commit cannot be created because one or more files specified in the commit reference both a file and a folder.
    /// - `RepositoryDoesNotExistException` : The specified repository does not exist.
    /// - `RepositoryNameRequiredException` : A repository name is required, but was not specified.
    /// - `RestrictedSourceFileException` : The commit cannot be created because one of the changes specifies copying or moving a .gitkeep file.
    /// - `SamePathRequestException` : The commit cannot be created because one or more changes in this commit duplicate actions in the same file path. For example, you cannot make the same delete request to the same file in the same file path twice, or make a delete request and a move request to the same file as part of the same commit.
    /// - `SourceFileOrContentRequiredException` : The commit cannot be created because no source files or file content have been specified for the commit.
    func createCommit(input: CreateCommitInput) async throws -> CreateCommitOutput
    /// Creates a pull request in the specified repository.
    ///
    /// - Parameter CreatePullRequestInput : [no documentation found]
    ///
    /// - Returns: `CreatePullRequestOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ClientRequestTokenRequiredException` : A client request token is required. A client request token is an unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token.
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `IdempotencyParameterMismatchException` : The client request token is not valid. Either the token is not in a valid format, or the token has been used in a previous request and cannot be reused.
    /// - `InvalidClientRequestTokenException` : The client request token is not valid.
    /// - `InvalidDescriptionException` : The pull request description is not valid. Descriptions cannot be more than 1,000 characters.
    /// - `InvalidReferenceNameException` : The specified reference name format is not valid. Reference names must conform to the Git references format (for example, refs/heads/main). For more information, see [Git Internals - Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References) or consult your Git documentation.
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `InvalidTargetException` : The target for the pull request is not valid. A target must contain the full values for the repository name, source branch, and destination branch for the pull request.
    /// - `InvalidTargetsException` : The targets for the pull request is not valid or not in a valid format. Targets are a list of target objects. Each target object must contain the full values for the repository name, source branch, and destination branch for a pull request.
    /// - `InvalidTitleException` : The title of the pull request is not valid. Pull request titles cannot exceed 100 characters in length.
    /// - `MaximumOpenPullRequestsExceededException` : You cannot create the pull request because the repository has too many open pull requests. The maximum number of open pull requests for a repository is 1,000. Close one or more open pull requests, and then try again.
    /// - `MultipleRepositoriesInPullRequestException` : You cannot include more than one repository in a pull request. Make sure you have specified only one repository name in your request, and then try again.
    /// - `ReferenceDoesNotExistException` : The specified reference does not exist. You must provide a full commit ID.
    /// - `ReferenceNameRequiredException` : A reference name is required, but none was provided.
    /// - `ReferenceTypeNotSupportedException` : The specified reference is not a supported type.
    /// - `RepositoryDoesNotExistException` : The specified repository does not exist.
    /// - `RepositoryNameRequiredException` : A repository name is required, but was not specified.
    /// - `SourceAndDestinationAreSameException` : The source branch and destination branch for the pull request are the same. You must specify different branches for the source and destination.
    /// - `TargetRequiredException` : A pull request target is required. It cannot be empty or null. A pull request target must contain the full values for the repository name, source branch, and destination branch for the pull request.
    /// - `TargetsRequiredException` : An array of target objects is required. It cannot be empty or null.
    /// - `TitleRequiredException` : A pull request title is required. It cannot be empty or null.
    func createPullRequest(input: CreatePullRequestInput) async throws -> CreatePullRequestOutput
    /// Creates an approval rule for a pull request.
    ///
    /// - Parameter CreatePullRequestApprovalRuleInput : [no documentation found]
    ///
    /// - Returns: `CreatePullRequestApprovalRuleOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ApprovalRuleContentRequiredException` : The content for the approval rule is empty. You must provide some content for an approval rule. The content cannot be null.
    /// - `ApprovalRuleNameAlreadyExistsException` : An approval rule with that name already exists. Approval rule names must be unique within the scope of a pull request.
    /// - `ApprovalRuleNameRequiredException` : An approval rule name is required, but was not specified.
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `InvalidApprovalRuleContentException` : The content for the approval rule is not valid.
    /// - `InvalidApprovalRuleNameException` : The name for the approval rule is not valid.
    /// - `InvalidPullRequestIdException` : The pull request ID is not valid. Make sure that you have provided the full ID and that the pull request is in the specified repository, and then try again.
    /// - `NumberOfRulesExceededException` : The approval rule cannot be added. The pull request has the maximum number of approval rules associated with it.
    /// - `PullRequestAlreadyClosedException` : The pull request status cannot be updated because it is already closed.
    /// - `PullRequestDoesNotExistException` : The pull request ID could not be found. Make sure that you have specified the correct repository name and pull request ID, and then try again.
    /// - `PullRequestIdRequiredException` : A pull request ID is required, but none was provided.
    func createPullRequestApprovalRule(input: CreatePullRequestApprovalRuleInput) async throws -> CreatePullRequestApprovalRuleOutput
    /// Creates a new, empty repository.
    ///
    /// - Parameter CreateRepositoryInput : Represents the input of a create repository operation.
    ///
    /// - Returns: `CreateRepositoryOutput` : Represents the output of a create repository operation.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `InvalidRepositoryDescriptionException` : The specified repository description is not valid.
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `InvalidSystemTagUsageException` : The specified tag is not valid. Key names cannot be prefixed with aws:.
    /// - `InvalidTagsMapException` : The map of tags is not valid.
    /// - `RepositoryLimitExceededException` : A repository resource limit was exceeded.
    /// - `RepositoryNameExistsException` : The specified repository name already exists.
    /// - `RepositoryNameRequiredException` : A repository name is required, but was not specified.
    /// - `TagPolicyException` : The tag policy is not valid.
    /// - `TooManyTagsException` : The maximum number of tags for an CodeCommit resource has been exceeded.
    func createRepository(input: CreateRepositoryInput) async throws -> CreateRepositoryOutput
    /// Creates an unreferenced commit that represents the result of merging two branches using a specified merge strategy. This can help you determine the outcome of a potential merge. This API cannot be used with the fast-forward merge strategy because that strategy does not create a merge commit. This unreferenced merge commit can only be accessed using the GetCommit API or through git commands such as git fetch. To retrieve this commit, you must specify its commit ID or otherwise reference it.
    ///
    /// - Parameter CreateUnreferencedMergeCommitInput : [no documentation found]
    ///
    /// - Returns: `CreateUnreferencedMergeCommitOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `CommitDoesNotExistException` : The specified commit does not exist or no commit was specified, and the specified repository has no default branch.
    /// - `CommitMessageLengthExceededException` : The commit message is too long. Provide a shorter string.
    /// - `CommitRequiredException` : A commit was not specified.
    /// - `ConcurrentReferenceUpdateException` : The merge cannot be completed because the target branch has been modified. Another user might have modified the target branch while the merge was in progress. Wait a few minutes, and then try again.
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `FileContentSizeLimitExceededException` : The file cannot be added because it is too large. The maximum file size is 6 MB, and the combined file content change size is 7 MB. Consider making these changes using a Git client.
    /// - `FileModeRequiredException` : The commit cannot be created because no file mode has been specified. A file mode is required to update mode permissions for a file.
    /// - `FolderContentSizeLimitExceededException` : The commit cannot be created because at least one of the overall changes in the commit results in a folder whose contents exceed the limit of 6 MB. Either reduce the number and size of your changes, or split the changes across multiple folders.
    /// - `InvalidCommitException` : The specified commit is not valid.
    /// - `InvalidConflictDetailLevelException` : The specified conflict detail level is not valid.
    /// - `InvalidConflictResolutionException` : The specified conflict resolution list is not valid.
    /// - `InvalidConflictResolutionStrategyException` : The specified conflict resolution strategy is not valid.
    /// - `InvalidEmailException` : The specified email address either contains one or more characters that are not allowed, or it exceeds the maximum number of characters allowed for an email address.
    /// - `InvalidFileModeException` : The specified file mode permission is not valid. For a list of valid file mode permissions, see [PutFile].
    /// - `InvalidMergeOptionException` : The specified merge option is not valid for this operation. Not all merge strategies are supported for all operations.
    /// - `InvalidPathException` : The specified path is not valid.
    /// - `InvalidReplacementContentException` : Automerge was specified for resolving the conflict, but the replacement type is not valid or content is missing.
    /// - `InvalidReplacementTypeException` : Automerge was specified for resolving the conflict, but the specified replacement type is not valid.
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `ManualMergeRequiredException` : The pull request cannot be merged automatically into the destination branch. You must manually merge the branches and resolve any conflicts.
    /// - `MaximumConflictResolutionEntriesExceededException` : The number of allowed conflict resolution entries was exceeded.
    /// - `MaximumFileContentToLoadExceededException` : The number of files to load exceeds the allowed limit.
    /// - `MaximumItemsToCompareExceededException` : The number of items to compare between the source or destination branches and the merge base has exceeded the maximum allowed.
    /// - `MergeOptionRequiredException` : A merge option or stategy is required, and none was provided.
    /// - `MultipleConflictResolutionEntriesException` : More than one conflict resolution entries exists for the conflict. A conflict can have only one conflict resolution entry.
    /// - `NameLengthExceededException` : The user name is not valid because it has exceeded the character limit for author names.
    /// - `PathRequiredException` : The folderPath for a location cannot be null.
    /// - `ReplacementContentRequiredException` : USE_NEW_CONTENT was specified, but no replacement content has been provided.
    /// - `ReplacementTypeRequiredException` : A replacement type is required.
    /// - `RepositoryDoesNotExistException` : The specified repository does not exist.
    /// - `RepositoryNameRequiredException` : A repository name is required, but was not specified.
    /// - `TipsDivergenceExceededException` : The divergence between the tips of the provided commit specifiers is too great to determine whether there might be any merge conflicts. Locally compare the specifiers using git diff or a diff tool.
    func createUnreferencedMergeCommit(input: CreateUnreferencedMergeCommitInput) async throws -> CreateUnreferencedMergeCommitOutput
    /// Deletes a specified approval rule template. Deleting a template does not remove approval rules on pull requests already created with the template.
    ///
    /// - Parameter DeleteApprovalRuleTemplateInput : [no documentation found]
    ///
    /// - Returns: `DeleteApprovalRuleTemplateOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ApprovalRuleTemplateInUseException` : The approval rule template is associated with one or more repositories. You cannot delete a template that is associated with a repository. Remove all associations, and then try again.
    /// - `ApprovalRuleTemplateNameRequiredException` : An approval rule template name is required, but was not specified.
    /// - `InvalidApprovalRuleTemplateNameException` : The name of the approval rule template is not valid. Template names must be between 1 and 100 valid characters in length. For more information about limits in CodeCommit, see [Quotas](https://docs.aws.amazon.com/codecommit/latest/userguide/limits.html) in the CodeCommit User Guide.
    func deleteApprovalRuleTemplate(input: DeleteApprovalRuleTemplateInput) async throws -> DeleteApprovalRuleTemplateOutput
    /// Deletes a branch from a repository, unless that branch is the default branch for the repository.
    ///
    /// - Parameter DeleteBranchInput : Represents the input of a delete branch operation.
    ///
    /// - Returns: `DeleteBranchOutput` : Represents the output of a delete branch operation.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `BranchNameRequiredException` : A branch name is required, but was not specified.
    /// - `DefaultBranchCannotBeDeletedException` : The specified branch is the default branch for the repository, and cannot be deleted. To delete this branch, you must first set another branch as the default branch.
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `InvalidBranchNameException` : The specified reference name is not valid.
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `RepositoryDoesNotExistException` : The specified repository does not exist.
    /// - `RepositoryNameRequiredException` : A repository name is required, but was not specified.
    func deleteBranch(input: DeleteBranchInput) async throws -> DeleteBranchOutput
    /// Deletes the content of a comment made on a change, file, or commit in a repository.
    ///
    /// - Parameter DeleteCommentContentInput : [no documentation found]
    ///
    /// - Returns: `DeleteCommentContentOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `CommentDeletedException` : This comment has already been deleted. You cannot edit or delete a deleted comment.
    /// - `CommentDoesNotExistException` : No comment exists with the provided ID. Verify that you have used the correct ID, and then try again.
    /// - `CommentIdRequiredException` : The comment ID is missing or null. A comment ID is required.
    /// - `InvalidCommentIdException` : The comment ID is not in a valid format. Make sure that you have provided the full comment ID.
    func deleteCommentContent(input: DeleteCommentContentInput) async throws -> DeleteCommentContentOutput
    /// Deletes a specified file from a specified branch. A commit is created on the branch that contains the revision. The file still exists in the commits earlier to the commit that contains the deletion.
    ///
    /// - Parameter DeleteFileInput : [no documentation found]
    ///
    /// - Returns: `DeleteFileOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `BranchDoesNotExistException` : The specified branch does not exist.
    /// - `BranchNameIsTagNameException` : The specified branch name is not valid because it is a tag name. Enter the name of a branch in the repository. For a list of valid branch names, use [ListBranches].
    /// - `BranchNameRequiredException` : A branch name is required, but was not specified.
    /// - `CommitMessageLengthExceededException` : The commit message is too long. Provide a shorter string.
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `FileDoesNotExistException` : The specified file does not exist. Verify that you have used the correct file name, full path, and extension.
    /// - `InvalidBranchNameException` : The specified reference name is not valid.
    /// - `InvalidEmailException` : The specified email address either contains one or more characters that are not allowed, or it exceeds the maximum number of characters allowed for an email address.
    /// - `InvalidParentCommitIdException` : The parent commit ID is not valid. The commit ID cannot be empty, and must match the head commit ID for the branch of the repository where you want to add or update a file.
    /// - `InvalidPathException` : The specified path is not valid.
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `NameLengthExceededException` : The user name is not valid because it has exceeded the character limit for author names.
    /// - `ParentCommitDoesNotExistException` : The parent commit ID is not valid because it does not exist. The specified parent commit ID does not exist in the specified branch of the repository.
    /// - `ParentCommitIdOutdatedException` : The file could not be added because the provided parent commit ID is not the current tip of the specified branch. To view the full commit ID of the current head of the branch, use [GetBranch].
    /// - `ParentCommitIdRequiredException` : A parent commit ID is required. To view the full commit ID of a branch in a repository, use [GetBranch] or a Git command (for example, git pull or git log).
    /// - `PathRequiredException` : The folderPath for a location cannot be null.
    /// - `RepositoryDoesNotExistException` : The specified repository does not exist.
    /// - `RepositoryNameRequiredException` : A repository name is required, but was not specified.
    func deleteFile(input: DeleteFileInput) async throws -> DeleteFileOutput
    /// Deletes an approval rule from a specified pull request. Approval rules can be deleted from a pull request only if the pull request is open, and if the approval rule was created specifically for a pull request and not generated from an approval rule template associated with the repository where the pull request was created. You cannot delete an approval rule from a merged or closed pull request.
    ///
    /// - Parameter DeletePullRequestApprovalRuleInput : [no documentation found]
    ///
    /// - Returns: `DeletePullRequestApprovalRuleOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ApprovalRuleNameRequiredException` : An approval rule name is required, but was not specified.
    /// - `CannotDeleteApprovalRuleFromTemplateException` : The approval rule cannot be deleted from the pull request because it was created by an approval rule template and applied to the pull request automatically.
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `InvalidApprovalRuleNameException` : The name for the approval rule is not valid.
    /// - `InvalidPullRequestIdException` : The pull request ID is not valid. Make sure that you have provided the full ID and that the pull request is in the specified repository, and then try again.
    /// - `PullRequestAlreadyClosedException` : The pull request status cannot be updated because it is already closed.
    /// - `PullRequestDoesNotExistException` : The pull request ID could not be found. Make sure that you have specified the correct repository name and pull request ID, and then try again.
    /// - `PullRequestIdRequiredException` : A pull request ID is required, but none was provided.
    func deletePullRequestApprovalRule(input: DeletePullRequestApprovalRuleInput) async throws -> DeletePullRequestApprovalRuleOutput
    /// Deletes a repository. If a specified repository was already deleted, a null repository ID is returned. Deleting a repository also deletes all associated objects and metadata. After a repository is deleted, all future push calls to the deleted repository fail.
    ///
    /// - Parameter DeleteRepositoryInput : Represents the input of a delete repository operation.
    ///
    /// - Returns: `DeleteRepositoryOutput` : Represents the output of a delete repository operation.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `RepositoryNameRequiredException` : A repository name is required, but was not specified.
    func deleteRepository(input: DeleteRepositoryInput) async throws -> DeleteRepositoryOutput
    /// Returns information about one or more merge conflicts in the attempted merge of two commit specifiers using the squash or three-way merge strategy. If the merge option for the attempted merge is specified as FAST_FORWARD_MERGE, an exception is thrown.
    ///
    /// - Parameter DescribeMergeConflictsInput : [no documentation found]
    ///
    /// - Returns: `DescribeMergeConflictsOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `CommitDoesNotExistException` : The specified commit does not exist or no commit was specified, and the specified repository has no default branch.
    /// - `CommitRequiredException` : A commit was not specified.
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `FileDoesNotExistException` : The specified file does not exist. Verify that you have used the correct file name, full path, and extension.
    /// - `InvalidCommitException` : The specified commit is not valid.
    /// - `InvalidConflictDetailLevelException` : The specified conflict detail level is not valid.
    /// - `InvalidConflictResolutionStrategyException` : The specified conflict resolution strategy is not valid.
    /// - `InvalidContinuationTokenException` : The specified continuation token is not valid.
    /// - `InvalidMaxMergeHunksException` : The specified value for the number of merge hunks to return is not valid.
    /// - `InvalidMergeOptionException` : The specified merge option is not valid for this operation. Not all merge strategies are supported for all operations.
    /// - `InvalidPathException` : The specified path is not valid.
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `MaximumFileContentToLoadExceededException` : The number of files to load exceeds the allowed limit.
    /// - `MaximumItemsToCompareExceededException` : The number of items to compare between the source or destination branches and the merge base has exceeded the maximum allowed.
    /// - `MergeOptionRequiredException` : A merge option or stategy is required, and none was provided.
    /// - `PathRequiredException` : The folderPath for a location cannot be null.
    /// - `RepositoryDoesNotExistException` : The specified repository does not exist.
    /// - `RepositoryNameRequiredException` : A repository name is required, but was not specified.
    /// - `TipsDivergenceExceededException` : The divergence between the tips of the provided commit specifiers is too great to determine whether there might be any merge conflicts. Locally compare the specifiers using git diff or a diff tool.
    func describeMergeConflicts(input: DescribeMergeConflictsInput) async throws -> DescribeMergeConflictsOutput
    /// Returns information about one or more pull request events.
    ///
    /// - Parameter DescribePullRequestEventsInput : [no documentation found]
    ///
    /// - Returns: `DescribePullRequestEventsOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ActorDoesNotExistException` : The specified Amazon Resource Name (ARN) does not exist in the Amazon Web Services account.
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `InvalidActorArnException` : The Amazon Resource Name (ARN) is not valid. Make sure that you have provided the full ARN for the user who initiated the change for the pull request, and then try again.
    /// - `InvalidContinuationTokenException` : The specified continuation token is not valid.
    /// - `InvalidMaxResultsException` : The specified number of maximum results is not valid.
    /// - `InvalidPullRequestEventTypeException` : The pull request event type is not valid.
    /// - `InvalidPullRequestIdException` : The pull request ID is not valid. Make sure that you have provided the full ID and that the pull request is in the specified repository, and then try again.
    /// - `PullRequestDoesNotExistException` : The pull request ID could not be found. Make sure that you have specified the correct repository name and pull request ID, and then try again.
    /// - `PullRequestIdRequiredException` : A pull request ID is required, but none was provided.
    func describePullRequestEvents(input: DescribePullRequestEventsInput) async throws -> DescribePullRequestEventsOutput
    /// Removes the association between a template and a repository so that approval rules based on the template are not automatically created when pull requests are created in the specified repository. This does not delete any approval rules previously created for pull requests through the template association.
    ///
    /// - Parameter DisassociateApprovalRuleTemplateFromRepositoryInput : [no documentation found]
    ///
    /// - Returns: `DisassociateApprovalRuleTemplateFromRepositoryOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ApprovalRuleTemplateDoesNotExistException` : The specified approval rule template does not exist. Verify that the name is correct and that you are signed in to the Amazon Web Services Region where the template was created, and then try again.
    /// - `ApprovalRuleTemplateNameRequiredException` : An approval rule template name is required, but was not specified.
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `InvalidApprovalRuleTemplateNameException` : The name of the approval rule template is not valid. Template names must be between 1 and 100 valid characters in length. For more information about limits in CodeCommit, see [Quotas](https://docs.aws.amazon.com/codecommit/latest/userguide/limits.html) in the CodeCommit User Guide.
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `RepositoryDoesNotExistException` : The specified repository does not exist.
    /// - `RepositoryNameRequiredException` : A repository name is required, but was not specified.
    func disassociateApprovalRuleTemplateFromRepository(input: DisassociateApprovalRuleTemplateFromRepositoryInput) async throws -> DisassociateApprovalRuleTemplateFromRepositoryOutput
    /// Evaluates whether a pull request has met all the conditions specified in its associated approval rules.
    ///
    /// - Parameter EvaluatePullRequestApprovalRulesInput : [no documentation found]
    ///
    /// - Returns: `EvaluatePullRequestApprovalRulesOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `InvalidPullRequestIdException` : The pull request ID is not valid. Make sure that you have provided the full ID and that the pull request is in the specified repository, and then try again.
    /// - `InvalidRevisionIdException` : The revision ID is not valid. Use GetPullRequest to determine the value.
    /// - `PullRequestDoesNotExistException` : The pull request ID could not be found. Make sure that you have specified the correct repository name and pull request ID, and then try again.
    /// - `PullRequestIdRequiredException` : A pull request ID is required, but none was provided.
    /// - `RevisionIdRequiredException` : A revision ID is required, but was not provided.
    /// - `RevisionNotCurrentException` : The revision ID provided in the request does not match the current revision ID. Use GetPullRequest to retrieve the current revision ID.
    func evaluatePullRequestApprovalRules(input: EvaluatePullRequestApprovalRulesInput) async throws -> EvaluatePullRequestApprovalRulesOutput
    /// Returns information about a specified approval rule template.
    ///
    /// - Parameter GetApprovalRuleTemplateInput : [no documentation found]
    ///
    /// - Returns: `GetApprovalRuleTemplateOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ApprovalRuleTemplateDoesNotExistException` : The specified approval rule template does not exist. Verify that the name is correct and that you are signed in to the Amazon Web Services Region where the template was created, and then try again.
    /// - `ApprovalRuleTemplateNameRequiredException` : An approval rule template name is required, but was not specified.
    /// - `InvalidApprovalRuleTemplateNameException` : The name of the approval rule template is not valid. Template names must be between 1 and 100 valid characters in length. For more information about limits in CodeCommit, see [Quotas](https://docs.aws.amazon.com/codecommit/latest/userguide/limits.html) in the CodeCommit User Guide.
    func getApprovalRuleTemplate(input: GetApprovalRuleTemplateInput) async throws -> GetApprovalRuleTemplateOutput
    /// Returns the base-64 encoded content of an individual blob in a repository.
    ///
    /// - Parameter GetBlobInput : Represents the input of a get blob operation.
    ///
    /// - Returns: `GetBlobOutput` : Represents the output of a get blob operation.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `BlobIdDoesNotExistException` : The specified blob does not exist.
    /// - `BlobIdRequiredException` : A blob ID is required, but was not specified.
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `FileTooLargeException` : The specified file exceeds the file size limit for CodeCommit. For more information about limits in CodeCommit, see [Quotas](https://docs.aws.amazon.com/codecommit/latest/userguide/limits.html) in the CodeCommit User Guide.
    /// - `InvalidBlobIdException` : The specified blob is not valid.
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `RepositoryDoesNotExistException` : The specified repository does not exist.
    /// - `RepositoryNameRequiredException` : A repository name is required, but was not specified.
    func getBlob(input: GetBlobInput) async throws -> GetBlobOutput
    /// Returns information about a repository branch, including its name and the last commit ID.
    ///
    /// - Parameter GetBranchInput : Represents the input of a get branch operation.
    ///
    /// - Returns: `GetBranchOutput` : Represents the output of a get branch operation.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `BranchDoesNotExistException` : The specified branch does not exist.
    /// - `BranchNameRequiredException` : A branch name is required, but was not specified.
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `InvalidBranchNameException` : The specified reference name is not valid.
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `RepositoryDoesNotExistException` : The specified repository does not exist.
    /// - `RepositoryNameRequiredException` : A repository name is required, but was not specified.
    func getBranch(input: GetBranchInput) async throws -> GetBranchOutput
    /// Returns the content of a comment made on a change, file, or commit in a repository. Reaction counts might include numbers from user identities who were deleted after the reaction was made. For a count of reactions from active identities, use GetCommentReactions.
    ///
    /// - Parameter GetCommentInput : [no documentation found]
    ///
    /// - Returns: `GetCommentOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `CommentDeletedException` : This comment has already been deleted. You cannot edit or delete a deleted comment.
    /// - `CommentDoesNotExistException` : No comment exists with the provided ID. Verify that you have used the correct ID, and then try again.
    /// - `CommentIdRequiredException` : The comment ID is missing or null. A comment ID is required.
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `InvalidCommentIdException` : The comment ID is not in a valid format. Make sure that you have provided the full comment ID.
    func getComment(input: GetCommentInput) async throws -> GetCommentOutput
    /// Returns information about reactions to a specified comment ID. Reactions from users who have been deleted will not be included in the count.
    ///
    /// - Parameter GetCommentReactionsInput : [no documentation found]
    ///
    /// - Returns: `GetCommentReactionsOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `CommentDeletedException` : This comment has already been deleted. You cannot edit or delete a deleted comment.
    /// - `CommentDoesNotExistException` : No comment exists with the provided ID. Verify that you have used the correct ID, and then try again.
    /// - `CommentIdRequiredException` : The comment ID is missing or null. A comment ID is required.
    /// - `InvalidCommentIdException` : The comment ID is not in a valid format. Make sure that you have provided the full comment ID.
    /// - `InvalidContinuationTokenException` : The specified continuation token is not valid.
    /// - `InvalidMaxResultsException` : The specified number of maximum results is not valid.
    /// - `InvalidReactionUserArnException` : The Amazon Resource Name (ARN) of the user or identity is not valid.
    func getCommentReactions(input: GetCommentReactionsInput) async throws -> GetCommentReactionsOutput
    /// Returns information about comments made on the comparison between two commits. Reaction counts might include numbers from user identities who were deleted after the reaction was made. For a count of reactions from active identities, use GetCommentReactions.
    ///
    /// - Parameter GetCommentsForComparedCommitInput : [no documentation found]
    ///
    /// - Returns: `GetCommentsForComparedCommitOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `CommitDoesNotExistException` : The specified commit does not exist or no commit was specified, and the specified repository has no default branch.
    /// - `CommitIdRequiredException` : A commit ID was not specified.
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `InvalidCommitIdException` : The specified commit ID is not valid.
    /// - `InvalidContinuationTokenException` : The specified continuation token is not valid.
    /// - `InvalidMaxResultsException` : The specified number of maximum results is not valid.
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `RepositoryDoesNotExistException` : The specified repository does not exist.
    /// - `RepositoryNameRequiredException` : A repository name is required, but was not specified.
    func getCommentsForComparedCommit(input: GetCommentsForComparedCommitInput) async throws -> GetCommentsForComparedCommitOutput
    /// Returns comments made on a pull request. Reaction counts might include numbers from user identities who were deleted after the reaction was made. For a count of reactions from active identities, use GetCommentReactions.
    ///
    /// - Parameter GetCommentsForPullRequestInput : [no documentation found]
    ///
    /// - Returns: `GetCommentsForPullRequestOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `CommitDoesNotExistException` : The specified commit does not exist or no commit was specified, and the specified repository has no default branch.
    /// - `CommitIdRequiredException` : A commit ID was not specified.
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `InvalidCommitIdException` : The specified commit ID is not valid.
    /// - `InvalidContinuationTokenException` : The specified continuation token is not valid.
    /// - `InvalidMaxResultsException` : The specified number of maximum results is not valid.
    /// - `InvalidPullRequestIdException` : The pull request ID is not valid. Make sure that you have provided the full ID and that the pull request is in the specified repository, and then try again.
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `PullRequestDoesNotExistException` : The pull request ID could not be found. Make sure that you have specified the correct repository name and pull request ID, and then try again.
    /// - `PullRequestIdRequiredException` : A pull request ID is required, but none was provided.
    /// - `RepositoryDoesNotExistException` : The specified repository does not exist.
    /// - `RepositoryNameRequiredException` : A repository name is required, but was not specified.
    /// - `RepositoryNotAssociatedWithPullRequestException` : The repository does not contain any pull requests with that pull request ID. Use GetPullRequest to verify the correct repository name for the pull request ID.
    func getCommentsForPullRequest(input: GetCommentsForPullRequestInput) async throws -> GetCommentsForPullRequestOutput
    /// Returns information about a commit, including commit message and committer information.
    ///
    /// - Parameter GetCommitInput : Represents the input of a get commit operation.
    ///
    /// - Returns: `GetCommitOutput` : Represents the output of a get commit operation.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `CommitIdDoesNotExistException` : The specified commit ID does not exist.
    /// - `CommitIdRequiredException` : A commit ID was not specified.
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `InvalidCommitIdException` : The specified commit ID is not valid.
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `RepositoryDoesNotExistException` : The specified repository does not exist.
    /// - `RepositoryNameRequiredException` : A repository name is required, but was not specified.
    func getCommit(input: GetCommitInput) async throws -> GetCommitOutput
    /// Returns information about the differences in a valid commit specifier (such as a branch, tag, HEAD, commit ID, or other fully qualified reference). Results can be limited to a specified path.
    ///
    /// - Parameter GetDifferencesInput : [no documentation found]
    ///
    /// - Returns: `GetDifferencesOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `CommitDoesNotExistException` : The specified commit does not exist or no commit was specified, and the specified repository has no default branch.
    /// - `CommitRequiredException` : A commit was not specified.
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `InvalidCommitException` : The specified commit is not valid.
    /// - `InvalidCommitIdException` : The specified commit ID is not valid.
    /// - `InvalidContinuationTokenException` : The specified continuation token is not valid.
    /// - `InvalidMaxResultsException` : The specified number of maximum results is not valid.
    /// - `InvalidPathException` : The specified path is not valid.
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `PathDoesNotExistException` : The specified path does not exist.
    /// - `RepositoryDoesNotExistException` : The specified repository does not exist.
    /// - `RepositoryNameRequiredException` : A repository name is required, but was not specified.
    func getDifferences(input: GetDifferencesInput) async throws -> GetDifferencesOutput
    /// Returns the base-64 encoded contents of a specified file and its metadata.
    ///
    /// - Parameter GetFileInput : [no documentation found]
    ///
    /// - Returns: `GetFileOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `CommitDoesNotExistException` : The specified commit does not exist or no commit was specified, and the specified repository has no default branch.
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `FileDoesNotExistException` : The specified file does not exist. Verify that you have used the correct file name, full path, and extension.
    /// - `FileTooLargeException` : The specified file exceeds the file size limit for CodeCommit. For more information about limits in CodeCommit, see [Quotas](https://docs.aws.amazon.com/codecommit/latest/userguide/limits.html) in the CodeCommit User Guide.
    /// - `InvalidCommitException` : The specified commit is not valid.
    /// - `InvalidPathException` : The specified path is not valid.
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `PathRequiredException` : The folderPath for a location cannot be null.
    /// - `RepositoryDoesNotExistException` : The specified repository does not exist.
    /// - `RepositoryNameRequiredException` : A repository name is required, but was not specified.
    func getFile(input: GetFileInput) async throws -> GetFileOutput
    /// Returns the contents of a specified folder in a repository.
    ///
    /// - Parameter GetFolderInput : [no documentation found]
    ///
    /// - Returns: `GetFolderOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `CommitDoesNotExistException` : The specified commit does not exist or no commit was specified, and the specified repository has no default branch.
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `FolderDoesNotExistException` : The specified folder does not exist. Either the folder name is not correct, or you did not enter the full path to the folder.
    /// - `InvalidCommitException` : The specified commit is not valid.
    /// - `InvalidPathException` : The specified path is not valid.
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `PathRequiredException` : The folderPath for a location cannot be null.
    /// - `RepositoryDoesNotExistException` : The specified repository does not exist.
    /// - `RepositoryNameRequiredException` : A repository name is required, but was not specified.
    func getFolder(input: GetFolderInput) async throws -> GetFolderOutput
    /// Returns information about a specified merge commit.
    ///
    /// - Parameter GetMergeCommitInput : [no documentation found]
    ///
    /// - Returns: `GetMergeCommitOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `CommitDoesNotExistException` : The specified commit does not exist or no commit was specified, and the specified repository has no default branch.
    /// - `CommitRequiredException` : A commit was not specified.
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `InvalidCommitException` : The specified commit is not valid.
    /// - `InvalidConflictDetailLevelException` : The specified conflict detail level is not valid.
    /// - `InvalidConflictResolutionStrategyException` : The specified conflict resolution strategy is not valid.
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `RepositoryDoesNotExistException` : The specified repository does not exist.
    /// - `RepositoryNameRequiredException` : A repository name is required, but was not specified.
    func getMergeCommit(input: GetMergeCommitInput) async throws -> GetMergeCommitOutput
    /// Returns information about merge conflicts between the before and after commit IDs for a pull request in a repository.
    ///
    /// - Parameter GetMergeConflictsInput : [no documentation found]
    ///
    /// - Returns: `GetMergeConflictsOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `CommitDoesNotExistException` : The specified commit does not exist or no commit was specified, and the specified repository has no default branch.
    /// - `CommitRequiredException` : A commit was not specified.
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `InvalidCommitException` : The specified commit is not valid.
    /// - `InvalidConflictDetailLevelException` : The specified conflict detail level is not valid.
    /// - `InvalidConflictResolutionStrategyException` : The specified conflict resolution strategy is not valid.
    /// - `InvalidContinuationTokenException` : The specified continuation token is not valid.
    /// - `InvalidDestinationCommitSpecifierException` : The destination commit specifier is not valid. You must provide a valid branch name, tag, or full commit ID.
    /// - `InvalidMaxConflictFilesException` : The specified value for the number of conflict files to return is not valid.
    /// - `InvalidMergeOptionException` : The specified merge option is not valid for this operation. Not all merge strategies are supported for all operations.
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `InvalidSourceCommitSpecifierException` : The source commit specifier is not valid. You must provide a valid branch name, tag, or full commit ID.
    /// - `MaximumFileContentToLoadExceededException` : The number of files to load exceeds the allowed limit.
    /// - `MaximumItemsToCompareExceededException` : The number of items to compare between the source or destination branches and the merge base has exceeded the maximum allowed.
    /// - `MergeOptionRequiredException` : A merge option or stategy is required, and none was provided.
    /// - `RepositoryDoesNotExistException` : The specified repository does not exist.
    /// - `RepositoryNameRequiredException` : A repository name is required, but was not specified.
    /// - `TipsDivergenceExceededException` : The divergence between the tips of the provided commit specifiers is too great to determine whether there might be any merge conflicts. Locally compare the specifiers using git diff or a diff tool.
    func getMergeConflicts(input: GetMergeConflictsInput) async throws -> GetMergeConflictsOutput
    /// Returns information about the merge options available for merging two specified branches. For details about why a merge option is not available, use GetMergeConflicts or DescribeMergeConflicts.
    ///
    /// - Parameter GetMergeOptionsInput : [no documentation found]
    ///
    /// - Returns: `GetMergeOptionsOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `CommitDoesNotExistException` : The specified commit does not exist or no commit was specified, and the specified repository has no default branch.
    /// - `CommitRequiredException` : A commit was not specified.
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `InvalidCommitException` : The specified commit is not valid.
    /// - `InvalidConflictDetailLevelException` : The specified conflict detail level is not valid.
    /// - `InvalidConflictResolutionStrategyException` : The specified conflict resolution strategy is not valid.
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `MaximumFileContentToLoadExceededException` : The number of files to load exceeds the allowed limit.
    /// - `MaximumItemsToCompareExceededException` : The number of items to compare between the source or destination branches and the merge base has exceeded the maximum allowed.
    /// - `RepositoryDoesNotExistException` : The specified repository does not exist.
    /// - `RepositoryNameRequiredException` : A repository name is required, but was not specified.
    /// - `TipsDivergenceExceededException` : The divergence between the tips of the provided commit specifiers is too great to determine whether there might be any merge conflicts. Locally compare the specifiers using git diff or a diff tool.
    func getMergeOptions(input: GetMergeOptionsInput) async throws -> GetMergeOptionsOutput
    /// Gets information about a pull request in a specified repository.
    ///
    /// - Parameter GetPullRequestInput : [no documentation found]
    ///
    /// - Returns: `GetPullRequestOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `InvalidPullRequestIdException` : The pull request ID is not valid. Make sure that you have provided the full ID and that the pull request is in the specified repository, and then try again.
    /// - `PullRequestDoesNotExistException` : The pull request ID could not be found. Make sure that you have specified the correct repository name and pull request ID, and then try again.
    /// - `PullRequestIdRequiredException` : A pull request ID is required, but none was provided.
    func getPullRequest(input: GetPullRequestInput) async throws -> GetPullRequestOutput
    /// Gets information about the approval states for a specified pull request. Approval states only apply to pull requests that have one or more approval rules applied to them.
    ///
    /// - Parameter GetPullRequestApprovalStatesInput : [no documentation found]
    ///
    /// - Returns: `GetPullRequestApprovalStatesOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `InvalidPullRequestIdException` : The pull request ID is not valid. Make sure that you have provided the full ID and that the pull request is in the specified repository, and then try again.
    /// - `InvalidRevisionIdException` : The revision ID is not valid. Use GetPullRequest to determine the value.
    /// - `PullRequestDoesNotExistException` : The pull request ID could not be found. Make sure that you have specified the correct repository name and pull request ID, and then try again.
    /// - `PullRequestIdRequiredException` : A pull request ID is required, but none was provided.
    /// - `RevisionIdRequiredException` : A revision ID is required, but was not provided.
    func getPullRequestApprovalStates(input: GetPullRequestApprovalStatesInput) async throws -> GetPullRequestApprovalStatesOutput
    /// Returns information about whether approval rules have been set aside (overridden) for a pull request, and if so, the Amazon Resource Name (ARN) of the user or identity that overrode the rules and their requirements for the pull request.
    ///
    /// - Parameter GetPullRequestOverrideStateInput : [no documentation found]
    ///
    /// - Returns: `GetPullRequestOverrideStateOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `InvalidPullRequestIdException` : The pull request ID is not valid. Make sure that you have provided the full ID and that the pull request is in the specified repository, and then try again.
    /// - `InvalidRevisionIdException` : The revision ID is not valid. Use GetPullRequest to determine the value.
    /// - `PullRequestDoesNotExistException` : The pull request ID could not be found. Make sure that you have specified the correct repository name and pull request ID, and then try again.
    /// - `PullRequestIdRequiredException` : A pull request ID is required, but none was provided.
    /// - `RevisionIdRequiredException` : A revision ID is required, but was not provided.
    func getPullRequestOverrideState(input: GetPullRequestOverrideStateInput) async throws -> GetPullRequestOverrideStateOutput
    /// Returns information about a repository. The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a webpage can expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a webpage.
    ///
    /// - Parameter GetRepositoryInput : Represents the input of a get repository operation.
    ///
    /// - Returns: `GetRepositoryOutput` : Represents the output of a get repository operation.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `RepositoryDoesNotExistException` : The specified repository does not exist.
    /// - `RepositoryNameRequiredException` : A repository name is required, but was not specified.
    func getRepository(input: GetRepositoryInput) async throws -> GetRepositoryOutput
    /// Gets information about triggers configured for a repository.
    ///
    /// - Parameter GetRepositoryTriggersInput : Represents the input of a get repository triggers operation.
    ///
    /// - Returns: `GetRepositoryTriggersOutput` : Represents the output of a get repository triggers operation.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `RepositoryDoesNotExistException` : The specified repository does not exist.
    /// - `RepositoryNameRequiredException` : A repository name is required, but was not specified.
    func getRepositoryTriggers(input: GetRepositoryTriggersInput) async throws -> GetRepositoryTriggersOutput
    /// Lists all approval rule templates in the specified Amazon Web Services Region in your Amazon Web Services account. If an Amazon Web Services Region is not specified, the Amazon Web Services Region where you are signed in is used.
    ///
    /// - Parameter ListApprovalRuleTemplatesInput : [no documentation found]
    ///
    /// - Returns: `ListApprovalRuleTemplatesOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InvalidContinuationTokenException` : The specified continuation token is not valid.
    /// - `InvalidMaxResultsException` : The specified number of maximum results is not valid.
    func listApprovalRuleTemplates(input: ListApprovalRuleTemplatesInput) async throws -> ListApprovalRuleTemplatesOutput
    /// Lists all approval rule templates that are associated with a specified repository.
    ///
    /// - Parameter ListAssociatedApprovalRuleTemplatesForRepositoryInput : [no documentation found]
    ///
    /// - Returns: `ListAssociatedApprovalRuleTemplatesForRepositoryOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `InvalidContinuationTokenException` : The specified continuation token is not valid.
    /// - `InvalidMaxResultsException` : The specified number of maximum results is not valid.
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `RepositoryDoesNotExistException` : The specified repository does not exist.
    /// - `RepositoryNameRequiredException` : A repository name is required, but was not specified.
    func listAssociatedApprovalRuleTemplatesForRepository(input: ListAssociatedApprovalRuleTemplatesForRepositoryInput) async throws -> ListAssociatedApprovalRuleTemplatesForRepositoryOutput
    /// Gets information about one or more branches in a repository.
    ///
    /// - Parameter ListBranchesInput : Represents the input of a list branches operation.
    ///
    /// - Returns: `ListBranchesOutput` : Represents the output of a list branches operation.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `InvalidContinuationTokenException` : The specified continuation token is not valid.
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `RepositoryDoesNotExistException` : The specified repository does not exist.
    /// - `RepositoryNameRequiredException` : A repository name is required, but was not specified.
    func listBranches(input: ListBranchesInput) async throws -> ListBranchesOutput
    /// Retrieves a list of commits and changes to a specified file.
    ///
    /// - Parameter ListFileCommitHistoryInput : [no documentation found]
    ///
    /// - Returns: `ListFileCommitHistoryOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `CommitDoesNotExistException` : The specified commit does not exist or no commit was specified, and the specified repository has no default branch.
    /// - `CommitRequiredException` : A commit was not specified.
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `InvalidCommitException` : The specified commit is not valid.
    /// - `InvalidContinuationTokenException` : The specified continuation token is not valid.
    /// - `InvalidMaxResultsException` : The specified number of maximum results is not valid.
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `RepositoryDoesNotExistException` : The specified repository does not exist.
    /// - `RepositoryNameRequiredException` : A repository name is required, but was not specified.
    /// - `TipsDivergenceExceededException` : The divergence between the tips of the provided commit specifiers is too great to determine whether there might be any merge conflicts. Locally compare the specifiers using git diff or a diff tool.
    func listFileCommitHistory(input: ListFileCommitHistoryInput) async throws -> ListFileCommitHistoryOutput
    /// Returns a list of pull requests for a specified repository. The return list can be refined by pull request status or pull request author ARN.
    ///
    /// - Parameter ListPullRequestsInput : [no documentation found]
    ///
    /// - Returns: `ListPullRequestsOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AuthorDoesNotExistException` : The specified Amazon Resource Name (ARN) does not exist in the Amazon Web Services account.
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `InvalidAuthorArnException` : The Amazon Resource Name (ARN) is not valid. Make sure that you have provided the full ARN for the author of the pull request, and then try again.
    /// - `InvalidContinuationTokenException` : The specified continuation token is not valid.
    /// - `InvalidMaxResultsException` : The specified number of maximum results is not valid.
    /// - `InvalidPullRequestStatusException` : The pull request status is not valid. The only valid values are OPEN and CLOSED.
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `RepositoryDoesNotExistException` : The specified repository does not exist.
    /// - `RepositoryNameRequiredException` : A repository name is required, but was not specified.
    func listPullRequests(input: ListPullRequestsInput) async throws -> ListPullRequestsOutput
    /// Gets information about one or more repositories.
    ///
    /// - Parameter ListRepositoriesInput : Represents the input of a list repositories operation.
    ///
    /// - Returns: `ListRepositoriesOutput` : Represents the output of a list repositories operation.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InvalidContinuationTokenException` : The specified continuation token is not valid.
    /// - `InvalidOrderException` : The specified sort order is not valid.
    /// - `InvalidSortByException` : The specified sort by value is not valid.
    func listRepositories(input: ListRepositoriesInput) async throws -> ListRepositoriesOutput
    /// Lists all repositories associated with the specified approval rule template.
    ///
    /// - Parameter ListRepositoriesForApprovalRuleTemplateInput : [no documentation found]
    ///
    /// - Returns: `ListRepositoriesForApprovalRuleTemplateOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ApprovalRuleTemplateDoesNotExistException` : The specified approval rule template does not exist. Verify that the name is correct and that you are signed in to the Amazon Web Services Region where the template was created, and then try again.
    /// - `ApprovalRuleTemplateNameRequiredException` : An approval rule template name is required, but was not specified.
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `InvalidApprovalRuleTemplateNameException` : The name of the approval rule template is not valid. Template names must be between 1 and 100 valid characters in length. For more information about limits in CodeCommit, see [Quotas](https://docs.aws.amazon.com/codecommit/latest/userguide/limits.html) in the CodeCommit User Guide.
    /// - `InvalidContinuationTokenException` : The specified continuation token is not valid.
    /// - `InvalidMaxResultsException` : The specified number of maximum results is not valid.
    func listRepositoriesForApprovalRuleTemplate(input: ListRepositoriesForApprovalRuleTemplateInput) async throws -> ListRepositoriesForApprovalRuleTemplateOutput
    /// Gets information about Amazon Web Servicestags for a specified Amazon Resource Name (ARN) in CodeCommit. For a list of valid resources in CodeCommit, see [CodeCommit Resources and Operations](https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats) in the CodeCommit User Guide.
    ///
    /// - Parameter ListTagsForResourceInput : [no documentation found]
    ///
    /// - Returns: `ListTagsForResourceOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `InvalidResourceArnException` : The value for the resource ARN is not valid. For more information about resources in CodeCommit, see [CodeCommit Resources and Operations](https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats) in the CodeCommit User Guide.
    /// - `RepositoryDoesNotExistException` : The specified repository does not exist.
    /// - `ResourceArnRequiredException` : A valid Amazon Resource Name (ARN) for an CodeCommit resource is required. For a list of valid resources in CodeCommit, see [CodeCommit Resources and Operations](https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats) in the CodeCommit User Guide.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutput
    /// Merges two branches using the fast-forward merge strategy.
    ///
    /// - Parameter MergeBranchesByFastForwardInput : [no documentation found]
    ///
    /// - Returns: `MergeBranchesByFastForwardOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `BranchDoesNotExistException` : The specified branch does not exist.
    /// - `BranchNameIsTagNameException` : The specified branch name is not valid because it is a tag name. Enter the name of a branch in the repository. For a list of valid branch names, use [ListBranches].
    /// - `BranchNameRequiredException` : A branch name is required, but was not specified.
    /// - `CommitDoesNotExistException` : The specified commit does not exist or no commit was specified, and the specified repository has no default branch.
    /// - `CommitRequiredException` : A commit was not specified.
    /// - `ConcurrentReferenceUpdateException` : The merge cannot be completed because the target branch has been modified. Another user might have modified the target branch while the merge was in progress. Wait a few minutes, and then try again.
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `InvalidBranchNameException` : The specified reference name is not valid.
    /// - `InvalidCommitException` : The specified commit is not valid.
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `InvalidTargetBranchException` : The specified target branch is not valid.
    /// - `ManualMergeRequiredException` : The pull request cannot be merged automatically into the destination branch. You must manually merge the branches and resolve any conflicts.
    /// - `RepositoryDoesNotExistException` : The specified repository does not exist.
    /// - `RepositoryNameRequiredException` : A repository name is required, but was not specified.
    /// - `TipsDivergenceExceededException` : The divergence between the tips of the provided commit specifiers is too great to determine whether there might be any merge conflicts. Locally compare the specifiers using git diff or a diff tool.
    func mergeBranchesByFastForward(input: MergeBranchesByFastForwardInput) async throws -> MergeBranchesByFastForwardOutput
    /// Merges two branches using the squash merge strategy.
    ///
    /// - Parameter MergeBranchesBySquashInput : [no documentation found]
    ///
    /// - Returns: `MergeBranchesBySquashOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `BranchDoesNotExistException` : The specified branch does not exist.
    /// - `BranchNameIsTagNameException` : The specified branch name is not valid because it is a tag name. Enter the name of a branch in the repository. For a list of valid branch names, use [ListBranches].
    /// - `BranchNameRequiredException` : A branch name is required, but was not specified.
    /// - `CommitDoesNotExistException` : The specified commit does not exist or no commit was specified, and the specified repository has no default branch.
    /// - `CommitMessageLengthExceededException` : The commit message is too long. Provide a shorter string.
    /// - `CommitRequiredException` : A commit was not specified.
    /// - `ConcurrentReferenceUpdateException` : The merge cannot be completed because the target branch has been modified. Another user might have modified the target branch while the merge was in progress. Wait a few minutes, and then try again.
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `FileContentSizeLimitExceededException` : The file cannot be added because it is too large. The maximum file size is 6 MB, and the combined file content change size is 7 MB. Consider making these changes using a Git client.
    /// - `FileModeRequiredException` : The commit cannot be created because no file mode has been specified. A file mode is required to update mode permissions for a file.
    /// - `FolderContentSizeLimitExceededException` : The commit cannot be created because at least one of the overall changes in the commit results in a folder whose contents exceed the limit of 6 MB. Either reduce the number and size of your changes, or split the changes across multiple folders.
    /// - `InvalidBranchNameException` : The specified reference name is not valid.
    /// - `InvalidCommitException` : The specified commit is not valid.
    /// - `InvalidConflictDetailLevelException` : The specified conflict detail level is not valid.
    /// - `InvalidConflictResolutionException` : The specified conflict resolution list is not valid.
    /// - `InvalidConflictResolutionStrategyException` : The specified conflict resolution strategy is not valid.
    /// - `InvalidEmailException` : The specified email address either contains one or more characters that are not allowed, or it exceeds the maximum number of characters allowed for an email address.
    /// - `InvalidFileModeException` : The specified file mode permission is not valid. For a list of valid file mode permissions, see [PutFile].
    /// - `InvalidPathException` : The specified path is not valid.
    /// - `InvalidReplacementContentException` : Automerge was specified for resolving the conflict, but the replacement type is not valid or content is missing.
    /// - `InvalidReplacementTypeException` : Automerge was specified for resolving the conflict, but the specified replacement type is not valid.
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `InvalidTargetBranchException` : The specified target branch is not valid.
    /// - `ManualMergeRequiredException` : The pull request cannot be merged automatically into the destination branch. You must manually merge the branches and resolve any conflicts.
    /// - `MaximumConflictResolutionEntriesExceededException` : The number of allowed conflict resolution entries was exceeded.
    /// - `MaximumFileContentToLoadExceededException` : The number of files to load exceeds the allowed limit.
    /// - `MaximumItemsToCompareExceededException` : The number of items to compare between the source or destination branches and the merge base has exceeded the maximum allowed.
    /// - `MultipleConflictResolutionEntriesException` : More than one conflict resolution entries exists for the conflict. A conflict can have only one conflict resolution entry.
    /// - `NameLengthExceededException` : The user name is not valid because it has exceeded the character limit for author names.
    /// - `PathRequiredException` : The folderPath for a location cannot be null.
    /// - `ReplacementContentRequiredException` : USE_NEW_CONTENT was specified, but no replacement content has been provided.
    /// - `ReplacementTypeRequiredException` : A replacement type is required.
    /// - `RepositoryDoesNotExistException` : The specified repository does not exist.
    /// - `RepositoryNameRequiredException` : A repository name is required, but was not specified.
    /// - `TipsDivergenceExceededException` : The divergence between the tips of the provided commit specifiers is too great to determine whether there might be any merge conflicts. Locally compare the specifiers using git diff or a diff tool.
    func mergeBranchesBySquash(input: MergeBranchesBySquashInput) async throws -> MergeBranchesBySquashOutput
    /// Merges two specified branches using the three-way merge strategy.
    ///
    /// - Parameter MergeBranchesByThreeWayInput : [no documentation found]
    ///
    /// - Returns: `MergeBranchesByThreeWayOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `BranchDoesNotExistException` : The specified branch does not exist.
    /// - `BranchNameIsTagNameException` : The specified branch name is not valid because it is a tag name. Enter the name of a branch in the repository. For a list of valid branch names, use [ListBranches].
    /// - `BranchNameRequiredException` : A branch name is required, but was not specified.
    /// - `CommitDoesNotExistException` : The specified commit does not exist or no commit was specified, and the specified repository has no default branch.
    /// - `CommitMessageLengthExceededException` : The commit message is too long. Provide a shorter string.
    /// - `CommitRequiredException` : A commit was not specified.
    /// - `ConcurrentReferenceUpdateException` : The merge cannot be completed because the target branch has been modified. Another user might have modified the target branch while the merge was in progress. Wait a few minutes, and then try again.
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `FileContentSizeLimitExceededException` : The file cannot be added because it is too large. The maximum file size is 6 MB, and the combined file content change size is 7 MB. Consider making these changes using a Git client.
    /// - `FileModeRequiredException` : The commit cannot be created because no file mode has been specified. A file mode is required to update mode permissions for a file.
    /// - `FolderContentSizeLimitExceededException` : The commit cannot be created because at least one of the overall changes in the commit results in a folder whose contents exceed the limit of 6 MB. Either reduce the number and size of your changes, or split the changes across multiple folders.
    /// - `InvalidBranchNameException` : The specified reference name is not valid.
    /// - `InvalidCommitException` : The specified commit is not valid.
    /// - `InvalidConflictDetailLevelException` : The specified conflict detail level is not valid.
    /// - `InvalidConflictResolutionException` : The specified conflict resolution list is not valid.
    /// - `InvalidConflictResolutionStrategyException` : The specified conflict resolution strategy is not valid.
    /// - `InvalidEmailException` : The specified email address either contains one or more characters that are not allowed, or it exceeds the maximum number of characters allowed for an email address.
    /// - `InvalidFileModeException` : The specified file mode permission is not valid. For a list of valid file mode permissions, see [PutFile].
    /// - `InvalidPathException` : The specified path is not valid.
    /// - `InvalidReplacementContentException` : Automerge was specified for resolving the conflict, but the replacement type is not valid or content is missing.
    /// - `InvalidReplacementTypeException` : Automerge was specified for resolving the conflict, but the specified replacement type is not valid.
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `InvalidTargetBranchException` : The specified target branch is not valid.
    /// - `ManualMergeRequiredException` : The pull request cannot be merged automatically into the destination branch. You must manually merge the branches and resolve any conflicts.
    /// - `MaximumConflictResolutionEntriesExceededException` : The number of allowed conflict resolution entries was exceeded.
    /// - `MaximumFileContentToLoadExceededException` : The number of files to load exceeds the allowed limit.
    /// - `MaximumItemsToCompareExceededException` : The number of items to compare between the source or destination branches and the merge base has exceeded the maximum allowed.
    /// - `MultipleConflictResolutionEntriesException` : More than one conflict resolution entries exists for the conflict. A conflict can have only one conflict resolution entry.
    /// - `NameLengthExceededException` : The user name is not valid because it has exceeded the character limit for author names.
    /// - `PathRequiredException` : The folderPath for a location cannot be null.
    /// - `ReplacementContentRequiredException` : USE_NEW_CONTENT was specified, but no replacement content has been provided.
    /// - `ReplacementTypeRequiredException` : A replacement type is required.
    /// - `RepositoryDoesNotExistException` : The specified repository does not exist.
    /// - `RepositoryNameRequiredException` : A repository name is required, but was not specified.
    /// - `TipsDivergenceExceededException` : The divergence between the tips of the provided commit specifiers is too great to determine whether there might be any merge conflicts. Locally compare the specifiers using git diff or a diff tool.
    func mergeBranchesByThreeWay(input: MergeBranchesByThreeWayInput) async throws -> MergeBranchesByThreeWayOutput
    /// Attempts to merge the source commit of a pull request into the specified destination branch for that pull request at the specified commit using the fast-forward merge strategy. If the merge is successful, it closes the pull request.
    ///
    /// - Parameter MergePullRequestByFastForwardInput : [no documentation found]
    ///
    /// - Returns: `MergePullRequestByFastForwardOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ConcurrentReferenceUpdateException` : The merge cannot be completed because the target branch has been modified. Another user might have modified the target branch while the merge was in progress. Wait a few minutes, and then try again.
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `InvalidCommitIdException` : The specified commit ID is not valid.
    /// - `InvalidPullRequestIdException` : The pull request ID is not valid. Make sure that you have provided the full ID and that the pull request is in the specified repository, and then try again.
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `ManualMergeRequiredException` : The pull request cannot be merged automatically into the destination branch. You must manually merge the branches and resolve any conflicts.
    /// - `PullRequestAlreadyClosedException` : The pull request status cannot be updated because it is already closed.
    /// - `PullRequestApprovalRulesNotSatisfiedException` : The pull request cannot be merged because one or more approval rules applied to the pull request have conditions that have not been met.
    /// - `PullRequestDoesNotExistException` : The pull request ID could not be found. Make sure that you have specified the correct repository name and pull request ID, and then try again.
    /// - `PullRequestIdRequiredException` : A pull request ID is required, but none was provided.
    /// - `ReferenceDoesNotExistException` : The specified reference does not exist. You must provide a full commit ID.
    /// - `RepositoryDoesNotExistException` : The specified repository does not exist.
    /// - `RepositoryNameRequiredException` : A repository name is required, but was not specified.
    /// - `RepositoryNotAssociatedWithPullRequestException` : The repository does not contain any pull requests with that pull request ID. Use GetPullRequest to verify the correct repository name for the pull request ID.
    /// - `TipOfSourceReferenceIsDifferentException` : The tip of the source branch in the destination repository does not match the tip of the source branch specified in your request. The pull request might have been updated. Make sure that you have the latest changes.
    func mergePullRequestByFastForward(input: MergePullRequestByFastForwardInput) async throws -> MergePullRequestByFastForwardOutput
    /// Attempts to merge the source commit of a pull request into the specified destination branch for that pull request at the specified commit using the squash merge strategy. If the merge is successful, it closes the pull request.
    ///
    /// - Parameter MergePullRequestBySquashInput : [no documentation found]
    ///
    /// - Returns: `MergePullRequestBySquashOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `CommitMessageLengthExceededException` : The commit message is too long. Provide a shorter string.
    /// - `ConcurrentReferenceUpdateException` : The merge cannot be completed because the target branch has been modified. Another user might have modified the target branch while the merge was in progress. Wait a few minutes, and then try again.
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `FileContentSizeLimitExceededException` : The file cannot be added because it is too large. The maximum file size is 6 MB, and the combined file content change size is 7 MB. Consider making these changes using a Git client.
    /// - `FolderContentSizeLimitExceededException` : The commit cannot be created because at least one of the overall changes in the commit results in a folder whose contents exceed the limit of 6 MB. Either reduce the number and size of your changes, or split the changes across multiple folders.
    /// - `InvalidCommitIdException` : The specified commit ID is not valid.
    /// - `InvalidConflictDetailLevelException` : The specified conflict detail level is not valid.
    /// - `InvalidConflictResolutionException` : The specified conflict resolution list is not valid.
    /// - `InvalidConflictResolutionStrategyException` : The specified conflict resolution strategy is not valid.
    /// - `InvalidEmailException` : The specified email address either contains one or more characters that are not allowed, or it exceeds the maximum number of characters allowed for an email address.
    /// - `InvalidFileModeException` : The specified file mode permission is not valid. For a list of valid file mode permissions, see [PutFile].
    /// - `InvalidPathException` : The specified path is not valid.
    /// - `InvalidPullRequestIdException` : The pull request ID is not valid. Make sure that you have provided the full ID and that the pull request is in the specified repository, and then try again.
    /// - `InvalidReplacementContentException` : Automerge was specified for resolving the conflict, but the replacement type is not valid or content is missing.
    /// - `InvalidReplacementTypeException` : Automerge was specified for resolving the conflict, but the specified replacement type is not valid.
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `ManualMergeRequiredException` : The pull request cannot be merged automatically into the destination branch. You must manually merge the branches and resolve any conflicts.
    /// - `MaximumConflictResolutionEntriesExceededException` : The number of allowed conflict resolution entries was exceeded.
    /// - `MaximumFileContentToLoadExceededException` : The number of files to load exceeds the allowed limit.
    /// - `MaximumItemsToCompareExceededException` : The number of items to compare between the source or destination branches and the merge base has exceeded the maximum allowed.
    /// - `MultipleConflictResolutionEntriesException` : More than one conflict resolution entries exists for the conflict. A conflict can have only one conflict resolution entry.
    /// - `NameLengthExceededException` : The user name is not valid because it has exceeded the character limit for author names.
    /// - `PathRequiredException` : The folderPath for a location cannot be null.
    /// - `PullRequestAlreadyClosedException` : The pull request status cannot be updated because it is already closed.
    /// - `PullRequestApprovalRulesNotSatisfiedException` : The pull request cannot be merged because one or more approval rules applied to the pull request have conditions that have not been met.
    /// - `PullRequestDoesNotExistException` : The pull request ID could not be found. Make sure that you have specified the correct repository name and pull request ID, and then try again.
    /// - `PullRequestIdRequiredException` : A pull request ID is required, but none was provided.
    /// - `ReplacementContentRequiredException` : USE_NEW_CONTENT was specified, but no replacement content has been provided.
    /// - `ReplacementTypeRequiredException` : A replacement type is required.
    /// - `RepositoryDoesNotExistException` : The specified repository does not exist.
    /// - `RepositoryNameRequiredException` : A repository name is required, but was not specified.
    /// - `RepositoryNotAssociatedWithPullRequestException` : The repository does not contain any pull requests with that pull request ID. Use GetPullRequest to verify the correct repository name for the pull request ID.
    /// - `TipOfSourceReferenceIsDifferentException` : The tip of the source branch in the destination repository does not match the tip of the source branch specified in your request. The pull request might have been updated. Make sure that you have the latest changes.
    /// - `TipsDivergenceExceededException` : The divergence between the tips of the provided commit specifiers is too great to determine whether there might be any merge conflicts. Locally compare the specifiers using git diff or a diff tool.
    func mergePullRequestBySquash(input: MergePullRequestBySquashInput) async throws -> MergePullRequestBySquashOutput
    /// Attempts to merge the source commit of a pull request into the specified destination branch for that pull request at the specified commit using the three-way merge strategy. If the merge is successful, it closes the pull request.
    ///
    /// - Parameter MergePullRequestByThreeWayInput : [no documentation found]
    ///
    /// - Returns: `MergePullRequestByThreeWayOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `CommitMessageLengthExceededException` : The commit message is too long. Provide a shorter string.
    /// - `ConcurrentReferenceUpdateException` : The merge cannot be completed because the target branch has been modified. Another user might have modified the target branch while the merge was in progress. Wait a few minutes, and then try again.
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `FileContentSizeLimitExceededException` : The file cannot be added because it is too large. The maximum file size is 6 MB, and the combined file content change size is 7 MB. Consider making these changes using a Git client.
    /// - `FolderContentSizeLimitExceededException` : The commit cannot be created because at least one of the overall changes in the commit results in a folder whose contents exceed the limit of 6 MB. Either reduce the number and size of your changes, or split the changes across multiple folders.
    /// - `InvalidCommitIdException` : The specified commit ID is not valid.
    /// - `InvalidConflictDetailLevelException` : The specified conflict detail level is not valid.
    /// - `InvalidConflictResolutionException` : The specified conflict resolution list is not valid.
    /// - `InvalidConflictResolutionStrategyException` : The specified conflict resolution strategy is not valid.
    /// - `InvalidEmailException` : The specified email address either contains one or more characters that are not allowed, or it exceeds the maximum number of characters allowed for an email address.
    /// - `InvalidFileModeException` : The specified file mode permission is not valid. For a list of valid file mode permissions, see [PutFile].
    /// - `InvalidPathException` : The specified path is not valid.
    /// - `InvalidPullRequestIdException` : The pull request ID is not valid. Make sure that you have provided the full ID and that the pull request is in the specified repository, and then try again.
    /// - `InvalidReplacementContentException` : Automerge was specified for resolving the conflict, but the replacement type is not valid or content is missing.
    /// - `InvalidReplacementTypeException` : Automerge was specified for resolving the conflict, but the specified replacement type is not valid.
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `ManualMergeRequiredException` : The pull request cannot be merged automatically into the destination branch. You must manually merge the branches and resolve any conflicts.
    /// - `MaximumConflictResolutionEntriesExceededException` : The number of allowed conflict resolution entries was exceeded.
    /// - `MaximumFileContentToLoadExceededException` : The number of files to load exceeds the allowed limit.
    /// - `MaximumItemsToCompareExceededException` : The number of items to compare between the source or destination branches and the merge base has exceeded the maximum allowed.
    /// - `MultipleConflictResolutionEntriesException` : More than one conflict resolution entries exists for the conflict. A conflict can have only one conflict resolution entry.
    /// - `NameLengthExceededException` : The user name is not valid because it has exceeded the character limit for author names.
    /// - `PathRequiredException` : The folderPath for a location cannot be null.
    /// - `PullRequestAlreadyClosedException` : The pull request status cannot be updated because it is already closed.
    /// - `PullRequestApprovalRulesNotSatisfiedException` : The pull request cannot be merged because one or more approval rules applied to the pull request have conditions that have not been met.
    /// - `PullRequestDoesNotExistException` : The pull request ID could not be found. Make sure that you have specified the correct repository name and pull request ID, and then try again.
    /// - `PullRequestIdRequiredException` : A pull request ID is required, but none was provided.
    /// - `ReplacementContentRequiredException` : USE_NEW_CONTENT was specified, but no replacement content has been provided.
    /// - `ReplacementTypeRequiredException` : A replacement type is required.
    /// - `RepositoryDoesNotExistException` : The specified repository does not exist.
    /// - `RepositoryNameRequiredException` : A repository name is required, but was not specified.
    /// - `RepositoryNotAssociatedWithPullRequestException` : The repository does not contain any pull requests with that pull request ID. Use GetPullRequest to verify the correct repository name for the pull request ID.
    /// - `TipOfSourceReferenceIsDifferentException` : The tip of the source branch in the destination repository does not match the tip of the source branch specified in your request. The pull request might have been updated. Make sure that you have the latest changes.
    /// - `TipsDivergenceExceededException` : The divergence between the tips of the provided commit specifiers is too great to determine whether there might be any merge conflicts. Locally compare the specifiers using git diff or a diff tool.
    func mergePullRequestByThreeWay(input: MergePullRequestByThreeWayInput) async throws -> MergePullRequestByThreeWayOutput
    /// Sets aside (overrides) all approval rule requirements for a specified pull request.
    ///
    /// - Parameter OverridePullRequestApprovalRulesInput : [no documentation found]
    ///
    /// - Returns: `OverridePullRequestApprovalRulesOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `InvalidOverrideStatusException` : The override status is not valid. Valid statuses are OVERRIDE and REVOKE.
    /// - `InvalidPullRequestIdException` : The pull request ID is not valid. Make sure that you have provided the full ID and that the pull request is in the specified repository, and then try again.
    /// - `InvalidRevisionIdException` : The revision ID is not valid. Use GetPullRequest to determine the value.
    /// - `OverrideAlreadySetException` : The pull request has already had its approval rules set to override.
    /// - `OverrideStatusRequiredException` : An override status is required, but no value was provided. Valid values include OVERRIDE and REVOKE.
    /// - `PullRequestAlreadyClosedException` : The pull request status cannot be updated because it is already closed.
    /// - `PullRequestDoesNotExistException` : The pull request ID could not be found. Make sure that you have specified the correct repository name and pull request ID, and then try again.
    /// - `PullRequestIdRequiredException` : A pull request ID is required, but none was provided.
    /// - `RevisionIdRequiredException` : A revision ID is required, but was not provided.
    /// - `RevisionNotCurrentException` : The revision ID provided in the request does not match the current revision ID. Use GetPullRequest to retrieve the current revision ID.
    func overridePullRequestApprovalRules(input: OverridePullRequestApprovalRulesInput) async throws -> OverridePullRequestApprovalRulesOutput
    /// Posts a comment on the comparison between two commits.
    ///
    /// - Parameter PostCommentForComparedCommitInput : [no documentation found]
    ///
    /// - Returns: `PostCommentForComparedCommitOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `BeforeCommitIdAndAfterCommitIdAreSameException` : The before commit ID and the after commit ID are the same, which is not valid. The before commit ID and the after commit ID must be different commit IDs.
    /// - `ClientRequestTokenRequiredException` : A client request token is required. A client request token is an unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token.
    /// - `CommentContentRequiredException` : The comment is empty. You must provide some content for a comment. The content cannot be null.
    /// - `CommentContentSizeLimitExceededException` : The comment is too large. Comments are limited to 10,240 characters.
    /// - `CommitDoesNotExistException` : The specified commit does not exist or no commit was specified, and the specified repository has no default branch.
    /// - `CommitIdRequiredException` : A commit ID was not specified.
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `IdempotencyParameterMismatchException` : The client request token is not valid. Either the token is not in a valid format, or the token has been used in a previous request and cannot be reused.
    /// - `InvalidClientRequestTokenException` : The client request token is not valid.
    /// - `InvalidCommitIdException` : The specified commit ID is not valid.
    /// - `InvalidFileLocationException` : The location of the file is not valid. Make sure that you include the file name and extension.
    /// - `InvalidFilePositionException` : The position is not valid. Make sure that the line number exists in the version of the file you want to comment on.
    /// - `InvalidPathException` : The specified path is not valid.
    /// - `InvalidRelativeFileVersionEnumException` : Either the enum is not in a valid format, or the specified file version enum is not valid in respect to the current file version.
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `PathDoesNotExistException` : The specified path does not exist.
    /// - `PathRequiredException` : The folderPath for a location cannot be null.
    /// - `RepositoryDoesNotExistException` : The specified repository does not exist.
    /// - `RepositoryNameRequiredException` : A repository name is required, but was not specified.
    func postCommentForComparedCommit(input: PostCommentForComparedCommitInput) async throws -> PostCommentForComparedCommitOutput
    /// Posts a comment on a pull request.
    ///
    /// - Parameter PostCommentForPullRequestInput : [no documentation found]
    ///
    /// - Returns: `PostCommentForPullRequestOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `BeforeCommitIdAndAfterCommitIdAreSameException` : The before commit ID and the after commit ID are the same, which is not valid. The before commit ID and the after commit ID must be different commit IDs.
    /// - `ClientRequestTokenRequiredException` : A client request token is required. A client request token is an unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token.
    /// - `CommentContentRequiredException` : The comment is empty. You must provide some content for a comment. The content cannot be null.
    /// - `CommentContentSizeLimitExceededException` : The comment is too large. Comments are limited to 10,240 characters.
    /// - `CommitDoesNotExistException` : The specified commit does not exist or no commit was specified, and the specified repository has no default branch.
    /// - `CommitIdRequiredException` : A commit ID was not specified.
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `IdempotencyParameterMismatchException` : The client request token is not valid. Either the token is not in a valid format, or the token has been used in a previous request and cannot be reused.
    /// - `InvalidClientRequestTokenException` : The client request token is not valid.
    /// - `InvalidCommitIdException` : The specified commit ID is not valid.
    /// - `InvalidFileLocationException` : The location of the file is not valid. Make sure that you include the file name and extension.
    /// - `InvalidFilePositionException` : The position is not valid. Make sure that the line number exists in the version of the file you want to comment on.
    /// - `InvalidPathException` : The specified path is not valid.
    /// - `InvalidPullRequestIdException` : The pull request ID is not valid. Make sure that you have provided the full ID and that the pull request is in the specified repository, and then try again.
    /// - `InvalidRelativeFileVersionEnumException` : Either the enum is not in a valid format, or the specified file version enum is not valid in respect to the current file version.
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `PathDoesNotExistException` : The specified path does not exist.
    /// - `PathRequiredException` : The folderPath for a location cannot be null.
    /// - `PullRequestDoesNotExistException` : The pull request ID could not be found. Make sure that you have specified the correct repository name and pull request ID, and then try again.
    /// - `PullRequestIdRequiredException` : A pull request ID is required, but none was provided.
    /// - `RepositoryDoesNotExistException` : The specified repository does not exist.
    /// - `RepositoryNameRequiredException` : A repository name is required, but was not specified.
    /// - `RepositoryNotAssociatedWithPullRequestException` : The repository does not contain any pull requests with that pull request ID. Use GetPullRequest to verify the correct repository name for the pull request ID.
    func postCommentForPullRequest(input: PostCommentForPullRequestInput) async throws -> PostCommentForPullRequestOutput
    /// Posts a comment in reply to an existing comment on a comparison between commits or a pull request.
    ///
    /// - Parameter PostCommentReplyInput : [no documentation found]
    ///
    /// - Returns: `PostCommentReplyOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ClientRequestTokenRequiredException` : A client request token is required. A client request token is an unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token.
    /// - `CommentContentRequiredException` : The comment is empty. You must provide some content for a comment. The content cannot be null.
    /// - `CommentContentSizeLimitExceededException` : The comment is too large. Comments are limited to 10,240 characters.
    /// - `CommentDoesNotExistException` : No comment exists with the provided ID. Verify that you have used the correct ID, and then try again.
    /// - `CommentIdRequiredException` : The comment ID is missing or null. A comment ID is required.
    /// - `IdempotencyParameterMismatchException` : The client request token is not valid. Either the token is not in a valid format, or the token has been used in a previous request and cannot be reused.
    /// - `InvalidClientRequestTokenException` : The client request token is not valid.
    /// - `InvalidCommentIdException` : The comment ID is not in a valid format. Make sure that you have provided the full comment ID.
    func postCommentReply(input: PostCommentReplyInput) async throws -> PostCommentReplyOutput
    /// Adds or updates a reaction to a specified comment for the user whose identity is used to make the request. You can only add or update a reaction for yourself. You cannot add, modify, or delete a reaction for another user.
    ///
    /// - Parameter PutCommentReactionInput : [no documentation found]
    ///
    /// - Returns: `PutCommentReactionOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `CommentDeletedException` : This comment has already been deleted. You cannot edit or delete a deleted comment.
    /// - `CommentDoesNotExistException` : No comment exists with the provided ID. Verify that you have used the correct ID, and then try again.
    /// - `CommentIdRequiredException` : The comment ID is missing or null. A comment ID is required.
    /// - `InvalidCommentIdException` : The comment ID is not in a valid format. Make sure that you have provided the full comment ID.
    /// - `InvalidReactionValueException` : The value of the reaction is not valid. For more information, see the [CodeCommit User Guide](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html).
    /// - `ReactionLimitExceededException` : The number of reactions has been exceeded. Reactions are limited to one reaction per user for each individual comment ID.
    /// - `ReactionValueRequiredException` : A reaction value is required.
    func putCommentReaction(input: PutCommentReactionInput) async throws -> PutCommentReactionOutput
    /// Adds or updates a file in a branch in an CodeCommit repository, and generates a commit for the addition in the specified branch.
    ///
    /// - Parameter PutFileInput : [no documentation found]
    ///
    /// - Returns: `PutFileOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `BranchDoesNotExistException` : The specified branch does not exist.
    /// - `BranchNameIsTagNameException` : The specified branch name is not valid because it is a tag name. Enter the name of a branch in the repository. For a list of valid branch names, use [ListBranches].
    /// - `BranchNameRequiredException` : A branch name is required, but was not specified.
    /// - `CommitMessageLengthExceededException` : The commit message is too long. Provide a shorter string.
    /// - `DirectoryNameConflictsWithFileNameException` : A file cannot be added to the repository because the specified path name has the same name as a file that already exists in this repository. Either provide a different name for the file, or specify a different path for the file.
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `FileContentRequiredException` : The file cannot be added because it is empty. Empty files cannot be added to the repository with this API.
    /// - `FileContentSizeLimitExceededException` : The file cannot be added because it is too large. The maximum file size is 6 MB, and the combined file content change size is 7 MB. Consider making these changes using a Git client.
    /// - `FileNameConflictsWithDirectoryNameException` : A file cannot be added to the repository because the specified file name has the same name as a directory in this repository. Either provide another name for the file, or add the file in a directory that does not match the file name.
    /// - `FilePathConflictsWithSubmodulePathException` : The commit cannot be created because a specified file path points to a submodule. Verify that the destination files have valid file paths that do not point to a submodule.
    /// - `FolderContentSizeLimitExceededException` : The commit cannot be created because at least one of the overall changes in the commit results in a folder whose contents exceed the limit of 6 MB. Either reduce the number and size of your changes, or split the changes across multiple folders.
    /// - `InvalidBranchNameException` : The specified reference name is not valid.
    /// - `InvalidDeletionParameterException` : The specified deletion parameter is not valid.
    /// - `InvalidEmailException` : The specified email address either contains one or more characters that are not allowed, or it exceeds the maximum number of characters allowed for an email address.
    /// - `InvalidFileModeException` : The specified file mode permission is not valid. For a list of valid file mode permissions, see [PutFile].
    /// - `InvalidParentCommitIdException` : The parent commit ID is not valid. The commit ID cannot be empty, and must match the head commit ID for the branch of the repository where you want to add or update a file.
    /// - `InvalidPathException` : The specified path is not valid.
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `NameLengthExceededException` : The user name is not valid because it has exceeded the character limit for author names.
    /// - `ParentCommitDoesNotExistException` : The parent commit ID is not valid because it does not exist. The specified parent commit ID does not exist in the specified branch of the repository.
    /// - `ParentCommitIdOutdatedException` : The file could not be added because the provided parent commit ID is not the current tip of the specified branch. To view the full commit ID of the current head of the branch, use [GetBranch].
    /// - `ParentCommitIdRequiredException` : A parent commit ID is required. To view the full commit ID of a branch in a repository, use [GetBranch] or a Git command (for example, git pull or git log).
    /// - `PathRequiredException` : The folderPath for a location cannot be null.
    /// - `RepositoryDoesNotExistException` : The specified repository does not exist.
    /// - `RepositoryNameRequiredException` : A repository name is required, but was not specified.
    /// - `SameFileContentException` : The file was not added or updated because the content of the file is exactly the same as the content of that file in the repository and branch that you specified.
    func putFile(input: PutFileInput) async throws -> PutFileOutput
    /// Replaces all triggers for a repository. Used to create or delete triggers.
    ///
    /// - Parameter PutRepositoryTriggersInput : Represents the input of a put repository triggers operation.
    ///
    /// - Returns: `PutRepositoryTriggersOutput` : Represents the output of a put repository triggers operation.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `InvalidRepositoryTriggerBranchNameException` : One or more branch names specified for the trigger is not valid.
    /// - `InvalidRepositoryTriggerCustomDataException` : The custom data provided for the trigger is not valid.
    /// - `InvalidRepositoryTriggerDestinationArnException` : The Amazon Resource Name (ARN) for the trigger is not valid for the specified destination. The most common reason for this error is that the ARN does not meet the requirements for the service type.
    /// - `InvalidRepositoryTriggerEventsException` : One or more events specified for the trigger is not valid. Check to make sure that all events specified match the requirements for allowed events.
    /// - `InvalidRepositoryTriggerNameException` : The name of the trigger is not valid.
    /// - `InvalidRepositoryTriggerRegionException` : The Amazon Web Services Region for the trigger target does not match the Amazon Web Services Region for the repository. Triggers must be created in the same Amazon Web Services Region as the target for the trigger.
    /// - `MaximumBranchesExceededException` : The number of branches for the trigger was exceeded.
    /// - `MaximumRepositoryTriggersExceededException` : The number of triggers allowed for the repository was exceeded.
    /// - `RepositoryDoesNotExistException` : The specified repository does not exist.
    /// - `RepositoryNameRequiredException` : A repository name is required, but was not specified.
    /// - `RepositoryTriggerBranchNameListRequiredException` : At least one branch name is required, but was not specified in the trigger configuration.
    /// - `RepositoryTriggerDestinationArnRequiredException` : A destination ARN for the target service for the trigger is required, but was not specified.
    /// - `RepositoryTriggerEventsListRequiredException` : At least one event for the trigger is required, but was not specified.
    /// - `RepositoryTriggerNameRequiredException` : A name for the trigger is required, but was not specified.
    /// - `RepositoryTriggersListRequiredException` : The list of triggers for the repository is required, but was not specified.
    func putRepositoryTriggers(input: PutRepositoryTriggersInput) async throws -> PutRepositoryTriggersOutput
    /// Adds or updates tags for a resource in CodeCommit. For a list of valid resources in CodeCommit, see [CodeCommit Resources and Operations](https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats) in the CodeCommit User Guide.
    ///
    /// - Parameter TagResourceInput : [no documentation found]
    ///
    /// - Returns: `TagResourceOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `InvalidResourceArnException` : The value for the resource ARN is not valid. For more information about resources in CodeCommit, see [CodeCommit Resources and Operations](https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats) in the CodeCommit User Guide.
    /// - `InvalidSystemTagUsageException` : The specified tag is not valid. Key names cannot be prefixed with aws:.
    /// - `InvalidTagsMapException` : The map of tags is not valid.
    /// - `RepositoryDoesNotExistException` : The specified repository does not exist.
    /// - `ResourceArnRequiredException` : A valid Amazon Resource Name (ARN) for an CodeCommit resource is required. For a list of valid resources in CodeCommit, see [CodeCommit Resources and Operations](https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats) in the CodeCommit User Guide.
    /// - `TagPolicyException` : The tag policy is not valid.
    /// - `TagsMapRequiredException` : A map of tags is required.
    /// - `TooManyTagsException` : The maximum number of tags for an CodeCommit resource has been exceeded.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutput
    /// Tests the functionality of repository triggers by sending information to the trigger target. If real data is available in the repository, the test sends data from the last commit. If no data is available, sample data is generated.
    ///
    /// - Parameter TestRepositoryTriggersInput : Represents the input of a test repository triggers operation.
    ///
    /// - Returns: `TestRepositoryTriggersOutput` : Represents the output of a test repository triggers operation.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `InvalidRepositoryTriggerBranchNameException` : One or more branch names specified for the trigger is not valid.
    /// - `InvalidRepositoryTriggerCustomDataException` : The custom data provided for the trigger is not valid.
    /// - `InvalidRepositoryTriggerDestinationArnException` : The Amazon Resource Name (ARN) for the trigger is not valid for the specified destination. The most common reason for this error is that the ARN does not meet the requirements for the service type.
    /// - `InvalidRepositoryTriggerEventsException` : One or more events specified for the trigger is not valid. Check to make sure that all events specified match the requirements for allowed events.
    /// - `InvalidRepositoryTriggerNameException` : The name of the trigger is not valid.
    /// - `InvalidRepositoryTriggerRegionException` : The Amazon Web Services Region for the trigger target does not match the Amazon Web Services Region for the repository. Triggers must be created in the same Amazon Web Services Region as the target for the trigger.
    /// - `MaximumBranchesExceededException` : The number of branches for the trigger was exceeded.
    /// - `MaximumRepositoryTriggersExceededException` : The number of triggers allowed for the repository was exceeded.
    /// - `RepositoryDoesNotExistException` : The specified repository does not exist.
    /// - `RepositoryNameRequiredException` : A repository name is required, but was not specified.
    /// - `RepositoryTriggerBranchNameListRequiredException` : At least one branch name is required, but was not specified in the trigger configuration.
    /// - `RepositoryTriggerDestinationArnRequiredException` : A destination ARN for the target service for the trigger is required, but was not specified.
    /// - `RepositoryTriggerEventsListRequiredException` : At least one event for the trigger is required, but was not specified.
    /// - `RepositoryTriggerNameRequiredException` : A name for the trigger is required, but was not specified.
    /// - `RepositoryTriggersListRequiredException` : The list of triggers for the repository is required, but was not specified.
    func testRepositoryTriggers(input: TestRepositoryTriggersInput) async throws -> TestRepositoryTriggersOutput
    /// Removes tags for a resource in CodeCommit. For a list of valid resources in CodeCommit, see [CodeCommit Resources and Operations](https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats) in the CodeCommit User Guide.
    ///
    /// - Parameter UntagResourceInput : [no documentation found]
    ///
    /// - Returns: `UntagResourceOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `InvalidResourceArnException` : The value for the resource ARN is not valid. For more information about resources in CodeCommit, see [CodeCommit Resources and Operations](https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats) in the CodeCommit User Guide.
    /// - `InvalidSystemTagUsageException` : The specified tag is not valid. Key names cannot be prefixed with aws:.
    /// - `InvalidTagKeysListException` : The list of tags is not valid.
    /// - `RepositoryDoesNotExistException` : The specified repository does not exist.
    /// - `ResourceArnRequiredException` : A valid Amazon Resource Name (ARN) for an CodeCommit resource is required. For a list of valid resources in CodeCommit, see [CodeCommit Resources and Operations](https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats) in the CodeCommit User Guide.
    /// - `TagKeysListRequiredException` : A list of tag keys is required. The list cannot be empty or null.
    /// - `TagPolicyException` : The tag policy is not valid.
    /// - `TooManyTagsException` : The maximum number of tags for an CodeCommit resource has been exceeded.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutput
    /// Updates the content of an approval rule template. You can change the number of required approvals, the membership of the approval rule, and whether an approval pool is defined.
    ///
    /// - Parameter UpdateApprovalRuleTemplateContentInput : [no documentation found]
    ///
    /// - Returns: `UpdateApprovalRuleTemplateContentOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ApprovalRuleTemplateContentRequiredException` : The content for the approval rule template is empty. You must provide some content for an approval rule template. The content cannot be null.
    /// - `ApprovalRuleTemplateDoesNotExistException` : The specified approval rule template does not exist. Verify that the name is correct and that you are signed in to the Amazon Web Services Region where the template was created, and then try again.
    /// - `ApprovalRuleTemplateNameRequiredException` : An approval rule template name is required, but was not specified.
    /// - `InvalidApprovalRuleTemplateContentException` : The content of the approval rule template is not valid.
    /// - `InvalidApprovalRuleTemplateNameException` : The name of the approval rule template is not valid. Template names must be between 1 and 100 valid characters in length. For more information about limits in CodeCommit, see [Quotas](https://docs.aws.amazon.com/codecommit/latest/userguide/limits.html) in the CodeCommit User Guide.
    /// - `InvalidRuleContentSha256Exception` : The SHA-256 hash signature for the rule content is not valid.
    func updateApprovalRuleTemplateContent(input: UpdateApprovalRuleTemplateContentInput) async throws -> UpdateApprovalRuleTemplateContentOutput
    /// Updates the description for a specified approval rule template.
    ///
    /// - Parameter UpdateApprovalRuleTemplateDescriptionInput : [no documentation found]
    ///
    /// - Returns: `UpdateApprovalRuleTemplateDescriptionOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ApprovalRuleTemplateDoesNotExistException` : The specified approval rule template does not exist. Verify that the name is correct and that you are signed in to the Amazon Web Services Region where the template was created, and then try again.
    /// - `ApprovalRuleTemplateNameRequiredException` : An approval rule template name is required, but was not specified.
    /// - `InvalidApprovalRuleTemplateDescriptionException` : The description for the approval rule template is not valid because it exceeds the maximum characters allowed for a description. For more information about limits in CodeCommit, see [Quotas](https://docs.aws.amazon.com/codecommit/latest/userguide/limits.html) in the CodeCommit User Guide.
    /// - `InvalidApprovalRuleTemplateNameException` : The name of the approval rule template is not valid. Template names must be between 1 and 100 valid characters in length. For more information about limits in CodeCommit, see [Quotas](https://docs.aws.amazon.com/codecommit/latest/userguide/limits.html) in the CodeCommit User Guide.
    func updateApprovalRuleTemplateDescription(input: UpdateApprovalRuleTemplateDescriptionInput) async throws -> UpdateApprovalRuleTemplateDescriptionOutput
    /// Updates the name of a specified approval rule template.
    ///
    /// - Parameter UpdateApprovalRuleTemplateNameInput : [no documentation found]
    ///
    /// - Returns: `UpdateApprovalRuleTemplateNameOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ApprovalRuleTemplateDoesNotExistException` : The specified approval rule template does not exist. Verify that the name is correct and that you are signed in to the Amazon Web Services Region where the template was created, and then try again.
    /// - `ApprovalRuleTemplateNameAlreadyExistsException` : You cannot create an approval rule template with that name because a template with that name already exists in this Amazon Web Services Region for your Amazon Web Services account. Approval rule template names must be unique.
    /// - `ApprovalRuleTemplateNameRequiredException` : An approval rule template name is required, but was not specified.
    /// - `InvalidApprovalRuleTemplateNameException` : The name of the approval rule template is not valid. Template names must be between 1 and 100 valid characters in length. For more information about limits in CodeCommit, see [Quotas](https://docs.aws.amazon.com/codecommit/latest/userguide/limits.html) in the CodeCommit User Guide.
    func updateApprovalRuleTemplateName(input: UpdateApprovalRuleTemplateNameInput) async throws -> UpdateApprovalRuleTemplateNameOutput
    /// Replaces the contents of a comment.
    ///
    /// - Parameter UpdateCommentInput : [no documentation found]
    ///
    /// - Returns: `UpdateCommentOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `CommentContentRequiredException` : The comment is empty. You must provide some content for a comment. The content cannot be null.
    /// - `CommentContentSizeLimitExceededException` : The comment is too large. Comments are limited to 10,240 characters.
    /// - `CommentDeletedException` : This comment has already been deleted. You cannot edit or delete a deleted comment.
    /// - `CommentDoesNotExistException` : No comment exists with the provided ID. Verify that you have used the correct ID, and then try again.
    /// - `CommentIdRequiredException` : The comment ID is missing or null. A comment ID is required.
    /// - `CommentNotCreatedByCallerException` : You cannot modify or delete this comment. Only comment authors can modify or delete their comments.
    /// - `InvalidCommentIdException` : The comment ID is not in a valid format. Make sure that you have provided the full comment ID.
    func updateComment(input: UpdateCommentInput) async throws -> UpdateCommentOutput
    /// Sets or changes the default branch name for the specified repository. If you use this operation to change the default branch name to the current default branch name, a success message is returned even though the default branch did not change.
    ///
    /// - Parameter UpdateDefaultBranchInput : Represents the input of an update default branch operation.
    ///
    /// - Returns: `UpdateDefaultBranchOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `BranchDoesNotExistException` : The specified branch does not exist.
    /// - `BranchNameRequiredException` : A branch name is required, but was not specified.
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `InvalidBranchNameException` : The specified reference name is not valid.
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `RepositoryDoesNotExistException` : The specified repository does not exist.
    /// - `RepositoryNameRequiredException` : A repository name is required, but was not specified.
    func updateDefaultBranch(input: UpdateDefaultBranchInput) async throws -> UpdateDefaultBranchOutput
    /// Updates the structure of an approval rule created specifically for a pull request. For example, you can change the number of required approvers and the approval pool for approvers.
    ///
    /// - Parameter UpdatePullRequestApprovalRuleContentInput : [no documentation found]
    ///
    /// - Returns: `UpdatePullRequestApprovalRuleContentOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ApprovalRuleContentRequiredException` : The content for the approval rule is empty. You must provide some content for an approval rule. The content cannot be null.
    /// - `ApprovalRuleDoesNotExistException` : The specified approval rule does not exist.
    /// - `ApprovalRuleNameRequiredException` : An approval rule name is required, but was not specified.
    /// - `CannotModifyApprovalRuleFromTemplateException` : The approval rule cannot be modified for the pull request because it was created by an approval rule template and applied to the pull request automatically.
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `InvalidApprovalRuleContentException` : The content for the approval rule is not valid.
    /// - `InvalidApprovalRuleNameException` : The name for the approval rule is not valid.
    /// - `InvalidPullRequestIdException` : The pull request ID is not valid. Make sure that you have provided the full ID and that the pull request is in the specified repository, and then try again.
    /// - `InvalidRuleContentSha256Exception` : The SHA-256 hash signature for the rule content is not valid.
    /// - `PullRequestAlreadyClosedException` : The pull request status cannot be updated because it is already closed.
    /// - `PullRequestDoesNotExistException` : The pull request ID could not be found. Make sure that you have specified the correct repository name and pull request ID, and then try again.
    /// - `PullRequestIdRequiredException` : A pull request ID is required, but none was provided.
    func updatePullRequestApprovalRuleContent(input: UpdatePullRequestApprovalRuleContentInput) async throws -> UpdatePullRequestApprovalRuleContentOutput
    /// Updates the state of a user's approval on a pull request. The user is derived from the signed-in account when the request is made.
    ///
    /// - Parameter UpdatePullRequestApprovalStateInput : [no documentation found]
    ///
    /// - Returns: `UpdatePullRequestApprovalStateOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ApprovalStateRequiredException` : An approval state is required, but was not specified.
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `InvalidApprovalStateException` : The state for the approval is not valid. Valid values include APPROVE and REVOKE.
    /// - `InvalidPullRequestIdException` : The pull request ID is not valid. Make sure that you have provided the full ID and that the pull request is in the specified repository, and then try again.
    /// - `InvalidRevisionIdException` : The revision ID is not valid. Use GetPullRequest to determine the value.
    /// - `MaximumNumberOfApprovalsExceededException` : The number of approvals required for the approval rule exceeds the maximum number allowed.
    /// - `PullRequestAlreadyClosedException` : The pull request status cannot be updated because it is already closed.
    /// - `PullRequestCannotBeApprovedByAuthorException` : The approval cannot be applied because the user approving the pull request matches the user who created the pull request. You cannot approve a pull request that you created.
    /// - `PullRequestDoesNotExistException` : The pull request ID could not be found. Make sure that you have specified the correct repository name and pull request ID, and then try again.
    /// - `PullRequestIdRequiredException` : A pull request ID is required, but none was provided.
    /// - `RevisionIdRequiredException` : A revision ID is required, but was not provided.
    /// - `RevisionNotCurrentException` : The revision ID provided in the request does not match the current revision ID. Use GetPullRequest to retrieve the current revision ID.
    func updatePullRequestApprovalState(input: UpdatePullRequestApprovalStateInput) async throws -> UpdatePullRequestApprovalStateOutput
    /// Replaces the contents of the description of a pull request.
    ///
    /// - Parameter UpdatePullRequestDescriptionInput : [no documentation found]
    ///
    /// - Returns: `UpdatePullRequestDescriptionOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InvalidDescriptionException` : The pull request description is not valid. Descriptions cannot be more than 1,000 characters.
    /// - `InvalidPullRequestIdException` : The pull request ID is not valid. Make sure that you have provided the full ID and that the pull request is in the specified repository, and then try again.
    /// - `PullRequestAlreadyClosedException` : The pull request status cannot be updated because it is already closed.
    /// - `PullRequestDoesNotExistException` : The pull request ID could not be found. Make sure that you have specified the correct repository name and pull request ID, and then try again.
    /// - `PullRequestIdRequiredException` : A pull request ID is required, but none was provided.
    func updatePullRequestDescription(input: UpdatePullRequestDescriptionInput) async throws -> UpdatePullRequestDescriptionOutput
    /// Updates the status of a pull request.
    ///
    /// - Parameter UpdatePullRequestStatusInput : [no documentation found]
    ///
    /// - Returns: `UpdatePullRequestStatusOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `InvalidPullRequestIdException` : The pull request ID is not valid. Make sure that you have provided the full ID and that the pull request is in the specified repository, and then try again.
    /// - `InvalidPullRequestStatusException` : The pull request status is not valid. The only valid values are OPEN and CLOSED.
    /// - `InvalidPullRequestStatusUpdateException` : The pull request status update is not valid. The only valid update is from OPEN to CLOSED.
    /// - `PullRequestDoesNotExistException` : The pull request ID could not be found. Make sure that you have specified the correct repository name and pull request ID, and then try again.
    /// - `PullRequestIdRequiredException` : A pull request ID is required, but none was provided.
    /// - `PullRequestStatusRequiredException` : A pull request status is required, but none was provided.
    func updatePullRequestStatus(input: UpdatePullRequestStatusInput) async throws -> UpdatePullRequestStatusOutput
    /// Replaces the title of a pull request.
    ///
    /// - Parameter UpdatePullRequestTitleInput : [no documentation found]
    ///
    /// - Returns: `UpdatePullRequestTitleOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InvalidPullRequestIdException` : The pull request ID is not valid. Make sure that you have provided the full ID and that the pull request is in the specified repository, and then try again.
    /// - `InvalidTitleException` : The title of the pull request is not valid. Pull request titles cannot exceed 100 characters in length.
    /// - `PullRequestAlreadyClosedException` : The pull request status cannot be updated because it is already closed.
    /// - `PullRequestDoesNotExistException` : The pull request ID could not be found. Make sure that you have specified the correct repository name and pull request ID, and then try again.
    /// - `PullRequestIdRequiredException` : A pull request ID is required, but none was provided.
    /// - `TitleRequiredException` : A pull request title is required. It cannot be empty or null.
    func updatePullRequestTitle(input: UpdatePullRequestTitleInput) async throws -> UpdatePullRequestTitleOutput
    /// Sets or changes the comment or description for a repository. The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a webpage can expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a webpage.
    ///
    /// - Parameter UpdateRepositoryDescriptionInput : Represents the input of an update repository description operation.
    ///
    /// - Returns: `UpdateRepositoryDescriptionOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `EncryptionIntegrityChecksFailedException` : An encryption integrity check failed.
    /// - `EncryptionKeyAccessDeniedException` : An encryption key could not be accessed.
    /// - `EncryptionKeyDisabledException` : The encryption key is disabled.
    /// - `EncryptionKeyNotFoundException` : No encryption key was found.
    /// - `EncryptionKeyUnavailableException` : The encryption key is not available.
    /// - `InvalidRepositoryDescriptionException` : The specified repository description is not valid.
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `RepositoryDoesNotExistException` : The specified repository does not exist.
    /// - `RepositoryNameRequiredException` : A repository name is required, but was not specified.
    func updateRepositoryDescription(input: UpdateRepositoryDescriptionInput) async throws -> UpdateRepositoryDescriptionOutput
    /// Renames a repository. The repository name must be unique across the calling Amazon Web Services account. Repository names are limited to 100 alphanumeric, dash, and underscore characters, and cannot include certain characters. The suffix .git is prohibited. For more information about the limits on repository names, see [Quotas](https://docs.aws.amazon.com/codecommit/latest/userguide/limits.html) in the CodeCommit User Guide.
    ///
    /// - Parameter UpdateRepositoryNameInput : Represents the input of an update repository description operation.
    ///
    /// - Returns: `UpdateRepositoryNameOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InvalidRepositoryNameException` : A specified repository name is not valid. This exception occurs only when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.
    /// - `RepositoryDoesNotExistException` : The specified repository does not exist.
    /// - `RepositoryNameExistsException` : The specified repository name already exists.
    /// - `RepositoryNameRequiredException` : A repository name is required, but was not specified.
    func updateRepositoryName(input: UpdateRepositoryNameInput) async throws -> UpdateRepositoryNameOutput
}

public enum CodeCommitClientTypes {}
