//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum Smithy.ClientError
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.URIQueryItem
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox

extension EKSClientTypes {

    public enum AuthenticationMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case api
        case apiAndConfigMap
        case configMap
        case sdkUnknown(Swift.String)

        public static var allCases: [AuthenticationMode] {
            return [
                .api,
                .apiAndConfigMap,
                .configMap
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .api: return "API"
            case .apiAndConfigMap: return "API_AND_CONFIG_MAP"
            case .configMap: return "CONFIG_MAP"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EKSClientTypes {

    /// The access configuration for the cluster.
    public struct AccessConfigResponse: Swift.Sendable {
        /// The current authentication mode of the cluster.
        public var authenticationMode: EKSClientTypes.AuthenticationMode?
        /// Specifies whether or not the cluster creator IAM principal was set as a cluster admin access entry during cluster creation time.
        public var bootstrapClusterCreatorAdminPermissions: Swift.Bool?

        public init(
            authenticationMode: EKSClientTypes.AuthenticationMode? = nil,
            bootstrapClusterCreatorAdminPermissions: Swift.Bool? = nil
        )
        {
            self.authenticationMode = authenticationMode
            self.bootstrapClusterCreatorAdminPermissions = bootstrapClusterCreatorAdminPermissions
        }
    }
}

/// You don't have permissions to perform the requested operation. The [IAM principal](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html) making the request must have at least one IAM permissions policy attached that grants the required permissions. For more information, see [Access management](https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html) in the IAM User Guide.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// You do not have sufficient access to perform this action.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension EKSClientTypes {

    /// An access entry allows an IAM principal (user or role) to access your cluster. Access entries can replace the need to maintain the aws-authConfigMap for authentication. For more information about access entries, see [Access entries](https://docs.aws.amazon.com/eks/latest/userguide/access-entries.html) in the Amazon EKS User Guide.
    public struct AccessEntry: Swift.Sendable {
        /// The ARN of the access entry.
        public var accessEntryArn: Swift.String?
        /// The name of your cluster.
        public var clusterName: Swift.String?
        /// The Unix epoch timestamp at object creation.
        public var createdAt: Foundation.Date?
        /// A name that you've specified in a Kubernetes RoleBinding or ClusterRoleBinding object so that Kubernetes authorizes the principalARN access to cluster objects.
        public var kubernetesGroups: [Swift.String]?
        /// The Unix epoch timestamp for the last modification to the object.
        public var modifiedAt: Foundation.Date?
        /// The ARN of the IAM principal for the access entry. If you ever delete the IAM principal with this ARN, the access entry isn't automatically deleted. We recommend that you delete the access entry with an ARN for an IAM principal that you delete. If you don't delete the access entry and ever recreate the IAM principal, even if it has the same ARN, the access entry won't work. This is because even though the ARN is the same for the recreated IAM principal, the roleID or userID (you can see this with the Security Token Service GetCallerIdentity API) is different for the recreated IAM principal than it was for the original IAM principal. Even though you don't see the IAM principal's roleID or userID for an access entry, Amazon EKS stores it with the access entry.
        public var principalArn: Swift.String?
        /// Metadata that assists with categorization and organization. Each tag consists of a key and an optional value. You define both. Tags don't propagate to any other cluster or Amazon Web Services resources.
        public var tags: [Swift.String: Swift.String]?
        /// The type of the access entry.
        public var type: Swift.String?
        /// The name of a user that can authenticate to your cluster.
        public var username: Swift.String?

        public init(
            accessEntryArn: Swift.String? = nil,
            clusterName: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            kubernetesGroups: [Swift.String]? = nil,
            modifiedAt: Foundation.Date? = nil,
            principalArn: Swift.String? = nil,
            tags: [Swift.String: Swift.String]? = nil,
            type: Swift.String? = nil,
            username: Swift.String? = nil
        )
        {
            self.accessEntryArn = accessEntryArn
            self.clusterName = clusterName
            self.createdAt = createdAt
            self.kubernetesGroups = kubernetesGroups
            self.modifiedAt = modifiedAt
            self.principalArn = principalArn
            self.tags = tags
            self.type = type
            self.username = username
        }
    }
}

extension EKSClientTypes {

    /// An access policy includes permissions that allow Amazon EKS to authorize an IAM principal to work with Kubernetes objects on your cluster. The policies are managed by Amazon EKS, but they're not IAM policies. You can't view the permissions in the policies using the API. The permissions for many of the policies are similar to the Kubernetes cluster-admin, admin, edit, and view cluster roles. For more information about these cluster roles, see [User-facing roles](https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles) in the Kubernetes documentation. To view the contents of the policies, see [Access policy permissions](https://docs.aws.amazon.com/eks/latest/userguide/access-policies.html#access-policy-permissions) in the Amazon EKS User Guide.
    public struct AccessPolicy: Swift.Sendable {
        /// The ARN of the access policy.
        public var arn: Swift.String?
        /// The name of the access policy.
        public var name: Swift.String?

        public init(
            arn: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.arn = arn
            self.name = name
        }
    }
}

extension EKSClientTypes {

    public enum AccessScopeType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cluster
        case namespace
        case sdkUnknown(Swift.String)

        public static var allCases: [AccessScopeType] {
            return [
                .cluster,
                .namespace
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cluster: return "cluster"
            case .namespace: return "namespace"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EKSClientTypes {

    /// The scope of an AccessPolicy that's associated to an AccessEntry.
    public struct AccessScope: Swift.Sendable {
        /// A Kubernetes namespace that an access policy is scoped to. A value is required if you specified namespace for Type.
        public var namespaces: [Swift.String]?
        /// The scope type of an access policy.
        public var type: EKSClientTypes.AccessScopeType?

        public init(
            namespaces: [Swift.String]? = nil,
            type: EKSClientTypes.AccessScopeType? = nil
        )
        {
            self.namespaces = namespaces
            self.type = type
        }
    }
}

extension EKSClientTypes {

    public enum AddonIssueCode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accessDenied
        case addonPermissionFailure
        case addonSubscriptionNeeded
        case admissionRequestDenied
        case clusterUnreachable
        case configurationConflict
        case insufficientNumberOfReplicas
        case internalFailure
        case k8sResourceNotFound
        case unsupportedAddonModification
        case sdkUnknown(Swift.String)

        public static var allCases: [AddonIssueCode] {
            return [
                .accessDenied,
                .addonPermissionFailure,
                .addonSubscriptionNeeded,
                .admissionRequestDenied,
                .clusterUnreachable,
                .configurationConflict,
                .insufficientNumberOfReplicas,
                .internalFailure,
                .k8sResourceNotFound,
                .unsupportedAddonModification
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accessDenied: return "AccessDenied"
            case .addonPermissionFailure: return "AddonPermissionFailure"
            case .addonSubscriptionNeeded: return "AddonSubscriptionNeeded"
            case .admissionRequestDenied: return "AdmissionRequestDenied"
            case .clusterUnreachable: return "ClusterUnreachable"
            case .configurationConflict: return "ConfigurationConflict"
            case .insufficientNumberOfReplicas: return "InsufficientNumberOfReplicas"
            case .internalFailure: return "InternalFailure"
            case .k8sResourceNotFound: return "K8sResourceNotFound"
            case .unsupportedAddonModification: return "UnsupportedAddonModification"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EKSClientTypes {

    /// An issue related to an add-on.
    public struct AddonIssue: Swift.Sendable {
        /// A code that describes the type of issue.
        public var code: EKSClientTypes.AddonIssueCode?
        /// A message that provides details about the issue and what might cause it.
        public var message: Swift.String?
        /// The resource IDs of the issue.
        public var resourceIds: [Swift.String]?

        public init(
            code: EKSClientTypes.AddonIssueCode? = nil,
            message: Swift.String? = nil,
            resourceIds: [Swift.String]? = nil
        )
        {
            self.code = code
            self.message = message
            self.resourceIds = resourceIds
        }
    }
}

extension EKSClientTypes {

    /// The health of the add-on.
    public struct AddonHealth: Swift.Sendable {
        /// An object representing the health issues for an add-on.
        public var issues: [EKSClientTypes.AddonIssue]?

        public init(
            issues: [EKSClientTypes.AddonIssue]? = nil
        )
        {
            self.issues = issues
        }
    }
}

extension EKSClientTypes {

    /// Information about an Amazon EKS add-on from the Amazon Web Services Marketplace.
    public struct MarketplaceInformation: Swift.Sendable {
        /// The product ID from the Amazon Web Services Marketplace.
        public var productId: Swift.String?
        /// The product URL from the Amazon Web Services Marketplace.
        public var productUrl: Swift.String?

        public init(
            productId: Swift.String? = nil,
            productUrl: Swift.String? = nil
        )
        {
            self.productId = productId
            self.productUrl = productUrl
        }
    }
}

extension EKSClientTypes {

    public enum AddonStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case createFailed
        case creating
        case degraded
        case deleteFailed
        case deleting
        case updateFailed
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [AddonStatus] {
            return [
                .active,
                .createFailed,
                .creating,
                .degraded,
                .deleteFailed,
                .deleting,
                .updateFailed,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .createFailed: return "CREATE_FAILED"
            case .creating: return "CREATING"
            case .degraded: return "DEGRADED"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleting: return "DELETING"
            case .updateFailed: return "UPDATE_FAILED"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EKSClientTypes {

    /// An Amazon EKS add-on. For more information, see [Amazon EKS add-ons](https://docs.aws.amazon.com/eks/latest/userguide/eks-add-ons.html) in the Amazon EKS User Guide.
    public struct Addon: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the add-on.
        public var addonArn: Swift.String?
        /// The name of the add-on.
        public var addonName: Swift.String?
        /// The version of the add-on.
        public var addonVersion: Swift.String?
        /// The name of your cluster.
        public var clusterName: Swift.String?
        /// The configuration values that you provided.
        public var configurationValues: Swift.String?
        /// The Unix epoch timestamp at object creation.
        public var createdAt: Foundation.Date?
        /// An object that represents the health of the add-on.
        public var health: EKSClientTypes.AddonHealth?
        /// Information about an Amazon EKS add-on from the Amazon Web Services Marketplace.
        public var marketplaceInformation: EKSClientTypes.MarketplaceInformation?
        /// The Unix epoch timestamp for the last modification to the object.
        public var modifiedAt: Foundation.Date?
        /// The owner of the add-on.
        public var owner: Swift.String?
        /// An array of Pod Identity Assocations owned by the Addon. Each EKS Pod Identity association maps a role to a service account in a namespace in the cluster. For more information, see [Attach an IAM Role to an Amazon EKS add-on using Pod Identity](https://docs.aws.amazon.com/eks/latest/userguide/add-ons-iam.html) in the EKS User Guide.
        public var podIdentityAssociations: [Swift.String]?
        /// The publisher of the add-on.
        public var publisher: Swift.String?
        /// The Amazon Resource Name (ARN) of the IAM role that's bound to the Kubernetes ServiceAccount object that the add-on uses.
        public var serviceAccountRoleArn: Swift.String?
        /// The status of the add-on.
        public var status: EKSClientTypes.AddonStatus?
        /// Metadata that assists with categorization and organization. Each tag consists of a key and an optional value. You define both. Tags don't propagate to any other cluster or Amazon Web Services resources.
        public var tags: [Swift.String: Swift.String]?

        public init(
            addonArn: Swift.String? = nil,
            addonName: Swift.String? = nil,
            addonVersion: Swift.String? = nil,
            clusterName: Swift.String? = nil,
            configurationValues: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            health: EKSClientTypes.AddonHealth? = nil,
            marketplaceInformation: EKSClientTypes.MarketplaceInformation? = nil,
            modifiedAt: Foundation.Date? = nil,
            owner: Swift.String? = nil,
            podIdentityAssociations: [Swift.String]? = nil,
            publisher: Swift.String? = nil,
            serviceAccountRoleArn: Swift.String? = nil,
            status: EKSClientTypes.AddonStatus? = nil,
            tags: [Swift.String: Swift.String]? = nil
        )
        {
            self.addonArn = addonArn
            self.addonName = addonName
            self.addonVersion = addonVersion
            self.clusterName = clusterName
            self.configurationValues = configurationValues
            self.createdAt = createdAt
            self.health = health
            self.marketplaceInformation = marketplaceInformation
            self.modifiedAt = modifiedAt
            self.owner = owner
            self.podIdentityAssociations = podIdentityAssociations
            self.publisher = publisher
            self.serviceAccountRoleArn = serviceAccountRoleArn
            self.status = status
            self.tags = tags
        }
    }
}

extension EKSClientTypes {

    /// Compatibility information.
    public struct Compatibility: Swift.Sendable {
        /// The supported Kubernetes version of the cluster.
        public var clusterVersion: Swift.String?
        /// The supported default version.
        public var defaultVersion: Swift.Bool
        /// The supported compute platform.
        public var platformVersions: [Swift.String]?

        public init(
            clusterVersion: Swift.String? = nil,
            defaultVersion: Swift.Bool = false,
            platformVersions: [Swift.String]? = nil
        )
        {
            self.clusterVersion = clusterVersion
            self.defaultVersion = defaultVersion
            self.platformVersions = platformVersions
        }
    }
}

extension EKSClientTypes {

    /// Information about an add-on version.
    public struct AddonVersionInfo: Swift.Sendable {
        /// The version of the add-on.
        public var addonVersion: Swift.String?
        /// The architectures that the version supports.
        public var architecture: [Swift.String]?
        /// An object representing the compatibilities of a version.
        public var compatibilities: [EKSClientTypes.Compatibility]?
        /// Whether the add-on requires configuration.
        public var requiresConfiguration: Swift.Bool
        /// Indicates if the Addon requires IAM Permissions to operate, such as networking permissions.
        public var requiresIamPermissions: Swift.Bool

        public init(
            addonVersion: Swift.String? = nil,
            architecture: [Swift.String]? = nil,
            compatibilities: [EKSClientTypes.Compatibility]? = nil,
            requiresConfiguration: Swift.Bool = false,
            requiresIamPermissions: Swift.Bool = false
        )
        {
            self.addonVersion = addonVersion
            self.architecture = architecture
            self.compatibilities = compatibilities
            self.requiresConfiguration = requiresConfiguration
            self.requiresIamPermissions = requiresIamPermissions
        }
    }
}

extension EKSClientTypes {

    /// Information about an add-on.
    public struct AddonInfo: Swift.Sendable {
        /// The name of the add-on.
        public var addonName: Swift.String?
        /// An object representing information about available add-on versions and compatible Kubernetes versions.
        public var addonVersions: [EKSClientTypes.AddonVersionInfo]?
        /// Information about the add-on from the Amazon Web Services Marketplace.
        public var marketplaceInformation: EKSClientTypes.MarketplaceInformation?
        /// The owner of the add-on.
        public var owner: Swift.String?
        /// The publisher of the add-on.
        public var publisher: Swift.String?
        /// The type of the add-on.
        public var type: Swift.String?

        public init(
            addonName: Swift.String? = nil,
            addonVersions: [EKSClientTypes.AddonVersionInfo]? = nil,
            marketplaceInformation: EKSClientTypes.MarketplaceInformation? = nil,
            owner: Swift.String? = nil,
            publisher: Swift.String? = nil,
            type: Swift.String? = nil
        )
        {
            self.addonName = addonName
            self.addonVersions = addonVersions
            self.marketplaceInformation = marketplaceInformation
            self.owner = owner
            self.publisher = publisher
            self.type = type
        }
    }
}

extension EKSClientTypes {

    /// A type of Pod Identity Association owned by an Amazon EKS Add-on. Each EKS Pod Identity Association maps a role to a service account in a namespace in the cluster. For more information, see [Attach an IAM Role to an Amazon EKS add-on using Pod Identity](https://docs.aws.amazon.com/eks/latest/userguide/add-ons-iam.html) in the EKS User Guide.
    public struct AddonPodIdentityAssociations: Swift.Sendable {
        /// The ARN of an IAM Role.
        /// This member is required.
        public var roleArn: Swift.String?
        /// The name of a Kubernetes Service Account.
        /// This member is required.
        public var serviceAccount: Swift.String?

        public init(
            roleArn: Swift.String? = nil,
            serviceAccount: Swift.String? = nil
        )
        {
            self.roleArn = roleArn
            self.serviceAccount = serviceAccount
        }
    }
}

extension EKSClientTypes {

    /// Information about how to configure IAM for an Addon.
    public struct AddonPodIdentityConfiguration: Swift.Sendable {
        /// A suggested IAM Policy for the addon.
        public var recommendedManagedPolicies: [Swift.String]?
        /// The Kubernetes Service Account name used by the addon.
        public var serviceAccount: Swift.String?

        public init(
            recommendedManagedPolicies: [Swift.String]? = nil,
            serviceAccount: Swift.String? = nil
        )
        {
            self.recommendedManagedPolicies = recommendedManagedPolicies
            self.serviceAccount = serviceAccount
        }
    }
}

extension EKSClientTypes {

    public enum AMITypes: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case al2023Arm64Standard
        case al2023X8664Neuron
        case al2023X8664Nvidia
        case al2023X8664Standard
        case al2Arm64
        case al2X8664
        case al2X8664Gpu
        case bottlerocketArm64
        case bottlerocketArm64Nvidia
        case bottlerocketX8664
        case bottlerocketX8664Nvidia
        case custom
        case windowsCore2019X8664
        case windowsCore2022X8664
        case windowsFull2019X8664
        case windowsFull2022X8664
        case sdkUnknown(Swift.String)

        public static var allCases: [AMITypes] {
            return [
                .al2023Arm64Standard,
                .al2023X8664Neuron,
                .al2023X8664Nvidia,
                .al2023X8664Standard,
                .al2Arm64,
                .al2X8664,
                .al2X8664Gpu,
                .bottlerocketArm64,
                .bottlerocketArm64Nvidia,
                .bottlerocketX8664,
                .bottlerocketX8664Nvidia,
                .custom,
                .windowsCore2019X8664,
                .windowsCore2022X8664,
                .windowsFull2019X8664,
                .windowsFull2022X8664
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .al2023Arm64Standard: return "AL2023_ARM_64_STANDARD"
            case .al2023X8664Neuron: return "AL2023_x86_64_NEURON"
            case .al2023X8664Nvidia: return "AL2023_x86_64_NVIDIA"
            case .al2023X8664Standard: return "AL2023_x86_64_STANDARD"
            case .al2Arm64: return "AL2_ARM_64"
            case .al2X8664: return "AL2_x86_64"
            case .al2X8664Gpu: return "AL2_x86_64_GPU"
            case .bottlerocketArm64: return "BOTTLEROCKET_ARM_64"
            case .bottlerocketArm64Nvidia: return "BOTTLEROCKET_ARM_64_NVIDIA"
            case .bottlerocketX8664: return "BOTTLEROCKET_x86_64"
            case .bottlerocketX8664Nvidia: return "BOTTLEROCKET_x86_64_NVIDIA"
            case .custom: return "CUSTOM"
            case .windowsCore2019X8664: return "WINDOWS_CORE_2019_x86_64"
            case .windowsCore2022X8664: return "WINDOWS_CORE_2022_x86_64"
            case .windowsFull2019X8664: return "WINDOWS_FULL_2019_x86_64"
            case .windowsFull2022X8664: return "WINDOWS_FULL_2022_x86_64"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// The specified parameter is invalid. Review the available parameters for the API request.
public struct InvalidParameterException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The specified parameter for the add-on name is invalid. Review the available parameters for the API request
        public internal(set) var addonName: Swift.String? = nil
        /// The Amazon EKS cluster associated with the exception.
        public internal(set) var clusterName: Swift.String? = nil
        /// The Fargate profile associated with the exception.
        public internal(set) var fargateProfileName: Swift.String? = nil
        /// The specified parameter is invalid. Review the available parameters for the API request.
        public internal(set) var message: Swift.String? = nil
        /// The Amazon EKS managed node group associated with the exception.
        public internal(set) var nodegroupName: Swift.String? = nil
        /// The Amazon EKS subscription ID with the exception.
        public internal(set) var subscriptionId: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidParameterException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        addonName: Swift.String? = nil,
        clusterName: Swift.String? = nil,
        fargateProfileName: Swift.String? = nil,
        message: Swift.String? = nil,
        nodegroupName: Swift.String? = nil,
        subscriptionId: Swift.String? = nil
    )
    {
        self.properties.addonName = addonName
        self.properties.clusterName = clusterName
        self.properties.fargateProfileName = fargateProfileName
        self.properties.message = message
        self.properties.nodegroupName = nodegroupName
        self.properties.subscriptionId = subscriptionId
    }
}

/// The request is invalid given the state of the cluster. Check the state of the cluster and the associated operations.
public struct InvalidRequestException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The request is invalid given the state of the add-on name. Check the state of the cluster and the associated operations.
        public internal(set) var addonName: Swift.String? = nil
        /// The Amazon EKS cluster associated with the exception.
        public internal(set) var clusterName: Swift.String? = nil
        /// The Amazon EKS add-on name associated with the exception.
        public internal(set) var message: Swift.String? = nil
        /// The Amazon EKS managed node group associated with the exception.
        public internal(set) var nodegroupName: Swift.String? = nil
        /// The Amazon EKS subscription ID with the exception.
        public internal(set) var subscriptionId: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidRequestException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        addonName: Swift.String? = nil,
        clusterName: Swift.String? = nil,
        message: Swift.String? = nil,
        nodegroupName: Swift.String? = nil,
        subscriptionId: Swift.String? = nil
    )
    {
        self.properties.addonName = addonName
        self.properties.clusterName = clusterName
        self.properties.message = message
        self.properties.nodegroupName = nodegroupName
        self.properties.subscriptionId = subscriptionId
    }
}

/// The specified resource could not be found. You can view your available clusters with ListClusters. You can view your available managed node groups with ListNodegroups. Amazon EKS clusters and node groups are Amazon Web Services Region specific.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The Amazon EKS add-on name associated with the exception.
        public internal(set) var addonName: Swift.String? = nil
        /// The Amazon EKS cluster associated with the exception.
        public internal(set) var clusterName: Swift.String? = nil
        /// The Fargate profile associated with the exception.
        public internal(set) var fargateProfileName: Swift.String? = nil
        /// The Amazon EKS message associated with the exception.
        public internal(set) var message: Swift.String? = nil
        /// The Amazon EKS managed node group associated with the exception.
        public internal(set) var nodegroupName: Swift.String? = nil
        /// The Amazon EKS subscription ID with the exception.
        public internal(set) var subscriptionId: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        addonName: Swift.String? = nil,
        clusterName: Swift.String? = nil,
        fargateProfileName: Swift.String? = nil,
        message: Swift.String? = nil,
        nodegroupName: Swift.String? = nil,
        subscriptionId: Swift.String? = nil
    )
    {
        self.properties.addonName = addonName
        self.properties.clusterName = clusterName
        self.properties.fargateProfileName = fargateProfileName
        self.properties.message = message
        self.properties.nodegroupName = nodegroupName
        self.properties.subscriptionId = subscriptionId
    }
}

/// These errors are usually caused by a server-side issue.
public struct ServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The Amazon EKS add-on name associated with the exception.
        public internal(set) var addonName: Swift.String? = nil
        /// The Amazon EKS cluster associated with the exception.
        public internal(set) var clusterName: Swift.String? = nil
        /// These errors are usually caused by a server-side issue.
        public internal(set) var message: Swift.String? = nil
        /// The Amazon EKS managed node group associated with the exception.
        public internal(set) var nodegroupName: Swift.String? = nil
        /// The Amazon EKS subscription ID with the exception.
        public internal(set) var subscriptionId: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServerException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        addonName: Swift.String? = nil,
        clusterName: Swift.String? = nil,
        message: Swift.String? = nil,
        nodegroupName: Swift.String? = nil,
        subscriptionId: Swift.String? = nil
    )
    {
        self.properties.addonName = addonName
        self.properties.clusterName = clusterName
        self.properties.message = message
        self.properties.nodegroupName = nodegroupName
        self.properties.subscriptionId = subscriptionId
    }
}

public struct AssociateAccessPolicyInput: Swift.Sendable {
    /// The scope for the AccessPolicy. You can scope access policies to an entire cluster or to specific Kubernetes namespaces.
    /// This member is required.
    public var accessScope: EKSClientTypes.AccessScope?
    /// The name of your cluster.
    /// This member is required.
    public var clusterName: Swift.String?
    /// The ARN of the AccessPolicy that you're associating. For a list of ARNs, use ListAccessPolicies.
    /// This member is required.
    public var policyArn: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM user or role for the AccessEntry that you're associating the access policy to.
    /// This member is required.
    public var principalArn: Swift.String?

    public init(
        accessScope: EKSClientTypes.AccessScope? = nil,
        clusterName: Swift.String? = nil,
        policyArn: Swift.String? = nil,
        principalArn: Swift.String? = nil
    )
    {
        self.accessScope = accessScope
        self.clusterName = clusterName
        self.policyArn = policyArn
        self.principalArn = principalArn
    }
}

extension EKSClientTypes {

    /// An access policy association.
    public struct AssociatedAccessPolicy: Swift.Sendable {
        /// The scope of the access policy.
        public var accessScope: EKSClientTypes.AccessScope?
        /// The date and time the AccessPolicy was associated with an AccessEntry.
        public var associatedAt: Foundation.Date?
        /// The Unix epoch timestamp for the last modification to the object.
        public var modifiedAt: Foundation.Date?
        /// The ARN of the AccessPolicy.
        public var policyArn: Swift.String?

        public init(
            accessScope: EKSClientTypes.AccessScope? = nil,
            associatedAt: Foundation.Date? = nil,
            modifiedAt: Foundation.Date? = nil,
            policyArn: Swift.String? = nil
        )
        {
            self.accessScope = accessScope
            self.associatedAt = associatedAt
            self.modifiedAt = modifiedAt
            self.policyArn = policyArn
        }
    }
}

public struct AssociateAccessPolicyOutput: Swift.Sendable {
    /// The AccessPolicy and scope associated to the AccessEntry.
    public var associatedAccessPolicy: EKSClientTypes.AssociatedAccessPolicy?
    /// The name of your cluster.
    public var clusterName: Swift.String?
    /// The ARN of the IAM principal for the AccessEntry.
    public var principalArn: Swift.String?

    public init(
        associatedAccessPolicy: EKSClientTypes.AssociatedAccessPolicy? = nil,
        clusterName: Swift.String? = nil,
        principalArn: Swift.String? = nil
    )
    {
        self.associatedAccessPolicy = associatedAccessPolicy
        self.clusterName = clusterName
        self.principalArn = principalArn
    }
}

/// These errors are usually caused by a client action. Actions can include using an action or resource on behalf of an [IAM principal](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html) that doesn't have permissions to use the action or resource or specifying an identifier that is not valid.
public struct ClientException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The Amazon EKS add-on name associated with the exception.
        public internal(set) var addonName: Swift.String? = nil
        /// The Amazon EKS cluster associated with the exception.
        public internal(set) var clusterName: Swift.String? = nil
        /// These errors are usually caused by a client action. Actions can include using an action or resource on behalf of an [IAM principal](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html) that doesn't have permissions to use the action or resource or specifying an identifier that is not valid.
        public internal(set) var message: Swift.String? = nil
        /// The Amazon EKS managed node group associated with the exception.
        public internal(set) var nodegroupName: Swift.String? = nil
        /// The Amazon EKS subscription ID with the exception.
        public internal(set) var subscriptionId: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClientException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        addonName: Swift.String? = nil,
        clusterName: Swift.String? = nil,
        message: Swift.String? = nil,
        nodegroupName: Swift.String? = nil,
        subscriptionId: Swift.String? = nil
    )
    {
        self.properties.addonName = addonName
        self.properties.clusterName = clusterName
        self.properties.message = message
        self.properties.nodegroupName = nodegroupName
        self.properties.subscriptionId = subscriptionId
    }
}

/// The specified resource is in use.
public struct ResourceInUseException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The specified add-on name is in use.
        public internal(set) var addonName: Swift.String? = nil
        /// The Amazon EKS cluster associated with the exception.
        public internal(set) var clusterName: Swift.String? = nil
        /// The Amazon EKS message associated with the exception.
        public internal(set) var message: Swift.String? = nil
        /// The Amazon EKS managed node group associated with the exception.
        public internal(set) var nodegroupName: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceInUseException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        addonName: Swift.String? = nil,
        clusterName: Swift.String? = nil,
        message: Swift.String? = nil,
        nodegroupName: Swift.String? = nil
    )
    {
        self.properties.addonName = addonName
        self.properties.clusterName = clusterName
        self.properties.message = message
        self.properties.nodegroupName = nodegroupName
    }
}

extension EKSClientTypes {

    /// Identifies the Key Management Service (KMS) key used to encrypt the secrets.
    public struct Provider: Swift.Sendable {
        /// Amazon Resource Name (ARN) or alias of the KMS key. The KMS key must be symmetric and created in the same Amazon Web Services Region as the cluster. If the KMS key was created in a different account, the [IAM principal](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html) must have access to the KMS key. For more information, see [Allowing users in other accounts to use a KMS key](https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-modifying-external-accounts.html) in the Key Management Service Developer Guide.
        public var keyArn: Swift.String?

        public init(
            keyArn: Swift.String? = nil
        )
        {
            self.keyArn = keyArn
        }
    }
}

extension EKSClientTypes {

    /// The encryption configuration for the cluster.
    public struct EncryptionConfig: Swift.Sendable {
        /// Key Management Service (KMS) key. Either the ARN or the alias can be used.
        public var provider: EKSClientTypes.Provider?
        /// Specifies the resources to be encrypted. The only supported value is secrets.
        public var resources: [Swift.String]?

        public init(
            provider: EKSClientTypes.Provider? = nil,
            resources: [Swift.String]? = nil
        )
        {
            self.provider = provider
            self.resources = resources
        }
    }
}

public struct AssociateEncryptionConfigInput: Swift.Sendable {
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    public var clientRequestToken: Swift.String?
    /// The name of your cluster.
    /// This member is required.
    public var clusterName: Swift.String?
    /// The configuration you are using for encryption.
    /// This member is required.
    public var encryptionConfig: [EKSClientTypes.EncryptionConfig]?

    public init(
        clientRequestToken: Swift.String? = nil,
        clusterName: Swift.String? = nil,
        encryptionConfig: [EKSClientTypes.EncryptionConfig]? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.clusterName = clusterName
        self.encryptionConfig = encryptionConfig
    }
}

extension EKSClientTypes {

    public enum ErrorCode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accessDenied
        case admissionRequestDenied
        case clusterUnreachable
        case configurationConflict
        case eniLimitReached
        case insufficientFreeAddresses
        case insufficientNumberOfReplicas
        case ipNotAvailable
        case k8sResourceNotFound
        case nodeCreationFailure
        case operationNotPermitted
        case podEvictionFailure
        case securityGroupNotFound
        case subnetNotFound
        case unknown
        case unsupportedAddonModification
        case vpcIdNotFound
        case sdkUnknown(Swift.String)

        public static var allCases: [ErrorCode] {
            return [
                .accessDenied,
                .admissionRequestDenied,
                .clusterUnreachable,
                .configurationConflict,
                .eniLimitReached,
                .insufficientFreeAddresses,
                .insufficientNumberOfReplicas,
                .ipNotAvailable,
                .k8sResourceNotFound,
                .nodeCreationFailure,
                .operationNotPermitted,
                .podEvictionFailure,
                .securityGroupNotFound,
                .subnetNotFound,
                .unknown,
                .unsupportedAddonModification,
                .vpcIdNotFound
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accessDenied: return "AccessDenied"
            case .admissionRequestDenied: return "AdmissionRequestDenied"
            case .clusterUnreachable: return "ClusterUnreachable"
            case .configurationConflict: return "ConfigurationConflict"
            case .eniLimitReached: return "EniLimitReached"
            case .insufficientFreeAddresses: return "InsufficientFreeAddresses"
            case .insufficientNumberOfReplicas: return "InsufficientNumberOfReplicas"
            case .ipNotAvailable: return "IpNotAvailable"
            case .k8sResourceNotFound: return "K8sResourceNotFound"
            case .nodeCreationFailure: return "NodeCreationFailure"
            case .operationNotPermitted: return "OperationNotPermitted"
            case .podEvictionFailure: return "PodEvictionFailure"
            case .securityGroupNotFound: return "SecurityGroupNotFound"
            case .subnetNotFound: return "SubnetNotFound"
            case .unknown: return "Unknown"
            case .unsupportedAddonModification: return "UnsupportedAddonModification"
            case .vpcIdNotFound: return "VpcIdNotFound"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EKSClientTypes {

    /// An object representing an error when an asynchronous operation fails.
    public struct ErrorDetail: Swift.Sendable {
        /// A brief description of the error.
        ///
        /// * SubnetNotFound: We couldn't find one of the subnets associated with the cluster.
        ///
        /// * SecurityGroupNotFound: We couldn't find one of the security groups associated with the cluster.
        ///
        /// * EniLimitReached: You have reached the elastic network interface limit for your account.
        ///
        /// * IpNotAvailable: A subnet associated with the cluster doesn't have any available IP addresses.
        ///
        /// * AccessDenied: You don't have permissions to perform the specified operation.
        ///
        /// * OperationNotPermitted: The service role associated with the cluster doesn't have the required access permissions for Amazon EKS.
        ///
        /// * VpcIdNotFound: We couldn't find the VPC associated with the cluster.
        public var errorCode: EKSClientTypes.ErrorCode?
        /// A more complete description of the error.
        public var errorMessage: Swift.String?
        /// An optional field that contains the resource IDs associated with the error.
        public var resourceIds: [Swift.String]?

        public init(
            errorCode: EKSClientTypes.ErrorCode? = nil,
            errorMessage: Swift.String? = nil,
            resourceIds: [Swift.String]? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.resourceIds = resourceIds
        }
    }
}

extension EKSClientTypes {

    public enum UpdateParamType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case addonVersion
        case authenticationMode
        case clusterLogging
        case configurationValues
        case desiredSize
        case encryptionConfig
        case endpointPrivateAccess
        case endpointPublicAccess
        case identityProviderConfig
        case labelsToAdd
        case labelsToRemove
        case launchTemplateName
        case launchTemplateVersion
        case maxSize
        case maxUnavailable
        case maxUnavailablePercentage
        case minSize
        case platformVersion
        case podIdentityAssociations
        case publicAccessCidrs
        case releaseVersion
        case resolveConflicts
        case securityGroups
        case serviceAccountRoleArn
        case subnets
        case taintsToAdd
        case taintsToRemove
        case upgradePolicy
        case version
        case zonalShiftConfig
        case sdkUnknown(Swift.String)

        public static var allCases: [UpdateParamType] {
            return [
                .addonVersion,
                .authenticationMode,
                .clusterLogging,
                .configurationValues,
                .desiredSize,
                .encryptionConfig,
                .endpointPrivateAccess,
                .endpointPublicAccess,
                .identityProviderConfig,
                .labelsToAdd,
                .labelsToRemove,
                .launchTemplateName,
                .launchTemplateVersion,
                .maxSize,
                .maxUnavailable,
                .maxUnavailablePercentage,
                .minSize,
                .platformVersion,
                .podIdentityAssociations,
                .publicAccessCidrs,
                .releaseVersion,
                .resolveConflicts,
                .securityGroups,
                .serviceAccountRoleArn,
                .subnets,
                .taintsToAdd,
                .taintsToRemove,
                .upgradePolicy,
                .version,
                .zonalShiftConfig
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .addonVersion: return "AddonVersion"
            case .authenticationMode: return "AuthenticationMode"
            case .clusterLogging: return "ClusterLogging"
            case .configurationValues: return "ConfigurationValues"
            case .desiredSize: return "DesiredSize"
            case .encryptionConfig: return "EncryptionConfig"
            case .endpointPrivateAccess: return "EndpointPrivateAccess"
            case .endpointPublicAccess: return "EndpointPublicAccess"
            case .identityProviderConfig: return "IdentityProviderConfig"
            case .labelsToAdd: return "LabelsToAdd"
            case .labelsToRemove: return "LabelsToRemove"
            case .launchTemplateName: return "LaunchTemplateName"
            case .launchTemplateVersion: return "LaunchTemplateVersion"
            case .maxSize: return "MaxSize"
            case .maxUnavailable: return "MaxUnavailable"
            case .maxUnavailablePercentage: return "MaxUnavailablePercentage"
            case .minSize: return "MinSize"
            case .platformVersion: return "PlatformVersion"
            case .podIdentityAssociations: return "PodIdentityAssociations"
            case .publicAccessCidrs: return "PublicAccessCidrs"
            case .releaseVersion: return "ReleaseVersion"
            case .resolveConflicts: return "ResolveConflicts"
            case .securityGroups: return "SecurityGroups"
            case .serviceAccountRoleArn: return "ServiceAccountRoleArn"
            case .subnets: return "Subnets"
            case .taintsToAdd: return "TaintsToAdd"
            case .taintsToRemove: return "TaintsToRemove"
            case .upgradePolicy: return "UpgradePolicy"
            case .version: return "Version"
            case .zonalShiftConfig: return "ZonalShiftConfig"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EKSClientTypes {

    /// An object representing the details of an update request.
    public struct UpdateParam: Swift.Sendable {
        /// The keys associated with an update request.
        public var type: EKSClientTypes.UpdateParamType?
        /// The value of the keys submitted as part of an update request.
        public var value: Swift.String?

        public init(
            type: EKSClientTypes.UpdateParamType? = nil,
            value: Swift.String? = nil
        )
        {
            self.type = type
            self.value = value
        }
    }
}

extension EKSClientTypes {

    public enum UpdateStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cancelled
        case failed
        case inProgress
        case successful
        case sdkUnknown(Swift.String)

        public static var allCases: [UpdateStatus] {
            return [
                .cancelled,
                .failed,
                .inProgress,
                .successful
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "Cancelled"
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .successful: return "Successful"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EKSClientTypes {

    public enum UpdateType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accessConfigUpdate
        case addonUpdate
        case associateEncryptionConfig
        case associateIdentityProviderConfig
        case configUpdate
        case disassociateIdentityProviderConfig
        case endpointAccessUpdate
        case loggingUpdate
        case upgradePolicyUpdate
        case versionUpdate
        case vpcConfigUpdate
        case zonalShiftConfigUpdate
        case sdkUnknown(Swift.String)

        public static var allCases: [UpdateType] {
            return [
                .accessConfigUpdate,
                .addonUpdate,
                .associateEncryptionConfig,
                .associateIdentityProviderConfig,
                .configUpdate,
                .disassociateIdentityProviderConfig,
                .endpointAccessUpdate,
                .loggingUpdate,
                .upgradePolicyUpdate,
                .versionUpdate,
                .vpcConfigUpdate,
                .zonalShiftConfigUpdate
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accessConfigUpdate: return "AccessConfigUpdate"
            case .addonUpdate: return "AddonUpdate"
            case .associateEncryptionConfig: return "AssociateEncryptionConfig"
            case .associateIdentityProviderConfig: return "AssociateIdentityProviderConfig"
            case .configUpdate: return "ConfigUpdate"
            case .disassociateIdentityProviderConfig: return "DisassociateIdentityProviderConfig"
            case .endpointAccessUpdate: return "EndpointAccessUpdate"
            case .loggingUpdate: return "LoggingUpdate"
            case .upgradePolicyUpdate: return "UpgradePolicyUpdate"
            case .versionUpdate: return "VersionUpdate"
            case .vpcConfigUpdate: return "VpcConfigUpdate"
            case .zonalShiftConfigUpdate: return "ZonalShiftConfigUpdate"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EKSClientTypes {

    /// An object representing an asynchronous update.
    public struct Update: Swift.Sendable {
        /// The Unix epoch timestamp at object creation.
        public var createdAt: Foundation.Date?
        /// Any errors associated with a Failed update.
        public var errors: [EKSClientTypes.ErrorDetail]?
        /// A UUID that is used to track the update.
        public var id: Swift.String?
        /// A key-value map that contains the parameters associated with the update.
        public var params: [EKSClientTypes.UpdateParam]?
        /// The current status of the update.
        public var status: EKSClientTypes.UpdateStatus?
        /// The type of the update.
        public var type: EKSClientTypes.UpdateType?

        public init(
            createdAt: Foundation.Date? = nil,
            errors: [EKSClientTypes.ErrorDetail]? = nil,
            id: Swift.String? = nil,
            params: [EKSClientTypes.UpdateParam]? = nil,
            status: EKSClientTypes.UpdateStatus? = nil,
            type: EKSClientTypes.UpdateType? = nil
        )
        {
            self.createdAt = createdAt
            self.errors = errors
            self.id = id
            self.params = params
            self.status = status
            self.type = type
        }
    }
}

public struct AssociateEncryptionConfigOutput: Swift.Sendable {
    /// An object representing an asynchronous update.
    public var update: EKSClientTypes.Update?

    public init(
        update: EKSClientTypes.Update? = nil
    )
    {
        self.update = update
    }
}

extension EKSClientTypes {

    /// An object representing an OpenID Connect (OIDC) configuration. Before associating an OIDC identity provider to your cluster, review the considerations in [Authenticating users for your cluster from an OIDC identity provider](https://docs.aws.amazon.com/eks/latest/userguide/authenticate-oidc-identity-provider.html) in the Amazon EKS User Guide.
    public struct OidcIdentityProviderConfigRequest: Swift.Sendable {
        /// This is also known as audience. The ID for the client application that makes authentication requests to the OIDC identity provider.
        /// This member is required.
        public var clientId: Swift.String?
        /// The JWT claim that the provider uses to return your groups.
        public var groupsClaim: Swift.String?
        /// The prefix that is prepended to group claims to prevent clashes with existing names (such as system: groups). For example, the value oidc: will create group names like oidc:engineering and oidc:infra.
        public var groupsPrefix: Swift.String?
        /// The name of the OIDC provider configuration.
        /// This member is required.
        public var identityProviderConfigName: Swift.String?
        /// The URL of the OIDC identity provider that allows the API server to discover public signing keys for verifying tokens. The URL must begin with https:// and should correspond to the iss claim in the provider's OIDC ID tokens. Based on the OIDC standard, path components are allowed but query parameters are not. Typically the URL consists of only a hostname, like https://server.example.org or https://example.com. This URL should point to the level below .well-known/openid-configuration and must be publicly accessible over the internet.
        /// This member is required.
        public var issuerUrl: Swift.String?
        /// The key value pairs that describe required claims in the identity token. If set, each claim is verified to be present in the token with a matching value. For the maximum number of claims that you can require, see [Amazon EKS service quotas](https://docs.aws.amazon.com/eks/latest/userguide/service-quotas.html) in the Amazon EKS User Guide.
        public var requiredClaims: [Swift.String: Swift.String]?
        /// The JSON Web Token (JWT) claim to use as the username. The default is sub, which is expected to be a unique identifier of the end user. You can choose other claims, such as email or name, depending on the OIDC identity provider. Claims other than email are prefixed with the issuer URL to prevent naming clashes with other plug-ins.
        public var usernameClaim: Swift.String?
        /// The prefix that is prepended to username claims to prevent clashes with existing names. If you do not provide this field, and username is a value other than email, the prefix defaults to issuerurl#. You can use the value - to disable all prefixing.
        public var usernamePrefix: Swift.String?

        public init(
            clientId: Swift.String? = nil,
            groupsClaim: Swift.String? = nil,
            groupsPrefix: Swift.String? = nil,
            identityProviderConfigName: Swift.String? = nil,
            issuerUrl: Swift.String? = nil,
            requiredClaims: [Swift.String: Swift.String]? = nil,
            usernameClaim: Swift.String? = nil,
            usernamePrefix: Swift.String? = nil
        )
        {
            self.clientId = clientId
            self.groupsClaim = groupsClaim
            self.groupsPrefix = groupsPrefix
            self.identityProviderConfigName = identityProviderConfigName
            self.issuerUrl = issuerUrl
            self.requiredClaims = requiredClaims
            self.usernameClaim = usernameClaim
            self.usernamePrefix = usernamePrefix
        }
    }
}

public struct AssociateIdentityProviderConfigInput: Swift.Sendable {
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    public var clientRequestToken: Swift.String?
    /// The name of your cluster.
    /// This member is required.
    public var clusterName: Swift.String?
    /// An object representing an OpenID Connect (OIDC) identity provider configuration.
    /// This member is required.
    public var oidc: EKSClientTypes.OidcIdentityProviderConfigRequest?
    /// Metadata that assists with categorization and organization. Each tag consists of a key and an optional value. You define both. Tags don't propagate to any other cluster or Amazon Web Services resources.
    public var tags: [Swift.String: Swift.String]?

    public init(
        clientRequestToken: Swift.String? = nil,
        clusterName: Swift.String? = nil,
        oidc: EKSClientTypes.OidcIdentityProviderConfigRequest? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.clusterName = clusterName
        self.oidc = oidc
        self.tags = tags
    }
}

public struct AssociateIdentityProviderConfigOutput: Swift.Sendable {
    /// The tags for the resource.
    public var tags: [Swift.String: Swift.String]?
    /// An object representing an asynchronous update.
    public var update: EKSClientTypes.Update?

    public init(
        tags: [Swift.String: Swift.String]? = nil,
        update: EKSClientTypes.Update? = nil
    )
    {
        self.tags = tags
        self.update = update
    }
}

extension EKSClientTypes {

    /// An Auto Scaling group that is associated with an Amazon EKS managed node group.
    public struct AutoScalingGroup: Swift.Sendable {
        /// The name of the Auto Scaling group associated with an Amazon EKS managed node group.
        public var name: Swift.String?

        public init(
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }
}

/// You have encountered a service limit on the specified resource.
public struct ResourceLimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The Amazon EKS cluster associated with the exception.
        public internal(set) var clusterName: Swift.String? = nil
        /// The Amazon EKS message associated with the exception.
        public internal(set) var message: Swift.String? = nil
        /// The Amazon EKS managed node group associated with the exception.
        public internal(set) var nodegroupName: Swift.String? = nil
        /// The Amazon EKS subscription ID with the exception.
        public internal(set) var subscriptionId: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceLimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        clusterName: Swift.String? = nil,
        message: Swift.String? = nil,
        nodegroupName: Swift.String? = nil,
        subscriptionId: Swift.String? = nil
    )
    {
        self.properties.clusterName = clusterName
        self.properties.message = message
        self.properties.nodegroupName = nodegroupName
        self.properties.subscriptionId = subscriptionId
    }
}

public struct CreateAccessEntryInput: Swift.Sendable {
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    public var clientRequestToken: Swift.String?
    /// The name of your cluster.
    /// This member is required.
    public var clusterName: Swift.String?
    /// The value for name that you've specified for kind: Group as a subject in a Kubernetes RoleBinding or ClusterRoleBinding object. Amazon EKS doesn't confirm that the value for name exists in any bindings on your cluster. You can specify one or more names. Kubernetes authorizes the principalArn of the access entry to access any cluster objects that you've specified in a Kubernetes Role or ClusterRole object that is also specified in a binding's roleRef. For more information about creating Kubernetes RoleBinding, ClusterRoleBinding, Role, or ClusterRole objects, see [Using RBAC Authorization in the Kubernetes documentation](https://kubernetes.io/docs/reference/access-authn-authz/rbac/). If you want Amazon EKS to authorize the principalArn (instead of, or in addition to Kubernetes authorizing the principalArn), you can associate one or more access policies to the access entry using AssociateAccessPolicy. If you associate any access policies, the principalARN has all permissions assigned in the associated access policies and all permissions in any Kubernetes Role or ClusterRole objects that the group names are bound to.
    public var kubernetesGroups: [Swift.String]?
    /// The ARN of the IAM principal for the AccessEntry. You can specify one ARN for each access entry. You can't specify the same ARN in more than one access entry. This value can't be changed after access entry creation. The valid principals differ depending on the type of the access entry in the type field. The only valid ARN is IAM roles for the types of access entries for nodes: . You can use every IAM principal type for STANDARD access entries. You can't use the STS session principal type with access entries because this is a temporary principal for each session and not a permanent identity that can be assigned permissions. [IAM best practices](https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#bp-users-federation-idp) recommend using IAM roles with temporary credentials, rather than IAM users with long-term credentials.
    /// This member is required.
    public var principalArn: Swift.String?
    /// Metadata that assists with categorization and organization. Each tag consists of a key and an optional value. You define both. Tags don't propagate to any other cluster or Amazon Web Services resources.
    public var tags: [Swift.String: Swift.String]?
    /// The type of the new access entry. Valid values are Standard, FARGATE_LINUX, EC2_LINUX, and EC2_WINDOWS. If the principalArn is for an IAM role that's used for self-managed Amazon EC2 nodes, specify EC2_LINUX or EC2_WINDOWS. Amazon EKS grants the necessary permissions to the node for you. If the principalArn is for any other purpose, specify STANDARD. If you don't specify a value, Amazon EKS sets the value to STANDARD. It's unnecessary to create access entries for IAM roles used with Fargate profiles or managed Amazon EC2 nodes, because Amazon EKS creates entries in the aws-authConfigMap for the roles. You can't change this value once you've created the access entry. If you set the value to EC2_LINUX or EC2_WINDOWS, you can't specify values for kubernetesGroups, or associate an AccessPolicy to the access entry.
    public var type: Swift.String?
    /// The username to authenticate to Kubernetes with. We recommend not specifying a username and letting Amazon EKS specify it for you. For more information about the value Amazon EKS specifies for you, or constraints before specifying your own username, see [Creating access entries](https://docs.aws.amazon.com/eks/latest/userguide/access-entries.html#creating-access-entries) in the Amazon EKS User Guide.
    public var username: Swift.String?

    public init(
        clientRequestToken: Swift.String? = nil,
        clusterName: Swift.String? = nil,
        kubernetesGroups: [Swift.String]? = nil,
        principalArn: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        type: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.clusterName = clusterName
        self.kubernetesGroups = kubernetesGroups
        self.principalArn = principalArn
        self.tags = tags
        self.type = type
        self.username = username
    }
}

public struct CreateAccessEntryOutput: Swift.Sendable {
    /// An access entry allows an IAM principal (user or role) to access your cluster. Access entries can replace the need to maintain the aws-authConfigMap for authentication. For more information about access entries, see [Access entries](https://docs.aws.amazon.com/eks/latest/userguide/access-entries.html) in the Amazon EKS User Guide.
    public var accessEntry: EKSClientTypes.AccessEntry?

    public init(
        accessEntry: EKSClientTypes.AccessEntry? = nil
    )
    {
        self.accessEntry = accessEntry
    }
}

extension EKSClientTypes {

    public enum ResolveConflicts: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `none`
        case overwrite
        case preserve
        case sdkUnknown(Swift.String)

        public static var allCases: [ResolveConflicts] {
            return [
                .none,
                .overwrite,
                .preserve
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .overwrite: return "OVERWRITE"
            case .preserve: return "PRESERVE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateAddonInput: Swift.Sendable {
    /// The name of the add-on. The name must match one of the names returned by DescribeAddonVersions.
    /// This member is required.
    public var addonName: Swift.String?
    /// The version of the add-on. The version must match one of the versions returned by [DescribeAddonVersions](https://docs.aws.amazon.com/eks/latest/APIReference/API_DescribeAddonVersions.html).
    public var addonVersion: Swift.String?
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    public var clientRequestToken: Swift.String?
    /// The name of your cluster.
    /// This member is required.
    public var clusterName: Swift.String?
    /// The set of configuration values for the add-on that's created. The values that you provide are validated against the schema returned by DescribeAddonConfiguration.
    public var configurationValues: Swift.String?
    /// An array of Pod Identity Assocations to be created. Each EKS Pod Identity association maps a Kubernetes service account to an IAM Role. For more information, see [Attach an IAM Role to an Amazon EKS add-on using Pod Identity](https://docs.aws.amazon.com/eks/latest/userguide/add-ons-iam.html) in the EKS User Guide.
    public var podIdentityAssociations: [EKSClientTypes.AddonPodIdentityAssociations]?
    /// How to resolve field value conflicts for an Amazon EKS add-on. Conflicts are handled based on the value you choose:
    ///
    /// * None – If the self-managed version of the add-on is installed on your cluster, Amazon EKS doesn't change the value. Creation of the add-on might fail.
    ///
    /// * Overwrite – If the self-managed version of the add-on is installed on your cluster and the Amazon EKS default value is different than the existing value, Amazon EKS changes the value to the Amazon EKS default value.
    ///
    /// * Preserve – This is similar to the NONE option. If the self-managed version of the add-on is installed on your cluster Amazon EKS doesn't change the add-on resource properties. Creation of the add-on might fail if conflicts are detected. This option works differently during the update operation. For more information, see [UpdateAddon](https://docs.aws.amazon.com/eks/latest/APIReference/API_UpdateAddon.html).
    ///
    ///
    /// If you don't currently have the self-managed version of the add-on installed on your cluster, the Amazon EKS add-on is installed. Amazon EKS sets all values to default values, regardless of the option that you specify.
    public var resolveConflicts: EKSClientTypes.ResolveConflicts?
    /// The Amazon Resource Name (ARN) of an existing IAM role to bind to the add-on's service account. The role must be assigned the IAM permissions required by the add-on. If you don't specify an existing IAM role, then the add-on uses the permissions assigned to the node IAM role. For more information, see [Amazon EKS node IAM role](https://docs.aws.amazon.com/eks/latest/userguide/create-node-role.html) in the Amazon EKS User Guide. To specify an existing IAM role, you must have an IAM OpenID Connect (OIDC) provider created for your cluster. For more information, see [Enabling IAM roles for service accounts on your cluster](https://docs.aws.amazon.com/eks/latest/userguide/enable-iam-roles-for-service-accounts.html) in the Amazon EKS User Guide.
    public var serviceAccountRoleArn: Swift.String?
    /// Metadata that assists with categorization and organization. Each tag consists of a key and an optional value. You define both. Tags don't propagate to any other cluster or Amazon Web Services resources.
    public var tags: [Swift.String: Swift.String]?

    public init(
        addonName: Swift.String? = nil,
        addonVersion: Swift.String? = nil,
        clientRequestToken: Swift.String? = nil,
        clusterName: Swift.String? = nil,
        configurationValues: Swift.String? = nil,
        podIdentityAssociations: [EKSClientTypes.AddonPodIdentityAssociations]? = nil,
        resolveConflicts: EKSClientTypes.ResolveConflicts? = nil,
        serviceAccountRoleArn: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.addonName = addonName
        self.addonVersion = addonVersion
        self.clientRequestToken = clientRequestToken
        self.clusterName = clusterName
        self.configurationValues = configurationValues
        self.podIdentityAssociations = podIdentityAssociations
        self.resolveConflicts = resolveConflicts
        self.serviceAccountRoleArn = serviceAccountRoleArn
        self.tags = tags
    }
}

public struct CreateAddonOutput: Swift.Sendable {
    /// An Amazon EKS add-on. For more information, see [Amazon EKS add-ons](https://docs.aws.amazon.com/eks/latest/userguide/eks-add-ons.html) in the Amazon EKS User Guide.
    public var addon: EKSClientTypes.Addon?

    public init(
        addon: EKSClientTypes.Addon? = nil
    )
    {
        self.addon = addon
    }
}

/// The service is unavailable. Back off and retry the operation.
public struct ServiceUnavailableException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The request has failed due to a temporary failure of the server.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceUnavailableException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// At least one of your specified cluster subnets is in an Availability Zone that does not support Amazon EKS. The exception output specifies the supported Availability Zones for your account, from which you can choose subnets for your cluster.
public struct UnsupportedAvailabilityZoneException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The Amazon EKS cluster associated with the exception.
        public internal(set) var clusterName: Swift.String? = nil
        /// At least one of your specified cluster subnets is in an Availability Zone that does not support Amazon EKS. The exception output specifies the supported Availability Zones for your account, from which you can choose subnets for your cluster.
        public internal(set) var message: Swift.String? = nil
        /// The Amazon EKS managed node group associated with the exception.
        public internal(set) var nodegroupName: Swift.String? = nil
        /// The supported Availability Zones for your account. Choose subnets in these Availability Zones for your cluster.
        public internal(set) var validZones: [Swift.String]? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnsupportedAvailabilityZoneException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        clusterName: Swift.String? = nil,
        message: Swift.String? = nil,
        nodegroupName: Swift.String? = nil,
        validZones: [Swift.String]? = nil
    )
    {
        self.properties.clusterName = clusterName
        self.properties.message = message
        self.properties.nodegroupName = nodegroupName
        self.properties.validZones = validZones
    }
}

extension EKSClientTypes {

    /// The access configuration information for the cluster.
    public struct CreateAccessConfigRequest: Swift.Sendable {
        /// The desired authentication mode for the cluster. If you create a cluster by using the EKS API, Amazon Web Services SDKs, or CloudFormation, the default is CONFIG_MAP. If you create the cluster by using the Amazon Web Services Management Console, the default value is API_AND_CONFIG_MAP.
        public var authenticationMode: EKSClientTypes.AuthenticationMode?
        /// Specifies whether or not the cluster creator IAM principal was set as a cluster admin access entry during cluster creation time. The default value is true.
        public var bootstrapClusterCreatorAdminPermissions: Swift.Bool?

        public init(
            authenticationMode: EKSClientTypes.AuthenticationMode? = nil,
            bootstrapClusterCreatorAdminPermissions: Swift.Bool? = nil
        )
        {
            self.authenticationMode = authenticationMode
            self.bootstrapClusterCreatorAdminPermissions = bootstrapClusterCreatorAdminPermissions
        }
    }
}

extension EKSClientTypes {

    public enum IpFamily: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ipv4
        case ipv6
        case sdkUnknown(Swift.String)

        public static var allCases: [IpFamily] {
            return [
                .ipv4,
                .ipv6
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ipv4: return "ipv4"
            case .ipv6: return "ipv6"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EKSClientTypes {

    /// The Kubernetes network configuration for the cluster.
    public struct KubernetesNetworkConfigRequest: Swift.Sendable {
        /// Specify which IP family is used to assign Kubernetes pod and service IP addresses. If you don't specify a value, ipv4 is used by default. You can only specify an IP family when you create a cluster and can't change this value once the cluster is created. If you specify ipv6, the VPC and subnets that you specify for cluster creation must have both IPv4 and IPv6 CIDR blocks assigned to them. You can't specify ipv6 for clusters in China Regions. You can only specify ipv6 for 1.21 and later clusters that use version 1.10.1 or later of the Amazon VPC CNI add-on. If you specify ipv6, then ensure that your VPC meets the requirements listed in the considerations listed in [Assigning IPv6 addresses to pods and services](https://docs.aws.amazon.com/eks/latest/userguide/cni-ipv6.html) in the Amazon EKS User Guide. Kubernetes assigns services IPv6 addresses from the unique local address range (fc00::/7). You can't specify a custom IPv6 CIDR block. Pod addresses are assigned from the subnet's IPv6 CIDR.
        public var ipFamily: EKSClientTypes.IpFamily?
        /// Don't specify a value if you select ipv6 for ipFamily. The CIDR block to assign Kubernetes service IP addresses from. If you don't specify a block, Kubernetes assigns addresses from either the 10.100.0.0/16 or 172.20.0.0/16 CIDR blocks. We recommend that you specify a block that does not overlap with resources in other networks that are peered or connected to your VPC. The block must meet the following requirements:
        ///
        /// * Within one of the following private IP address blocks: 10.0.0.0/8, 172.16.0.0/12, or 192.168.0.0/16.
        ///
        /// * Doesn't overlap with any CIDR block assigned to the VPC that you selected for VPC.
        ///
        /// * Between /24 and /12.
        ///
        ///
        /// You can only specify a custom CIDR block when you create a cluster. You can't change this value after the cluster is created.
        public var serviceIpv4Cidr: Swift.String?

        public init(
            ipFamily: EKSClientTypes.IpFamily? = nil,
            serviceIpv4Cidr: Swift.String? = nil
        )
        {
            self.ipFamily = ipFamily
            self.serviceIpv4Cidr = serviceIpv4Cidr
        }
    }
}

extension EKSClientTypes {

    public enum LogType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case api
        case audit
        case authenticator
        case controllerManager
        case scheduler
        case sdkUnknown(Swift.String)

        public static var allCases: [LogType] {
            return [
                .api,
                .audit,
                .authenticator,
                .controllerManager,
                .scheduler
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .api: return "api"
            case .audit: return "audit"
            case .authenticator: return "authenticator"
            case .controllerManager: return "controllerManager"
            case .scheduler: return "scheduler"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EKSClientTypes {

    /// An object representing the enabled or disabled Kubernetes control plane logs for your cluster.
    public struct LogSetup: Swift.Sendable {
        /// If a log type is enabled, that log type exports its control plane logs to CloudWatch Logs. If a log type isn't enabled, that log type doesn't export its control plane logs. Each individual log type can be enabled or disabled independently.
        public var enabled: Swift.Bool?
        /// The available cluster control plane log types.
        public var types: [EKSClientTypes.LogType]?

        public init(
            enabled: Swift.Bool? = nil,
            types: [EKSClientTypes.LogType]? = nil
        )
        {
            self.enabled = enabled
            self.types = types
        }
    }
}

extension EKSClientTypes {

    /// An object representing the logging configuration for resources in your cluster.
    public struct Logging: Swift.Sendable {
        /// The cluster control plane logging configuration for your cluster.
        public var clusterLogging: [EKSClientTypes.LogSetup]?

        public init(
            clusterLogging: [EKSClientTypes.LogSetup]? = nil
        )
        {
            self.clusterLogging = clusterLogging
        }
    }
}

extension EKSClientTypes {

    /// The placement configuration for all the control plane instances of your local Amazon EKS cluster on an Amazon Web Services Outpost. For more information, see [Capacity considerations](https://docs.aws.amazon.com/eks/latest/userguide/eks-outposts-capacity-considerations.html) in the Amazon EKS User Guide.
    public struct ControlPlanePlacementRequest: Swift.Sendable {
        /// The name of the placement group for the Kubernetes control plane instances. This setting can't be changed after cluster creation.
        public var groupName: Swift.String?

        public init(
            groupName: Swift.String? = nil
        )
        {
            self.groupName = groupName
        }
    }
}

extension EKSClientTypes {

    /// The configuration of your local Amazon EKS cluster on an Amazon Web Services Outpost. Before creating a cluster on an Outpost, review [Creating a local cluster on an Outpost](https://docs.aws.amazon.com/eks/latest/userguide/eks-outposts-local-cluster-create.html) in the Amazon EKS User Guide. This API isn't available for Amazon EKS clusters on the Amazon Web Services cloud.
    public struct OutpostConfigRequest: Swift.Sendable {
        /// The Amazon EC2 instance type that you want to use for your local Amazon EKS cluster on Outposts. Choose an instance type based on the number of nodes that your cluster will have. For more information, see [Capacity considerations](https://docs.aws.amazon.com/eks/latest/userguide/eks-outposts-capacity-considerations.html) in the Amazon EKS User Guide. The instance type that you specify is used for all Kubernetes control plane instances. The instance type can't be changed after cluster creation. The control plane is not automatically scaled by Amazon EKS.
        /// This member is required.
        public var controlPlaneInstanceType: Swift.String?
        /// An object representing the placement configuration for all the control plane instances of your local Amazon EKS cluster on an Amazon Web Services Outpost. For more information, see [Capacity considerations](https://docs.aws.amazon.com/eks/latest/userguide/eks-outposts-capacity-considerations.html) in the Amazon EKS User Guide.
        public var controlPlanePlacement: EKSClientTypes.ControlPlanePlacementRequest?
        /// The ARN of the Outpost that you want to use for your local Amazon EKS cluster on Outposts. Only a single Outpost ARN is supported.
        /// This member is required.
        public var outpostArns: [Swift.String]?

        public init(
            controlPlaneInstanceType: Swift.String? = nil,
            controlPlanePlacement: EKSClientTypes.ControlPlanePlacementRequest? = nil,
            outpostArns: [Swift.String]? = nil
        )
        {
            self.controlPlaneInstanceType = controlPlaneInstanceType
            self.controlPlanePlacement = controlPlanePlacement
            self.outpostArns = outpostArns
        }
    }
}

extension EKSClientTypes {

    /// An object representing the VPC configuration to use for an Amazon EKS cluster.
    public struct VpcConfigRequest: Swift.Sendable {
        /// Set this value to true to enable private access for your cluster's Kubernetes API server endpoint. If you enable private access, Kubernetes API requests from within your cluster's VPC use the private VPC endpoint. The default value for this parameter is false, which disables private access for your Kubernetes API server. If you disable private access and you have nodes or Fargate pods in the cluster, then ensure that publicAccessCidrs includes the necessary CIDR blocks for communication with the nodes or Fargate pods. For more information, see [Amazon EKS cluster endpoint access control](https://docs.aws.amazon.com/eks/latest/userguide/cluster-endpoint.html) in the Amazon EKS User Guide .
        public var endpointPrivateAccess: Swift.Bool?
        /// Set this value to false to disable public access to your cluster's Kubernetes API server endpoint. If you disable public access, your cluster's Kubernetes API server can only receive requests from within the cluster VPC. The default value for this parameter is true, which enables public access for your Kubernetes API server. For more information, see [Amazon EKS cluster endpoint access control](https://docs.aws.amazon.com/eks/latest/userguide/cluster-endpoint.html) in the Amazon EKS User Guide .
        public var endpointPublicAccess: Swift.Bool?
        /// The CIDR blocks that are allowed access to your cluster's public Kubernetes API server endpoint. Communication to the endpoint from addresses outside of the CIDR blocks that you specify is denied. The default value is 0.0.0.0/0. If you've disabled private endpoint access, make sure that you specify the necessary CIDR blocks for every node and Fargate Pod in the cluster. For more information, see [Amazon EKS cluster endpoint access control](https://docs.aws.amazon.com/eks/latest/userguide/cluster-endpoint.html) in the Amazon EKS User Guide .
        public var publicAccessCidrs: [Swift.String]?
        /// Specify one or more security groups for the cross-account elastic network interfaces that Amazon EKS creates to use that allow communication between your nodes and the Kubernetes control plane. If you don't specify any security groups, then familiarize yourself with the difference between Amazon EKS defaults for clusters deployed with Kubernetes. For more information, see [Amazon EKS security group considerations](https://docs.aws.amazon.com/eks/latest/userguide/sec-group-reqs.html) in the Amazon EKS User Guide .
        public var securityGroupIds: [Swift.String]?
        /// Specify subnets for your Amazon EKS nodes. Amazon EKS creates cross-account elastic network interfaces in these subnets to allow communication between your nodes and the Kubernetes control plane.
        public var subnetIds: [Swift.String]?

        public init(
            endpointPrivateAccess: Swift.Bool? = nil,
            endpointPublicAccess: Swift.Bool? = nil,
            publicAccessCidrs: [Swift.String]? = nil,
            securityGroupIds: [Swift.String]? = nil,
            subnetIds: [Swift.String]? = nil
        )
        {
            self.endpointPrivateAccess = endpointPrivateAccess
            self.endpointPublicAccess = endpointPublicAccess
            self.publicAccessCidrs = publicAccessCidrs
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
        }
    }
}

extension EKSClientTypes {

    public enum SupportType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case extended
        case standard
        case sdkUnknown(Swift.String)

        public static var allCases: [SupportType] {
            return [
                .extended,
                .standard
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .extended: return "EXTENDED"
            case .standard: return "STANDARD"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EKSClientTypes {

    /// The support policy to use for the cluster. Extended support allows you to remain on specific Kubernetes versions for longer. Clusters in extended support have higher costs. The default value is EXTENDED. Use STANDARD to disable extended support. [Learn more about EKS Extended Support in the EKS User Guide.](https://docs.aws.amazon.com/eks/latest/userguide/extended-support-control.html)
    public struct UpgradePolicyRequest: Swift.Sendable {
        /// If the cluster is set to EXTENDED, it will enter extended support at the end of standard support. If the cluster is set to STANDARD, it will be automatically upgraded at the end of standard support. [Learn more about EKS Extended Support in the EKS User Guide.](https://docs.aws.amazon.com/eks/latest/userguide/extended-support-control.html)
        public var supportType: EKSClientTypes.SupportType?

        public init(
            supportType: EKSClientTypes.SupportType? = nil
        )
        {
            self.supportType = supportType
        }
    }
}

extension EKSClientTypes {

    /// The configuration for zonal shift for the cluster.
    public struct ZonalShiftConfigRequest: Swift.Sendable {
        /// If zonal shift is enabled, Amazon Web Services configures zonal autoshift for the cluster.
        public var enabled: Swift.Bool?

        public init(
            enabled: Swift.Bool? = nil
        )
        {
            self.enabled = enabled
        }
    }
}

public struct CreateClusterInput: Swift.Sendable {
    /// The access configuration for the cluster.
    public var accessConfig: EKSClientTypes.CreateAccessConfigRequest?
    /// If you set this value to False when creating a cluster, the default networking add-ons will not be installed. The default networking addons include vpc-cni, coredns, and kube-proxy. Use this option when you plan to install third-party alternative add-ons or self-manage the default networking add-ons.
    public var bootstrapSelfManagedAddons: Swift.Bool?
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    public var clientRequestToken: Swift.String?
    /// The encryption configuration for the cluster.
    public var encryptionConfig: [EKSClientTypes.EncryptionConfig]?
    /// The Kubernetes network configuration for the cluster.
    public var kubernetesNetworkConfig: EKSClientTypes.KubernetesNetworkConfigRequest?
    /// Enable or disable exporting the Kubernetes control plane logs for your cluster to CloudWatch Logs. By default, cluster control plane logs aren't exported to CloudWatch Logs. For more information, see [Amazon EKS Cluster control plane logs](https://docs.aws.amazon.com/eks/latest/userguide/control-plane-logs.html) in the Amazon EKS User Guide . CloudWatch Logs ingestion, archive storage, and data scanning rates apply to exported control plane logs. For more information, see [CloudWatch Pricing](http://aws.amazon.com/cloudwatch/pricing/).
    public var logging: EKSClientTypes.Logging?
    /// The unique name to give to your cluster. The name can contain only alphanumeric characters (case-sensitive), hyphens, and underscores. It must start with an alphanumeric character and can't be longer than 100 characters. The name must be unique within the Amazon Web Services Region and Amazon Web Services account that you're creating the cluster in.
    /// This member is required.
    public var name: Swift.String?
    /// An object representing the configuration of your local Amazon EKS cluster on an Amazon Web Services Outpost. Before creating a local cluster on an Outpost, review [Local clusters for Amazon EKS on Amazon Web Services Outposts](https://docs.aws.amazon.com/eks/latest/userguide/eks-outposts-local-cluster-overview.html) in the Amazon EKS User Guide. This object isn't available for creating Amazon EKS clusters on the Amazon Web Services cloud.
    public var outpostConfig: EKSClientTypes.OutpostConfigRequest?
    /// The VPC configuration that's used by the cluster control plane. Amazon EKS VPC resources have specific requirements to work properly with Kubernetes. For more information, see [Cluster VPC Considerations](https://docs.aws.amazon.com/eks/latest/userguide/network_reqs.html) and [Cluster Security Group Considerations](https://docs.aws.amazon.com/eks/latest/userguide/sec-group-reqs.html) in the Amazon EKS User Guide. You must specify at least two subnets. You can specify up to five security groups. However, we recommend that you use a dedicated security group for your cluster control plane.
    /// This member is required.
    public var resourcesVpcConfig: EKSClientTypes.VpcConfigRequest?
    /// The Amazon Resource Name (ARN) of the IAM role that provides permissions for the Kubernetes control plane to make calls to Amazon Web Services API operations on your behalf. For more information, see [Amazon EKS Service IAM Role](https://docs.aws.amazon.com/eks/latest/userguide/service_IAM_role.html) in the Amazon EKS User Guide .
    /// This member is required.
    public var roleArn: Swift.String?
    /// Metadata that assists with categorization and organization. Each tag consists of a key and an optional value. You define both. Tags don't propagate to any other cluster or Amazon Web Services resources.
    public var tags: [Swift.String: Swift.String]?
    /// New clusters, by default, have extended support enabled. You can disable extended support when creating a cluster by setting this value to STANDARD.
    public var upgradePolicy: EKSClientTypes.UpgradePolicyRequest?
    /// The desired Kubernetes version for your cluster. If you don't specify a value here, the default version available in Amazon EKS is used. The default version might not be the latest version available.
    public var version: Swift.String?
    /// Enable or disable ARC zonal shift for the cluster. If zonal shift is enabled, Amazon Web Services configures zonal autoshift for the cluster. Zonal shift is a feature of Amazon Application Recovery Controller (ARC). ARC zonal shift is designed to be a temporary measure that allows you to move traffic for a resource away from an impaired AZ until the zonal shift expires or you cancel it. You can extend the zonal shift if necessary. You can start a zonal shift for an EKS cluster, or you can allow Amazon Web Services to do it for you by enabling zonal autoshift. This shift updates the flow of east-to-west network traffic in your cluster to only consider network endpoints for Pods running on worker nodes in healthy AZs. Additionally, any ALB or NLB handling ingress traffic for applications in your EKS cluster will automatically route traffic to targets in the healthy AZs. For more information about zonal shift in EKS, see [Learn about Amazon Application Recovery Controller (ARC) Zonal Shift in Amazon EKS](https://docs.aws.amazon.com/eks/latest/userguide/zone-shift.html) in the Amazon EKS User Guide .
    public var zonalShiftConfig: EKSClientTypes.ZonalShiftConfigRequest?

    public init(
        accessConfig: EKSClientTypes.CreateAccessConfigRequest? = nil,
        bootstrapSelfManagedAddons: Swift.Bool? = nil,
        clientRequestToken: Swift.String? = nil,
        encryptionConfig: [EKSClientTypes.EncryptionConfig]? = nil,
        kubernetesNetworkConfig: EKSClientTypes.KubernetesNetworkConfigRequest? = nil,
        logging: EKSClientTypes.Logging? = nil,
        name: Swift.String? = nil,
        outpostConfig: EKSClientTypes.OutpostConfigRequest? = nil,
        resourcesVpcConfig: EKSClientTypes.VpcConfigRequest? = nil,
        roleArn: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        upgradePolicy: EKSClientTypes.UpgradePolicyRequest? = nil,
        version: Swift.String? = nil,
        zonalShiftConfig: EKSClientTypes.ZonalShiftConfigRequest? = nil
    )
    {
        self.accessConfig = accessConfig
        self.bootstrapSelfManagedAddons = bootstrapSelfManagedAddons
        self.clientRequestToken = clientRequestToken
        self.encryptionConfig = encryptionConfig
        self.kubernetesNetworkConfig = kubernetesNetworkConfig
        self.logging = logging
        self.name = name
        self.outpostConfig = outpostConfig
        self.resourcesVpcConfig = resourcesVpcConfig
        self.roleArn = roleArn
        self.tags = tags
        self.upgradePolicy = upgradePolicy
        self.version = version
        self.zonalShiftConfig = zonalShiftConfig
    }
}

extension EKSClientTypes {

    /// An object representing the certificate-authority-data for your cluster.
    public struct Certificate: Swift.Sendable {
        /// The Base64-encoded certificate data required to communicate with your cluster. Add this to the certificate-authority-data section of the kubeconfig file for your cluster.
        public var data: Swift.String?

        public init(
            data: Swift.String? = nil
        )
        {
            self.data = data
        }
    }
}

extension EKSClientTypes {

    /// The full description of your connected cluster.
    public struct ConnectorConfigResponse: Swift.Sendable {
        /// A unique code associated with the cluster for registration purposes.
        public var activationCode: Swift.String?
        /// The expiration time of the connected cluster. The cluster's YAML file must be applied through the native provider.
        public var activationExpiry: Foundation.Date?
        /// A unique ID associated with the cluster for registration purposes.
        public var activationId: Swift.String?
        /// The cluster's cloud service provider.
        public var provider: Swift.String?
        /// The Amazon Resource Name (ARN) of the role to communicate with services from the connected Kubernetes cluster.
        public var roleArn: Swift.String?

        public init(
            activationCode: Swift.String? = nil,
            activationExpiry: Foundation.Date? = nil,
            activationId: Swift.String? = nil,
            provider: Swift.String? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.activationCode = activationCode
            self.activationExpiry = activationExpiry
            self.activationId = activationId
            self.provider = provider
            self.roleArn = roleArn
        }
    }
}

extension EKSClientTypes {

    public enum ClusterIssueCode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accessDenied
        case clusterUnreachable
        case configurationConflict
        case ec2SecurityGroupNotFound
        case ec2ServiceNotSubscribed
        case ec2SubnetNotFound
        case iamRoleNotFound
        case insufficientFreeAddresses
        case internalFailure
        case kmsGrantRevoked
        case kmsKeyDisabled
        case kmsKeyMarkedForDeletion
        case kmsKeyNotFound
        case other
        case resourceLimitExceeded
        case resourceNotFound
        case stsRegionalEndpointDisabled
        case unsupportedVersion
        case vpcNotFound
        case sdkUnknown(Swift.String)

        public static var allCases: [ClusterIssueCode] {
            return [
                .accessDenied,
                .clusterUnreachable,
                .configurationConflict,
                .ec2SecurityGroupNotFound,
                .ec2ServiceNotSubscribed,
                .ec2SubnetNotFound,
                .iamRoleNotFound,
                .insufficientFreeAddresses,
                .internalFailure,
                .kmsGrantRevoked,
                .kmsKeyDisabled,
                .kmsKeyMarkedForDeletion,
                .kmsKeyNotFound,
                .other,
                .resourceLimitExceeded,
                .resourceNotFound,
                .stsRegionalEndpointDisabled,
                .unsupportedVersion,
                .vpcNotFound
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accessDenied: return "AccessDenied"
            case .clusterUnreachable: return "ClusterUnreachable"
            case .configurationConflict: return "ConfigurationConflict"
            case .ec2SecurityGroupNotFound: return "Ec2SecurityGroupNotFound"
            case .ec2ServiceNotSubscribed: return "Ec2ServiceNotSubscribed"
            case .ec2SubnetNotFound: return "Ec2SubnetNotFound"
            case .iamRoleNotFound: return "IamRoleNotFound"
            case .insufficientFreeAddresses: return "InsufficientFreeAddresses"
            case .internalFailure: return "InternalFailure"
            case .kmsGrantRevoked: return "KmsGrantRevoked"
            case .kmsKeyDisabled: return "KmsKeyDisabled"
            case .kmsKeyMarkedForDeletion: return "KmsKeyMarkedForDeletion"
            case .kmsKeyNotFound: return "KmsKeyNotFound"
            case .other: return "Other"
            case .resourceLimitExceeded: return "ResourceLimitExceeded"
            case .resourceNotFound: return "ResourceNotFound"
            case .stsRegionalEndpointDisabled: return "StsRegionalEndpointDisabled"
            case .unsupportedVersion: return "UnsupportedVersion"
            case .vpcNotFound: return "VpcNotFound"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EKSClientTypes {

    /// An issue with your Amazon EKS cluster.
    public struct ClusterIssue: Swift.Sendable {
        /// The error code of the issue.
        public var code: EKSClientTypes.ClusterIssueCode?
        /// A description of the issue.
        public var message: Swift.String?
        /// The resource IDs that the issue relates to.
        public var resourceIds: [Swift.String]?

        public init(
            code: EKSClientTypes.ClusterIssueCode? = nil,
            message: Swift.String? = nil,
            resourceIds: [Swift.String]? = nil
        )
        {
            self.code = code
            self.message = message
            self.resourceIds = resourceIds
        }
    }
}

extension EKSClientTypes {

    /// An object representing the health of your Amazon EKS cluster.
    public struct ClusterHealth: Swift.Sendable {
        /// An object representing the health issues of your Amazon EKS cluster.
        public var issues: [EKSClientTypes.ClusterIssue]?

        public init(
            issues: [EKSClientTypes.ClusterIssue]? = nil
        )
        {
            self.issues = issues
        }
    }
}

extension EKSClientTypes {

    /// An object representing the [OpenID Connect](https://openid.net/connect/) (OIDC) identity provider information for the cluster.
    public struct OIDC: Swift.Sendable {
        /// The issuer URL for the OIDC identity provider.
        public var issuer: Swift.String?

        public init(
            issuer: Swift.String? = nil
        )
        {
            self.issuer = issuer
        }
    }
}

extension EKSClientTypes {

    /// An object representing an identity provider.
    public struct Identity: Swift.Sendable {
        /// An object representing the [OpenID Connect](https://openid.net/connect/) identity provider information.
        public var oidc: EKSClientTypes.OIDC?

        public init(
            oidc: EKSClientTypes.OIDC? = nil
        )
        {
            self.oidc = oidc
        }
    }
}

extension EKSClientTypes {

    /// The Kubernetes network configuration for the cluster. The response contains a value for serviceIpv6Cidr or serviceIpv4Cidr, but not both.
    public struct KubernetesNetworkConfigResponse: Swift.Sendable {
        /// The IP family used to assign Kubernetes Pod and Service objects IP addresses. The IP family is always ipv4, unless you have a 1.21 or later cluster running version 1.10.1 or later of the Amazon VPC CNI plugin for Kubernetes and specified ipv6 when you created the cluster.
        public var ipFamily: EKSClientTypes.IpFamily?
        /// The CIDR block that Kubernetes Pod and Service object IP addresses are assigned from. Kubernetes assigns addresses from an IPv4 CIDR block assigned to a subnet that the node is in. If you didn't specify a CIDR block when you created the cluster, then Kubernetes assigns addresses from either the 10.100.0.0/16 or 172.20.0.0/16 CIDR blocks. If this was specified, then it was specified when the cluster was created and it can't be changed.
        public var serviceIpv4Cidr: Swift.String?
        /// The CIDR block that Kubernetes pod and service IP addresses are assigned from if you created a 1.21 or later cluster with version 1.10.1 or later of the Amazon VPC CNI add-on and specified ipv6 for ipFamily when you created the cluster. Kubernetes assigns service addresses from the unique local address range (fc00::/7) because you can't specify a custom IPv6 CIDR block when you create the cluster.
        public var serviceIpv6Cidr: Swift.String?

        public init(
            ipFamily: EKSClientTypes.IpFamily? = nil,
            serviceIpv4Cidr: Swift.String? = nil,
            serviceIpv6Cidr: Swift.String? = nil
        )
        {
            self.ipFamily = ipFamily
            self.serviceIpv4Cidr = serviceIpv4Cidr
            self.serviceIpv6Cidr = serviceIpv6Cidr
        }
    }
}

extension EKSClientTypes {

    /// The placement configuration for all the control plane instances of your local Amazon EKS cluster on an Amazon Web Services Outpost. For more information, see [Capacity considerations](https://docs.aws.amazon.com/eks/latest/userguide/eks-outposts-capacity-considerations.html) in the Amazon EKS User Guide.
    public struct ControlPlanePlacementResponse: Swift.Sendable {
        /// The name of the placement group for the Kubernetes control plane instances.
        public var groupName: Swift.String?

        public init(
            groupName: Swift.String? = nil
        )
        {
            self.groupName = groupName
        }
    }
}

extension EKSClientTypes {

    /// An object representing the configuration of your local Amazon EKS cluster on an Amazon Web Services Outpost. This API isn't available for Amazon EKS clusters on the Amazon Web Services cloud.
    public struct OutpostConfigResponse: Swift.Sendable {
        /// The Amazon EC2 instance type used for the control plane. The instance type is the same for all control plane instances.
        /// This member is required.
        public var controlPlaneInstanceType: Swift.String?
        /// An object representing the placement configuration for all the control plane instances of your local Amazon EKS cluster on an Amazon Web Services Outpost. For more information, see [Capacity considerations](https://docs.aws.amazon.com/eks/latest/userguide/eks-outposts-capacity-considerations.html) in the Amazon EKS User Guide.
        public var controlPlanePlacement: EKSClientTypes.ControlPlanePlacementResponse?
        /// The ARN of the Outpost that you specified for use with your local Amazon EKS cluster on Outposts.
        /// This member is required.
        public var outpostArns: [Swift.String]?

        public init(
            controlPlaneInstanceType: Swift.String? = nil,
            controlPlanePlacement: EKSClientTypes.ControlPlanePlacementResponse? = nil,
            outpostArns: [Swift.String]? = nil
        )
        {
            self.controlPlaneInstanceType = controlPlaneInstanceType
            self.controlPlanePlacement = controlPlanePlacement
            self.outpostArns = outpostArns
        }
    }
}

extension EKSClientTypes {

    /// An object representing an Amazon EKS cluster VPC configuration response.
    public struct VpcConfigResponse: Swift.Sendable {
        /// The cluster security group that was created by Amazon EKS for the cluster. Managed node groups use this security group for control-plane-to-data-plane communication.
        public var clusterSecurityGroupId: Swift.String?
        /// This parameter indicates whether the Amazon EKS private API server endpoint is enabled. If the Amazon EKS private API server endpoint is enabled, Kubernetes API requests that originate from within your cluster's VPC use the private VPC endpoint instead of traversing the internet. If this value is disabled and you have nodes or Fargate pods in the cluster, then ensure that publicAccessCidrs includes the necessary CIDR blocks for communication with the nodes or Fargate pods. For more information, see [Amazon EKS cluster endpoint access control](https://docs.aws.amazon.com/eks/latest/userguide/cluster-endpoint.html) in the Amazon EKS User Guide .
        public var endpointPrivateAccess: Swift.Bool
        /// Whether the public API server endpoint is enabled.
        public var endpointPublicAccess: Swift.Bool
        /// The CIDR blocks that are allowed access to your cluster's public Kubernetes API server endpoint.
        public var publicAccessCidrs: [Swift.String]?
        /// The security groups associated with the cross-account elastic network interfaces that are used to allow communication between your nodes and the Kubernetes control plane.
        public var securityGroupIds: [Swift.String]?
        /// The subnets associated with your cluster.
        public var subnetIds: [Swift.String]?
        /// The VPC associated with your cluster.
        public var vpcId: Swift.String?

        public init(
            clusterSecurityGroupId: Swift.String? = nil,
            endpointPrivateAccess: Swift.Bool = false,
            endpointPublicAccess: Swift.Bool = false,
            publicAccessCidrs: [Swift.String]? = nil,
            securityGroupIds: [Swift.String]? = nil,
            subnetIds: [Swift.String]? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.clusterSecurityGroupId = clusterSecurityGroupId
            self.endpointPrivateAccess = endpointPrivateAccess
            self.endpointPublicAccess = endpointPublicAccess
            self.publicAccessCidrs = publicAccessCidrs
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
            self.vpcId = vpcId
        }
    }
}

extension EKSClientTypes {

    public enum ClusterStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case creating
        case deleting
        case failed
        case pending
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [ClusterStatus] {
            return [
                .active,
                .creating,
                .deleting,
                .failed,
                .pending,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case .pending: return "PENDING"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EKSClientTypes {

    /// This value indicates if extended support is enabled or disabled for the cluster. [Learn more about EKS Extended Support in the EKS User Guide.](https://docs.aws.amazon.com/eks/latest/userguide/extended-support-control.html)
    public struct UpgradePolicyResponse: Swift.Sendable {
        /// If the cluster is set to EXTENDED, it will enter extended support at the end of standard support. If the cluster is set to STANDARD, it will be automatically upgraded at the end of standard support. [Learn more about EKS Extended Support in the EKS User Guide.](https://docs.aws.amazon.com/eks/latest/userguide/extended-support-control.html)
        public var supportType: EKSClientTypes.SupportType?

        public init(
            supportType: EKSClientTypes.SupportType? = nil
        )
        {
            self.supportType = supportType
        }
    }
}

extension EKSClientTypes {

    /// The status of zonal shift configuration for the cluster
    public struct ZonalShiftConfigResponse: Swift.Sendable {
        /// Whether the zonal shift is enabled.
        public var enabled: Swift.Bool?

        public init(
            enabled: Swift.Bool? = nil
        )
        {
            self.enabled = enabled
        }
    }
}

extension EKSClientTypes {

    /// An object representing an Amazon EKS cluster.
    public struct Cluster: Swift.Sendable {
        /// The access configuration for the cluster.
        public var accessConfig: EKSClientTypes.AccessConfigResponse?
        /// The Amazon Resource Name (ARN) of the cluster.
        public var arn: Swift.String?
        /// The certificate-authority-data for your cluster.
        public var certificateAuthority: EKSClientTypes.Certificate?
        /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public var clientRequestToken: Swift.String?
        /// The configuration used to connect to a cluster for registration.
        public var connectorConfig: EKSClientTypes.ConnectorConfigResponse?
        /// The Unix epoch timestamp at object creation.
        public var createdAt: Foundation.Date?
        /// The encryption configuration for the cluster.
        public var encryptionConfig: [EKSClientTypes.EncryptionConfig]?
        /// The endpoint for your Kubernetes API server.
        public var endpoint: Swift.String?
        /// An object representing the health of your Amazon EKS cluster.
        public var health: EKSClientTypes.ClusterHealth?
        /// The ID of your local Amazon EKS cluster on an Amazon Web Services Outpost. This property isn't available for an Amazon EKS cluster on the Amazon Web Services cloud.
        public var id: Swift.String?
        /// The identity provider information for the cluster.
        public var identity: EKSClientTypes.Identity?
        /// The Kubernetes network configuration for the cluster.
        public var kubernetesNetworkConfig: EKSClientTypes.KubernetesNetworkConfigResponse?
        /// The logging configuration for your cluster.
        public var logging: EKSClientTypes.Logging?
        /// The name of your cluster.
        public var name: Swift.String?
        /// An object representing the configuration of your local Amazon EKS cluster on an Amazon Web Services Outpost. This object isn't available for clusters on the Amazon Web Services cloud.
        public var outpostConfig: EKSClientTypes.OutpostConfigResponse?
        /// The platform version of your Amazon EKS cluster. For more information about clusters deployed on the Amazon Web Services Cloud, see [Platform versions](https://docs.aws.amazon.com/eks/latest/userguide/platform-versions.html) in the Amazon EKS User Guide . For more information about local clusters deployed on an Outpost, see [Amazon EKS local cluster platform versions](https://docs.aws.amazon.com/eks/latest/userguide/eks-outposts-platform-versions.html) in the Amazon EKS User Guide .
        public var platformVersion: Swift.String?
        /// The VPC configuration used by the cluster control plane. Amazon EKS VPC resources have specific requirements to work properly with Kubernetes. For more information, see [Cluster VPC considerations](https://docs.aws.amazon.com/eks/latest/userguide/network_reqs.html) and [Cluster security group considerations](https://docs.aws.amazon.com/eks/latest/userguide/sec-group-reqs.html) in the Amazon EKS User Guide.
        public var resourcesVpcConfig: EKSClientTypes.VpcConfigResponse?
        /// The Amazon Resource Name (ARN) of the IAM role that provides permissions for the Kubernetes control plane to make calls to Amazon Web Services API operations on your behalf.
        public var roleArn: Swift.String?
        /// The current status of the cluster.
        public var status: EKSClientTypes.ClusterStatus?
        /// Metadata that assists with categorization and organization. Each tag consists of a key and an optional value. You define both. Tags don't propagate to any other cluster or Amazon Web Services resources.
        public var tags: [Swift.String: Swift.String]?
        /// This value indicates if extended support is enabled or disabled for the cluster. [Learn more about EKS Extended Support in the EKS User Guide.](https://docs.aws.amazon.com/eks/latest/userguide/extended-support-control.html)
        public var upgradePolicy: EKSClientTypes.UpgradePolicyResponse?
        /// The Kubernetes server version for the cluster.
        public var version: Swift.String?
        /// The configuration for zonal shift for the cluster.
        public var zonalShiftConfig: EKSClientTypes.ZonalShiftConfigResponse?

        public init(
            accessConfig: EKSClientTypes.AccessConfigResponse? = nil,
            arn: Swift.String? = nil,
            certificateAuthority: EKSClientTypes.Certificate? = nil,
            clientRequestToken: Swift.String? = nil,
            connectorConfig: EKSClientTypes.ConnectorConfigResponse? = nil,
            createdAt: Foundation.Date? = nil,
            encryptionConfig: [EKSClientTypes.EncryptionConfig]? = nil,
            endpoint: Swift.String? = nil,
            health: EKSClientTypes.ClusterHealth? = nil,
            id: Swift.String? = nil,
            identity: EKSClientTypes.Identity? = nil,
            kubernetesNetworkConfig: EKSClientTypes.KubernetesNetworkConfigResponse? = nil,
            logging: EKSClientTypes.Logging? = nil,
            name: Swift.String? = nil,
            outpostConfig: EKSClientTypes.OutpostConfigResponse? = nil,
            platformVersion: Swift.String? = nil,
            resourcesVpcConfig: EKSClientTypes.VpcConfigResponse? = nil,
            roleArn: Swift.String? = nil,
            status: EKSClientTypes.ClusterStatus? = nil,
            tags: [Swift.String: Swift.String]? = nil,
            upgradePolicy: EKSClientTypes.UpgradePolicyResponse? = nil,
            version: Swift.String? = nil,
            zonalShiftConfig: EKSClientTypes.ZonalShiftConfigResponse? = nil
        )
        {
            self.accessConfig = accessConfig
            self.arn = arn
            self.certificateAuthority = certificateAuthority
            self.clientRequestToken = clientRequestToken
            self.connectorConfig = connectorConfig
            self.createdAt = createdAt
            self.encryptionConfig = encryptionConfig
            self.endpoint = endpoint
            self.health = health
            self.id = id
            self.identity = identity
            self.kubernetesNetworkConfig = kubernetesNetworkConfig
            self.logging = logging
            self.name = name
            self.outpostConfig = outpostConfig
            self.platformVersion = platformVersion
            self.resourcesVpcConfig = resourcesVpcConfig
            self.roleArn = roleArn
            self.status = status
            self.tags = tags
            self.upgradePolicy = upgradePolicy
            self.version = version
            self.zonalShiftConfig = zonalShiftConfig
        }
    }
}

public struct CreateClusterOutput: Swift.Sendable {
    /// The full description of your new cluster.
    public var cluster: EKSClientTypes.Cluster?

    public init(
        cluster: EKSClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

extension EKSClientTypes {

    public enum EksAnywhereSubscriptionLicenseType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cluster
        case sdkUnknown(Swift.String)

        public static var allCases: [EksAnywhereSubscriptionLicenseType] {
            return [
                .cluster
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cluster: return "Cluster"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EKSClientTypes {

    public enum EksAnywhereSubscriptionTermUnit: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case months
        case sdkUnknown(Swift.String)

        public static var allCases: [EksAnywhereSubscriptionTermUnit] {
            return [
                .months
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .months: return "MONTHS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EKSClientTypes {

    /// An object representing the term duration and term unit type of your subscription. This determines the term length of your subscription. Valid values are MONTHS for term unit and 12 or 36 for term duration, indicating a 12 month or 36 month subscription.
    public struct EksAnywhereSubscriptionTerm: Swift.Sendable {
        /// The duration of the subscription term. Valid values are 12 and 36, indicating a 12 month or 36 month subscription.
        public var duration: Swift.Int
        /// The term unit of the subscription. Valid value is MONTHS.
        public var unit: EKSClientTypes.EksAnywhereSubscriptionTermUnit?

        public init(
            duration: Swift.Int = 0,
            unit: EKSClientTypes.EksAnywhereSubscriptionTermUnit? = nil
        )
        {
            self.duration = duration
            self.unit = unit
        }
    }
}

public struct CreateEksAnywhereSubscriptionInput: Swift.Sendable {
    /// A boolean indicating whether the subscription auto renews at the end of the term.
    public var autoRenew: Swift.Bool?
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    public var clientRequestToken: Swift.String?
    /// The number of licenses to purchase with the subscription. Valid values are between 1 and 100. This value can't be changed after creating the subscription.
    public var licenseQuantity: Swift.Int?
    /// The license type for all licenses in the subscription. Valid value is CLUSTER. With the CLUSTER license type, each license covers support for a single EKS Anywhere cluster.
    public var licenseType: EKSClientTypes.EksAnywhereSubscriptionLicenseType?
    /// The unique name for your subscription. It must be unique in your Amazon Web Services account in the Amazon Web Services Region you're creating the subscription in. The name can contain only alphanumeric characters (case-sensitive), hyphens, and underscores. It must start with an alphabetic character and can't be longer than 100 characters.
    /// This member is required.
    public var name: Swift.String?
    /// The metadata for a subscription to assist with categorization and organization. Each tag consists of a key and an optional value. Subscription tags don't propagate to any other resources associated with the subscription.
    public var tags: [Swift.String: Swift.String]?
    /// An object representing the term duration and term unit type of your subscription. This determines the term length of your subscription. Valid values are MONTHS for term unit and 12 or 36 for term duration, indicating a 12 month or 36 month subscription. This value cannot be changed after creating the subscription.
    /// This member is required.
    public var term: EKSClientTypes.EksAnywhereSubscriptionTerm?

    public init(
        autoRenew: Swift.Bool? = false,
        clientRequestToken: Swift.String? = nil,
        licenseQuantity: Swift.Int? = 0,
        licenseType: EKSClientTypes.EksAnywhereSubscriptionLicenseType? = nil,
        name: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        term: EKSClientTypes.EksAnywhereSubscriptionTerm? = nil
    )
    {
        self.autoRenew = autoRenew
        self.clientRequestToken = clientRequestToken
        self.licenseQuantity = licenseQuantity
        self.licenseType = licenseType
        self.name = name
        self.tags = tags
        self.term = term
    }
}

extension EKSClientTypes {

    /// An EKS Anywhere subscription authorizing the customer to support for licensed clusters and access to EKS Anywhere Curated Packages.
    public struct EksAnywhereSubscription: Swift.Sendable {
        /// The Amazon Resource Name (ARN) for the subscription.
        public var arn: Swift.String?
        /// A boolean indicating whether or not a subscription will auto renew when it expires.
        public var autoRenew: Swift.Bool
        /// The Unix timestamp in seconds for when the subscription was created.
        public var createdAt: Foundation.Date?
        /// The Unix timestamp in seconds for when the subscription is effective.
        public var effectiveDate: Foundation.Date?
        /// The Unix timestamp in seconds for when the subscription will expire or auto renew, depending on the auto renew configuration of the subscription object.
        public var expirationDate: Foundation.Date?
        /// UUID identifying a subscription.
        public var id: Swift.String?
        /// Amazon Web Services License Manager ARN associated with the subscription.
        public var licenseArns: [Swift.String]?
        /// The number of licenses included in a subscription. Valid values are between 1 and 100.
        public var licenseQuantity: Swift.Int
        /// The type of licenses included in the subscription. Valid value is CLUSTER. With the CLUSTER license type, each license covers support for a single EKS Anywhere cluster.
        public var licenseType: EKSClientTypes.EksAnywhereSubscriptionLicenseType?
        /// The status of a subscription.
        public var status: Swift.String?
        /// The metadata for a subscription to assist with categorization and organization. Each tag consists of a key and an optional value. Subscription tags do not propagate to any other resources associated with the subscription.
        public var tags: [Swift.String: Swift.String]?
        /// An EksAnywhereSubscriptionTerm object.
        public var term: EKSClientTypes.EksAnywhereSubscriptionTerm?

        public init(
            arn: Swift.String? = nil,
            autoRenew: Swift.Bool = false,
            createdAt: Foundation.Date? = nil,
            effectiveDate: Foundation.Date? = nil,
            expirationDate: Foundation.Date? = nil,
            id: Swift.String? = nil,
            licenseArns: [Swift.String]? = nil,
            licenseQuantity: Swift.Int = 0,
            licenseType: EKSClientTypes.EksAnywhereSubscriptionLicenseType? = nil,
            status: Swift.String? = nil,
            tags: [Swift.String: Swift.String]? = nil,
            term: EKSClientTypes.EksAnywhereSubscriptionTerm? = nil
        )
        {
            self.arn = arn
            self.autoRenew = autoRenew
            self.createdAt = createdAt
            self.effectiveDate = effectiveDate
            self.expirationDate = expirationDate
            self.id = id
            self.licenseArns = licenseArns
            self.licenseQuantity = licenseQuantity
            self.licenseType = licenseType
            self.status = status
            self.tags = tags
            self.term = term
        }
    }
}

public struct CreateEksAnywhereSubscriptionOutput: Swift.Sendable {
    /// The full description of the subscription.
    public var subscription: EKSClientTypes.EksAnywhereSubscription?

    public init(
        subscription: EKSClientTypes.EksAnywhereSubscription? = nil
    )
    {
        self.subscription = subscription
    }
}

extension EKSClientTypes {

    /// An object representing an Fargate profile selector.
    public struct FargateProfileSelector: Swift.Sendable {
        /// The Kubernetes labels that the selector should match. A pod must contain all of the labels that are specified in the selector for it to be considered a match.
        public var labels: [Swift.String: Swift.String]?
        /// The Kubernetes namespace that the selector should match.
        public var namespace: Swift.String?

        public init(
            labels: [Swift.String: Swift.String]? = nil,
            namespace: Swift.String? = nil
        )
        {
            self.labels = labels
            self.namespace = namespace
        }
    }
}

public struct CreateFargateProfileInput: Swift.Sendable {
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    public var clientRequestToken: Swift.String?
    /// The name of your cluster.
    /// This member is required.
    public var clusterName: Swift.String?
    /// The name of the Fargate profile.
    /// This member is required.
    public var fargateProfileName: Swift.String?
    /// The Amazon Resource Name (ARN) of the Pod execution role to use for a Pod that matches the selectors in the Fargate profile. The Pod execution role allows Fargate infrastructure to register with your cluster as a node, and it provides read access to Amazon ECR image repositories. For more information, see [Pod] execution role(https://docs.aws.amazon.com/eks/latest/userguide/pod-execution-role.html) in the Amazon EKS User Guide.
    /// This member is required.
    public var podExecutionRoleArn: Swift.String?
    /// The selectors to match for a Pod to use this Fargate profile. Each selector must have an associated Kubernetes namespace. Optionally, you can also specify labels for a namespace. You may specify up to five selectors in a Fargate profile.
    public var selectors: [EKSClientTypes.FargateProfileSelector]?
    /// The IDs of subnets to launch a Pod into. A Pod running on Fargate isn't assigned a public IP address, so only private subnets (with no direct route to an Internet Gateway) are accepted for this parameter.
    public var subnets: [Swift.String]?
    /// Metadata that assists with categorization and organization. Each tag consists of a key and an optional value. You define both. Tags don't propagate to any other cluster or Amazon Web Services resources.
    public var tags: [Swift.String: Swift.String]?

    public init(
        clientRequestToken: Swift.String? = nil,
        clusterName: Swift.String? = nil,
        fargateProfileName: Swift.String? = nil,
        podExecutionRoleArn: Swift.String? = nil,
        selectors: [EKSClientTypes.FargateProfileSelector]? = nil,
        subnets: [Swift.String]? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.clusterName = clusterName
        self.fargateProfileName = fargateProfileName
        self.podExecutionRoleArn = podExecutionRoleArn
        self.selectors = selectors
        self.subnets = subnets
        self.tags = tags
    }
}

extension EKSClientTypes {

    public enum FargateProfileIssueCode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accessDenied
        case clusterUnreachable
        case internalFailure
        case podExecutionRoleAlreadyInUse
        case sdkUnknown(Swift.String)

        public static var allCases: [FargateProfileIssueCode] {
            return [
                .accessDenied,
                .clusterUnreachable,
                .internalFailure,
                .podExecutionRoleAlreadyInUse
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accessDenied: return "AccessDenied"
            case .clusterUnreachable: return "ClusterUnreachable"
            case .internalFailure: return "InternalFailure"
            case .podExecutionRoleAlreadyInUse: return "PodExecutionRoleAlreadyInUse"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EKSClientTypes {

    /// An issue that is associated with the Fargate profile.
    public struct FargateProfileIssue: Swift.Sendable {
        /// A brief description of the error.
        public var code: EKSClientTypes.FargateProfileIssueCode?
        /// The error message associated with the issue.
        public var message: Swift.String?
        /// The Amazon Web Services resources that are affected by this issue.
        public var resourceIds: [Swift.String]?

        public init(
            code: EKSClientTypes.FargateProfileIssueCode? = nil,
            message: Swift.String? = nil,
            resourceIds: [Swift.String]? = nil
        )
        {
            self.code = code
            self.message = message
            self.resourceIds = resourceIds
        }
    }
}

extension EKSClientTypes {

    /// The health status of the Fargate profile. If there are issues with your Fargate profile's health, they are listed here.
    public struct FargateProfileHealth: Swift.Sendable {
        /// Any issues that are associated with the Fargate profile.
        public var issues: [EKSClientTypes.FargateProfileIssue]?

        public init(
            issues: [EKSClientTypes.FargateProfileIssue]? = nil
        )
        {
            self.issues = issues
        }
    }
}

extension EKSClientTypes {

    public enum FargateProfileStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case createFailed
        case creating
        case deleteFailed
        case deleting
        case sdkUnknown(Swift.String)

        public static var allCases: [FargateProfileStatus] {
            return [
                .active,
                .createFailed,
                .creating,
                .deleteFailed,
                .deleting
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .createFailed: return "CREATE_FAILED"
            case .creating: return "CREATING"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleting: return "DELETING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EKSClientTypes {

    /// An object representing an Fargate profile.
    public struct FargateProfile: Swift.Sendable {
        /// The name of your cluster.
        public var clusterName: Swift.String?
        /// The Unix epoch timestamp at object creation.
        public var createdAt: Foundation.Date?
        /// The full Amazon Resource Name (ARN) of the Fargate profile.
        public var fargateProfileArn: Swift.String?
        /// The name of the Fargate profile.
        public var fargateProfileName: Swift.String?
        /// The health status of the Fargate profile. If there are issues with your Fargate profile's health, they are listed here.
        public var health: EKSClientTypes.FargateProfileHealth?
        /// The Amazon Resource Name (ARN) of the Pod execution role to use for any Pod that matches the selectors in the Fargate profile. For more information, see [Pod] execution role(https://docs.aws.amazon.com/eks/latest/userguide/pod-execution-role.html) in the Amazon EKS User Guide.
        public var podExecutionRoleArn: Swift.String?
        /// The selectors to match for a Pod to use this Fargate profile.
        public var selectors: [EKSClientTypes.FargateProfileSelector]?
        /// The current status of the Fargate profile.
        public var status: EKSClientTypes.FargateProfileStatus?
        /// The IDs of subnets to launch a Pod into.
        public var subnets: [Swift.String]?
        /// Metadata that assists with categorization and organization. Each tag consists of a key and an optional value. You define both. Tags don't propagate to any other cluster or Amazon Web Services resources.
        public var tags: [Swift.String: Swift.String]?

        public init(
            clusterName: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            fargateProfileArn: Swift.String? = nil,
            fargateProfileName: Swift.String? = nil,
            health: EKSClientTypes.FargateProfileHealth? = nil,
            podExecutionRoleArn: Swift.String? = nil,
            selectors: [EKSClientTypes.FargateProfileSelector]? = nil,
            status: EKSClientTypes.FargateProfileStatus? = nil,
            subnets: [Swift.String]? = nil,
            tags: [Swift.String: Swift.String]? = nil
        )
        {
            self.clusterName = clusterName
            self.createdAt = createdAt
            self.fargateProfileArn = fargateProfileArn
            self.fargateProfileName = fargateProfileName
            self.health = health
            self.podExecutionRoleArn = podExecutionRoleArn
            self.selectors = selectors
            self.status = status
            self.subnets = subnets
            self.tags = tags
        }
    }
}

public struct CreateFargateProfileOutput: Swift.Sendable {
    /// The full description of your new Fargate profile.
    public var fargateProfile: EKSClientTypes.FargateProfile?

    public init(
        fargateProfile: EKSClientTypes.FargateProfile? = nil
    )
    {
        self.fargateProfile = fargateProfile
    }
}

extension EKSClientTypes {

    public enum CapacityTypes: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case capacityBlock
        case onDemand
        case spot
        case sdkUnknown(Swift.String)

        public static var allCases: [CapacityTypes] {
            return [
                .capacityBlock,
                .onDemand,
                .spot
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .capacityBlock: return "CAPACITY_BLOCK"
            case .onDemand: return "ON_DEMAND"
            case .spot: return "SPOT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EKSClientTypes {

    /// An object representing a node group launch template specification. The launch template can't include [SubnetId](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateNetworkInterface.html), [IamInstanceProfile](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_IamInstanceProfile.html), [RequestSpotInstances](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RequestSpotInstances.html), [HibernationOptions](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_HibernationOptionsRequest.html), or [TerminateInstances](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_TerminateInstances.html), or the node group deployment or update will fail. For more information about launch templates, see [CreateLaunchTemplate](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateLaunchTemplate.html) in the Amazon EC2 API Reference. For more information about using launch templates with Amazon EKS, see [Customizing managed nodes with launch templates](https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html) in the Amazon EKS User Guide. You must specify either the launch template ID or the launch template name in the request, but not both.
    public struct LaunchTemplateSpecification: Swift.Sendable {
        /// The ID of the launch template. You must specify either the launch template ID or the launch template name in the request, but not both.
        public var id: Swift.String?
        /// The name of the launch template. You must specify either the launch template name or the launch template ID in the request, but not both.
        public var name: Swift.String?
        /// The version number of the launch template to use. If no version is specified, then the template's default version is used.
        public var version: Swift.String?

        public init(
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.id = id
            self.name = name
            self.version = version
        }
    }
}

extension EKSClientTypes {

    /// An object representing the remote access configuration for the managed node group.
    public struct RemoteAccessConfig: Swift.Sendable {
        /// The Amazon EC2 SSH key name that provides access for SSH communication with the nodes in the managed node group. For more information, see [Amazon EC2 key pairs and Linux instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html) in the Amazon Elastic Compute Cloud User Guide for Linux Instances. For Windows, an Amazon EC2 SSH key is used to obtain the RDP password. For more information, see [Amazon EC2 key pairs and Windows instances](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-key-pairs.html) in the Amazon Elastic Compute Cloud User Guide for Windows Instances.
        public var ec2SshKey: Swift.String?
        /// The security group IDs that are allowed SSH access (port 22) to the nodes. For Windows, the port is 3389. If you specify an Amazon EC2 SSH key but don't specify a source security group when you create a managed node group, then the port on the nodes is opened to the internet (0.0.0.0/0). For more information, see [Security Groups for Your VPC](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html) in the Amazon Virtual Private Cloud User Guide.
        public var sourceSecurityGroups: [Swift.String]?

        public init(
            ec2SshKey: Swift.String? = nil,
            sourceSecurityGroups: [Swift.String]? = nil
        )
        {
            self.ec2SshKey = ec2SshKey
            self.sourceSecurityGroups = sourceSecurityGroups
        }
    }
}

extension EKSClientTypes {

    /// An object representing the scaling configuration details for the Auto Scaling group that is associated with your node group. When creating a node group, you must specify all or none of the properties. When updating a node group, you can specify any or none of the properties.
    public struct NodegroupScalingConfig: Swift.Sendable {
        /// The current number of nodes that the managed node group should maintain. If you use the Kubernetes [Cluster Autoscaler](https://github.com/kubernetes/autoscaler#kubernetes-autoscaler), you shouldn't change the desiredSize value directly, as this can cause the Cluster Autoscaler to suddenly scale up or scale down. Whenever this parameter changes, the number of worker nodes in the node group is updated to the specified size. If this parameter is given a value that is smaller than the current number of running worker nodes, the necessary number of worker nodes are terminated to match the given value. When using CloudFormation, no action occurs if you remove this parameter from your CFN template. This parameter can be different from minSize in some cases, such as when starting with extra hosts for testing. This parameter can also be different when you want to start with an estimated number of needed hosts, but let the Cluster Autoscaler reduce the number if there are too many. When the Cluster Autoscaler is used, the desiredSize parameter is altered by the Cluster Autoscaler (but can be out-of-date for short periods of time). the Cluster Autoscaler doesn't scale a managed node group lower than minSize or higher than maxSize.
        public var desiredSize: Swift.Int?
        /// The maximum number of nodes that the managed node group can scale out to. For information about the maximum number that you can specify, see [Amazon EKS service quotas](https://docs.aws.amazon.com/eks/latest/userguide/service-quotas.html) in the Amazon EKS User Guide.
        public var maxSize: Swift.Int?
        /// The minimum number of nodes that the managed node group can scale in to.
        public var minSize: Swift.Int?

        public init(
            desiredSize: Swift.Int? = nil,
            maxSize: Swift.Int? = nil,
            minSize: Swift.Int? = nil
        )
        {
            self.desiredSize = desiredSize
            self.maxSize = maxSize
            self.minSize = minSize
        }
    }
}

extension EKSClientTypes {

    public enum TaintEffect: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case noExecute
        case noSchedule
        case preferNoSchedule
        case sdkUnknown(Swift.String)

        public static var allCases: [TaintEffect] {
            return [
                .noExecute,
                .noSchedule,
                .preferNoSchedule
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .noExecute: return "NO_EXECUTE"
            case .noSchedule: return "NO_SCHEDULE"
            case .preferNoSchedule: return "PREFER_NO_SCHEDULE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EKSClientTypes {

    /// A property that allows a node to repel a Pod. For more information, see [Node taints on managed node groups](https://docs.aws.amazon.com/eks/latest/userguide/node-taints-managed-node-groups.html) in the Amazon EKS User Guide.
    public struct Taint: Swift.Sendable {
        /// The effect of the taint.
        public var effect: EKSClientTypes.TaintEffect?
        /// The key of the taint.
        public var key: Swift.String?
        /// The value of the taint.
        public var value: Swift.String?

        public init(
            effect: EKSClientTypes.TaintEffect? = nil,
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.effect = effect
            self.key = key
            self.value = value
        }
    }
}

extension EKSClientTypes {

    /// The node group update configuration.
    public struct NodegroupUpdateConfig: Swift.Sendable {
        /// The maximum number of nodes unavailable at once during a version update. Nodes are updated in parallel. This value or maxUnavailablePercentage is required to have a value.The maximum number is 100.
        public var maxUnavailable: Swift.Int?
        /// The maximum percentage of nodes unavailable during a version update. This percentage of nodes are updated in parallel, up to 100 nodes at once. This value or maxUnavailable is required to have a value.
        public var maxUnavailablePercentage: Swift.Int?

        public init(
            maxUnavailable: Swift.Int? = nil,
            maxUnavailablePercentage: Swift.Int? = nil
        )
        {
            self.maxUnavailable = maxUnavailable
            self.maxUnavailablePercentage = maxUnavailablePercentage
        }
    }
}

public struct CreateNodegroupInput: Swift.Sendable {
    /// The AMI type for your node group. If you specify launchTemplate, and your launch template uses a custom AMI, then don't specify amiType, or the node group deployment will fail. If your launch template uses a Windows custom AMI, then add eks:kube-proxy-windows to your Windows nodes rolearn in the aws-authConfigMap. For more information about using launch templates with Amazon EKS, see [Customizing managed nodes with launch templates](https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html) in the Amazon EKS User Guide.
    public var amiType: EKSClientTypes.AMITypes?
    /// The capacity type for your node group.
    public var capacityType: EKSClientTypes.CapacityTypes?
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    public var clientRequestToken: Swift.String?
    /// The name of your cluster.
    /// This member is required.
    public var clusterName: Swift.String?
    /// The root device disk size (in GiB) for your node group instances. The default disk size is 20 GiB for Linux and Bottlerocket. The default disk size is 50 GiB for Windows. If you specify launchTemplate, then don't specify diskSize, or the node group deployment will fail. For more information about using launch templates with Amazon EKS, see [Customizing managed nodes with launch templates](https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html) in the Amazon EKS User Guide.
    public var diskSize: Swift.Int?
    /// Specify the instance types for a node group. If you specify a GPU instance type, make sure to also specify an applicable GPU AMI type with the amiType parameter. If you specify launchTemplate, then you can specify zero or one instance type in your launch template or you can specify 0-20 instance types for instanceTypes. If however, you specify an instance type in your launch template and specify any instanceTypes, the node group deployment will fail. If you don't specify an instance type in a launch template or for instanceTypes, then t3.medium is used, by default. If you specify Spot for capacityType, then we recommend specifying multiple values for instanceTypes. For more information, see [Managed node group capacity types](https://docs.aws.amazon.com/eks/latest/userguide/managed-node-groups.html#managed-node-group-capacity-types) and [Customizing managed nodes with launch templates](https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html) in the Amazon EKS User Guide.
    public var instanceTypes: [Swift.String]?
    /// The Kubernetes labels to apply to the nodes in the node group when they are created.
    public var labels: [Swift.String: Swift.String]?
    /// An object representing a node group's launch template specification. When using this object, don't directly specify instanceTypes, diskSize, or remoteAccess. Make sure that the launch template meets the requirements in launchTemplateSpecification. Also refer to [Customizing managed nodes with launch templates](https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html) in the Amazon EKS User Guide.
    public var launchTemplate: EKSClientTypes.LaunchTemplateSpecification?
    /// The Amazon Resource Name (ARN) of the IAM role to associate with your node group. The Amazon EKS worker node kubelet daemon makes calls to Amazon Web Services APIs on your behalf. Nodes receive permissions for these API calls through an IAM instance profile and associated policies. Before you can launch nodes and register them into a cluster, you must create an IAM role for those nodes to use when they are launched. For more information, see [Amazon EKS node IAM role](https://docs.aws.amazon.com/eks/latest/userguide/create-node-role.html) in the Amazon EKS User Guide . If you specify launchTemplate, then don't specify [IamInstanceProfile](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_IamInstanceProfile.html) in your launch template, or the node group deployment will fail. For more information about using launch templates with Amazon EKS, see [Customizing managed nodes with launch templates](https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html) in the Amazon EKS User Guide.
    /// This member is required.
    public var nodeRole: Swift.String?
    /// The unique name to give your node group.
    /// This member is required.
    public var nodegroupName: Swift.String?
    /// The AMI version of the Amazon EKS optimized AMI to use with your node group. By default, the latest available AMI version for the node group's current Kubernetes version is used. For information about Linux versions, see [Amazon EKS optimized Amazon Linux AMI versions](https://docs.aws.amazon.com/eks/latest/userguide/eks-linux-ami-versions.html) in the Amazon EKS User Guide. Amazon EKS managed node groups support the November 2022 and later releases of the Windows AMIs. For information about Windows versions, see [Amazon EKS optimized Windows AMI versions](https://docs.aws.amazon.com/eks/latest/userguide/eks-ami-versions-windows.html) in the Amazon EKS User Guide. If you specify launchTemplate, and your launch template uses a custom AMI, then don't specify releaseVersion, or the node group deployment will fail. For more information about using launch templates with Amazon EKS, see [Customizing managed nodes with launch templates](https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html) in the Amazon EKS User Guide.
    public var releaseVersion: Swift.String?
    /// The remote access configuration to use with your node group. For Linux, the protocol is SSH. For Windows, the protocol is RDP. If you specify launchTemplate, then don't specify remoteAccess, or the node group deployment will fail. For more information about using launch templates with Amazon EKS, see [Customizing managed nodes with launch templates](https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html) in the Amazon EKS User Guide.
    public var remoteAccess: EKSClientTypes.RemoteAccessConfig?
    /// The scaling configuration details for the Auto Scaling group that is created for your node group.
    public var scalingConfig: EKSClientTypes.NodegroupScalingConfig?
    /// The subnets to use for the Auto Scaling group that is created for your node group. If you specify launchTemplate, then don't specify [SubnetId](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateNetworkInterface.html) in your launch template, or the node group deployment will fail. For more information about using launch templates with Amazon EKS, see [Customizing managed nodes with launch templates](https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html) in the Amazon EKS User Guide.
    /// This member is required.
    public var subnets: [Swift.String]?
    /// Metadata that assists with categorization and organization. Each tag consists of a key and an optional value. You define both. Tags don't propagate to any other cluster or Amazon Web Services resources.
    public var tags: [Swift.String: Swift.String]?
    /// The Kubernetes taints to be applied to the nodes in the node group. For more information, see [Node taints on managed node groups](https://docs.aws.amazon.com/eks/latest/userguide/node-taints-managed-node-groups.html).
    public var taints: [EKSClientTypes.Taint]?
    /// The node group update configuration.
    public var updateConfig: EKSClientTypes.NodegroupUpdateConfig?
    /// The Kubernetes version to use for your managed nodes. By default, the Kubernetes version of the cluster is used, and this is the only accepted specified value. If you specify launchTemplate, and your launch template uses a custom AMI, then don't specify version, or the node group deployment will fail. For more information about using launch templates with Amazon EKS, see [Customizing managed nodes with launch templates](https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html) in the Amazon EKS User Guide.
    public var version: Swift.String?

    public init(
        amiType: EKSClientTypes.AMITypes? = nil,
        capacityType: EKSClientTypes.CapacityTypes? = nil,
        clientRequestToken: Swift.String? = nil,
        clusterName: Swift.String? = nil,
        diskSize: Swift.Int? = nil,
        instanceTypes: [Swift.String]? = nil,
        labels: [Swift.String: Swift.String]? = nil,
        launchTemplate: EKSClientTypes.LaunchTemplateSpecification? = nil,
        nodeRole: Swift.String? = nil,
        nodegroupName: Swift.String? = nil,
        releaseVersion: Swift.String? = nil,
        remoteAccess: EKSClientTypes.RemoteAccessConfig? = nil,
        scalingConfig: EKSClientTypes.NodegroupScalingConfig? = nil,
        subnets: [Swift.String]? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        taints: [EKSClientTypes.Taint]? = nil,
        updateConfig: EKSClientTypes.NodegroupUpdateConfig? = nil,
        version: Swift.String? = nil
    )
    {
        self.amiType = amiType
        self.capacityType = capacityType
        self.clientRequestToken = clientRequestToken
        self.clusterName = clusterName
        self.diskSize = diskSize
        self.instanceTypes = instanceTypes
        self.labels = labels
        self.launchTemplate = launchTemplate
        self.nodeRole = nodeRole
        self.nodegroupName = nodegroupName
        self.releaseVersion = releaseVersion
        self.remoteAccess = remoteAccess
        self.scalingConfig = scalingConfig
        self.subnets = subnets
        self.tags = tags
        self.taints = taints
        self.updateConfig = updateConfig
        self.version = version
    }
}

extension EKSClientTypes {

    public enum NodegroupIssueCode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accessDenied
        case amiIdNotFound
        case asgInstanceLaunchFailures
        case autoScalingGroupInstanceRefreshActive
        case autoScalingGroupInvalidConfiguration
        case autoScalingGroupNotFound
        case autoScalingGroupOptInRequired
        case autoScalingGroupRateLimitExceeded
        case clusterUnreachable
        case ec2LaunchTemplateDeletionFailure
        case ec2LaunchTemplateInvalidConfiguration
        case ec2LaunchTemplateMaxLimitExceeded
        case ec2LaunchTemplateNotFound
        case ec2LaunchTemplateVersionMaxLimitExceeded
        case ec2LaunchTemplateVersionMismatch
        case ec2SecurityGroupDeletionFailure
        case ec2SecurityGroupNotFound
        case ec2SubnetInvalidConfiguration
        case ec2SubnetListTooLong
        case ec2SubnetMissingIpv6Assignment
        case ec2SubnetNotFound
        case iamInstanceProfileNotFound
        case iamLimitExceeded
        case iamNodeRoleNotFound
        case iamThrottling
        case instanceLimitExceeded
        case insufficientFreeAddresses
        case internalFailure
        case kubernetesLabelInvalid
        case limitExceeded
        case nodeCreationFailure
        case nodeTerminationFailure
        case podEvictionFailure
        case sourceEc2LaunchTemplateNotFound
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [NodegroupIssueCode] {
            return [
                .accessDenied,
                .amiIdNotFound,
                .asgInstanceLaunchFailures,
                .autoScalingGroupInstanceRefreshActive,
                .autoScalingGroupInvalidConfiguration,
                .autoScalingGroupNotFound,
                .autoScalingGroupOptInRequired,
                .autoScalingGroupRateLimitExceeded,
                .clusterUnreachable,
                .ec2LaunchTemplateDeletionFailure,
                .ec2LaunchTemplateInvalidConfiguration,
                .ec2LaunchTemplateMaxLimitExceeded,
                .ec2LaunchTemplateNotFound,
                .ec2LaunchTemplateVersionMaxLimitExceeded,
                .ec2LaunchTemplateVersionMismatch,
                .ec2SecurityGroupDeletionFailure,
                .ec2SecurityGroupNotFound,
                .ec2SubnetInvalidConfiguration,
                .ec2SubnetListTooLong,
                .ec2SubnetMissingIpv6Assignment,
                .ec2SubnetNotFound,
                .iamInstanceProfileNotFound,
                .iamLimitExceeded,
                .iamNodeRoleNotFound,
                .iamThrottling,
                .instanceLimitExceeded,
                .insufficientFreeAddresses,
                .internalFailure,
                .kubernetesLabelInvalid,
                .limitExceeded,
                .nodeCreationFailure,
                .nodeTerminationFailure,
                .podEvictionFailure,
                .sourceEc2LaunchTemplateNotFound,
                .unknown
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accessDenied: return "AccessDenied"
            case .amiIdNotFound: return "AmiIdNotFound"
            case .asgInstanceLaunchFailures: return "AsgInstanceLaunchFailures"
            case .autoScalingGroupInstanceRefreshActive: return "AutoScalingGroupInstanceRefreshActive"
            case .autoScalingGroupInvalidConfiguration: return "AutoScalingGroupInvalidConfiguration"
            case .autoScalingGroupNotFound: return "AutoScalingGroupNotFound"
            case .autoScalingGroupOptInRequired: return "AutoScalingGroupOptInRequired"
            case .autoScalingGroupRateLimitExceeded: return "AutoScalingGroupRateLimitExceeded"
            case .clusterUnreachable: return "ClusterUnreachable"
            case .ec2LaunchTemplateDeletionFailure: return "Ec2LaunchTemplateDeletionFailure"
            case .ec2LaunchTemplateInvalidConfiguration: return "Ec2LaunchTemplateInvalidConfiguration"
            case .ec2LaunchTemplateMaxLimitExceeded: return "Ec2LaunchTemplateMaxLimitExceeded"
            case .ec2LaunchTemplateNotFound: return "Ec2LaunchTemplateNotFound"
            case .ec2LaunchTemplateVersionMaxLimitExceeded: return "Ec2LaunchTemplateVersionMaxLimitExceeded"
            case .ec2LaunchTemplateVersionMismatch: return "Ec2LaunchTemplateVersionMismatch"
            case .ec2SecurityGroupDeletionFailure: return "Ec2SecurityGroupDeletionFailure"
            case .ec2SecurityGroupNotFound: return "Ec2SecurityGroupNotFound"
            case .ec2SubnetInvalidConfiguration: return "Ec2SubnetInvalidConfiguration"
            case .ec2SubnetListTooLong: return "Ec2SubnetListTooLong"
            case .ec2SubnetMissingIpv6Assignment: return "Ec2SubnetMissingIpv6Assignment"
            case .ec2SubnetNotFound: return "Ec2SubnetNotFound"
            case .iamInstanceProfileNotFound: return "IamInstanceProfileNotFound"
            case .iamLimitExceeded: return "IamLimitExceeded"
            case .iamNodeRoleNotFound: return "IamNodeRoleNotFound"
            case .iamThrottling: return "IamThrottling"
            case .instanceLimitExceeded: return "InstanceLimitExceeded"
            case .insufficientFreeAddresses: return "InsufficientFreeAddresses"
            case .internalFailure: return "InternalFailure"
            case .kubernetesLabelInvalid: return "KubernetesLabelInvalid"
            case .limitExceeded: return "LimitExceeded"
            case .nodeCreationFailure: return "NodeCreationFailure"
            case .nodeTerminationFailure: return "NodeTerminationFailure"
            case .podEvictionFailure: return "PodEvictionFailure"
            case .sourceEc2LaunchTemplateNotFound: return "SourceEc2LaunchTemplateNotFound"
            case .unknown: return "Unknown"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EKSClientTypes {

    /// An object representing an issue with an Amazon EKS resource.
    public struct Issue: Swift.Sendable {
        /// A brief description of the error.
        ///
        /// * AccessDenied: Amazon EKS or one or more of your managed nodes is failing to authenticate or authorize with your Kubernetes cluster API server.
        ///
        /// * AsgInstanceLaunchFailures: Your Auto Scaling group is experiencing failures while attempting to launch instances.
        ///
        /// * AutoScalingGroupNotFound: We couldn't find the Auto Scaling group associated with the managed node group. You may be able to recreate an Auto Scaling group with the same settings to recover.
        ///
        /// * ClusterUnreachable: Amazon EKS or one or more of your managed nodes is unable to to communicate with your Kubernetes cluster API server. This can happen if there are network disruptions or if API servers are timing out processing requests.
        ///
        /// * Ec2LaunchTemplateNotFound: We couldn't find the Amazon EC2 launch template for your managed node group. You may be able to recreate a launch template with the same settings to recover.
        ///
        /// * Ec2LaunchTemplateVersionMismatch: The Amazon EC2 launch template version for your managed node group does not match the version that Amazon EKS created. You may be able to revert to the version that Amazon EKS created to recover.
        ///
        /// * Ec2SecurityGroupDeletionFailure: We could not delete the remote access security group for your managed node group. Remove any dependencies from the security group.
        ///
        /// * Ec2SecurityGroupNotFound: We couldn't find the cluster security group for the cluster. You must recreate your cluster.
        ///
        /// * Ec2SubnetInvalidConfiguration: One or more Amazon EC2 subnets specified for a node group do not automatically assign public IP addresses to instances launched into it. If you want your instances to be assigned a public IP address, then you need to enable the auto-assign public IP address setting for the subnet. See [Modifying the public ]IPv4 addressing attribute for your subnet(https://docs.aws.amazon.com/vpc/latest/userguide/vpc-ip-addressing.html#subnet-public-ip) in the Amazon VPC User Guide.
        ///
        /// * IamInstanceProfileNotFound: We couldn't find the IAM instance profile for your managed node group. You may be able to recreate an instance profile with the same settings to recover.
        ///
        /// * IamNodeRoleNotFound: We couldn't find the IAM role for your managed node group. You may be able to recreate an IAM role with the same settings to recover.
        ///
        /// * InstanceLimitExceeded: Your Amazon Web Services account is unable to launch any more instances of the specified instance type. You may be able to request an Amazon EC2 instance limit increase to recover.
        ///
        /// * InsufficientFreeAddresses: One or more of the subnets associated with your managed node group does not have enough available IP addresses for new nodes.
        ///
        /// * InternalFailure: These errors are usually caused by an Amazon EKS server-side issue.
        ///
        /// * NodeCreationFailure: Your launched instances are unable to register with your Amazon EKS cluster. Common causes of this failure are insufficient [node IAM role](https://docs.aws.amazon.com/eks/latest/userguide/create-node-role.html) permissions or lack of outbound internet access for the nodes.
        public var code: EKSClientTypes.NodegroupIssueCode?
        /// The error message associated with the issue.
        public var message: Swift.String?
        /// The Amazon Web Services resources that are afflicted by this issue.
        public var resourceIds: [Swift.String]?

        public init(
            code: EKSClientTypes.NodegroupIssueCode? = nil,
            message: Swift.String? = nil,
            resourceIds: [Swift.String]? = nil
        )
        {
            self.code = code
            self.message = message
            self.resourceIds = resourceIds
        }
    }
}

extension EKSClientTypes {

    /// An object representing the health status of the node group.
    public struct NodegroupHealth: Swift.Sendable {
        /// Any issues that are associated with the node group.
        public var issues: [EKSClientTypes.Issue]?

        public init(
            issues: [EKSClientTypes.Issue]? = nil
        )
        {
            self.issues = issues
        }
    }
}

extension EKSClientTypes {

    /// An object representing the resources associated with the node group, such as Auto Scaling groups and security groups for remote access.
    public struct NodegroupResources: Swift.Sendable {
        /// The Auto Scaling groups associated with the node group.
        public var autoScalingGroups: [EKSClientTypes.AutoScalingGroup]?
        /// The remote access security group associated with the node group. This security group controls SSH access to the nodes.
        public var remoteAccessSecurityGroup: Swift.String?

        public init(
            autoScalingGroups: [EKSClientTypes.AutoScalingGroup]? = nil,
            remoteAccessSecurityGroup: Swift.String? = nil
        )
        {
            self.autoScalingGroups = autoScalingGroups
            self.remoteAccessSecurityGroup = remoteAccessSecurityGroup
        }
    }
}

extension EKSClientTypes {

    public enum NodegroupStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case createFailed
        case creating
        case degraded
        case deleteFailed
        case deleting
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [NodegroupStatus] {
            return [
                .active,
                .createFailed,
                .creating,
                .degraded,
                .deleteFailed,
                .deleting,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .createFailed: return "CREATE_FAILED"
            case .creating: return "CREATING"
            case .degraded: return "DEGRADED"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleting: return "DELETING"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EKSClientTypes {

    /// An object representing an Amazon EKS managed node group.
    public struct Nodegroup: Swift.Sendable {
        /// If the node group was deployed using a launch template with a custom AMI, then this is CUSTOM. For node groups that weren't deployed using a launch template, this is the AMI type that was specified in the node group configuration.
        public var amiType: EKSClientTypes.AMITypes?
        /// The capacity type of your managed node group.
        public var capacityType: EKSClientTypes.CapacityTypes?
        /// The name of your cluster.
        public var clusterName: Swift.String?
        /// The Unix epoch timestamp at object creation.
        public var createdAt: Foundation.Date?
        /// If the node group wasn't deployed with a launch template, then this is the disk size in the node group configuration. If the node group was deployed with a launch template, then this is null.
        public var diskSize: Swift.Int?
        /// The health status of the node group. If there are issues with your node group's health, they are listed here.
        public var health: EKSClientTypes.NodegroupHealth?
        /// If the node group wasn't deployed with a launch template, then this is the instance type that is associated with the node group. If the node group was deployed with a launch template, then this is null.
        public var instanceTypes: [Swift.String]?
        /// The Kubernetes labels applied to the nodes in the node group. Only labels that are applied with the Amazon EKS API are shown here. There may be other Kubernetes labels applied to the nodes in this group.
        public var labels: [Swift.String: Swift.String]?
        /// If a launch template was used to create the node group, then this is the launch template that was used.
        public var launchTemplate: EKSClientTypes.LaunchTemplateSpecification?
        /// The Unix epoch timestamp for the last modification to the object.
        public var modifiedAt: Foundation.Date?
        /// The IAM role associated with your node group. The Amazon EKS node kubelet daemon makes calls to Amazon Web Services APIs on your behalf. Nodes receive permissions for these API calls through an IAM instance profile and associated policies.
        public var nodeRole: Swift.String?
        /// The Amazon Resource Name (ARN) associated with the managed node group.
        public var nodegroupArn: Swift.String?
        /// The name associated with an Amazon EKS managed node group.
        public var nodegroupName: Swift.String?
        /// If the node group was deployed using a launch template with a custom AMI, then this is the AMI ID that was specified in the launch template. For node groups that weren't deployed using a launch template, this is the version of the Amazon EKS optimized AMI that the node group was deployed with.
        public var releaseVersion: Swift.String?
        /// If the node group wasn't deployed with a launch template, then this is the remote access configuration that is associated with the node group. If the node group was deployed with a launch template, then this is null.
        public var remoteAccess: EKSClientTypes.RemoteAccessConfig?
        /// The resources associated with the node group, such as Auto Scaling groups and security groups for remote access.
        public var resources: EKSClientTypes.NodegroupResources?
        /// The scaling configuration details for the Auto Scaling group that is associated with your node group.
        public var scalingConfig: EKSClientTypes.NodegroupScalingConfig?
        /// The current status of the managed node group.
        public var status: EKSClientTypes.NodegroupStatus?
        /// The subnets that were specified for the Auto Scaling group that is associated with your node group.
        public var subnets: [Swift.String]?
        /// Metadata that assists with categorization and organization. Each tag consists of a key and an optional value. You define both. Tags don't propagate to any other cluster or Amazon Web Services resources.
        public var tags: [Swift.String: Swift.String]?
        /// The Kubernetes taints to be applied to the nodes in the node group when they are created. Effect is one of No_Schedule, Prefer_No_Schedule, or No_Execute. Kubernetes taints can be used together with tolerations to control how workloads are scheduled to your nodes. For more information, see [Node taints on managed node groups](https://docs.aws.amazon.com/eks/latest/userguide/node-taints-managed-node-groups.html).
        public var taints: [EKSClientTypes.Taint]?
        /// The node group update configuration.
        public var updateConfig: EKSClientTypes.NodegroupUpdateConfig?
        /// The Kubernetes version of the managed node group.
        public var version: Swift.String?

        public init(
            amiType: EKSClientTypes.AMITypes? = nil,
            capacityType: EKSClientTypes.CapacityTypes? = nil,
            clusterName: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            diskSize: Swift.Int? = nil,
            health: EKSClientTypes.NodegroupHealth? = nil,
            instanceTypes: [Swift.String]? = nil,
            labels: [Swift.String: Swift.String]? = nil,
            launchTemplate: EKSClientTypes.LaunchTemplateSpecification? = nil,
            modifiedAt: Foundation.Date? = nil,
            nodeRole: Swift.String? = nil,
            nodegroupArn: Swift.String? = nil,
            nodegroupName: Swift.String? = nil,
            releaseVersion: Swift.String? = nil,
            remoteAccess: EKSClientTypes.RemoteAccessConfig? = nil,
            resources: EKSClientTypes.NodegroupResources? = nil,
            scalingConfig: EKSClientTypes.NodegroupScalingConfig? = nil,
            status: EKSClientTypes.NodegroupStatus? = nil,
            subnets: [Swift.String]? = nil,
            tags: [Swift.String: Swift.String]? = nil,
            taints: [EKSClientTypes.Taint]? = nil,
            updateConfig: EKSClientTypes.NodegroupUpdateConfig? = nil,
            version: Swift.String? = nil
        )
        {
            self.amiType = amiType
            self.capacityType = capacityType
            self.clusterName = clusterName
            self.createdAt = createdAt
            self.diskSize = diskSize
            self.health = health
            self.instanceTypes = instanceTypes
            self.labels = labels
            self.launchTemplate = launchTemplate
            self.modifiedAt = modifiedAt
            self.nodeRole = nodeRole
            self.nodegroupArn = nodegroupArn
            self.nodegroupName = nodegroupName
            self.releaseVersion = releaseVersion
            self.remoteAccess = remoteAccess
            self.resources = resources
            self.scalingConfig = scalingConfig
            self.status = status
            self.subnets = subnets
            self.tags = tags
            self.taints = taints
            self.updateConfig = updateConfig
            self.version = version
        }
    }
}

public struct CreateNodegroupOutput: Swift.Sendable {
    /// The full description of your new node group.
    public var nodegroup: EKSClientTypes.Nodegroup?

    public init(
        nodegroup: EKSClientTypes.Nodegroup? = nil
    )
    {
        self.nodegroup = nodegroup
    }
}

public struct CreatePodIdentityAssociationInput: Swift.Sendable {
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    public var clientRequestToken: Swift.String?
    /// The name of the cluster to create the association in.
    /// This member is required.
    public var clusterName: Swift.String?
    /// The name of the Kubernetes namespace inside the cluster to create the association in. The service account and the pods that use the service account must be in this namespace.
    /// This member is required.
    public var namespace: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM role to associate with the service account. The EKS Pod Identity agent manages credentials to assume this role for applications in the containers in the pods that use this service account.
    /// This member is required.
    public var roleArn: Swift.String?
    /// The name of the Kubernetes service account inside the cluster to associate the IAM credentials with.
    /// This member is required.
    public var serviceAccount: Swift.String?
    /// Metadata that assists with categorization and organization. Each tag consists of a key and an optional value. You define both. Tags don't propagate to any other cluster or Amazon Web Services resources. The following basic restrictions apply to tags:
    ///
    /// * Maximum number of tags per resource – 50
    ///
    /// * For each resource, each tag key must be unique, and each tag key can have only one value.
    ///
    /// * Maximum key length – 128 Unicode characters in UTF-8
    ///
    /// * Maximum value length – 256 Unicode characters in UTF-8
    ///
    /// * If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
    ///
    /// * Tag keys and values are case-sensitive.
    ///
    /// * Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
    public var tags: [Swift.String: Swift.String]?

    public init(
        clientRequestToken: Swift.String? = nil,
        clusterName: Swift.String? = nil,
        namespace: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        serviceAccount: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.clusterName = clusterName
        self.namespace = namespace
        self.roleArn = roleArn
        self.serviceAccount = serviceAccount
        self.tags = tags
    }
}

extension EKSClientTypes {

    /// Amazon EKS Pod Identity associations provide the ability to manage credentials for your applications, similar to the way that Amazon EC2 instance profiles provide credentials to Amazon EC2 instances.
    public struct PodIdentityAssociation: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the association.
        public var associationArn: Swift.String?
        /// The ID of the association.
        public var associationId: Swift.String?
        /// The name of the cluster that the association is in.
        public var clusterName: Swift.String?
        /// The timestamp that the association was created at.
        public var createdAt: Foundation.Date?
        /// The most recent timestamp that the association was modified at
        public var modifiedAt: Foundation.Date?
        /// The name of the Kubernetes namespace inside the cluster to create the association in. The service account and the pods that use the service account must be in this namespace.
        public var namespace: Swift.String?
        /// If defined, the Pod Identity Association is owned by an Amazon EKS Addon.
        public var ownerArn: Swift.String?
        /// The Amazon Resource Name (ARN) of the IAM role to associate with the service account. The EKS Pod Identity agent manages credentials to assume this role for applications in the containers in the pods that use this service account.
        public var roleArn: Swift.String?
        /// The name of the Kubernetes service account inside the cluster to associate the IAM credentials with.
        public var serviceAccount: Swift.String?
        /// Metadata that assists with categorization and organization. Each tag consists of a key and an optional value. You define both. Tags don't propagate to any other cluster or Amazon Web Services resources. The following basic restrictions apply to tags:
        ///
        /// * Maximum number of tags per resource – 50
        ///
        /// * For each resource, each tag key must be unique, and each tag key can have only one value.
        ///
        /// * Maximum key length – 128 Unicode characters in UTF-8
        ///
        /// * Maximum value length – 256 Unicode characters in UTF-8
        ///
        /// * If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
        ///
        /// * Tag keys and values are case-sensitive.
        ///
        /// * Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
        public var tags: [Swift.String: Swift.String]?

        public init(
            associationArn: Swift.String? = nil,
            associationId: Swift.String? = nil,
            clusterName: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            modifiedAt: Foundation.Date? = nil,
            namespace: Swift.String? = nil,
            ownerArn: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            serviceAccount: Swift.String? = nil,
            tags: [Swift.String: Swift.String]? = nil
        )
        {
            self.associationArn = associationArn
            self.associationId = associationId
            self.clusterName = clusterName
            self.createdAt = createdAt
            self.modifiedAt = modifiedAt
            self.namespace = namespace
            self.ownerArn = ownerArn
            self.roleArn = roleArn
            self.serviceAccount = serviceAccount
            self.tags = tags
        }
    }
}

public struct CreatePodIdentityAssociationOutput: Swift.Sendable {
    /// The full description of your new association. The description includes an ID for the association. Use the ID of the association in further actions to manage the association.
    public var association: EKSClientTypes.PodIdentityAssociation?

    public init(
        association: EKSClientTypes.PodIdentityAssociation? = nil
    )
    {
        self.association = association
    }
}

public struct DeleteAccessEntryInput: Swift.Sendable {
    /// The name of your cluster.
    /// This member is required.
    public var clusterName: Swift.String?
    /// The ARN of the IAM principal for the AccessEntry.
    /// This member is required.
    public var principalArn: Swift.String?

    public init(
        clusterName: Swift.String? = nil,
        principalArn: Swift.String? = nil
    )
    {
        self.clusterName = clusterName
        self.principalArn = principalArn
    }
}

public struct DeleteAccessEntryOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteAddonInput: Swift.Sendable {
    /// The name of the add-on. The name must match one of the names returned by [ListAddons](https://docs.aws.amazon.com/eks/latest/APIReference/API_ListAddons.html).
    /// This member is required.
    public var addonName: Swift.String?
    /// The name of your cluster.
    /// This member is required.
    public var clusterName: Swift.String?
    /// Specifying this option preserves the add-on software on your cluster but Amazon EKS stops managing any settings for the add-on. If an IAM account is associated with the add-on, it isn't removed.
    public var preserve: Swift.Bool?

    public init(
        addonName: Swift.String? = nil,
        clusterName: Swift.String? = nil,
        preserve: Swift.Bool? = false
    )
    {
        self.addonName = addonName
        self.clusterName = clusterName
        self.preserve = preserve
    }
}

public struct DeleteAddonOutput: Swift.Sendable {
    /// An Amazon EKS add-on. For more information, see [Amazon EKS add-ons](https://docs.aws.amazon.com/eks/latest/userguide/eks-add-ons.html) in the Amazon EKS User Guide.
    public var addon: EKSClientTypes.Addon?

    public init(
        addon: EKSClientTypes.Addon? = nil
    )
    {
        self.addon = addon
    }
}

public struct DeleteClusterInput: Swift.Sendable {
    /// The name of the cluster to delete.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct DeleteClusterOutput: Swift.Sendable {
    /// The full description of the cluster to delete.
    public var cluster: EKSClientTypes.Cluster?

    public init(
        cluster: EKSClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

public struct DeleteEksAnywhereSubscriptionInput: Swift.Sendable {
    /// The ID of the subscription.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

public struct DeleteEksAnywhereSubscriptionOutput: Swift.Sendable {
    /// The full description of the subscription to be deleted.
    public var subscription: EKSClientTypes.EksAnywhereSubscription?

    public init(
        subscription: EKSClientTypes.EksAnywhereSubscription? = nil
    )
    {
        self.subscription = subscription
    }
}

public struct DeleteFargateProfileInput: Swift.Sendable {
    /// The name of your cluster.
    /// This member is required.
    public var clusterName: Swift.String?
    /// The name of the Fargate profile to delete.
    /// This member is required.
    public var fargateProfileName: Swift.String?

    public init(
        clusterName: Swift.String? = nil,
        fargateProfileName: Swift.String? = nil
    )
    {
        self.clusterName = clusterName
        self.fargateProfileName = fargateProfileName
    }
}

public struct DeleteFargateProfileOutput: Swift.Sendable {
    /// The deleted Fargate profile.
    public var fargateProfile: EKSClientTypes.FargateProfile?

    public init(
        fargateProfile: EKSClientTypes.FargateProfile? = nil
    )
    {
        self.fargateProfile = fargateProfile
    }
}

public struct DeleteNodegroupInput: Swift.Sendable {
    /// The name of your cluster.
    /// This member is required.
    public var clusterName: Swift.String?
    /// The name of the node group to delete.
    /// This member is required.
    public var nodegroupName: Swift.String?

    public init(
        clusterName: Swift.String? = nil,
        nodegroupName: Swift.String? = nil
    )
    {
        self.clusterName = clusterName
        self.nodegroupName = nodegroupName
    }
}

public struct DeleteNodegroupOutput: Swift.Sendable {
    /// The full description of your deleted node group.
    public var nodegroup: EKSClientTypes.Nodegroup?

    public init(
        nodegroup: EKSClientTypes.Nodegroup? = nil
    )
    {
        self.nodegroup = nodegroup
    }
}

public struct DeletePodIdentityAssociationInput: Swift.Sendable {
    /// The ID of the association to be deleted.
    /// This member is required.
    public var associationId: Swift.String?
    /// The cluster name that
    /// This member is required.
    public var clusterName: Swift.String?

    public init(
        associationId: Swift.String? = nil,
        clusterName: Swift.String? = nil
    )
    {
        self.associationId = associationId
        self.clusterName = clusterName
    }
}

public struct DeletePodIdentityAssociationOutput: Swift.Sendable {
    /// The full description of the EKS Pod Identity association that was deleted.
    public var association: EKSClientTypes.PodIdentityAssociation?

    public init(
        association: EKSClientTypes.PodIdentityAssociation? = nil
    )
    {
        self.association = association
    }
}

public struct DeregisterClusterInput: Swift.Sendable {
    /// The name of the connected cluster to deregister.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct DeregisterClusterOutput: Swift.Sendable {
    /// An object representing an Amazon EKS cluster.
    public var cluster: EKSClientTypes.Cluster?

    public init(
        cluster: EKSClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

public struct DescribeAccessEntryInput: Swift.Sendable {
    /// The name of your cluster.
    /// This member is required.
    public var clusterName: Swift.String?
    /// The ARN of the IAM principal for the AccessEntry.
    /// This member is required.
    public var principalArn: Swift.String?

    public init(
        clusterName: Swift.String? = nil,
        principalArn: Swift.String? = nil
    )
    {
        self.clusterName = clusterName
        self.principalArn = principalArn
    }
}

public struct DescribeAccessEntryOutput: Swift.Sendable {
    /// Information about the access entry.
    public var accessEntry: EKSClientTypes.AccessEntry?

    public init(
        accessEntry: EKSClientTypes.AccessEntry? = nil
    )
    {
        self.accessEntry = accessEntry
    }
}

public struct DescribeAddonInput: Swift.Sendable {
    /// The name of the add-on. The name must match one of the names returned by [ListAddons](https://docs.aws.amazon.com/eks/latest/APIReference/API_ListAddons.html).
    /// This member is required.
    public var addonName: Swift.String?
    /// The name of your cluster.
    /// This member is required.
    public var clusterName: Swift.String?

    public init(
        addonName: Swift.String? = nil,
        clusterName: Swift.String? = nil
    )
    {
        self.addonName = addonName
        self.clusterName = clusterName
    }
}

public struct DescribeAddonOutput: Swift.Sendable {
    /// An Amazon EKS add-on. For more information, see [Amazon EKS add-ons](https://docs.aws.amazon.com/eks/latest/userguide/eks-add-ons.html) in the Amazon EKS User Guide.
    public var addon: EKSClientTypes.Addon?

    public init(
        addon: EKSClientTypes.Addon? = nil
    )
    {
        self.addon = addon
    }
}

public struct DescribeAddonConfigurationInput: Swift.Sendable {
    /// The name of the add-on. The name must match one of the names returned by DescribeAddonVersions.
    /// This member is required.
    public var addonName: Swift.String?
    /// The version of the add-on. The version must match one of the versions returned by [DescribeAddonVersions](https://docs.aws.amazon.com/eks/latest/APIReference/API_DescribeAddonVersions.html).
    /// This member is required.
    public var addonVersion: Swift.String?

    public init(
        addonName: Swift.String? = nil,
        addonVersion: Swift.String? = nil
    )
    {
        self.addonName = addonName
        self.addonVersion = addonVersion
    }
}

public struct DescribeAddonConfigurationOutput: Swift.Sendable {
    /// The name of the add-on.
    public var addonName: Swift.String?
    /// The version of the add-on. The version must match one of the versions returned by [DescribeAddonVersions](https://docs.aws.amazon.com/eks/latest/APIReference/API_DescribeAddonVersions.html).
    public var addonVersion: Swift.String?
    /// A JSON schema that's used to validate the configuration values you provide when an add-on is created or updated.
    public var configurationSchema: Swift.String?
    /// The Kubernetes service account name used by the addon, and any suggested IAM policies. Use this information to create an IAM Role for the Addon.
    public var podIdentityConfiguration: [EKSClientTypes.AddonPodIdentityConfiguration]?

    public init(
        addonName: Swift.String? = nil,
        addonVersion: Swift.String? = nil,
        configurationSchema: Swift.String? = nil,
        podIdentityConfiguration: [EKSClientTypes.AddonPodIdentityConfiguration]? = nil
    )
    {
        self.addonName = addonName
        self.addonVersion = addonVersion
        self.configurationSchema = configurationSchema
        self.podIdentityConfiguration = podIdentityConfiguration
    }
}

public struct DescribeAddonVersionsInput: Swift.Sendable {
    /// The name of the add-on. The name must match one of the names returned by [ListAddons](https://docs.aws.amazon.com/eks/latest/APIReference/API_ListAddons.html).
    public var addonName: Swift.String?
    /// The Kubernetes versions that you can use the add-on with.
    public var kubernetesVersion: Swift.String?
    /// The maximum number of results, returned in paginated output. You receive maxResults in a single page, along with a nextToken response element. You can see the remaining results of the initial request by sending another request with the returned nextToken value. This value can be between 1 and 100. If you don't use this parameter, 100 results and a nextToken value, if applicable, are returned.
    public var maxResults: Swift.Int?
    /// The nextToken value returned from a previous paginated request, where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return. This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?
    /// The owner of the add-on. For valid owners, don't specify a value for this property.
    public var owners: [Swift.String]?
    /// The publisher of the add-on. For valid publishers, don't specify a value for this property.
    public var publishers: [Swift.String]?
    /// The type of the add-on. For valid types, don't specify a value for this property.
    public var types: [Swift.String]?

    public init(
        addonName: Swift.String? = nil,
        kubernetesVersion: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        owners: [Swift.String]? = nil,
        publishers: [Swift.String]? = nil,
        types: [Swift.String]? = nil
    )
    {
        self.addonName = addonName
        self.kubernetesVersion = kubernetesVersion
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.owners = owners
        self.publishers = publishers
        self.types = types
    }
}

public struct DescribeAddonVersionsOutput: Swift.Sendable {
    /// The list of available versions with Kubernetes version compatibility and other properties.
    public var addons: [EKSClientTypes.AddonInfo]?
    /// The nextToken value to include in a future DescribeAddonVersions request. When the results of a DescribeAddonVersions request exceed maxResults, you can use this value to retrieve the next page of results. This value is null when there are no more results to return. This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?

    public init(
        addons: [EKSClientTypes.AddonInfo]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.addons = addons
        self.nextToken = nextToken
    }
}

public struct DescribeClusterInput: Swift.Sendable {
    /// The name of your cluster.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct DescribeClusterOutput: Swift.Sendable {
    /// The full description of your specified cluster.
    public var cluster: EKSClientTypes.Cluster?

    public init(
        cluster: EKSClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

public struct DescribeEksAnywhereSubscriptionInput: Swift.Sendable {
    /// The ID of the subscription.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

public struct DescribeEksAnywhereSubscriptionOutput: Swift.Sendable {
    /// The full description of the subscription.
    public var subscription: EKSClientTypes.EksAnywhereSubscription?

    public init(
        subscription: EKSClientTypes.EksAnywhereSubscription? = nil
    )
    {
        self.subscription = subscription
    }
}

public struct DescribeFargateProfileInput: Swift.Sendable {
    /// The name of your cluster.
    /// This member is required.
    public var clusterName: Swift.String?
    /// The name of the Fargate profile to describe.
    /// This member is required.
    public var fargateProfileName: Swift.String?

    public init(
        clusterName: Swift.String? = nil,
        fargateProfileName: Swift.String? = nil
    )
    {
        self.clusterName = clusterName
        self.fargateProfileName = fargateProfileName
    }
}

public struct DescribeFargateProfileOutput: Swift.Sendable {
    /// The full description of your Fargate profile.
    public var fargateProfile: EKSClientTypes.FargateProfile?

    public init(
        fargateProfile: EKSClientTypes.FargateProfile? = nil
    )
    {
        self.fargateProfile = fargateProfile
    }
}

extension EKSClientTypes {

    /// An object representing an identity provider configuration.
    public struct IdentityProviderConfig: Swift.Sendable {
        /// The name of the identity provider configuration.
        /// This member is required.
        public var name: Swift.String?
        /// The type of the identity provider configuration. The only type available is oidc.
        /// This member is required.
        public var type: Swift.String?

        public init(
            name: Swift.String? = nil,
            type: Swift.String? = nil
        )
        {
            self.name = name
            self.type = type
        }
    }
}

public struct DescribeIdentityProviderConfigInput: Swift.Sendable {
    /// The name of your cluster.
    /// This member is required.
    public var clusterName: Swift.String?
    /// An object representing an identity provider configuration.
    /// This member is required.
    public var identityProviderConfig: EKSClientTypes.IdentityProviderConfig?

    public init(
        clusterName: Swift.String? = nil,
        identityProviderConfig: EKSClientTypes.IdentityProviderConfig? = nil
    )
    {
        self.clusterName = clusterName
        self.identityProviderConfig = identityProviderConfig
    }
}

extension EKSClientTypes {

    public enum ConfigStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case creating
        case deleting
        case sdkUnknown(Swift.String)

        public static var allCases: [ConfigStatus] {
            return [
                .active,
                .creating,
                .deleting
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EKSClientTypes {

    /// An object representing the configuration for an OpenID Connect (OIDC) identity provider.
    public struct OidcIdentityProviderConfig: Swift.Sendable {
        /// This is also known as audience. The ID of the client application that makes authentication requests to the OIDC identity provider.
        public var clientId: Swift.String?
        /// The name of your cluster.
        public var clusterName: Swift.String?
        /// The JSON web token (JWT) claim that the provider uses to return your groups.
        public var groupsClaim: Swift.String?
        /// The prefix that is prepended to group claims to prevent clashes with existing names (such as system: groups). For example, the value oidc: creates group names like oidc:engineering and oidc:infra. The prefix can't contain system:
        public var groupsPrefix: Swift.String?
        /// The ARN of the configuration.
        public var identityProviderConfigArn: Swift.String?
        /// The name of the configuration.
        public var identityProviderConfigName: Swift.String?
        /// The URL of the OIDC identity provider that allows the API server to discover public signing keys for verifying tokens.
        public var issuerUrl: Swift.String?
        /// The key-value pairs that describe required claims in the identity token. If set, each claim is verified to be present in the token with a matching value.
        public var requiredClaims: [Swift.String: Swift.String]?
        /// The status of the OIDC identity provider.
        public var status: EKSClientTypes.ConfigStatus?
        /// Metadata that assists with categorization and organization. Each tag consists of a key and an optional value. You define both. Tags don't propagate to any other cluster or Amazon Web Services resources.
        public var tags: [Swift.String: Swift.String]?
        /// The JSON Web token (JWT) claim that is used as the username.
        public var usernameClaim: Swift.String?
        /// The prefix that is prepended to username claims to prevent clashes with existing names. The prefix can't contain system:
        public var usernamePrefix: Swift.String?

        public init(
            clientId: Swift.String? = nil,
            clusterName: Swift.String? = nil,
            groupsClaim: Swift.String? = nil,
            groupsPrefix: Swift.String? = nil,
            identityProviderConfigArn: Swift.String? = nil,
            identityProviderConfigName: Swift.String? = nil,
            issuerUrl: Swift.String? = nil,
            requiredClaims: [Swift.String: Swift.String]? = nil,
            status: EKSClientTypes.ConfigStatus? = nil,
            tags: [Swift.String: Swift.String]? = nil,
            usernameClaim: Swift.String? = nil,
            usernamePrefix: Swift.String? = nil
        )
        {
            self.clientId = clientId
            self.clusterName = clusterName
            self.groupsClaim = groupsClaim
            self.groupsPrefix = groupsPrefix
            self.identityProviderConfigArn = identityProviderConfigArn
            self.identityProviderConfigName = identityProviderConfigName
            self.issuerUrl = issuerUrl
            self.requiredClaims = requiredClaims
            self.status = status
            self.tags = tags
            self.usernameClaim = usernameClaim
            self.usernamePrefix = usernamePrefix
        }
    }
}

extension EKSClientTypes {

    /// The full description of your identity configuration.
    public struct IdentityProviderConfigResponse: Swift.Sendable {
        /// An object representing an OpenID Connect (OIDC) identity provider configuration.
        public var oidc: EKSClientTypes.OidcIdentityProviderConfig?

        public init(
            oidc: EKSClientTypes.OidcIdentityProviderConfig? = nil
        )
        {
            self.oidc = oidc
        }
    }
}

public struct DescribeIdentityProviderConfigOutput: Swift.Sendable {
    /// The object that represents an OpenID Connect (OIDC) identity provider configuration.
    public var identityProviderConfig: EKSClientTypes.IdentityProviderConfigResponse?

    public init(
        identityProviderConfig: EKSClientTypes.IdentityProviderConfigResponse? = nil
    )
    {
        self.identityProviderConfig = identityProviderConfig
    }
}

public struct DescribeInsightInput: Swift.Sendable {
    /// The name of the cluster to describe the insight for.
    /// This member is required.
    public var clusterName: Swift.String?
    /// The identity of the insight to describe.
    /// This member is required.
    public var id: Swift.String?

    public init(
        clusterName: Swift.String? = nil,
        id: Swift.String? = nil
    )
    {
        self.clusterName = clusterName
        self.id = id
    }
}

extension EKSClientTypes {

    public enum Category: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case upgradeReadiness
        case sdkUnknown(Swift.String)

        public static var allCases: [Category] {
            return [
                .upgradeReadiness
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .upgradeReadiness: return "UPGRADE_READINESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EKSClientTypes {

    /// Details about clients using the deprecated resources.
    public struct ClientStat: Swift.Sendable {
        /// The timestamp of the last request seen from the Kubernetes client.
        public var lastRequestTime: Foundation.Date?
        /// The number of requests from the Kubernetes client seen over the last 30 days.
        public var numberOfRequestsLast30Days: Swift.Int
        /// The user agent of the Kubernetes client using the deprecated resource.
        public var userAgent: Swift.String?

        public init(
            lastRequestTime: Foundation.Date? = nil,
            numberOfRequestsLast30Days: Swift.Int = 0,
            userAgent: Swift.String? = nil
        )
        {
            self.lastRequestTime = lastRequestTime
            self.numberOfRequestsLast30Days = numberOfRequestsLast30Days
            self.userAgent = userAgent
        }
    }
}

extension EKSClientTypes {

    /// The summary information about deprecated resource usage for an insight check in the UPGRADE_READINESS category.
    public struct DeprecationDetail: Swift.Sendable {
        /// Details about Kubernetes clients using the deprecated resources.
        public var clientStats: [EKSClientTypes.ClientStat]?
        /// The newer version of the resource to migrate to if applicable.
        public var replacedWith: Swift.String?
        /// The version of the software where the newer resource version became available to migrate to if applicable.
        public var startServingReplacementVersion: Swift.String?
        /// The version of the software where the deprecated resource version will stop being served.
        public var stopServingVersion: Swift.String?
        /// The deprecated version of the resource.
        public var usage: Swift.String?

        public init(
            clientStats: [EKSClientTypes.ClientStat]? = nil,
            replacedWith: Swift.String? = nil,
            startServingReplacementVersion: Swift.String? = nil,
            stopServingVersion: Swift.String? = nil,
            usage: Swift.String? = nil
        )
        {
            self.clientStats = clientStats
            self.replacedWith = replacedWith
            self.startServingReplacementVersion = startServingReplacementVersion
            self.stopServingVersion = stopServingVersion
            self.usage = usage
        }
    }
}

extension EKSClientTypes {

    /// Summary information that relates to the category of the insight. Currently only returned with certain insights having category UPGRADE_READINESS.
    public struct InsightCategorySpecificSummary: Swift.Sendable {
        /// The summary information about deprecated resource usage for an insight check in the UPGRADE_READINESS category.
        public var deprecationDetails: [EKSClientTypes.DeprecationDetail]?

        public init(
            deprecationDetails: [EKSClientTypes.DeprecationDetail]? = nil
        )
        {
            self.deprecationDetails = deprecationDetails
        }
    }
}

extension EKSClientTypes {

    public enum InsightStatusValue: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case error
        case passing
        case unknown
        case warning
        case sdkUnknown(Swift.String)

        public static var allCases: [InsightStatusValue] {
            return [
                .error,
                .passing,
                .unknown,
                .warning
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .error: return "ERROR"
            case .passing: return "PASSING"
            case .unknown: return "UNKNOWN"
            case .warning: return "WARNING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EKSClientTypes {

    /// The status of the insight.
    public struct InsightStatus: Swift.Sendable {
        /// Explanation on the reasoning for the status of the resource.
        public var reason: Swift.String?
        /// The status of the resource.
        public var status: EKSClientTypes.InsightStatusValue?

        public init(
            reason: Swift.String? = nil,
            status: EKSClientTypes.InsightStatusValue? = nil
        )
        {
            self.reason = reason
            self.status = status
        }
    }
}

extension EKSClientTypes {

    /// Returns information about the resource being evaluated.
    public struct InsightResourceDetail: Swift.Sendable {
        /// The Amazon Resource Name (ARN) if applicable.
        public var arn: Swift.String?
        /// An object containing more detail on the status of the insight resource.
        public var insightStatus: EKSClientTypes.InsightStatus?
        /// The Kubernetes resource URI if applicable.
        public var kubernetesResourceUri: Swift.String?

        public init(
            arn: Swift.String? = nil,
            insightStatus: EKSClientTypes.InsightStatus? = nil,
            kubernetesResourceUri: Swift.String? = nil
        )
        {
            self.arn = arn
            self.insightStatus = insightStatus
            self.kubernetesResourceUri = kubernetesResourceUri
        }
    }
}

extension EKSClientTypes {

    /// A check that provides recommendations to remedy potential upgrade-impacting issues.
    public struct Insight: Swift.Sendable {
        /// Links to sources that provide additional context on the insight.
        public var additionalInfo: [Swift.String: Swift.String]?
        /// The category of the insight.
        public var category: EKSClientTypes.Category?
        /// Summary information that relates to the category of the insight. Currently only returned with certain insights having category UPGRADE_READINESS.
        public var categorySpecificSummary: EKSClientTypes.InsightCategorySpecificSummary?
        /// The description of the insight which includes alert criteria, remediation recommendation, and additional resources (contains Markdown).
        public var description: Swift.String?
        /// The ID of the insight.
        public var id: Swift.String?
        /// An object containing more detail on the status of the insight resource.
        public var insightStatus: EKSClientTypes.InsightStatus?
        /// The Kubernetes minor version associated with an insight if applicable.
        public var kubernetesVersion: Swift.String?
        /// The time Amazon EKS last successfully completed a refresh of this insight check on the cluster.
        public var lastRefreshTime: Foundation.Date?
        /// The time the status of the insight last changed.
        public var lastTransitionTime: Foundation.Date?
        /// The name of the insight.
        public var name: Swift.String?
        /// A summary of how to remediate the finding of this insight if applicable.
        public var recommendation: Swift.String?
        /// The details about each resource listed in the insight check result.
        public var resources: [EKSClientTypes.InsightResourceDetail]?

        public init(
            additionalInfo: [Swift.String: Swift.String]? = nil,
            category: EKSClientTypes.Category? = nil,
            categorySpecificSummary: EKSClientTypes.InsightCategorySpecificSummary? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            insightStatus: EKSClientTypes.InsightStatus? = nil,
            kubernetesVersion: Swift.String? = nil,
            lastRefreshTime: Foundation.Date? = nil,
            lastTransitionTime: Foundation.Date? = nil,
            name: Swift.String? = nil,
            recommendation: Swift.String? = nil,
            resources: [EKSClientTypes.InsightResourceDetail]? = nil
        )
        {
            self.additionalInfo = additionalInfo
            self.category = category
            self.categorySpecificSummary = categorySpecificSummary
            self.description = description
            self.id = id
            self.insightStatus = insightStatus
            self.kubernetesVersion = kubernetesVersion
            self.lastRefreshTime = lastRefreshTime
            self.lastTransitionTime = lastTransitionTime
            self.name = name
            self.recommendation = recommendation
            self.resources = resources
        }
    }
}

public struct DescribeInsightOutput: Swift.Sendable {
    /// The full description of the insight.
    public var insight: EKSClientTypes.Insight?

    public init(
        insight: EKSClientTypes.Insight? = nil
    )
    {
        self.insight = insight
    }
}

public struct DescribeNodegroupInput: Swift.Sendable {
    /// The name of your cluster.
    /// This member is required.
    public var clusterName: Swift.String?
    /// The name of the node group to describe.
    /// This member is required.
    public var nodegroupName: Swift.String?

    public init(
        clusterName: Swift.String? = nil,
        nodegroupName: Swift.String? = nil
    )
    {
        self.clusterName = clusterName
        self.nodegroupName = nodegroupName
    }
}

public struct DescribeNodegroupOutput: Swift.Sendable {
    /// The full description of your node group.
    public var nodegroup: EKSClientTypes.Nodegroup?

    public init(
        nodegroup: EKSClientTypes.Nodegroup? = nil
    )
    {
        self.nodegroup = nodegroup
    }
}

public struct DescribePodIdentityAssociationInput: Swift.Sendable {
    /// The ID of the association that you want the description of.
    /// This member is required.
    public var associationId: Swift.String?
    /// The name of the cluster that the association is in.
    /// This member is required.
    public var clusterName: Swift.String?

    public init(
        associationId: Swift.String? = nil,
        clusterName: Swift.String? = nil
    )
    {
        self.associationId = associationId
        self.clusterName = clusterName
    }
}

public struct DescribePodIdentityAssociationOutput: Swift.Sendable {
    /// The full description of the EKS Pod Identity association.
    public var association: EKSClientTypes.PodIdentityAssociation?

    public init(
        association: EKSClientTypes.PodIdentityAssociation? = nil
    )
    {
        self.association = association
    }
}

/// Describes an update request.
public struct DescribeUpdateInput: Swift.Sendable {
    /// The name of the add-on. The name must match one of the names returned by [ListAddons](https://docs.aws.amazon.com/eks/latest/APIReference/API_ListAddons.html). This parameter is required if the update is an add-on update.
    public var addonName: Swift.String?
    /// The name of the Amazon EKS cluster associated with the update.
    /// This member is required.
    public var name: Swift.String?
    /// The name of the Amazon EKS node group associated with the update. This parameter is required if the update is a node group update.
    public var nodegroupName: Swift.String?
    /// The ID of the update to describe.
    /// This member is required.
    public var updateId: Swift.String?

    public init(
        addonName: Swift.String? = nil,
        name: Swift.String? = nil,
        nodegroupName: Swift.String? = nil,
        updateId: Swift.String? = nil
    )
    {
        self.addonName = addonName
        self.name = name
        self.nodegroupName = nodegroupName
        self.updateId = updateId
    }
}

public struct DescribeUpdateOutput: Swift.Sendable {
    /// The full description of the specified update.
    public var update: EKSClientTypes.Update?

    public init(
        update: EKSClientTypes.Update? = nil
    )
    {
        self.update = update
    }
}

public struct DisassociateAccessPolicyInput: Swift.Sendable {
    /// The name of your cluster.
    /// This member is required.
    public var clusterName: Swift.String?
    /// The ARN of the policy to disassociate from the access entry. For a list of associated policies ARNs, use ListAssociatedAccessPolicies.
    /// This member is required.
    public var policyArn: Swift.String?
    /// The ARN of the IAM principal for the AccessEntry.
    /// This member is required.
    public var principalArn: Swift.String?

    public init(
        clusterName: Swift.String? = nil,
        policyArn: Swift.String? = nil,
        principalArn: Swift.String? = nil
    )
    {
        self.clusterName = clusterName
        self.policyArn = policyArn
        self.principalArn = principalArn
    }
}

public struct DisassociateAccessPolicyOutput: Swift.Sendable {

    public init() { }
}

public struct DisassociateIdentityProviderConfigInput: Swift.Sendable {
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    public var clientRequestToken: Swift.String?
    /// The name of your cluster.
    /// This member is required.
    public var clusterName: Swift.String?
    /// An object representing an identity provider configuration.
    /// This member is required.
    public var identityProviderConfig: EKSClientTypes.IdentityProviderConfig?

    public init(
        clientRequestToken: Swift.String? = nil,
        clusterName: Swift.String? = nil,
        identityProviderConfig: EKSClientTypes.IdentityProviderConfig? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.clusterName = clusterName
        self.identityProviderConfig = identityProviderConfig
    }
}

public struct DisassociateIdentityProviderConfigOutput: Swift.Sendable {
    /// An object representing an asynchronous update.
    public var update: EKSClientTypes.Update?

    public init(
        update: EKSClientTypes.Update? = nil
    )
    {
        self.update = update
    }
}

public struct ListAccessEntriesInput: Swift.Sendable {
    /// The ARN of an AccessPolicy. When you specify an access policy ARN, only the access entries associated to that access policy are returned. For a list of available policy ARNs, use ListAccessPolicies.
    public var associatedPolicyArn: Swift.String?
    /// The name of your cluster.
    /// This member is required.
    public var clusterName: Swift.String?
    /// The maximum number of results, returned in paginated output. You receive maxResults in a single page, along with a nextToken response element. You can see the remaining results of the initial request by sending another request with the returned nextToken value. This value can be between 1 and 100. If you don't use this parameter, 100 results and a nextToken value, if applicable, are returned.
    public var maxResults: Swift.Int?
    /// The nextToken value returned from a previous paginated request, where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return. This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?

    public init(
        associatedPolicyArn: Swift.String? = nil,
        clusterName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.associatedPolicyArn = associatedPolicyArn
        self.clusterName = clusterName
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListAccessEntriesOutput: Swift.Sendable {
    /// The list of access entries that exist for the cluster.
    public var accessEntries: [Swift.String]?
    /// The nextToken value returned from a previous paginated request, where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return. This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?

    public init(
        accessEntries: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.accessEntries = accessEntries
        self.nextToken = nextToken
    }
}

public struct ListAccessPoliciesInput: Swift.Sendable {
    /// The maximum number of results, returned in paginated output. You receive maxResults in a single page, along with a nextToken response element. You can see the remaining results of the initial request by sending another request with the returned nextToken value. This value can be between 1 and 100. If you don't use this parameter, 100 results and a nextToken value, if applicable, are returned.
    public var maxResults: Swift.Int?
    /// The nextToken value returned from a previous paginated request, where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return. This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListAccessPoliciesOutput: Swift.Sendable {
    /// The list of available access policies. You can't view the contents of an access policy using the API. To view the contents, see [Access policy permissions](https://docs.aws.amazon.com/eks/latest/userguide/access-policies.html#access-policy-permissions) in the Amazon EKS User Guide.
    public var accessPolicies: [EKSClientTypes.AccessPolicy]?
    /// The nextToken value returned from a previous paginated request, where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return. This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?

    public init(
        accessPolicies: [EKSClientTypes.AccessPolicy]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.accessPolicies = accessPolicies
        self.nextToken = nextToken
    }
}

public struct ListAddonsInput: Swift.Sendable {
    /// The name of your cluster.
    /// This member is required.
    public var clusterName: Swift.String?
    /// The maximum number of results, returned in paginated output. You receive maxResults in a single page, along with a nextToken response element. You can see the remaining results of the initial request by sending another request with the returned nextToken value. This value can be between 1 and 100. If you don't use this parameter, 100 results and a nextToken value, if applicable, are returned.
    public var maxResults: Swift.Int?
    /// The nextToken value returned from a previous paginated request, where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return. This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?

    public init(
        clusterName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.clusterName = clusterName
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListAddonsOutput: Swift.Sendable {
    /// A list of installed add-ons.
    public var addons: [Swift.String]?
    /// The nextToken value to include in a future ListAddons request. When the results of a ListAddons request exceed maxResults, you can use this value to retrieve the next page of results. This value is null when there are no more results to return. This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?

    public init(
        addons: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.addons = addons
        self.nextToken = nextToken
    }
}

public struct ListAssociatedAccessPoliciesInput: Swift.Sendable {
    /// The name of your cluster.
    /// This member is required.
    public var clusterName: Swift.String?
    /// The maximum number of results, returned in paginated output. You receive maxResults in a single page, along with a nextToken response element. You can see the remaining results of the initial request by sending another request with the returned nextToken value. This value can be between 1 and 100. If you don't use this parameter, 100 results and a nextToken value, if applicable, are returned.
    public var maxResults: Swift.Int?
    /// The nextToken value returned from a previous paginated request, where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return. This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?
    /// The ARN of the IAM principal for the AccessEntry.
    /// This member is required.
    public var principalArn: Swift.String?

    public init(
        clusterName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        principalArn: Swift.String? = nil
    )
    {
        self.clusterName = clusterName
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.principalArn = principalArn
    }
}

public struct ListAssociatedAccessPoliciesOutput: Swift.Sendable {
    /// The list of access policies associated with the access entry.
    public var associatedAccessPolicies: [EKSClientTypes.AssociatedAccessPolicy]?
    /// The name of your cluster.
    public var clusterName: Swift.String?
    /// The nextToken value returned from a previous paginated request, where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return. This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?
    /// The ARN of the IAM principal for the AccessEntry.
    public var principalArn: Swift.String?

    public init(
        associatedAccessPolicies: [EKSClientTypes.AssociatedAccessPolicy]? = nil,
        clusterName: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        principalArn: Swift.String? = nil
    )
    {
        self.associatedAccessPolicies = associatedAccessPolicies
        self.clusterName = clusterName
        self.nextToken = nextToken
        self.principalArn = principalArn
    }
}

public struct ListClustersInput: Swift.Sendable {
    /// Indicates whether external clusters are included in the returned list. Use 'all' to return [https://docs.aws.amazon.com/eks/latest/userguide/eks-connector.html](https://docs.aws.amazon.com/eks/latest/userguide/eks-connector.html)connected clusters, or blank to return only Amazon EKS clusters. 'all' must be in lowercase otherwise an error occurs.
    public var include: [Swift.String]?
    /// The maximum number of results, returned in paginated output. You receive maxResults in a single page, along with a nextToken response element. You can see the remaining results of the initial request by sending another request with the returned nextToken value. This value can be between 1 and 100. If you don't use this parameter, 100 results and a nextToken value, if applicable, are returned.
    public var maxResults: Swift.Int?
    /// The nextToken value returned from a previous paginated request, where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return. This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?

    public init(
        include: [Swift.String]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.include = include
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListClustersOutput: Swift.Sendable {
    /// A list of all of the clusters for your account in the specified Amazon Web Services Region.
    public var clusters: [Swift.String]?
    /// The nextToken value returned from a previous paginated request, where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return. This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?

    public init(
        clusters: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.clusters = clusters
        self.nextToken = nextToken
    }
}

extension EKSClientTypes {

    public enum EksAnywhereSubscriptionStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case creating
        case deleting
        case expired
        case expiring
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [EksAnywhereSubscriptionStatus] {
            return [
                .active,
                .creating,
                .deleting,
                .expired,
                .expiring,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .expired: return "EXPIRED"
            case .expiring: return "EXPIRING"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListEksAnywhereSubscriptionsInput: Swift.Sendable {
    /// An array of subscription statuses to filter on.
    public var includeStatus: [EKSClientTypes.EksAnywhereSubscriptionStatus]?
    /// The maximum number of cluster results returned by ListEksAnywhereSubscriptions in paginated output. When you use this parameter, ListEksAnywhereSubscriptions returns only maxResults results in a single page along with a nextToken response element. You can see the remaining results of the initial request by sending another ListEksAnywhereSubscriptions request with the returned nextToken value. This value can be between 1 and 100. If you don't use this parameter, ListEksAnywhereSubscriptions returns up to 10 results and a nextToken value if applicable.
    public var maxResults: Swift.Int?
    /// The nextToken value returned from a previous paginated ListEksAnywhereSubscriptions request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value.
    public var nextToken: Swift.String?

    public init(
        includeStatus: [EKSClientTypes.EksAnywhereSubscriptionStatus]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.includeStatus = includeStatus
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListEksAnywhereSubscriptionsOutput: Swift.Sendable {
    /// The nextToken value to include in a future ListEksAnywhereSubscriptions request. When the results of a ListEksAnywhereSubscriptions request exceed maxResults, you can use this value to retrieve the next page of results. This value is null when there are no more results to return.
    public var nextToken: Swift.String?
    /// A list of all subscription objects in the region, filtered by includeStatus and paginated by nextToken and maxResults.
    public var subscriptions: [EKSClientTypes.EksAnywhereSubscription]?

    public init(
        nextToken: Swift.String? = nil,
        subscriptions: [EKSClientTypes.EksAnywhereSubscription]? = nil
    )
    {
        self.nextToken = nextToken
        self.subscriptions = subscriptions
    }
}

public struct ListFargateProfilesInput: Swift.Sendable {
    /// The name of your cluster.
    /// This member is required.
    public var clusterName: Swift.String?
    /// The maximum number of results, returned in paginated output. You receive maxResults in a single page, along with a nextToken response element. You can see the remaining results of the initial request by sending another request with the returned nextToken value. This value can be between 1 and 100. If you don't use this parameter, 100 results and a nextToken value, if applicable, are returned.
    public var maxResults: Swift.Int?
    /// The nextToken value returned from a previous paginated request, where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return. This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?

    public init(
        clusterName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.clusterName = clusterName
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListFargateProfilesOutput: Swift.Sendable {
    /// A list of all of the Fargate profiles associated with the specified cluster.
    public var fargateProfileNames: [Swift.String]?
    /// The nextToken value returned from a previous paginated request, where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return. This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?

    public init(
        fargateProfileNames: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.fargateProfileNames = fargateProfileNames
        self.nextToken = nextToken
    }
}

public struct ListIdentityProviderConfigsInput: Swift.Sendable {
    /// The name of your cluster.
    /// This member is required.
    public var clusterName: Swift.String?
    /// The maximum number of results, returned in paginated output. You receive maxResults in a single page, along with a nextToken response element. You can see the remaining results of the initial request by sending another request with the returned nextToken value. This value can be between 1 and 100. If you don't use this parameter, 100 results and a nextToken value, if applicable, are returned.
    public var maxResults: Swift.Int?
    /// The nextToken value returned from a previous paginated request, where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return. This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?

    public init(
        clusterName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.clusterName = clusterName
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListIdentityProviderConfigsOutput: Swift.Sendable {
    /// The identity provider configurations for the cluster.
    public var identityProviderConfigs: [EKSClientTypes.IdentityProviderConfig]?
    /// The nextToken value to include in a future ListIdentityProviderConfigsResponse request. When the results of a ListIdentityProviderConfigsResponse request exceed maxResults, you can use this value to retrieve the next page of results. This value is null when there are no more results to return. This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?

    public init(
        identityProviderConfigs: [EKSClientTypes.IdentityProviderConfig]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.identityProviderConfigs = identityProviderConfigs
        self.nextToken = nextToken
    }
}

extension EKSClientTypes {

    /// The criteria to use for the insights.
    public struct InsightsFilter: Swift.Sendable {
        /// The categories to use to filter insights.
        public var categories: [EKSClientTypes.Category]?
        /// The Kubernetes versions to use to filter the insights.
        public var kubernetesVersions: [Swift.String]?
        /// The statuses to use to filter the insights.
        public var statuses: [EKSClientTypes.InsightStatusValue]?

        public init(
            categories: [EKSClientTypes.Category]? = nil,
            kubernetesVersions: [Swift.String]? = nil,
            statuses: [EKSClientTypes.InsightStatusValue]? = nil
        )
        {
            self.categories = categories
            self.kubernetesVersions = kubernetesVersions
            self.statuses = statuses
        }
    }
}

public struct ListInsightsInput: Swift.Sendable {
    /// The name of the Amazon EKS cluster associated with the insights.
    /// This member is required.
    public var clusterName: Swift.String?
    /// The criteria to filter your list of insights for your cluster. You can filter which insights are returned by category, associated Kubernetes version, and status.
    public var filter: EKSClientTypes.InsightsFilter?
    /// The maximum number of identity provider configurations returned by ListInsights in paginated output. When you use this parameter, ListInsights returns only maxResults results in a single page along with a nextToken response element. You can see the remaining results of the initial request by sending another ListInsights request with the returned nextToken value. This value can be between 1 and 100. If you don't use this parameter, ListInsights returns up to 100 results and a nextToken value, if applicable.
    public var maxResults: Swift.Int?
    /// The nextToken value returned from a previous paginated ListInsights request. When the results of a ListInsights request exceed maxResults, you can use this value to retrieve the next page of results. This value is null when there are no more results to return.
    public var nextToken: Swift.String?

    public init(
        clusterName: Swift.String? = nil,
        filter: EKSClientTypes.InsightsFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.clusterName = clusterName
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension EKSClientTypes {

    /// The summarized description of the insight.
    public struct InsightSummary: Swift.Sendable {
        /// The category of the insight.
        public var category: EKSClientTypes.Category?
        /// The description of the insight which includes alert criteria, remediation recommendation, and additional resources (contains Markdown).
        public var description: Swift.String?
        /// The ID of the insight.
        public var id: Swift.String?
        /// An object containing more detail on the status of the insight.
        public var insightStatus: EKSClientTypes.InsightStatus?
        /// The Kubernetes minor version associated with an insight if applicable.
        public var kubernetesVersion: Swift.String?
        /// The time Amazon EKS last successfully completed a refresh of this insight check on the cluster.
        public var lastRefreshTime: Foundation.Date?
        /// The time the status of the insight last changed.
        public var lastTransitionTime: Foundation.Date?
        /// The name of the insight.
        public var name: Swift.String?

        public init(
            category: EKSClientTypes.Category? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            insightStatus: EKSClientTypes.InsightStatus? = nil,
            kubernetesVersion: Swift.String? = nil,
            lastRefreshTime: Foundation.Date? = nil,
            lastTransitionTime: Foundation.Date? = nil,
            name: Swift.String? = nil
        )
        {
            self.category = category
            self.description = description
            self.id = id
            self.insightStatus = insightStatus
            self.kubernetesVersion = kubernetesVersion
            self.lastRefreshTime = lastRefreshTime
            self.lastTransitionTime = lastTransitionTime
            self.name = name
        }
    }
}

public struct ListInsightsOutput: Swift.Sendable {
    /// The returned list of insights.
    public var insights: [EKSClientTypes.InsightSummary]?
    /// The nextToken value to include in a future ListInsights request. When the results of a ListInsights request exceed maxResults, you can use this value to retrieve the next page of results. This value is null when there are no more results to return.
    public var nextToken: Swift.String?

    public init(
        insights: [EKSClientTypes.InsightSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.insights = insights
        self.nextToken = nextToken
    }
}

public struct ListNodegroupsInput: Swift.Sendable {
    /// The name of your cluster.
    /// This member is required.
    public var clusterName: Swift.String?
    /// The maximum number of results, returned in paginated output. You receive maxResults in a single page, along with a nextToken response element. You can see the remaining results of the initial request by sending another request with the returned nextToken value. This value can be between 1 and 100. If you don't use this parameter, 100 results and a nextToken value, if applicable, are returned.
    public var maxResults: Swift.Int?
    /// The nextToken value returned from a previous paginated request, where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return. This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?

    public init(
        clusterName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.clusterName = clusterName
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListNodegroupsOutput: Swift.Sendable {
    /// The nextToken value returned from a previous paginated request, where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return. This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?
    /// A list of all of the node groups associated with the specified cluster.
    public var nodegroups: [Swift.String]?

    public init(
        nextToken: Swift.String? = nil,
        nodegroups: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.nodegroups = nodegroups
    }
}

public struct ListPodIdentityAssociationsInput: Swift.Sendable {
    /// The name of the cluster that the associations are in.
    /// This member is required.
    public var clusterName: Swift.String?
    /// The maximum number of EKS Pod Identity association results returned by ListPodIdentityAssociations in paginated output. When you use this parameter, ListPodIdentityAssociations returns only maxResults results in a single page along with a nextToken response element. You can see the remaining results of the initial request by sending another ListPodIdentityAssociations request with the returned nextToken value. This value can be between 1 and 100. If you don't use this parameter, ListPodIdentityAssociations returns up to 100 results and a nextToken value if applicable.
    public var maxResults: Swift.Int?
    /// The name of the Kubernetes namespace inside the cluster that the associations are in.
    public var namespace: Swift.String?
    /// The nextToken value returned from a previous paginated ListUpdates request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?
    /// The name of the Kubernetes service account that the associations use.
    public var serviceAccount: Swift.String?

    public init(
        clusterName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        namespace: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        serviceAccount: Swift.String? = nil
    )
    {
        self.clusterName = clusterName
        self.maxResults = maxResults
        self.namespace = namespace
        self.nextToken = nextToken
        self.serviceAccount = serviceAccount
    }
}

extension EKSClientTypes {

    /// The summarized description of the association. Each summary is simplified by removing these fields compared to the full [PodIdentityAssociation]:
    ///
    /// * The IAM role: roleArn
    ///
    /// * The timestamp that the association was created at: createdAt
    ///
    /// * The most recent timestamp that the association was modified at:. modifiedAt
    ///
    /// * The tags on the association: tags
    public struct PodIdentityAssociationSummary: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the association.
        public var associationArn: Swift.String?
        /// The ID of the association.
        public var associationId: Swift.String?
        /// The name of the cluster that the association is in.
        public var clusterName: Swift.String?
        /// The name of the Kubernetes namespace inside the cluster to create the association in. The service account and the pods that use the service account must be in this namespace.
        public var namespace: Swift.String?
        /// If defined, the Pod Identity Association is owned by an Amazon EKS Addon.
        public var ownerArn: Swift.String?
        /// The name of the Kubernetes service account inside the cluster to associate the IAM credentials with.
        public var serviceAccount: Swift.String?

        public init(
            associationArn: Swift.String? = nil,
            associationId: Swift.String? = nil,
            clusterName: Swift.String? = nil,
            namespace: Swift.String? = nil,
            ownerArn: Swift.String? = nil,
            serviceAccount: Swift.String? = nil
        )
        {
            self.associationArn = associationArn
            self.associationId = associationId
            self.clusterName = clusterName
            self.namespace = namespace
            self.ownerArn = ownerArn
            self.serviceAccount = serviceAccount
        }
    }
}

public struct ListPodIdentityAssociationsOutput: Swift.Sendable {
    /// The list of summarized descriptions of the associations that are in the cluster and match any filters that you provided. Each summary is simplified by removing these fields compared to the full [PodIdentityAssociation]:
    ///
    /// * The IAM role: roleArn
    ///
    /// * The timestamp that the association was created at: createdAt
    ///
    /// * The most recent timestamp that the association was modified at:. modifiedAt
    ///
    /// * The tags on the association: tags
    public var associations: [EKSClientTypes.PodIdentityAssociationSummary]?
    /// The nextToken value to include in a future ListPodIdentityAssociations request. When the results of a ListPodIdentityAssociations request exceed maxResults, you can use this value to retrieve the next page of results. This value is null when there are no more results to return. This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?

    public init(
        associations: [EKSClientTypes.PodIdentityAssociationSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.associations = associations
        self.nextToken = nextToken
    }
}

/// This exception is thrown if the request contains a semantic error. The precise meaning will depend on the API, and will be documented in the error message.
public struct BadRequestException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This exception is thrown if the request contains a semantic error. The precise meaning will depend on the API, and will be documented in the error message.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "BadRequestException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// A service resource associated with the request could not be found. Clients should not retry such requests.
public struct NotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A service resource associated with the request could not be found. Clients should not retry such requests.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct ListTagsForResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) that identifies the resource to list tags for.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct ListTagsForResourceOutput: Swift.Sendable {
    /// The tags for the resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

public struct ListUpdatesInput: Swift.Sendable {
    /// The names of the installed add-ons that have available updates.
    public var addonName: Swift.String?
    /// The maximum number of results, returned in paginated output. You receive maxResults in a single page, along with a nextToken response element. You can see the remaining results of the initial request by sending another request with the returned nextToken value. This value can be between 1 and 100. If you don't use this parameter, 100 results and a nextToken value, if applicable, are returned.
    public var maxResults: Swift.Int?
    /// The name of the Amazon EKS cluster to list updates for.
    /// This member is required.
    public var name: Swift.String?
    /// The nextToken value returned from a previous paginated request, where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return. This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?
    /// The name of the Amazon EKS managed node group to list updates for.
    public var nodegroupName: Swift.String?

    public init(
        addonName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        name: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        nodegroupName: Swift.String? = nil
    )
    {
        self.addonName = addonName
        self.maxResults = maxResults
        self.name = name
        self.nextToken = nextToken
        self.nodegroupName = nodegroupName
    }
}

public struct ListUpdatesOutput: Swift.Sendable {
    /// The nextToken value returned from a previous paginated request, where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return. This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?
    /// A list of all the updates for the specified cluster and Region.
    public var updateIds: [Swift.String]?

    public init(
        nextToken: Swift.String? = nil,
        updateIds: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.updateIds = updateIds
    }
}

/// Required resources (such as service-linked roles) were created and are still propagating. Retry later.
public struct ResourcePropagationDelayException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Required resources (such as service-linked roles) were created and are still propagating. Retry later.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourcePropagationDelayException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension EKSClientTypes {

    public enum ConnectorConfigProvider: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case aks
        case anthos
        case ec2
        case eksAnywhere
        case gke
        case openshift
        case other
        case rancher
        case tanzu
        case sdkUnknown(Swift.String)

        public static var allCases: [ConnectorConfigProvider] {
            return [
                .aks,
                .anthos,
                .ec2,
                .eksAnywhere,
                .gke,
                .openshift,
                .other,
                .rancher,
                .tanzu
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .aks: return "AKS"
            case .anthos: return "ANTHOS"
            case .ec2: return "EC2"
            case .eksAnywhere: return "EKS_ANYWHERE"
            case .gke: return "GKE"
            case .openshift: return "OPENSHIFT"
            case .other: return "OTHER"
            case .rancher: return "RANCHER"
            case .tanzu: return "TANZU"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension EKSClientTypes {

    /// The configuration sent to a cluster for configuration.
    public struct ConnectorConfigRequest: Swift.Sendable {
        /// The cloud provider for the target cluster to connect.
        /// This member is required.
        public var provider: EKSClientTypes.ConnectorConfigProvider?
        /// The Amazon Resource Name (ARN) of the role that is authorized to request the connector configuration.
        /// This member is required.
        public var roleArn: Swift.String?

        public init(
            provider: EKSClientTypes.ConnectorConfigProvider? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.provider = provider
            self.roleArn = roleArn
        }
    }
}

public struct RegisterClusterInput: Swift.Sendable {
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    public var clientRequestToken: Swift.String?
    /// The configuration settings required to connect the Kubernetes cluster to the Amazon EKS control plane.
    /// This member is required.
    public var connectorConfig: EKSClientTypes.ConnectorConfigRequest?
    /// A unique name for this cluster in your Amazon Web Services Region.
    /// This member is required.
    public var name: Swift.String?
    /// Metadata that assists with categorization and organization. Each tag consists of a key and an optional value. You define both. Tags don't propagate to any other cluster or Amazon Web Services resources.
    public var tags: [Swift.String: Swift.String]?

    public init(
        clientRequestToken: Swift.String? = nil,
        connectorConfig: EKSClientTypes.ConnectorConfigRequest? = nil,
        name: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.connectorConfig = connectorConfig
        self.name = name
        self.tags = tags
    }
}

public struct RegisterClusterOutput: Swift.Sendable {
    /// An object representing an Amazon EKS cluster.
    public var cluster: EKSClientTypes.Cluster?

    public init(
        cluster: EKSClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

public struct TagResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the resource to add tags to.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// Metadata that assists with categorization and organization. Each tag consists of a key and an optional value. You define both. Tags don't propagate to any other cluster or Amazon Web Services resources.
    /// This member is required.
    public var tags: [Swift.String: Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

public struct TagResourceOutput: Swift.Sendable {

    public init() { }
}

public struct UntagResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the resource to delete tags from.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The keys of the tags to remove.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

public struct UntagResourceOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateAccessEntryInput: Swift.Sendable {
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    public var clientRequestToken: Swift.String?
    /// The name of your cluster.
    /// This member is required.
    public var clusterName: Swift.String?
    /// The value for name that you've specified for kind: Group as a subject in a Kubernetes RoleBinding or ClusterRoleBinding object. Amazon EKS doesn't confirm that the value for name exists in any bindings on your cluster. You can specify one or more names. Kubernetes authorizes the principalArn of the access entry to access any cluster objects that you've specified in a Kubernetes Role or ClusterRole object that is also specified in a binding's roleRef. For more information about creating Kubernetes RoleBinding, ClusterRoleBinding, Role, or ClusterRole objects, see [Using RBAC Authorization in the Kubernetes documentation](https://kubernetes.io/docs/reference/access-authn-authz/rbac/). If you want Amazon EKS to authorize the principalArn (instead of, or in addition to Kubernetes authorizing the principalArn), you can associate one or more access policies to the access entry using AssociateAccessPolicy. If you associate any access policies, the principalARN has all permissions assigned in the associated access policies and all permissions in any Kubernetes Role or ClusterRole objects that the group names are bound to.
    public var kubernetesGroups: [Swift.String]?
    /// The ARN of the IAM principal for the AccessEntry.
    /// This member is required.
    public var principalArn: Swift.String?
    /// The username to authenticate to Kubernetes with. We recommend not specifying a username and letting Amazon EKS specify it for you. For more information about the value Amazon EKS specifies for you, or constraints before specifying your own username, see [Creating access entries](https://docs.aws.amazon.com/eks/latest/userguide/access-entries.html#creating-access-entries) in the Amazon EKS User Guide.
    public var username: Swift.String?

    public init(
        clientRequestToken: Swift.String? = nil,
        clusterName: Swift.String? = nil,
        kubernetesGroups: [Swift.String]? = nil,
        principalArn: Swift.String? = nil,
        username: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.clusterName = clusterName
        self.kubernetesGroups = kubernetesGroups
        self.principalArn = principalArn
        self.username = username
    }
}

public struct UpdateAccessEntryOutput: Swift.Sendable {
    /// The ARN of the IAM principal for the AccessEntry.
    public var accessEntry: EKSClientTypes.AccessEntry?

    public init(
        accessEntry: EKSClientTypes.AccessEntry? = nil
    )
    {
        self.accessEntry = accessEntry
    }
}

public struct UpdateAddonInput: Swift.Sendable {
    /// The name of the add-on. The name must match one of the names returned by [ListAddons](https://docs.aws.amazon.com/eks/latest/APIReference/API_ListAddons.html).
    /// This member is required.
    public var addonName: Swift.String?
    /// The version of the add-on. The version must match one of the versions returned by [DescribeAddonVersions](https://docs.aws.amazon.com/eks/latest/APIReference/API_DescribeAddonVersions.html).
    public var addonVersion: Swift.String?
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    public var clientRequestToken: Swift.String?
    /// The name of your cluster.
    /// This member is required.
    public var clusterName: Swift.String?
    /// The set of configuration values for the add-on that's created. The values that you provide are validated against the schema returned by DescribeAddonConfiguration.
    public var configurationValues: Swift.String?
    /// An array of Pod Identity Assocations to be updated. Each EKS Pod Identity association maps a Kubernetes service account to an IAM Role. If this value is left blank, no change. If an empty array is provided, existing Pod Identity Assocations owned by the Addon are deleted. For more information, see [Attach an IAM Role to an Amazon EKS add-on using Pod Identity](https://docs.aws.amazon.com/eks/latest/userguide/add-ons-iam.html) in the EKS User Guide.
    public var podIdentityAssociations: [EKSClientTypes.AddonPodIdentityAssociations]?
    /// How to resolve field value conflicts for an Amazon EKS add-on if you've changed a value from the Amazon EKS default value. Conflicts are handled based on the option you choose:
    ///
    /// * None – Amazon EKS doesn't change the value. The update might fail.
    ///
    /// * Overwrite – Amazon EKS overwrites the changed value back to the Amazon EKS default value.
    ///
    /// * Preserve – Amazon EKS preserves the value. If you choose this option, we recommend that you test any field and value changes on a non-production cluster before updating the add-on on your production cluster.
    public var resolveConflicts: EKSClientTypes.ResolveConflicts?
    /// The Amazon Resource Name (ARN) of an existing IAM role to bind to the add-on's service account. The role must be assigned the IAM permissions required by the add-on. If you don't specify an existing IAM role, then the add-on uses the permissions assigned to the node IAM role. For more information, see [Amazon EKS node IAM role](https://docs.aws.amazon.com/eks/latest/userguide/create-node-role.html) in the Amazon EKS User Guide. To specify an existing IAM role, you must have an IAM OpenID Connect (OIDC) provider created for your cluster. For more information, see [Enabling IAM roles for service accounts on your cluster](https://docs.aws.amazon.com/eks/latest/userguide/enable-iam-roles-for-service-accounts.html) in the Amazon EKS User Guide.
    public var serviceAccountRoleArn: Swift.String?

    public init(
        addonName: Swift.String? = nil,
        addonVersion: Swift.String? = nil,
        clientRequestToken: Swift.String? = nil,
        clusterName: Swift.String? = nil,
        configurationValues: Swift.String? = nil,
        podIdentityAssociations: [EKSClientTypes.AddonPodIdentityAssociations]? = nil,
        resolveConflicts: EKSClientTypes.ResolveConflicts? = nil,
        serviceAccountRoleArn: Swift.String? = nil
    )
    {
        self.addonName = addonName
        self.addonVersion = addonVersion
        self.clientRequestToken = clientRequestToken
        self.clusterName = clusterName
        self.configurationValues = configurationValues
        self.podIdentityAssociations = podIdentityAssociations
        self.resolveConflicts = resolveConflicts
        self.serviceAccountRoleArn = serviceAccountRoleArn
    }
}

public struct UpdateAddonOutput: Swift.Sendable {
    /// An object representing an asynchronous update.
    public var update: EKSClientTypes.Update?

    public init(
        update: EKSClientTypes.Update? = nil
    )
    {
        self.update = update
    }
}

extension EKSClientTypes {

    /// The access configuration information for the cluster.
    public struct UpdateAccessConfigRequest: Swift.Sendable {
        /// The desired authentication mode for the cluster.
        public var authenticationMode: EKSClientTypes.AuthenticationMode?

        public init(
            authenticationMode: EKSClientTypes.AuthenticationMode? = nil
        )
        {
            self.authenticationMode = authenticationMode
        }
    }
}

public struct UpdateClusterConfigInput: Swift.Sendable {
    /// The access configuration for the cluster.
    public var accessConfig: EKSClientTypes.UpdateAccessConfigRequest?
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    public var clientRequestToken: Swift.String?
    /// Enable or disable exporting the Kubernetes control plane logs for your cluster to CloudWatch Logs. By default, cluster control plane logs aren't exported to CloudWatch Logs. For more information, see [Amazon EKS cluster control plane logs](https://docs.aws.amazon.com/eks/latest/userguide/control-plane-logs.html) in the Amazon EKS User Guide . CloudWatch Logs ingestion, archive storage, and data scanning rates apply to exported control plane logs. For more information, see [CloudWatch Pricing](http://aws.amazon.com/cloudwatch/pricing/).
    public var logging: EKSClientTypes.Logging?
    /// The name of the Amazon EKS cluster to update.
    /// This member is required.
    public var name: Swift.String?
    /// An object representing the VPC configuration to use for an Amazon EKS cluster.
    public var resourcesVpcConfig: EKSClientTypes.VpcConfigRequest?
    /// You can enable or disable extended support for clusters currently on standard support. You cannot disable extended support once it starts. You must enable extended support before your cluster exits standard support.
    public var upgradePolicy: EKSClientTypes.UpgradePolicyRequest?
    /// Enable or disable ARC zonal shift for the cluster. If zonal shift is enabled, Amazon Web Services configures zonal autoshift for the cluster. Zonal shift is a feature of Amazon Application Recovery Controller (ARC). ARC zonal shift is designed to be a temporary measure that allows you to move traffic for a resource away from an impaired AZ until the zonal shift expires or you cancel it. You can extend the zonal shift if necessary. You can start a zonal shift for an EKS cluster, or you can allow Amazon Web Services to do it for you by enabling zonal autoshift. This shift updates the flow of east-to-west network traffic in your cluster to only consider network endpoints for Pods running on worker nodes in healthy AZs. Additionally, any ALB or NLB handling ingress traffic for applications in your EKS cluster will automatically route traffic to targets in the healthy AZs. For more information about zonal shift in EKS, see [Learn about Amazon Application Recovery Controller (ARC) Zonal Shift in Amazon EKS](https://docs.aws.amazon.com/eks/latest/userguide/zone-shift.html) in the Amazon EKS User Guide .
    public var zonalShiftConfig: EKSClientTypes.ZonalShiftConfigRequest?

    public init(
        accessConfig: EKSClientTypes.UpdateAccessConfigRequest? = nil,
        clientRequestToken: Swift.String? = nil,
        logging: EKSClientTypes.Logging? = nil,
        name: Swift.String? = nil,
        resourcesVpcConfig: EKSClientTypes.VpcConfigRequest? = nil,
        upgradePolicy: EKSClientTypes.UpgradePolicyRequest? = nil,
        zonalShiftConfig: EKSClientTypes.ZonalShiftConfigRequest? = nil
    )
    {
        self.accessConfig = accessConfig
        self.clientRequestToken = clientRequestToken
        self.logging = logging
        self.name = name
        self.resourcesVpcConfig = resourcesVpcConfig
        self.upgradePolicy = upgradePolicy
        self.zonalShiftConfig = zonalShiftConfig
    }
}

public struct UpdateClusterConfigOutput: Swift.Sendable {
    /// An object representing an asynchronous update.
    public var update: EKSClientTypes.Update?

    public init(
        update: EKSClientTypes.Update? = nil
    )
    {
        self.update = update
    }
}

public struct UpdateClusterVersionInput: Swift.Sendable {
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    public var clientRequestToken: Swift.String?
    /// The name of the Amazon EKS cluster to update.
    /// This member is required.
    public var name: Swift.String?
    /// The desired Kubernetes version following a successful update.
    /// This member is required.
    public var version: Swift.String?

    public init(
        clientRequestToken: Swift.String? = nil,
        name: Swift.String? = nil,
        version: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.name = name
        self.version = version
    }
}

public struct UpdateClusterVersionOutput: Swift.Sendable {
    /// The full description of the specified update
    public var update: EKSClientTypes.Update?

    public init(
        update: EKSClientTypes.Update? = nil
    )
    {
        self.update = update
    }
}

public struct UpdateEksAnywhereSubscriptionInput: Swift.Sendable {
    /// A boolean indicating whether or not to automatically renew the subscription.
    /// This member is required.
    public var autoRenew: Swift.Bool?
    /// Unique, case-sensitive identifier to ensure the idempotency of the request.
    public var clientRequestToken: Swift.String?
    /// The ID of the subscription.
    /// This member is required.
    public var id: Swift.String?

    public init(
        autoRenew: Swift.Bool? = false,
        clientRequestToken: Swift.String? = nil,
        id: Swift.String? = nil
    )
    {
        self.autoRenew = autoRenew
        self.clientRequestToken = clientRequestToken
        self.id = id
    }
}

public struct UpdateEksAnywhereSubscriptionOutput: Swift.Sendable {
    /// The full description of the updated subscription.
    public var subscription: EKSClientTypes.EksAnywhereSubscription?

    public init(
        subscription: EKSClientTypes.EksAnywhereSubscription? = nil
    )
    {
        self.subscription = subscription
    }
}

extension EKSClientTypes {

    /// An object representing a Kubernetes label change for a managed node group.
    public struct UpdateLabelsPayload: Swift.Sendable {
        /// The Kubernetes labels to add or update.
        public var addOrUpdateLabels: [Swift.String: Swift.String]?
        /// The Kubernetes labels to remove.
        public var removeLabels: [Swift.String]?

        public init(
            addOrUpdateLabels: [Swift.String: Swift.String]? = nil,
            removeLabels: [Swift.String]? = nil
        )
        {
            self.addOrUpdateLabels = addOrUpdateLabels
            self.removeLabels = removeLabels
        }
    }
}

extension EKSClientTypes {

    /// An object representing the details of an update to a taints payload. For more information, see [Node taints on managed node groups](https://docs.aws.amazon.com/eks/latest/userguide/node-taints-managed-node-groups.html) in the Amazon EKS User Guide.
    public struct UpdateTaintsPayload: Swift.Sendable {
        /// Kubernetes taints to be added or updated.
        public var addOrUpdateTaints: [EKSClientTypes.Taint]?
        /// Kubernetes taints to remove.
        public var removeTaints: [EKSClientTypes.Taint]?

        public init(
            addOrUpdateTaints: [EKSClientTypes.Taint]? = nil,
            removeTaints: [EKSClientTypes.Taint]? = nil
        )
        {
            self.addOrUpdateTaints = addOrUpdateTaints
            self.removeTaints = removeTaints
        }
    }
}

public struct UpdateNodegroupConfigInput: Swift.Sendable {
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    public var clientRequestToken: Swift.String?
    /// The name of your cluster.
    /// This member is required.
    public var clusterName: Swift.String?
    /// The Kubernetes labels to apply to the nodes in the node group after the update.
    public var labels: EKSClientTypes.UpdateLabelsPayload?
    /// The name of the managed node group to update.
    /// This member is required.
    public var nodegroupName: Swift.String?
    /// The scaling configuration details for the Auto Scaling group after the update.
    public var scalingConfig: EKSClientTypes.NodegroupScalingConfig?
    /// The Kubernetes taints to be applied to the nodes in the node group after the update. For more information, see [Node taints on managed node groups](https://docs.aws.amazon.com/eks/latest/userguide/node-taints-managed-node-groups.html).
    public var taints: EKSClientTypes.UpdateTaintsPayload?
    /// The node group update configuration.
    public var updateConfig: EKSClientTypes.NodegroupUpdateConfig?

    public init(
        clientRequestToken: Swift.String? = nil,
        clusterName: Swift.String? = nil,
        labels: EKSClientTypes.UpdateLabelsPayload? = nil,
        nodegroupName: Swift.String? = nil,
        scalingConfig: EKSClientTypes.NodegroupScalingConfig? = nil,
        taints: EKSClientTypes.UpdateTaintsPayload? = nil,
        updateConfig: EKSClientTypes.NodegroupUpdateConfig? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.clusterName = clusterName
        self.labels = labels
        self.nodegroupName = nodegroupName
        self.scalingConfig = scalingConfig
        self.taints = taints
        self.updateConfig = updateConfig
    }
}

public struct UpdateNodegroupConfigOutput: Swift.Sendable {
    /// An object representing an asynchronous update.
    public var update: EKSClientTypes.Update?

    public init(
        update: EKSClientTypes.Update? = nil
    )
    {
        self.update = update
    }
}

public struct UpdateNodegroupVersionInput: Swift.Sendable {
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    public var clientRequestToken: Swift.String?
    /// The name of your cluster.
    /// This member is required.
    public var clusterName: Swift.String?
    /// Force the update if any Pod on the existing node group can't be drained due to a Pod disruption budget issue. If an update fails because all Pods can't be drained, you can force the update after it fails to terminate the old node whether or not any Pod is running on the node.
    public var force: Swift.Bool?
    /// An object representing a node group's launch template specification. You can only update a node group using a launch template if the node group was originally deployed with a launch template.
    public var launchTemplate: EKSClientTypes.LaunchTemplateSpecification?
    /// The name of the managed node group to update.
    /// This member is required.
    public var nodegroupName: Swift.String?
    /// The AMI version of the Amazon EKS optimized AMI to use for the update. By default, the latest available AMI version for the node group's Kubernetes version is used. For information about Linux versions, see [Amazon EKS optimized Amazon Linux AMI versions](https://docs.aws.amazon.com/eks/latest/userguide/eks-linux-ami-versions.html) in the Amazon EKS User Guide. Amazon EKS managed node groups support the November 2022 and later releases of the Windows AMIs. For information about Windows versions, see [Amazon EKS optimized Windows AMI versions](https://docs.aws.amazon.com/eks/latest/userguide/eks-ami-versions-windows.html) in the Amazon EKS User Guide. If you specify launchTemplate, and your launch template uses a custom AMI, then don't specify releaseVersion, or the node group update will fail. For more information about using launch templates with Amazon EKS, see [Customizing managed nodes with launch templates](https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html) in the Amazon EKS User Guide.
    public var releaseVersion: Swift.String?
    /// The Kubernetes version to update to. If no version is specified, then the Kubernetes version of the node group does not change. You can specify the Kubernetes version of the cluster to update the node group to the latest AMI version of the cluster's Kubernetes version. If you specify launchTemplate, and your launch template uses a custom AMI, then don't specify version, or the node group update will fail. For more information about using launch templates with Amazon EKS, see [Customizing managed nodes with launch templates](https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html) in the Amazon EKS User Guide.
    public var version: Swift.String?

    public init(
        clientRequestToken: Swift.String? = nil,
        clusterName: Swift.String? = nil,
        force: Swift.Bool? = false,
        launchTemplate: EKSClientTypes.LaunchTemplateSpecification? = nil,
        nodegroupName: Swift.String? = nil,
        releaseVersion: Swift.String? = nil,
        version: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.clusterName = clusterName
        self.force = force
        self.launchTemplate = launchTemplate
        self.nodegroupName = nodegroupName
        self.releaseVersion = releaseVersion
        self.version = version
    }
}

public struct UpdateNodegroupVersionOutput: Swift.Sendable {
    /// An object representing an asynchronous update.
    public var update: EKSClientTypes.Update?

    public init(
        update: EKSClientTypes.Update? = nil
    )
    {
        self.update = update
    }
}

public struct UpdatePodIdentityAssociationInput: Swift.Sendable {
    /// The ID of the association to be updated.
    /// This member is required.
    public var associationId: Swift.String?
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    public var clientRequestToken: Swift.String?
    /// The name of the cluster that you want to update the association in.
    /// This member is required.
    public var clusterName: Swift.String?
    /// The new IAM role to change the
    public var roleArn: Swift.String?

    public init(
        associationId: Swift.String? = nil,
        clientRequestToken: Swift.String? = nil,
        clusterName: Swift.String? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.associationId = associationId
        self.clientRequestToken = clientRequestToken
        self.clusterName = clusterName
        self.roleArn = roleArn
    }
}

public struct UpdatePodIdentityAssociationOutput: Swift.Sendable {
    /// The full description of the EKS Pod Identity association that was updated.
    public var association: EKSClientTypes.PodIdentityAssociation?

    public init(
        association: EKSClientTypes.PodIdentityAssociation? = nil
    )
    {
        self.association = association
    }
}

extension AssociateAccessPolicyInput {

    static func urlPathProvider(_ value: AssociateAccessPolicyInput) -> Swift.String? {
        guard let clusterName = value.clusterName else {
            return nil
        }
        guard let principalArn = value.principalArn else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/access-entries/\(principalArn.urlPercentEncoding())/access-policies"
    }
}

extension AssociateEncryptionConfigInput {

    static func urlPathProvider(_ value: AssociateEncryptionConfigInput) -> Swift.String? {
        guard let clusterName = value.clusterName else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/encryption-config/associate"
    }
}

extension AssociateIdentityProviderConfigInput {

    static func urlPathProvider(_ value: AssociateIdentityProviderConfigInput) -> Swift.String? {
        guard let clusterName = value.clusterName else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/identity-provider-configs/associate"
    }
}

extension CreateAccessEntryInput {

    static func urlPathProvider(_ value: CreateAccessEntryInput) -> Swift.String? {
        guard let clusterName = value.clusterName else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/access-entries"
    }
}

extension CreateAddonInput {

    static func urlPathProvider(_ value: CreateAddonInput) -> Swift.String? {
        guard let clusterName = value.clusterName else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/addons"
    }
}

extension CreateClusterInput {

    static func urlPathProvider(_ value: CreateClusterInput) -> Swift.String? {
        return "/clusters"
    }
}

extension CreateEksAnywhereSubscriptionInput {

    static func urlPathProvider(_ value: CreateEksAnywhereSubscriptionInput) -> Swift.String? {
        return "/eks-anywhere-subscriptions"
    }
}

extension CreateFargateProfileInput {

    static func urlPathProvider(_ value: CreateFargateProfileInput) -> Swift.String? {
        guard let clusterName = value.clusterName else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/fargate-profiles"
    }
}

extension CreateNodegroupInput {

    static func urlPathProvider(_ value: CreateNodegroupInput) -> Swift.String? {
        guard let clusterName = value.clusterName else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/node-groups"
    }
}

extension CreatePodIdentityAssociationInput {

    static func urlPathProvider(_ value: CreatePodIdentityAssociationInput) -> Swift.String? {
        guard let clusterName = value.clusterName else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/pod-identity-associations"
    }
}

extension DeleteAccessEntryInput {

    static func urlPathProvider(_ value: DeleteAccessEntryInput) -> Swift.String? {
        guard let clusterName = value.clusterName else {
            return nil
        }
        guard let principalArn = value.principalArn else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/access-entries/\(principalArn.urlPercentEncoding())"
    }
}

extension DeleteAddonInput {

    static func urlPathProvider(_ value: DeleteAddonInput) -> Swift.String? {
        guard let clusterName = value.clusterName else {
            return nil
        }
        guard let addonName = value.addonName else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/addons/\(addonName.urlPercentEncoding())"
    }
}

extension DeleteAddonInput {

    static func queryItemProvider(_ value: DeleteAddonInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let preserve = value.preserve {
            let preserveQueryItem = Smithy.URIQueryItem(name: "preserve".urlPercentEncoding(), value: Swift.String(preserve).urlPercentEncoding())
            items.append(preserveQueryItem)
        }
        return items
    }
}

extension DeleteClusterInput {

    static func urlPathProvider(_ value: DeleteClusterInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/clusters/\(name.urlPercentEncoding())"
    }
}

extension DeleteEksAnywhereSubscriptionInput {

    static func urlPathProvider(_ value: DeleteEksAnywhereSubscriptionInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/eks-anywhere-subscriptions/\(id.urlPercentEncoding())"
    }
}

extension DeleteFargateProfileInput {

    static func urlPathProvider(_ value: DeleteFargateProfileInput) -> Swift.String? {
        guard let clusterName = value.clusterName else {
            return nil
        }
        guard let fargateProfileName = value.fargateProfileName else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/fargate-profiles/\(fargateProfileName.urlPercentEncoding())"
    }
}

extension DeleteNodegroupInput {

    static func urlPathProvider(_ value: DeleteNodegroupInput) -> Swift.String? {
        guard let clusterName = value.clusterName else {
            return nil
        }
        guard let nodegroupName = value.nodegroupName else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/node-groups/\(nodegroupName.urlPercentEncoding())"
    }
}

extension DeletePodIdentityAssociationInput {

    static func urlPathProvider(_ value: DeletePodIdentityAssociationInput) -> Swift.String? {
        guard let clusterName = value.clusterName else {
            return nil
        }
        guard let associationId = value.associationId else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/pod-identity-associations/\(associationId.urlPercentEncoding())"
    }
}

extension DeregisterClusterInput {

    static func urlPathProvider(_ value: DeregisterClusterInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/cluster-registrations/\(name.urlPercentEncoding())"
    }
}

extension DescribeAccessEntryInput {

    static func urlPathProvider(_ value: DescribeAccessEntryInput) -> Swift.String? {
        guard let clusterName = value.clusterName else {
            return nil
        }
        guard let principalArn = value.principalArn else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/access-entries/\(principalArn.urlPercentEncoding())"
    }
}

extension DescribeAddonInput {

    static func urlPathProvider(_ value: DescribeAddonInput) -> Swift.String? {
        guard let clusterName = value.clusterName else {
            return nil
        }
        guard let addonName = value.addonName else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/addons/\(addonName.urlPercentEncoding())"
    }
}

extension DescribeAddonConfigurationInput {

    static func urlPathProvider(_ value: DescribeAddonConfigurationInput) -> Swift.String? {
        return "/addons/configuration-schemas"
    }
}

extension DescribeAddonConfigurationInput {

    static func queryItemProvider(_ value: DescribeAddonConfigurationInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let addonName = value.addonName else {
            let message = "Creating a URL Query Item failed. addonName is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let addonNameQueryItem = Smithy.URIQueryItem(name: "addonName".urlPercentEncoding(), value: Swift.String(addonName).urlPercentEncoding())
        items.append(addonNameQueryItem)
        guard let addonVersion = value.addonVersion else {
            let message = "Creating a URL Query Item failed. addonVersion is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let addonVersionQueryItem = Smithy.URIQueryItem(name: "addonVersion".urlPercentEncoding(), value: Swift.String(addonVersion).urlPercentEncoding())
        items.append(addonVersionQueryItem)
        return items
    }
}

extension DescribeAddonVersionsInput {

    static func urlPathProvider(_ value: DescribeAddonVersionsInput) -> Swift.String? {
        return "/addons/supported-versions"
    }
}

extension DescribeAddonVersionsInput {

    static func queryItemProvider(_ value: DescribeAddonVersionsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let types = value.types {
            types.forEach { queryItemValue in
                let queryItem = Smithy.URIQueryItem(name: "types".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
                items.append(queryItem)
            }
        }
        if let addonName = value.addonName {
            let addonNameQueryItem = Smithy.URIQueryItem(name: "addonName".urlPercentEncoding(), value: Swift.String(addonName).urlPercentEncoding())
            items.append(addonNameQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let publishers = value.publishers {
            publishers.forEach { queryItemValue in
                let queryItem = Smithy.URIQueryItem(name: "publishers".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
                items.append(queryItem)
            }
        }
        if let owners = value.owners {
            owners.forEach { queryItemValue in
                let queryItem = Smithy.URIQueryItem(name: "owners".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
                items.append(queryItem)
            }
        }
        if let kubernetesVersion = value.kubernetesVersion {
            let kubernetesVersionQueryItem = Smithy.URIQueryItem(name: "kubernetesVersion".urlPercentEncoding(), value: Swift.String(kubernetesVersion).urlPercentEncoding())
            items.append(kubernetesVersionQueryItem)
        }
        return items
    }
}

extension DescribeClusterInput {

    static func urlPathProvider(_ value: DescribeClusterInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/clusters/\(name.urlPercentEncoding())"
    }
}

extension DescribeEksAnywhereSubscriptionInput {

    static func urlPathProvider(_ value: DescribeEksAnywhereSubscriptionInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/eks-anywhere-subscriptions/\(id.urlPercentEncoding())"
    }
}

extension DescribeFargateProfileInput {

    static func urlPathProvider(_ value: DescribeFargateProfileInput) -> Swift.String? {
        guard let clusterName = value.clusterName else {
            return nil
        }
        guard let fargateProfileName = value.fargateProfileName else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/fargate-profiles/\(fargateProfileName.urlPercentEncoding())"
    }
}

extension DescribeIdentityProviderConfigInput {

    static func urlPathProvider(_ value: DescribeIdentityProviderConfigInput) -> Swift.String? {
        guard let clusterName = value.clusterName else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/identity-provider-configs/describe"
    }
}

extension DescribeInsightInput {

    static func urlPathProvider(_ value: DescribeInsightInput) -> Swift.String? {
        guard let clusterName = value.clusterName else {
            return nil
        }
        guard let id = value.id else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/insights/\(id.urlPercentEncoding())"
    }
}

extension DescribeNodegroupInput {

    static func urlPathProvider(_ value: DescribeNodegroupInput) -> Swift.String? {
        guard let clusterName = value.clusterName else {
            return nil
        }
        guard let nodegroupName = value.nodegroupName else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/node-groups/\(nodegroupName.urlPercentEncoding())"
    }
}

extension DescribePodIdentityAssociationInput {

    static func urlPathProvider(_ value: DescribePodIdentityAssociationInput) -> Swift.String? {
        guard let clusterName = value.clusterName else {
            return nil
        }
        guard let associationId = value.associationId else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/pod-identity-associations/\(associationId.urlPercentEncoding())"
    }
}

extension DescribeUpdateInput {

    static func urlPathProvider(_ value: DescribeUpdateInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        guard let updateId = value.updateId else {
            return nil
        }
        return "/clusters/\(name.urlPercentEncoding())/updates/\(updateId.urlPercentEncoding())"
    }
}

extension DescribeUpdateInput {

    static func queryItemProvider(_ value: DescribeUpdateInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nodegroupName = value.nodegroupName {
            let nodegroupNameQueryItem = Smithy.URIQueryItem(name: "nodegroupName".urlPercentEncoding(), value: Swift.String(nodegroupName).urlPercentEncoding())
            items.append(nodegroupNameQueryItem)
        }
        if let addonName = value.addonName {
            let addonNameQueryItem = Smithy.URIQueryItem(name: "addonName".urlPercentEncoding(), value: Swift.String(addonName).urlPercentEncoding())
            items.append(addonNameQueryItem)
        }
        return items
    }
}

extension DisassociateAccessPolicyInput {

    static func urlPathProvider(_ value: DisassociateAccessPolicyInput) -> Swift.String? {
        guard let clusterName = value.clusterName else {
            return nil
        }
        guard let principalArn = value.principalArn else {
            return nil
        }
        guard let policyArn = value.policyArn else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/access-entries/\(principalArn.urlPercentEncoding())/access-policies/\(policyArn.urlPercentEncoding())"
    }
}

extension DisassociateIdentityProviderConfigInput {

    static func urlPathProvider(_ value: DisassociateIdentityProviderConfigInput) -> Swift.String? {
        guard let clusterName = value.clusterName else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/identity-provider-configs/disassociate"
    }
}

extension ListAccessEntriesInput {

    static func urlPathProvider(_ value: ListAccessEntriesInput) -> Swift.String? {
        guard let clusterName = value.clusterName else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/access-entries"
    }
}

extension ListAccessEntriesInput {

    static func queryItemProvider(_ value: ListAccessEntriesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let associatedPolicyArn = value.associatedPolicyArn {
            let associatedPolicyArnQueryItem = Smithy.URIQueryItem(name: "associatedPolicyArn".urlPercentEncoding(), value: Swift.String(associatedPolicyArn).urlPercentEncoding())
            items.append(associatedPolicyArnQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        return items
    }
}

extension ListAccessPoliciesInput {

    static func urlPathProvider(_ value: ListAccessPoliciesInput) -> Swift.String? {
        return "/access-policies"
    }
}

extension ListAccessPoliciesInput {

    static func queryItemProvider(_ value: ListAccessPoliciesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        return items
    }
}

extension ListAddonsInput {

    static func urlPathProvider(_ value: ListAddonsInput) -> Swift.String? {
        guard let clusterName = value.clusterName else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/addons"
    }
}

extension ListAddonsInput {

    static func queryItemProvider(_ value: ListAddonsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        return items
    }
}

extension ListAssociatedAccessPoliciesInput {

    static func urlPathProvider(_ value: ListAssociatedAccessPoliciesInput) -> Swift.String? {
        guard let clusterName = value.clusterName else {
            return nil
        }
        guard let principalArn = value.principalArn else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/access-entries/\(principalArn.urlPercentEncoding())/access-policies"
    }
}

extension ListAssociatedAccessPoliciesInput {

    static func queryItemProvider(_ value: ListAssociatedAccessPoliciesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        return items
    }
}

extension ListClustersInput {

    static func urlPathProvider(_ value: ListClustersInput) -> Swift.String? {
        return "/clusters"
    }
}

extension ListClustersInput {

    static func queryItemProvider(_ value: ListClustersInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let include = value.include {
            include.forEach { queryItemValue in
                let queryItem = Smithy.URIQueryItem(name: "include".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
                items.append(queryItem)
            }
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        return items
    }
}

extension ListEksAnywhereSubscriptionsInput {

    static func urlPathProvider(_ value: ListEksAnywhereSubscriptionsInput) -> Swift.String? {
        return "/eks-anywhere-subscriptions"
    }
}

extension ListEksAnywhereSubscriptionsInput {

    static func queryItemProvider(_ value: ListEksAnywhereSubscriptionsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let includeStatus = value.includeStatus {
            includeStatus.forEach { queryItemValue in
                let queryItem = Smithy.URIQueryItem(name: "includeStatus".urlPercentEncoding(), value: Swift.String(queryItemValue.rawValue).urlPercentEncoding())
                items.append(queryItem)
            }
        }
        return items
    }
}

extension ListFargateProfilesInput {

    static func urlPathProvider(_ value: ListFargateProfilesInput) -> Swift.String? {
        guard let clusterName = value.clusterName else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/fargate-profiles"
    }
}

extension ListFargateProfilesInput {

    static func queryItemProvider(_ value: ListFargateProfilesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        return items
    }
}

extension ListIdentityProviderConfigsInput {

    static func urlPathProvider(_ value: ListIdentityProviderConfigsInput) -> Swift.String? {
        guard let clusterName = value.clusterName else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/identity-provider-configs"
    }
}

extension ListIdentityProviderConfigsInput {

    static func queryItemProvider(_ value: ListIdentityProviderConfigsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        return items
    }
}

extension ListInsightsInput {

    static func urlPathProvider(_ value: ListInsightsInput) -> Swift.String? {
        guard let clusterName = value.clusterName else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/insights"
    }
}

extension ListNodegroupsInput {

    static func urlPathProvider(_ value: ListNodegroupsInput) -> Swift.String? {
        guard let clusterName = value.clusterName else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/node-groups"
    }
}

extension ListNodegroupsInput {

    static func queryItemProvider(_ value: ListNodegroupsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        return items
    }
}

extension ListPodIdentityAssociationsInput {

    static func urlPathProvider(_ value: ListPodIdentityAssociationsInput) -> Swift.String? {
        guard let clusterName = value.clusterName else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/pod-identity-associations"
    }
}

extension ListPodIdentityAssociationsInput {

    static func queryItemProvider(_ value: ListPodIdentityAssociationsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let namespace = value.namespace {
            let namespaceQueryItem = Smithy.URIQueryItem(name: "namespace".urlPercentEncoding(), value: Swift.String(namespace).urlPercentEncoding())
            items.append(namespaceQueryItem)
        }
        if let serviceAccount = value.serviceAccount {
            let serviceAccountQueryItem = Smithy.URIQueryItem(name: "serviceAccount".urlPercentEncoding(), value: Swift.String(serviceAccount).urlPercentEncoding())
            items.append(serviceAccountQueryItem)
        }
        return items
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension ListUpdatesInput {

    static func urlPathProvider(_ value: ListUpdatesInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/clusters/\(name.urlPercentEncoding())/updates"
    }
}

extension ListUpdatesInput {

    static func queryItemProvider(_ value: ListUpdatesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nodegroupName = value.nodegroupName {
            let nodegroupNameQueryItem = Smithy.URIQueryItem(name: "nodegroupName".urlPercentEncoding(), value: Swift.String(nodegroupName).urlPercentEncoding())
            items.append(nodegroupNameQueryItem)
        }
        if let addonName = value.addonName {
            let addonNameQueryItem = Smithy.URIQueryItem(name: "addonName".urlPercentEncoding(), value: Swift.String(addonName).urlPercentEncoding())
            items.append(addonNameQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension RegisterClusterInput {

    static func urlPathProvider(_ value: RegisterClusterInput) -> Swift.String? {
        return "/cluster-registrations"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func queryItemProvider(_ value: UntagResourceInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let tagKeys = value.tagKeys else {
            let message = "Creating a URL Query Item failed. tagKeys is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        tagKeys.forEach { queryItemValue in
            let queryItem = Smithy.URIQueryItem(name: "tagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
            items.append(queryItem)
        }
        return items
    }
}

extension UpdateAccessEntryInput {

    static func urlPathProvider(_ value: UpdateAccessEntryInput) -> Swift.String? {
        guard let clusterName = value.clusterName else {
            return nil
        }
        guard let principalArn = value.principalArn else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/access-entries/\(principalArn.urlPercentEncoding())"
    }
}

extension UpdateAddonInput {

    static func urlPathProvider(_ value: UpdateAddonInput) -> Swift.String? {
        guard let clusterName = value.clusterName else {
            return nil
        }
        guard let addonName = value.addonName else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/addons/\(addonName.urlPercentEncoding())/update"
    }
}

extension UpdateClusterConfigInput {

    static func urlPathProvider(_ value: UpdateClusterConfigInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/clusters/\(name.urlPercentEncoding())/update-config"
    }
}

extension UpdateClusterVersionInput {

    static func urlPathProvider(_ value: UpdateClusterVersionInput) -> Swift.String? {
        guard let name = value.name else {
            return nil
        }
        return "/clusters/\(name.urlPercentEncoding())/updates"
    }
}

extension UpdateEksAnywhereSubscriptionInput {

    static func urlPathProvider(_ value: UpdateEksAnywhereSubscriptionInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/eks-anywhere-subscriptions/\(id.urlPercentEncoding())"
    }
}

extension UpdateNodegroupConfigInput {

    static func urlPathProvider(_ value: UpdateNodegroupConfigInput) -> Swift.String? {
        guard let clusterName = value.clusterName else {
            return nil
        }
        guard let nodegroupName = value.nodegroupName else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/node-groups/\(nodegroupName.urlPercentEncoding())/update-config"
    }
}

extension UpdateNodegroupVersionInput {

    static func urlPathProvider(_ value: UpdateNodegroupVersionInput) -> Swift.String? {
        guard let clusterName = value.clusterName else {
            return nil
        }
        guard let nodegroupName = value.nodegroupName else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/node-groups/\(nodegroupName.urlPercentEncoding())/update-version"
    }
}

extension UpdatePodIdentityAssociationInput {

    static func urlPathProvider(_ value: UpdatePodIdentityAssociationInput) -> Swift.String? {
        guard let clusterName = value.clusterName else {
            return nil
        }
        guard let associationId = value.associationId else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/pod-identity-associations/\(associationId.urlPercentEncoding())"
    }
}

extension AssociateAccessPolicyInput {

    static func write(value: AssociateAccessPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accessScope"].write(value.accessScope, with: EKSClientTypes.AccessScope.write(value:to:))
        try writer["policyArn"].write(value.policyArn)
    }
}

extension AssociateEncryptionConfigInput {

    static func write(value: AssociateEncryptionConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientRequestToken"].write(value.clientRequestToken)
        try writer["encryptionConfig"].writeList(value.encryptionConfig, memberWritingClosure: EKSClientTypes.EncryptionConfig.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension AssociateIdentityProviderConfigInput {

    static func write(value: AssociateIdentityProviderConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientRequestToken"].write(value.clientRequestToken)
        try writer["oidc"].write(value.oidc, with: EKSClientTypes.OidcIdentityProviderConfigRequest.write(value:to:))
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateAccessEntryInput {

    static func write(value: CreateAccessEntryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientRequestToken"].write(value.clientRequestToken)
        try writer["kubernetesGroups"].writeList(value.kubernetesGroups, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["principalArn"].write(value.principalArn)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["type"].write(value.type)
        try writer["username"].write(value.username)
    }
}

extension CreateAddonInput {

    static func write(value: CreateAddonInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["addonName"].write(value.addonName)
        try writer["addonVersion"].write(value.addonVersion)
        try writer["clientRequestToken"].write(value.clientRequestToken)
        try writer["configurationValues"].write(value.configurationValues)
        try writer["podIdentityAssociations"].writeList(value.podIdentityAssociations, memberWritingClosure: EKSClientTypes.AddonPodIdentityAssociations.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["resolveConflicts"].write(value.resolveConflicts)
        try writer["serviceAccountRoleArn"].write(value.serviceAccountRoleArn)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateClusterInput {

    static func write(value: CreateClusterInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accessConfig"].write(value.accessConfig, with: EKSClientTypes.CreateAccessConfigRequest.write(value:to:))
        try writer["bootstrapSelfManagedAddons"].write(value.bootstrapSelfManagedAddons)
        try writer["clientRequestToken"].write(value.clientRequestToken)
        try writer["encryptionConfig"].writeList(value.encryptionConfig, memberWritingClosure: EKSClientTypes.EncryptionConfig.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["kubernetesNetworkConfig"].write(value.kubernetesNetworkConfig, with: EKSClientTypes.KubernetesNetworkConfigRequest.write(value:to:))
        try writer["logging"].write(value.logging, with: EKSClientTypes.Logging.write(value:to:))
        try writer["name"].write(value.name)
        try writer["outpostConfig"].write(value.outpostConfig, with: EKSClientTypes.OutpostConfigRequest.write(value:to:))
        try writer["resourcesVpcConfig"].write(value.resourcesVpcConfig, with: EKSClientTypes.VpcConfigRequest.write(value:to:))
        try writer["roleArn"].write(value.roleArn)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["upgradePolicy"].write(value.upgradePolicy, with: EKSClientTypes.UpgradePolicyRequest.write(value:to:))
        try writer["version"].write(value.version)
        try writer["zonalShiftConfig"].write(value.zonalShiftConfig, with: EKSClientTypes.ZonalShiftConfigRequest.write(value:to:))
    }
}

extension CreateEksAnywhereSubscriptionInput {

    static func write(value: CreateEksAnywhereSubscriptionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["autoRenew"].write(value.autoRenew)
        try writer["clientRequestToken"].write(value.clientRequestToken)
        try writer["licenseQuantity"].write(value.licenseQuantity)
        try writer["licenseType"].write(value.licenseType)
        try writer["name"].write(value.name)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["term"].write(value.term, with: EKSClientTypes.EksAnywhereSubscriptionTerm.write(value:to:))
    }
}

extension CreateFargateProfileInput {

    static func write(value: CreateFargateProfileInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientRequestToken"].write(value.clientRequestToken)
        try writer["fargateProfileName"].write(value.fargateProfileName)
        try writer["podExecutionRoleArn"].write(value.podExecutionRoleArn)
        try writer["selectors"].writeList(value.selectors, memberWritingClosure: EKSClientTypes.FargateProfileSelector.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["subnets"].writeList(value.subnets, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateNodegroupInput {

    static func write(value: CreateNodegroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["amiType"].write(value.amiType)
        try writer["capacityType"].write(value.capacityType)
        try writer["clientRequestToken"].write(value.clientRequestToken)
        try writer["diskSize"].write(value.diskSize)
        try writer["instanceTypes"].writeList(value.instanceTypes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["labels"].writeMap(value.labels, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["launchTemplate"].write(value.launchTemplate, with: EKSClientTypes.LaunchTemplateSpecification.write(value:to:))
        try writer["nodeRole"].write(value.nodeRole)
        try writer["nodegroupName"].write(value.nodegroupName)
        try writer["releaseVersion"].write(value.releaseVersion)
        try writer["remoteAccess"].write(value.remoteAccess, with: EKSClientTypes.RemoteAccessConfig.write(value:to:))
        try writer["scalingConfig"].write(value.scalingConfig, with: EKSClientTypes.NodegroupScalingConfig.write(value:to:))
        try writer["subnets"].writeList(value.subnets, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["taints"].writeList(value.taints, memberWritingClosure: EKSClientTypes.Taint.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["updateConfig"].write(value.updateConfig, with: EKSClientTypes.NodegroupUpdateConfig.write(value:to:))
        try writer["version"].write(value.version)
    }
}

extension CreatePodIdentityAssociationInput {

    static func write(value: CreatePodIdentityAssociationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientRequestToken"].write(value.clientRequestToken)
        try writer["namespace"].write(value.namespace)
        try writer["roleArn"].write(value.roleArn)
        try writer["serviceAccount"].write(value.serviceAccount)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension DescribeIdentityProviderConfigInput {

    static func write(value: DescribeIdentityProviderConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["identityProviderConfig"].write(value.identityProviderConfig, with: EKSClientTypes.IdentityProviderConfig.write(value:to:))
    }
}

extension DisassociateIdentityProviderConfigInput {

    static func write(value: DisassociateIdentityProviderConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientRequestToken"].write(value.clientRequestToken)
        try writer["identityProviderConfig"].write(value.identityProviderConfig, with: EKSClientTypes.IdentityProviderConfig.write(value:to:))
    }
}

extension ListInsightsInput {

    static func write(value: ListInsightsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["filter"].write(value.filter, with: EKSClientTypes.InsightsFilter.write(value:to:))
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension RegisterClusterInput {

    static func write(value: RegisterClusterInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientRequestToken"].write(value.clientRequestToken)
        try writer["connectorConfig"].write(value.connectorConfig, with: EKSClientTypes.ConnectorConfigRequest.write(value:to:))
        try writer["name"].write(value.name)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension UpdateAccessEntryInput {

    static func write(value: UpdateAccessEntryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientRequestToken"].write(value.clientRequestToken)
        try writer["kubernetesGroups"].writeList(value.kubernetesGroups, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["username"].write(value.username)
    }
}

extension UpdateAddonInput {

    static func write(value: UpdateAddonInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["addonVersion"].write(value.addonVersion)
        try writer["clientRequestToken"].write(value.clientRequestToken)
        try writer["configurationValues"].write(value.configurationValues)
        try writer["podIdentityAssociations"].writeList(value.podIdentityAssociations, memberWritingClosure: EKSClientTypes.AddonPodIdentityAssociations.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["resolveConflicts"].write(value.resolveConflicts)
        try writer["serviceAccountRoleArn"].write(value.serviceAccountRoleArn)
    }
}

extension UpdateClusterConfigInput {

    static func write(value: UpdateClusterConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accessConfig"].write(value.accessConfig, with: EKSClientTypes.UpdateAccessConfigRequest.write(value:to:))
        try writer["clientRequestToken"].write(value.clientRequestToken)
        try writer["logging"].write(value.logging, with: EKSClientTypes.Logging.write(value:to:))
        try writer["resourcesVpcConfig"].write(value.resourcesVpcConfig, with: EKSClientTypes.VpcConfigRequest.write(value:to:))
        try writer["upgradePolicy"].write(value.upgradePolicy, with: EKSClientTypes.UpgradePolicyRequest.write(value:to:))
        try writer["zonalShiftConfig"].write(value.zonalShiftConfig, with: EKSClientTypes.ZonalShiftConfigRequest.write(value:to:))
    }
}

extension UpdateClusterVersionInput {

    static func write(value: UpdateClusterVersionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientRequestToken"].write(value.clientRequestToken)
        try writer["version"].write(value.version)
    }
}

extension UpdateEksAnywhereSubscriptionInput {

    static func write(value: UpdateEksAnywhereSubscriptionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["autoRenew"].write(value.autoRenew)
        try writer["clientRequestToken"].write(value.clientRequestToken)
    }
}

extension UpdateNodegroupConfigInput {

    static func write(value: UpdateNodegroupConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientRequestToken"].write(value.clientRequestToken)
        try writer["labels"].write(value.labels, with: EKSClientTypes.UpdateLabelsPayload.write(value:to:))
        try writer["scalingConfig"].write(value.scalingConfig, with: EKSClientTypes.NodegroupScalingConfig.write(value:to:))
        try writer["taints"].write(value.taints, with: EKSClientTypes.UpdateTaintsPayload.write(value:to:))
        try writer["updateConfig"].write(value.updateConfig, with: EKSClientTypes.NodegroupUpdateConfig.write(value:to:))
    }
}

extension UpdateNodegroupVersionInput {

    static func write(value: UpdateNodegroupVersionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientRequestToken"].write(value.clientRequestToken)
        try writer["force"].write(value.force)
        try writer["launchTemplate"].write(value.launchTemplate, with: EKSClientTypes.LaunchTemplateSpecification.write(value:to:))
        try writer["releaseVersion"].write(value.releaseVersion)
        try writer["version"].write(value.version)
    }
}

extension UpdatePodIdentityAssociationInput {

    static func write(value: UpdatePodIdentityAssociationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientRequestToken"].write(value.clientRequestToken)
        try writer["roleArn"].write(value.roleArn)
    }
}

extension AssociateAccessPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AssociateAccessPolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AssociateAccessPolicyOutput()
        value.associatedAccessPolicy = try reader["associatedAccessPolicy"].readIfPresent(with: EKSClientTypes.AssociatedAccessPolicy.read(from:))
        value.clusterName = try reader["clusterName"].readIfPresent()
        value.principalArn = try reader["principalArn"].readIfPresent()
        return value
    }
}

extension AssociateEncryptionConfigOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AssociateEncryptionConfigOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AssociateEncryptionConfigOutput()
        value.update = try reader["update"].readIfPresent(with: EKSClientTypes.Update.read(from:))
        return value
    }
}

extension AssociateIdentityProviderConfigOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AssociateIdentityProviderConfigOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AssociateIdentityProviderConfigOutput()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.update = try reader["update"].readIfPresent(with: EKSClientTypes.Update.read(from:))
        return value
    }
}

extension CreateAccessEntryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateAccessEntryOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateAccessEntryOutput()
        value.accessEntry = try reader["accessEntry"].readIfPresent(with: EKSClientTypes.AccessEntry.read(from:))
        return value
    }
}

extension CreateAddonOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateAddonOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateAddonOutput()
        value.addon = try reader["addon"].readIfPresent(with: EKSClientTypes.Addon.read(from:))
        return value
    }
}

extension CreateClusterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateClusterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateClusterOutput()
        value.cluster = try reader["cluster"].readIfPresent(with: EKSClientTypes.Cluster.read(from:))
        return value
    }
}

extension CreateEksAnywhereSubscriptionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateEksAnywhereSubscriptionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateEksAnywhereSubscriptionOutput()
        value.subscription = try reader["subscription"].readIfPresent(with: EKSClientTypes.EksAnywhereSubscription.read(from:))
        return value
    }
}

extension CreateFargateProfileOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateFargateProfileOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateFargateProfileOutput()
        value.fargateProfile = try reader["fargateProfile"].readIfPresent(with: EKSClientTypes.FargateProfile.read(from:))
        return value
    }
}

extension CreateNodegroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateNodegroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateNodegroupOutput()
        value.nodegroup = try reader["nodegroup"].readIfPresent(with: EKSClientTypes.Nodegroup.read(from:))
        return value
    }
}

extension CreatePodIdentityAssociationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreatePodIdentityAssociationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreatePodIdentityAssociationOutput()
        value.association = try reader["association"].readIfPresent(with: EKSClientTypes.PodIdentityAssociation.read(from:))
        return value
    }
}

extension DeleteAccessEntryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteAccessEntryOutput {
        return DeleteAccessEntryOutput()
    }
}

extension DeleteAddonOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteAddonOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteAddonOutput()
        value.addon = try reader["addon"].readIfPresent(with: EKSClientTypes.Addon.read(from:))
        return value
    }
}

extension DeleteClusterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteClusterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteClusterOutput()
        value.cluster = try reader["cluster"].readIfPresent(with: EKSClientTypes.Cluster.read(from:))
        return value
    }
}

extension DeleteEksAnywhereSubscriptionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteEksAnywhereSubscriptionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteEksAnywhereSubscriptionOutput()
        value.subscription = try reader["subscription"].readIfPresent(with: EKSClientTypes.EksAnywhereSubscription.read(from:))
        return value
    }
}

extension DeleteFargateProfileOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteFargateProfileOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteFargateProfileOutput()
        value.fargateProfile = try reader["fargateProfile"].readIfPresent(with: EKSClientTypes.FargateProfile.read(from:))
        return value
    }
}

extension DeleteNodegroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteNodegroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteNodegroupOutput()
        value.nodegroup = try reader["nodegroup"].readIfPresent(with: EKSClientTypes.Nodegroup.read(from:))
        return value
    }
}

extension DeletePodIdentityAssociationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeletePodIdentityAssociationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeletePodIdentityAssociationOutput()
        value.association = try reader["association"].readIfPresent(with: EKSClientTypes.PodIdentityAssociation.read(from:))
        return value
    }
}

extension DeregisterClusterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeregisterClusterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeregisterClusterOutput()
        value.cluster = try reader["cluster"].readIfPresent(with: EKSClientTypes.Cluster.read(from:))
        return value
    }
}

extension DescribeAccessEntryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeAccessEntryOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeAccessEntryOutput()
        value.accessEntry = try reader["accessEntry"].readIfPresent(with: EKSClientTypes.AccessEntry.read(from:))
        return value
    }
}

extension DescribeAddonOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeAddonOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeAddonOutput()
        value.addon = try reader["addon"].readIfPresent(with: EKSClientTypes.Addon.read(from:))
        return value
    }
}

extension DescribeAddonConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeAddonConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeAddonConfigurationOutput()
        value.addonName = try reader["addonName"].readIfPresent()
        value.addonVersion = try reader["addonVersion"].readIfPresent()
        value.configurationSchema = try reader["configurationSchema"].readIfPresent()
        value.podIdentityConfiguration = try reader["podIdentityConfiguration"].readListIfPresent(memberReadingClosure: EKSClientTypes.AddonPodIdentityConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeAddonVersionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeAddonVersionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeAddonVersionsOutput()
        value.addons = try reader["addons"].readListIfPresent(memberReadingClosure: EKSClientTypes.AddonInfo.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension DescribeClusterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeClusterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeClusterOutput()
        value.cluster = try reader["cluster"].readIfPresent(with: EKSClientTypes.Cluster.read(from:))
        return value
    }
}

extension DescribeEksAnywhereSubscriptionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeEksAnywhereSubscriptionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeEksAnywhereSubscriptionOutput()
        value.subscription = try reader["subscription"].readIfPresent(with: EKSClientTypes.EksAnywhereSubscription.read(from:))
        return value
    }
}

extension DescribeFargateProfileOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeFargateProfileOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeFargateProfileOutput()
        value.fargateProfile = try reader["fargateProfile"].readIfPresent(with: EKSClientTypes.FargateProfile.read(from:))
        return value
    }
}

extension DescribeIdentityProviderConfigOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeIdentityProviderConfigOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeIdentityProviderConfigOutput()
        value.identityProviderConfig = try reader["identityProviderConfig"].readIfPresent(with: EKSClientTypes.IdentityProviderConfigResponse.read(from:))
        return value
    }
}

extension DescribeInsightOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeInsightOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeInsightOutput()
        value.insight = try reader["insight"].readIfPresent(with: EKSClientTypes.Insight.read(from:))
        return value
    }
}

extension DescribeNodegroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeNodegroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeNodegroupOutput()
        value.nodegroup = try reader["nodegroup"].readIfPresent(with: EKSClientTypes.Nodegroup.read(from:))
        return value
    }
}

extension DescribePodIdentityAssociationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribePodIdentityAssociationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribePodIdentityAssociationOutput()
        value.association = try reader["association"].readIfPresent(with: EKSClientTypes.PodIdentityAssociation.read(from:))
        return value
    }
}

extension DescribeUpdateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeUpdateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeUpdateOutput()
        value.update = try reader["update"].readIfPresent(with: EKSClientTypes.Update.read(from:))
        return value
    }
}

extension DisassociateAccessPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisassociateAccessPolicyOutput {
        return DisassociateAccessPolicyOutput()
    }
}

extension DisassociateIdentityProviderConfigOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisassociateIdentityProviderConfigOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DisassociateIdentityProviderConfigOutput()
        value.update = try reader["update"].readIfPresent(with: EKSClientTypes.Update.read(from:))
        return value
    }
}

extension ListAccessEntriesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAccessEntriesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAccessEntriesOutput()
        value.accessEntries = try reader["accessEntries"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListAccessPoliciesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAccessPoliciesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAccessPoliciesOutput()
        value.accessPolicies = try reader["accessPolicies"].readListIfPresent(memberReadingClosure: EKSClientTypes.AccessPolicy.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListAddonsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAddonsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAddonsOutput()
        value.addons = try reader["addons"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListAssociatedAccessPoliciesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAssociatedAccessPoliciesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAssociatedAccessPoliciesOutput()
        value.associatedAccessPolicies = try reader["associatedAccessPolicies"].readListIfPresent(memberReadingClosure: EKSClientTypes.AssociatedAccessPolicy.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.clusterName = try reader["clusterName"].readIfPresent()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.principalArn = try reader["principalArn"].readIfPresent()
        return value
    }
}

extension ListClustersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListClustersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListClustersOutput()
        value.clusters = try reader["clusters"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListEksAnywhereSubscriptionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListEksAnywhereSubscriptionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListEksAnywhereSubscriptionsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.subscriptions = try reader["subscriptions"].readListIfPresent(memberReadingClosure: EKSClientTypes.EksAnywhereSubscription.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListFargateProfilesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListFargateProfilesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListFargateProfilesOutput()
        value.fargateProfileNames = try reader["fargateProfileNames"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListIdentityProviderConfigsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListIdentityProviderConfigsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListIdentityProviderConfigsOutput()
        value.identityProviderConfigs = try reader["identityProviderConfigs"].readListIfPresent(memberReadingClosure: EKSClientTypes.IdentityProviderConfig.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListInsightsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListInsightsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListInsightsOutput()
        value.insights = try reader["insights"].readListIfPresent(memberReadingClosure: EKSClientTypes.InsightSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListNodegroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListNodegroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListNodegroupsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.nodegroups = try reader["nodegroups"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListPodIdentityAssociationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListPodIdentityAssociationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListPodIdentityAssociationsOutput()
        value.associations = try reader["associations"].readListIfPresent(memberReadingClosure: EKSClientTypes.PodIdentityAssociationSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension ListUpdatesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListUpdatesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListUpdatesOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.updateIds = try reader["updateIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension RegisterClusterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RegisterClusterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RegisterClusterOutput()
        value.cluster = try reader["cluster"].readIfPresent(with: EKSClientTypes.Cluster.read(from:))
        return value
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateAccessEntryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateAccessEntryOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateAccessEntryOutput()
        value.accessEntry = try reader["accessEntry"].readIfPresent(with: EKSClientTypes.AccessEntry.read(from:))
        return value
    }
}

extension UpdateAddonOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateAddonOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateAddonOutput()
        value.update = try reader["update"].readIfPresent(with: EKSClientTypes.Update.read(from:))
        return value
    }
}

extension UpdateClusterConfigOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateClusterConfigOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateClusterConfigOutput()
        value.update = try reader["update"].readIfPresent(with: EKSClientTypes.Update.read(from:))
        return value
    }
}

extension UpdateClusterVersionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateClusterVersionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateClusterVersionOutput()
        value.update = try reader["update"].readIfPresent(with: EKSClientTypes.Update.read(from:))
        return value
    }
}

extension UpdateEksAnywhereSubscriptionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateEksAnywhereSubscriptionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateEksAnywhereSubscriptionOutput()
        value.subscription = try reader["subscription"].readIfPresent(with: EKSClientTypes.EksAnywhereSubscription.read(from:))
        return value
    }
}

extension UpdateNodegroupConfigOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateNodegroupConfigOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateNodegroupConfigOutput()
        value.update = try reader["update"].readIfPresent(with: EKSClientTypes.Update.read(from:))
        return value
    }
}

extension UpdateNodegroupVersionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateNodegroupVersionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateNodegroupVersionOutput()
        value.update = try reader["update"].readIfPresent(with: EKSClientTypes.Update.read(from:))
        return value
    }
}

extension UpdatePodIdentityAssociationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdatePodIdentityAssociationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdatePodIdentityAssociationOutput()
        value.association = try reader["association"].readIfPresent(with: EKSClientTypes.PodIdentityAssociation.read(from:))
        return value
    }
}

enum AssociateAccessPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AssociateEncryptionConfigOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AssociateIdentityProviderConfigOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateAccessEntryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateAddonOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateClusterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "UnsupportedAvailabilityZoneException": return try UnsupportedAvailabilityZoneException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateEksAnywhereSubscriptionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateFargateProfileOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            case "UnsupportedAvailabilityZoneException": return try UnsupportedAvailabilityZoneException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateNodegroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreatePodIdentityAssociationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteAccessEntryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteAddonOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteClusterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteEksAnywhereSubscriptionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteFargateProfileOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteNodegroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeletePodIdentityAssociationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeregisterClusterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeAccessEntryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeAddonOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeAddonConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeAddonVersionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeClusterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeEksAnywhereSubscriptionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeFargateProfileOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeIdentityProviderConfigOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeInsightOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeNodegroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribePodIdentityAssociationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeUpdateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisassociateAccessPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisassociateIdentityProviderConfigOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAccessEntriesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAccessPoliciesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAddonsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAssociatedAccessPoliciesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListClustersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListEksAnywhereSubscriptionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListFargateProfilesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListIdentityProviderConfigsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListInsightsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListNodegroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListPodIdentityAssociationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListUpdatesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RegisterClusterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ResourcePropagationDelayException": return try ResourcePropagationDelayException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateAccessEntryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateAddonOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateClusterConfigOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateClusterVersionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateEksAnywhereSubscriptionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateNodegroupConfigOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateNodegroupVersionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientException": return try ClientException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdatePodIdentityAssociationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServerException": return try ServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension InvalidRequestException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InvalidRequestException {
        let reader = baseError.errorBodyReader
        var value = InvalidRequestException()
        value.properties.addonName = try reader["addonName"].readIfPresent()
        value.properties.clusterName = try reader["clusterName"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.nodegroupName = try reader["nodegroupName"].readIfPresent()
        value.properties.subscriptionId = try reader["subscriptionId"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.addonName = try reader["addonName"].readIfPresent()
        value.properties.clusterName = try reader["clusterName"].readIfPresent()
        value.properties.fargateProfileName = try reader["fargateProfileName"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.nodegroupName = try reader["nodegroupName"].readIfPresent()
        value.properties.subscriptionId = try reader["subscriptionId"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServerException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ServerException {
        let reader = baseError.errorBodyReader
        var value = ServerException()
        value.properties.addonName = try reader["addonName"].readIfPresent()
        value.properties.clusterName = try reader["clusterName"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.nodegroupName = try reader["nodegroupName"].readIfPresent()
        value.properties.subscriptionId = try reader["subscriptionId"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidParameterException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InvalidParameterException {
        let reader = baseError.errorBodyReader
        var value = InvalidParameterException()
        value.properties.addonName = try reader["addonName"].readIfPresent()
        value.properties.clusterName = try reader["clusterName"].readIfPresent()
        value.properties.fargateProfileName = try reader["fargateProfileName"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.nodegroupName = try reader["nodegroupName"].readIfPresent()
        value.properties.subscriptionId = try reader["subscriptionId"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceInUseException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceInUseException {
        let reader = baseError.errorBodyReader
        var value = ResourceInUseException()
        value.properties.addonName = try reader["addonName"].readIfPresent()
        value.properties.clusterName = try reader["clusterName"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.nodegroupName = try reader["nodegroupName"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ClientException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ClientException {
        let reader = baseError.errorBodyReader
        var value = ClientException()
        value.properties.addonName = try reader["addonName"].readIfPresent()
        value.properties.clusterName = try reader["clusterName"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.nodegroupName = try reader["nodegroupName"].readIfPresent()
        value.properties.subscriptionId = try reader["subscriptionId"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceLimitExceededException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceLimitExceededException {
        let reader = baseError.errorBodyReader
        var value = ResourceLimitExceededException()
        value.properties.clusterName = try reader["clusterName"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.nodegroupName = try reader["nodegroupName"].readIfPresent()
        value.properties.subscriptionId = try reader["subscriptionId"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceUnavailableException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ServiceUnavailableException {
        let reader = baseError.errorBodyReader
        var value = ServiceUnavailableException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UnsupportedAvailabilityZoneException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> UnsupportedAvailabilityZoneException {
        let reader = baseError.errorBodyReader
        var value = UnsupportedAvailabilityZoneException()
        value.properties.clusterName = try reader["clusterName"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.nodegroupName = try reader["nodegroupName"].readIfPresent()
        value.properties.validZones = try reader["validZones"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension NotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> NotFoundException {
        let reader = baseError.errorBodyReader
        var value = NotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension BadRequestException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> BadRequestException {
        let reader = baseError.errorBodyReader
        var value = BadRequestException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourcePropagationDelayException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourcePropagationDelayException {
        let reader = baseError.errorBodyReader
        var value = ResourcePropagationDelayException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension EKSClientTypes.AssociatedAccessPolicy {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.AssociatedAccessPolicy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.AssociatedAccessPolicy()
        value.policyArn = try reader["policyArn"].readIfPresent()
        value.accessScope = try reader["accessScope"].readIfPresent(with: EKSClientTypes.AccessScope.read(from:))
        value.associatedAt = try reader["associatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.modifiedAt = try reader["modifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension EKSClientTypes.AccessScope {

    static func write(value: EKSClientTypes.AccessScope?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["namespaces"].writeList(value.namespaces, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.AccessScope {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.AccessScope()
        value.type = try reader["type"].readIfPresent()
        value.namespaces = try reader["namespaces"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension EKSClientTypes.Update {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.Update {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.Update()
        value.id = try reader["id"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.type = try reader["type"].readIfPresent()
        value.params = try reader["params"].readListIfPresent(memberReadingClosure: EKSClientTypes.UpdateParam.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.errors = try reader["errors"].readListIfPresent(memberReadingClosure: EKSClientTypes.ErrorDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension EKSClientTypes.ErrorDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.ErrorDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.ErrorDetail()
        value.errorCode = try reader["errorCode"].readIfPresent()
        value.errorMessage = try reader["errorMessage"].readIfPresent()
        value.resourceIds = try reader["resourceIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension EKSClientTypes.UpdateParam {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.UpdateParam {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.UpdateParam()
        value.type = try reader["type"].readIfPresent()
        value.value = try reader["value"].readIfPresent()
        return value
    }
}

extension EKSClientTypes.AccessEntry {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.AccessEntry {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.AccessEntry()
        value.clusterName = try reader["clusterName"].readIfPresent()
        value.principalArn = try reader["principalArn"].readIfPresent()
        value.kubernetesGroups = try reader["kubernetesGroups"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.accessEntryArn = try reader["accessEntryArn"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.modifiedAt = try reader["modifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.username = try reader["username"].readIfPresent()
        value.type = try reader["type"].readIfPresent()
        return value
    }
}

extension EKSClientTypes.Addon {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.Addon {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.Addon()
        value.addonName = try reader["addonName"].readIfPresent()
        value.clusterName = try reader["clusterName"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.addonVersion = try reader["addonVersion"].readIfPresent()
        value.health = try reader["health"].readIfPresent(with: EKSClientTypes.AddonHealth.read(from:))
        value.addonArn = try reader["addonArn"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.modifiedAt = try reader["modifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.serviceAccountRoleArn = try reader["serviceAccountRoleArn"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.publisher = try reader["publisher"].readIfPresent()
        value.owner = try reader["owner"].readIfPresent()
        value.marketplaceInformation = try reader["marketplaceInformation"].readIfPresent(with: EKSClientTypes.MarketplaceInformation.read(from:))
        value.configurationValues = try reader["configurationValues"].readIfPresent()
        value.podIdentityAssociations = try reader["podIdentityAssociations"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension EKSClientTypes.MarketplaceInformation {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.MarketplaceInformation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.MarketplaceInformation()
        value.productId = try reader["productId"].readIfPresent()
        value.productUrl = try reader["productUrl"].readIfPresent()
        return value
    }
}

extension EKSClientTypes.AddonHealth {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.AddonHealth {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.AddonHealth()
        value.issues = try reader["issues"].readListIfPresent(memberReadingClosure: EKSClientTypes.AddonIssue.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension EKSClientTypes.AddonIssue {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.AddonIssue {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.AddonIssue()
        value.code = try reader["code"].readIfPresent()
        value.message = try reader["message"].readIfPresent()
        value.resourceIds = try reader["resourceIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension EKSClientTypes.Cluster {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.Cluster {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.Cluster()
        value.name = try reader["name"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.version = try reader["version"].readIfPresent()
        value.endpoint = try reader["endpoint"].readIfPresent()
        value.roleArn = try reader["roleArn"].readIfPresent()
        value.resourcesVpcConfig = try reader["resourcesVpcConfig"].readIfPresent(with: EKSClientTypes.VpcConfigResponse.read(from:))
        value.kubernetesNetworkConfig = try reader["kubernetesNetworkConfig"].readIfPresent(with: EKSClientTypes.KubernetesNetworkConfigResponse.read(from:))
        value.logging = try reader["logging"].readIfPresent(with: EKSClientTypes.Logging.read(from:))
        value.identity = try reader["identity"].readIfPresent(with: EKSClientTypes.Identity.read(from:))
        value.status = try reader["status"].readIfPresent()
        value.certificateAuthority = try reader["certificateAuthority"].readIfPresent(with: EKSClientTypes.Certificate.read(from:))
        value.clientRequestToken = try reader["clientRequestToken"].readIfPresent()
        value.platformVersion = try reader["platformVersion"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.encryptionConfig = try reader["encryptionConfig"].readListIfPresent(memberReadingClosure: EKSClientTypes.EncryptionConfig.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.connectorConfig = try reader["connectorConfig"].readIfPresent(with: EKSClientTypes.ConnectorConfigResponse.read(from:))
        value.id = try reader["id"].readIfPresent()
        value.health = try reader["health"].readIfPresent(with: EKSClientTypes.ClusterHealth.read(from:))
        value.outpostConfig = try reader["outpostConfig"].readIfPresent(with: EKSClientTypes.OutpostConfigResponse.read(from:))
        value.accessConfig = try reader["accessConfig"].readIfPresent(with: EKSClientTypes.AccessConfigResponse.read(from:))
        value.upgradePolicy = try reader["upgradePolicy"].readIfPresent(with: EKSClientTypes.UpgradePolicyResponse.read(from:))
        value.zonalShiftConfig = try reader["zonalShiftConfig"].readIfPresent(with: EKSClientTypes.ZonalShiftConfigResponse.read(from:))
        return value
    }
}

extension EKSClientTypes.ZonalShiftConfigResponse {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.ZonalShiftConfigResponse {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.ZonalShiftConfigResponse()
        value.enabled = try reader["enabled"].readIfPresent()
        return value
    }
}

extension EKSClientTypes.UpgradePolicyResponse {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.UpgradePolicyResponse {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.UpgradePolicyResponse()
        value.supportType = try reader["supportType"].readIfPresent()
        return value
    }
}

extension EKSClientTypes.AccessConfigResponse {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.AccessConfigResponse {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.AccessConfigResponse()
        value.bootstrapClusterCreatorAdminPermissions = try reader["bootstrapClusterCreatorAdminPermissions"].readIfPresent()
        value.authenticationMode = try reader["authenticationMode"].readIfPresent()
        return value
    }
}

extension EKSClientTypes.OutpostConfigResponse {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.OutpostConfigResponse {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.OutpostConfigResponse()
        value.outpostArns = try reader["outpostArns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.controlPlaneInstanceType = try reader["controlPlaneInstanceType"].readIfPresent() ?? ""
        value.controlPlanePlacement = try reader["controlPlanePlacement"].readIfPresent(with: EKSClientTypes.ControlPlanePlacementResponse.read(from:))
        return value
    }
}

extension EKSClientTypes.ControlPlanePlacementResponse {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.ControlPlanePlacementResponse {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.ControlPlanePlacementResponse()
        value.groupName = try reader["groupName"].readIfPresent()
        return value
    }
}

extension EKSClientTypes.ClusterHealth {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.ClusterHealth {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.ClusterHealth()
        value.issues = try reader["issues"].readListIfPresent(memberReadingClosure: EKSClientTypes.ClusterIssue.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension EKSClientTypes.ClusterIssue {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.ClusterIssue {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.ClusterIssue()
        value.code = try reader["code"].readIfPresent()
        value.message = try reader["message"].readIfPresent()
        value.resourceIds = try reader["resourceIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension EKSClientTypes.ConnectorConfigResponse {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.ConnectorConfigResponse {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.ConnectorConfigResponse()
        value.activationId = try reader["activationId"].readIfPresent()
        value.activationCode = try reader["activationCode"].readIfPresent()
        value.activationExpiry = try reader["activationExpiry"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.provider = try reader["provider"].readIfPresent()
        value.roleArn = try reader["roleArn"].readIfPresent()
        return value
    }
}

extension EKSClientTypes.EncryptionConfig {

    static func write(value: EKSClientTypes.EncryptionConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["provider"].write(value.provider, with: EKSClientTypes.Provider.write(value:to:))
        try writer["resources"].writeList(value.resources, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.EncryptionConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.EncryptionConfig()
        value.resources = try reader["resources"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.provider = try reader["provider"].readIfPresent(with: EKSClientTypes.Provider.read(from:))
        return value
    }
}

extension EKSClientTypes.Provider {

    static func write(value: EKSClientTypes.Provider?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["keyArn"].write(value.keyArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.Provider {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.Provider()
        value.keyArn = try reader["keyArn"].readIfPresent()
        return value
    }
}

extension EKSClientTypes.Certificate {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.Certificate {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.Certificate()
        value.data = try reader["data"].readIfPresent()
        return value
    }
}

extension EKSClientTypes.Identity {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.Identity {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.Identity()
        value.oidc = try reader["oidc"].readIfPresent(with: EKSClientTypes.OIDC.read(from:))
        return value
    }
}

extension EKSClientTypes.OIDC {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.OIDC {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.OIDC()
        value.issuer = try reader["issuer"].readIfPresent()
        return value
    }
}

extension EKSClientTypes.Logging {

    static func write(value: EKSClientTypes.Logging?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clusterLogging"].writeList(value.clusterLogging, memberWritingClosure: EKSClientTypes.LogSetup.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.Logging {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.Logging()
        value.clusterLogging = try reader["clusterLogging"].readListIfPresent(memberReadingClosure: EKSClientTypes.LogSetup.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension EKSClientTypes.LogSetup {

    static func write(value: EKSClientTypes.LogSetup?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["enabled"].write(value.enabled)
        try writer["types"].writeList(value.types, memberWritingClosure: SmithyReadWrite.WritingClosureBox<EKSClientTypes.LogType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.LogSetup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.LogSetup()
        value.types = try reader["types"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<EKSClientTypes.LogType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.enabled = try reader["enabled"].readIfPresent()
        return value
    }
}

extension EKSClientTypes.KubernetesNetworkConfigResponse {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.KubernetesNetworkConfigResponse {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.KubernetesNetworkConfigResponse()
        value.serviceIpv4Cidr = try reader["serviceIpv4Cidr"].readIfPresent()
        value.serviceIpv6Cidr = try reader["serviceIpv6Cidr"].readIfPresent()
        value.ipFamily = try reader["ipFamily"].readIfPresent()
        return value
    }
}

extension EKSClientTypes.VpcConfigResponse {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.VpcConfigResponse {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.VpcConfigResponse()
        value.subnetIds = try reader["subnetIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.securityGroupIds = try reader["securityGroupIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.clusterSecurityGroupId = try reader["clusterSecurityGroupId"].readIfPresent()
        value.vpcId = try reader["vpcId"].readIfPresent()
        value.endpointPublicAccess = try reader["endpointPublicAccess"].readIfPresent() ?? false
        value.endpointPrivateAccess = try reader["endpointPrivateAccess"].readIfPresent() ?? false
        value.publicAccessCidrs = try reader["publicAccessCidrs"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension EKSClientTypes.EksAnywhereSubscription {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.EksAnywhereSubscription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.EksAnywhereSubscription()
        value.id = try reader["id"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.effectiveDate = try reader["effectiveDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.expirationDate = try reader["expirationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.licenseQuantity = try reader["licenseQuantity"].readIfPresent() ?? 0
        value.licenseType = try reader["licenseType"].readIfPresent()
        value.term = try reader["term"].readIfPresent(with: EKSClientTypes.EksAnywhereSubscriptionTerm.read(from:))
        value.status = try reader["status"].readIfPresent()
        value.autoRenew = try reader["autoRenew"].readIfPresent() ?? false
        value.licenseArns = try reader["licenseArns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension EKSClientTypes.EksAnywhereSubscriptionTerm {

    static func write(value: EKSClientTypes.EksAnywhereSubscriptionTerm?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["duration"].write(value.duration)
        try writer["unit"].write(value.unit)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.EksAnywhereSubscriptionTerm {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.EksAnywhereSubscriptionTerm()
        value.duration = try reader["duration"].readIfPresent() ?? 0
        value.unit = try reader["unit"].readIfPresent()
        return value
    }
}

extension EKSClientTypes.FargateProfile {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.FargateProfile {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.FargateProfile()
        value.fargateProfileName = try reader["fargateProfileName"].readIfPresent()
        value.fargateProfileArn = try reader["fargateProfileArn"].readIfPresent()
        value.clusterName = try reader["clusterName"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.podExecutionRoleArn = try reader["podExecutionRoleArn"].readIfPresent()
        value.subnets = try reader["subnets"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.selectors = try reader["selectors"].readListIfPresent(memberReadingClosure: EKSClientTypes.FargateProfileSelector.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.status = try reader["status"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.health = try reader["health"].readIfPresent(with: EKSClientTypes.FargateProfileHealth.read(from:))
        return value
    }
}

extension EKSClientTypes.FargateProfileHealth {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.FargateProfileHealth {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.FargateProfileHealth()
        value.issues = try reader["issues"].readListIfPresent(memberReadingClosure: EKSClientTypes.FargateProfileIssue.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension EKSClientTypes.FargateProfileIssue {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.FargateProfileIssue {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.FargateProfileIssue()
        value.code = try reader["code"].readIfPresent()
        value.message = try reader["message"].readIfPresent()
        value.resourceIds = try reader["resourceIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension EKSClientTypes.FargateProfileSelector {

    static func write(value: EKSClientTypes.FargateProfileSelector?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["labels"].writeMap(value.labels, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["namespace"].write(value.namespace)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.FargateProfileSelector {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.FargateProfileSelector()
        value.namespace = try reader["namespace"].readIfPresent()
        value.labels = try reader["labels"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension EKSClientTypes.Nodegroup {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.Nodegroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.Nodegroup()
        value.nodegroupName = try reader["nodegroupName"].readIfPresent()
        value.nodegroupArn = try reader["nodegroupArn"].readIfPresent()
        value.clusterName = try reader["clusterName"].readIfPresent()
        value.version = try reader["version"].readIfPresent()
        value.releaseVersion = try reader["releaseVersion"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.modifiedAt = try reader["modifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.status = try reader["status"].readIfPresent()
        value.capacityType = try reader["capacityType"].readIfPresent()
        value.scalingConfig = try reader["scalingConfig"].readIfPresent(with: EKSClientTypes.NodegroupScalingConfig.read(from:))
        value.instanceTypes = try reader["instanceTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.subnets = try reader["subnets"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.remoteAccess = try reader["remoteAccess"].readIfPresent(with: EKSClientTypes.RemoteAccessConfig.read(from:))
        value.amiType = try reader["amiType"].readIfPresent()
        value.nodeRole = try reader["nodeRole"].readIfPresent()
        value.labels = try reader["labels"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.taints = try reader["taints"].readListIfPresent(memberReadingClosure: EKSClientTypes.Taint.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.resources = try reader["resources"].readIfPresent(with: EKSClientTypes.NodegroupResources.read(from:))
        value.diskSize = try reader["diskSize"].readIfPresent()
        value.health = try reader["health"].readIfPresent(with: EKSClientTypes.NodegroupHealth.read(from:))
        value.updateConfig = try reader["updateConfig"].readIfPresent(with: EKSClientTypes.NodegroupUpdateConfig.read(from:))
        value.launchTemplate = try reader["launchTemplate"].readIfPresent(with: EKSClientTypes.LaunchTemplateSpecification.read(from:))
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension EKSClientTypes.LaunchTemplateSpecification {

    static func write(value: EKSClientTypes.LaunchTemplateSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["id"].write(value.id)
        try writer["name"].write(value.name)
        try writer["version"].write(value.version)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.LaunchTemplateSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.LaunchTemplateSpecification()
        value.name = try reader["name"].readIfPresent()
        value.version = try reader["version"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        return value
    }
}

extension EKSClientTypes.NodegroupUpdateConfig {

    static func write(value: EKSClientTypes.NodegroupUpdateConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxUnavailable"].write(value.maxUnavailable)
        try writer["maxUnavailablePercentage"].write(value.maxUnavailablePercentage)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.NodegroupUpdateConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.NodegroupUpdateConfig()
        value.maxUnavailable = try reader["maxUnavailable"].readIfPresent()
        value.maxUnavailablePercentage = try reader["maxUnavailablePercentage"].readIfPresent()
        return value
    }
}

extension EKSClientTypes.NodegroupHealth {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.NodegroupHealth {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.NodegroupHealth()
        value.issues = try reader["issues"].readListIfPresent(memberReadingClosure: EKSClientTypes.Issue.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension EKSClientTypes.Issue {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.Issue {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.Issue()
        value.code = try reader["code"].readIfPresent()
        value.message = try reader["message"].readIfPresent()
        value.resourceIds = try reader["resourceIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension EKSClientTypes.NodegroupResources {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.NodegroupResources {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.NodegroupResources()
        value.autoScalingGroups = try reader["autoScalingGroups"].readListIfPresent(memberReadingClosure: EKSClientTypes.AutoScalingGroup.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.remoteAccessSecurityGroup = try reader["remoteAccessSecurityGroup"].readIfPresent()
        return value
    }
}

extension EKSClientTypes.AutoScalingGroup {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.AutoScalingGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.AutoScalingGroup()
        value.name = try reader["name"].readIfPresent()
        return value
    }
}

extension EKSClientTypes.Taint {

    static func write(value: EKSClientTypes.Taint?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["effect"].write(value.effect)
        try writer["key"].write(value.key)
        try writer["value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.Taint {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.Taint()
        value.key = try reader["key"].readIfPresent()
        value.value = try reader["value"].readIfPresent()
        value.effect = try reader["effect"].readIfPresent()
        return value
    }
}

extension EKSClientTypes.RemoteAccessConfig {

    static func write(value: EKSClientTypes.RemoteAccessConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ec2SshKey"].write(value.ec2SshKey)
        try writer["sourceSecurityGroups"].writeList(value.sourceSecurityGroups, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.RemoteAccessConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.RemoteAccessConfig()
        value.ec2SshKey = try reader["ec2SshKey"].readIfPresent()
        value.sourceSecurityGroups = try reader["sourceSecurityGroups"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension EKSClientTypes.NodegroupScalingConfig {

    static func write(value: EKSClientTypes.NodegroupScalingConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["desiredSize"].write(value.desiredSize)
        try writer["maxSize"].write(value.maxSize)
        try writer["minSize"].write(value.minSize)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.NodegroupScalingConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.NodegroupScalingConfig()
        value.minSize = try reader["minSize"].readIfPresent()
        value.maxSize = try reader["maxSize"].readIfPresent()
        value.desiredSize = try reader["desiredSize"].readIfPresent()
        return value
    }
}

extension EKSClientTypes.PodIdentityAssociation {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.PodIdentityAssociation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.PodIdentityAssociation()
        value.clusterName = try reader["clusterName"].readIfPresent()
        value.namespace = try reader["namespace"].readIfPresent()
        value.serviceAccount = try reader["serviceAccount"].readIfPresent()
        value.roleArn = try reader["roleArn"].readIfPresent()
        value.associationArn = try reader["associationArn"].readIfPresent()
        value.associationId = try reader["associationId"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.modifiedAt = try reader["modifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.ownerArn = try reader["ownerArn"].readIfPresent()
        return value
    }
}

extension EKSClientTypes.AddonPodIdentityConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.AddonPodIdentityConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.AddonPodIdentityConfiguration()
        value.serviceAccount = try reader["serviceAccount"].readIfPresent()
        value.recommendedManagedPolicies = try reader["recommendedManagedPolicies"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension EKSClientTypes.AddonInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.AddonInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.AddonInfo()
        value.addonName = try reader["addonName"].readIfPresent()
        value.type = try reader["type"].readIfPresent()
        value.addonVersions = try reader["addonVersions"].readListIfPresent(memberReadingClosure: EKSClientTypes.AddonVersionInfo.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.publisher = try reader["publisher"].readIfPresent()
        value.owner = try reader["owner"].readIfPresent()
        value.marketplaceInformation = try reader["marketplaceInformation"].readIfPresent(with: EKSClientTypes.MarketplaceInformation.read(from:))
        return value
    }
}

extension EKSClientTypes.AddonVersionInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.AddonVersionInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.AddonVersionInfo()
        value.addonVersion = try reader["addonVersion"].readIfPresent()
        value.architecture = try reader["architecture"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.compatibilities = try reader["compatibilities"].readListIfPresent(memberReadingClosure: EKSClientTypes.Compatibility.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.requiresConfiguration = try reader["requiresConfiguration"].readIfPresent() ?? false
        value.requiresIamPermissions = try reader["requiresIamPermissions"].readIfPresent() ?? false
        return value
    }
}

extension EKSClientTypes.Compatibility {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.Compatibility {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.Compatibility()
        value.clusterVersion = try reader["clusterVersion"].readIfPresent()
        value.platformVersions = try reader["platformVersions"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.defaultVersion = try reader["defaultVersion"].readIfPresent() ?? false
        return value
    }
}

extension EKSClientTypes.IdentityProviderConfigResponse {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.IdentityProviderConfigResponse {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.IdentityProviderConfigResponse()
        value.oidc = try reader["oidc"].readIfPresent(with: EKSClientTypes.OidcIdentityProviderConfig.read(from:))
        return value
    }
}

extension EKSClientTypes.OidcIdentityProviderConfig {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.OidcIdentityProviderConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.OidcIdentityProviderConfig()
        value.identityProviderConfigName = try reader["identityProviderConfigName"].readIfPresent()
        value.identityProviderConfigArn = try reader["identityProviderConfigArn"].readIfPresent()
        value.clusterName = try reader["clusterName"].readIfPresent()
        value.issuerUrl = try reader["issuerUrl"].readIfPresent()
        value.clientId = try reader["clientId"].readIfPresent()
        value.usernameClaim = try reader["usernameClaim"].readIfPresent()
        value.usernamePrefix = try reader["usernamePrefix"].readIfPresent()
        value.groupsClaim = try reader["groupsClaim"].readIfPresent()
        value.groupsPrefix = try reader["groupsPrefix"].readIfPresent()
        value.requiredClaims = try reader["requiredClaims"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.status = try reader["status"].readIfPresent()
        return value
    }
}

extension EKSClientTypes.Insight {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.Insight {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.Insight()
        value.id = try reader["id"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.category = try reader["category"].readIfPresent()
        value.kubernetesVersion = try reader["kubernetesVersion"].readIfPresent()
        value.lastRefreshTime = try reader["lastRefreshTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastTransitionTime = try reader["lastTransitionTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["description"].readIfPresent()
        value.insightStatus = try reader["insightStatus"].readIfPresent(with: EKSClientTypes.InsightStatus.read(from:))
        value.recommendation = try reader["recommendation"].readIfPresent()
        value.additionalInfo = try reader["additionalInfo"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.resources = try reader["resources"].readListIfPresent(memberReadingClosure: EKSClientTypes.InsightResourceDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.categorySpecificSummary = try reader["categorySpecificSummary"].readIfPresent(with: EKSClientTypes.InsightCategorySpecificSummary.read(from:))
        return value
    }
}

extension EKSClientTypes.InsightCategorySpecificSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.InsightCategorySpecificSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.InsightCategorySpecificSummary()
        value.deprecationDetails = try reader["deprecationDetails"].readListIfPresent(memberReadingClosure: EKSClientTypes.DeprecationDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension EKSClientTypes.DeprecationDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.DeprecationDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.DeprecationDetail()
        value.usage = try reader["usage"].readIfPresent()
        value.replacedWith = try reader["replacedWith"].readIfPresent()
        value.stopServingVersion = try reader["stopServingVersion"].readIfPresent()
        value.startServingReplacementVersion = try reader["startServingReplacementVersion"].readIfPresent()
        value.clientStats = try reader["clientStats"].readListIfPresent(memberReadingClosure: EKSClientTypes.ClientStat.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension EKSClientTypes.ClientStat {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.ClientStat {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.ClientStat()
        value.userAgent = try reader["userAgent"].readIfPresent()
        value.numberOfRequestsLast30Days = try reader["numberOfRequestsLast30Days"].readIfPresent() ?? 0
        value.lastRequestTime = try reader["lastRequestTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension EKSClientTypes.InsightResourceDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.InsightResourceDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.InsightResourceDetail()
        value.insightStatus = try reader["insightStatus"].readIfPresent(with: EKSClientTypes.InsightStatus.read(from:))
        value.kubernetesResourceUri = try reader["kubernetesResourceUri"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        return value
    }
}

extension EKSClientTypes.InsightStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.InsightStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.InsightStatus()
        value.status = try reader["status"].readIfPresent()
        value.reason = try reader["reason"].readIfPresent()
        return value
    }
}

extension EKSClientTypes.AccessPolicy {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.AccessPolicy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.AccessPolicy()
        value.name = try reader["name"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        return value
    }
}

extension EKSClientTypes.IdentityProviderConfig {

    static func write(value: EKSClientTypes.IdentityProviderConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.IdentityProviderConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.IdentityProviderConfig()
        value.type = try reader["type"].readIfPresent() ?? ""
        value.name = try reader["name"].readIfPresent() ?? ""
        return value
    }
}

extension EKSClientTypes.InsightSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.InsightSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.InsightSummary()
        value.id = try reader["id"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.category = try reader["category"].readIfPresent()
        value.kubernetesVersion = try reader["kubernetesVersion"].readIfPresent()
        value.lastRefreshTime = try reader["lastRefreshTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastTransitionTime = try reader["lastTransitionTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["description"].readIfPresent()
        value.insightStatus = try reader["insightStatus"].readIfPresent(with: EKSClientTypes.InsightStatus.read(from:))
        return value
    }
}

extension EKSClientTypes.PodIdentityAssociationSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> EKSClientTypes.PodIdentityAssociationSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EKSClientTypes.PodIdentityAssociationSummary()
        value.clusterName = try reader["clusterName"].readIfPresent()
        value.namespace = try reader["namespace"].readIfPresent()
        value.serviceAccount = try reader["serviceAccount"].readIfPresent()
        value.associationArn = try reader["associationArn"].readIfPresent()
        value.associationId = try reader["associationId"].readIfPresent()
        value.ownerArn = try reader["ownerArn"].readIfPresent()
        return value
    }
}

extension EKSClientTypes.OidcIdentityProviderConfigRequest {

    static func write(value: EKSClientTypes.OidcIdentityProviderConfigRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientId"].write(value.clientId)
        try writer["groupsClaim"].write(value.groupsClaim)
        try writer["groupsPrefix"].write(value.groupsPrefix)
        try writer["identityProviderConfigName"].write(value.identityProviderConfigName)
        try writer["issuerUrl"].write(value.issuerUrl)
        try writer["requiredClaims"].writeMap(value.requiredClaims, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["usernameClaim"].write(value.usernameClaim)
        try writer["usernamePrefix"].write(value.usernamePrefix)
    }
}

extension EKSClientTypes.AddonPodIdentityAssociations {

    static func write(value: EKSClientTypes.AddonPodIdentityAssociations?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["roleArn"].write(value.roleArn)
        try writer["serviceAccount"].write(value.serviceAccount)
    }
}

extension EKSClientTypes.VpcConfigRequest {

    static func write(value: EKSClientTypes.VpcConfigRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["endpointPrivateAccess"].write(value.endpointPrivateAccess)
        try writer["endpointPublicAccess"].write(value.endpointPublicAccess)
        try writer["publicAccessCidrs"].writeList(value.publicAccessCidrs, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["securityGroupIds"].writeList(value.securityGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["subnetIds"].writeList(value.subnetIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension EKSClientTypes.KubernetesNetworkConfigRequest {

    static func write(value: EKSClientTypes.KubernetesNetworkConfigRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ipFamily"].write(value.ipFamily)
        try writer["serviceIpv4Cidr"].write(value.serviceIpv4Cidr)
    }
}

extension EKSClientTypes.OutpostConfigRequest {

    static func write(value: EKSClientTypes.OutpostConfigRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["controlPlaneInstanceType"].write(value.controlPlaneInstanceType)
        try writer["controlPlanePlacement"].write(value.controlPlanePlacement, with: EKSClientTypes.ControlPlanePlacementRequest.write(value:to:))
        try writer["outpostArns"].writeList(value.outpostArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension EKSClientTypes.ControlPlanePlacementRequest {

    static func write(value: EKSClientTypes.ControlPlanePlacementRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["groupName"].write(value.groupName)
    }
}

extension EKSClientTypes.CreateAccessConfigRequest {

    static func write(value: EKSClientTypes.CreateAccessConfigRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["authenticationMode"].write(value.authenticationMode)
        try writer["bootstrapClusterCreatorAdminPermissions"].write(value.bootstrapClusterCreatorAdminPermissions)
    }
}

extension EKSClientTypes.UpgradePolicyRequest {

    static func write(value: EKSClientTypes.UpgradePolicyRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["supportType"].write(value.supportType)
    }
}

extension EKSClientTypes.ZonalShiftConfigRequest {

    static func write(value: EKSClientTypes.ZonalShiftConfigRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["enabled"].write(value.enabled)
    }
}

extension EKSClientTypes.InsightsFilter {

    static func write(value: EKSClientTypes.InsightsFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["categories"].writeList(value.categories, memberWritingClosure: SmithyReadWrite.WritingClosureBox<EKSClientTypes.Category>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["kubernetesVersions"].writeList(value.kubernetesVersions, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["statuses"].writeList(value.statuses, memberWritingClosure: SmithyReadWrite.WritingClosureBox<EKSClientTypes.InsightStatusValue>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension EKSClientTypes.ConnectorConfigRequest {

    static func write(value: EKSClientTypes.ConnectorConfigRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["provider"].write(value.provider)
        try writer["roleArn"].write(value.roleArn)
    }
}

extension EKSClientTypes.UpdateAccessConfigRequest {

    static func write(value: EKSClientTypes.UpdateAccessConfigRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["authenticationMode"].write(value.authenticationMode)
    }
}

extension EKSClientTypes.UpdateLabelsPayload {

    static func write(value: EKSClientTypes.UpdateLabelsPayload?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["addOrUpdateLabels"].writeMap(value.addOrUpdateLabels, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["removeLabels"].writeList(value.removeLabels, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension EKSClientTypes.UpdateTaintsPayload {

    static func write(value: EKSClientTypes.UpdateTaintsPayload?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["addOrUpdateTaints"].writeList(value.addOrUpdateTaints, memberWritingClosure: EKSClientTypes.Taint.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["removeTaints"].writeList(value.removeTaints, memberWritingClosure: EKSClientTypes.Taint.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

public enum EKSClientTypes {}
