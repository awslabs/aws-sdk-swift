// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension EKSClientTypes {
    public enum AMITypes: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case al2Arm64
        case al2X8664
        case al2X8664Gpu
        case bottlerocketArm64
        case bottlerocketArm64Nvidia
        case bottlerocketX8664
        case bottlerocketX8664Nvidia
        case custom
        case windowsCore2019X8664
        case windowsCore2022X8664
        case windowsFull2019X8664
        case windowsFull2022X8664
        case sdkUnknown(Swift.String)

        public static var allCases: [AMITypes] {
            return [
                .al2Arm64,
                .al2X8664,
                .al2X8664Gpu,
                .bottlerocketArm64,
                .bottlerocketArm64Nvidia,
                .bottlerocketX8664,
                .bottlerocketX8664Nvidia,
                .custom,
                .windowsCore2019X8664,
                .windowsCore2022X8664,
                .windowsFull2019X8664,
                .windowsFull2022X8664,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .al2Arm64: return "AL2_ARM_64"
            case .al2X8664: return "AL2_x86_64"
            case .al2X8664Gpu: return "AL2_x86_64_GPU"
            case .bottlerocketArm64: return "BOTTLEROCKET_ARM_64"
            case .bottlerocketArm64Nvidia: return "BOTTLEROCKET_ARM_64_NVIDIA"
            case .bottlerocketX8664: return "BOTTLEROCKET_x86_64"
            case .bottlerocketX8664Nvidia: return "BOTTLEROCKET_x86_64_NVIDIA"
            case .custom: return "CUSTOM"
            case .windowsCore2019X8664: return "WINDOWS_CORE_2019_x86_64"
            case .windowsCore2022X8664: return "WINDOWS_CORE_2022_x86_64"
            case .windowsFull2019X8664: return "WINDOWS_FULL_2019_x86_64"
            case .windowsFull2022X8664: return "WINDOWS_FULL_2022_x86_64"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AMITypes(rawValue: rawValue) ?? AMITypes.sdkUnknown(rawValue)
        }
    }
}

extension AccessDeniedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AccessDeniedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You don't have permissions to perform the requested operation. The user or role that is making the request must have at least one IAM permissions policy attached that grants the required permissions. For more information, see [Access Management](https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html) in the IAM User Guide.
public struct AccessDeniedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct AccessDeniedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension AccessDeniedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension EKSClientTypes.Addon: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addonArn
        case addonName
        case addonVersion
        case clusterName
        case configurationValues
        case createdAt
        case health
        case marketplaceInformation
        case modifiedAt
        case owner
        case publisher
        case serviceAccountRoleArn
        case status
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addonArn = self.addonArn {
            try encodeContainer.encode(addonArn, forKey: .addonArn)
        }
        if let addonName = self.addonName {
            try encodeContainer.encode(addonName, forKey: .addonName)
        }
        if let addonVersion = self.addonVersion {
            try encodeContainer.encode(addonVersion, forKey: .addonVersion)
        }
        if let clusterName = self.clusterName {
            try encodeContainer.encode(clusterName, forKey: .clusterName)
        }
        if let configurationValues = self.configurationValues {
            try encodeContainer.encode(configurationValues, forKey: .configurationValues)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let health = self.health {
            try encodeContainer.encode(health, forKey: .health)
        }
        if let marketplaceInformation = self.marketplaceInformation {
            try encodeContainer.encode(marketplaceInformation, forKey: .marketplaceInformation)
        }
        if let modifiedAt = self.modifiedAt {
            try encodeContainer.encodeTimestamp(modifiedAt, format: .epochSeconds, forKey: .modifiedAt)
        }
        if let owner = self.owner {
            try encodeContainer.encode(owner, forKey: .owner)
        }
        if let publisher = self.publisher {
            try encodeContainer.encode(publisher, forKey: .publisher)
        }
        if let serviceAccountRoleArn = self.serviceAccountRoleArn {
            try encodeContainer.encode(serviceAccountRoleArn, forKey: .serviceAccountRoleArn)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagMap0) in tags {
                try tagsContainer.encode(tagMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addonNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .addonName)
        addonName = addonNameDecoded
        let clusterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterName)
        clusterName = clusterNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(EKSClientTypes.AddonStatus.self, forKey: .status)
        status = statusDecoded
        let addonVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .addonVersion)
        addonVersion = addonVersionDecoded
        let healthDecoded = try containerValues.decodeIfPresent(EKSClientTypes.AddonHealth.self, forKey: .health)
        health = healthDecoded
        let addonArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .addonArn)
        addonArn = addonArnDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let modifiedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .modifiedAt)
        modifiedAt = modifiedAtDecoded
        let serviceAccountRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceAccountRoleArn)
        serviceAccountRoleArn = serviceAccountRoleArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let publisherDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publisher)
        publisher = publisherDecoded
        let ownerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .owner)
        owner = ownerDecoded
        let marketplaceInformationDecoded = try containerValues.decodeIfPresent(EKSClientTypes.MarketplaceInformation.self, forKey: .marketplaceInformation)
        marketplaceInformation = marketplaceInformationDecoded
        let configurationValuesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationValues)
        configurationValues = configurationValuesDecoded
    }
}

extension EKSClientTypes {
    /// An Amazon EKS add-on. For more information, see [Amazon EKS add-ons](https://docs.aws.amazon.com/eks/latest/userguide/eks-add-ons.html) in the Amazon EKS User Guide.
    public struct Addon: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the add-on.
        public var addonArn: Swift.String?
        /// The name of the add-on.
        public var addonName: Swift.String?
        /// The version of the add-on.
        public var addonVersion: Swift.String?
        /// The name of the cluster.
        public var clusterName: Swift.String?
        /// The configuration values that you provided.
        public var configurationValues: Swift.String?
        /// The date and time that the add-on was created.
        public var createdAt: ClientRuntime.Date?
        /// An object that represents the health of the add-on.
        public var health: EKSClientTypes.AddonHealth?
        /// Information about an Amazon EKS add-on from the Amazon Web Services Marketplace.
        public var marketplaceInformation: EKSClientTypes.MarketplaceInformation?
        /// The date and time that the add-on was last modified.
        public var modifiedAt: ClientRuntime.Date?
        /// The owner of the add-on.
        public var owner: Swift.String?
        /// The publisher of the add-on.
        public var publisher: Swift.String?
        /// The Amazon Resource Name (ARN) of the IAM role that's bound to the Kubernetes service account that the add-on uses.
        public var serviceAccountRoleArn: Swift.String?
        /// The status of the add-on.
        public var status: EKSClientTypes.AddonStatus?
        /// The metadata that you apply to the add-on to assist with categorization and organization. Each tag consists of a key and an optional value. You define both. Add-on tags do not propagate to any other resources associated with the cluster.
        public var tags: [Swift.String:Swift.String]?

        public init (
            addonArn: Swift.String? = nil,
            addonName: Swift.String? = nil,
            addonVersion: Swift.String? = nil,
            clusterName: Swift.String? = nil,
            configurationValues: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            health: EKSClientTypes.AddonHealth? = nil,
            marketplaceInformation: EKSClientTypes.MarketplaceInformation? = nil,
            modifiedAt: ClientRuntime.Date? = nil,
            owner: Swift.String? = nil,
            publisher: Swift.String? = nil,
            serviceAccountRoleArn: Swift.String? = nil,
            status: EKSClientTypes.AddonStatus? = nil,
            tags: [Swift.String:Swift.String]? = nil
        )
        {
            self.addonArn = addonArn
            self.addonName = addonName
            self.addonVersion = addonVersion
            self.clusterName = clusterName
            self.configurationValues = configurationValues
            self.createdAt = createdAt
            self.health = health
            self.marketplaceInformation = marketplaceInformation
            self.modifiedAt = modifiedAt
            self.owner = owner
            self.publisher = publisher
            self.serviceAccountRoleArn = serviceAccountRoleArn
            self.status = status
            self.tags = tags
        }
    }

}

extension EKSClientTypes.AddonHealth: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case issues
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let issues = issues {
            var issuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .issues)
            for addonissue0 in issues {
                try issuesContainer.encode(addonissue0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let issuesContainer = try containerValues.decodeIfPresent([EKSClientTypes.AddonIssue?].self, forKey: .issues)
        var issuesDecoded0:[EKSClientTypes.AddonIssue]? = nil
        if let issuesContainer = issuesContainer {
            issuesDecoded0 = [EKSClientTypes.AddonIssue]()
            for structure0 in issuesContainer {
                if let structure0 = structure0 {
                    issuesDecoded0?.append(structure0)
                }
            }
        }
        issues = issuesDecoded0
    }
}

extension EKSClientTypes {
    /// The health of the add-on.
    public struct AddonHealth: Swift.Equatable {
        /// An object representing the health issues for an add-on.
        public var issues: [EKSClientTypes.AddonIssue]?

        public init (
            issues: [EKSClientTypes.AddonIssue]? = nil
        )
        {
            self.issues = issues
        }
    }

}

extension EKSClientTypes.AddonInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addonName
        case addonVersions
        case marketplaceInformation
        case owner
        case publisher
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addonName = self.addonName {
            try encodeContainer.encode(addonName, forKey: .addonName)
        }
        if let addonVersions = addonVersions {
            var addonVersionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .addonVersions)
            for addonversioninfo0 in addonVersions {
                try addonVersionsContainer.encode(addonversioninfo0)
            }
        }
        if let marketplaceInformation = self.marketplaceInformation {
            try encodeContainer.encode(marketplaceInformation, forKey: .marketplaceInformation)
        }
        if let owner = self.owner {
            try encodeContainer.encode(owner, forKey: .owner)
        }
        if let publisher = self.publisher {
            try encodeContainer.encode(publisher, forKey: .publisher)
        }
        if let type = self.type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addonNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .addonName)
        addonName = addonNameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let addonVersionsContainer = try containerValues.decodeIfPresent([EKSClientTypes.AddonVersionInfo?].self, forKey: .addonVersions)
        var addonVersionsDecoded0:[EKSClientTypes.AddonVersionInfo]? = nil
        if let addonVersionsContainer = addonVersionsContainer {
            addonVersionsDecoded0 = [EKSClientTypes.AddonVersionInfo]()
            for structure0 in addonVersionsContainer {
                if let structure0 = structure0 {
                    addonVersionsDecoded0?.append(structure0)
                }
            }
        }
        addonVersions = addonVersionsDecoded0
        let publisherDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publisher)
        publisher = publisherDecoded
        let ownerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .owner)
        owner = ownerDecoded
        let marketplaceInformationDecoded = try containerValues.decodeIfPresent(EKSClientTypes.MarketplaceInformation.self, forKey: .marketplaceInformation)
        marketplaceInformation = marketplaceInformationDecoded
    }
}

extension EKSClientTypes {
    /// Information about an add-on.
    public struct AddonInfo: Swift.Equatable {
        /// The name of the add-on.
        public var addonName: Swift.String?
        /// An object representing information about available add-on versions and compatible Kubernetes versions.
        public var addonVersions: [EKSClientTypes.AddonVersionInfo]?
        /// Information about the add-on from the Amazon Web Services Marketplace.
        public var marketplaceInformation: EKSClientTypes.MarketplaceInformation?
        /// The owner of the add-on.
        public var owner: Swift.String?
        /// The publisher of the add-on.
        public var publisher: Swift.String?
        /// The type of the add-on.
        public var type: Swift.String?

        public init (
            addonName: Swift.String? = nil,
            addonVersions: [EKSClientTypes.AddonVersionInfo]? = nil,
            marketplaceInformation: EKSClientTypes.MarketplaceInformation? = nil,
            owner: Swift.String? = nil,
            publisher: Swift.String? = nil,
            type: Swift.String? = nil
        )
        {
            self.addonName = addonName
            self.addonVersions = addonVersions
            self.marketplaceInformation = marketplaceInformation
            self.owner = owner
            self.publisher = publisher
            self.type = type
        }
    }

}

extension EKSClientTypes.AddonIssue: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code
        case message
        case resourceIds
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = self.code {
            try encodeContainer.encode(code.rawValue, forKey: .code)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let resourceIds = resourceIds {
            var resourceIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceIds)
            for string0 in resourceIds {
                try resourceIdsContainer.encode(string0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(EKSClientTypes.AddonIssueCode.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let resourceIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .resourceIds)
        var resourceIdsDecoded0:[Swift.String]? = nil
        if let resourceIdsContainer = resourceIdsContainer {
            resourceIdsDecoded0 = [Swift.String]()
            for string0 in resourceIdsContainer {
                if let string0 = string0 {
                    resourceIdsDecoded0?.append(string0)
                }
            }
        }
        resourceIds = resourceIdsDecoded0
    }
}

extension EKSClientTypes {
    /// An issue related to an add-on.
    public struct AddonIssue: Swift.Equatable {
        /// A code that describes the type of issue.
        public var code: EKSClientTypes.AddonIssueCode?
        /// A message that provides details about the issue and what might cause it.
        public var message: Swift.String?
        /// The resource IDs of the issue.
        public var resourceIds: [Swift.String]?

        public init (
            code: EKSClientTypes.AddonIssueCode? = nil,
            message: Swift.String? = nil,
            resourceIds: [Swift.String]? = nil
        )
        {
            self.code = code
            self.message = message
            self.resourceIds = resourceIds
        }
    }

}

extension EKSClientTypes {
    public enum AddonIssueCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accessDenied
        case admissionRequestDenied
        case clusterUnreachable
        case configurationConflict
        case insufficientNumberOfReplicas
        case internalFailure
        case k8sResourceNotFound
        case unsupportedAddonModification
        case sdkUnknown(Swift.String)

        public static var allCases: [AddonIssueCode] {
            return [
                .accessDenied,
                .admissionRequestDenied,
                .clusterUnreachable,
                .configurationConflict,
                .insufficientNumberOfReplicas,
                .internalFailure,
                .k8sResourceNotFound,
                .unsupportedAddonModification,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accessDenied: return "AccessDenied"
            case .admissionRequestDenied: return "AdmissionRequestDenied"
            case .clusterUnreachable: return "ClusterUnreachable"
            case .configurationConflict: return "ConfigurationConflict"
            case .insufficientNumberOfReplicas: return "InsufficientNumberOfReplicas"
            case .internalFailure: return "InternalFailure"
            case .k8sResourceNotFound: return "K8sResourceNotFound"
            case .unsupportedAddonModification: return "UnsupportedAddonModification"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AddonIssueCode(rawValue: rawValue) ?? AddonIssueCode.sdkUnknown(rawValue)
        }
    }
}

extension EKSClientTypes {
    public enum AddonStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case createFailed
        case creating
        case degraded
        case deleteFailed
        case deleting
        case updateFailed
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [AddonStatus] {
            return [
                .active,
                .createFailed,
                .creating,
                .degraded,
                .deleteFailed,
                .deleting,
                .updateFailed,
                .updating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .createFailed: return "CREATE_FAILED"
            case .creating: return "CREATING"
            case .degraded: return "DEGRADED"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleting: return "DELETING"
            case .updateFailed: return "UPDATE_FAILED"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AddonStatus(rawValue: rawValue) ?? AddonStatus.sdkUnknown(rawValue)
        }
    }
}

extension EKSClientTypes.AddonVersionInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addonVersion
        case architecture
        case compatibilities
        case requiresConfiguration
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addonVersion = self.addonVersion {
            try encodeContainer.encode(addonVersion, forKey: .addonVersion)
        }
        if let architecture = architecture {
            var architectureContainer = encodeContainer.nestedUnkeyedContainer(forKey: .architecture)
            for string0 in architecture {
                try architectureContainer.encode(string0)
            }
        }
        if let compatibilities = compatibilities {
            var compatibilitiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .compatibilities)
            for compatibility0 in compatibilities {
                try compatibilitiesContainer.encode(compatibility0)
            }
        }
        if requiresConfiguration != false {
            try encodeContainer.encode(requiresConfiguration, forKey: .requiresConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addonVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .addonVersion)
        addonVersion = addonVersionDecoded
        let architectureContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .architecture)
        var architectureDecoded0:[Swift.String]? = nil
        if let architectureContainer = architectureContainer {
            architectureDecoded0 = [Swift.String]()
            for string0 in architectureContainer {
                if let string0 = string0 {
                    architectureDecoded0?.append(string0)
                }
            }
        }
        architecture = architectureDecoded0
        let compatibilitiesContainer = try containerValues.decodeIfPresent([EKSClientTypes.Compatibility?].self, forKey: .compatibilities)
        var compatibilitiesDecoded0:[EKSClientTypes.Compatibility]? = nil
        if let compatibilitiesContainer = compatibilitiesContainer {
            compatibilitiesDecoded0 = [EKSClientTypes.Compatibility]()
            for structure0 in compatibilitiesContainer {
                if let structure0 = structure0 {
                    compatibilitiesDecoded0?.append(structure0)
                }
            }
        }
        compatibilities = compatibilitiesDecoded0
        let requiresConfigurationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .requiresConfiguration) ?? false
        requiresConfiguration = requiresConfigurationDecoded
    }
}

extension EKSClientTypes {
    /// Information about an add-on version.
    public struct AddonVersionInfo: Swift.Equatable {
        /// The version of the add-on.
        public var addonVersion: Swift.String?
        /// The architectures that the version supports.
        public var architecture: [Swift.String]?
        /// An object representing the compatibilities of a version.
        public var compatibilities: [EKSClientTypes.Compatibility]?
        /// Whether the add-on requires configuration.
        public var requiresConfiguration: Swift.Bool

        public init (
            addonVersion: Swift.String? = nil,
            architecture: [Swift.String]? = nil,
            compatibilities: [EKSClientTypes.Compatibility]? = nil,
            requiresConfiguration: Swift.Bool = false
        )
        {
            self.addonVersion = addonVersion
            self.architecture = architecture
            self.compatibilities = compatibilities
            self.requiresConfiguration = requiresConfiguration
        }
    }

}

extension AssociateEncryptionConfigInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken
        case encryptionConfig
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let encryptionConfig = encryptionConfig {
            var encryptionConfigContainer = encodeContainer.nestedUnkeyedContainer(forKey: .encryptionConfig)
            for encryptionconfig0 in encryptionConfig {
                try encryptionConfigContainer.encode(encryptionconfig0)
            }
        }
    }
}

extension AssociateEncryptionConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let clusterName = clusterName else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/encryption-config/associate"
    }
}

public struct AssociateEncryptionConfigInput: Swift.Equatable {
    /// The client request token you are using with the encryption configuration.
    public var clientRequestToken: Swift.String?
    /// The name of the cluster that you are associating with encryption configuration.
    /// This member is required.
    public var clusterName: Swift.String?
    /// The configuration you are using for encryption.
    /// This member is required.
    public var encryptionConfig: [EKSClientTypes.EncryptionConfig]?

    public init (
        clientRequestToken: Swift.String? = nil,
        clusterName: Swift.String? = nil,
        encryptionConfig: [EKSClientTypes.EncryptionConfig]? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.clusterName = clusterName
        self.encryptionConfig = encryptionConfig
    }
}

struct AssociateEncryptionConfigInputBody: Swift.Equatable {
    let encryptionConfig: [EKSClientTypes.EncryptionConfig]?
    let clientRequestToken: Swift.String?
}

extension AssociateEncryptionConfigInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken
        case encryptionConfig
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let encryptionConfigContainer = try containerValues.decodeIfPresent([EKSClientTypes.EncryptionConfig?].self, forKey: .encryptionConfig)
        var encryptionConfigDecoded0:[EKSClientTypes.EncryptionConfig]? = nil
        if let encryptionConfigContainer = encryptionConfigContainer {
            encryptionConfigDecoded0 = [EKSClientTypes.EncryptionConfig]()
            for structure0 in encryptionConfigContainer {
                if let structure0 = structure0 {
                    encryptionConfigDecoded0?.append(structure0)
                }
            }
        }
        encryptionConfig = encryptionConfigDecoded0
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}

extension AssociateEncryptionConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AssociateEncryptionConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AssociateEncryptionConfigOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AssociateEncryptionConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AssociateEncryptionConfigOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.update = output.update
        } else {
            self.update = nil
        }
    }
}

public struct AssociateEncryptionConfigOutputResponse: Swift.Equatable {
    /// An object representing an asynchronous update.
    public var update: EKSClientTypes.Update?

    public init (
        update: EKSClientTypes.Update? = nil
    )
    {
        self.update = update
    }
}

struct AssociateEncryptionConfigOutputResponseBody: Swift.Equatable {
    let update: EKSClientTypes.Update?
}

extension AssociateEncryptionConfigOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case update
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateDecoded = try containerValues.decodeIfPresent(EKSClientTypes.Update.self, forKey: .update)
        update = updateDecoded
    }
}

extension AssociateIdentityProviderConfigInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken
        case oidc
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let oidc = self.oidc {
            try encodeContainer.encode(oidc, forKey: .oidc)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagMap0) in tags {
                try tagsContainer.encode(tagMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension AssociateIdentityProviderConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let clusterName = clusterName else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/identity-provider-configs/associate"
    }
}

public struct AssociateIdentityProviderConfigInput: Swift.Equatable {
    /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    public var clientRequestToken: Swift.String?
    /// The name of the cluster to associate the configuration to.
    /// This member is required.
    public var clusterName: Swift.String?
    /// An object representing an OpenID Connect (OIDC) identity provider configuration.
    /// This member is required.
    public var oidc: EKSClientTypes.OidcIdentityProviderConfigRequest?
    /// The metadata to apply to the configuration to assist with categorization and organization. Each tag consists of a key and an optional value. You define both.
    public var tags: [Swift.String:Swift.String]?

    public init (
        clientRequestToken: Swift.String? = nil,
        clusterName: Swift.String? = nil,
        oidc: EKSClientTypes.OidcIdentityProviderConfigRequest? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.clusterName = clusterName
        self.oidc = oidc
        self.tags = tags
    }
}

struct AssociateIdentityProviderConfigInputBody: Swift.Equatable {
    let oidc: EKSClientTypes.OidcIdentityProviderConfigRequest?
    let tags: [Swift.String:Swift.String]?
    let clientRequestToken: Swift.String?
}

extension AssociateIdentityProviderConfigInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken
        case oidc
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let oidcDecoded = try containerValues.decodeIfPresent(EKSClientTypes.OidcIdentityProviderConfigRequest.self, forKey: .oidc)
        oidc = oidcDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}

extension AssociateIdentityProviderConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AssociateIdentityProviderConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AssociateIdentityProviderConfigOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AssociateIdentityProviderConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AssociateIdentityProviderConfigOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tags = output.tags
            self.update = output.update
        } else {
            self.tags = nil
            self.update = nil
        }
    }
}

public struct AssociateIdentityProviderConfigOutputResponse: Swift.Equatable {
    /// The tags for the resource.
    public var tags: [Swift.String:Swift.String]?
    /// An object representing an asynchronous update.
    public var update: EKSClientTypes.Update?

    public init (
        tags: [Swift.String:Swift.String]? = nil,
        update: EKSClientTypes.Update? = nil
    )
    {
        self.tags = tags
        self.update = update
    }
}

struct AssociateIdentityProviderConfigOutputResponseBody: Swift.Equatable {
    let update: EKSClientTypes.Update?
    let tags: [Swift.String:Swift.String]?
}

extension AssociateIdentityProviderConfigOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags
        case update
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateDecoded = try containerValues.decodeIfPresent(EKSClientTypes.Update.self, forKey: .update)
        update = updateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension EKSClientTypes.AutoScalingGroup: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension EKSClientTypes {
    /// An Auto Scaling group that is associated with an Amazon EKS managed node group.
    public struct AutoScalingGroup: Swift.Equatable {
        /// The name of the Auto Scaling group associated with an Amazon EKS managed node group.
        public var name: Swift.String?

        public init (
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension BadRequestException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BadRequestExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This exception is thrown if the request contains a semantic error. The precise meaning will depend on the API, and will be documented in the error message.
public struct BadRequestException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct BadRequestExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension BadRequestExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension EKSClientTypes {
    public enum CapacityTypes: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case onDemand
        case spot
        case sdkUnknown(Swift.String)

        public static var allCases: [CapacityTypes] {
            return [
                .onDemand,
                .spot,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .onDemand: return "ON_DEMAND"
            case .spot: return "SPOT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CapacityTypes(rawValue: rawValue) ?? CapacityTypes.sdkUnknown(rawValue)
        }
    }
}

extension EKSClientTypes.Certificate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case data
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let data = self.data {
            try encodeContainer.encode(data, forKey: .data)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .data)
        data = dataDecoded
    }
}

extension EKSClientTypes {
    /// An object representing the certificate-authority-data for your cluster.
    public struct Certificate: Swift.Equatable {
        /// The Base64-encoded certificate data required to communicate with your cluster. Add this to the certificate-authority-data section of the kubeconfig file for your cluster.
        public var data: Swift.String?

        public init (
            data: Swift.String? = nil
        )
        {
            self.data = data
        }
    }

}

extension ClientException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ClientExceptionBody = try responseDecoder.decode(responseBody: data)
            self.addonName = output.addonName
            self.clusterName = output.clusterName
            self.message = output.message
            self.nodegroupName = output.nodegroupName
        } else {
            self.addonName = nil
            self.clusterName = nil
            self.message = nil
            self.nodegroupName = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// These errors are usually caused by a client action. Actions can include using an action or resource on behalf of a user that doesn't have permissions to use the action or resource or specifying an identifier that is not valid.
public struct ClientException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var addonName: Swift.String?
    /// The Amazon EKS cluster associated with the exception.
    public var clusterName: Swift.String?
    public var message: Swift.String?
    /// The Amazon EKS managed node group associated with the exception.
    public var nodegroupName: Swift.String?

    public init (
        addonName: Swift.String? = nil,
        clusterName: Swift.String? = nil,
        message: Swift.String? = nil,
        nodegroupName: Swift.String? = nil
    )
    {
        self.addonName = addonName
        self.clusterName = clusterName
        self.message = message
        self.nodegroupName = nodegroupName
    }
}

struct ClientExceptionBody: Swift.Equatable {
    let clusterName: Swift.String?
    let nodegroupName: Swift.String?
    let addonName: Swift.String?
    let message: Swift.String?
}

extension ClientExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addonName
        case clusterName
        case message
        case nodegroupName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterName)
        clusterName = clusterNameDecoded
        let nodegroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodegroupName)
        nodegroupName = nodegroupNameDecoded
        let addonNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .addonName)
        addonName = addonNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension EKSClientTypes.Cluster: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case certificateAuthority
        case clientRequestToken
        case connectorConfig
        case createdAt
        case encryptionConfig
        case endpoint
        case health
        case id
        case identity
        case kubernetesNetworkConfig
        case logging
        case name
        case outpostConfig
        case platformVersion
        case resourcesVpcConfig
        case roleArn
        case status
        case tags
        case version
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let certificateAuthority = self.certificateAuthority {
            try encodeContainer.encode(certificateAuthority, forKey: .certificateAuthority)
        }
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let connectorConfig = self.connectorConfig {
            try encodeContainer.encode(connectorConfig, forKey: .connectorConfig)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let encryptionConfig = encryptionConfig {
            var encryptionConfigContainer = encodeContainer.nestedUnkeyedContainer(forKey: .encryptionConfig)
            for encryptionconfig0 in encryptionConfig {
                try encryptionConfigContainer.encode(encryptionconfig0)
            }
        }
        if let endpoint = self.endpoint {
            try encodeContainer.encode(endpoint, forKey: .endpoint)
        }
        if let health = self.health {
            try encodeContainer.encode(health, forKey: .health)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let identity = self.identity {
            try encodeContainer.encode(identity, forKey: .identity)
        }
        if let kubernetesNetworkConfig = self.kubernetesNetworkConfig {
            try encodeContainer.encode(kubernetesNetworkConfig, forKey: .kubernetesNetworkConfig)
        }
        if let logging = self.logging {
            try encodeContainer.encode(logging, forKey: .logging)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let outpostConfig = self.outpostConfig {
            try encodeContainer.encode(outpostConfig, forKey: .outpostConfig)
        }
        if let platformVersion = self.platformVersion {
            try encodeContainer.encode(platformVersion, forKey: .platformVersion)
        }
        if let resourcesVpcConfig = self.resourcesVpcConfig {
            try encodeContainer.encode(resourcesVpcConfig, forKey: .resourcesVpcConfig)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagMap0) in tags {
                try tagsContainer.encode(tagMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let endpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpoint)
        endpoint = endpointDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let resourcesVpcConfigDecoded = try containerValues.decodeIfPresent(EKSClientTypes.VpcConfigResponse.self, forKey: .resourcesVpcConfig)
        resourcesVpcConfig = resourcesVpcConfigDecoded
        let kubernetesNetworkConfigDecoded = try containerValues.decodeIfPresent(EKSClientTypes.KubernetesNetworkConfigResponse.self, forKey: .kubernetesNetworkConfig)
        kubernetesNetworkConfig = kubernetesNetworkConfigDecoded
        let loggingDecoded = try containerValues.decodeIfPresent(EKSClientTypes.Logging.self, forKey: .logging)
        logging = loggingDecoded
        let identityDecoded = try containerValues.decodeIfPresent(EKSClientTypes.Identity.self, forKey: .identity)
        identity = identityDecoded
        let statusDecoded = try containerValues.decodeIfPresent(EKSClientTypes.ClusterStatus.self, forKey: .status)
        status = statusDecoded
        let certificateAuthorityDecoded = try containerValues.decodeIfPresent(EKSClientTypes.Certificate.self, forKey: .certificateAuthority)
        certificateAuthority = certificateAuthorityDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let platformVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformVersion)
        platformVersion = platformVersionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let encryptionConfigContainer = try containerValues.decodeIfPresent([EKSClientTypes.EncryptionConfig?].self, forKey: .encryptionConfig)
        var encryptionConfigDecoded0:[EKSClientTypes.EncryptionConfig]? = nil
        if let encryptionConfigContainer = encryptionConfigContainer {
            encryptionConfigDecoded0 = [EKSClientTypes.EncryptionConfig]()
            for structure0 in encryptionConfigContainer {
                if let structure0 = structure0 {
                    encryptionConfigDecoded0?.append(structure0)
                }
            }
        }
        encryptionConfig = encryptionConfigDecoded0
        let connectorConfigDecoded = try containerValues.decodeIfPresent(EKSClientTypes.ConnectorConfigResponse.self, forKey: .connectorConfig)
        connectorConfig = connectorConfigDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let healthDecoded = try containerValues.decodeIfPresent(EKSClientTypes.ClusterHealth.self, forKey: .health)
        health = healthDecoded
        let outpostConfigDecoded = try containerValues.decodeIfPresent(EKSClientTypes.OutpostConfigResponse.self, forKey: .outpostConfig)
        outpostConfig = outpostConfigDecoded
    }
}

extension EKSClientTypes {
    /// An object representing an Amazon EKS cluster.
    public struct Cluster: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the cluster.
        public var arn: Swift.String?
        /// The certificate-authority-data for your cluster.
        public var certificateAuthority: EKSClientTypes.Certificate?
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public var clientRequestToken: Swift.String?
        /// The configuration used to connect to a cluster for registration.
        public var connectorConfig: EKSClientTypes.ConnectorConfigResponse?
        /// The Unix epoch timestamp in seconds for when the cluster was created.
        public var createdAt: ClientRuntime.Date?
        /// The encryption configuration for the cluster.
        public var encryptionConfig: [EKSClientTypes.EncryptionConfig]?
        /// The endpoint for your Kubernetes API server.
        public var endpoint: Swift.String?
        /// An object representing the health of your local Amazon EKS cluster on an Amazon Web Services Outpost. This object isn't available for clusters on the Amazon Web Services cloud.
        public var health: EKSClientTypes.ClusterHealth?
        /// The ID of your local Amazon EKS cluster on an Amazon Web Services Outpost. This property isn't available for an Amazon EKS cluster on the Amazon Web Services cloud.
        public var id: Swift.String?
        /// The identity provider information for the cluster.
        public var identity: EKSClientTypes.Identity?
        /// The Kubernetes network configuration for the cluster.
        public var kubernetesNetworkConfig: EKSClientTypes.KubernetesNetworkConfigResponse?
        /// The logging configuration for your cluster.
        public var logging: EKSClientTypes.Logging?
        /// The name of the cluster.
        public var name: Swift.String?
        /// An object representing the configuration of your local Amazon EKS cluster on an Amazon Web Services Outpost. This object isn't available for clusters on the Amazon Web Services cloud.
        public var outpostConfig: EKSClientTypes.OutpostConfigResponse?
        /// The platform version of your Amazon EKS cluster. For more information, see [Platform Versions](https://docs.aws.amazon.com/eks/latest/userguide/platform-versions.html) in the Amazon EKS User Guide .
        public var platformVersion: Swift.String?
        /// The VPC configuration used by the cluster control plane. Amazon EKS VPC resources have specific requirements to work properly with Kubernetes. For more information, see [Cluster VPC Considerations](https://docs.aws.amazon.com/eks/latest/userguide/network_reqs.html) and [Cluster Security Group Considerations](https://docs.aws.amazon.com/eks/latest/userguide/sec-group-reqs.html) in the Amazon EKS User Guide.
        public var resourcesVpcConfig: EKSClientTypes.VpcConfigResponse?
        /// The Amazon Resource Name (ARN) of the IAM role that provides permissions for the Kubernetes control plane to make calls to Amazon Web Services API operations on your behalf.
        public var roleArn: Swift.String?
        /// The current status of the cluster.
        public var status: EKSClientTypes.ClusterStatus?
        /// The metadata that you apply to the cluster to assist with categorization and organization. Each tag consists of a key and an optional value. You define both. Cluster tags do not propagate to any other resources associated with the cluster.
        public var tags: [Swift.String:Swift.String]?
        /// The Kubernetes server version for the cluster.
        public var version: Swift.String?

        public init (
            arn: Swift.String? = nil,
            certificateAuthority: EKSClientTypes.Certificate? = nil,
            clientRequestToken: Swift.String? = nil,
            connectorConfig: EKSClientTypes.ConnectorConfigResponse? = nil,
            createdAt: ClientRuntime.Date? = nil,
            encryptionConfig: [EKSClientTypes.EncryptionConfig]? = nil,
            endpoint: Swift.String? = nil,
            health: EKSClientTypes.ClusterHealth? = nil,
            id: Swift.String? = nil,
            identity: EKSClientTypes.Identity? = nil,
            kubernetesNetworkConfig: EKSClientTypes.KubernetesNetworkConfigResponse? = nil,
            logging: EKSClientTypes.Logging? = nil,
            name: Swift.String? = nil,
            outpostConfig: EKSClientTypes.OutpostConfigResponse? = nil,
            platformVersion: Swift.String? = nil,
            resourcesVpcConfig: EKSClientTypes.VpcConfigResponse? = nil,
            roleArn: Swift.String? = nil,
            status: EKSClientTypes.ClusterStatus? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            version: Swift.String? = nil
        )
        {
            self.arn = arn
            self.certificateAuthority = certificateAuthority
            self.clientRequestToken = clientRequestToken
            self.connectorConfig = connectorConfig
            self.createdAt = createdAt
            self.encryptionConfig = encryptionConfig
            self.endpoint = endpoint
            self.health = health
            self.id = id
            self.identity = identity
            self.kubernetesNetworkConfig = kubernetesNetworkConfig
            self.logging = logging
            self.name = name
            self.outpostConfig = outpostConfig
            self.platformVersion = platformVersion
            self.resourcesVpcConfig = resourcesVpcConfig
            self.roleArn = roleArn
            self.status = status
            self.tags = tags
            self.version = version
        }
    }

}

extension EKSClientTypes.ClusterHealth: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case issues
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let issues = issues {
            var issuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .issues)
            for clusterissue0 in issues {
                try issuesContainer.encode(clusterissue0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let issuesContainer = try containerValues.decodeIfPresent([EKSClientTypes.ClusterIssue?].self, forKey: .issues)
        var issuesDecoded0:[EKSClientTypes.ClusterIssue]? = nil
        if let issuesContainer = issuesContainer {
            issuesDecoded0 = [EKSClientTypes.ClusterIssue]()
            for structure0 in issuesContainer {
                if let structure0 = structure0 {
                    issuesDecoded0?.append(structure0)
                }
            }
        }
        issues = issuesDecoded0
    }
}

extension EKSClientTypes {
    /// An object representing the health of your local Amazon EKS cluster on an Amazon Web Services Outpost. You can't use this API with an Amazon EKS cluster on the Amazon Web Services cloud.
    public struct ClusterHealth: Swift.Equatable {
        /// An object representing the health issues of your local Amazon EKS cluster on an Amazon Web Services Outpost.
        public var issues: [EKSClientTypes.ClusterIssue]?

        public init (
            issues: [EKSClientTypes.ClusterIssue]? = nil
        )
        {
            self.issues = issues
        }
    }

}

extension EKSClientTypes.ClusterIssue: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code
        case message
        case resourceIds
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = self.code {
            try encodeContainer.encode(code.rawValue, forKey: .code)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let resourceIds = resourceIds {
            var resourceIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceIds)
            for string0 in resourceIds {
                try resourceIdsContainer.encode(string0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(EKSClientTypes.ClusterIssueCode.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let resourceIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .resourceIds)
        var resourceIdsDecoded0:[Swift.String]? = nil
        if let resourceIdsContainer = resourceIdsContainer {
            resourceIdsDecoded0 = [Swift.String]()
            for string0 in resourceIdsContainer {
                if let string0 = string0 {
                    resourceIdsDecoded0?.append(string0)
                }
            }
        }
        resourceIds = resourceIdsDecoded0
    }
}

extension EKSClientTypes {
    /// An issue with your local Amazon EKS cluster on an Amazon Web Services Outpost. You can't use this API with an Amazon EKS cluster on the Amazon Web Services cloud.
    public struct ClusterIssue: Swift.Equatable {
        /// The error code of the issue.
        public var code: EKSClientTypes.ClusterIssueCode?
        /// A description of the issue.
        public var message: Swift.String?
        /// The resource IDs that the issue relates to.
        public var resourceIds: [Swift.String]?

        public init (
            code: EKSClientTypes.ClusterIssueCode? = nil,
            message: Swift.String? = nil,
            resourceIds: [Swift.String]? = nil
        )
        {
            self.code = code
            self.message = message
            self.resourceIds = resourceIds
        }
    }

}

extension EKSClientTypes {
    public enum ClusterIssueCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accessDenied
        case clusterUnreachable
        case configurationConflict
        case internalFailure
        case resourceLimitExceeded
        case resourceNotFound
        case sdkUnknown(Swift.String)

        public static var allCases: [ClusterIssueCode] {
            return [
                .accessDenied,
                .clusterUnreachable,
                .configurationConflict,
                .internalFailure,
                .resourceLimitExceeded,
                .resourceNotFound,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accessDenied: return "AccessDenied"
            case .clusterUnreachable: return "ClusterUnreachable"
            case .configurationConflict: return "ConfigurationConflict"
            case .internalFailure: return "InternalFailure"
            case .resourceLimitExceeded: return "ResourceLimitExceeded"
            case .resourceNotFound: return "ResourceNotFound"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ClusterIssueCode(rawValue: rawValue) ?? ClusterIssueCode.sdkUnknown(rawValue)
        }
    }
}

extension EKSClientTypes {
    public enum ClusterStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case creating
        case deleting
        case failed
        case pending
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [ClusterStatus] {
            return [
                .active,
                .creating,
                .deleting,
                .failed,
                .pending,
                .updating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case .pending: return "PENDING"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ClusterStatus(rawValue: rawValue) ?? ClusterStatus.sdkUnknown(rawValue)
        }
    }
}

extension EKSClientTypes.Compatibility: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterVersion
        case defaultVersion
        case platformVersions
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterVersion = self.clusterVersion {
            try encodeContainer.encode(clusterVersion, forKey: .clusterVersion)
        }
        if defaultVersion != false {
            try encodeContainer.encode(defaultVersion, forKey: .defaultVersion)
        }
        if let platformVersions = platformVersions {
            var platformVersionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .platformVersions)
            for string0 in platformVersions {
                try platformVersionsContainer.encode(string0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterVersion)
        clusterVersion = clusterVersionDecoded
        let platformVersionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .platformVersions)
        var platformVersionsDecoded0:[Swift.String]? = nil
        if let platformVersionsContainer = platformVersionsContainer {
            platformVersionsDecoded0 = [Swift.String]()
            for string0 in platformVersionsContainer {
                if let string0 = string0 {
                    platformVersionsDecoded0?.append(string0)
                }
            }
        }
        platformVersions = platformVersionsDecoded0
        let defaultVersionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .defaultVersion) ?? false
        defaultVersion = defaultVersionDecoded
    }
}

extension EKSClientTypes {
    /// Compatibility information.
    public struct Compatibility: Swift.Equatable {
        /// The supported Kubernetes version of the cluster.
        public var clusterVersion: Swift.String?
        /// The supported default version.
        public var defaultVersion: Swift.Bool
        /// The supported compute platform.
        public var platformVersions: [Swift.String]?

        public init (
            clusterVersion: Swift.String? = nil,
            defaultVersion: Swift.Bool = false,
            platformVersions: [Swift.String]? = nil
        )
        {
            self.clusterVersion = clusterVersion
            self.defaultVersion = defaultVersion
            self.platformVersions = platformVersions
        }
    }

}

extension EKSClientTypes {
    public enum ConfigStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case creating
        case deleting
        case sdkUnknown(Swift.String)

        public static var allCases: [ConfigStatus] {
            return [
                .active,
                .creating,
                .deleting,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ConfigStatus(rawValue: rawValue) ?? ConfigStatus.sdkUnknown(rawValue)
        }
    }
}

extension EKSClientTypes {
    public enum ConnectorConfigProvider: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case aks
        case anthos
        case ec2
        case eksAnywhere
        case gke
        case openshift
        case other
        case rancher
        case tanzu
        case sdkUnknown(Swift.String)

        public static var allCases: [ConnectorConfigProvider] {
            return [
                .aks,
                .anthos,
                .ec2,
                .eksAnywhere,
                .gke,
                .openshift,
                .other,
                .rancher,
                .tanzu,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .aks: return "AKS"
            case .anthos: return "ANTHOS"
            case .ec2: return "EC2"
            case .eksAnywhere: return "EKS_ANYWHERE"
            case .gke: return "GKE"
            case .openshift: return "OPENSHIFT"
            case .other: return "OTHER"
            case .rancher: return "RANCHER"
            case .tanzu: return "TANZU"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ConnectorConfigProvider(rawValue: rawValue) ?? ConnectorConfigProvider.sdkUnknown(rawValue)
        }
    }
}

extension EKSClientTypes.ConnectorConfigRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case provider
        case roleArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let provider = self.provider {
            try encodeContainer.encode(provider.rawValue, forKey: .provider)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let providerDecoded = try containerValues.decodeIfPresent(EKSClientTypes.ConnectorConfigProvider.self, forKey: .provider)
        provider = providerDecoded
    }
}

extension EKSClientTypes {
    /// The configuration sent to a cluster for configuration.
    public struct ConnectorConfigRequest: Swift.Equatable {
        /// The cloud provider for the target cluster to connect.
        /// This member is required.
        public var provider: EKSClientTypes.ConnectorConfigProvider?
        /// The Amazon Resource Name (ARN) of the role that is authorized to request the connector configuration.
        /// This member is required.
        public var roleArn: Swift.String?

        public init (
            provider: EKSClientTypes.ConnectorConfigProvider? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.provider = provider
            self.roleArn = roleArn
        }
    }

}

extension EKSClientTypes.ConnectorConfigResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activationCode
        case activationExpiry
        case activationId
        case provider
        case roleArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activationCode = self.activationCode {
            try encodeContainer.encode(activationCode, forKey: .activationCode)
        }
        if let activationExpiry = self.activationExpiry {
            try encodeContainer.encodeTimestamp(activationExpiry, format: .epochSeconds, forKey: .activationExpiry)
        }
        if let activationId = self.activationId {
            try encodeContainer.encode(activationId, forKey: .activationId)
        }
        if let provider = self.provider {
            try encodeContainer.encode(provider, forKey: .provider)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .activationId)
        activationId = activationIdDecoded
        let activationCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .activationCode)
        activationCode = activationCodeDecoded
        let activationExpiryDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .activationExpiry)
        activationExpiry = activationExpiryDecoded
        let providerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .provider)
        provider = providerDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension EKSClientTypes {
    /// The full description of your connected cluster.
    public struct ConnectorConfigResponse: Swift.Equatable {
        /// A unique code associated with the cluster for registration purposes.
        public var activationCode: Swift.String?
        /// The expiration time of the connected cluster. The cluster's YAML file must be applied through the native provider.
        public var activationExpiry: ClientRuntime.Date?
        /// A unique ID associated with the cluster for registration purposes.
        public var activationId: Swift.String?
        /// The cluster's cloud service provider.
        public var provider: Swift.String?
        /// The Amazon Resource Name (ARN) of the role to communicate with services from the connected Kubernetes cluster.
        public var roleArn: Swift.String?

        public init (
            activationCode: Swift.String? = nil,
            activationExpiry: ClientRuntime.Date? = nil,
            activationId: Swift.String? = nil,
            provider: Swift.String? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.activationCode = activationCode
            self.activationExpiry = activationExpiry
            self.activationId = activationId
            self.provider = provider
            self.roleArn = roleArn
        }
    }

}

extension EKSClientTypes.ControlPlanePlacementRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groupName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let groupName = self.groupName {
            try encodeContainer.encode(groupName, forKey: .groupName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupName)
        groupName = groupNameDecoded
    }
}

extension EKSClientTypes {
    /// The placement configuration for all the control plane instances of your local Amazon EKS cluster on an Amazon Web Services Outpost. For more information, see [Capacity considerations](https://docs.aws.amazon.com/eks/latest/userguide/eks-outposts-capacity-considerations.html) in the Amazon EKS User Guide
    public struct ControlPlanePlacementRequest: Swift.Equatable {
        /// The name of the placement group for the Kubernetes control plane instances. This setting can't be changed after cluster creation.
        public var groupName: Swift.String?

        public init (
            groupName: Swift.String? = nil
        )
        {
            self.groupName = groupName
        }
    }

}

extension EKSClientTypes.ControlPlanePlacementResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groupName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let groupName = self.groupName {
            try encodeContainer.encode(groupName, forKey: .groupName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupName)
        groupName = groupNameDecoded
    }
}

extension EKSClientTypes {
    /// The placement configuration for all the control plane instances of your local Amazon EKS cluster on an Amazon Web Services Outpost. For more information, see [Capacity considerations](https://docs.aws.amazon.com/eks/latest/userguide/eks-outposts-capacity-considerations.html) in the Amazon EKS User Guide.
    public struct ControlPlanePlacementResponse: Swift.Equatable {
        /// The name of the placement group for the Kubernetes control plane instances.
        public var groupName: Swift.String?

        public init (
            groupName: Swift.String? = nil
        )
        {
            self.groupName = groupName
        }
    }

}

extension CreateAddonInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addonName
        case addonVersion
        case clientRequestToken
        case configurationValues
        case resolveConflicts
        case serviceAccountRoleArn
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addonName = self.addonName {
            try encodeContainer.encode(addonName, forKey: .addonName)
        }
        if let addonVersion = self.addonVersion {
            try encodeContainer.encode(addonVersion, forKey: .addonVersion)
        }
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let configurationValues = self.configurationValues {
            try encodeContainer.encode(configurationValues, forKey: .configurationValues)
        }
        if let resolveConflicts = self.resolveConflicts {
            try encodeContainer.encode(resolveConflicts.rawValue, forKey: .resolveConflicts)
        }
        if let serviceAccountRoleArn = self.serviceAccountRoleArn {
            try encodeContainer.encode(serviceAccountRoleArn, forKey: .serviceAccountRoleArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagMap0) in tags {
                try tagsContainer.encode(tagMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension CreateAddonInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let clusterName = clusterName else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/addons"
    }
}

public struct CreateAddonInput: Swift.Equatable {
    /// The name of the add-on. The name must match one of the names that [DescribeAddonVersions](https://docs.aws.amazon.com/eks/latest/APIReference/API_DescribeAddonVersions.html) returns.
    /// This member is required.
    public var addonName: Swift.String?
    /// The version of the add-on. The version must match one of the versions returned by [DescribeAddonVersions](https://docs.aws.amazon.com/eks/latest/APIReference/API_DescribeAddonVersions.html).
    public var addonVersion: Swift.String?
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    public var clientRequestToken: Swift.String?
    /// The name of the cluster to create the add-on for.
    /// This member is required.
    public var clusterName: Swift.String?
    /// The set of configuration values for the add-on that's created. The values that you provide are validated against the schema in [DescribeAddonConfiguration](https://docs.aws.amazon.com/eks/latest/APIReference/API_DescribeAddonConfiguration.html).
    public var configurationValues: Swift.String?
    /// How to resolve field value conflicts for an Amazon EKS add-on. Conflicts are handled based on the value you choose:
    ///
    /// * None – If the self-managed version of the add-on is installed on your cluster, Amazon EKS doesn't change the value. Creation of the add-on might fail.
    ///
    /// * Overwrite – If the self-managed version of the add-on is installed on your cluster and the Amazon EKS default value is different than the existing value, Amazon EKS changes the value to the Amazon EKS default value.
    ///
    /// * Preserve – Not supported. You can set this value when updating an add-on though. For more information, see [UpdateAddon](https://docs.aws.amazon.com/eks/latest/APIReference/API_UpdateAddon.html).
    ///
    ///
    /// If you don't currently have the self-managed version of the add-on installed on your cluster, the Amazon EKS add-on is installed. Amazon EKS sets all values to default values, regardless of the option that you specify.
    public var resolveConflicts: EKSClientTypes.ResolveConflicts?
    /// The Amazon Resource Name (ARN) of an existing IAM role to bind to the add-on's service account. The role must be assigned the IAM permissions required by the add-on. If you don't specify an existing IAM role, then the add-on uses the permissions assigned to the node IAM role. For more information, see [Amazon EKS node IAM role](https://docs.aws.amazon.com/eks/latest/userguide/create-node-role.html) in the Amazon EKS User Guide. To specify an existing IAM role, you must have an IAM OpenID Connect (OIDC) provider created for your cluster. For more information, see [Enabling IAM roles for service accounts on your cluster](https://docs.aws.amazon.com/eks/latest/userguide/enable-iam-roles-for-service-accounts.html) in the Amazon EKS User Guide.
    public var serviceAccountRoleArn: Swift.String?
    /// The metadata to apply to the cluster to assist with categorization and organization. Each tag consists of a key and an optional value. You define both.
    public var tags: [Swift.String:Swift.String]?

    public init (
        addonName: Swift.String? = nil,
        addonVersion: Swift.String? = nil,
        clientRequestToken: Swift.String? = nil,
        clusterName: Swift.String? = nil,
        configurationValues: Swift.String? = nil,
        resolveConflicts: EKSClientTypes.ResolveConflicts? = nil,
        serviceAccountRoleArn: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.addonName = addonName
        self.addonVersion = addonVersion
        self.clientRequestToken = clientRequestToken
        self.clusterName = clusterName
        self.configurationValues = configurationValues
        self.resolveConflicts = resolveConflicts
        self.serviceAccountRoleArn = serviceAccountRoleArn
        self.tags = tags
    }
}

struct CreateAddonInputBody: Swift.Equatable {
    let addonName: Swift.String?
    let addonVersion: Swift.String?
    let serviceAccountRoleArn: Swift.String?
    let resolveConflicts: EKSClientTypes.ResolveConflicts?
    let clientRequestToken: Swift.String?
    let tags: [Swift.String:Swift.String]?
    let configurationValues: Swift.String?
}

extension CreateAddonInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addonName
        case addonVersion
        case clientRequestToken
        case configurationValues
        case resolveConflicts
        case serviceAccountRoleArn
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addonNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .addonName)
        addonName = addonNameDecoded
        let addonVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .addonVersion)
        addonVersion = addonVersionDecoded
        let serviceAccountRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceAccountRoleArn)
        serviceAccountRoleArn = serviceAccountRoleArnDecoded
        let resolveConflictsDecoded = try containerValues.decodeIfPresent(EKSClientTypes.ResolveConflicts.self, forKey: .resolveConflicts)
        resolveConflicts = resolveConflictsDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let configurationValuesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationValues)
        configurationValues = configurationValuesDecoded
    }
}

extension CreateAddonOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateAddonOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateAddonOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateAddonOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateAddonOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.addon = output.addon
        } else {
            self.addon = nil
        }
    }
}

public struct CreateAddonOutputResponse: Swift.Equatable {
    /// An Amazon EKS add-on. For more information, see [Amazon EKS add-ons](https://docs.aws.amazon.com/eks/latest/userguide/eks-add-ons.html) in the Amazon EKS User Guide.
    public var addon: EKSClientTypes.Addon?

    public init (
        addon: EKSClientTypes.Addon? = nil
    )
    {
        self.addon = addon
    }
}

struct CreateAddonOutputResponseBody: Swift.Equatable {
    let addon: EKSClientTypes.Addon?
}

extension CreateAddonOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addon
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addonDecoded = try containerValues.decodeIfPresent(EKSClientTypes.Addon.self, forKey: .addon)
        addon = addonDecoded
    }
}

extension CreateClusterInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken
        case encryptionConfig
        case kubernetesNetworkConfig
        case logging
        case name
        case outpostConfig
        case resourcesVpcConfig
        case roleArn
        case tags
        case version
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let encryptionConfig = encryptionConfig {
            var encryptionConfigContainer = encodeContainer.nestedUnkeyedContainer(forKey: .encryptionConfig)
            for encryptionconfig0 in encryptionConfig {
                try encryptionConfigContainer.encode(encryptionconfig0)
            }
        }
        if let kubernetesNetworkConfig = self.kubernetesNetworkConfig {
            try encodeContainer.encode(kubernetesNetworkConfig, forKey: .kubernetesNetworkConfig)
        }
        if let logging = self.logging {
            try encodeContainer.encode(logging, forKey: .logging)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let outpostConfig = self.outpostConfig {
            try encodeContainer.encode(outpostConfig, forKey: .outpostConfig)
        }
        if let resourcesVpcConfig = self.resourcesVpcConfig {
            try encodeContainer.encode(resourcesVpcConfig, forKey: .resourcesVpcConfig)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagMap0) in tags {
                try tagsContainer.encode(tagMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }
}

extension CreateClusterInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/clusters"
    }
}

public struct CreateClusterInput: Swift.Equatable {
    /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    public var clientRequestToken: Swift.String?
    /// The encryption configuration for the cluster.
    public var encryptionConfig: [EKSClientTypes.EncryptionConfig]?
    /// The Kubernetes network configuration for the cluster.
    public var kubernetesNetworkConfig: EKSClientTypes.KubernetesNetworkConfigRequest?
    /// Enable or disable exporting the Kubernetes control plane logs for your cluster to CloudWatch Logs. By default, cluster control plane logs aren't exported to CloudWatch Logs. For more information, see [Amazon EKS Cluster control plane logs](https://docs.aws.amazon.com/eks/latest/userguide/control-plane-logs.html) in the Amazon EKS User Guide . CloudWatch Logs ingestion, archive storage, and data scanning rates apply to exported control plane logs. For more information, see [CloudWatch Pricing](http://aws.amazon.com/cloudwatch/pricing/).
    public var logging: EKSClientTypes.Logging?
    /// The unique name to give to your cluster.
    /// This member is required.
    public var name: Swift.String?
    /// An object representing the configuration of your local Amazon EKS cluster on an Amazon Web Services Outpost. Before creating a local cluster on an Outpost, review [Local clusters for Amazon EKS on Amazon Web Services Outposts](https://docs.aws.amazon.com/eks/latest/userguide/eks-outposts-local-cluster-overview.html) in the Amazon EKS User Guide. This object isn't available for creating Amazon EKS clusters on the Amazon Web Services cloud.
    public var outpostConfig: EKSClientTypes.OutpostConfigRequest?
    /// The VPC configuration that's used by the cluster control plane. Amazon EKS VPC resources have specific requirements to work properly with Kubernetes. For more information, see [Cluster VPC Considerations](https://docs.aws.amazon.com/eks/latest/userguide/network_reqs.html) and [Cluster Security Group Considerations](https://docs.aws.amazon.com/eks/latest/userguide/sec-group-reqs.html) in the Amazon EKS User Guide. You must specify at least two subnets. You can specify up to five security groups. However, we recommend that you use a dedicated security group for your cluster control plane.
    /// This member is required.
    public var resourcesVpcConfig: EKSClientTypes.VpcConfigRequest?
    /// The Amazon Resource Name (ARN) of the IAM role that provides permissions for the Kubernetes control plane to make calls to Amazon Web Services API operations on your behalf. For more information, see [Amazon EKS Service IAM Role](https://docs.aws.amazon.com/eks/latest/userguide/service_IAM_role.html) in the Amazon EKS User Guide .
    /// This member is required.
    public var roleArn: Swift.String?
    /// The metadata to apply to the cluster to assist with categorization and organization. Each tag consists of a key and an optional value. You define both.
    public var tags: [Swift.String:Swift.String]?
    /// The desired Kubernetes version for your cluster. If you don't specify a value here, the default version available in Amazon EKS is used. The default version might not be the latest version available.
    public var version: Swift.String?

    public init (
        clientRequestToken: Swift.String? = nil,
        encryptionConfig: [EKSClientTypes.EncryptionConfig]? = nil,
        kubernetesNetworkConfig: EKSClientTypes.KubernetesNetworkConfigRequest? = nil,
        logging: EKSClientTypes.Logging? = nil,
        name: Swift.String? = nil,
        outpostConfig: EKSClientTypes.OutpostConfigRequest? = nil,
        resourcesVpcConfig: EKSClientTypes.VpcConfigRequest? = nil,
        roleArn: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        version: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.encryptionConfig = encryptionConfig
        self.kubernetesNetworkConfig = kubernetesNetworkConfig
        self.logging = logging
        self.name = name
        self.outpostConfig = outpostConfig
        self.resourcesVpcConfig = resourcesVpcConfig
        self.roleArn = roleArn
        self.tags = tags
        self.version = version
    }
}

struct CreateClusterInputBody: Swift.Equatable {
    let name: Swift.String?
    let version: Swift.String?
    let roleArn: Swift.String?
    let resourcesVpcConfig: EKSClientTypes.VpcConfigRequest?
    let kubernetesNetworkConfig: EKSClientTypes.KubernetesNetworkConfigRequest?
    let logging: EKSClientTypes.Logging?
    let clientRequestToken: Swift.String?
    let tags: [Swift.String:Swift.String]?
    let encryptionConfig: [EKSClientTypes.EncryptionConfig]?
    let outpostConfig: EKSClientTypes.OutpostConfigRequest?
}

extension CreateClusterInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken
        case encryptionConfig
        case kubernetesNetworkConfig
        case logging
        case name
        case outpostConfig
        case resourcesVpcConfig
        case roleArn
        case tags
        case version
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let resourcesVpcConfigDecoded = try containerValues.decodeIfPresent(EKSClientTypes.VpcConfigRequest.self, forKey: .resourcesVpcConfig)
        resourcesVpcConfig = resourcesVpcConfigDecoded
        let kubernetesNetworkConfigDecoded = try containerValues.decodeIfPresent(EKSClientTypes.KubernetesNetworkConfigRequest.self, forKey: .kubernetesNetworkConfig)
        kubernetesNetworkConfig = kubernetesNetworkConfigDecoded
        let loggingDecoded = try containerValues.decodeIfPresent(EKSClientTypes.Logging.self, forKey: .logging)
        logging = loggingDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let encryptionConfigContainer = try containerValues.decodeIfPresent([EKSClientTypes.EncryptionConfig?].self, forKey: .encryptionConfig)
        var encryptionConfigDecoded0:[EKSClientTypes.EncryptionConfig]? = nil
        if let encryptionConfigContainer = encryptionConfigContainer {
            encryptionConfigDecoded0 = [EKSClientTypes.EncryptionConfig]()
            for structure0 in encryptionConfigContainer {
                if let structure0 = structure0 {
                    encryptionConfigDecoded0?.append(structure0)
                }
            }
        }
        encryptionConfig = encryptionConfigDecoded0
        let outpostConfigDecoded = try containerValues.decodeIfPresent(EKSClientTypes.OutpostConfigRequest.self, forKey: .outpostConfig)
        outpostConfig = outpostConfigDecoded
    }
}

extension CreateClusterOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateClusterOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceededException" : self = .resourceLimitExceededException(try ResourceLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAvailabilityZoneException" : self = .unsupportedAvailabilityZoneException(try UnsupportedAvailabilityZoneException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateClusterOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case resourceInUseException(ResourceInUseException)
    case resourceLimitExceededException(ResourceLimitExceededException)
    case serverException(ServerException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unsupportedAvailabilityZoneException(UnsupportedAvailabilityZoneException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateClusterOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateClusterOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.cluster = output.cluster
        } else {
            self.cluster = nil
        }
    }
}

public struct CreateClusterOutputResponse: Swift.Equatable {
    /// The full description of your new cluster.
    public var cluster: EKSClientTypes.Cluster?

    public init (
        cluster: EKSClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

struct CreateClusterOutputResponseBody: Swift.Equatable {
    let cluster: EKSClientTypes.Cluster?
}

extension CreateClusterOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cluster
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterDecoded = try containerValues.decodeIfPresent(EKSClientTypes.Cluster.self, forKey: .cluster)
        cluster = clusterDecoded
    }
}

extension CreateFargateProfileInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken
        case fargateProfileName
        case podExecutionRoleArn
        case selectors
        case subnets
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let fargateProfileName = self.fargateProfileName {
            try encodeContainer.encode(fargateProfileName, forKey: .fargateProfileName)
        }
        if let podExecutionRoleArn = self.podExecutionRoleArn {
            try encodeContainer.encode(podExecutionRoleArn, forKey: .podExecutionRoleArn)
        }
        if let selectors = selectors {
            var selectorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .selectors)
            for fargateprofileselector0 in selectors {
                try selectorsContainer.encode(fargateprofileselector0)
            }
        }
        if let subnets = subnets {
            var subnetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnets)
            for string0 in subnets {
                try subnetsContainer.encode(string0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagMap0) in tags {
                try tagsContainer.encode(tagMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension CreateFargateProfileInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let clusterName = clusterName else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/fargate-profiles"
    }
}

public struct CreateFargateProfileInput: Swift.Equatable {
    /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    public var clientRequestToken: Swift.String?
    /// The name of the Amazon EKS cluster to apply the Fargate profile to.
    /// This member is required.
    public var clusterName: Swift.String?
    /// The name of the Fargate profile.
    /// This member is required.
    public var fargateProfileName: Swift.String?
    /// The Amazon Resource Name (ARN) of the pod execution role to use for pods that match the selectors in the Fargate profile. The pod execution role allows Fargate infrastructure to register with your cluster as a node, and it provides read access to Amazon ECR image repositories. For more information, see [Pod Execution Role](https://docs.aws.amazon.com/eks/latest/userguide/pod-execution-role.html) in the Amazon EKS User Guide.
    /// This member is required.
    public var podExecutionRoleArn: Swift.String?
    /// The selectors to match for pods to use this Fargate profile. Each selector must have an associated namespace. Optionally, you can also specify labels for a namespace. You may specify up to five selectors in a Fargate profile.
    public var selectors: [EKSClientTypes.FargateProfileSelector]?
    /// The IDs of subnets to launch your pods into. At this time, pods running on Fargate are not assigned public IP addresses, so only private subnets (with no direct route to an Internet Gateway) are accepted for this parameter.
    public var subnets: [Swift.String]?
    /// The metadata to apply to the Fargate profile to assist with categorization and organization. Each tag consists of a key and an optional value. You define both. Fargate profile tags do not propagate to any other resources associated with the Fargate profile, such as the pods that are scheduled with it.
    public var tags: [Swift.String:Swift.String]?

    public init (
        clientRequestToken: Swift.String? = nil,
        clusterName: Swift.String? = nil,
        fargateProfileName: Swift.String? = nil,
        podExecutionRoleArn: Swift.String? = nil,
        selectors: [EKSClientTypes.FargateProfileSelector]? = nil,
        subnets: [Swift.String]? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.clusterName = clusterName
        self.fargateProfileName = fargateProfileName
        self.podExecutionRoleArn = podExecutionRoleArn
        self.selectors = selectors
        self.subnets = subnets
        self.tags = tags
    }
}

struct CreateFargateProfileInputBody: Swift.Equatable {
    let fargateProfileName: Swift.String?
    let podExecutionRoleArn: Swift.String?
    let subnets: [Swift.String]?
    let selectors: [EKSClientTypes.FargateProfileSelector]?
    let clientRequestToken: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension CreateFargateProfileInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken
        case fargateProfileName
        case podExecutionRoleArn
        case selectors
        case subnets
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fargateProfileNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fargateProfileName)
        fargateProfileName = fargateProfileNameDecoded
        let podExecutionRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .podExecutionRoleArn)
        podExecutionRoleArn = podExecutionRoleArnDecoded
        let subnetsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnets)
        var subnetsDecoded0:[Swift.String]? = nil
        if let subnetsContainer = subnetsContainer {
            subnetsDecoded0 = [Swift.String]()
            for string0 in subnetsContainer {
                if let string0 = string0 {
                    subnetsDecoded0?.append(string0)
                }
            }
        }
        subnets = subnetsDecoded0
        let selectorsContainer = try containerValues.decodeIfPresent([EKSClientTypes.FargateProfileSelector?].self, forKey: .selectors)
        var selectorsDecoded0:[EKSClientTypes.FargateProfileSelector]? = nil
        if let selectorsContainer = selectorsContainer {
            selectorsDecoded0 = [EKSClientTypes.FargateProfileSelector]()
            for structure0 in selectorsContainer {
                if let structure0 = structure0 {
                    selectorsDecoded0?.append(structure0)
                }
            }
        }
        selectors = selectorsDecoded0
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateFargateProfileOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateFargateProfileOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceededException" : self = .resourceLimitExceededException(try ResourceLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedAvailabilityZoneException" : self = .unsupportedAvailabilityZoneException(try UnsupportedAvailabilityZoneException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateFargateProfileOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceLimitExceededException(ResourceLimitExceededException)
    case serverException(ServerException)
    case unsupportedAvailabilityZoneException(UnsupportedAvailabilityZoneException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateFargateProfileOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateFargateProfileOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.fargateProfile = output.fargateProfile
        } else {
            self.fargateProfile = nil
        }
    }
}

public struct CreateFargateProfileOutputResponse: Swift.Equatable {
    /// The full description of your new Fargate profile.
    public var fargateProfile: EKSClientTypes.FargateProfile?

    public init (
        fargateProfile: EKSClientTypes.FargateProfile? = nil
    )
    {
        self.fargateProfile = fargateProfile
    }
}

struct CreateFargateProfileOutputResponseBody: Swift.Equatable {
    let fargateProfile: EKSClientTypes.FargateProfile?
}

extension CreateFargateProfileOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fargateProfile
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fargateProfileDecoded = try containerValues.decodeIfPresent(EKSClientTypes.FargateProfile.self, forKey: .fargateProfile)
        fargateProfile = fargateProfileDecoded
    }
}

extension CreateNodegroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case amiType
        case capacityType
        case clientRequestToken
        case diskSize
        case instanceTypes
        case labels
        case launchTemplate
        case nodeRole
        case nodegroupName
        case releaseVersion
        case remoteAccess
        case scalingConfig
        case subnets
        case tags
        case taints
        case updateConfig
        case version
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let amiType = self.amiType {
            try encodeContainer.encode(amiType.rawValue, forKey: .amiType)
        }
        if let capacityType = self.capacityType {
            try encodeContainer.encode(capacityType.rawValue, forKey: .capacityType)
        }
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let diskSize = self.diskSize {
            try encodeContainer.encode(diskSize, forKey: .diskSize)
        }
        if let instanceTypes = instanceTypes {
            var instanceTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceTypes)
            for string0 in instanceTypes {
                try instanceTypesContainer.encode(string0)
            }
        }
        if let labels = labels {
            var labelsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .labels)
            for (dictKey0, labelsMap0) in labels {
                try labelsContainer.encode(labelsMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let launchTemplate = self.launchTemplate {
            try encodeContainer.encode(launchTemplate, forKey: .launchTemplate)
        }
        if let nodeRole = self.nodeRole {
            try encodeContainer.encode(nodeRole, forKey: .nodeRole)
        }
        if let nodegroupName = self.nodegroupName {
            try encodeContainer.encode(nodegroupName, forKey: .nodegroupName)
        }
        if let releaseVersion = self.releaseVersion {
            try encodeContainer.encode(releaseVersion, forKey: .releaseVersion)
        }
        if let remoteAccess = self.remoteAccess {
            try encodeContainer.encode(remoteAccess, forKey: .remoteAccess)
        }
        if let scalingConfig = self.scalingConfig {
            try encodeContainer.encode(scalingConfig, forKey: .scalingConfig)
        }
        if let subnets = subnets {
            var subnetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnets)
            for string0 in subnets {
                try subnetsContainer.encode(string0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagMap0) in tags {
                try tagsContainer.encode(tagMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let taints = taints {
            var taintsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .taints)
            for taint0 in taints {
                try taintsContainer.encode(taint0)
            }
        }
        if let updateConfig = self.updateConfig {
            try encodeContainer.encode(updateConfig, forKey: .updateConfig)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }
}

extension CreateNodegroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let clusterName = clusterName else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/node-groups"
    }
}

public struct CreateNodegroupInput: Swift.Equatable {
    /// The AMI type for your node group. If you specify launchTemplate, and your launch template uses a custom AMI, then don't specify amiType, or the node group deployment will fail. If your launch template uses a Windows custom AMI, then add eks:kube-proxy-windows to your Windows nodes rolearn in the aws-authConfigMap. For more information about using launch templates with Amazon EKS, see [Launch template support](https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html) in the Amazon EKS User Guide.
    public var amiType: EKSClientTypes.AMITypes?
    /// The capacity type for your node group.
    public var capacityType: EKSClientTypes.CapacityTypes?
    /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    public var clientRequestToken: Swift.String?
    /// The name of the cluster to create the node group in.
    /// This member is required.
    public var clusterName: Swift.String?
    /// The root device disk size (in GiB) for your node group instances. The default disk size is 20 GiB for Linux and Bottlerocket. The default disk size is 50 GiB for Windows. If you specify launchTemplate, then don't specify diskSize, or the node group deployment will fail. For more information about using launch templates with Amazon EKS, see [Launch template support](https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html) in the Amazon EKS User Guide.
    public var diskSize: Swift.Int?
    /// Specify the instance types for a node group. If you specify a GPU instance type, make sure to also specify an applicable GPU AMI type with the amiType parameter. If you specify launchTemplate, then you can specify zero or one instance type in your launch template or you can specify 0-20 instance types for instanceTypes. If however, you specify an instance type in your launch template and specify any instanceTypes, the node group deployment will fail. If you don't specify an instance type in a launch template or for instanceTypes, then t3.medium is used, by default. If you specify Spot for capacityType, then we recommend specifying multiple values for instanceTypes. For more information, see [Managed node group capacity types](https://docs.aws.amazon.com/eks/latest/userguide/managed-node-groups.html#managed-node-group-capacity-types) and [Launch template support](https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html) in the Amazon EKS User Guide.
    public var instanceTypes: [Swift.String]?
    /// The Kubernetes labels to be applied to the nodes in the node group when they are created.
    public var labels: [Swift.String:Swift.String]?
    /// An object representing a node group's launch template specification. If specified, then do not specify instanceTypes, diskSize, or remoteAccess and make sure that the launch template meets the requirements in launchTemplateSpecification.
    public var launchTemplate: EKSClientTypes.LaunchTemplateSpecification?
    /// The Amazon Resource Name (ARN) of the IAM role to associate with your node group. The Amazon EKS worker node kubelet daemon makes calls to Amazon Web Services APIs on your behalf. Nodes receive permissions for these API calls through an IAM instance profile and associated policies. Before you can launch nodes and register them into a cluster, you must create an IAM role for those nodes to use when they are launched. For more information, see [Amazon EKS node IAM role](https://docs.aws.amazon.com/eks/latest/userguide/create-node-role.html) in the Amazon EKS User Guide . If you specify launchTemplate, then don't specify [IamInstanceProfile](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_IamInstanceProfile.html) in your launch template, or the node group deployment will fail. For more information about using launch templates with Amazon EKS, see [Launch template support](https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html) in the Amazon EKS User Guide.
    /// This member is required.
    public var nodeRole: Swift.String?
    /// The unique name to give your node group.
    /// This member is required.
    public var nodegroupName: Swift.String?
    /// The AMI version of the Amazon EKS optimized AMI to use with your node group. By default, the latest available AMI version for the node group's current Kubernetes version is used. For information about Linux versions, see [Amazon EKS optimized Amazon Linux AMI versions](https://docs.aws.amazon.com/eks/latest/userguide/eks-linux-ami-versions.html) in the Amazon EKS User Guide. Amazon EKS managed node groups support the November 2022 and later releases of the Windows AMIs. For information about Windows versions, see [Amazon EKS optimized Windows AMI versions](https://docs.aws.amazon.com/eks/latest/userguide/eks-ami-versions-windows.html) in the Amazon EKS User Guide. If you specify launchTemplate, and your launch template uses a custom AMI, then don't specify releaseVersion, or the node group deployment will fail. For more information about using launch templates with Amazon EKS, see [Launch template support](https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html) in the Amazon EKS User Guide.
    public var releaseVersion: Swift.String?
    /// The remote access configuration to use with your node group. For Linux, the protocol is SSH. For Windows, the protocol is RDP. If you specify launchTemplate, then don't specify remoteAccess, or the node group deployment will fail. For more information about using launch templates with Amazon EKS, see [Launch template support](https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html) in the Amazon EKS User Guide.
    public var remoteAccess: EKSClientTypes.RemoteAccessConfig?
    /// The scaling configuration details for the Auto Scaling group that is created for your node group.
    public var scalingConfig: EKSClientTypes.NodegroupScalingConfig?
    /// The subnets to use for the Auto Scaling group that is created for your node group. If you specify launchTemplate, then don't specify [SubnetId](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateNetworkInterface.html) in your launch template, or the node group deployment will fail. For more information about using launch templates with Amazon EKS, see [Launch template support](https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html) in the Amazon EKS User Guide.
    /// This member is required.
    public var subnets: [Swift.String]?
    /// The metadata to apply to the node group to assist with categorization and organization. Each tag consists of a key and an optional value. You define both. Node group tags do not propagate to any other resources associated with the node group, such as the Amazon EC2 instances or subnets.
    public var tags: [Swift.String:Swift.String]?
    /// The Kubernetes taints to be applied to the nodes in the node group. For more information, see [Node taints on managed node groups](https://docs.aws.amazon.com/eks/latest/userguide/node-taints-managed-node-groups.html).
    public var taints: [EKSClientTypes.Taint]?
    /// The node group update configuration.
    public var updateConfig: EKSClientTypes.NodegroupUpdateConfig?
    /// The Kubernetes version to use for your managed nodes. By default, the Kubernetes version of the cluster is used, and this is the only accepted specified value. If you specify launchTemplate, and your launch template uses a custom AMI, then don't specify version, or the node group deployment will fail. For more information about using launch templates with Amazon EKS, see [Launch template support](https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html) in the Amazon EKS User Guide.
    public var version: Swift.String?

    public init (
        amiType: EKSClientTypes.AMITypes? = nil,
        capacityType: EKSClientTypes.CapacityTypes? = nil,
        clientRequestToken: Swift.String? = nil,
        clusterName: Swift.String? = nil,
        diskSize: Swift.Int? = nil,
        instanceTypes: [Swift.String]? = nil,
        labels: [Swift.String:Swift.String]? = nil,
        launchTemplate: EKSClientTypes.LaunchTemplateSpecification? = nil,
        nodeRole: Swift.String? = nil,
        nodegroupName: Swift.String? = nil,
        releaseVersion: Swift.String? = nil,
        remoteAccess: EKSClientTypes.RemoteAccessConfig? = nil,
        scalingConfig: EKSClientTypes.NodegroupScalingConfig? = nil,
        subnets: [Swift.String]? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        taints: [EKSClientTypes.Taint]? = nil,
        updateConfig: EKSClientTypes.NodegroupUpdateConfig? = nil,
        version: Swift.String? = nil
    )
    {
        self.amiType = amiType
        self.capacityType = capacityType
        self.clientRequestToken = clientRequestToken
        self.clusterName = clusterName
        self.diskSize = diskSize
        self.instanceTypes = instanceTypes
        self.labels = labels
        self.launchTemplate = launchTemplate
        self.nodeRole = nodeRole
        self.nodegroupName = nodegroupName
        self.releaseVersion = releaseVersion
        self.remoteAccess = remoteAccess
        self.scalingConfig = scalingConfig
        self.subnets = subnets
        self.tags = tags
        self.taints = taints
        self.updateConfig = updateConfig
        self.version = version
    }
}

struct CreateNodegroupInputBody: Swift.Equatable {
    let nodegroupName: Swift.String?
    let scalingConfig: EKSClientTypes.NodegroupScalingConfig?
    let diskSize: Swift.Int?
    let subnets: [Swift.String]?
    let instanceTypes: [Swift.String]?
    let amiType: EKSClientTypes.AMITypes?
    let remoteAccess: EKSClientTypes.RemoteAccessConfig?
    let nodeRole: Swift.String?
    let labels: [Swift.String:Swift.String]?
    let taints: [EKSClientTypes.Taint]?
    let tags: [Swift.String:Swift.String]?
    let clientRequestToken: Swift.String?
    let launchTemplate: EKSClientTypes.LaunchTemplateSpecification?
    let updateConfig: EKSClientTypes.NodegroupUpdateConfig?
    let capacityType: EKSClientTypes.CapacityTypes?
    let version: Swift.String?
    let releaseVersion: Swift.String?
}

extension CreateNodegroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case amiType
        case capacityType
        case clientRequestToken
        case diskSize
        case instanceTypes
        case labels
        case launchTemplate
        case nodeRole
        case nodegroupName
        case releaseVersion
        case remoteAccess
        case scalingConfig
        case subnets
        case tags
        case taints
        case updateConfig
        case version
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nodegroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodegroupName)
        nodegroupName = nodegroupNameDecoded
        let scalingConfigDecoded = try containerValues.decodeIfPresent(EKSClientTypes.NodegroupScalingConfig.self, forKey: .scalingConfig)
        scalingConfig = scalingConfigDecoded
        let diskSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .diskSize)
        diskSize = diskSizeDecoded
        let subnetsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnets)
        var subnetsDecoded0:[Swift.String]? = nil
        if let subnetsContainer = subnetsContainer {
            subnetsDecoded0 = [Swift.String]()
            for string0 in subnetsContainer {
                if let string0 = string0 {
                    subnetsDecoded0?.append(string0)
                }
            }
        }
        subnets = subnetsDecoded0
        let instanceTypesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .instanceTypes)
        var instanceTypesDecoded0:[Swift.String]? = nil
        if let instanceTypesContainer = instanceTypesContainer {
            instanceTypesDecoded0 = [Swift.String]()
            for string0 in instanceTypesContainer {
                if let string0 = string0 {
                    instanceTypesDecoded0?.append(string0)
                }
            }
        }
        instanceTypes = instanceTypesDecoded0
        let amiTypeDecoded = try containerValues.decodeIfPresent(EKSClientTypes.AMITypes.self, forKey: .amiType)
        amiType = amiTypeDecoded
        let remoteAccessDecoded = try containerValues.decodeIfPresent(EKSClientTypes.RemoteAccessConfig.self, forKey: .remoteAccess)
        remoteAccess = remoteAccessDecoded
        let nodeRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeRole)
        nodeRole = nodeRoleDecoded
        let labelsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .labels)
        var labelsDecoded0: [Swift.String:Swift.String]? = nil
        if let labelsContainer = labelsContainer {
            labelsDecoded0 = [Swift.String:Swift.String]()
            for (key0, labelvalue0) in labelsContainer {
                if let labelvalue0 = labelvalue0 {
                    labelsDecoded0?[key0] = labelvalue0
                }
            }
        }
        labels = labelsDecoded0
        let taintsContainer = try containerValues.decodeIfPresent([EKSClientTypes.Taint?].self, forKey: .taints)
        var taintsDecoded0:[EKSClientTypes.Taint]? = nil
        if let taintsContainer = taintsContainer {
            taintsDecoded0 = [EKSClientTypes.Taint]()
            for structure0 in taintsContainer {
                if let structure0 = structure0 {
                    taintsDecoded0?.append(structure0)
                }
            }
        }
        taints = taintsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let launchTemplateDecoded = try containerValues.decodeIfPresent(EKSClientTypes.LaunchTemplateSpecification.self, forKey: .launchTemplate)
        launchTemplate = launchTemplateDecoded
        let updateConfigDecoded = try containerValues.decodeIfPresent(EKSClientTypes.NodegroupUpdateConfig.self, forKey: .updateConfig)
        updateConfig = updateConfigDecoded
        let capacityTypeDecoded = try containerValues.decodeIfPresent(EKSClientTypes.CapacityTypes.self, forKey: .capacityType)
        capacityType = capacityTypeDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let releaseVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .releaseVersion)
        releaseVersion = releaseVersionDecoded
    }
}

extension CreateNodegroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateNodegroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceededException" : self = .resourceLimitExceededException(try ResourceLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateNodegroupOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceInUseException(ResourceInUseException)
    case resourceLimitExceededException(ResourceLimitExceededException)
    case serverException(ServerException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateNodegroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateNodegroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nodegroup = output.nodegroup
        } else {
            self.nodegroup = nil
        }
    }
}

public struct CreateNodegroupOutputResponse: Swift.Equatable {
    /// The full description of your new node group.
    public var nodegroup: EKSClientTypes.Nodegroup?

    public init (
        nodegroup: EKSClientTypes.Nodegroup? = nil
    )
    {
        self.nodegroup = nodegroup
    }
}

struct CreateNodegroupOutputResponseBody: Swift.Equatable {
    let nodegroup: EKSClientTypes.Nodegroup?
}

extension CreateNodegroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nodegroup
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nodegroupDecoded = try containerValues.decodeIfPresent(EKSClientTypes.Nodegroup.self, forKey: .nodegroup)
        nodegroup = nodegroupDecoded
    }
}

extension DeleteAddonInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if preserve != false {
                let preserveQueryItem = ClientRuntime.URLQueryItem(name: "preserve".urlPercentEncoding(), value: Swift.String(preserve).urlPercentEncoding())
                items.append(preserveQueryItem)
            }
            return items
        }
    }
}

extension DeleteAddonInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let clusterName = clusterName else {
            return nil
        }
        guard let addonName = addonName else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/addons/\(addonName.urlPercentEncoding())"
    }
}

public struct DeleteAddonInput: Swift.Equatable {
    /// The name of the add-on. The name must match one of the names returned by [ListAddons](https://docs.aws.amazon.com/eks/latest/APIReference/API_ListAddons.html).
    /// This member is required.
    public var addonName: Swift.String?
    /// The name of the cluster to delete the add-on from.
    /// This member is required.
    public var clusterName: Swift.String?
    /// Specifying this option preserves the add-on software on your cluster but Amazon EKS stops managing any settings for the add-on. If an IAM account is associated with the add-on, it isn't removed.
    public var preserve: Swift.Bool

    public init (
        addonName: Swift.String? = nil,
        clusterName: Swift.String? = nil,
        preserve: Swift.Bool = false
    )
    {
        self.addonName = addonName
        self.clusterName = clusterName
        self.preserve = preserve
    }
}

struct DeleteAddonInputBody: Swift.Equatable {
}

extension DeleteAddonInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteAddonOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteAddonOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteAddonOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteAddonOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteAddonOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.addon = output.addon
        } else {
            self.addon = nil
        }
    }
}

public struct DeleteAddonOutputResponse: Swift.Equatable {
    /// An Amazon EKS add-on. For more information, see [Amazon EKS add-ons](https://docs.aws.amazon.com/eks/latest/userguide/eks-add-ons.html) in the Amazon EKS User Guide.
    public var addon: EKSClientTypes.Addon?

    public init (
        addon: EKSClientTypes.Addon? = nil
    )
    {
        self.addon = addon
    }
}

struct DeleteAddonOutputResponseBody: Swift.Equatable {
    let addon: EKSClientTypes.Addon?
}

extension DeleteAddonOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addon
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addonDecoded = try containerValues.decodeIfPresent(EKSClientTypes.Addon.self, forKey: .addon)
        addon = addonDecoded
    }
}

extension DeleteClusterInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let name = name else {
            return nil
        }
        return "/clusters/\(name.urlPercentEncoding())"
    }
}

public struct DeleteClusterInput: Swift.Equatable {
    /// The name of the cluster to delete.
    /// This member is required.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct DeleteClusterInputBody: Swift.Equatable {
}

extension DeleteClusterInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteClusterOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteClusterOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteClusterOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteClusterOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteClusterOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.cluster = output.cluster
        } else {
            self.cluster = nil
        }
    }
}

public struct DeleteClusterOutputResponse: Swift.Equatable {
    /// The full description of the cluster to delete.
    public var cluster: EKSClientTypes.Cluster?

    public init (
        cluster: EKSClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

struct DeleteClusterOutputResponseBody: Swift.Equatable {
    let cluster: EKSClientTypes.Cluster?
}

extension DeleteClusterOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cluster
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterDecoded = try containerValues.decodeIfPresent(EKSClientTypes.Cluster.self, forKey: .cluster)
        cluster = clusterDecoded
    }
}

extension DeleteFargateProfileInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let clusterName = clusterName else {
            return nil
        }
        guard let fargateProfileName = fargateProfileName else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/fargate-profiles/\(fargateProfileName.urlPercentEncoding())"
    }
}

public struct DeleteFargateProfileInput: Swift.Equatable {
    /// The name of the Amazon EKS cluster associated with the Fargate profile to delete.
    /// This member is required.
    public var clusterName: Swift.String?
    /// The name of the Fargate profile to delete.
    /// This member is required.
    public var fargateProfileName: Swift.String?

    public init (
        clusterName: Swift.String? = nil,
        fargateProfileName: Swift.String? = nil
    )
    {
        self.clusterName = clusterName
        self.fargateProfileName = fargateProfileName
    }
}

struct DeleteFargateProfileInputBody: Swift.Equatable {
}

extension DeleteFargateProfileInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteFargateProfileOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteFargateProfileOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteFargateProfileOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteFargateProfileOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteFargateProfileOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.fargateProfile = output.fargateProfile
        } else {
            self.fargateProfile = nil
        }
    }
}

public struct DeleteFargateProfileOutputResponse: Swift.Equatable {
    /// The deleted Fargate profile.
    public var fargateProfile: EKSClientTypes.FargateProfile?

    public init (
        fargateProfile: EKSClientTypes.FargateProfile? = nil
    )
    {
        self.fargateProfile = fargateProfile
    }
}

struct DeleteFargateProfileOutputResponseBody: Swift.Equatable {
    let fargateProfile: EKSClientTypes.FargateProfile?
}

extension DeleteFargateProfileOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fargateProfile
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fargateProfileDecoded = try containerValues.decodeIfPresent(EKSClientTypes.FargateProfile.self, forKey: .fargateProfile)
        fargateProfile = fargateProfileDecoded
    }
}

extension DeleteNodegroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let clusterName = clusterName else {
            return nil
        }
        guard let nodegroupName = nodegroupName else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/node-groups/\(nodegroupName.urlPercentEncoding())"
    }
}

public struct DeleteNodegroupInput: Swift.Equatable {
    /// The name of the Amazon EKS cluster that is associated with your node group.
    /// This member is required.
    public var clusterName: Swift.String?
    /// The name of the node group to delete.
    /// This member is required.
    public var nodegroupName: Swift.String?

    public init (
        clusterName: Swift.String? = nil,
        nodegroupName: Swift.String? = nil
    )
    {
        self.clusterName = clusterName
        self.nodegroupName = nodegroupName
    }
}

struct DeleteNodegroupInputBody: Swift.Equatable {
}

extension DeleteNodegroupInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteNodegroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteNodegroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteNodegroupOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteNodegroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteNodegroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nodegroup = output.nodegroup
        } else {
            self.nodegroup = nil
        }
    }
}

public struct DeleteNodegroupOutputResponse: Swift.Equatable {
    /// The full description of your deleted node group.
    public var nodegroup: EKSClientTypes.Nodegroup?

    public init (
        nodegroup: EKSClientTypes.Nodegroup? = nil
    )
    {
        self.nodegroup = nodegroup
    }
}

struct DeleteNodegroupOutputResponseBody: Swift.Equatable {
    let nodegroup: EKSClientTypes.Nodegroup?
}

extension DeleteNodegroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nodegroup
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nodegroupDecoded = try containerValues.decodeIfPresent(EKSClientTypes.Nodegroup.self, forKey: .nodegroup)
        nodegroup = nodegroupDecoded
    }
}

extension DeregisterClusterInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let name = name else {
            return nil
        }
        return "/cluster-registrations/\(name.urlPercentEncoding())"
    }
}

public struct DeregisterClusterInput: Swift.Equatable {
    /// The name of the connected cluster to deregister.
    /// This member is required.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct DeregisterClusterInputBody: Swift.Equatable {
}

extension DeregisterClusterInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeregisterClusterOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeregisterClusterOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeregisterClusterOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case clientException(ClientException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeregisterClusterOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeregisterClusterOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.cluster = output.cluster
        } else {
            self.cluster = nil
        }
    }
}

public struct DeregisterClusterOutputResponse: Swift.Equatable {
    /// An object representing an Amazon EKS cluster.
    public var cluster: EKSClientTypes.Cluster?

    public init (
        cluster: EKSClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

struct DeregisterClusterOutputResponseBody: Swift.Equatable {
    let cluster: EKSClientTypes.Cluster?
}

extension DeregisterClusterOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cluster
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterDecoded = try containerValues.decodeIfPresent(EKSClientTypes.Cluster.self, forKey: .cluster)
        cluster = clusterDecoded
    }
}

extension DescribeAddonConfigurationInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            guard let addonName = addonName else {
                let message = "Creating a URL Query Item failed. addonName is required and must not be nil."
                throw ClientRuntime.ClientError.queryItemCreationFailed(message)
            }
            let addonNameQueryItem = ClientRuntime.URLQueryItem(name: "addonName".urlPercentEncoding(), value: Swift.String(addonName).urlPercentEncoding())
            items.append(addonNameQueryItem)
            guard let addonVersion = addonVersion else {
                let message = "Creating a URL Query Item failed. addonVersion is required and must not be nil."
                throw ClientRuntime.ClientError.queryItemCreationFailed(message)
            }
            let addonVersionQueryItem = ClientRuntime.URLQueryItem(name: "addonVersion".urlPercentEncoding(), value: Swift.String(addonVersion).urlPercentEncoding())
            items.append(addonVersionQueryItem)
            return items
        }
    }
}

extension DescribeAddonConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/addons/configuration-schemas"
    }
}

public struct DescribeAddonConfigurationInput: Swift.Equatable {
    /// The name of the add-on. The name must match one of the names that [DescribeAddonVersions](https://docs.aws.amazon.com/eks/latest/APIReference/API_DescribeAddonVersions.html) returns.
    /// This member is required.
    public var addonName: Swift.String?
    /// The version of the add-on. The version must match one of the versions returned by [DescribeAddonVersions](https://docs.aws.amazon.com/eks/latest/APIReference/API_DescribeAddonVersions.html).
    /// This member is required.
    public var addonVersion: Swift.String?

    public init (
        addonName: Swift.String? = nil,
        addonVersion: Swift.String? = nil
    )
    {
        self.addonName = addonName
        self.addonVersion = addonVersion
    }
}

struct DescribeAddonConfigurationInputBody: Swift.Equatable {
}

extension DescribeAddonConfigurationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeAddonConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeAddonConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeAddonConfigurationOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAddonConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeAddonConfigurationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.addonName = output.addonName
            self.addonVersion = output.addonVersion
            self.configurationSchema = output.configurationSchema
        } else {
            self.addonName = nil
            self.addonVersion = nil
            self.configurationSchema = nil
        }
    }
}

public struct DescribeAddonConfigurationOutputResponse: Swift.Equatable {
    /// The name of the add-on.
    public var addonName: Swift.String?
    /// The version of the add-on. The version must match one of the versions returned by [DescribeAddonVersions](https://docs.aws.amazon.com/eks/latest/APIReference/API_DescribeAddonVersions.html).
    public var addonVersion: Swift.String?
    /// A JSON schema that's used to validate the configuration values that you provide when an addon is created or updated.
    public var configurationSchema: Swift.String?

    public init (
        addonName: Swift.String? = nil,
        addonVersion: Swift.String? = nil,
        configurationSchema: Swift.String? = nil
    )
    {
        self.addonName = addonName
        self.addonVersion = addonVersion
        self.configurationSchema = configurationSchema
    }
}

struct DescribeAddonConfigurationOutputResponseBody: Swift.Equatable {
    let addonName: Swift.String?
    let addonVersion: Swift.String?
    let configurationSchema: Swift.String?
}

extension DescribeAddonConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addonName
        case addonVersion
        case configurationSchema
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addonNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .addonName)
        addonName = addonNameDecoded
        let addonVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .addonVersion)
        addonVersion = addonVersionDecoded
        let configurationSchemaDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSchema)
        configurationSchema = configurationSchemaDecoded
    }
}

extension DescribeAddonInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let clusterName = clusterName else {
            return nil
        }
        guard let addonName = addonName else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/addons/\(addonName.urlPercentEncoding())"
    }
}

public struct DescribeAddonInput: Swift.Equatable {
    /// The name of the add-on. The name must match one of the names returned by [ListAddons](https://docs.aws.amazon.com/eks/latest/APIReference/API_ListAddons.html).
    /// This member is required.
    public var addonName: Swift.String?
    /// The name of the cluster.
    /// This member is required.
    public var clusterName: Swift.String?

    public init (
        addonName: Swift.String? = nil,
        clusterName: Swift.String? = nil
    )
    {
        self.addonName = addonName
        self.clusterName = clusterName
    }
}

struct DescribeAddonInputBody: Swift.Equatable {
}

extension DescribeAddonInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeAddonOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeAddonOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

extension DescribeAddonOutputError: WaiterTypedError {

    /// The Smithy identifier, without namespace, for the type of this error, or `nil` if the
    /// error has no known type.
    public var waiterErrorType: String? {
        switch self {
        case .clientException: return "ClientException"
        case .invalidParameterException: return "InvalidParameterException"
        case .invalidRequestException: return "InvalidRequestException"
        case .resourceNotFoundException: return "ResourceNotFoundException"
        case .serverException: return "ServerException"
        case .unknown(let error): return error.waiterErrorType
        }
    }
}

public enum DescribeAddonOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAddonOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeAddonOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.addon = output.addon
        } else {
            self.addon = nil
        }
    }
}

public struct DescribeAddonOutputResponse: Swift.Equatable {
    /// An Amazon EKS add-on. For more information, see [Amazon EKS add-ons](https://docs.aws.amazon.com/eks/latest/userguide/eks-add-ons.html) in the Amazon EKS User Guide.
    public var addon: EKSClientTypes.Addon?

    public init (
        addon: EKSClientTypes.Addon? = nil
    )
    {
        self.addon = addon
    }
}

struct DescribeAddonOutputResponseBody: Swift.Equatable {
    let addon: EKSClientTypes.Addon?
}

extension DescribeAddonOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addon
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addonDecoded = try containerValues.decodeIfPresent(EKSClientTypes.Addon.self, forKey: .addon)
        addon = addonDecoded
    }
}

extension DescribeAddonVersionsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let types = types {
                types.forEach { queryItemValue in
                    let queryItem = ClientRuntime.URLQueryItem(name: "types".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
                    items.append(queryItem)
                }
            }
            if let addonName = addonName {
                let addonNameQueryItem = ClientRuntime.URLQueryItem(name: "addonName".urlPercentEncoding(), value: Swift.String(addonName).urlPercentEncoding())
                items.append(addonNameQueryItem)
            }
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let publishers = publishers {
                publishers.forEach { queryItemValue in
                    let queryItem = ClientRuntime.URLQueryItem(name: "publishers".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
                    items.append(queryItem)
                }
            }
            if let owners = owners {
                owners.forEach { queryItemValue in
                    let queryItem = ClientRuntime.URLQueryItem(name: "owners".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
                    items.append(queryItem)
                }
            }
            if let kubernetesVersion = kubernetesVersion {
                let kubernetesVersionQueryItem = ClientRuntime.URLQueryItem(name: "kubernetesVersion".urlPercentEncoding(), value: Swift.String(kubernetesVersion).urlPercentEncoding())
                items.append(kubernetesVersionQueryItem)
            }
            return items
        }
    }
}

extension DescribeAddonVersionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/addons/supported-versions"
    }
}

public struct DescribeAddonVersionsInput: Swift.Equatable {
    /// The name of the add-on. The name must match one of the names returned by [ListAddons](https://docs.aws.amazon.com/eks/latest/APIReference/API_ListAddons.html).
    public var addonName: Swift.String?
    /// The Kubernetes versions that you can use the add-on with.
    public var kubernetesVersion: Swift.String?
    /// The maximum number of results to return.
    public var maxResults: Swift.Int?
    /// The nextToken value returned from a previous paginated DescribeAddonVersionsRequest where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?
    /// The owner of the add-on. For valid owners, don't specify a value for this property.
    public var owners: [Swift.String]?
    /// The publisher of the add-on. For valid publishers, don't specify a value for this property.
    public var publishers: [Swift.String]?
    /// The type of the add-on. For valid types, don't specify a value for this property.
    public var types: [Swift.String]?

    public init (
        addonName: Swift.String? = nil,
        kubernetesVersion: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        owners: [Swift.String]? = nil,
        publishers: [Swift.String]? = nil,
        types: [Swift.String]? = nil
    )
    {
        self.addonName = addonName
        self.kubernetesVersion = kubernetesVersion
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.owners = owners
        self.publishers = publishers
        self.types = types
    }
}

struct DescribeAddonVersionsInputBody: Swift.Equatable {
}

extension DescribeAddonVersionsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeAddonVersionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeAddonVersionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeAddonVersionsOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAddonVersionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeAddonVersionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.addons = output.addons
            self.nextToken = output.nextToken
        } else {
            self.addons = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeAddonVersionsOutputResponse: Swift.Equatable {
    /// The list of available versions with Kubernetes version compatibility and other properties.
    public var addons: [EKSClientTypes.AddonInfo]?
    /// The nextToken value returned from a previous paginated DescribeAddonVersionsResponse where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?

    public init (
        addons: [EKSClientTypes.AddonInfo]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.addons = addons
        self.nextToken = nextToken
    }
}

struct DescribeAddonVersionsOutputResponseBody: Swift.Equatable {
    let addons: [EKSClientTypes.AddonInfo]?
    let nextToken: Swift.String?
}

extension DescribeAddonVersionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addons
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addonsContainer = try containerValues.decodeIfPresent([EKSClientTypes.AddonInfo?].self, forKey: .addons)
        var addonsDecoded0:[EKSClientTypes.AddonInfo]? = nil
        if let addonsContainer = addonsContainer {
            addonsDecoded0 = [EKSClientTypes.AddonInfo]()
            for structure0 in addonsContainer {
                if let structure0 = structure0 {
                    addonsDecoded0?.append(structure0)
                }
            }
        }
        addons = addonsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeClusterInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let name = name else {
            return nil
        }
        return "/clusters/\(name.urlPercentEncoding())"
    }
}

public struct DescribeClusterInput: Swift.Equatable {
    /// The name of the cluster to describe.
    /// This member is required.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct DescribeClusterInputBody: Swift.Equatable {
}

extension DescribeClusterInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeClusterOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeClusterOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

extension DescribeClusterOutputError: WaiterTypedError {

    /// The Smithy identifier, without namespace, for the type of this error, or `nil` if the
    /// error has no known type.
    public var waiterErrorType: String? {
        switch self {
        case .clientException: return "ClientException"
        case .resourceNotFoundException: return "ResourceNotFoundException"
        case .serverException: return "ServerException"
        case .serviceUnavailableException: return "ServiceUnavailableException"
        case .unknown(let error): return error.waiterErrorType
        }
    }
}

public enum DescribeClusterOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeClusterOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeClusterOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.cluster = output.cluster
        } else {
            self.cluster = nil
        }
    }
}

public struct DescribeClusterOutputResponse: Swift.Equatable {
    /// The full description of your specified cluster.
    public var cluster: EKSClientTypes.Cluster?

    public init (
        cluster: EKSClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

struct DescribeClusterOutputResponseBody: Swift.Equatable {
    let cluster: EKSClientTypes.Cluster?
}

extension DescribeClusterOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cluster
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterDecoded = try containerValues.decodeIfPresent(EKSClientTypes.Cluster.self, forKey: .cluster)
        cluster = clusterDecoded
    }
}

extension DescribeFargateProfileInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let clusterName = clusterName else {
            return nil
        }
        guard let fargateProfileName = fargateProfileName else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/fargate-profiles/\(fargateProfileName.urlPercentEncoding())"
    }
}

public struct DescribeFargateProfileInput: Swift.Equatable {
    /// The name of the Amazon EKS cluster associated with the Fargate profile.
    /// This member is required.
    public var clusterName: Swift.String?
    /// The name of the Fargate profile to describe.
    /// This member is required.
    public var fargateProfileName: Swift.String?

    public init (
        clusterName: Swift.String? = nil,
        fargateProfileName: Swift.String? = nil
    )
    {
        self.clusterName = clusterName
        self.fargateProfileName = fargateProfileName
    }
}

struct DescribeFargateProfileInputBody: Swift.Equatable {
}

extension DescribeFargateProfileInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeFargateProfileOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeFargateProfileOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

extension DescribeFargateProfileOutputError: WaiterTypedError {

    /// The Smithy identifier, without namespace, for the type of this error, or `nil` if the
    /// error has no known type.
    public var waiterErrorType: String? {
        switch self {
        case .clientException: return "ClientException"
        case .invalidParameterException: return "InvalidParameterException"
        case .resourceNotFoundException: return "ResourceNotFoundException"
        case .serverException: return "ServerException"
        case .unknown(let error): return error.waiterErrorType
        }
    }
}

public enum DescribeFargateProfileOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeFargateProfileOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeFargateProfileOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.fargateProfile = output.fargateProfile
        } else {
            self.fargateProfile = nil
        }
    }
}

public struct DescribeFargateProfileOutputResponse: Swift.Equatable {
    /// The full description of your Fargate profile.
    public var fargateProfile: EKSClientTypes.FargateProfile?

    public init (
        fargateProfile: EKSClientTypes.FargateProfile? = nil
    )
    {
        self.fargateProfile = fargateProfile
    }
}

struct DescribeFargateProfileOutputResponseBody: Swift.Equatable {
    let fargateProfile: EKSClientTypes.FargateProfile?
}

extension DescribeFargateProfileOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fargateProfile
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fargateProfileDecoded = try containerValues.decodeIfPresent(EKSClientTypes.FargateProfile.self, forKey: .fargateProfile)
        fargateProfile = fargateProfileDecoded
    }
}

extension DescribeIdentityProviderConfigInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identityProviderConfig
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let identityProviderConfig = self.identityProviderConfig {
            try encodeContainer.encode(identityProviderConfig, forKey: .identityProviderConfig)
        }
    }
}

extension DescribeIdentityProviderConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let clusterName = clusterName else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/identity-provider-configs/describe"
    }
}

public struct DescribeIdentityProviderConfigInput: Swift.Equatable {
    /// The cluster name that the identity provider configuration is associated to.
    /// This member is required.
    public var clusterName: Swift.String?
    /// An object representing an identity provider configuration.
    /// This member is required.
    public var identityProviderConfig: EKSClientTypes.IdentityProviderConfig?

    public init (
        clusterName: Swift.String? = nil,
        identityProviderConfig: EKSClientTypes.IdentityProviderConfig? = nil
    )
    {
        self.clusterName = clusterName
        self.identityProviderConfig = identityProviderConfig
    }
}

struct DescribeIdentityProviderConfigInputBody: Swift.Equatable {
    let identityProviderConfig: EKSClientTypes.IdentityProviderConfig?
}

extension DescribeIdentityProviderConfigInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identityProviderConfig
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityProviderConfigDecoded = try containerValues.decodeIfPresent(EKSClientTypes.IdentityProviderConfig.self, forKey: .identityProviderConfig)
        identityProviderConfig = identityProviderConfigDecoded
    }
}

extension DescribeIdentityProviderConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeIdentityProviderConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeIdentityProviderConfigOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeIdentityProviderConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeIdentityProviderConfigOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.identityProviderConfig = output.identityProviderConfig
        } else {
            self.identityProviderConfig = nil
        }
    }
}

public struct DescribeIdentityProviderConfigOutputResponse: Swift.Equatable {
    /// The object that represents an OpenID Connect (OIDC) identity provider configuration.
    public var identityProviderConfig: EKSClientTypes.IdentityProviderConfigResponse?

    public init (
        identityProviderConfig: EKSClientTypes.IdentityProviderConfigResponse? = nil
    )
    {
        self.identityProviderConfig = identityProviderConfig
    }
}

struct DescribeIdentityProviderConfigOutputResponseBody: Swift.Equatable {
    let identityProviderConfig: EKSClientTypes.IdentityProviderConfigResponse?
}

extension DescribeIdentityProviderConfigOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identityProviderConfig
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityProviderConfigDecoded = try containerValues.decodeIfPresent(EKSClientTypes.IdentityProviderConfigResponse.self, forKey: .identityProviderConfig)
        identityProviderConfig = identityProviderConfigDecoded
    }
}

extension DescribeNodegroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let clusterName = clusterName else {
            return nil
        }
        guard let nodegroupName = nodegroupName else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/node-groups/\(nodegroupName.urlPercentEncoding())"
    }
}

public struct DescribeNodegroupInput: Swift.Equatable {
    /// The name of the Amazon EKS cluster associated with the node group.
    /// This member is required.
    public var clusterName: Swift.String?
    /// The name of the node group to describe.
    /// This member is required.
    public var nodegroupName: Swift.String?

    public init (
        clusterName: Swift.String? = nil,
        nodegroupName: Swift.String? = nil
    )
    {
        self.clusterName = clusterName
        self.nodegroupName = nodegroupName
    }
}

struct DescribeNodegroupInputBody: Swift.Equatable {
}

extension DescribeNodegroupInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeNodegroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeNodegroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

extension DescribeNodegroupOutputError: WaiterTypedError {

    /// The Smithy identifier, without namespace, for the type of this error, or `nil` if the
    /// error has no known type.
    public var waiterErrorType: String? {
        switch self {
        case .clientException: return "ClientException"
        case .invalidParameterException: return "InvalidParameterException"
        case .resourceNotFoundException: return "ResourceNotFoundException"
        case .serverException: return "ServerException"
        case .serviceUnavailableException: return "ServiceUnavailableException"
        case .unknown(let error): return error.waiterErrorType
        }
    }
}

public enum DescribeNodegroupOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeNodegroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeNodegroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nodegroup = output.nodegroup
        } else {
            self.nodegroup = nil
        }
    }
}

public struct DescribeNodegroupOutputResponse: Swift.Equatable {
    /// The full description of your node group.
    public var nodegroup: EKSClientTypes.Nodegroup?

    public init (
        nodegroup: EKSClientTypes.Nodegroup? = nil
    )
    {
        self.nodegroup = nodegroup
    }
}

struct DescribeNodegroupOutputResponseBody: Swift.Equatable {
    let nodegroup: EKSClientTypes.Nodegroup?
}

extension DescribeNodegroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nodegroup
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nodegroupDecoded = try containerValues.decodeIfPresent(EKSClientTypes.Nodegroup.self, forKey: .nodegroup)
        nodegroup = nodegroupDecoded
    }
}

extension DescribeUpdateInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nodegroupName = nodegroupName {
                let nodegroupNameQueryItem = ClientRuntime.URLQueryItem(name: "nodegroupName".urlPercentEncoding(), value: Swift.String(nodegroupName).urlPercentEncoding())
                items.append(nodegroupNameQueryItem)
            }
            if let addonName = addonName {
                let addonNameQueryItem = ClientRuntime.URLQueryItem(name: "addonName".urlPercentEncoding(), value: Swift.String(addonName).urlPercentEncoding())
                items.append(addonNameQueryItem)
            }
            return items
        }
    }
}

extension DescribeUpdateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let name = name else {
            return nil
        }
        guard let updateId = updateId else {
            return nil
        }
        return "/clusters/\(name.urlPercentEncoding())/updates/\(updateId.urlPercentEncoding())"
    }
}

public struct DescribeUpdateInput: Swift.Equatable {
    /// The name of the add-on. The name must match one of the names returned by [ListAddons](https://docs.aws.amazon.com/eks/latest/APIReference/API_ListAddons.html). This parameter is required if the update is an add-on update.
    public var addonName: Swift.String?
    /// The name of the Amazon EKS cluster associated with the update.
    /// This member is required.
    public var name: Swift.String?
    /// The name of the Amazon EKS node group associated with the update. This parameter is required if the update is a node group update.
    public var nodegroupName: Swift.String?
    /// The ID of the update to describe.
    /// This member is required.
    public var updateId: Swift.String?

    public init (
        addonName: Swift.String? = nil,
        name: Swift.String? = nil,
        nodegroupName: Swift.String? = nil,
        updateId: Swift.String? = nil
    )
    {
        self.addonName = addonName
        self.name = name
        self.nodegroupName = nodegroupName
        self.updateId = updateId
    }
}

struct DescribeUpdateInputBody: Swift.Equatable {
}

extension DescribeUpdateInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeUpdateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeUpdateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeUpdateOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeUpdateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeUpdateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.update = output.update
        } else {
            self.update = nil
        }
    }
}

public struct DescribeUpdateOutputResponse: Swift.Equatable {
    /// The full description of the specified update.
    public var update: EKSClientTypes.Update?

    public init (
        update: EKSClientTypes.Update? = nil
    )
    {
        self.update = update
    }
}

struct DescribeUpdateOutputResponseBody: Swift.Equatable {
    let update: EKSClientTypes.Update?
}

extension DescribeUpdateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case update
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateDecoded = try containerValues.decodeIfPresent(EKSClientTypes.Update.self, forKey: .update)
        update = updateDecoded
    }
}

extension DisassociateIdentityProviderConfigInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken
        case identityProviderConfig
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let identityProviderConfig = self.identityProviderConfig {
            try encodeContainer.encode(identityProviderConfig, forKey: .identityProviderConfig)
        }
    }
}

extension DisassociateIdentityProviderConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let clusterName = clusterName else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/identity-provider-configs/disassociate"
    }
}

public struct DisassociateIdentityProviderConfigInput: Swift.Equatable {
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    public var clientRequestToken: Swift.String?
    /// The name of the cluster to disassociate an identity provider from.
    /// This member is required.
    public var clusterName: Swift.String?
    /// An object representing an identity provider configuration.
    /// This member is required.
    public var identityProviderConfig: EKSClientTypes.IdentityProviderConfig?

    public init (
        clientRequestToken: Swift.String? = nil,
        clusterName: Swift.String? = nil,
        identityProviderConfig: EKSClientTypes.IdentityProviderConfig? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.clusterName = clusterName
        self.identityProviderConfig = identityProviderConfig
    }
}

struct DisassociateIdentityProviderConfigInputBody: Swift.Equatable {
    let identityProviderConfig: EKSClientTypes.IdentityProviderConfig?
    let clientRequestToken: Swift.String?
}

extension DisassociateIdentityProviderConfigInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken
        case identityProviderConfig
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityProviderConfigDecoded = try containerValues.decodeIfPresent(EKSClientTypes.IdentityProviderConfig.self, forKey: .identityProviderConfig)
        identityProviderConfig = identityProviderConfigDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}

extension DisassociateIdentityProviderConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisassociateIdentityProviderConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DisassociateIdentityProviderConfigOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisassociateIdentityProviderConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DisassociateIdentityProviderConfigOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.update = output.update
        } else {
            self.update = nil
        }
    }
}

public struct DisassociateIdentityProviderConfigOutputResponse: Swift.Equatable {
    /// An object representing an asynchronous update.
    public var update: EKSClientTypes.Update?

    public init (
        update: EKSClientTypes.Update? = nil
    )
    {
        self.update = update
    }
}

struct DisassociateIdentityProviderConfigOutputResponseBody: Swift.Equatable {
    let update: EKSClientTypes.Update?
}

extension DisassociateIdentityProviderConfigOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case update
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateDecoded = try containerValues.decodeIfPresent(EKSClientTypes.Update.self, forKey: .update)
        update = updateDecoded
    }
}

extension EKSClientTypes.EncryptionConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case provider
        case resources
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let provider = self.provider {
            try encodeContainer.encode(provider, forKey: .provider)
        }
        if let resources = resources {
            var resourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resources)
            for string0 in resources {
                try resourcesContainer.encode(string0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourcesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .resources)
        var resourcesDecoded0:[Swift.String]? = nil
        if let resourcesContainer = resourcesContainer {
            resourcesDecoded0 = [Swift.String]()
            for string0 in resourcesContainer {
                if let string0 = string0 {
                    resourcesDecoded0?.append(string0)
                }
            }
        }
        resources = resourcesDecoded0
        let providerDecoded = try containerValues.decodeIfPresent(EKSClientTypes.Provider.self, forKey: .provider)
        provider = providerDecoded
    }
}

extension EKSClientTypes {
    /// The encryption configuration for the cluster.
    public struct EncryptionConfig: Swift.Equatable {
        /// Key Management Service (KMS) key. Either the ARN or the alias can be used.
        public var provider: EKSClientTypes.Provider?
        /// Specifies the resources to be encrypted. The only supported value is "secrets".
        public var resources: [Swift.String]?

        public init (
            provider: EKSClientTypes.Provider? = nil,
            resources: [Swift.String]? = nil
        )
        {
            self.provider = provider
            self.resources = resources
        }
    }

}

extension EKSClientTypes {
    public enum ErrorCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accessDenied
        case admissionRequestDenied
        case clusterUnreachable
        case configurationConflict
        case eniLimitReached
        case insufficientFreeAddresses
        case insufficientNumberOfReplicas
        case ipNotAvailable
        case k8sResourceNotFound
        case nodeCreationFailure
        case operationNotPermitted
        case podEvictionFailure
        case securityGroupNotFound
        case subnetNotFound
        case unknown
        case unsupportedAddonModification
        case vpcIdNotFound
        case sdkUnknown(Swift.String)

        public static var allCases: [ErrorCode] {
            return [
                .accessDenied,
                .admissionRequestDenied,
                .clusterUnreachable,
                .configurationConflict,
                .eniLimitReached,
                .insufficientFreeAddresses,
                .insufficientNumberOfReplicas,
                .ipNotAvailable,
                .k8sResourceNotFound,
                .nodeCreationFailure,
                .operationNotPermitted,
                .podEvictionFailure,
                .securityGroupNotFound,
                .subnetNotFound,
                .unknown,
                .unsupportedAddonModification,
                .vpcIdNotFound,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accessDenied: return "AccessDenied"
            case .admissionRequestDenied: return "AdmissionRequestDenied"
            case .clusterUnreachable: return "ClusterUnreachable"
            case .configurationConflict: return "ConfigurationConflict"
            case .eniLimitReached: return "EniLimitReached"
            case .insufficientFreeAddresses: return "InsufficientFreeAddresses"
            case .insufficientNumberOfReplicas: return "InsufficientNumberOfReplicas"
            case .ipNotAvailable: return "IpNotAvailable"
            case .k8sResourceNotFound: return "K8sResourceNotFound"
            case .nodeCreationFailure: return "NodeCreationFailure"
            case .operationNotPermitted: return "OperationNotPermitted"
            case .podEvictionFailure: return "PodEvictionFailure"
            case .securityGroupNotFound: return "SecurityGroupNotFound"
            case .subnetNotFound: return "SubnetNotFound"
            case .unknown: return "Unknown"
            case .unsupportedAddonModification: return "UnsupportedAddonModification"
            case .vpcIdNotFound: return "VpcIdNotFound"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ErrorCode(rawValue: rawValue) ?? ErrorCode.sdkUnknown(rawValue)
        }
    }
}

extension EKSClientTypes.ErrorDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorCode
        case errorMessage
        case resourceIds
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorCode = self.errorCode {
            try encodeContainer.encode(errorCode.rawValue, forKey: .errorCode)
        }
        if let errorMessage = self.errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let resourceIds = resourceIds {
            var resourceIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceIds)
            for string0 in resourceIds {
                try resourceIdsContainer.encode(string0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorCodeDecoded = try containerValues.decodeIfPresent(EKSClientTypes.ErrorCode.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let resourceIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .resourceIds)
        var resourceIdsDecoded0:[Swift.String]? = nil
        if let resourceIdsContainer = resourceIdsContainer {
            resourceIdsDecoded0 = [Swift.String]()
            for string0 in resourceIdsContainer {
                if let string0 = string0 {
                    resourceIdsDecoded0?.append(string0)
                }
            }
        }
        resourceIds = resourceIdsDecoded0
    }
}

extension EKSClientTypes {
    /// An object representing an error when an asynchronous operation fails.
    public struct ErrorDetail: Swift.Equatable {
        /// A brief description of the error.
        ///
        /// * SubnetNotFound: We couldn't find one of the subnets associated with the cluster.
        ///
        /// * SecurityGroupNotFound: We couldn't find one of the security groups associated with the cluster.
        ///
        /// * EniLimitReached: You have reached the elastic network interface limit for your account.
        ///
        /// * IpNotAvailable: A subnet associated with the cluster doesn't have any free IP addresses.
        ///
        /// * AccessDenied: You don't have permissions to perform the specified operation.
        ///
        /// * OperationNotPermitted: The service role associated with the cluster doesn't have the required access permissions for Amazon EKS.
        ///
        /// * VpcIdNotFound: We couldn't find the VPC associated with the cluster.
        public var errorCode: EKSClientTypes.ErrorCode?
        /// A more complete description of the error.
        public var errorMessage: Swift.String?
        /// An optional field that contains the resource IDs associated with the error.
        public var resourceIds: [Swift.String]?

        public init (
            errorCode: EKSClientTypes.ErrorCode? = nil,
            errorMessage: Swift.String? = nil,
            resourceIds: [Swift.String]? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.resourceIds = resourceIds
        }
    }

}

extension EKSClientTypes.FargateProfile: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterName
        case createdAt
        case fargateProfileArn
        case fargateProfileName
        case podExecutionRoleArn
        case selectors
        case status
        case subnets
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterName = self.clusterName {
            try encodeContainer.encode(clusterName, forKey: .clusterName)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let fargateProfileArn = self.fargateProfileArn {
            try encodeContainer.encode(fargateProfileArn, forKey: .fargateProfileArn)
        }
        if let fargateProfileName = self.fargateProfileName {
            try encodeContainer.encode(fargateProfileName, forKey: .fargateProfileName)
        }
        if let podExecutionRoleArn = self.podExecutionRoleArn {
            try encodeContainer.encode(podExecutionRoleArn, forKey: .podExecutionRoleArn)
        }
        if let selectors = selectors {
            var selectorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .selectors)
            for fargateprofileselector0 in selectors {
                try selectorsContainer.encode(fargateprofileselector0)
            }
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let subnets = subnets {
            var subnetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnets)
            for string0 in subnets {
                try subnetsContainer.encode(string0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagMap0) in tags {
                try tagsContainer.encode(tagMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fargateProfileNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fargateProfileName)
        fargateProfileName = fargateProfileNameDecoded
        let fargateProfileArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fargateProfileArn)
        fargateProfileArn = fargateProfileArnDecoded
        let clusterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterName)
        clusterName = clusterNameDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let podExecutionRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .podExecutionRoleArn)
        podExecutionRoleArn = podExecutionRoleArnDecoded
        let subnetsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnets)
        var subnetsDecoded0:[Swift.String]? = nil
        if let subnetsContainer = subnetsContainer {
            subnetsDecoded0 = [Swift.String]()
            for string0 in subnetsContainer {
                if let string0 = string0 {
                    subnetsDecoded0?.append(string0)
                }
            }
        }
        subnets = subnetsDecoded0
        let selectorsContainer = try containerValues.decodeIfPresent([EKSClientTypes.FargateProfileSelector?].self, forKey: .selectors)
        var selectorsDecoded0:[EKSClientTypes.FargateProfileSelector]? = nil
        if let selectorsContainer = selectorsContainer {
            selectorsDecoded0 = [EKSClientTypes.FargateProfileSelector]()
            for structure0 in selectorsContainer {
                if let structure0 = structure0 {
                    selectorsDecoded0?.append(structure0)
                }
            }
        }
        selectors = selectorsDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(EKSClientTypes.FargateProfileStatus.self, forKey: .status)
        status = statusDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension EKSClientTypes {
    /// An object representing an Fargate profile.
    public struct FargateProfile: Swift.Equatable {
        /// The name of the Amazon EKS cluster that the Fargate profile belongs to.
        public var clusterName: Swift.String?
        /// The Unix epoch timestamp in seconds for when the Fargate profile was created.
        public var createdAt: ClientRuntime.Date?
        /// The full Amazon Resource Name (ARN) of the Fargate profile.
        public var fargateProfileArn: Swift.String?
        /// The name of the Fargate profile.
        public var fargateProfileName: Swift.String?
        /// The Amazon Resource Name (ARN) of the pod execution role to use for pods that match the selectors in the Fargate profile. For more information, see [Pod Execution Role](https://docs.aws.amazon.com/eks/latest/userguide/pod-execution-role.html) in the Amazon EKS User Guide.
        public var podExecutionRoleArn: Swift.String?
        /// The selectors to match for pods to use this Fargate profile.
        public var selectors: [EKSClientTypes.FargateProfileSelector]?
        /// The current status of the Fargate profile.
        public var status: EKSClientTypes.FargateProfileStatus?
        /// The IDs of subnets to launch pods into.
        public var subnets: [Swift.String]?
        /// The metadata applied to the Fargate profile to assist with categorization and organization. Each tag consists of a key and an optional value. You define both. Fargate profile tags do not propagate to any other resources associated with the Fargate profile, such as the pods that are scheduled with it.
        public var tags: [Swift.String:Swift.String]?

        public init (
            clusterName: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            fargateProfileArn: Swift.String? = nil,
            fargateProfileName: Swift.String? = nil,
            podExecutionRoleArn: Swift.String? = nil,
            selectors: [EKSClientTypes.FargateProfileSelector]? = nil,
            status: EKSClientTypes.FargateProfileStatus? = nil,
            subnets: [Swift.String]? = nil,
            tags: [Swift.String:Swift.String]? = nil
        )
        {
            self.clusterName = clusterName
            self.createdAt = createdAt
            self.fargateProfileArn = fargateProfileArn
            self.fargateProfileName = fargateProfileName
            self.podExecutionRoleArn = podExecutionRoleArn
            self.selectors = selectors
            self.status = status
            self.subnets = subnets
            self.tags = tags
        }
    }

}

extension EKSClientTypes.FargateProfileSelector: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labels
        case namespace
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let labels = labels {
            var labelsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .labels)
            for (dictKey0, fargateProfileLabel0) in labels {
                try labelsContainer.encode(fargateProfileLabel0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let namespace = self.namespace {
            try encodeContainer.encode(namespace, forKey: .namespace)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let labelsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .labels)
        var labelsDecoded0: [Swift.String:Swift.String]? = nil
        if let labelsContainer = labelsContainer {
            labelsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in labelsContainer {
                if let string0 = string0 {
                    labelsDecoded0?[key0] = string0
                }
            }
        }
        labels = labelsDecoded0
    }
}

extension EKSClientTypes {
    /// An object representing an Fargate profile selector.
    public struct FargateProfileSelector: Swift.Equatable {
        /// The Kubernetes labels that the selector should match. A pod must contain all of the labels that are specified in the selector for it to be considered a match.
        public var labels: [Swift.String:Swift.String]?
        /// The Kubernetes namespace that the selector should match.
        public var namespace: Swift.String?

        public init (
            labels: [Swift.String:Swift.String]? = nil,
            namespace: Swift.String? = nil
        )
        {
            self.labels = labels
            self.namespace = namespace
        }
    }

}

extension EKSClientTypes {
    public enum FargateProfileStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case createFailed
        case creating
        case deleteFailed
        case deleting
        case sdkUnknown(Swift.String)

        public static var allCases: [FargateProfileStatus] {
            return [
                .active,
                .createFailed,
                .creating,
                .deleteFailed,
                .deleting,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .createFailed: return "CREATE_FAILED"
            case .creating: return "CREATING"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleting: return "DELETING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FargateProfileStatus(rawValue: rawValue) ?? FargateProfileStatus.sdkUnknown(rawValue)
        }
    }
}

extension EKSClientTypes.Identity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case oidc
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let oidc = self.oidc {
            try encodeContainer.encode(oidc, forKey: .oidc)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let oidcDecoded = try containerValues.decodeIfPresent(EKSClientTypes.OIDC.self, forKey: .oidc)
        oidc = oidcDecoded
    }
}

extension EKSClientTypes {
    /// An object representing an identity provider.
    public struct Identity: Swift.Equatable {
        /// An object representing the [OpenID Connect](https://openid.net/connect/) identity provider information.
        public var oidc: EKSClientTypes.OIDC?

        public init (
            oidc: EKSClientTypes.OIDC? = nil
        )
        {
            self.oidc = oidc
        }
    }

}

extension EKSClientTypes.IdentityProviderConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let type = self.type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension EKSClientTypes {
    /// An object representing an identity provider configuration.
    public struct IdentityProviderConfig: Swift.Equatable {
        /// The name of the identity provider configuration.
        /// This member is required.
        public var name: Swift.String?
        /// The type of the identity provider configuration. The only type available is oidc.
        /// This member is required.
        public var type: Swift.String?

        public init (
            name: Swift.String? = nil,
            type: Swift.String? = nil
        )
        {
            self.name = name
            self.type = type
        }
    }

}

extension EKSClientTypes.IdentityProviderConfigResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case oidc
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let oidc = self.oidc {
            try encodeContainer.encode(oidc, forKey: .oidc)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let oidcDecoded = try containerValues.decodeIfPresent(EKSClientTypes.OidcIdentityProviderConfig.self, forKey: .oidc)
        oidc = oidcDecoded
    }
}

extension EKSClientTypes {
    /// The full description of your identity configuration.
    public struct IdentityProviderConfigResponse: Swift.Equatable {
        /// An object representing an OpenID Connect (OIDC) identity provider configuration.
        public var oidc: EKSClientTypes.OidcIdentityProviderConfig?

        public init (
            oidc: EKSClientTypes.OidcIdentityProviderConfig? = nil
        )
        {
            self.oidc = oidc
        }
    }

}

extension InvalidParameterException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidParameterExceptionBody = try responseDecoder.decode(responseBody: data)
            self.addonName = output.addonName
            self.clusterName = output.clusterName
            self.fargateProfileName = output.fargateProfileName
            self.message = output.message
            self.nodegroupName = output.nodegroupName
        } else {
            self.addonName = nil
            self.clusterName = nil
            self.fargateProfileName = nil
            self.message = nil
            self.nodegroupName = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified parameter is invalid. Review the available parameters for the API request.
public struct InvalidParameterException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var addonName: Swift.String?
    /// The Amazon EKS cluster associated with the exception.
    public var clusterName: Swift.String?
    /// The Fargate profile associated with the exception.
    public var fargateProfileName: Swift.String?
    public var message: Swift.String?
    /// The Amazon EKS managed node group associated with the exception.
    public var nodegroupName: Swift.String?

    public init (
        addonName: Swift.String? = nil,
        clusterName: Swift.String? = nil,
        fargateProfileName: Swift.String? = nil,
        message: Swift.String? = nil,
        nodegroupName: Swift.String? = nil
    )
    {
        self.addonName = addonName
        self.clusterName = clusterName
        self.fargateProfileName = fargateProfileName
        self.message = message
        self.nodegroupName = nodegroupName
    }
}

struct InvalidParameterExceptionBody: Swift.Equatable {
    let clusterName: Swift.String?
    let nodegroupName: Swift.String?
    let fargateProfileName: Swift.String?
    let addonName: Swift.String?
    let message: Swift.String?
}

extension InvalidParameterExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addonName
        case clusterName
        case fargateProfileName
        case message
        case nodegroupName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterName)
        clusterName = clusterNameDecoded
        let nodegroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodegroupName)
        nodegroupName = nodegroupNameDecoded
        let fargateProfileNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fargateProfileName)
        fargateProfileName = fargateProfileNameDecoded
        let addonNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .addonName)
        addonName = addonNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidRequestException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidRequestExceptionBody = try responseDecoder.decode(responseBody: data)
            self.addonName = output.addonName
            self.clusterName = output.clusterName
            self.message = output.message
            self.nodegroupName = output.nodegroupName
        } else {
            self.addonName = nil
            self.clusterName = nil
            self.message = nil
            self.nodegroupName = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request is invalid given the state of the cluster. Check the state of the cluster and the associated operations.
public struct InvalidRequestException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var addonName: Swift.String?
    /// The Amazon EKS cluster associated with the exception.
    public var clusterName: Swift.String?
    public var message: Swift.String?
    /// The Amazon EKS managed node group associated with the exception.
    public var nodegroupName: Swift.String?

    public init (
        addonName: Swift.String? = nil,
        clusterName: Swift.String? = nil,
        message: Swift.String? = nil,
        nodegroupName: Swift.String? = nil
    )
    {
        self.addonName = addonName
        self.clusterName = clusterName
        self.message = message
        self.nodegroupName = nodegroupName
    }
}

struct InvalidRequestExceptionBody: Swift.Equatable {
    let clusterName: Swift.String?
    let nodegroupName: Swift.String?
    let addonName: Swift.String?
    let message: Swift.String?
}

extension InvalidRequestExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addonName
        case clusterName
        case message
        case nodegroupName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterName)
        clusterName = clusterNameDecoded
        let nodegroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodegroupName)
        nodegroupName = nodegroupNameDecoded
        let addonNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .addonName)
        addonName = addonNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension EKSClientTypes {
    public enum IpFamily: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ipv4
        case ipv6
        case sdkUnknown(Swift.String)

        public static var allCases: [IpFamily] {
            return [
                .ipv4,
                .ipv6,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ipv4: return "ipv4"
            case .ipv6: return "ipv6"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = IpFamily(rawValue: rawValue) ?? IpFamily.sdkUnknown(rawValue)
        }
    }
}

extension EKSClientTypes.Issue: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code
        case message
        case resourceIds
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = self.code {
            try encodeContainer.encode(code.rawValue, forKey: .code)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let resourceIds = resourceIds {
            var resourceIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceIds)
            for string0 in resourceIds {
                try resourceIdsContainer.encode(string0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(EKSClientTypes.NodegroupIssueCode.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let resourceIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .resourceIds)
        var resourceIdsDecoded0:[Swift.String]? = nil
        if let resourceIdsContainer = resourceIdsContainer {
            resourceIdsDecoded0 = [Swift.String]()
            for string0 in resourceIdsContainer {
                if let string0 = string0 {
                    resourceIdsDecoded0?.append(string0)
                }
            }
        }
        resourceIds = resourceIdsDecoded0
    }
}

extension EKSClientTypes {
    /// An object representing an issue with an Amazon EKS resource.
    public struct Issue: Swift.Equatable {
        /// A brief description of the error.
        ///
        /// * AccessDenied: Amazon EKS or one or more of your managed nodes is failing to authenticate or authorize with your Kubernetes cluster API server.
        ///
        /// * AsgInstanceLaunchFailures: Your Auto Scaling group is experiencing failures while attempting to launch instances.
        ///
        /// * AutoScalingGroupNotFound: We couldn't find the Auto Scaling group associated with the managed node group. You may be able to recreate an Auto Scaling group with the same settings to recover.
        ///
        /// * ClusterUnreachable: Amazon EKS or one or more of your managed nodes is unable to to communicate with your Kubernetes cluster API server. This can happen if there are network disruptions or if API servers are timing out processing requests.
        ///
        /// * Ec2LaunchTemplateNotFound: We couldn't find the Amazon EC2 launch template for your managed node group. You may be able to recreate a launch template with the same settings to recover.
        ///
        /// * Ec2LaunchTemplateVersionMismatch: The Amazon EC2 launch template version for your managed node group does not match the version that Amazon EKS created. You may be able to revert to the version that Amazon EKS created to recover.
        ///
        /// * Ec2SecurityGroupDeletionFailure: We could not delete the remote access security group for your managed node group. Remove any dependencies from the security group.
        ///
        /// * Ec2SecurityGroupNotFound: We couldn't find the cluster security group for the cluster. You must recreate your cluster.
        ///
        /// * Ec2SubnetInvalidConfiguration: One or more Amazon EC2 subnets specified for a node group do not automatically assign public IP addresses to instances launched into it. If you want your instances to be assigned a public IP address, then you need to enable the auto-assign public IP address setting for the subnet. See [Modifying the public IPv4 addressing attribute for your subnet](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-ip-addressing.html#subnet-public-ip) in the Amazon VPC User Guide.
        ///
        /// * IamInstanceProfileNotFound: We couldn't find the IAM instance profile for your managed node group. You may be able to recreate an instance profile with the same settings to recover.
        ///
        /// * IamNodeRoleNotFound: We couldn't find the IAM role for your managed node group. You may be able to recreate an IAM role with the same settings to recover.
        ///
        /// * InstanceLimitExceeded: Your Amazon Web Services account is unable to launch any more instances of the specified instance type. You may be able to request an Amazon EC2 instance limit increase to recover.
        ///
        /// * InsufficientFreeAddresses: One or more of the subnets associated with your managed node group does not have enough available IP addresses for new nodes.
        ///
        /// * InternalFailure: These errors are usually caused by an Amazon EKS server-side issue.
        ///
        /// * NodeCreationFailure: Your launched instances are unable to register with your Amazon EKS cluster. Common causes of this failure are insufficient [node IAM role](https://docs.aws.amazon.com/eks/latest/userguide/create-node-role.html) permissions or lack of outbound internet access for the nodes.
        public var code: EKSClientTypes.NodegroupIssueCode?
        /// The error message associated with the issue.
        public var message: Swift.String?
        /// The Amazon Web Services resources that are afflicted by this issue.
        public var resourceIds: [Swift.String]?

        public init (
            code: EKSClientTypes.NodegroupIssueCode? = nil,
            message: Swift.String? = nil,
            resourceIds: [Swift.String]? = nil
        )
        {
            self.code = code
            self.message = message
            self.resourceIds = resourceIds
        }
    }

}

extension EKSClientTypes.KubernetesNetworkConfigRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ipFamily
        case serviceIpv4Cidr
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ipFamily = self.ipFamily {
            try encodeContainer.encode(ipFamily.rawValue, forKey: .ipFamily)
        }
        if let serviceIpv4Cidr = self.serviceIpv4Cidr {
            try encodeContainer.encode(serviceIpv4Cidr, forKey: .serviceIpv4Cidr)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceIpv4CidrDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceIpv4Cidr)
        serviceIpv4Cidr = serviceIpv4CidrDecoded
        let ipFamilyDecoded = try containerValues.decodeIfPresent(EKSClientTypes.IpFamily.self, forKey: .ipFamily)
        ipFamily = ipFamilyDecoded
    }
}

extension EKSClientTypes {
    /// The Kubernetes network configuration for the cluster.
    public struct KubernetesNetworkConfigRequest: Swift.Equatable {
        /// Specify which IP family is used to assign Kubernetes pod and service IP addresses. If you don't specify a value, ipv4 is used by default. You can only specify an IP family when you create a cluster and can't change this value once the cluster is created. If you specify ipv6, the VPC and subnets that you specify for cluster creation must have both IPv4 and IPv6 CIDR blocks assigned to them. You can't specify ipv6 for clusters in China Regions. You can only specify ipv6 for 1.21 and later clusters that use version 1.10.1 or later of the Amazon VPC CNI add-on. If you specify ipv6, then ensure that your VPC meets the requirements listed in the considerations listed in [Assigning IPv6 addresses to pods and services](https://docs.aws.amazon.com/eks/latest/userguide/cni-ipv6.html) in the Amazon EKS User Guide. Kubernetes assigns services IPv6 addresses from the unique local address range (fc00::/7). You can't specify a custom IPv6 CIDR block. Pod addresses are assigned from the subnet's IPv6 CIDR.
        public var ipFamily: EKSClientTypes.IpFamily?
        /// Don't specify a value if you select ipv6 for ipFamily. The CIDR block to assign Kubernetes service IP addresses from. If you don't specify a block, Kubernetes assigns addresses from either the 10.100.0.0/16 or 172.20.0.0/16 CIDR blocks. We recommend that you specify a block that does not overlap with resources in other networks that are peered or connected to your VPC. The block must meet the following requirements:
        ///
        /// * Within one of the following private IP address blocks: 10.0.0.0/8, 172.16.0.0/12, or 192.168.0.0/16.
        ///
        /// * Doesn't overlap with any CIDR block assigned to the VPC that you selected for VPC.
        ///
        /// * Between /24 and /12.
        ///
        ///
        /// You can only specify a custom CIDR block when you create a cluster and can't change this value once the cluster is created.
        public var serviceIpv4Cidr: Swift.String?

        public init (
            ipFamily: EKSClientTypes.IpFamily? = nil,
            serviceIpv4Cidr: Swift.String? = nil
        )
        {
            self.ipFamily = ipFamily
            self.serviceIpv4Cidr = serviceIpv4Cidr
        }
    }

}

extension EKSClientTypes.KubernetesNetworkConfigResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ipFamily
        case serviceIpv4Cidr
        case serviceIpv6Cidr
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ipFamily = self.ipFamily {
            try encodeContainer.encode(ipFamily.rawValue, forKey: .ipFamily)
        }
        if let serviceIpv4Cidr = self.serviceIpv4Cidr {
            try encodeContainer.encode(serviceIpv4Cidr, forKey: .serviceIpv4Cidr)
        }
        if let serviceIpv6Cidr = self.serviceIpv6Cidr {
            try encodeContainer.encode(serviceIpv6Cidr, forKey: .serviceIpv6Cidr)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceIpv4CidrDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceIpv4Cidr)
        serviceIpv4Cidr = serviceIpv4CidrDecoded
        let serviceIpv6CidrDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceIpv6Cidr)
        serviceIpv6Cidr = serviceIpv6CidrDecoded
        let ipFamilyDecoded = try containerValues.decodeIfPresent(EKSClientTypes.IpFamily.self, forKey: .ipFamily)
        ipFamily = ipFamilyDecoded
    }
}

extension EKSClientTypes {
    /// The Kubernetes network configuration for the cluster. The response contains a value for serviceIpv6Cidr or serviceIpv4Cidr, but not both.
    public struct KubernetesNetworkConfigResponse: Swift.Equatable {
        /// The IP family used to assign Kubernetes pod and service IP addresses. The IP family is always ipv4, unless you have a 1.21 or later cluster running version 1.10.1 or later of the Amazon VPC CNI add-on and specified ipv6 when you created the cluster.
        public var ipFamily: EKSClientTypes.IpFamily?
        /// The CIDR block that Kubernetes pod and service IP addresses are assigned from. Kubernetes assigns addresses from an IPv4 CIDR block assigned to a subnet that the node is in. If you didn't specify a CIDR block when you created the cluster, then Kubernetes assigns addresses from either the 10.100.0.0/16 or 172.20.0.0/16 CIDR blocks. If this was specified, then it was specified when the cluster was created and it can't be changed.
        public var serviceIpv4Cidr: Swift.String?
        /// The CIDR block that Kubernetes pod and service IP addresses are assigned from if you created a 1.21 or later cluster with version 1.10.1 or later of the Amazon VPC CNI add-on and specified ipv6 for ipFamily when you created the cluster. Kubernetes assigns service addresses from the unique local address range (fc00::/7) because you can't specify a custom IPv6 CIDR block when you create the cluster.
        public var serviceIpv6Cidr: Swift.String?

        public init (
            ipFamily: EKSClientTypes.IpFamily? = nil,
            serviceIpv4Cidr: Swift.String? = nil,
            serviceIpv6Cidr: Swift.String? = nil
        )
        {
            self.ipFamily = ipFamily
            self.serviceIpv4Cidr = serviceIpv4Cidr
            self.serviceIpv6Cidr = serviceIpv6Cidr
        }
    }

}

extension EKSClientTypes.LaunchTemplateSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id
        case name
        case version
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
    }
}

extension EKSClientTypes {
    /// An object representing a node group launch template specification. The launch template can't include [SubnetId](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateNetworkInterface.html), [IamInstanceProfile](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_IamInstanceProfile.html), [RequestSpotInstances](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RequestSpotInstances.html), [HibernationOptions](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_HibernationOptionsRequest.html), or [TerminateInstances](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_TerminateInstances.html), or the node group deployment or update will fail. For more information about launch templates, see [CreateLaunchTemplate](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateLaunchTemplate.html) in the Amazon EC2 API Reference. For more information about using launch templates with Amazon EKS, see [Launch template support](https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html) in the Amazon EKS User Guide. You must specify either the launch template ID or the launch template name in the request, but not both.
    public struct LaunchTemplateSpecification: Swift.Equatable {
        /// The ID of the launch template. You must specify either the launch template ID or the launch template name in the request, but not both.
        public var id: Swift.String?
        /// The name of the launch template. You must specify either the launch template name or the launch template ID in the request, but not both.
        public var name: Swift.String?
        /// The version number of the launch template to use. If no version is specified, then the template's default version is used.
        public var version: Swift.String?

        public init (
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.id = id
            self.name = name
            self.version = version
        }
    }

}

extension ListAddonsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            return items
        }
    }
}

extension ListAddonsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let clusterName = clusterName else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/addons"
    }
}

public struct ListAddonsInput: Swift.Equatable {
    /// The name of the cluster.
    /// This member is required.
    public var clusterName: Swift.String?
    /// The maximum number of add-on results returned by ListAddonsRequest in paginated output. When you use this parameter, ListAddonsRequest returns only maxResults results in a single page along with a nextToken response element. You can see the remaining results of the initial request by sending another ListAddonsRequest request with the returned nextToken value. This value can be between 1 and 100. If you don't use this parameter, ListAddonsRequest returns up to 100 results and a nextToken value, if applicable.
    public var maxResults: Swift.Int?
    /// The nextToken value returned from a previous paginated ListAddonsRequest where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?

    public init (
        clusterName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.clusterName = clusterName
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListAddonsInputBody: Swift.Equatable {
}

extension ListAddonsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListAddonsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListAddonsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListAddonsOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListAddonsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListAddonsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.addons = output.addons
            self.nextToken = output.nextToken
        } else {
            self.addons = nil
            self.nextToken = nil
        }
    }
}

public struct ListAddonsOutputResponse: Swift.Equatable {
    /// A list of available add-ons.
    public var addons: [Swift.String]?
    /// The nextToken value returned from a previous paginated ListAddonsResponse where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?

    public init (
        addons: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.addons = addons
        self.nextToken = nextToken
    }
}

struct ListAddonsOutputResponseBody: Swift.Equatable {
    let addons: [Swift.String]?
    let nextToken: Swift.String?
}

extension ListAddonsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addons
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addonsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .addons)
        var addonsDecoded0:[Swift.String]? = nil
        if let addonsContainer = addonsContainer {
            addonsDecoded0 = [Swift.String]()
            for string0 in addonsContainer {
                if let string0 = string0 {
                    addonsDecoded0?.append(string0)
                }
            }
        }
        addons = addonsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListClustersInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let include = include {
                include.forEach { queryItemValue in
                    let queryItem = ClientRuntime.URLQueryItem(name: "include".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
                    items.append(queryItem)
                }
            }
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            return items
        }
    }
}

extension ListClustersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/clusters"
    }
}

public struct ListClustersInput: Swift.Equatable {
    /// Indicates whether external clusters are included in the returned list. Use 'all' to return connected clusters, or blank to return only Amazon EKS clusters. 'all' must be in lowercase otherwise an error occurs.
    public var include: [Swift.String]?
    /// The maximum number of cluster results returned by ListClusters in paginated output. When you use this parameter, ListClusters returns only maxResults results in a single page along with a nextToken response element. You can see the remaining results of the initial request by sending another ListClusters request with the returned nextToken value. This value can be between 1 and 100. If you don't use this parameter, ListClusters returns up to 100 results and a nextToken value if applicable.
    public var maxResults: Swift.Int?
    /// The nextToken value returned from a previous paginated ListClusters request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
    public var nextToken: Swift.String?

    public init (
        include: [Swift.String]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.include = include
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListClustersInputBody: Swift.Equatable {
}

extension ListClustersInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListClustersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListClustersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListClustersOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case serverException(ServerException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListClustersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListClustersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.clusters = output.clusters
            self.nextToken = output.nextToken
        } else {
            self.clusters = nil
            self.nextToken = nil
        }
    }
}

public struct ListClustersOutputResponse: Swift.Equatable {
    /// A list of all of the clusters for your account in the specified Region.
    public var clusters: [Swift.String]?
    /// The nextToken value to include in a future ListClusters request. When the results of a ListClusters request exceed maxResults, you can use this value to retrieve the next page of results. This value is null when there are no more results to return.
    public var nextToken: Swift.String?

    public init (
        clusters: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.clusters = clusters
        self.nextToken = nextToken
    }
}

struct ListClustersOutputResponseBody: Swift.Equatable {
    let clusters: [Swift.String]?
    let nextToken: Swift.String?
}

extension ListClustersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusters
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clustersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .clusters)
        var clustersDecoded0:[Swift.String]? = nil
        if let clustersContainer = clustersContainer {
            clustersDecoded0 = [Swift.String]()
            for string0 in clustersContainer {
                if let string0 = string0 {
                    clustersDecoded0?.append(string0)
                }
            }
        }
        clusters = clustersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListFargateProfilesInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            return items
        }
    }
}

extension ListFargateProfilesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let clusterName = clusterName else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/fargate-profiles"
    }
}

public struct ListFargateProfilesInput: Swift.Equatable {
    /// The name of the Amazon EKS cluster that you would like to list Fargate profiles in.
    /// This member is required.
    public var clusterName: Swift.String?
    /// The maximum number of Fargate profile results returned by ListFargateProfiles in paginated output. When you use this parameter, ListFargateProfiles returns only maxResults results in a single page along with a nextToken response element. You can see the remaining results of the initial request by sending another ListFargateProfiles request with the returned nextToken value. This value can be between 1 and 100. If you don't use this parameter, ListFargateProfiles returns up to 100 results and a nextToken value if applicable.
    public var maxResults: Swift.Int?
    /// The nextToken value returned from a previous paginated ListFargateProfiles request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value.
    public var nextToken: Swift.String?

    public init (
        clusterName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.clusterName = clusterName
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListFargateProfilesInputBody: Swift.Equatable {
}

extension ListFargateProfilesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListFargateProfilesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListFargateProfilesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListFargateProfilesOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListFargateProfilesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListFargateProfilesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.fargateProfileNames = output.fargateProfileNames
            self.nextToken = output.nextToken
        } else {
            self.fargateProfileNames = nil
            self.nextToken = nil
        }
    }
}

public struct ListFargateProfilesOutputResponse: Swift.Equatable {
    /// A list of all of the Fargate profiles associated with the specified cluster.
    public var fargateProfileNames: [Swift.String]?
    /// The nextToken value to include in a future ListFargateProfiles request. When the results of a ListFargateProfiles request exceed maxResults, you can use this value to retrieve the next page of results. This value is null when there are no more results to return.
    public var nextToken: Swift.String?

    public init (
        fargateProfileNames: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.fargateProfileNames = fargateProfileNames
        self.nextToken = nextToken
    }
}

struct ListFargateProfilesOutputResponseBody: Swift.Equatable {
    let fargateProfileNames: [Swift.String]?
    let nextToken: Swift.String?
}

extension ListFargateProfilesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fargateProfileNames
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fargateProfileNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .fargateProfileNames)
        var fargateProfileNamesDecoded0:[Swift.String]? = nil
        if let fargateProfileNamesContainer = fargateProfileNamesContainer {
            fargateProfileNamesDecoded0 = [Swift.String]()
            for string0 in fargateProfileNamesContainer {
                if let string0 = string0 {
                    fargateProfileNamesDecoded0?.append(string0)
                }
            }
        }
        fargateProfileNames = fargateProfileNamesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListIdentityProviderConfigsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            return items
        }
    }
}

extension ListIdentityProviderConfigsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let clusterName = clusterName else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/identity-provider-configs"
    }
}

public struct ListIdentityProviderConfigsInput: Swift.Equatable {
    /// The cluster name that you want to list identity provider configurations for.
    /// This member is required.
    public var clusterName: Swift.String?
    /// The maximum number of identity provider configurations returned by ListIdentityProviderConfigs in paginated output. When you use this parameter, ListIdentityProviderConfigs returns only maxResults results in a single page along with a nextToken response element. You can see the remaining results of the initial request by sending another ListIdentityProviderConfigs request with the returned nextToken value. This value can be between 1 and 100. If you don't use this parameter, ListIdentityProviderConfigs returns up to 100 results and a nextToken value, if applicable.
    public var maxResults: Swift.Int?
    /// The nextToken value returned from a previous paginated IdentityProviderConfigsRequest where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value.
    public var nextToken: Swift.String?

    public init (
        clusterName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.clusterName = clusterName
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListIdentityProviderConfigsInputBody: Swift.Equatable {
}

extension ListIdentityProviderConfigsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListIdentityProviderConfigsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListIdentityProviderConfigsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListIdentityProviderConfigsOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListIdentityProviderConfigsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListIdentityProviderConfigsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.identityProviderConfigs = output.identityProviderConfigs
            self.nextToken = output.nextToken
        } else {
            self.identityProviderConfigs = nil
            self.nextToken = nil
        }
    }
}

public struct ListIdentityProviderConfigsOutputResponse: Swift.Equatable {
    /// The identity provider configurations for the cluster.
    public var identityProviderConfigs: [EKSClientTypes.IdentityProviderConfig]?
    /// The nextToken value returned from a previous paginated ListIdentityProviderConfigsResponse where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value.
    public var nextToken: Swift.String?

    public init (
        identityProviderConfigs: [EKSClientTypes.IdentityProviderConfig]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.identityProviderConfigs = identityProviderConfigs
        self.nextToken = nextToken
    }
}

struct ListIdentityProviderConfigsOutputResponseBody: Swift.Equatable {
    let identityProviderConfigs: [EKSClientTypes.IdentityProviderConfig]?
    let nextToken: Swift.String?
}

extension ListIdentityProviderConfigsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identityProviderConfigs
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityProviderConfigsContainer = try containerValues.decodeIfPresent([EKSClientTypes.IdentityProviderConfig?].self, forKey: .identityProviderConfigs)
        var identityProviderConfigsDecoded0:[EKSClientTypes.IdentityProviderConfig]? = nil
        if let identityProviderConfigsContainer = identityProviderConfigsContainer {
            identityProviderConfigsDecoded0 = [EKSClientTypes.IdentityProviderConfig]()
            for structure0 in identityProviderConfigsContainer {
                if let structure0 = structure0 {
                    identityProviderConfigsDecoded0?.append(structure0)
                }
            }
        }
        identityProviderConfigs = identityProviderConfigsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListNodegroupsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            return items
        }
    }
}

extension ListNodegroupsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let clusterName = clusterName else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/node-groups"
    }
}

public struct ListNodegroupsInput: Swift.Equatable {
    /// The name of the Amazon EKS cluster that you would like to list node groups in.
    /// This member is required.
    public var clusterName: Swift.String?
    /// The maximum number of node group results returned by ListNodegroups in paginated output. When you use this parameter, ListNodegroups returns only maxResults results in a single page along with a nextToken response element. You can see the remaining results of the initial request by sending another ListNodegroups request with the returned nextToken value. This value can be between 1 and 100. If you don't use this parameter, ListNodegroups returns up to 100 results and a nextToken value if applicable.
    public var maxResults: Swift.Int?
    /// The nextToken value returned from a previous paginated ListNodegroups request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value.
    public var nextToken: Swift.String?

    public init (
        clusterName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.clusterName = clusterName
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListNodegroupsInputBody: Swift.Equatable {
}

extension ListNodegroupsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListNodegroupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListNodegroupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListNodegroupsOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListNodegroupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListNodegroupsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.nodegroups = output.nodegroups
        } else {
            self.nextToken = nil
            self.nodegroups = nil
        }
    }
}

public struct ListNodegroupsOutputResponse: Swift.Equatable {
    /// The nextToken value to include in a future ListNodegroups request. When the results of a ListNodegroups request exceed maxResults, you can use this value to retrieve the next page of results. This value is null when there are no more results to return.
    public var nextToken: Swift.String?
    /// A list of all of the node groups associated with the specified cluster.
    public var nodegroups: [Swift.String]?

    public init (
        nextToken: Swift.String? = nil,
        nodegroups: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.nodegroups = nodegroups
    }
}

struct ListNodegroupsOutputResponseBody: Swift.Equatable {
    let nodegroups: [Swift.String]?
    let nextToken: Swift.String?
}

extension ListNodegroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case nodegroups
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nodegroupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .nodegroups)
        var nodegroupsDecoded0:[Swift.String]? = nil
        if let nodegroupsContainer = nodegroupsContainer {
            nodegroupsDecoded0 = [Swift.String]()
            for string0 in nodegroupsContainer {
                if let string0 = string0 {
                    nodegroupsDecoded0?.append(string0)
                }
            }
        }
        nodegroups = nodegroupsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTagsForResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let resourceArn = resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

public struct ListTagsForResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) that identifies the resource for which to list the tags. Currently, the supported resources are Amazon EKS clusters and managed node groups.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
}

extension ListTagsForResourceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tags = output.tags
        } else {
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// The tags for the resource.
    public var tags: [Swift.String:Swift.String]?

    public init (
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    let tags: [Swift.String:Swift.String]?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension ListUpdatesInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nodegroupName = nodegroupName {
                let nodegroupNameQueryItem = ClientRuntime.URLQueryItem(name: "nodegroupName".urlPercentEncoding(), value: Swift.String(nodegroupName).urlPercentEncoding())
                items.append(nodegroupNameQueryItem)
            }
            if let addonName = addonName {
                let addonNameQueryItem = ClientRuntime.URLQueryItem(name: "addonName".urlPercentEncoding(), value: Swift.String(addonName).urlPercentEncoding())
                items.append(addonNameQueryItem)
            }
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            return items
        }
    }
}

extension ListUpdatesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let name = name else {
            return nil
        }
        return "/clusters/\(name.urlPercentEncoding())/updates"
    }
}

public struct ListUpdatesInput: Swift.Equatable {
    /// The names of the installed add-ons that have available updates.
    public var addonName: Swift.String?
    /// The maximum number of update results returned by ListUpdates in paginated output. When you use this parameter, ListUpdates returns only maxResults results in a single page along with a nextToken response element. You can see the remaining results of the initial request by sending another ListUpdates request with the returned nextToken value. This value can be between 1 and 100. If you don't use this parameter, ListUpdates returns up to 100 results and a nextToken value if applicable.
    public var maxResults: Swift.Int?
    /// The name of the Amazon EKS cluster to list updates for.
    /// This member is required.
    public var name: Swift.String?
    /// The nextToken value returned from a previous paginated ListUpdates request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value.
    public var nextToken: Swift.String?
    /// The name of the Amazon EKS managed node group to list updates for.
    public var nodegroupName: Swift.String?

    public init (
        addonName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        name: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        nodegroupName: Swift.String? = nil
    )
    {
        self.addonName = addonName
        self.maxResults = maxResults
        self.name = name
        self.nextToken = nextToken
        self.nodegroupName = nodegroupName
    }
}

struct ListUpdatesInputBody: Swift.Equatable {
}

extension ListUpdatesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListUpdatesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListUpdatesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListUpdatesOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListUpdatesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListUpdatesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.updateIds = output.updateIds
        } else {
            self.nextToken = nil
            self.updateIds = nil
        }
    }
}

public struct ListUpdatesOutputResponse: Swift.Equatable {
    /// The nextToken value to include in a future ListUpdates request. When the results of a ListUpdates request exceed maxResults, you can use this value to retrieve the next page of results. This value is null when there are no more results to return.
    public var nextToken: Swift.String?
    /// A list of all the updates for the specified cluster and Region.
    public var updateIds: [Swift.String]?

    public init (
        nextToken: Swift.String? = nil,
        updateIds: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.updateIds = updateIds
    }
}

struct ListUpdatesOutputResponseBody: Swift.Equatable {
    let updateIds: [Swift.String]?
    let nextToken: Swift.String?
}

extension ListUpdatesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case updateIds
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .updateIds)
        var updateIdsDecoded0:[Swift.String]? = nil
        if let updateIdsContainer = updateIdsContainer {
            updateIdsDecoded0 = [Swift.String]()
            for string0 in updateIdsContainer {
                if let string0 = string0 {
                    updateIdsDecoded0?.append(string0)
                }
            }
        }
        updateIds = updateIdsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension EKSClientTypes.LogSetup: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled
        case types
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let types = types {
            var typesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .types)
            for logtype0 in types {
                try typesContainer.encode(logtype0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typesContainer = try containerValues.decodeIfPresent([EKSClientTypes.LogType?].self, forKey: .types)
        var typesDecoded0:[EKSClientTypes.LogType]? = nil
        if let typesContainer = typesContainer {
            typesDecoded0 = [EKSClientTypes.LogType]()
            for enum0 in typesContainer {
                if let enum0 = enum0 {
                    typesDecoded0?.append(enum0)
                }
            }
        }
        types = typesDecoded0
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
    }
}

extension EKSClientTypes {
    /// An object representing the enabled or disabled Kubernetes control plane logs for your cluster.
    public struct LogSetup: Swift.Equatable {
        /// If a log type is enabled, that log type exports its control plane logs to CloudWatch Logs. If a log type isn't enabled, that log type doesn't export its control plane logs. Each individual log type can be enabled or disabled independently.
        public var enabled: Swift.Bool?
        /// The available cluster control plane log types.
        public var types: [EKSClientTypes.LogType]?

        public init (
            enabled: Swift.Bool? = nil,
            types: [EKSClientTypes.LogType]? = nil
        )
        {
            self.enabled = enabled
            self.types = types
        }
    }

}

extension EKSClientTypes {
    public enum LogType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case api
        case audit
        case authenticator
        case controllerManager
        case scheduler
        case sdkUnknown(Swift.String)

        public static var allCases: [LogType] {
            return [
                .api,
                .audit,
                .authenticator,
                .controllerManager,
                .scheduler,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .api: return "api"
            case .audit: return "audit"
            case .authenticator: return "authenticator"
            case .controllerManager: return "controllerManager"
            case .scheduler: return "scheduler"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LogType(rawValue: rawValue) ?? LogType.sdkUnknown(rawValue)
        }
    }
}

extension EKSClientTypes.Logging: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterLogging
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterLogging = clusterLogging {
            var clusterLoggingContainer = encodeContainer.nestedUnkeyedContainer(forKey: .clusterLogging)
            for logsetup0 in clusterLogging {
                try clusterLoggingContainer.encode(logsetup0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterLoggingContainer = try containerValues.decodeIfPresent([EKSClientTypes.LogSetup?].self, forKey: .clusterLogging)
        var clusterLoggingDecoded0:[EKSClientTypes.LogSetup]? = nil
        if let clusterLoggingContainer = clusterLoggingContainer {
            clusterLoggingDecoded0 = [EKSClientTypes.LogSetup]()
            for structure0 in clusterLoggingContainer {
                if let structure0 = structure0 {
                    clusterLoggingDecoded0?.append(structure0)
                }
            }
        }
        clusterLogging = clusterLoggingDecoded0
    }
}

extension EKSClientTypes {
    /// An object representing the logging configuration for resources in your cluster.
    public struct Logging: Swift.Equatable {
        /// The cluster control plane logging configuration for your cluster.
        public var clusterLogging: [EKSClientTypes.LogSetup]?

        public init (
            clusterLogging: [EKSClientTypes.LogSetup]? = nil
        )
        {
            self.clusterLogging = clusterLogging
        }
    }

}

extension EKSClientTypes.MarketplaceInformation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case productId
        case productUrl
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let productId = self.productId {
            try encodeContainer.encode(productId, forKey: .productId)
        }
        if let productUrl = self.productUrl {
            try encodeContainer.encode(productUrl, forKey: .productUrl)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let productIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .productId)
        productId = productIdDecoded
        let productUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .productUrl)
        productUrl = productUrlDecoded
    }
}

extension EKSClientTypes {
    /// Information about an Amazon EKS add-on from the Amazon Web Services Marketplace.
    public struct MarketplaceInformation: Swift.Equatable {
        /// The product ID from the Amazon Web Services Marketplace.
        public var productId: Swift.String?
        /// The product URL from the Amazon Web Services Marketplace.
        public var productUrl: Swift.String?

        public init (
            productId: Swift.String? = nil,
            productUrl: Swift.String? = nil
        )
        {
            self.productId = productId
            self.productUrl = productUrl
        }
    }

}

extension EKSClientTypes.Nodegroup: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case amiType
        case capacityType
        case clusterName
        case createdAt
        case diskSize
        case health
        case instanceTypes
        case labels
        case launchTemplate
        case modifiedAt
        case nodeRole
        case nodegroupArn
        case nodegroupName
        case releaseVersion
        case remoteAccess
        case resources
        case scalingConfig
        case status
        case subnets
        case tags
        case taints
        case updateConfig
        case version
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let amiType = self.amiType {
            try encodeContainer.encode(amiType.rawValue, forKey: .amiType)
        }
        if let capacityType = self.capacityType {
            try encodeContainer.encode(capacityType.rawValue, forKey: .capacityType)
        }
        if let clusterName = self.clusterName {
            try encodeContainer.encode(clusterName, forKey: .clusterName)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let diskSize = self.diskSize {
            try encodeContainer.encode(diskSize, forKey: .diskSize)
        }
        if let health = self.health {
            try encodeContainer.encode(health, forKey: .health)
        }
        if let instanceTypes = instanceTypes {
            var instanceTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceTypes)
            for string0 in instanceTypes {
                try instanceTypesContainer.encode(string0)
            }
        }
        if let labels = labels {
            var labelsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .labels)
            for (dictKey0, labelsMap0) in labels {
                try labelsContainer.encode(labelsMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let launchTemplate = self.launchTemplate {
            try encodeContainer.encode(launchTemplate, forKey: .launchTemplate)
        }
        if let modifiedAt = self.modifiedAt {
            try encodeContainer.encodeTimestamp(modifiedAt, format: .epochSeconds, forKey: .modifiedAt)
        }
        if let nodeRole = self.nodeRole {
            try encodeContainer.encode(nodeRole, forKey: .nodeRole)
        }
        if let nodegroupArn = self.nodegroupArn {
            try encodeContainer.encode(nodegroupArn, forKey: .nodegroupArn)
        }
        if let nodegroupName = self.nodegroupName {
            try encodeContainer.encode(nodegroupName, forKey: .nodegroupName)
        }
        if let releaseVersion = self.releaseVersion {
            try encodeContainer.encode(releaseVersion, forKey: .releaseVersion)
        }
        if let remoteAccess = self.remoteAccess {
            try encodeContainer.encode(remoteAccess, forKey: .remoteAccess)
        }
        if let resources = self.resources {
            try encodeContainer.encode(resources, forKey: .resources)
        }
        if let scalingConfig = self.scalingConfig {
            try encodeContainer.encode(scalingConfig, forKey: .scalingConfig)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let subnets = subnets {
            var subnetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnets)
            for string0 in subnets {
                try subnetsContainer.encode(string0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagMap0) in tags {
                try tagsContainer.encode(tagMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let taints = taints {
            var taintsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .taints)
            for taint0 in taints {
                try taintsContainer.encode(taint0)
            }
        }
        if let updateConfig = self.updateConfig {
            try encodeContainer.encode(updateConfig, forKey: .updateConfig)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nodegroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodegroupName)
        nodegroupName = nodegroupNameDecoded
        let nodegroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodegroupArn)
        nodegroupArn = nodegroupArnDecoded
        let clusterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterName)
        clusterName = clusterNameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let releaseVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .releaseVersion)
        releaseVersion = releaseVersionDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let modifiedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .modifiedAt)
        modifiedAt = modifiedAtDecoded
        let statusDecoded = try containerValues.decodeIfPresent(EKSClientTypes.NodegroupStatus.self, forKey: .status)
        status = statusDecoded
        let capacityTypeDecoded = try containerValues.decodeIfPresent(EKSClientTypes.CapacityTypes.self, forKey: .capacityType)
        capacityType = capacityTypeDecoded
        let scalingConfigDecoded = try containerValues.decodeIfPresent(EKSClientTypes.NodegroupScalingConfig.self, forKey: .scalingConfig)
        scalingConfig = scalingConfigDecoded
        let instanceTypesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .instanceTypes)
        var instanceTypesDecoded0:[Swift.String]? = nil
        if let instanceTypesContainer = instanceTypesContainer {
            instanceTypesDecoded0 = [Swift.String]()
            for string0 in instanceTypesContainer {
                if let string0 = string0 {
                    instanceTypesDecoded0?.append(string0)
                }
            }
        }
        instanceTypes = instanceTypesDecoded0
        let subnetsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnets)
        var subnetsDecoded0:[Swift.String]? = nil
        if let subnetsContainer = subnetsContainer {
            subnetsDecoded0 = [Swift.String]()
            for string0 in subnetsContainer {
                if let string0 = string0 {
                    subnetsDecoded0?.append(string0)
                }
            }
        }
        subnets = subnetsDecoded0
        let remoteAccessDecoded = try containerValues.decodeIfPresent(EKSClientTypes.RemoteAccessConfig.self, forKey: .remoteAccess)
        remoteAccess = remoteAccessDecoded
        let amiTypeDecoded = try containerValues.decodeIfPresent(EKSClientTypes.AMITypes.self, forKey: .amiType)
        amiType = amiTypeDecoded
        let nodeRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeRole)
        nodeRole = nodeRoleDecoded
        let labelsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .labels)
        var labelsDecoded0: [Swift.String:Swift.String]? = nil
        if let labelsContainer = labelsContainer {
            labelsDecoded0 = [Swift.String:Swift.String]()
            for (key0, labelvalue0) in labelsContainer {
                if let labelvalue0 = labelvalue0 {
                    labelsDecoded0?[key0] = labelvalue0
                }
            }
        }
        labels = labelsDecoded0
        let taintsContainer = try containerValues.decodeIfPresent([EKSClientTypes.Taint?].self, forKey: .taints)
        var taintsDecoded0:[EKSClientTypes.Taint]? = nil
        if let taintsContainer = taintsContainer {
            taintsDecoded0 = [EKSClientTypes.Taint]()
            for structure0 in taintsContainer {
                if let structure0 = structure0 {
                    taintsDecoded0?.append(structure0)
                }
            }
        }
        taints = taintsDecoded0
        let resourcesDecoded = try containerValues.decodeIfPresent(EKSClientTypes.NodegroupResources.self, forKey: .resources)
        resources = resourcesDecoded
        let diskSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .diskSize)
        diskSize = diskSizeDecoded
        let healthDecoded = try containerValues.decodeIfPresent(EKSClientTypes.NodegroupHealth.self, forKey: .health)
        health = healthDecoded
        let updateConfigDecoded = try containerValues.decodeIfPresent(EKSClientTypes.NodegroupUpdateConfig.self, forKey: .updateConfig)
        updateConfig = updateConfigDecoded
        let launchTemplateDecoded = try containerValues.decodeIfPresent(EKSClientTypes.LaunchTemplateSpecification.self, forKey: .launchTemplate)
        launchTemplate = launchTemplateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension EKSClientTypes {
    /// An object representing an Amazon EKS managed node group.
    public struct Nodegroup: Swift.Equatable {
        /// If the node group was deployed using a launch template with a custom AMI, then this is CUSTOM. For node groups that weren't deployed using a launch template, this is the AMI type that was specified in the node group configuration.
        public var amiType: EKSClientTypes.AMITypes?
        /// The capacity type of your managed node group.
        public var capacityType: EKSClientTypes.CapacityTypes?
        /// The name of the cluster that the managed node group resides in.
        public var clusterName: Swift.String?
        /// The Unix epoch timestamp in seconds for when the managed node group was created.
        public var createdAt: ClientRuntime.Date?
        /// If the node group wasn't deployed with a launch template, then this is the disk size in the node group configuration. If the node group was deployed with a launch template, then this is null.
        public var diskSize: Swift.Int?
        /// The health status of the node group. If there are issues with your node group's health, they are listed here.
        public var health: EKSClientTypes.NodegroupHealth?
        /// If the node group wasn't deployed with a launch template, then this is the instance type that is associated with the node group. If the node group was deployed with a launch template, then this is null.
        public var instanceTypes: [Swift.String]?
        /// The Kubernetes labels applied to the nodes in the node group. Only labels that are applied with the Amazon EKS API are shown here. There may be other Kubernetes labels applied to the nodes in this group.
        public var labels: [Swift.String:Swift.String]?
        /// If a launch template was used to create the node group, then this is the launch template that was used.
        public var launchTemplate: EKSClientTypes.LaunchTemplateSpecification?
        /// The Unix epoch timestamp in seconds for when the managed node group was last modified.
        public var modifiedAt: ClientRuntime.Date?
        /// The IAM role associated with your node group. The Amazon EKS node kubelet daemon makes calls to Amazon Web Services APIs on your behalf. Nodes receive permissions for these API calls through an IAM instance profile and associated policies.
        public var nodeRole: Swift.String?
        /// The Amazon Resource Name (ARN) associated with the managed node group.
        public var nodegroupArn: Swift.String?
        /// The name associated with an Amazon EKS managed node group.
        public var nodegroupName: Swift.String?
        /// If the node group was deployed using a launch template with a custom AMI, then this is the AMI ID that was specified in the launch template. For node groups that weren't deployed using a launch template, this is the version of the Amazon EKS optimized AMI that the node group was deployed with.
        public var releaseVersion: Swift.String?
        /// If the node group wasn't deployed with a launch template, then this is the remote access configuration that is associated with the node group. If the node group was deployed with a launch template, then this is null.
        public var remoteAccess: EKSClientTypes.RemoteAccessConfig?
        /// The resources associated with the node group, such as Auto Scaling groups and security groups for remote access.
        public var resources: EKSClientTypes.NodegroupResources?
        /// The scaling configuration details for the Auto Scaling group that is associated with your node group.
        public var scalingConfig: EKSClientTypes.NodegroupScalingConfig?
        /// The current status of the managed node group.
        public var status: EKSClientTypes.NodegroupStatus?
        /// The subnets that were specified for the Auto Scaling group that is associated with your node group.
        public var subnets: [Swift.String]?
        /// The metadata applied to the node group to assist with categorization and organization. Each tag consists of a key and an optional value. You define both. Node group tags do not propagate to any other resources associated with the node group, such as the Amazon EC2 instances or subnets.
        public var tags: [Swift.String:Swift.String]?
        /// The Kubernetes taints to be applied to the nodes in the node group when they are created. Effect is one of No_Schedule, Prefer_No_Schedule, or No_Execute. Kubernetes taints can be used together with tolerations to control how workloads are scheduled to your nodes. For more information, see [Node taints on managed node groups](https://docs.aws.amazon.com/eks/latest/userguide/node-taints-managed-node-groups.html).
        public var taints: [EKSClientTypes.Taint]?
        /// The node group update configuration.
        public var updateConfig: EKSClientTypes.NodegroupUpdateConfig?
        /// The Kubernetes version of the managed node group.
        public var version: Swift.String?

        public init (
            amiType: EKSClientTypes.AMITypes? = nil,
            capacityType: EKSClientTypes.CapacityTypes? = nil,
            clusterName: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            diskSize: Swift.Int? = nil,
            health: EKSClientTypes.NodegroupHealth? = nil,
            instanceTypes: [Swift.String]? = nil,
            labels: [Swift.String:Swift.String]? = nil,
            launchTemplate: EKSClientTypes.LaunchTemplateSpecification? = nil,
            modifiedAt: ClientRuntime.Date? = nil,
            nodeRole: Swift.String? = nil,
            nodegroupArn: Swift.String? = nil,
            nodegroupName: Swift.String? = nil,
            releaseVersion: Swift.String? = nil,
            remoteAccess: EKSClientTypes.RemoteAccessConfig? = nil,
            resources: EKSClientTypes.NodegroupResources? = nil,
            scalingConfig: EKSClientTypes.NodegroupScalingConfig? = nil,
            status: EKSClientTypes.NodegroupStatus? = nil,
            subnets: [Swift.String]? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            taints: [EKSClientTypes.Taint]? = nil,
            updateConfig: EKSClientTypes.NodegroupUpdateConfig? = nil,
            version: Swift.String? = nil
        )
        {
            self.amiType = amiType
            self.capacityType = capacityType
            self.clusterName = clusterName
            self.createdAt = createdAt
            self.diskSize = diskSize
            self.health = health
            self.instanceTypes = instanceTypes
            self.labels = labels
            self.launchTemplate = launchTemplate
            self.modifiedAt = modifiedAt
            self.nodeRole = nodeRole
            self.nodegroupArn = nodegroupArn
            self.nodegroupName = nodegroupName
            self.releaseVersion = releaseVersion
            self.remoteAccess = remoteAccess
            self.resources = resources
            self.scalingConfig = scalingConfig
            self.status = status
            self.subnets = subnets
            self.tags = tags
            self.taints = taints
            self.updateConfig = updateConfig
            self.version = version
        }
    }

}

extension EKSClientTypes.NodegroupHealth: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case issues
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let issues = issues {
            var issuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .issues)
            for issue0 in issues {
                try issuesContainer.encode(issue0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let issuesContainer = try containerValues.decodeIfPresent([EKSClientTypes.Issue?].self, forKey: .issues)
        var issuesDecoded0:[EKSClientTypes.Issue]? = nil
        if let issuesContainer = issuesContainer {
            issuesDecoded0 = [EKSClientTypes.Issue]()
            for structure0 in issuesContainer {
                if let structure0 = structure0 {
                    issuesDecoded0?.append(structure0)
                }
            }
        }
        issues = issuesDecoded0
    }
}

extension EKSClientTypes {
    /// An object representing the health status of the node group.
    public struct NodegroupHealth: Swift.Equatable {
        /// Any issues that are associated with the node group.
        public var issues: [EKSClientTypes.Issue]?

        public init (
            issues: [EKSClientTypes.Issue]? = nil
        )
        {
            self.issues = issues
        }
    }

}

extension EKSClientTypes {
    public enum NodegroupIssueCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accessDenied
        case asgInstanceLaunchFailures
        case autoScalingGroupInvalidConfiguration
        case autoScalingGroupNotFound
        case clusterUnreachable
        case ec2LaunchTemplateNotFound
        case ec2LaunchTemplateVersionMismatch
        case ec2SecurityGroupDeletionFailure
        case ec2SecurityGroupNotFound
        case ec2SubnetInvalidConfiguration
        case ec2SubnetMissingIpv6Assignment
        case ec2SubnetNotFound
        case iamInstanceProfileNotFound
        case iamLimitExceeded
        case iamNodeRoleNotFound
        case instanceLimitExceeded
        case insufficientFreeAddresses
        case internalFailure
        case nodeCreationFailure
        case sdkUnknown(Swift.String)

        public static var allCases: [NodegroupIssueCode] {
            return [
                .accessDenied,
                .asgInstanceLaunchFailures,
                .autoScalingGroupInvalidConfiguration,
                .autoScalingGroupNotFound,
                .clusterUnreachable,
                .ec2LaunchTemplateNotFound,
                .ec2LaunchTemplateVersionMismatch,
                .ec2SecurityGroupDeletionFailure,
                .ec2SecurityGroupNotFound,
                .ec2SubnetInvalidConfiguration,
                .ec2SubnetMissingIpv6Assignment,
                .ec2SubnetNotFound,
                .iamInstanceProfileNotFound,
                .iamLimitExceeded,
                .iamNodeRoleNotFound,
                .instanceLimitExceeded,
                .insufficientFreeAddresses,
                .internalFailure,
                .nodeCreationFailure,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accessDenied: return "AccessDenied"
            case .asgInstanceLaunchFailures: return "AsgInstanceLaunchFailures"
            case .autoScalingGroupInvalidConfiguration: return "AutoScalingGroupInvalidConfiguration"
            case .autoScalingGroupNotFound: return "AutoScalingGroupNotFound"
            case .clusterUnreachable: return "ClusterUnreachable"
            case .ec2LaunchTemplateNotFound: return "Ec2LaunchTemplateNotFound"
            case .ec2LaunchTemplateVersionMismatch: return "Ec2LaunchTemplateVersionMismatch"
            case .ec2SecurityGroupDeletionFailure: return "Ec2SecurityGroupDeletionFailure"
            case .ec2SecurityGroupNotFound: return "Ec2SecurityGroupNotFound"
            case .ec2SubnetInvalidConfiguration: return "Ec2SubnetInvalidConfiguration"
            case .ec2SubnetMissingIpv6Assignment: return "Ec2SubnetMissingIpv6Assignment"
            case .ec2SubnetNotFound: return "Ec2SubnetNotFound"
            case .iamInstanceProfileNotFound: return "IamInstanceProfileNotFound"
            case .iamLimitExceeded: return "IamLimitExceeded"
            case .iamNodeRoleNotFound: return "IamNodeRoleNotFound"
            case .instanceLimitExceeded: return "InstanceLimitExceeded"
            case .insufficientFreeAddresses: return "InsufficientFreeAddresses"
            case .internalFailure: return "InternalFailure"
            case .nodeCreationFailure: return "NodeCreationFailure"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = NodegroupIssueCode(rawValue: rawValue) ?? NodegroupIssueCode.sdkUnknown(rawValue)
        }
    }
}

extension EKSClientTypes.NodegroupResources: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroups
        case remoteAccessSecurityGroup
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoScalingGroups = autoScalingGroups {
            var autoScalingGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .autoScalingGroups)
            for autoscalinggroup0 in autoScalingGroups {
                try autoScalingGroupsContainer.encode(autoscalinggroup0)
            }
        }
        if let remoteAccessSecurityGroup = self.remoteAccessSecurityGroup {
            try encodeContainer.encode(remoteAccessSecurityGroup, forKey: .remoteAccessSecurityGroup)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupsContainer = try containerValues.decodeIfPresent([EKSClientTypes.AutoScalingGroup?].self, forKey: .autoScalingGroups)
        var autoScalingGroupsDecoded0:[EKSClientTypes.AutoScalingGroup]? = nil
        if let autoScalingGroupsContainer = autoScalingGroupsContainer {
            autoScalingGroupsDecoded0 = [EKSClientTypes.AutoScalingGroup]()
            for structure0 in autoScalingGroupsContainer {
                if let structure0 = structure0 {
                    autoScalingGroupsDecoded0?.append(structure0)
                }
            }
        }
        autoScalingGroups = autoScalingGroupsDecoded0
        let remoteAccessSecurityGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .remoteAccessSecurityGroup)
        remoteAccessSecurityGroup = remoteAccessSecurityGroupDecoded
    }
}

extension EKSClientTypes {
    /// An object representing the resources associated with the node group, such as Auto Scaling groups and security groups for remote access.
    public struct NodegroupResources: Swift.Equatable {
        /// The Auto Scaling groups associated with the node group.
        public var autoScalingGroups: [EKSClientTypes.AutoScalingGroup]?
        /// The remote access security group associated with the node group. This security group controls SSH access to the nodes.
        public var remoteAccessSecurityGroup: Swift.String?

        public init (
            autoScalingGroups: [EKSClientTypes.AutoScalingGroup]? = nil,
            remoteAccessSecurityGroup: Swift.String? = nil
        )
        {
            self.autoScalingGroups = autoScalingGroups
            self.remoteAccessSecurityGroup = remoteAccessSecurityGroup
        }
    }

}

extension EKSClientTypes.NodegroupScalingConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case desiredSize
        case maxSize
        case minSize
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let desiredSize = self.desiredSize {
            try encodeContainer.encode(desiredSize, forKey: .desiredSize)
        }
        if let maxSize = self.maxSize {
            try encodeContainer.encode(maxSize, forKey: .maxSize)
        }
        if let minSize = self.minSize {
            try encodeContainer.encode(minSize, forKey: .minSize)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minSize)
        minSize = minSizeDecoded
        let maxSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxSize)
        maxSize = maxSizeDecoded
        let desiredSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .desiredSize)
        desiredSize = desiredSizeDecoded
    }
}

extension EKSClientTypes {
    /// An object representing the scaling configuration details for the Auto Scaling group that is associated with your node group. When creating a node group, you must specify all or none of the properties. When updating a node group, you can specify any or none of the properties.
    public struct NodegroupScalingConfig: Swift.Equatable {
        /// The current number of nodes that the managed node group should maintain. If you use Cluster Autoscaler, you shouldn't change the desiredSize value directly, as this can cause the Cluster Autoscaler to suddenly scale up or scale down. Whenever this parameter changes, the number of worker nodes in the node group is updated to the specified size. If this parameter is given a value that is smaller than the current number of running worker nodes, the necessary number of worker nodes are terminated to match the given value. When using CloudFormation, no action occurs if you remove this parameter from your CFN template. This parameter can be different from minSize in some cases, such as when starting with extra hosts for testing. This parameter can also be different when you want to start with an estimated number of needed hosts, but let Cluster Autoscaler reduce the number if there are too many. When Cluster Autoscaler is used, the desiredSize parameter is altered by Cluster Autoscaler (but can be out-of-date for short periods of time). Cluster Autoscaler doesn't scale a managed node group lower than minSize or higher than maxSize.
        public var desiredSize: Swift.Int?
        /// The maximum number of nodes that the managed node group can scale out to. For information about the maximum number that you can specify, see [Amazon EKS service quotas](https://docs.aws.amazon.com/eks/latest/userguide/service-quotas.html) in the Amazon EKS User Guide.
        public var maxSize: Swift.Int?
        /// The minimum number of nodes that the managed node group can scale in to.
        public var minSize: Swift.Int?

        public init (
            desiredSize: Swift.Int? = nil,
            maxSize: Swift.Int? = nil,
            minSize: Swift.Int? = nil
        )
        {
            self.desiredSize = desiredSize
            self.maxSize = maxSize
            self.minSize = minSize
        }
    }

}

extension EKSClientTypes {
    public enum NodegroupStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case createFailed
        case creating
        case degraded
        case deleteFailed
        case deleting
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [NodegroupStatus] {
            return [
                .active,
                .createFailed,
                .creating,
                .degraded,
                .deleteFailed,
                .deleting,
                .updating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .createFailed: return "CREATE_FAILED"
            case .creating: return "CREATING"
            case .degraded: return "DEGRADED"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleting: return "DELETING"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = NodegroupStatus(rawValue: rawValue) ?? NodegroupStatus.sdkUnknown(rawValue)
        }
    }
}

extension EKSClientTypes.NodegroupUpdateConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxUnavailable
        case maxUnavailablePercentage
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxUnavailable = self.maxUnavailable {
            try encodeContainer.encode(maxUnavailable, forKey: .maxUnavailable)
        }
        if let maxUnavailablePercentage = self.maxUnavailablePercentage {
            try encodeContainer.encode(maxUnavailablePercentage, forKey: .maxUnavailablePercentage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxUnavailableDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxUnavailable)
        maxUnavailable = maxUnavailableDecoded
        let maxUnavailablePercentageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxUnavailablePercentage)
        maxUnavailablePercentage = maxUnavailablePercentageDecoded
    }
}

extension EKSClientTypes {
    /// The node group update configuration.
    public struct NodegroupUpdateConfig: Swift.Equatable {
        /// The maximum number of nodes unavailable at once during a version update. Nodes will be updated in parallel. This value or maxUnavailablePercentage is required to have a value.The maximum number is 100.
        public var maxUnavailable: Swift.Int?
        /// The maximum percentage of nodes unavailable during a version update. This percentage of nodes will be updated in parallel, up to 100 nodes at once. This value or maxUnavailable is required to have a value.
        public var maxUnavailablePercentage: Swift.Int?

        public init (
            maxUnavailable: Swift.Int? = nil,
            maxUnavailablePercentage: Swift.Int? = nil
        )
        {
            self.maxUnavailable = maxUnavailable
            self.maxUnavailablePercentage = maxUnavailablePercentage
        }
    }

}

extension NotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: NotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A service resource associated with the request could not be found. Clients should not retry such requests.
public struct NotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension NotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension EKSClientTypes.OIDC: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case issuer
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let issuer = self.issuer {
            try encodeContainer.encode(issuer, forKey: .issuer)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let issuerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .issuer)
        issuer = issuerDecoded
    }
}

extension EKSClientTypes {
    /// An object representing the [OpenID Connect](https://openid.net/connect/) (OIDC) identity provider information for the cluster.
    public struct OIDC: Swift.Equatable {
        /// The issuer URL for the OIDC identity provider.
        public var issuer: Swift.String?

        public init (
            issuer: Swift.String? = nil
        )
        {
            self.issuer = issuer
        }
    }

}

extension EKSClientTypes.OidcIdentityProviderConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientId
        case clusterName
        case groupsClaim
        case groupsPrefix
        case identityProviderConfigArn
        case identityProviderConfigName
        case issuerUrl
        case requiredClaims
        case status
        case tags
        case usernameClaim
        case usernamePrefix
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientId = self.clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let clusterName = self.clusterName {
            try encodeContainer.encode(clusterName, forKey: .clusterName)
        }
        if let groupsClaim = self.groupsClaim {
            try encodeContainer.encode(groupsClaim, forKey: .groupsClaim)
        }
        if let groupsPrefix = self.groupsPrefix {
            try encodeContainer.encode(groupsPrefix, forKey: .groupsPrefix)
        }
        if let identityProviderConfigArn = self.identityProviderConfigArn {
            try encodeContainer.encode(identityProviderConfigArn, forKey: .identityProviderConfigArn)
        }
        if let identityProviderConfigName = self.identityProviderConfigName {
            try encodeContainer.encode(identityProviderConfigName, forKey: .identityProviderConfigName)
        }
        if let issuerUrl = self.issuerUrl {
            try encodeContainer.encode(issuerUrl, forKey: .issuerUrl)
        }
        if let requiredClaims = requiredClaims {
            var requiredClaimsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .requiredClaims)
            for (dictKey0, requiredClaimsMap0) in requiredClaims {
                try requiredClaimsContainer.encode(requiredClaimsMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagMap0) in tags {
                try tagsContainer.encode(tagMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let usernameClaim = self.usernameClaim {
            try encodeContainer.encode(usernameClaim, forKey: .usernameClaim)
        }
        if let usernamePrefix = self.usernamePrefix {
            try encodeContainer.encode(usernamePrefix, forKey: .usernamePrefix)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityProviderConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identityProviderConfigName)
        identityProviderConfigName = identityProviderConfigNameDecoded
        let identityProviderConfigArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identityProviderConfigArn)
        identityProviderConfigArn = identityProviderConfigArnDecoded
        let clusterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterName)
        clusterName = clusterNameDecoded
        let issuerUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .issuerUrl)
        issuerUrl = issuerUrlDecoded
        let clientIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientId)
        clientId = clientIdDecoded
        let usernameClaimDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .usernameClaim)
        usernameClaim = usernameClaimDecoded
        let usernamePrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .usernamePrefix)
        usernamePrefix = usernamePrefixDecoded
        let groupsClaimDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupsClaim)
        groupsClaim = groupsClaimDecoded
        let groupsPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupsPrefix)
        groupsPrefix = groupsPrefixDecoded
        let requiredClaimsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .requiredClaims)
        var requiredClaimsDecoded0: [Swift.String:Swift.String]? = nil
        if let requiredClaimsContainer = requiredClaimsContainer {
            requiredClaimsDecoded0 = [Swift.String:Swift.String]()
            for (key0, requiredclaimsvalue0) in requiredClaimsContainer {
                if let requiredclaimsvalue0 = requiredclaimsvalue0 {
                    requiredClaimsDecoded0?[key0] = requiredclaimsvalue0
                }
            }
        }
        requiredClaims = requiredClaimsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(EKSClientTypes.ConfigStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension EKSClientTypes {
    /// An object representing the configuration for an OpenID Connect (OIDC) identity provider.
    public struct OidcIdentityProviderConfig: Swift.Equatable {
        /// This is also known as audience. The ID of the client application that makes authentication requests to the OIDC identity provider.
        public var clientId: Swift.String?
        /// The cluster that the configuration is associated to.
        public var clusterName: Swift.String?
        /// The JSON web token (JWT) claim that the provider uses to return your groups.
        public var groupsClaim: Swift.String?
        /// The prefix that is prepended to group claims to prevent clashes with existing names (such as system: groups). For example, the value oidc: creates group names like oidc:engineering and oidc:infra. The prefix can't contain system:
        public var groupsPrefix: Swift.String?
        /// The ARN of the configuration.
        public var identityProviderConfigArn: Swift.String?
        /// The name of the configuration.
        public var identityProviderConfigName: Swift.String?
        /// The URL of the OIDC identity provider that allows the API server to discover public signing keys for verifying tokens.
        public var issuerUrl: Swift.String?
        /// The key-value pairs that describe required claims in the identity token. If set, each claim is verified to be present in the token with a matching value.
        public var requiredClaims: [Swift.String:Swift.String]?
        /// The status of the OIDC identity provider.
        public var status: EKSClientTypes.ConfigStatus?
        /// The metadata to apply to the provider configuration to assist with categorization and organization. Each tag consists of a key and an optional value. You define both.
        public var tags: [Swift.String:Swift.String]?
        /// The JSON Web token (JWT) claim that is used as the username.
        public var usernameClaim: Swift.String?
        /// The prefix that is prepended to username claims to prevent clashes with existing names. The prefix can't contain system:
        public var usernamePrefix: Swift.String?

        public init (
            clientId: Swift.String? = nil,
            clusterName: Swift.String? = nil,
            groupsClaim: Swift.String? = nil,
            groupsPrefix: Swift.String? = nil,
            identityProviderConfigArn: Swift.String? = nil,
            identityProviderConfigName: Swift.String? = nil,
            issuerUrl: Swift.String? = nil,
            requiredClaims: [Swift.String:Swift.String]? = nil,
            status: EKSClientTypes.ConfigStatus? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            usernameClaim: Swift.String? = nil,
            usernamePrefix: Swift.String? = nil
        )
        {
            self.clientId = clientId
            self.clusterName = clusterName
            self.groupsClaim = groupsClaim
            self.groupsPrefix = groupsPrefix
            self.identityProviderConfigArn = identityProviderConfigArn
            self.identityProviderConfigName = identityProviderConfigName
            self.issuerUrl = issuerUrl
            self.requiredClaims = requiredClaims
            self.status = status
            self.tags = tags
            self.usernameClaim = usernameClaim
            self.usernamePrefix = usernamePrefix
        }
    }

}

extension EKSClientTypes.OidcIdentityProviderConfigRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientId
        case groupsClaim
        case groupsPrefix
        case identityProviderConfigName
        case issuerUrl
        case requiredClaims
        case usernameClaim
        case usernamePrefix
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientId = self.clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let groupsClaim = self.groupsClaim {
            try encodeContainer.encode(groupsClaim, forKey: .groupsClaim)
        }
        if let groupsPrefix = self.groupsPrefix {
            try encodeContainer.encode(groupsPrefix, forKey: .groupsPrefix)
        }
        if let identityProviderConfigName = self.identityProviderConfigName {
            try encodeContainer.encode(identityProviderConfigName, forKey: .identityProviderConfigName)
        }
        if let issuerUrl = self.issuerUrl {
            try encodeContainer.encode(issuerUrl, forKey: .issuerUrl)
        }
        if let requiredClaims = requiredClaims {
            var requiredClaimsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .requiredClaims)
            for (dictKey0, requiredClaimsMap0) in requiredClaims {
                try requiredClaimsContainer.encode(requiredClaimsMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let usernameClaim = self.usernameClaim {
            try encodeContainer.encode(usernameClaim, forKey: .usernameClaim)
        }
        if let usernamePrefix = self.usernamePrefix {
            try encodeContainer.encode(usernamePrefix, forKey: .usernamePrefix)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityProviderConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identityProviderConfigName)
        identityProviderConfigName = identityProviderConfigNameDecoded
        let issuerUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .issuerUrl)
        issuerUrl = issuerUrlDecoded
        let clientIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientId)
        clientId = clientIdDecoded
        let usernameClaimDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .usernameClaim)
        usernameClaim = usernameClaimDecoded
        let usernamePrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .usernamePrefix)
        usernamePrefix = usernamePrefixDecoded
        let groupsClaimDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupsClaim)
        groupsClaim = groupsClaimDecoded
        let groupsPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupsPrefix)
        groupsPrefix = groupsPrefixDecoded
        let requiredClaimsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .requiredClaims)
        var requiredClaimsDecoded0: [Swift.String:Swift.String]? = nil
        if let requiredClaimsContainer = requiredClaimsContainer {
            requiredClaimsDecoded0 = [Swift.String:Swift.String]()
            for (key0, requiredclaimsvalue0) in requiredClaimsContainer {
                if let requiredclaimsvalue0 = requiredclaimsvalue0 {
                    requiredClaimsDecoded0?[key0] = requiredclaimsvalue0
                }
            }
        }
        requiredClaims = requiredClaimsDecoded0
    }
}

extension EKSClientTypes {
    /// An object representing an OpenID Connect (OIDC) configuration. Before associating an OIDC identity provider to your cluster, review the considerations in [Authenticating users for your cluster from an OpenID Connect identity provider](https://docs.aws.amazon.com/eks/latest/userguide/authenticate-oidc-identity-provider.html) in the Amazon EKS User Guide.
    public struct OidcIdentityProviderConfigRequest: Swift.Equatable {
        /// This is also known as audience. The ID for the client application that makes authentication requests to the OpenID identity provider.
        /// This member is required.
        public var clientId: Swift.String?
        /// The JWT claim that the provider uses to return your groups.
        public var groupsClaim: Swift.String?
        /// The prefix that is prepended to group claims to prevent clashes with existing names (such as system: groups). For example, the value oidc: will create group names like oidc:engineering and oidc:infra.
        public var groupsPrefix: Swift.String?
        /// The name of the OIDC provider configuration.
        /// This member is required.
        public var identityProviderConfigName: Swift.String?
        /// The URL of the OpenID identity provider that allows the API server to discover public signing keys for verifying tokens. The URL must begin with https:// and should correspond to the iss claim in the provider's OIDC ID tokens. Per the OIDC standard, path components are allowed but query parameters are not. Typically the URL consists of only a hostname, like https://server.example.org or https://example.com. This URL should point to the level below .well-known/openid-configuration and must be publicly accessible over the internet.
        /// This member is required.
        public var issuerUrl: Swift.String?
        /// The key value pairs that describe required claims in the identity token. If set, each claim is verified to be present in the token with a matching value. For the maximum number of claims that you can require, see [Amazon EKS service quotas](https://docs.aws.amazon.com/eks/latest/userguide/service-quotas.html) in the Amazon EKS User Guide.
        public var requiredClaims: [Swift.String:Swift.String]?
        /// The JSON Web Token (JWT) claim to use as the username. The default is sub, which is expected to be a unique identifier of the end user. You can choose other claims, such as email or name, depending on the OpenID identity provider. Claims other than email are prefixed with the issuer URL to prevent naming clashes with other plug-ins.
        public var usernameClaim: Swift.String?
        /// The prefix that is prepended to username claims to prevent clashes with existing names. If you do not provide this field, and username is a value other than email, the prefix defaults to issuerurl#. You can use the value - to disable all prefixing.
        public var usernamePrefix: Swift.String?

        public init (
            clientId: Swift.String? = nil,
            groupsClaim: Swift.String? = nil,
            groupsPrefix: Swift.String? = nil,
            identityProviderConfigName: Swift.String? = nil,
            issuerUrl: Swift.String? = nil,
            requiredClaims: [Swift.String:Swift.String]? = nil,
            usernameClaim: Swift.String? = nil,
            usernamePrefix: Swift.String? = nil
        )
        {
            self.clientId = clientId
            self.groupsClaim = groupsClaim
            self.groupsPrefix = groupsPrefix
            self.identityProviderConfigName = identityProviderConfigName
            self.issuerUrl = issuerUrl
            self.requiredClaims = requiredClaims
            self.usernameClaim = usernameClaim
            self.usernamePrefix = usernamePrefix
        }
    }

}

extension EKSClientTypes.OutpostConfigRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case controlPlaneInstanceType
        case controlPlanePlacement
        case outpostArns
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let controlPlaneInstanceType = self.controlPlaneInstanceType {
            try encodeContainer.encode(controlPlaneInstanceType, forKey: .controlPlaneInstanceType)
        }
        if let controlPlanePlacement = self.controlPlanePlacement {
            try encodeContainer.encode(controlPlanePlacement, forKey: .controlPlanePlacement)
        }
        if let outpostArns = outpostArns {
            var outpostArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outpostArns)
            for string0 in outpostArns {
                try outpostArnsContainer.encode(string0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let outpostArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .outpostArns)
        var outpostArnsDecoded0:[Swift.String]? = nil
        if let outpostArnsContainer = outpostArnsContainer {
            outpostArnsDecoded0 = [Swift.String]()
            for string0 in outpostArnsContainer {
                if let string0 = string0 {
                    outpostArnsDecoded0?.append(string0)
                }
            }
        }
        outpostArns = outpostArnsDecoded0
        let controlPlaneInstanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .controlPlaneInstanceType)
        controlPlaneInstanceType = controlPlaneInstanceTypeDecoded
        let controlPlanePlacementDecoded = try containerValues.decodeIfPresent(EKSClientTypes.ControlPlanePlacementRequest.self, forKey: .controlPlanePlacement)
        controlPlanePlacement = controlPlanePlacementDecoded
    }
}

extension EKSClientTypes {
    /// The configuration of your local Amazon EKS cluster on an Amazon Web Services Outpost. Before creating a cluster on an Outpost, review [Creating a local cluster on an Outpost](https://docs.aws.amazon.com/eks/latest/userguide/eks-outposts-local-cluster-create.html) in the Amazon EKS User Guide. This API isn't available for Amazon EKS clusters on the Amazon Web Services cloud.
    public struct OutpostConfigRequest: Swift.Equatable {
        /// The Amazon EC2 instance type that you want to use for your local Amazon EKS cluster on Outposts. Choose an instance type based on the number of nodes that your cluster will have. For more information, see [Capacity considerations](https://docs.aws.amazon.com/eks/latest/userguide/eks-outposts-capacity-considerations.html) in the Amazon EKS User Guide. The instance type that you specify is used for all Kubernetes control plane instances. The instance type can't be changed after cluster creation. The control plane is not automatically scaled by Amazon EKS.
        /// This member is required.
        public var controlPlaneInstanceType: Swift.String?
        /// An object representing the placement configuration for all the control plane instances of your local Amazon EKS cluster on an Amazon Web Services Outpost. For more information, see [Capacity considerations](https://docs.aws.amazon.com/eks/latest/userguide/eks-outposts-capacity-considerations.html) in the Amazon EKS User Guide.
        public var controlPlanePlacement: EKSClientTypes.ControlPlanePlacementRequest?
        /// The ARN of the Outpost that you want to use for your local Amazon EKS cluster on Outposts. Only a single Outpost ARN is supported.
        /// This member is required.
        public var outpostArns: [Swift.String]?

        public init (
            controlPlaneInstanceType: Swift.String? = nil,
            controlPlanePlacement: EKSClientTypes.ControlPlanePlacementRequest? = nil,
            outpostArns: [Swift.String]? = nil
        )
        {
            self.controlPlaneInstanceType = controlPlaneInstanceType
            self.controlPlanePlacement = controlPlanePlacement
            self.outpostArns = outpostArns
        }
    }

}

extension EKSClientTypes.OutpostConfigResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case controlPlaneInstanceType
        case controlPlanePlacement
        case outpostArns
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let controlPlaneInstanceType = self.controlPlaneInstanceType {
            try encodeContainer.encode(controlPlaneInstanceType, forKey: .controlPlaneInstanceType)
        }
        if let controlPlanePlacement = self.controlPlanePlacement {
            try encodeContainer.encode(controlPlanePlacement, forKey: .controlPlanePlacement)
        }
        if let outpostArns = outpostArns {
            var outpostArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outpostArns)
            for string0 in outpostArns {
                try outpostArnsContainer.encode(string0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let outpostArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .outpostArns)
        var outpostArnsDecoded0:[Swift.String]? = nil
        if let outpostArnsContainer = outpostArnsContainer {
            outpostArnsDecoded0 = [Swift.String]()
            for string0 in outpostArnsContainer {
                if let string0 = string0 {
                    outpostArnsDecoded0?.append(string0)
                }
            }
        }
        outpostArns = outpostArnsDecoded0
        let controlPlaneInstanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .controlPlaneInstanceType)
        controlPlaneInstanceType = controlPlaneInstanceTypeDecoded
        let controlPlanePlacementDecoded = try containerValues.decodeIfPresent(EKSClientTypes.ControlPlanePlacementResponse.self, forKey: .controlPlanePlacement)
        controlPlanePlacement = controlPlanePlacementDecoded
    }
}

extension EKSClientTypes {
    /// An object representing the configuration of your local Amazon EKS cluster on an Amazon Web Services Outpost. This API isn't available for Amazon EKS clusters on the Amazon Web Services cloud.
    public struct OutpostConfigResponse: Swift.Equatable {
        /// The Amazon EC2 instance type used for the control plane. The instance type is the same for all control plane instances.
        /// This member is required.
        public var controlPlaneInstanceType: Swift.String?
        /// An object representing the placement configuration for all the control plane instances of your local Amazon EKS cluster on an Amazon Web Services Outpost. For more information, see [Capacity considerations](https://docs.aws.amazon.com/eks/latest/userguide/eks-outposts-capacity-considerations.html) in the Amazon EKS User Guide.
        public var controlPlanePlacement: EKSClientTypes.ControlPlanePlacementResponse?
        /// The ARN of the Outpost that you specified for use with your local Amazon EKS cluster on Outposts.
        /// This member is required.
        public var outpostArns: [Swift.String]?

        public init (
            controlPlaneInstanceType: Swift.String? = nil,
            controlPlanePlacement: EKSClientTypes.ControlPlanePlacementResponse? = nil,
            outpostArns: [Swift.String]? = nil
        )
        {
            self.controlPlaneInstanceType = controlPlaneInstanceType
            self.controlPlanePlacement = controlPlanePlacement
            self.outpostArns = outpostArns
        }
    }

}

extension EKSClientTypes.Provider: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyArn = self.keyArn {
            try encodeContainer.encode(keyArn, forKey: .keyArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyArn)
        keyArn = keyArnDecoded
    }
}

extension EKSClientTypes {
    /// Identifies the Key Management Service (KMS) key used to encrypt the secrets.
    public struct Provider: Swift.Equatable {
        /// Amazon Resource Name (ARN) or alias of the KMS key. The KMS key must be symmetric, created in the same region as the cluster, and if the KMS key was created in a different account, the user must have access to the KMS key. For more information, see [Allowing Users in Other Accounts to Use a KMS key](https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-modifying-external-accounts.html) in the Key Management Service Developer Guide.
        public var keyArn: Swift.String?

        public init (
            keyArn: Swift.String? = nil
        )
        {
            self.keyArn = keyArn
        }
    }

}

extension RegisterClusterInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken
        case connectorConfig
        case name
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let connectorConfig = self.connectorConfig {
            try encodeContainer.encode(connectorConfig, forKey: .connectorConfig)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagMap0) in tags {
                try tagsContainer.encode(tagMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension RegisterClusterInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/cluster-registrations"
    }
}

public struct RegisterClusterInput: Swift.Equatable {
    /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    public var clientRequestToken: Swift.String?
    /// The configuration settings required to connect the Kubernetes cluster to the Amazon EKS control plane.
    /// This member is required.
    public var connectorConfig: EKSClientTypes.ConnectorConfigRequest?
    /// Define a unique name for this cluster for your Region.
    /// This member is required.
    public var name: Swift.String?
    /// The metadata that you apply to the cluster to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Cluster tags do not propagate to any other resources associated with the cluster.
    public var tags: [Swift.String:Swift.String]?

    public init (
        clientRequestToken: Swift.String? = nil,
        connectorConfig: EKSClientTypes.ConnectorConfigRequest? = nil,
        name: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.connectorConfig = connectorConfig
        self.name = name
        self.tags = tags
    }
}

struct RegisterClusterInputBody: Swift.Equatable {
    let name: Swift.String?
    let connectorConfig: EKSClientTypes.ConnectorConfigRequest?
    let clientRequestToken: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension RegisterClusterInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken
        case connectorConfig
        case name
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let connectorConfigDecoded = try containerValues.decodeIfPresent(EKSClientTypes.ConnectorConfigRequest.self, forKey: .connectorConfig)
        connectorConfig = connectorConfigDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension RegisterClusterOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RegisterClusterOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceededException" : self = .resourceLimitExceededException(try ResourceLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourcePropagationDelayException" : self = .resourcePropagationDelayException(try ResourcePropagationDelayException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RegisterClusterOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case resourceInUseException(ResourceInUseException)
    case resourceLimitExceededException(ResourceLimitExceededException)
    case resourcePropagationDelayException(ResourcePropagationDelayException)
    case serverException(ServerException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RegisterClusterOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: RegisterClusterOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.cluster = output.cluster
        } else {
            self.cluster = nil
        }
    }
}

public struct RegisterClusterOutputResponse: Swift.Equatable {
    /// An object representing an Amazon EKS cluster.
    public var cluster: EKSClientTypes.Cluster?

    public init (
        cluster: EKSClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

struct RegisterClusterOutputResponseBody: Swift.Equatable {
    let cluster: EKSClientTypes.Cluster?
}

extension RegisterClusterOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cluster
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterDecoded = try containerValues.decodeIfPresent(EKSClientTypes.Cluster.self, forKey: .cluster)
        cluster = clusterDecoded
    }
}

extension EKSClientTypes.RemoteAccessConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ec2SshKey
        case sourceSecurityGroups
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ec2SshKey = self.ec2SshKey {
            try encodeContainer.encode(ec2SshKey, forKey: .ec2SshKey)
        }
        if let sourceSecurityGroups = sourceSecurityGroups {
            var sourceSecurityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sourceSecurityGroups)
            for string0 in sourceSecurityGroups {
                try sourceSecurityGroupsContainer.encode(string0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ec2SshKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ec2SshKey)
        ec2SshKey = ec2SshKeyDecoded
        let sourceSecurityGroupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .sourceSecurityGroups)
        var sourceSecurityGroupsDecoded0:[Swift.String]? = nil
        if let sourceSecurityGroupsContainer = sourceSecurityGroupsContainer {
            sourceSecurityGroupsDecoded0 = [Swift.String]()
            for string0 in sourceSecurityGroupsContainer {
                if let string0 = string0 {
                    sourceSecurityGroupsDecoded0?.append(string0)
                }
            }
        }
        sourceSecurityGroups = sourceSecurityGroupsDecoded0
    }
}

extension EKSClientTypes {
    /// An object representing the remote access configuration for the managed node group.
    public struct RemoteAccessConfig: Swift.Equatable {
        /// The Amazon EC2 SSH key name that provides access for SSH communication with the nodes in the managed node group. For more information, see [Amazon EC2 key pairs and Linux instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html) in the Amazon Elastic Compute Cloud User Guide for Linux Instances. For Windows, an Amazon EC2 SSH key is used to obtain the RDP password. For more information, see [Amazon EC2 key pairs and Windows instances](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-key-pairs.html) in the Amazon Elastic Compute Cloud User Guide for Windows Instances.
        public var ec2SshKey: Swift.String?
        /// The security group IDs that are allowed SSH access (port 22) to the nodes. For Windows, the port is 3389. If you specify an Amazon EC2 SSH key but don't specify a source security group when you create a managed node group, then the port on the nodes is opened to the internet (0.0.0.0/0). For more information, see [Security Groups for Your VPC](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html) in the Amazon Virtual Private Cloud User Guide.
        public var sourceSecurityGroups: [Swift.String]?

        public init (
            ec2SshKey: Swift.String? = nil,
            sourceSecurityGroups: [Swift.String]? = nil
        )
        {
            self.ec2SshKey = ec2SshKey
            self.sourceSecurityGroups = sourceSecurityGroups
        }
    }

}

extension EKSClientTypes {
    public enum ResolveConflicts: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `none`
        case overwrite
        case preserve
        case sdkUnknown(Swift.String)

        public static var allCases: [ResolveConflicts] {
            return [
                .none,
                .overwrite,
                .preserve,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .overwrite: return "OVERWRITE"
            case .preserve: return "PRESERVE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResolveConflicts(rawValue: rawValue) ?? ResolveConflicts.sdkUnknown(rawValue)
        }
    }
}

extension ResourceInUseException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ResourceInUseExceptionBody = try responseDecoder.decode(responseBody: data)
            self.addonName = output.addonName
            self.clusterName = output.clusterName
            self.message = output.message
            self.nodegroupName = output.nodegroupName
        } else {
            self.addonName = nil
            self.clusterName = nil
            self.message = nil
            self.nodegroupName = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified resource is in use.
public struct ResourceInUseException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var addonName: Swift.String?
    /// The Amazon EKS cluster associated with the exception.
    public var clusterName: Swift.String?
    public var message: Swift.String?
    /// The Amazon EKS managed node group associated with the exception.
    public var nodegroupName: Swift.String?

    public init (
        addonName: Swift.String? = nil,
        clusterName: Swift.String? = nil,
        message: Swift.String? = nil,
        nodegroupName: Swift.String? = nil
    )
    {
        self.addonName = addonName
        self.clusterName = clusterName
        self.message = message
        self.nodegroupName = nodegroupName
    }
}

struct ResourceInUseExceptionBody: Swift.Equatable {
    let clusterName: Swift.String?
    let nodegroupName: Swift.String?
    let addonName: Swift.String?
    let message: Swift.String?
}

extension ResourceInUseExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addonName
        case clusterName
        case message
        case nodegroupName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterName)
        clusterName = clusterNameDecoded
        let nodegroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodegroupName)
        nodegroupName = nodegroupNameDecoded
        let addonNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .addonName)
        addonName = addonNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceLimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ResourceLimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.clusterName = output.clusterName
            self.message = output.message
            self.nodegroupName = output.nodegroupName
        } else {
            self.clusterName = nil
            self.message = nil
            self.nodegroupName = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You have encountered a service limit on the specified resource.
public struct ResourceLimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The Amazon EKS cluster associated with the exception.
    public var clusterName: Swift.String?
    public var message: Swift.String?
    /// The Amazon EKS managed node group associated with the exception.
    public var nodegroupName: Swift.String?

    public init (
        clusterName: Swift.String? = nil,
        message: Swift.String? = nil,
        nodegroupName: Swift.String? = nil
    )
    {
        self.clusterName = clusterName
        self.message = message
        self.nodegroupName = nodegroupName
    }
}

struct ResourceLimitExceededExceptionBody: Swift.Equatable {
    let clusterName: Swift.String?
    let nodegroupName: Swift.String?
    let message: Swift.String?
}

extension ResourceLimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterName
        case message
        case nodegroupName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterName)
        clusterName = clusterNameDecoded
        let nodegroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodegroupName)
        nodegroupName = nodegroupNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.addonName = output.addonName
            self.clusterName = output.clusterName
            self.fargateProfileName = output.fargateProfileName
            self.message = output.message
            self.nodegroupName = output.nodegroupName
        } else {
            self.addonName = nil
            self.clusterName = nil
            self.fargateProfileName = nil
            self.message = nil
            self.nodegroupName = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified resource could not be found. You can view your available clusters with [ListClusters]. You can view your available managed node groups with [ListNodegroups]. Amazon EKS clusters and node groups are Region-specific.
public struct ResourceNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var addonName: Swift.String?
    /// The Amazon EKS cluster associated with the exception.
    public var clusterName: Swift.String?
    /// The Fargate profile associated with the exception.
    public var fargateProfileName: Swift.String?
    public var message: Swift.String?
    /// The Amazon EKS managed node group associated with the exception.
    public var nodegroupName: Swift.String?

    public init (
        addonName: Swift.String? = nil,
        clusterName: Swift.String? = nil,
        fargateProfileName: Swift.String? = nil,
        message: Swift.String? = nil,
        nodegroupName: Swift.String? = nil
    )
    {
        self.addonName = addonName
        self.clusterName = clusterName
        self.fargateProfileName = fargateProfileName
        self.message = message
        self.nodegroupName = nodegroupName
    }
}

struct ResourceNotFoundExceptionBody: Swift.Equatable {
    let clusterName: Swift.String?
    let nodegroupName: Swift.String?
    let fargateProfileName: Swift.String?
    let addonName: Swift.String?
    let message: Swift.String?
}

extension ResourceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addonName
        case clusterName
        case fargateProfileName
        case message
        case nodegroupName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterName)
        clusterName = clusterNameDecoded
        let nodegroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodegroupName)
        nodegroupName = nodegroupNameDecoded
        let fargateProfileNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fargateProfileName)
        fargateProfileName = fargateProfileNameDecoded
        let addonNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .addonName)
        addonName = addonNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourcePropagationDelayException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ResourcePropagationDelayExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Required resources (such as service-linked roles) were created and are still propagating. Retry later.
public struct ResourcePropagationDelayException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourcePropagationDelayExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourcePropagationDelayExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ServerException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ServerExceptionBody = try responseDecoder.decode(responseBody: data)
            self.addonName = output.addonName
            self.clusterName = output.clusterName
            self.message = output.message
            self.nodegroupName = output.nodegroupName
        } else {
            self.addonName = nil
            self.clusterName = nil
            self.message = nil
            self.nodegroupName = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// These errors are usually caused by a server-side issue.
public struct ServerException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var addonName: Swift.String?
    /// The Amazon EKS cluster associated with the exception.
    public var clusterName: Swift.String?
    public var message: Swift.String?
    /// The Amazon EKS managed node group associated with the exception.
    public var nodegroupName: Swift.String?

    public init (
        addonName: Swift.String? = nil,
        clusterName: Swift.String? = nil,
        message: Swift.String? = nil,
        nodegroupName: Swift.String? = nil
    )
    {
        self.addonName = addonName
        self.clusterName = clusterName
        self.message = message
        self.nodegroupName = nodegroupName
    }
}

struct ServerExceptionBody: Swift.Equatable {
    let clusterName: Swift.String?
    let nodegroupName: Swift.String?
    let addonName: Swift.String?
    let message: Swift.String?
}

extension ServerExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addonName
        case clusterName
        case message
        case nodegroupName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterName)
        clusterName = clusterNameDecoded
        let nodegroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodegroupName)
        nodegroupName = nodegroupNameDecoded
        let addonNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .addonName)
        addonName = addonNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ServiceUnavailableException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ServiceUnavailableExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The service is unavailable. Back off and retry the operation.
public struct ServiceUnavailableException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ServiceUnavailableExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ServiceUnavailableExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagMap0) in tags {
                try tagsContainer.encode(tagMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension TagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let resourceArn = resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

public struct TagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource to which to add tags. Currently, the supported resources are Amazon EKS clusters and managed node groups.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The tags to add to the resource. A tag is an array of key-value pairs.
    /// This member is required.
    public var tags: [Swift.String:Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    let tags: [Swift.String:Swift.String]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension EKSClientTypes.Taint: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case effect
        case key
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let effect = self.effect {
            try encodeContainer.encode(effect.rawValue, forKey: .effect)
        }
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
        let effectDecoded = try containerValues.decodeIfPresent(EKSClientTypes.TaintEffect.self, forKey: .effect)
        effect = effectDecoded
    }
}

extension EKSClientTypes {
    /// A property that allows a node to repel a set of pods. For more information, see [Node taints on managed node groups](https://docs.aws.amazon.com/eks/latest/userguide/node-taints-managed-node-groups.html).
    public struct Taint: Swift.Equatable {
        /// The effect of the taint.
        public var effect: EKSClientTypes.TaintEffect?
        /// The key of the taint.
        public var key: Swift.String?
        /// The value of the taint.
        public var value: Swift.String?

        public init (
            effect: EKSClientTypes.TaintEffect? = nil,
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.effect = effect
            self.key = key
            self.value = value
        }
    }

}

extension EKSClientTypes {
    public enum TaintEffect: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case noExecute
        case noSchedule
        case preferNoSchedule
        case sdkUnknown(Swift.String)

        public static var allCases: [TaintEffect] {
            return [
                .noExecute,
                .noSchedule,
                .preferNoSchedule,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .noExecute: return "NO_EXECUTE"
            case .noSchedule: return "NO_SCHEDULE"
            case .preferNoSchedule: return "PREFER_NO_SCHEDULE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TaintEffect(rawValue: rawValue) ?? TaintEffect.sdkUnknown(rawValue)
        }
    }
}

extension UnsupportedAvailabilityZoneException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UnsupportedAvailabilityZoneExceptionBody = try responseDecoder.decode(responseBody: data)
            self.clusterName = output.clusterName
            self.message = output.message
            self.nodegroupName = output.nodegroupName
            self.validZones = output.validZones
        } else {
            self.clusterName = nil
            self.message = nil
            self.nodegroupName = nil
            self.validZones = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// At least one of your specified cluster subnets is in an Availability Zone that does not support Amazon EKS. The exception output specifies the supported Availability Zones for your account, from which you can choose subnets for your cluster.
public struct UnsupportedAvailabilityZoneException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The Amazon EKS cluster associated with the exception.
    public var clusterName: Swift.String?
    public var message: Swift.String?
    /// The Amazon EKS managed node group associated with the exception.
    public var nodegroupName: Swift.String?
    /// The supported Availability Zones for your account. Choose subnets in these Availability Zones for your cluster.
    public var validZones: [Swift.String]?

    public init (
        clusterName: Swift.String? = nil,
        message: Swift.String? = nil,
        nodegroupName: Swift.String? = nil,
        validZones: [Swift.String]? = nil
    )
    {
        self.clusterName = clusterName
        self.message = message
        self.nodegroupName = nodegroupName
        self.validZones = validZones
    }
}

struct UnsupportedAvailabilityZoneExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let clusterName: Swift.String?
    let nodegroupName: Swift.String?
    let validZones: [Swift.String]?
}

extension UnsupportedAvailabilityZoneExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterName
        case message
        case nodegroupName
        case validZones
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let clusterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterName)
        clusterName = clusterNameDecoded
        let nodegroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodegroupName)
        nodegroupName = nodegroupNameDecoded
        let validZonesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .validZones)
        var validZonesDecoded0:[Swift.String]? = nil
        if let validZonesContainer = validZonesContainer {
            validZonesDecoded0 = [Swift.String]()
            for string0 in validZonesContainer {
                if let string0 = string0 {
                    validZonesDecoded0?.append(string0)
                }
            }
        }
        validZones = validZonesDecoded0
    }
}

extension UntagResourceInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            guard let tagKeys = tagKeys else {
                let message = "Creating a URL Query Item failed. tagKeys is required and must not be nil."
                throw ClientRuntime.ClientError.queryItemCreationFailed(message)
            }
            tagKeys.forEach { queryItemValue in
                let queryItem = ClientRuntime.URLQueryItem(name: "tagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
                items.append(queryItem)
            }
            return items
        }
    }
}

extension UntagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let resourceArn = resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

public struct UntagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource from which to delete tags. Currently, the supported resources are Amazon EKS clusters and managed node groups.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The keys of the tags to be removed.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
}

extension UntagResourceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension EKSClientTypes.Update: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt
        case errors
        case id
        case params
        case status
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let errors = errors {
            var errorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .errors)
            for errordetail0 in errors {
                try errorsContainer.encode(errordetail0)
            }
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let params = params {
            var paramsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .params)
            for updateparam0 in params {
                try paramsContainer.encode(updateparam0)
            }
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let statusDecoded = try containerValues.decodeIfPresent(EKSClientTypes.UpdateStatus.self, forKey: .status)
        status = statusDecoded
        let typeDecoded = try containerValues.decodeIfPresent(EKSClientTypes.UpdateType.self, forKey: .type)
        type = typeDecoded
        let paramsContainer = try containerValues.decodeIfPresent([EKSClientTypes.UpdateParam?].self, forKey: .params)
        var paramsDecoded0:[EKSClientTypes.UpdateParam]? = nil
        if let paramsContainer = paramsContainer {
            paramsDecoded0 = [EKSClientTypes.UpdateParam]()
            for structure0 in paramsContainer {
                if let structure0 = structure0 {
                    paramsDecoded0?.append(structure0)
                }
            }
        }
        params = paramsDecoded0
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let errorsContainer = try containerValues.decodeIfPresent([EKSClientTypes.ErrorDetail?].self, forKey: .errors)
        var errorsDecoded0:[EKSClientTypes.ErrorDetail]? = nil
        if let errorsContainer = errorsContainer {
            errorsDecoded0 = [EKSClientTypes.ErrorDetail]()
            for structure0 in errorsContainer {
                if let structure0 = structure0 {
                    errorsDecoded0?.append(structure0)
                }
            }
        }
        errors = errorsDecoded0
    }
}

extension EKSClientTypes {
    /// An object representing an asynchronous update.
    public struct Update: Swift.Equatable {
        /// The Unix epoch timestamp in seconds for when the update was created.
        public var createdAt: ClientRuntime.Date?
        /// Any errors associated with a Failed update.
        public var errors: [EKSClientTypes.ErrorDetail]?
        /// A UUID that is used to track the update.
        public var id: Swift.String?
        /// A key-value map that contains the parameters associated with the update.
        public var params: [EKSClientTypes.UpdateParam]?
        /// The current status of the update.
        public var status: EKSClientTypes.UpdateStatus?
        /// The type of the update.
        public var type: EKSClientTypes.UpdateType?

        public init (
            createdAt: ClientRuntime.Date? = nil,
            errors: [EKSClientTypes.ErrorDetail]? = nil,
            id: Swift.String? = nil,
            params: [EKSClientTypes.UpdateParam]? = nil,
            status: EKSClientTypes.UpdateStatus? = nil,
            type: EKSClientTypes.UpdateType? = nil
        )
        {
            self.createdAt = createdAt
            self.errors = errors
            self.id = id
            self.params = params
            self.status = status
            self.type = type
        }
    }

}

extension UpdateAddonInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addonVersion
        case clientRequestToken
        case configurationValues
        case resolveConflicts
        case serviceAccountRoleArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addonVersion = self.addonVersion {
            try encodeContainer.encode(addonVersion, forKey: .addonVersion)
        }
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let configurationValues = self.configurationValues {
            try encodeContainer.encode(configurationValues, forKey: .configurationValues)
        }
        if let resolveConflicts = self.resolveConflicts {
            try encodeContainer.encode(resolveConflicts.rawValue, forKey: .resolveConflicts)
        }
        if let serviceAccountRoleArn = self.serviceAccountRoleArn {
            try encodeContainer.encode(serviceAccountRoleArn, forKey: .serviceAccountRoleArn)
        }
    }
}

extension UpdateAddonInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let clusterName = clusterName else {
            return nil
        }
        guard let addonName = addonName else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/addons/\(addonName.urlPercentEncoding())/update"
    }
}

public struct UpdateAddonInput: Swift.Equatable {
    /// The name of the add-on. The name must match one of the names returned by [ListAddons](https://docs.aws.amazon.com/eks/latest/APIReference/API_ListAddons.html).
    /// This member is required.
    public var addonName: Swift.String?
    /// The version of the add-on. The version must match one of the versions returned by [DescribeAddonVersions](https://docs.aws.amazon.com/eks/latest/APIReference/API_DescribeAddonVersions.html).
    public var addonVersion: Swift.String?
    /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    public var clientRequestToken: Swift.String?
    /// The name of the cluster.
    /// This member is required.
    public var clusterName: Swift.String?
    /// The set of configuration values for the add-on that's created. The values that you provide are validated against the schema in [DescribeAddonConfiguration](https://docs.aws.amazon.com/eks/latest/APIReference/API_DescribeAddonConfiguration.html).
    public var configurationValues: Swift.String?
    /// How to resolve field value conflicts for an Amazon EKS add-on if you've changed a value from the Amazon EKS default value. Conflicts are handled based on the option you choose:
    ///
    /// * None – Amazon EKS doesn't change the value. The update might fail.
    ///
    /// * Overwrite – Amazon EKS overwrites the changed value back to the Amazon EKS default value.
    ///
    /// * Preserve – Amazon EKS preserves the value. If you choose this option, we recommend that you test any field and value changes on a non-production cluster before updating the add-on on your production cluster.
    public var resolveConflicts: EKSClientTypes.ResolveConflicts?
    /// The Amazon Resource Name (ARN) of an existing IAM role to bind to the add-on's service account. The role must be assigned the IAM permissions required by the add-on. If you don't specify an existing IAM role, then the add-on uses the permissions assigned to the node IAM role. For more information, see [Amazon EKS node IAM role](https://docs.aws.amazon.com/eks/latest/userguide/create-node-role.html) in the Amazon EKS User Guide. To specify an existing IAM role, you must have an IAM OpenID Connect (OIDC) provider created for your cluster. For more information, see [Enabling IAM roles for service accounts on your cluster](https://docs.aws.amazon.com/eks/latest/userguide/enable-iam-roles-for-service-accounts.html) in the Amazon EKS User Guide.
    public var serviceAccountRoleArn: Swift.String?

    public init (
        addonName: Swift.String? = nil,
        addonVersion: Swift.String? = nil,
        clientRequestToken: Swift.String? = nil,
        clusterName: Swift.String? = nil,
        configurationValues: Swift.String? = nil,
        resolveConflicts: EKSClientTypes.ResolveConflicts? = nil,
        serviceAccountRoleArn: Swift.String? = nil
    )
    {
        self.addonName = addonName
        self.addonVersion = addonVersion
        self.clientRequestToken = clientRequestToken
        self.clusterName = clusterName
        self.configurationValues = configurationValues
        self.resolveConflicts = resolveConflicts
        self.serviceAccountRoleArn = serviceAccountRoleArn
    }
}

struct UpdateAddonInputBody: Swift.Equatable {
    let addonVersion: Swift.String?
    let serviceAccountRoleArn: Swift.String?
    let resolveConflicts: EKSClientTypes.ResolveConflicts?
    let clientRequestToken: Swift.String?
    let configurationValues: Swift.String?
}

extension UpdateAddonInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addonVersion
        case clientRequestToken
        case configurationValues
        case resolveConflicts
        case serviceAccountRoleArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addonVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .addonVersion)
        addonVersion = addonVersionDecoded
        let serviceAccountRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceAccountRoleArn)
        serviceAccountRoleArn = serviceAccountRoleArnDecoded
        let resolveConflictsDecoded = try containerValues.decodeIfPresent(EKSClientTypes.ResolveConflicts.self, forKey: .resolveConflicts)
        resolveConflicts = resolveConflictsDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let configurationValuesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationValues)
        configurationValues = configurationValuesDecoded
    }
}

extension UpdateAddonOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateAddonOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateAddonOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateAddonOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateAddonOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.update = output.update
        } else {
            self.update = nil
        }
    }
}

public struct UpdateAddonOutputResponse: Swift.Equatable {
    /// An object representing an asynchronous update.
    public var update: EKSClientTypes.Update?

    public init (
        update: EKSClientTypes.Update? = nil
    )
    {
        self.update = update
    }
}

struct UpdateAddonOutputResponseBody: Swift.Equatable {
    let update: EKSClientTypes.Update?
}

extension UpdateAddonOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case update
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateDecoded = try containerValues.decodeIfPresent(EKSClientTypes.Update.self, forKey: .update)
        update = updateDecoded
    }
}

extension UpdateClusterConfigInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken
        case logging
        case resourcesVpcConfig
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let logging = self.logging {
            try encodeContainer.encode(logging, forKey: .logging)
        }
        if let resourcesVpcConfig = self.resourcesVpcConfig {
            try encodeContainer.encode(resourcesVpcConfig, forKey: .resourcesVpcConfig)
        }
    }
}

extension UpdateClusterConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let name = name else {
            return nil
        }
        return "/clusters/\(name.urlPercentEncoding())/update-config"
    }
}

public struct UpdateClusterConfigInput: Swift.Equatable {
    /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    public var clientRequestToken: Swift.String?
    /// Enable or disable exporting the Kubernetes control plane logs for your cluster to CloudWatch Logs. By default, cluster control plane logs aren't exported to CloudWatch Logs. For more information, see [Amazon EKS cluster control plane logs](https://docs.aws.amazon.com/eks/latest/userguide/control-plane-logs.html) in the Amazon EKS User Guide . CloudWatch Logs ingestion, archive storage, and data scanning rates apply to exported control plane logs. For more information, see [CloudWatch Pricing](http://aws.amazon.com/cloudwatch/pricing/).
    public var logging: EKSClientTypes.Logging?
    /// The name of the Amazon EKS cluster to update.
    /// This member is required.
    public var name: Swift.String?
    /// An object representing the VPC configuration to use for an Amazon EKS cluster.
    public var resourcesVpcConfig: EKSClientTypes.VpcConfigRequest?

    public init (
        clientRequestToken: Swift.String? = nil,
        logging: EKSClientTypes.Logging? = nil,
        name: Swift.String? = nil,
        resourcesVpcConfig: EKSClientTypes.VpcConfigRequest? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.logging = logging
        self.name = name
        self.resourcesVpcConfig = resourcesVpcConfig
    }
}

struct UpdateClusterConfigInputBody: Swift.Equatable {
    let resourcesVpcConfig: EKSClientTypes.VpcConfigRequest?
    let logging: EKSClientTypes.Logging?
    let clientRequestToken: Swift.String?
}

extension UpdateClusterConfigInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken
        case logging
        case resourcesVpcConfig
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourcesVpcConfigDecoded = try containerValues.decodeIfPresent(EKSClientTypes.VpcConfigRequest.self, forKey: .resourcesVpcConfig)
        resourcesVpcConfig = resourcesVpcConfigDecoded
        let loggingDecoded = try containerValues.decodeIfPresent(EKSClientTypes.Logging.self, forKey: .logging)
        logging = loggingDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}

extension UpdateClusterConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateClusterConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateClusterConfigOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateClusterConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateClusterConfigOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.update = output.update
        } else {
            self.update = nil
        }
    }
}

public struct UpdateClusterConfigOutputResponse: Swift.Equatable {
    /// An object representing an asynchronous update.
    public var update: EKSClientTypes.Update?

    public init (
        update: EKSClientTypes.Update? = nil
    )
    {
        self.update = update
    }
}

struct UpdateClusterConfigOutputResponseBody: Swift.Equatable {
    let update: EKSClientTypes.Update?
}

extension UpdateClusterConfigOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case update
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateDecoded = try containerValues.decodeIfPresent(EKSClientTypes.Update.self, forKey: .update)
        update = updateDecoded
    }
}

extension UpdateClusterVersionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken
        case version
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }
}

extension UpdateClusterVersionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let name = name else {
            return nil
        }
        return "/clusters/\(name.urlPercentEncoding())/updates"
    }
}

public struct UpdateClusterVersionInput: Swift.Equatable {
    /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    public var clientRequestToken: Swift.String?
    /// The name of the Amazon EKS cluster to update.
    /// This member is required.
    public var name: Swift.String?
    /// The desired Kubernetes version following a successful update.
    /// This member is required.
    public var version: Swift.String?

    public init (
        clientRequestToken: Swift.String? = nil,
        name: Swift.String? = nil,
        version: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.name = name
        self.version = version
    }
}

struct UpdateClusterVersionInputBody: Swift.Equatable {
    let version: Swift.String?
    let clientRequestToken: Swift.String?
}

extension UpdateClusterVersionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken
        case version
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}

extension UpdateClusterVersionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateClusterVersionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateClusterVersionOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateClusterVersionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateClusterVersionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.update = output.update
        } else {
            self.update = nil
        }
    }
}

public struct UpdateClusterVersionOutputResponse: Swift.Equatable {
    /// The full description of the specified update
    public var update: EKSClientTypes.Update?

    public init (
        update: EKSClientTypes.Update? = nil
    )
    {
        self.update = update
    }
}

struct UpdateClusterVersionOutputResponseBody: Swift.Equatable {
    let update: EKSClientTypes.Update?
}

extension UpdateClusterVersionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case update
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateDecoded = try containerValues.decodeIfPresent(EKSClientTypes.Update.self, forKey: .update)
        update = updateDecoded
    }
}

extension EKSClientTypes.UpdateLabelsPayload: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addOrUpdateLabels
        case removeLabels
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addOrUpdateLabels = addOrUpdateLabels {
            var addOrUpdateLabelsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .addOrUpdateLabels)
            for (dictKey0, labelsMap0) in addOrUpdateLabels {
                try addOrUpdateLabelsContainer.encode(labelsMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let removeLabels = removeLabels {
            var removeLabelsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .removeLabels)
            for string0 in removeLabels {
                try removeLabelsContainer.encode(string0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addOrUpdateLabelsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .addOrUpdateLabels)
        var addOrUpdateLabelsDecoded0: [Swift.String:Swift.String]? = nil
        if let addOrUpdateLabelsContainer = addOrUpdateLabelsContainer {
            addOrUpdateLabelsDecoded0 = [Swift.String:Swift.String]()
            for (key0, labelvalue0) in addOrUpdateLabelsContainer {
                if let labelvalue0 = labelvalue0 {
                    addOrUpdateLabelsDecoded0?[key0] = labelvalue0
                }
            }
        }
        addOrUpdateLabels = addOrUpdateLabelsDecoded0
        let removeLabelsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .removeLabels)
        var removeLabelsDecoded0:[Swift.String]? = nil
        if let removeLabelsContainer = removeLabelsContainer {
            removeLabelsDecoded0 = [Swift.String]()
            for string0 in removeLabelsContainer {
                if let string0 = string0 {
                    removeLabelsDecoded0?.append(string0)
                }
            }
        }
        removeLabels = removeLabelsDecoded0
    }
}

extension EKSClientTypes {
    /// An object representing a Kubernetes label change for a managed node group.
    public struct UpdateLabelsPayload: Swift.Equatable {
        /// Kubernetes labels to be added or updated.
        public var addOrUpdateLabels: [Swift.String:Swift.String]?
        /// Kubernetes labels to be removed.
        public var removeLabels: [Swift.String]?

        public init (
            addOrUpdateLabels: [Swift.String:Swift.String]? = nil,
            removeLabels: [Swift.String]? = nil
        )
        {
            self.addOrUpdateLabels = addOrUpdateLabels
            self.removeLabels = removeLabels
        }
    }

}

extension UpdateNodegroupConfigInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken
        case labels
        case scalingConfig
        case taints
        case updateConfig
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let labels = self.labels {
            try encodeContainer.encode(labels, forKey: .labels)
        }
        if let scalingConfig = self.scalingConfig {
            try encodeContainer.encode(scalingConfig, forKey: .scalingConfig)
        }
        if let taints = self.taints {
            try encodeContainer.encode(taints, forKey: .taints)
        }
        if let updateConfig = self.updateConfig {
            try encodeContainer.encode(updateConfig, forKey: .updateConfig)
        }
    }
}

extension UpdateNodegroupConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let clusterName = clusterName else {
            return nil
        }
        guard let nodegroupName = nodegroupName else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/node-groups/\(nodegroupName.urlPercentEncoding())/update-config"
    }
}

public struct UpdateNodegroupConfigInput: Swift.Equatable {
    /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    public var clientRequestToken: Swift.String?
    /// The name of the Amazon EKS cluster that the managed node group resides in.
    /// This member is required.
    public var clusterName: Swift.String?
    /// The Kubernetes labels to be applied to the nodes in the node group after the update.
    public var labels: EKSClientTypes.UpdateLabelsPayload?
    /// The name of the managed node group to update.
    /// This member is required.
    public var nodegroupName: Swift.String?
    /// The scaling configuration details for the Auto Scaling group after the update.
    public var scalingConfig: EKSClientTypes.NodegroupScalingConfig?
    /// The Kubernetes taints to be applied to the nodes in the node group after the update. For more information, see [Node taints on managed node groups](https://docs.aws.amazon.com/eks/latest/userguide/node-taints-managed-node-groups.html).
    public var taints: EKSClientTypes.UpdateTaintsPayload?
    /// The node group update configuration.
    public var updateConfig: EKSClientTypes.NodegroupUpdateConfig?

    public init (
        clientRequestToken: Swift.String? = nil,
        clusterName: Swift.String? = nil,
        labels: EKSClientTypes.UpdateLabelsPayload? = nil,
        nodegroupName: Swift.String? = nil,
        scalingConfig: EKSClientTypes.NodegroupScalingConfig? = nil,
        taints: EKSClientTypes.UpdateTaintsPayload? = nil,
        updateConfig: EKSClientTypes.NodegroupUpdateConfig? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.clusterName = clusterName
        self.labels = labels
        self.nodegroupName = nodegroupName
        self.scalingConfig = scalingConfig
        self.taints = taints
        self.updateConfig = updateConfig
    }
}

struct UpdateNodegroupConfigInputBody: Swift.Equatable {
    let labels: EKSClientTypes.UpdateLabelsPayload?
    let taints: EKSClientTypes.UpdateTaintsPayload?
    let scalingConfig: EKSClientTypes.NodegroupScalingConfig?
    let updateConfig: EKSClientTypes.NodegroupUpdateConfig?
    let clientRequestToken: Swift.String?
}

extension UpdateNodegroupConfigInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken
        case labels
        case scalingConfig
        case taints
        case updateConfig
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelsDecoded = try containerValues.decodeIfPresent(EKSClientTypes.UpdateLabelsPayload.self, forKey: .labels)
        labels = labelsDecoded
        let taintsDecoded = try containerValues.decodeIfPresent(EKSClientTypes.UpdateTaintsPayload.self, forKey: .taints)
        taints = taintsDecoded
        let scalingConfigDecoded = try containerValues.decodeIfPresent(EKSClientTypes.NodegroupScalingConfig.self, forKey: .scalingConfig)
        scalingConfig = scalingConfigDecoded
        let updateConfigDecoded = try containerValues.decodeIfPresent(EKSClientTypes.NodegroupUpdateConfig.self, forKey: .updateConfig)
        updateConfig = updateConfigDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}

extension UpdateNodegroupConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateNodegroupConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateNodegroupConfigOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateNodegroupConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateNodegroupConfigOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.update = output.update
        } else {
            self.update = nil
        }
    }
}

public struct UpdateNodegroupConfigOutputResponse: Swift.Equatable {
    /// An object representing an asynchronous update.
    public var update: EKSClientTypes.Update?

    public init (
        update: EKSClientTypes.Update? = nil
    )
    {
        self.update = update
    }
}

struct UpdateNodegroupConfigOutputResponseBody: Swift.Equatable {
    let update: EKSClientTypes.Update?
}

extension UpdateNodegroupConfigOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case update
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateDecoded = try containerValues.decodeIfPresent(EKSClientTypes.Update.self, forKey: .update)
        update = updateDecoded
    }
}

extension UpdateNodegroupVersionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken
        case force
        case launchTemplate
        case releaseVersion
        case version
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if force != false {
            try encodeContainer.encode(force, forKey: .force)
        }
        if let launchTemplate = self.launchTemplate {
            try encodeContainer.encode(launchTemplate, forKey: .launchTemplate)
        }
        if let releaseVersion = self.releaseVersion {
            try encodeContainer.encode(releaseVersion, forKey: .releaseVersion)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }
}

extension UpdateNodegroupVersionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let clusterName = clusterName else {
            return nil
        }
        guard let nodegroupName = nodegroupName else {
            return nil
        }
        return "/clusters/\(clusterName.urlPercentEncoding())/node-groups/\(nodegroupName.urlPercentEncoding())/update-version"
    }
}

public struct UpdateNodegroupVersionInput: Swift.Equatable {
    /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    public var clientRequestToken: Swift.String?
    /// The name of the Amazon EKS cluster that is associated with the managed node group to update.
    /// This member is required.
    public var clusterName: Swift.String?
    /// Force the update if the existing node group's pods are unable to be drained due to a pod disruption budget issue. If an update fails because pods could not be drained, you can force the update after it fails to terminate the old node whether or not any pods are running on the node.
    public var force: Swift.Bool
    /// An object representing a node group's launch template specification. You can only update a node group using a launch template if the node group was originally deployed with a launch template.
    public var launchTemplate: EKSClientTypes.LaunchTemplateSpecification?
    /// The name of the managed node group to update.
    /// This member is required.
    public var nodegroupName: Swift.String?
    /// The AMI version of the Amazon EKS optimized AMI to use for the update. By default, the latest available AMI version for the node group's Kubernetes version is used. For information about Linux versions, see [Amazon EKS optimized Amazon Linux AMI versions](https://docs.aws.amazon.com/eks/latest/userguide/eks-linux-ami-versions.html) in the Amazon EKS User Guide. Amazon EKS managed node groups support the November 2022 and later releases of the Windows AMIs. For information about Windows versions, see [Amazon EKS optimized Windows AMI versions](https://docs.aws.amazon.com/eks/latest/userguide/eks-ami-versions-windows.html) in the Amazon EKS User Guide. If you specify launchTemplate, and your launch template uses a custom AMI, then don't specify releaseVersion, or the node group update will fail. For more information about using launch templates with Amazon EKS, see [Launch template support](https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html) in the Amazon EKS User Guide.
    public var releaseVersion: Swift.String?
    /// The Kubernetes version to update to. If no version is specified, then the Kubernetes version of the node group does not change. You can specify the Kubernetes version of the cluster to update the node group to the latest AMI version of the cluster's Kubernetes version. If you specify launchTemplate, and your launch template uses a custom AMI, then don't specify version, or the node group update will fail. For more information about using launch templates with Amazon EKS, see [Launch template support](https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html) in the Amazon EKS User Guide.
    public var version: Swift.String?

    public init (
        clientRequestToken: Swift.String? = nil,
        clusterName: Swift.String? = nil,
        force: Swift.Bool = false,
        launchTemplate: EKSClientTypes.LaunchTemplateSpecification? = nil,
        nodegroupName: Swift.String? = nil,
        releaseVersion: Swift.String? = nil,
        version: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.clusterName = clusterName
        self.force = force
        self.launchTemplate = launchTemplate
        self.nodegroupName = nodegroupName
        self.releaseVersion = releaseVersion
        self.version = version
    }
}

struct UpdateNodegroupVersionInputBody: Swift.Equatable {
    let version: Swift.String?
    let releaseVersion: Swift.String?
    let launchTemplate: EKSClientTypes.LaunchTemplateSpecification?
    let force: Swift.Bool
    let clientRequestToken: Swift.String?
}

extension UpdateNodegroupVersionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken
        case force
        case launchTemplate
        case releaseVersion
        case version
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let releaseVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .releaseVersion)
        releaseVersion = releaseVersionDecoded
        let launchTemplateDecoded = try containerValues.decodeIfPresent(EKSClientTypes.LaunchTemplateSpecification.self, forKey: .launchTemplate)
        launchTemplate = launchTemplateDecoded
        let forceDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .force) ?? false
        force = forceDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}

extension UpdateNodegroupVersionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateNodegroupVersionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServerException" : self = .serverException(try ServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateNodegroupVersionOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case invalidParameterException(InvalidParameterException)
    case invalidRequestException(InvalidRequestException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serverException(ServerException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateNodegroupVersionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateNodegroupVersionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.update = output.update
        } else {
            self.update = nil
        }
    }
}

public struct UpdateNodegroupVersionOutputResponse: Swift.Equatable {
    /// An object representing an asynchronous update.
    public var update: EKSClientTypes.Update?

    public init (
        update: EKSClientTypes.Update? = nil
    )
    {
        self.update = update
    }
}

struct UpdateNodegroupVersionOutputResponseBody: Swift.Equatable {
    let update: EKSClientTypes.Update?
}

extension UpdateNodegroupVersionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case update
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateDecoded = try containerValues.decodeIfPresent(EKSClientTypes.Update.self, forKey: .update)
        update = updateDecoded
    }
}

extension EKSClientTypes.UpdateParam: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case type
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(EKSClientTypes.UpdateParamType.self, forKey: .type)
        type = typeDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension EKSClientTypes {
    /// An object representing the details of an update request.
    public struct UpdateParam: Swift.Equatable {
        /// The keys associated with an update request.
        public var type: EKSClientTypes.UpdateParamType?
        /// The value of the keys submitted as part of an update request.
        public var value: Swift.String?

        public init (
            type: EKSClientTypes.UpdateParamType? = nil,
            value: Swift.String? = nil
        )
        {
            self.type = type
            self.value = value
        }
    }

}

extension EKSClientTypes {
    public enum UpdateParamType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case addonVersion
        case clusterLogging
        case desiredSize
        case encryptionConfig
        case endpointPrivateAccess
        case endpointPublicAccess
        case identityProviderConfig
        case labelsToAdd
        case labelsToRemove
        case launchTemplateName
        case launchTemplateVersion
        case maxSize
        case maxUnavailable
        case maxUnavailablePercentage
        case minSize
        case platformVersion
        case publicAccessCidrs
        case releaseVersion
        case resolveConflicts
        case serviceAccountRoleArn
        case taintsToAdd
        case taintsToRemove
        case version
        case sdkUnknown(Swift.String)

        public static var allCases: [UpdateParamType] {
            return [
                .addonVersion,
                .clusterLogging,
                .desiredSize,
                .encryptionConfig,
                .endpointPrivateAccess,
                .endpointPublicAccess,
                .identityProviderConfig,
                .labelsToAdd,
                .labelsToRemove,
                .launchTemplateName,
                .launchTemplateVersion,
                .maxSize,
                .maxUnavailable,
                .maxUnavailablePercentage,
                .minSize,
                .platformVersion,
                .publicAccessCidrs,
                .releaseVersion,
                .resolveConflicts,
                .serviceAccountRoleArn,
                .taintsToAdd,
                .taintsToRemove,
                .version,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .addonVersion: return "AddonVersion"
            case .clusterLogging: return "ClusterLogging"
            case .desiredSize: return "DesiredSize"
            case .encryptionConfig: return "EncryptionConfig"
            case .endpointPrivateAccess: return "EndpointPrivateAccess"
            case .endpointPublicAccess: return "EndpointPublicAccess"
            case .identityProviderConfig: return "IdentityProviderConfig"
            case .labelsToAdd: return "LabelsToAdd"
            case .labelsToRemove: return "LabelsToRemove"
            case .launchTemplateName: return "LaunchTemplateName"
            case .launchTemplateVersion: return "LaunchTemplateVersion"
            case .maxSize: return "MaxSize"
            case .maxUnavailable: return "MaxUnavailable"
            case .maxUnavailablePercentage: return "MaxUnavailablePercentage"
            case .minSize: return "MinSize"
            case .platformVersion: return "PlatformVersion"
            case .publicAccessCidrs: return "PublicAccessCidrs"
            case .releaseVersion: return "ReleaseVersion"
            case .resolveConflicts: return "ResolveConflicts"
            case .serviceAccountRoleArn: return "ServiceAccountRoleArn"
            case .taintsToAdd: return "TaintsToAdd"
            case .taintsToRemove: return "TaintsToRemove"
            case .version: return "Version"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = UpdateParamType(rawValue: rawValue) ?? UpdateParamType.sdkUnknown(rawValue)
        }
    }
}

extension EKSClientTypes {
    public enum UpdateStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cancelled
        case failed
        case inProgress
        case successful
        case sdkUnknown(Swift.String)

        public static var allCases: [UpdateStatus] {
            return [
                .cancelled,
                .failed,
                .inProgress,
                .successful,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "Cancelled"
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .successful: return "Successful"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = UpdateStatus(rawValue: rawValue) ?? UpdateStatus.sdkUnknown(rawValue)
        }
    }
}

extension EKSClientTypes.UpdateTaintsPayload: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addOrUpdateTaints
        case removeTaints
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addOrUpdateTaints = addOrUpdateTaints {
            var addOrUpdateTaintsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .addOrUpdateTaints)
            for taint0 in addOrUpdateTaints {
                try addOrUpdateTaintsContainer.encode(taint0)
            }
        }
        if let removeTaints = removeTaints {
            var removeTaintsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .removeTaints)
            for taint0 in removeTaints {
                try removeTaintsContainer.encode(taint0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addOrUpdateTaintsContainer = try containerValues.decodeIfPresent([EKSClientTypes.Taint?].self, forKey: .addOrUpdateTaints)
        var addOrUpdateTaintsDecoded0:[EKSClientTypes.Taint]? = nil
        if let addOrUpdateTaintsContainer = addOrUpdateTaintsContainer {
            addOrUpdateTaintsDecoded0 = [EKSClientTypes.Taint]()
            for structure0 in addOrUpdateTaintsContainer {
                if let structure0 = structure0 {
                    addOrUpdateTaintsDecoded0?.append(structure0)
                }
            }
        }
        addOrUpdateTaints = addOrUpdateTaintsDecoded0
        let removeTaintsContainer = try containerValues.decodeIfPresent([EKSClientTypes.Taint?].self, forKey: .removeTaints)
        var removeTaintsDecoded0:[EKSClientTypes.Taint]? = nil
        if let removeTaintsContainer = removeTaintsContainer {
            removeTaintsDecoded0 = [EKSClientTypes.Taint]()
            for structure0 in removeTaintsContainer {
                if let structure0 = structure0 {
                    removeTaintsDecoded0?.append(structure0)
                }
            }
        }
        removeTaints = removeTaintsDecoded0
    }
}

extension EKSClientTypes {
    /// An object representing the details of an update to a taints payload. For more information, see [Node taints on managed node groups](https://docs.aws.amazon.com/eks/latest/userguide/node-taints-managed-node-groups.html).
    public struct UpdateTaintsPayload: Swift.Equatable {
        /// Kubernetes taints to be added or updated.
        public var addOrUpdateTaints: [EKSClientTypes.Taint]?
        /// Kubernetes taints to remove.
        public var removeTaints: [EKSClientTypes.Taint]?

        public init (
            addOrUpdateTaints: [EKSClientTypes.Taint]? = nil,
            removeTaints: [EKSClientTypes.Taint]? = nil
        )
        {
            self.addOrUpdateTaints = addOrUpdateTaints
            self.removeTaints = removeTaints
        }
    }

}

extension EKSClientTypes {
    public enum UpdateType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case addonUpdate
        case associateEncryptionConfig
        case associateIdentityProviderConfig
        case configUpdate
        case disassociateIdentityProviderConfig
        case endpointAccessUpdate
        case loggingUpdate
        case versionUpdate
        case sdkUnknown(Swift.String)

        public static var allCases: [UpdateType] {
            return [
                .addonUpdate,
                .associateEncryptionConfig,
                .associateIdentityProviderConfig,
                .configUpdate,
                .disassociateIdentityProviderConfig,
                .endpointAccessUpdate,
                .loggingUpdate,
                .versionUpdate,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .addonUpdate: return "AddonUpdate"
            case .associateEncryptionConfig: return "AssociateEncryptionConfig"
            case .associateIdentityProviderConfig: return "AssociateIdentityProviderConfig"
            case .configUpdate: return "ConfigUpdate"
            case .disassociateIdentityProviderConfig: return "DisassociateIdentityProviderConfig"
            case .endpointAccessUpdate: return "EndpointAccessUpdate"
            case .loggingUpdate: return "LoggingUpdate"
            case .versionUpdate: return "VersionUpdate"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = UpdateType(rawValue: rawValue) ?? UpdateType.sdkUnknown(rawValue)
        }
    }
}

extension EKSClientTypes.VpcConfigRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointPrivateAccess
        case endpointPublicAccess
        case publicAccessCidrs
        case securityGroupIds
        case subnetIds
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endpointPrivateAccess = self.endpointPrivateAccess {
            try encodeContainer.encode(endpointPrivateAccess, forKey: .endpointPrivateAccess)
        }
        if let endpointPublicAccess = self.endpointPublicAccess {
            try encodeContainer.encode(endpointPublicAccess, forKey: .endpointPublicAccess)
        }
        if let publicAccessCidrs = publicAccessCidrs {
            var publicAccessCidrsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .publicAccessCidrs)
            for string0 in publicAccessCidrs {
                try publicAccessCidrsContainer.encode(string0)
            }
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for string0 in securityGroupIds {
                try securityGroupIdsContainer.encode(string0)
            }
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for string0 in subnetIds {
                try subnetIdsContainer.encode(string0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
        let endpointPublicAccessDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .endpointPublicAccess)
        endpointPublicAccess = endpointPublicAccessDecoded
        let endpointPrivateAccessDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .endpointPrivateAccess)
        endpointPrivateAccess = endpointPrivateAccessDecoded
        let publicAccessCidrsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .publicAccessCidrs)
        var publicAccessCidrsDecoded0:[Swift.String]? = nil
        if let publicAccessCidrsContainer = publicAccessCidrsContainer {
            publicAccessCidrsDecoded0 = [Swift.String]()
            for string0 in publicAccessCidrsContainer {
                if let string0 = string0 {
                    publicAccessCidrsDecoded0?.append(string0)
                }
            }
        }
        publicAccessCidrs = publicAccessCidrsDecoded0
    }
}

extension EKSClientTypes {
    /// An object representing the VPC configuration to use for an Amazon EKS cluster.
    public struct VpcConfigRequest: Swift.Equatable {
        /// Set this value to true to enable private access for your cluster's Kubernetes API server endpoint. If you enable private access, Kubernetes API requests from within your cluster's VPC use the private VPC endpoint. The default value for this parameter is false, which disables private access for your Kubernetes API server. If you disable private access and you have nodes or Fargate pods in the cluster, then ensure that publicAccessCidrs includes the necessary CIDR blocks for communication with the nodes or Fargate pods. For more information, see [Amazon EKS cluster endpoint access control](https://docs.aws.amazon.com/eks/latest/userguide/cluster-endpoint.html) in the Amazon EKS User Guide .
        public var endpointPrivateAccess: Swift.Bool?
        /// Set this value to false to disable public access to your cluster's Kubernetes API server endpoint. If you disable public access, your cluster's Kubernetes API server can only receive requests from within the cluster VPC. The default value for this parameter is true, which enables public access for your Kubernetes API server. For more information, see [Amazon EKS cluster endpoint access control](https://docs.aws.amazon.com/eks/latest/userguide/cluster-endpoint.html) in the Amazon EKS User Guide .
        public var endpointPublicAccess: Swift.Bool?
        /// The CIDR blocks that are allowed access to your cluster's public Kubernetes API server endpoint. Communication to the endpoint from addresses outside of the CIDR blocks that you specify is denied. The default value is 0.0.0.0/0. If you've disabled private endpoint access and you have nodes or Fargate pods in the cluster, then ensure that you specify the necessary CIDR blocks. For more information, see [Amazon EKS cluster endpoint access control](https://docs.aws.amazon.com/eks/latest/userguide/cluster-endpoint.html) in the Amazon EKS User Guide .
        public var publicAccessCidrs: [Swift.String]?
        /// Specify one or more security groups for the cross-account elastic network interfaces that Amazon EKS creates to use that allow communication between your nodes and the Kubernetes control plane. If you don't specify any security groups, then familiarize yourself with the difference between Amazon EKS defaults for clusters deployed with Kubernetes. For more information, see [Amazon EKS security group considerations](https://docs.aws.amazon.com/eks/latest/userguide/sec-group-reqs.html) in the Amazon EKS User Guide .
        public var securityGroupIds: [Swift.String]?
        /// Specify subnets for your Amazon EKS nodes. Amazon EKS creates cross-account elastic network interfaces in these subnets to allow communication between your nodes and the Kubernetes control plane.
        public var subnetIds: [Swift.String]?

        public init (
            endpointPrivateAccess: Swift.Bool? = nil,
            endpointPublicAccess: Swift.Bool? = nil,
            publicAccessCidrs: [Swift.String]? = nil,
            securityGroupIds: [Swift.String]? = nil,
            subnetIds: [Swift.String]? = nil
        )
        {
            self.endpointPrivateAccess = endpointPrivateAccess
            self.endpointPublicAccess = endpointPublicAccess
            self.publicAccessCidrs = publicAccessCidrs
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
        }
    }

}

extension EKSClientTypes.VpcConfigResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterSecurityGroupId
        case endpointPrivateAccess
        case endpointPublicAccess
        case publicAccessCidrs
        case securityGroupIds
        case subnetIds
        case vpcId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterSecurityGroupId = self.clusterSecurityGroupId {
            try encodeContainer.encode(clusterSecurityGroupId, forKey: .clusterSecurityGroupId)
        }
        if endpointPrivateAccess != false {
            try encodeContainer.encode(endpointPrivateAccess, forKey: .endpointPrivateAccess)
        }
        if endpointPublicAccess != false {
            try encodeContainer.encode(endpointPublicAccess, forKey: .endpointPublicAccess)
        }
        if let publicAccessCidrs = publicAccessCidrs {
            var publicAccessCidrsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .publicAccessCidrs)
            for string0 in publicAccessCidrs {
                try publicAccessCidrsContainer.encode(string0)
            }
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for string0 in securityGroupIds {
                try securityGroupIdsContainer.encode(string0)
            }
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for string0 in subnetIds {
                try subnetIdsContainer.encode(string0)
            }
        }
        if let vpcId = self.vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
        let clusterSecurityGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterSecurityGroupId)
        clusterSecurityGroupId = clusterSecurityGroupIdDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let endpointPublicAccessDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .endpointPublicAccess) ?? false
        endpointPublicAccess = endpointPublicAccessDecoded
        let endpointPrivateAccessDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .endpointPrivateAccess) ?? false
        endpointPrivateAccess = endpointPrivateAccessDecoded
        let publicAccessCidrsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .publicAccessCidrs)
        var publicAccessCidrsDecoded0:[Swift.String]? = nil
        if let publicAccessCidrsContainer = publicAccessCidrsContainer {
            publicAccessCidrsDecoded0 = [Swift.String]()
            for string0 in publicAccessCidrsContainer {
                if let string0 = string0 {
                    publicAccessCidrsDecoded0?.append(string0)
                }
            }
        }
        publicAccessCidrs = publicAccessCidrsDecoded0
    }
}

extension EKSClientTypes {
    /// An object representing an Amazon EKS cluster VPC configuration response.
    public struct VpcConfigResponse: Swift.Equatable {
        /// The cluster security group that was created by Amazon EKS for the cluster. Managed node groups use this security group for control-plane-to-data-plane communication.
        public var clusterSecurityGroupId: Swift.String?
        /// This parameter indicates whether the Amazon EKS private API server endpoint is enabled. If the Amazon EKS private API server endpoint is enabled, Kubernetes API requests that originate from within your cluster's VPC use the private VPC endpoint instead of traversing the internet. If this value is disabled and you have nodes or Fargate pods in the cluster, then ensure that publicAccessCidrs includes the necessary CIDR blocks for communication with the nodes or Fargate pods. For more information, see [Amazon EKS cluster endpoint access control](https://docs.aws.amazon.com/eks/latest/userguide/cluster-endpoint.html) in the Amazon EKS User Guide .
        public var endpointPrivateAccess: Swift.Bool
        /// This parameter indicates whether the Amazon EKS public API server endpoint is enabled. If the Amazon EKS public API server endpoint is disabled, your cluster's Kubernetes API server can only receive requests that originate from within the cluster VPC.
        public var endpointPublicAccess: Swift.Bool
        /// The CIDR blocks that are allowed access to your cluster's public Kubernetes API server endpoint. Communication to the endpoint from addresses outside of the listed CIDR blocks is denied. The default value is 0.0.0.0/0. If you've disabled private endpoint access and you have nodes or Fargate pods in the cluster, then ensure that the necessary CIDR blocks are listed. For more information, see [Amazon EKS cluster endpoint access control](https://docs.aws.amazon.com/eks/latest/userguide/cluster-endpoint.html) in the Amazon EKS User Guide .
        public var publicAccessCidrs: [Swift.String]?
        /// The security groups associated with the cross-account elastic network interfaces that are used to allow communication between your nodes and the Kubernetes control plane.
        public var securityGroupIds: [Swift.String]?
        /// The subnets associated with your cluster.
        public var subnetIds: [Swift.String]?
        /// The VPC associated with your cluster.
        public var vpcId: Swift.String?

        public init (
            clusterSecurityGroupId: Swift.String? = nil,
            endpointPrivateAccess: Swift.Bool = false,
            endpointPublicAccess: Swift.Bool = false,
            publicAccessCidrs: [Swift.String]? = nil,
            securityGroupIds: [Swift.String]? = nil,
            subnetIds: [Swift.String]? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.clusterSecurityGroupId = clusterSecurityGroupId
            self.endpointPrivateAccess = endpointPrivateAccess
            self.endpointPublicAccess = endpointPublicAccess
            self.publicAccessCidrs = publicAccessCidrs
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
            self.vpcId = vpcId
        }
    }

}
