//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

import protocol ClientRuntime.PaginateToken
import struct ClientRuntime.PaginatorSequence

extension KinesisAnalyticsV2Client {
    /// Paginate over `[ListApplicationOperationsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListApplicationOperationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListApplicationOperationsOutput`
    public func listApplicationOperationsPaginated(input: ListApplicationOperationsInput) -> ClientRuntime.PaginatorSequence<ListApplicationOperationsInput, ListApplicationOperationsOutput> {
        return ClientRuntime.PaginatorSequence<ListApplicationOperationsInput, ListApplicationOperationsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listApplicationOperations(input:))
    }
}

extension ListApplicationOperationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListApplicationOperationsInput {
        return ListApplicationOperationsInput(
            applicationName: self.applicationName,
            limit: self.limit,
            nextToken: token,
            operation: self.operation,
            operationStatus: self.operationStatus
        )}
}

extension PaginatorSequence where OperationStackInput == ListApplicationOperationsInput, OperationStackOutput == ListApplicationOperationsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listApplicationOperationsPaginated`
    /// to access the nested member `[KinesisAnalyticsV2ClientTypes.ApplicationOperationInfo]`
    /// - Returns: `[KinesisAnalyticsV2ClientTypes.ApplicationOperationInfo]`
    public func applicationOperationInfoList() async throws -> [KinesisAnalyticsV2ClientTypes.ApplicationOperationInfo] {
        return try await self.asyncCompactMap { item in item.applicationOperationInfoList }
    }
}
extension KinesisAnalyticsV2Client {
    /// Paginate over `[ListApplicationsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListApplicationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListApplicationsOutput`
    public func listApplicationsPaginated(input: ListApplicationsInput) -> ClientRuntime.PaginatorSequence<ListApplicationsInput, ListApplicationsOutput> {
        return ClientRuntime.PaginatorSequence<ListApplicationsInput, ListApplicationsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listApplications(input:))
    }
}

extension ListApplicationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListApplicationsInput {
        return ListApplicationsInput(
            limit: self.limit,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListApplicationsInput, OperationStackOutput == ListApplicationsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listApplicationsPaginated`
    /// to access the nested member `[KinesisAnalyticsV2ClientTypes.ApplicationSummary]`
    /// - Returns: `[KinesisAnalyticsV2ClientTypes.ApplicationSummary]`
    public func applicationSummaries() async throws -> [KinesisAnalyticsV2ClientTypes.ApplicationSummary] {
        return try await self.asyncCompactMap { item in item.applicationSummaries }
    }
}
extension KinesisAnalyticsV2Client {
    /// Paginate over `[ListApplicationSnapshotsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListApplicationSnapshotsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListApplicationSnapshotsOutput`
    public func listApplicationSnapshotsPaginated(input: ListApplicationSnapshotsInput) -> ClientRuntime.PaginatorSequence<ListApplicationSnapshotsInput, ListApplicationSnapshotsOutput> {
        return ClientRuntime.PaginatorSequence<ListApplicationSnapshotsInput, ListApplicationSnapshotsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listApplicationSnapshots(input:))
    }
}

extension ListApplicationSnapshotsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListApplicationSnapshotsInput {
        return ListApplicationSnapshotsInput(
            applicationName: self.applicationName,
            limit: self.limit,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListApplicationSnapshotsInput, OperationStackOutput == ListApplicationSnapshotsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listApplicationSnapshotsPaginated`
    /// to access the nested member `[KinesisAnalyticsV2ClientTypes.SnapshotDetails]`
    /// - Returns: `[KinesisAnalyticsV2ClientTypes.SnapshotDetails]`
    public func snapshotSummaries() async throws -> [KinesisAnalyticsV2ClientTypes.SnapshotDetails] {
        return try await self.asyncCompactMap { item in item.snapshotSummaries }
    }
}
extension KinesisAnalyticsV2Client {
    /// Paginate over `[ListApplicationVersionsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListApplicationVersionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListApplicationVersionsOutput`
    public func listApplicationVersionsPaginated(input: ListApplicationVersionsInput) -> ClientRuntime.PaginatorSequence<ListApplicationVersionsInput, ListApplicationVersionsOutput> {
        return ClientRuntime.PaginatorSequence<ListApplicationVersionsInput, ListApplicationVersionsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listApplicationVersions(input:))
    }
}

extension ListApplicationVersionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListApplicationVersionsInput {
        return ListApplicationVersionsInput(
            applicationName: self.applicationName,
            limit: self.limit,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListApplicationVersionsInput, OperationStackOutput == ListApplicationVersionsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listApplicationVersionsPaginated`
    /// to access the nested member `[KinesisAnalyticsV2ClientTypes.ApplicationVersionSummary]`
    /// - Returns: `[KinesisAnalyticsV2ClientTypes.ApplicationVersionSummary]`
    public func applicationVersionSummaries() async throws -> [KinesisAnalyticsV2ClientTypes.ApplicationVersionSummary] {
        return try await self.asyncCompactMap { item in item.applicationVersionSummaries }
    }
}
