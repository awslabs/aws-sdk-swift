//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
@_spi(SmithyReadWrite) import func SmithyReadWrite.listReadingClosure
@_spi(SmithyReadWrite) import func SmithyReadWrite.listWritingClosure
@_spi(SmithyReadWrite) import func SmithyReadWrite.mapReadingClosure
@_spi(SmithyReadWrite) import func SmithyReadWrite.mapWritingClosure
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
@_spi(SmithyTimestamps) import struct SmithyTimestamps.TimestampFormatter

public struct TagResourceOutput {

    public init() { }
}

public struct UntagResourceOutput {

    public init() { }
}

extension DynamoDBClientTypes {

    public enum ApproximateCreationDateTimePrecision: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case microsecond
        case millisecond
        case sdkUnknown(Swift.String)

        public static var allCases: [ApproximateCreationDateTimePrecision] {
            return [
                .microsecond,
                .millisecond
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .microsecond: return "MICROSECOND"
            case .millisecond: return "MILLISECOND"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension DynamoDBClientTypes {
    /// Contains details of a table archival operation.
    public struct ArchivalSummary {
        /// The Amazon Resource Name (ARN) of the backup the table was archived to, when applicable in the archival reason. If you wish to restore this backup to the same table name, you will need to delete the original table.
        public var archivalBackupArn: Swift.String?
        /// The date and time when table archival was initiated by DynamoDB, in UNIX epoch time format.
        public var archivalDateTime: Foundation.Date?
        /// The reason DynamoDB archived the table. Currently, the only possible value is:
        ///
        /// * INACCESSIBLE_ENCRYPTION_CREDENTIALS - The table was archived due to the table's KMS key being inaccessible for more than seven days. An On-Demand backup was created at the archival time.
        public var archivalReason: Swift.String?

        public init(
            archivalBackupArn: Swift.String? = nil,
            archivalDateTime: Foundation.Date? = nil,
            archivalReason: Swift.String? = nil
        )
        {
            self.archivalBackupArn = archivalBackupArn
            self.archivalDateTime = archivalDateTime
            self.archivalReason = archivalReason
        }
    }

}

extension DynamoDBClientTypes {

    public enum AttributeAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case add
        case delete
        case put
        case sdkUnknown(Swift.String)

        public static var allCases: [AttributeAction] {
            return [
                .add,
                .delete,
                .put
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .add: return "ADD"
            case .delete: return "DELETE"
            case .put: return "PUT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension DynamoDBClientTypes {

    public enum ScalarAttributeType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case b
        case n
        case s
        case sdkUnknown(Swift.String)

        public static var allCases: [ScalarAttributeType] {
            return [
                .b,
                .n,
                .s
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .b: return "B"
            case .n: return "N"
            case .s: return "S"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension DynamoDBClientTypes {
    /// Represents an attribute for describing the schema for the table and indexes.
    public struct AttributeDefinition {
        /// A name for the attribute.
        /// This member is required.
        public var attributeName: Swift.String?
        /// The data type for the attribute, where:
        ///
        /// * S - the attribute is of type String
        ///
        /// * N - the attribute is of type Number
        ///
        /// * B - the attribute is of type Binary
        /// This member is required.
        public var attributeType: DynamoDBClientTypes.ScalarAttributeType?

        public init(
            attributeName: Swift.String? = nil,
            attributeType: DynamoDBClientTypes.ScalarAttributeType? = nil
        )
        {
            self.attributeName = attributeName
            self.attributeType = attributeType
        }
    }

}

extension DynamoDBClientTypes {
    /// Represents the properties of a target tracking scaling policy.
    public struct AutoScalingTargetTrackingScalingPolicyConfigurationDescription {
        /// Indicates whether scale in by the target tracking policy is disabled. If the value is true, scale in is disabled and the target tracking policy won't remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource. The default value is false.
        public var disableScaleIn: Swift.Bool?
        /// The amount of time, in seconds, after a scale in activity completes before another scale in activity can start. The cooldown period is used to block subsequent scale in requests until it has expired. You should scale in conservatively to protect your application's availability. However, if another alarm triggers a scale out policy during the cooldown period after a scale-in, application auto scaling scales out your scalable target immediately.
        public var scaleInCooldown: Swift.Int?
        /// The amount of time, in seconds, after a scale out activity completes before another scale out activity can start. While the cooldown period is in effect, the capacity that has been added by the previous scale out event that initiated the cooldown is calculated as part of the desired capacity for the next scale out. You should continuously (but not excessively) scale out.
        public var scaleOutCooldown: Swift.Int?
        /// The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).
        /// This member is required.
        public var targetValue: Swift.Double?

        public init(
            disableScaleIn: Swift.Bool? = nil,
            scaleInCooldown: Swift.Int? = nil,
            scaleOutCooldown: Swift.Int? = nil,
            targetValue: Swift.Double? = nil
        )
        {
            self.disableScaleIn = disableScaleIn
            self.scaleInCooldown = scaleInCooldown
            self.scaleOutCooldown = scaleOutCooldown
            self.targetValue = targetValue
        }
    }

}

extension DynamoDBClientTypes {
    /// Represents the properties of the scaling policy.
    public struct AutoScalingPolicyDescription {
        /// The name of the scaling policy.
        public var policyName: Swift.String?
        /// Represents a target tracking scaling policy configuration.
        public var targetTrackingScalingPolicyConfiguration: DynamoDBClientTypes.AutoScalingTargetTrackingScalingPolicyConfigurationDescription?

        public init(
            policyName: Swift.String? = nil,
            targetTrackingScalingPolicyConfiguration: DynamoDBClientTypes.AutoScalingTargetTrackingScalingPolicyConfigurationDescription? = nil
        )
        {
            self.policyName = policyName
            self.targetTrackingScalingPolicyConfiguration = targetTrackingScalingPolicyConfiguration
        }
    }

}

extension DynamoDBClientTypes {
    /// Represents the settings of a target tracking scaling policy that will be modified.
    public struct AutoScalingTargetTrackingScalingPolicyConfigurationUpdate {
        /// Indicates whether scale in by the target tracking policy is disabled. If the value is true, scale in is disabled and the target tracking policy won't remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource. The default value is false.
        public var disableScaleIn: Swift.Bool?
        /// The amount of time, in seconds, after a scale in activity completes before another scale in activity can start. The cooldown period is used to block subsequent scale in requests until it has expired. You should scale in conservatively to protect your application's availability. However, if another alarm triggers a scale out policy during the cooldown period after a scale-in, application auto scaling scales out your scalable target immediately.
        public var scaleInCooldown: Swift.Int?
        /// The amount of time, in seconds, after a scale out activity completes before another scale out activity can start. While the cooldown period is in effect, the capacity that has been added by the previous scale out event that initiated the cooldown is calculated as part of the desired capacity for the next scale out. You should continuously (but not excessively) scale out.
        public var scaleOutCooldown: Swift.Int?
        /// The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).
        /// This member is required.
        public var targetValue: Swift.Double?

        public init(
            disableScaleIn: Swift.Bool? = nil,
            scaleInCooldown: Swift.Int? = nil,
            scaleOutCooldown: Swift.Int? = nil,
            targetValue: Swift.Double? = nil
        )
        {
            self.disableScaleIn = disableScaleIn
            self.scaleInCooldown = scaleInCooldown
            self.scaleOutCooldown = scaleOutCooldown
            self.targetValue = targetValue
        }
    }

}

extension DynamoDBClientTypes {
    /// Represents the auto scaling policy to be modified.
    public struct AutoScalingPolicyUpdate {
        /// The name of the scaling policy.
        public var policyName: Swift.String?
        /// Represents a target tracking scaling policy configuration.
        /// This member is required.
        public var targetTrackingScalingPolicyConfiguration: DynamoDBClientTypes.AutoScalingTargetTrackingScalingPolicyConfigurationUpdate?

        public init(
            policyName: Swift.String? = nil,
            targetTrackingScalingPolicyConfiguration: DynamoDBClientTypes.AutoScalingTargetTrackingScalingPolicyConfigurationUpdate? = nil
        )
        {
            self.policyName = policyName
            self.targetTrackingScalingPolicyConfiguration = targetTrackingScalingPolicyConfiguration
        }
    }

}

extension DynamoDBClientTypes {
    /// Represents the auto scaling settings for a global table or global secondary index.
    public struct AutoScalingSettingsDescription {
        /// Disabled auto scaling for this global table or global secondary index.
        public var autoScalingDisabled: Swift.Bool?
        /// Role ARN used for configuring the auto scaling policy.
        public var autoScalingRoleArn: Swift.String?
        /// The maximum capacity units that a global table or global secondary index should be scaled up to.
        public var maximumUnits: Swift.Int?
        /// The minimum capacity units that a global table or global secondary index should be scaled down to.
        public var minimumUnits: Swift.Int?
        /// Information about the scaling policies.
        public var scalingPolicies: [DynamoDBClientTypes.AutoScalingPolicyDescription]?

        public init(
            autoScalingDisabled: Swift.Bool? = nil,
            autoScalingRoleArn: Swift.String? = nil,
            maximumUnits: Swift.Int? = nil,
            minimumUnits: Swift.Int? = nil,
            scalingPolicies: [DynamoDBClientTypes.AutoScalingPolicyDescription]? = nil
        )
        {
            self.autoScalingDisabled = autoScalingDisabled
            self.autoScalingRoleArn = autoScalingRoleArn
            self.maximumUnits = maximumUnits
            self.minimumUnits = minimumUnits
            self.scalingPolicies = scalingPolicies
        }
    }

}

extension DynamoDBClientTypes {
    /// Represents the auto scaling settings to be modified for a global table or global secondary index.
    public struct AutoScalingSettingsUpdate {
        /// Disabled auto scaling for this global table or global secondary index.
        public var autoScalingDisabled: Swift.Bool?
        /// Role ARN used for configuring auto scaling policy.
        public var autoScalingRoleArn: Swift.String?
        /// The maximum capacity units that a global table or global secondary index should be scaled up to.
        public var maximumUnits: Swift.Int?
        /// The minimum capacity units that a global table or global secondary index should be scaled down to.
        public var minimumUnits: Swift.Int?
        /// The scaling policy to apply for scaling target global table or global secondary index capacity units.
        public var scalingPolicyUpdate: DynamoDBClientTypes.AutoScalingPolicyUpdate?

        public init(
            autoScalingDisabled: Swift.Bool? = nil,
            autoScalingRoleArn: Swift.String? = nil,
            maximumUnits: Swift.Int? = nil,
            minimumUnits: Swift.Int? = nil,
            scalingPolicyUpdate: DynamoDBClientTypes.AutoScalingPolicyUpdate? = nil
        )
        {
            self.autoScalingDisabled = autoScalingDisabled
            self.autoScalingRoleArn = autoScalingRoleArn
            self.maximumUnits = maximumUnits
            self.minimumUnits = minimumUnits
            self.scalingPolicyUpdate = scalingPolicyUpdate
        }
    }

}

extension DynamoDBClientTypes {

    public enum BackupStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case available
        case creating
        case deleted
        case sdkUnknown(Swift.String)

        public static var allCases: [BackupStatus] {
            return [
                .available,
                .creating,
                .deleted
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .available: return "AVAILABLE"
            case .creating: return "CREATING"
            case .deleted: return "DELETED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension DynamoDBClientTypes {

    public enum BackupType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case awsBackup
        case system
        case user
        case sdkUnknown(Swift.String)

        public static var allCases: [BackupType] {
            return [
                .awsBackup,
                .system,
                .user
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .awsBackup: return "AWS_BACKUP"
            case .system: return "SYSTEM"
            case .user: return "USER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension DynamoDBClientTypes {
    /// Contains the details of the backup created for the table.
    public struct BackupDetails {
        /// ARN associated with the backup.
        /// This member is required.
        public var backupArn: Swift.String?
        /// Time at which the backup was created. This is the request time of the backup.
        /// This member is required.
        public var backupCreationDateTime: Foundation.Date?
        /// Time at which the automatic on-demand backup created by DynamoDB will expire. This SYSTEM on-demand backup expires automatically 35 days after its creation.
        public var backupExpiryDateTime: Foundation.Date?
        /// Name of the requested backup.
        /// This member is required.
        public var backupName: Swift.String?
        /// Size of the backup in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.
        public var backupSizeBytes: Swift.Int?
        /// Backup can be in one of the following states: CREATING, ACTIVE, DELETED.
        /// This member is required.
        public var backupStatus: DynamoDBClientTypes.BackupStatus?
        /// BackupType:
        ///
        /// * USER - You create and manage these using the on-demand backup feature.
        ///
        /// * SYSTEM - If you delete a table with point-in-time recovery enabled, a SYSTEM backup is automatically created and is retained for 35 days (at no additional cost). System backups allow you to restore the deleted table to the state it was in just before the point of deletion.
        ///
        /// * AWS_BACKUP - On-demand backup created by you from Backup service.
        /// This member is required.
        public var backupType: DynamoDBClientTypes.BackupType?

        public init(
            backupArn: Swift.String? = nil,
            backupCreationDateTime: Foundation.Date? = nil,
            backupExpiryDateTime: Foundation.Date? = nil,
            backupName: Swift.String? = nil,
            backupSizeBytes: Swift.Int? = nil,
            backupStatus: DynamoDBClientTypes.BackupStatus? = nil,
            backupType: DynamoDBClientTypes.BackupType? = nil
        )
        {
            self.backupArn = backupArn
            self.backupCreationDateTime = backupCreationDateTime
            self.backupExpiryDateTime = backupExpiryDateTime
            self.backupName = backupName
            self.backupSizeBytes = backupSizeBytes
            self.backupStatus = backupStatus
            self.backupType = backupType
        }
    }

}

extension DynamoDBClientTypes {

    public enum BillingMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case payPerRequest
        case provisioned
        case sdkUnknown(Swift.String)

        public static var allCases: [BillingMode] {
            return [
                .payPerRequest,
                .provisioned
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .payPerRequest: return "PAY_PER_REQUEST"
            case .provisioned: return "PROVISIONED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension DynamoDBClientTypes {

    public enum KeyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case hash
        case range
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyType] {
            return [
                .hash,
                .range
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .hash: return "HASH"
            case .range: return "RANGE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension DynamoDBClientTypes {
    /// Represents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index. A KeySchemaElement represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one KeySchemaElement (for the partition key). A composite primary key would require one KeySchemaElement for the partition key, and another KeySchemaElement for the sort key. A KeySchemaElement must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.
    public struct KeySchemaElement {
        /// The name of a key attribute.
        /// This member is required.
        public var attributeName: Swift.String?
        /// The role that this key attribute will assume:
        ///
        /// * HASH - partition key
        ///
        /// * RANGE - sort key
        ///
        ///
        /// The partition key of an item is also known as its hash attribute. The term "hash attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values. The sort key of an item is also known as its range attribute. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.
        /// This member is required.
        public var keyType: DynamoDBClientTypes.KeyType?

        public init(
            attributeName: Swift.String? = nil,
            keyType: DynamoDBClientTypes.KeyType? = nil
        )
        {
            self.attributeName = attributeName
            self.keyType = keyType
        }
    }

}

extension DynamoDBClientTypes {
    /// Sets the maximum number of read and write units for the specified on-demand table. If you use this parameter, you must specify MaxReadRequestUnits, MaxWriteRequestUnits, or both.
    public struct OnDemandThroughput {
        /// Maximum number of read request units for the specified table. To specify a maximum OnDemandThroughput on your table, set the value of MaxReadRequestUnits as greater than or equal to 1. To remove the maximum OnDemandThroughput that is currently set on your table, set the value of MaxReadRequestUnits to -1.
        public var maxReadRequestUnits: Swift.Int?
        /// Maximum number of write request units for the specified table. To specify a maximum OnDemandThroughput on your table, set the value of MaxWriteRequestUnits as greater than or equal to 1. To remove the maximum OnDemandThroughput that is currently set on your table, set the value of MaxWriteRequestUnits to -1.
        public var maxWriteRequestUnits: Swift.Int?

        public init(
            maxReadRequestUnits: Swift.Int? = nil,
            maxWriteRequestUnits: Swift.Int? = nil
        )
        {
            self.maxReadRequestUnits = maxReadRequestUnits
            self.maxWriteRequestUnits = maxWriteRequestUnits
        }
    }

}

extension DynamoDBClientTypes {
    /// Represents the provisioned throughput settings for a specified table or index. The settings can be modified using the UpdateTable operation. For current minimum and maximum provisioned throughput values, see [Service, Account, and Table Quotas](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html) in the Amazon DynamoDB Developer Guide.
    public struct ProvisionedThroughput {
        /// The maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException. For more information, see [Specifying Read and Write Requirements](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughput.html) in the Amazon DynamoDB Developer Guide. If read/write capacity mode is PAY_PER_REQUEST the value is set to 0.
        /// This member is required.
        public var readCapacityUnits: Swift.Int?
        /// The maximum number of writes consumed per second before DynamoDB returns a ThrottlingException. For more information, see [Specifying Read and Write Requirements](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughput.html) in the Amazon DynamoDB Developer Guide. If read/write capacity mode is PAY_PER_REQUEST the value is set to 0.
        /// This member is required.
        public var writeCapacityUnits: Swift.Int?

        public init(
            readCapacityUnits: Swift.Int? = nil,
            writeCapacityUnits: Swift.Int? = nil
        )
        {
            self.readCapacityUnits = readCapacityUnits
            self.writeCapacityUnits = writeCapacityUnits
        }
    }

}

extension DynamoDBClientTypes {
    /// Contains the details of the table when the backup was created.
    public struct SourceTableDetails {
        /// Controls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.
        ///
        /// * PROVISIONED - Sets the read/write capacity mode to PROVISIONED. We recommend using PROVISIONED for predictable workloads.
        ///
        /// * PAY_PER_REQUEST - Sets the read/write capacity mode to PAY_PER_REQUEST. We recommend using PAY_PER_REQUEST for unpredictable workloads.
        public var billingMode: DynamoDBClientTypes.BillingMode?
        /// Number of items in the table. Note that this is an approximate value.
        public var itemCount: Swift.Int?
        /// Schema of the table.
        /// This member is required.
        public var keySchema: [DynamoDBClientTypes.KeySchemaElement]?
        /// Sets the maximum number of read and write units for the specified on-demand table. If you use this parameter, you must specify MaxReadRequestUnits, MaxWriteRequestUnits, or both.
        public var onDemandThroughput: DynamoDBClientTypes.OnDemandThroughput?
        /// Read IOPs and Write IOPS on the table when the backup was created.
        /// This member is required.
        public var provisionedThroughput: DynamoDBClientTypes.ProvisionedThroughput?
        /// ARN of the table for which backup was created.
        public var tableArn: Swift.String?
        /// Time when the source table was created.
        /// This member is required.
        public var tableCreationDateTime: Foundation.Date?
        /// Unique identifier for the table for which the backup was created.
        /// This member is required.
        public var tableId: Swift.String?
        /// The name of the table for which the backup was created.
        /// This member is required.
        public var tableName: Swift.String?
        /// Size of the table in bytes. Note that this is an approximate value.
        public var tableSizeBytes: Swift.Int?

        public init(
            billingMode: DynamoDBClientTypes.BillingMode? = nil,
            itemCount: Swift.Int? = nil,
            keySchema: [DynamoDBClientTypes.KeySchemaElement]? = nil,
            onDemandThroughput: DynamoDBClientTypes.OnDemandThroughput? = nil,
            provisionedThroughput: DynamoDBClientTypes.ProvisionedThroughput? = nil,
            tableArn: Swift.String? = nil,
            tableCreationDateTime: Foundation.Date? = nil,
            tableId: Swift.String? = nil,
            tableName: Swift.String? = nil,
            tableSizeBytes: Swift.Int? = nil
        )
        {
            self.billingMode = billingMode
            self.itemCount = itemCount
            self.keySchema = keySchema
            self.onDemandThroughput = onDemandThroughput
            self.provisionedThroughput = provisionedThroughput
            self.tableArn = tableArn
            self.tableCreationDateTime = tableCreationDateTime
            self.tableId = tableId
            self.tableName = tableName
            self.tableSizeBytes = tableSizeBytes
        }
    }

}

extension DynamoDBClientTypes {

    public enum ProjectionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case all
        case include
        case keysOnly
        case sdkUnknown(Swift.String)

        public static var allCases: [ProjectionType] {
            return [
                .all,
                .include,
                .keysOnly
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case .include: return "INCLUDE"
            case .keysOnly: return "KEYS_ONLY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension DynamoDBClientTypes {
    /// Represents attributes that are copied (projected) from the table into an index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
    public struct Projection {
        /// Represents the non-key attribute names which will be projected into the index. For local secondary indexes, the total count of NonKeyAttributes summed across all of the local secondary indexes, must not exceed 100. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.
        public var nonKeyAttributes: [Swift.String]?
        /// The set of attributes that are projected into the index:
        ///
        /// * KEYS_ONLY - Only the index and primary keys are projected into the index.
        ///
        /// * INCLUDE - In addition to the attributes described in KEYS_ONLY, the secondary index will include other non-key attributes that you specify.
        ///
        /// * ALL - All of the table attributes are projected into the index.
        ///
        ///
        /// When using the DynamoDB console, ALL is selected by default.
        public var projectionType: DynamoDBClientTypes.ProjectionType?

        public init(
            nonKeyAttributes: [Swift.String]? = nil,
            projectionType: DynamoDBClientTypes.ProjectionType? = nil
        )
        {
            self.nonKeyAttributes = nonKeyAttributes
            self.projectionType = projectionType
        }
    }

}

extension DynamoDBClientTypes {
    /// Represents the properties of a global secondary index for the table when the backup was created.
    public struct GlobalSecondaryIndexInfo {
        /// The name of the global secondary index.
        public var indexName: Swift.String?
        /// The complete key schema for a global secondary index, which consists of one or more pairs of attribute names and key types:
        ///
        /// * HASH - partition key
        ///
        /// * RANGE - sort key
        ///
        ///
        /// The partition key of an item is also known as its hash attribute. The term "hash attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values. The sort key of an item is also known as its range attribute. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.
        public var keySchema: [DynamoDBClientTypes.KeySchemaElement]?
        /// Sets the maximum number of read and write units for the specified on-demand table. If you use this parameter, you must specify MaxReadRequestUnits, MaxWriteRequestUnits, or both.
        public var onDemandThroughput: DynamoDBClientTypes.OnDemandThroughput?
        /// Represents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
        public var projection: DynamoDBClientTypes.Projection?
        /// Represents the provisioned throughput settings for the specified global secondary index.
        public var provisionedThroughput: DynamoDBClientTypes.ProvisionedThroughput?

        public init(
            indexName: Swift.String? = nil,
            keySchema: [DynamoDBClientTypes.KeySchemaElement]? = nil,
            onDemandThroughput: DynamoDBClientTypes.OnDemandThroughput? = nil,
            projection: DynamoDBClientTypes.Projection? = nil,
            provisionedThroughput: DynamoDBClientTypes.ProvisionedThroughput? = nil
        )
        {
            self.indexName = indexName
            self.keySchema = keySchema
            self.onDemandThroughput = onDemandThroughput
            self.projection = projection
            self.provisionedThroughput = provisionedThroughput
        }
    }

}

extension DynamoDBClientTypes {
    /// Represents the properties of a local secondary index for the table when the backup was created.
    public struct LocalSecondaryIndexInfo {
        /// Represents the name of the local secondary index.
        public var indexName: Swift.String?
        /// The complete key schema for a local secondary index, which consists of one or more pairs of attribute names and key types:
        ///
        /// * HASH - partition key
        ///
        /// * RANGE - sort key
        ///
        ///
        /// The partition key of an item is also known as its hash attribute. The term "hash attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values. The sort key of an item is also known as its range attribute. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.
        public var keySchema: [DynamoDBClientTypes.KeySchemaElement]?
        /// Represents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
        public var projection: DynamoDBClientTypes.Projection?

        public init(
            indexName: Swift.String? = nil,
            keySchema: [DynamoDBClientTypes.KeySchemaElement]? = nil,
            projection: DynamoDBClientTypes.Projection? = nil
        )
        {
            self.indexName = indexName
            self.keySchema = keySchema
            self.projection = projection
        }
    }

}

extension DynamoDBClientTypes {

    public enum SSEType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case aes256
        case kms
        case sdkUnknown(Swift.String)

        public static var allCases: [SSEType] {
            return [
                .aes256,
                .kms
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .aes256: return "AES256"
            case .kms: return "KMS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension DynamoDBClientTypes {

    public enum SSEStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case disabling
        case enabled
        case enabling
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [SSEStatus] {
            return [
                .disabled,
                .disabling,
                .enabled,
                .enabling,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .disabling: return "DISABLING"
            case .enabled: return "ENABLED"
            case .enabling: return "ENABLING"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension DynamoDBClientTypes {
    /// The description of the server-side encryption status on the specified table.
    public struct SSEDescription {
        /// Indicates the time, in UNIX epoch date format, when DynamoDB detected that the table's KMS key was inaccessible. This attribute will automatically be cleared when DynamoDB detects that the table's KMS key is accessible again. DynamoDB will initiate the table archival process when table's KMS key remains inaccessible for more than seven days from this date.
        public var inaccessibleEncryptionDateTime: Foundation.Date?
        /// The KMS key ARN used for the KMS encryption.
        public var kmsMasterKeyArn: Swift.String?
        /// Server-side encryption type. The only supported value is:
        ///
        /// * KMS - Server-side encryption that uses Key Management Service. The key is stored in your account and is managed by KMS (KMS charges apply).
        public var sseType: DynamoDBClientTypes.SSEType?
        /// Represents the current state of server-side encryption. The only supported values are:
        ///
        /// * ENABLED - Server-side encryption is enabled.
        ///
        /// * UPDATING - Server-side encryption is being updated.
        public var status: DynamoDBClientTypes.SSEStatus?

        public init(
            inaccessibleEncryptionDateTime: Foundation.Date? = nil,
            kmsMasterKeyArn: Swift.String? = nil,
            sseType: DynamoDBClientTypes.SSEType? = nil,
            status: DynamoDBClientTypes.SSEStatus? = nil
        )
        {
            self.inaccessibleEncryptionDateTime = inaccessibleEncryptionDateTime
            self.kmsMasterKeyArn = kmsMasterKeyArn
            self.sseType = sseType
            self.status = status
        }
    }

}

extension DynamoDBClientTypes {

    public enum StreamViewType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case keysOnly
        case newAndOldImages
        case newImage
        case oldImage
        case sdkUnknown(Swift.String)

        public static var allCases: [StreamViewType] {
            return [
                .keysOnly,
                .newAndOldImages,
                .newImage,
                .oldImage
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .keysOnly: return "KEYS_ONLY"
            case .newAndOldImages: return "NEW_AND_OLD_IMAGES"
            case .newImage: return "NEW_IMAGE"
            case .oldImage: return "OLD_IMAGE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension DynamoDBClientTypes {
    /// Represents the DynamoDB Streams configuration for a table in DynamoDB.
    public struct StreamSpecification {
        /// Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.
        /// This member is required.
        public var streamEnabled: Swift.Bool?
        /// When an item in the table is modified, StreamViewType determines what information is written to the stream for this table. Valid values for StreamViewType are:
        ///
        /// * KEYS_ONLY - Only the key attributes of the modified item are written to the stream.
        ///
        /// * NEW_IMAGE - The entire item, as it appears after it was modified, is written to the stream.
        ///
        /// * OLD_IMAGE - The entire item, as it appeared before it was modified, is written to the stream.
        ///
        /// * NEW_AND_OLD_IMAGES - Both the new and the old item images of the item are written to the stream.
        public var streamViewType: DynamoDBClientTypes.StreamViewType?

        public init(
            streamEnabled: Swift.Bool? = nil,
            streamViewType: DynamoDBClientTypes.StreamViewType? = nil
        )
        {
            self.streamEnabled = streamEnabled
            self.streamViewType = streamViewType
        }
    }

}

extension DynamoDBClientTypes {

    public enum TimeToLiveStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case disabling
        case enabled
        case enabling
        case sdkUnknown(Swift.String)

        public static var allCases: [TimeToLiveStatus] {
            return [
                .disabled,
                .disabling,
                .enabled,
                .enabling
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .disabling: return "DISABLING"
            case .enabled: return "ENABLED"
            case .enabling: return "ENABLING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension DynamoDBClientTypes {
    /// The description of the Time to Live (TTL) status on the specified table.
    public struct TimeToLiveDescription {
        /// The name of the TTL attribute for items in the table.
        public var attributeName: Swift.String?
        /// The TTL status for the table.
        public var timeToLiveStatus: DynamoDBClientTypes.TimeToLiveStatus?

        public init(
            attributeName: Swift.String? = nil,
            timeToLiveStatus: DynamoDBClientTypes.TimeToLiveStatus? = nil
        )
        {
            self.attributeName = attributeName
            self.timeToLiveStatus = timeToLiveStatus
        }
    }

}

extension DynamoDBClientTypes {
    /// Contains the details of the features enabled on the table when the backup was created. For example, LSIs, GSIs, streams, TTL.
    public struct SourceTableFeatureDetails {
        /// Represents the GSI properties for the table when the backup was created. It includes the IndexName, KeySchema, Projection, and ProvisionedThroughput for the GSIs on the table at the time of backup.
        public var globalSecondaryIndexes: [DynamoDBClientTypes.GlobalSecondaryIndexInfo]?
        /// Represents the LSI properties for the table when the backup was created. It includes the IndexName, KeySchema and Projection for the LSIs on the table at the time of backup.
        public var localSecondaryIndexes: [DynamoDBClientTypes.LocalSecondaryIndexInfo]?
        /// The description of the server-side encryption status on the table when the backup was created.
        public var sseDescription: DynamoDBClientTypes.SSEDescription?
        /// Stream settings on the table when the backup was created.
        public var streamDescription: DynamoDBClientTypes.StreamSpecification?
        /// Time to Live settings on the table when the backup was created.
        public var timeToLiveDescription: DynamoDBClientTypes.TimeToLiveDescription?

        public init(
            globalSecondaryIndexes: [DynamoDBClientTypes.GlobalSecondaryIndexInfo]? = nil,
            localSecondaryIndexes: [DynamoDBClientTypes.LocalSecondaryIndexInfo]? = nil,
            sseDescription: DynamoDBClientTypes.SSEDescription? = nil,
            streamDescription: DynamoDBClientTypes.StreamSpecification? = nil,
            timeToLiveDescription: DynamoDBClientTypes.TimeToLiveDescription? = nil
        )
        {
            self.globalSecondaryIndexes = globalSecondaryIndexes
            self.localSecondaryIndexes = localSecondaryIndexes
            self.sseDescription = sseDescription
            self.streamDescription = streamDescription
            self.timeToLiveDescription = timeToLiveDescription
        }
    }

}

extension DynamoDBClientTypes {
    /// Contains the description of the backup created for the table.
    public struct BackupDescription {
        /// Contains the details of the backup created for the table.
        public var backupDetails: DynamoDBClientTypes.BackupDetails?
        /// Contains the details of the table when the backup was created.
        public var sourceTableDetails: DynamoDBClientTypes.SourceTableDetails?
        /// Contains the details of the features enabled on the table when the backup was created. For example, LSIs, GSIs, streams, TTL.
        public var sourceTableFeatureDetails: DynamoDBClientTypes.SourceTableFeatureDetails?

        public init(
            backupDetails: DynamoDBClientTypes.BackupDetails? = nil,
            sourceTableDetails: DynamoDBClientTypes.SourceTableDetails? = nil,
            sourceTableFeatureDetails: DynamoDBClientTypes.SourceTableFeatureDetails? = nil
        )
        {
            self.backupDetails = backupDetails
            self.sourceTableDetails = sourceTableDetails
            self.sourceTableFeatureDetails = sourceTableFeatureDetails
        }
    }

}

/// There is another ongoing conflicting backup control plane operation on the table. The backup is either being created, deleted or restored to a table.
public struct BackupInUseException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "BackupInUseException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Backup not found for the given BackupARN.
public struct BackupNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "BackupNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension DynamoDBClientTypes {
    /// Contains details for the backup.
    public struct BackupSummary {
        /// ARN associated with the backup.
        public var backupArn: Swift.String?
        /// Time at which the backup was created.
        public var backupCreationDateTime: Foundation.Date?
        /// Time at which the automatic on-demand backup created by DynamoDB will expire. This SYSTEM on-demand backup expires automatically 35 days after its creation.
        public var backupExpiryDateTime: Foundation.Date?
        /// Name of the specified backup.
        public var backupName: Swift.String?
        /// Size of the backup in bytes.
        public var backupSizeBytes: Swift.Int?
        /// Backup can be in one of the following states: CREATING, ACTIVE, DELETED.
        public var backupStatus: DynamoDBClientTypes.BackupStatus?
        /// BackupType:
        ///
        /// * USER - You create and manage these using the on-demand backup feature.
        ///
        /// * SYSTEM - If you delete a table with point-in-time recovery enabled, a SYSTEM backup is automatically created and is retained for 35 days (at no additional cost). System backups allow you to restore the deleted table to the state it was in just before the point of deletion.
        ///
        /// * AWS_BACKUP - On-demand backup created by you from Backup service.
        public var backupType: DynamoDBClientTypes.BackupType?
        /// ARN associated with the table.
        public var tableArn: Swift.String?
        /// Unique identifier for the table.
        public var tableId: Swift.String?
        /// Name of the table.
        public var tableName: Swift.String?

        public init(
            backupArn: Swift.String? = nil,
            backupCreationDateTime: Foundation.Date? = nil,
            backupExpiryDateTime: Foundation.Date? = nil,
            backupName: Swift.String? = nil,
            backupSizeBytes: Swift.Int? = nil,
            backupStatus: DynamoDBClientTypes.BackupStatus? = nil,
            backupType: DynamoDBClientTypes.BackupType? = nil,
            tableArn: Swift.String? = nil,
            tableId: Swift.String? = nil,
            tableName: Swift.String? = nil
        )
        {
            self.backupArn = backupArn
            self.backupCreationDateTime = backupCreationDateTime
            self.backupExpiryDateTime = backupExpiryDateTime
            self.backupName = backupName
            self.backupSizeBytes = backupSizeBytes
            self.backupStatus = backupStatus
            self.backupType = backupType
            self.tableArn = tableArn
            self.tableId = tableId
            self.tableName = tableName
        }
    }

}

extension DynamoDBClientTypes {

    public enum BackupTypeFilter: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case all
        case awsBackup
        case system
        case user
        case sdkUnknown(Swift.String)

        public static var allCases: [BackupTypeFilter] {
            return [
                .all,
                .awsBackup,
                .system,
                .user
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case .awsBackup: return "AWS_BACKUP"
            case .system: return "SYSTEM"
            case .user: return "USER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// An error occurred on the server side.
public struct InternalServerError: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The server encountered an internal error trying to fulfill the request.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerError" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Throughput exceeds the current throughput quota for your account. Please contact [Amazon Web Services Support](https://aws.amazon.com/support) to request a quota increase.
public struct RequestLimitExceeded: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "RequestLimitExceeded" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension DynamoDBClientTypes {

    /// Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:
    ///
    /// * INDEXES - The response includes the aggregate ConsumedCapacity for the operation, together with ConsumedCapacity for each table and secondary index that was accessed. Note that some operations, such as GetItem and BatchGetItem, do not access any indexes at all. In these cases, specifying INDEXES will only return ConsumedCapacity information for table(s).
    ///
    /// * TOTAL - The response includes only the aggregate ConsumedCapacity for the operation.
    ///
    /// * NONE - No ConsumedCapacity details are included in the response.
    public enum ReturnConsumedCapacity: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case indexes
        case `none`
        case total
        case sdkUnknown(Swift.String)

        public static var allCases: [ReturnConsumedCapacity] {
            return [
                .indexes,
                .none,
                .total
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .indexes: return "INDEXES"
            case .none: return "NONE"
            case .total: return "TOTAL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension DynamoDBClientTypes {

    public enum ReturnValuesOnConditionCheckFailure: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case allOld
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [ReturnValuesOnConditionCheckFailure] {
            return [
                .allOld,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .allOld: return "ALL_OLD"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension DynamoDBClientTypes {
    /// Represents the amount of provisioned throughput capacity consumed on a table or an index.
    public struct Capacity {
        /// The total number of capacity units consumed on a table or an index.
        public var capacityUnits: Swift.Double?
        /// The total number of read capacity units consumed on a table or an index.
        public var readCapacityUnits: Swift.Double?
        /// The total number of write capacity units consumed on a table or an index.
        public var writeCapacityUnits: Swift.Double?

        public init(
            capacityUnits: Swift.Double? = nil,
            readCapacityUnits: Swift.Double? = nil,
            writeCapacityUnits: Swift.Double? = nil
        )
        {
            self.capacityUnits = capacityUnits
            self.readCapacityUnits = readCapacityUnits
            self.writeCapacityUnits = writeCapacityUnits
        }
    }

}

extension DynamoDBClientTypes {
    /// The capacity units consumed by an operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. ConsumedCapacity is only returned if the request asked for it. For more information, see [Provisioned capacity mode](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/provisioned-capacity-mode.html) in the Amazon DynamoDB Developer Guide.
    public struct ConsumedCapacity {
        /// The total number of capacity units consumed by the operation.
        public var capacityUnits: Swift.Double?
        /// The amount of throughput consumed on each global index affected by the operation.
        public var globalSecondaryIndexes: [Swift.String: DynamoDBClientTypes.Capacity]?
        /// The amount of throughput consumed on each local index affected by the operation.
        public var localSecondaryIndexes: [Swift.String: DynamoDBClientTypes.Capacity]?
        /// The total number of read capacity units consumed by the operation.
        public var readCapacityUnits: Swift.Double?
        /// The amount of throughput consumed on the table affected by the operation.
        public var table: DynamoDBClientTypes.Capacity?
        /// The name of the table that was affected by the operation. If you had specified the Amazon Resource Name (ARN) of a table in the input, you'll see the table ARN in the response.
        public var tableName: Swift.String?
        /// The total number of write capacity units consumed by the operation.
        public var writeCapacityUnits: Swift.Double?

        public init(
            capacityUnits: Swift.Double? = nil,
            globalSecondaryIndexes: [Swift.String: DynamoDBClientTypes.Capacity]? = nil,
            localSecondaryIndexes: [Swift.String: DynamoDBClientTypes.Capacity]? = nil,
            readCapacityUnits: Swift.Double? = nil,
            table: DynamoDBClientTypes.Capacity? = nil,
            tableName: Swift.String? = nil,
            writeCapacityUnits: Swift.Double? = nil
        )
        {
            self.capacityUnits = capacityUnits
            self.globalSecondaryIndexes = globalSecondaryIndexes
            self.localSecondaryIndexes = localSecondaryIndexes
            self.readCapacityUnits = readCapacityUnits
            self.table = table
            self.tableName = tableName
            self.writeCapacityUnits = writeCapacityUnits
        }
    }

}

extension DynamoDBClientTypes {

    public enum BatchStatementErrorCodeEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accessdenied
        case conditionalcheckfailed
        case duplicateitem
        case internalservererror
        case itemcollectionsizelimitexceeded
        case provisionedthroughputexceeded
        case requestlimitexceeded
        case resourcenotfound
        case throttlingerror
        case transactionconflict
        case validationerror
        case sdkUnknown(Swift.String)

        public static var allCases: [BatchStatementErrorCodeEnum] {
            return [
                .accessdenied,
                .conditionalcheckfailed,
                .duplicateitem,
                .internalservererror,
                .itemcollectionsizelimitexceeded,
                .provisionedthroughputexceeded,
                .requestlimitexceeded,
                .resourcenotfound,
                .throttlingerror,
                .transactionconflict,
                .validationerror
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accessdenied: return "AccessDenied"
            case .conditionalcheckfailed: return "ConditionalCheckFailed"
            case .duplicateitem: return "DuplicateItem"
            case .internalservererror: return "InternalServerError"
            case .itemcollectionsizelimitexceeded: return "ItemCollectionSizeLimitExceeded"
            case .provisionedthroughputexceeded: return "ProvisionedThroughputExceeded"
            case .requestlimitexceeded: return "RequestLimitExceeded"
            case .resourcenotfound: return "ResourceNotFound"
            case .throttlingerror: return "ThrottlingError"
            case .transactionconflict: return "TransactionConflict"
            case .validationerror: return "ValidationError"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct InvalidEndpointException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidEndpointException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Your request rate is too high. The Amazon Web Services SDKs for DynamoDB automatically retry requests that receive this exception. Your request is eventually successful, unless your retry queue is too large to finish. Reduce the frequency of requests and use exponential backoff. For more information, go to [Error Retries and Exponential Backoff](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff) in the Amazon DynamoDB Developer Guide.
public struct ProvisionedThroughputExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// You exceeded your maximum allowed provisioned throughput.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ProvisionedThroughputExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The operation tried to access a nonexistent table or index. The resource might not be specified correctly, or its status might not be ACTIVE.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The resource which is being requested does not exist.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// An item collection is too large. This exception is only returned for tables that have one or more local secondary indexes.
public struct ItemCollectionSizeLimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The total size of an item collection has exceeded the maximum limit of 10 gigabytes.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ItemCollectionSizeLimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension DynamoDBClientTypes {

    public enum ReturnItemCollectionMetrics: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `none`
        case size
        case sdkUnknown(Swift.String)

        public static var allCases: [ReturnItemCollectionMetrics] {
            return [
                .none,
                .size
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .size: return "SIZE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension DynamoDBClientTypes {
    /// Contains the details for the read/write capacity mode. This page talks about PROVISIONED and PAY_PER_REQUEST billing modes. For more information about these modes, see [Read/write capacity mode](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html). You may need to switch to on-demand mode at least once in order to return a BillingModeSummary response.
    public struct BillingModeSummary {
        /// Controls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.
        ///
        /// * PROVISIONED - Sets the read/write capacity mode to PROVISIONED. We recommend using PROVISIONED for predictable workloads.
        ///
        /// * PAY_PER_REQUEST - Sets the read/write capacity mode to PAY_PER_REQUEST. We recommend using PAY_PER_REQUEST for unpredictable workloads.
        public var billingMode: DynamoDBClientTypes.BillingMode?
        /// Represents the time when PAY_PER_REQUEST was last set as the read/write capacity mode.
        public var lastUpdateToPayPerRequestDateTime: Foundation.Date?

        public init(
            billingMode: DynamoDBClientTypes.BillingMode? = nil,
            lastUpdateToPayPerRequestDateTime: Foundation.Date? = nil
        )
        {
            self.billingMode = billingMode
            self.lastUpdateToPayPerRequestDateTime = lastUpdateToPayPerRequestDateTime
        }
    }

}

extension DynamoDBClientTypes {

    public enum ComparisonOperator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case beginsWith
        case between
        case contains
        case eq
        case ge
        case gt
        case `in`
        case le
        case lt
        case ne
        case notContains
        case notNull
        case null
        case sdkUnknown(Swift.String)

        public static var allCases: [ComparisonOperator] {
            return [
                .beginsWith,
                .between,
                .contains,
                .eq,
                .ge,
                .gt,
                .in,
                .le,
                .lt,
                .ne,
                .notContains,
                .notNull,
                .null
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .beginsWith: return "BEGINS_WITH"
            case .between: return "BETWEEN"
            case .contains: return "CONTAINS"
            case .eq: return "EQ"
            case .ge: return "GE"
            case .gt: return "GT"
            case .in: return "IN"
            case .le: return "LE"
            case .lt: return "LT"
            case .ne: return "NE"
            case .notContains: return "NOT_CONTAINS"
            case .notNull: return "NOT_NULL"
            case .null: return "NULL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension DynamoDBClientTypes {

    public enum ConditionalOperator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case and
        case or
        case sdkUnknown(Swift.String)

        public static var allCases: [ConditionalOperator] {
            return [
                .and,
                .or
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .and: return "AND"
            case .or: return "OR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension DynamoDBClientTypes {

    public enum ContinuousBackupsStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ContinuousBackupsStatus] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension DynamoDBClientTypes {

    public enum PointInTimeRecoveryStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [PointInTimeRecoveryStatus] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension DynamoDBClientTypes {
    /// The description of the point in time settings applied to the table.
    public struct PointInTimeRecoveryDescription {
        /// Specifies the earliest point in time you can restore your table to. You can restore your table to any point in time during the last 35 days.
        public var earliestRestorableDateTime: Foundation.Date?
        /// LatestRestorableDateTime is typically 5 minutes before the current time.
        public var latestRestorableDateTime: Foundation.Date?
        /// The current state of point in time recovery:
        ///
        /// * ENABLED - Point in time recovery is enabled.
        ///
        /// * DISABLED - Point in time recovery is disabled.
        public var pointInTimeRecoveryStatus: DynamoDBClientTypes.PointInTimeRecoveryStatus?

        public init(
            earliestRestorableDateTime: Foundation.Date? = nil,
            latestRestorableDateTime: Foundation.Date? = nil,
            pointInTimeRecoveryStatus: DynamoDBClientTypes.PointInTimeRecoveryStatus? = nil
        )
        {
            self.earliestRestorableDateTime = earliestRestorableDateTime
            self.latestRestorableDateTime = latestRestorableDateTime
            self.pointInTimeRecoveryStatus = pointInTimeRecoveryStatus
        }
    }

}

extension DynamoDBClientTypes {
    /// Represents the continuous backups and point in time recovery settings on the table.
    public struct ContinuousBackupsDescription {
        /// ContinuousBackupsStatus can be one of the following states: ENABLED, DISABLED
        /// This member is required.
        public var continuousBackupsStatus: DynamoDBClientTypes.ContinuousBackupsStatus?
        /// The description of the point in time recovery settings applied to the table.
        public var pointInTimeRecoveryDescription: DynamoDBClientTypes.PointInTimeRecoveryDescription?

        public init(
            continuousBackupsStatus: DynamoDBClientTypes.ContinuousBackupsStatus? = nil,
            pointInTimeRecoveryDescription: DynamoDBClientTypes.PointInTimeRecoveryDescription? = nil
        )
        {
            self.continuousBackupsStatus = continuousBackupsStatus
            self.pointInTimeRecoveryDescription = pointInTimeRecoveryDescription
        }
    }

}

/// Backups have not yet been enabled for this table.
public struct ContinuousBackupsUnavailableException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ContinuousBackupsUnavailableException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension DynamoDBClientTypes {

    public enum ContributorInsightsAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disable
        case enable
        case sdkUnknown(Swift.String)

        public static var allCases: [ContributorInsightsAction] {
            return [
                .disable,
                .enable
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disable: return "DISABLE"
            case .enable: return "ENABLE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension DynamoDBClientTypes {

    public enum ContributorInsightsStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case disabling
        case enabled
        case enabling
        case failed
        case sdkUnknown(Swift.String)

        public static var allCases: [ContributorInsightsStatus] {
            return [
                .disabled,
                .disabling,
                .enabled,
                .enabling,
                .failed
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .disabling: return "DISABLING"
            case .enabled: return "ENABLED"
            case .enabling: return "ENABLING"
            case .failed: return "FAILED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension DynamoDBClientTypes {
    /// Represents a Contributor Insights summary entry.
    public struct ContributorInsightsSummary {
        /// Describes the current status for contributor insights for the given table and index, if applicable.
        public var contributorInsightsStatus: DynamoDBClientTypes.ContributorInsightsStatus?
        /// Name of the index associated with the summary, if any.
        public var indexName: Swift.String?
        /// Name of the table associated with the summary.
        public var tableName: Swift.String?

        public init(
            contributorInsightsStatus: DynamoDBClientTypes.ContributorInsightsStatus? = nil,
            indexName: Swift.String? = nil,
            tableName: Swift.String? = nil
        )
        {
            self.contributorInsightsStatus = contributorInsightsStatus
            self.indexName = indexName
            self.tableName = tableName
        }
    }

}

/// There is no limit to the number of daily on-demand backups that can be taken. For most purposes, up to 500 simultaneous table operations are allowed per account. These operations include CreateTable, UpdateTable, DeleteTable,UpdateTimeToLive, RestoreTableFromBackup, and RestoreTableToPointInTime. When you are creating a table with one or more secondary indexes, you can have up to 250 such requests running at a time. However, if the table or index specifications are complex, then DynamoDB might temporarily reduce the number of concurrent operations. When importing into DynamoDB, up to 50 simultaneous import table operations are allowed per account. There is a soft account quota of 2,500 tables. GetRecords was called with a value of more than 1000 for the limit request parameter. More than 2 processes are reading from the same streams shard at the same time. Exceeding this limit may result in request throttling.
public struct LimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Too many operations for a given subscriber.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// A target table with the specified name is either being created or deleted.
public struct TableInUseException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TableInUseException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// A source table with the name TableName does not currently exist within the subscriber's account or the subscriber is operating in the wrong Amazon Web Services Region.
public struct TableNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TableNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CreateBackupInput {
    /// Specified name for the backup.
    /// This member is required.
    public var backupName: Swift.String?
    /// The name of the table. You can also provide the Amazon Resource Name (ARN) of the table in this parameter.
    /// This member is required.
    public var tableName: Swift.String?

    public init(
        backupName: Swift.String? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.backupName = backupName
        self.tableName = tableName
    }
}

public struct CreateBackupOutput {
    /// Contains the details of the backup created for the table.
    public var backupDetails: DynamoDBClientTypes.BackupDetails?

    public init(
        backupDetails: DynamoDBClientTypes.BackupDetails? = nil
    )
    {
        self.backupDetails = backupDetails
    }
}

extension DynamoDBClientTypes {
    /// Represents a new global secondary index to be added to an existing table.
    public struct CreateGlobalSecondaryIndexAction {
        /// The name of the global secondary index to be created.
        /// This member is required.
        public var indexName: Swift.String?
        /// The key schema for the global secondary index.
        /// This member is required.
        public var keySchema: [DynamoDBClientTypes.KeySchemaElement]?
        /// The maximum number of read and write units for the global secondary index being created. If you use this parameter, you must specify MaxReadRequestUnits, MaxWriteRequestUnits, or both.
        public var onDemandThroughput: DynamoDBClientTypes.OnDemandThroughput?
        /// Represents attributes that are copied (projected) from the table into an index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
        /// This member is required.
        public var projection: DynamoDBClientTypes.Projection?
        /// Represents the provisioned throughput settings for the specified global secondary index. For current minimum and maximum provisioned throughput values, see [Service, Account, and Table Quotas](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html) in the Amazon DynamoDB Developer Guide.
        public var provisionedThroughput: DynamoDBClientTypes.ProvisionedThroughput?

        public init(
            indexName: Swift.String? = nil,
            keySchema: [DynamoDBClientTypes.KeySchemaElement]? = nil,
            onDemandThroughput: DynamoDBClientTypes.OnDemandThroughput? = nil,
            projection: DynamoDBClientTypes.Projection? = nil,
            provisionedThroughput: DynamoDBClientTypes.ProvisionedThroughput? = nil
        )
        {
            self.indexName = indexName
            self.keySchema = keySchema
            self.onDemandThroughput = onDemandThroughput
            self.projection = projection
            self.provisionedThroughput = provisionedThroughput
        }
    }

}

/// The specified global table already exists.
public struct GlobalTableAlreadyExistsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "GlobalTableAlreadyExistsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension DynamoDBClientTypes {
    /// Represents the properties of a replica.
    public struct Replica {
        /// The Region where the replica needs to be created.
        public var regionName: Swift.String?

        public init(
            regionName: Swift.String? = nil
        )
        {
            self.regionName = regionName
        }
    }

}

public struct CreateGlobalTableInput {
    /// The global table name.
    /// This member is required.
    public var globalTableName: Swift.String?
    /// The Regions where the global table needs to be created.
    /// This member is required.
    public var replicationGroup: [DynamoDBClientTypes.Replica]?

    public init(
        globalTableName: Swift.String? = nil,
        replicationGroup: [DynamoDBClientTypes.Replica]? = nil
    )
    {
        self.globalTableName = globalTableName
        self.replicationGroup = replicationGroup
    }
}

extension DynamoDBClientTypes {

    public enum GlobalTableStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case creating
        case deleting
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [GlobalTableStatus] {
            return [
                .active,
                .creating,
                .deleting,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension DynamoDBClientTypes {
    /// Overrides the on-demand throughput settings for this replica table. If you don't specify a value for this parameter, it uses the source table's on-demand throughput settings.
    public struct OnDemandThroughputOverride {
        /// Maximum number of read request units for the specified replica table.
        public var maxReadRequestUnits: Swift.Int?

        public init(
            maxReadRequestUnits: Swift.Int? = nil
        )
        {
            self.maxReadRequestUnits = maxReadRequestUnits
        }
    }

}

extension DynamoDBClientTypes {
    /// Replica-specific provisioned throughput settings. If not specified, uses the source table's provisioned throughput settings.
    public struct ProvisionedThroughputOverride {
        /// Replica-specific read capacity units. If not specified, uses the source table's read capacity settings.
        public var readCapacityUnits: Swift.Int?

        public init(
            readCapacityUnits: Swift.Int? = nil
        )
        {
            self.readCapacityUnits = readCapacityUnits
        }
    }

}

extension DynamoDBClientTypes {
    /// Represents the properties of a replica global secondary index.
    public struct ReplicaGlobalSecondaryIndexDescription {
        /// The name of the global secondary index.
        public var indexName: Swift.String?
        /// Overrides the maximum on-demand throughput for the specified global secondary index in the specified replica table.
        public var onDemandThroughputOverride: DynamoDBClientTypes.OnDemandThroughputOverride?
        /// If not described, uses the source table GSI's read capacity settings.
        public var provisionedThroughputOverride: DynamoDBClientTypes.ProvisionedThroughputOverride?

        public init(
            indexName: Swift.String? = nil,
            onDemandThroughputOverride: DynamoDBClientTypes.OnDemandThroughputOverride? = nil,
            provisionedThroughputOverride: DynamoDBClientTypes.ProvisionedThroughputOverride? = nil
        )
        {
            self.indexName = indexName
            self.onDemandThroughputOverride = onDemandThroughputOverride
            self.provisionedThroughputOverride = provisionedThroughputOverride
        }
    }

}

extension DynamoDBClientTypes {

    public enum ReplicaStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case creating
        case creationFailed
        case deleting
        case inaccessibleEncryptionCredentials
        case regionDisabled
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [ReplicaStatus] {
            return [
                .active,
                .creating,
                .creationFailed,
                .deleting,
                .inaccessibleEncryptionCredentials,
                .regionDisabled,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .creationFailed: return "CREATION_FAILED"
            case .deleting: return "DELETING"
            case .inaccessibleEncryptionCredentials: return "INACCESSIBLE_ENCRYPTION_CREDENTIALS"
            case .regionDisabled: return "REGION_DISABLED"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension DynamoDBClientTypes {

    public enum TableClass: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case standard
        case standardInfrequentAccess
        case sdkUnknown(Swift.String)

        public static var allCases: [TableClass] {
            return [
                .standard,
                .standardInfrequentAccess
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .standard: return "STANDARD"
            case .standardInfrequentAccess: return "STANDARD_INFREQUENT_ACCESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension DynamoDBClientTypes {
    /// Contains details of the table class.
    public struct TableClassSummary {
        /// The date and time at which the table class was last updated.
        public var lastUpdateDateTime: Foundation.Date?
        /// The table class of the specified table. Valid values are STANDARD and STANDARD_INFREQUENT_ACCESS.
        public var tableClass: DynamoDBClientTypes.TableClass?

        public init(
            lastUpdateDateTime: Foundation.Date? = nil,
            tableClass: DynamoDBClientTypes.TableClass? = nil
        )
        {
            self.lastUpdateDateTime = lastUpdateDateTime
            self.tableClass = tableClass
        }
    }

}

extension DynamoDBClientTypes {
    /// Contains the details of the replica.
    public struct ReplicaDescription {
        /// Replica-specific global secondary index settings.
        public var globalSecondaryIndexes: [DynamoDBClientTypes.ReplicaGlobalSecondaryIndexDescription]?
        /// The KMS key of the replica that will be used for KMS encryption.
        public var kmsMasterKeyId: Swift.String?
        /// Overrides the maximum on-demand throughput settings for the specified replica table.
        public var onDemandThroughputOverride: DynamoDBClientTypes.OnDemandThroughputOverride?
        /// Replica-specific provisioned throughput. If not described, uses the source table's provisioned throughput settings.
        public var provisionedThroughputOverride: DynamoDBClientTypes.ProvisionedThroughputOverride?
        /// The name of the Region.
        public var regionName: Swift.String?
        /// The time at which the replica was first detected as inaccessible. To determine cause of inaccessibility check the ReplicaStatus property.
        public var replicaInaccessibleDateTime: Foundation.Date?
        /// The current state of the replica:
        ///
        /// * CREATING - The replica is being created.
        ///
        /// * UPDATING - The replica is being updated.
        ///
        /// * DELETING - The replica is being deleted.
        ///
        /// * ACTIVE - The replica is ready for use.
        ///
        /// * REGION_DISABLED - The replica is inaccessible because the Amazon Web Services Region has been disabled. If the Amazon Web Services Region remains inaccessible for more than 20 hours, DynamoDB will remove this replica from the replication group. The replica will not be deleted and replication will stop from and to this region.
        ///
        /// * INACCESSIBLE_ENCRYPTION_CREDENTIALS  - The KMS key used to encrypt the table is inaccessible. If the KMS key remains inaccessible for more than 20 hours, DynamoDB will remove this replica from the replication group. The replica will not be deleted and replication will stop from and to this region.
        public var replicaStatus: DynamoDBClientTypes.ReplicaStatus?
        /// Detailed information about the replica status.
        public var replicaStatusDescription: Swift.String?
        /// Specifies the progress of a Create, Update, or Delete action on the replica as a percentage.
        public var replicaStatusPercentProgress: Swift.String?
        /// Contains details of the table class.
        public var replicaTableClassSummary: DynamoDBClientTypes.TableClassSummary?

        public init(
            globalSecondaryIndexes: [DynamoDBClientTypes.ReplicaGlobalSecondaryIndexDescription]? = nil,
            kmsMasterKeyId: Swift.String? = nil,
            onDemandThroughputOverride: DynamoDBClientTypes.OnDemandThroughputOverride? = nil,
            provisionedThroughputOverride: DynamoDBClientTypes.ProvisionedThroughputOverride? = nil,
            regionName: Swift.String? = nil,
            replicaInaccessibleDateTime: Foundation.Date? = nil,
            replicaStatus: DynamoDBClientTypes.ReplicaStatus? = nil,
            replicaStatusDescription: Swift.String? = nil,
            replicaStatusPercentProgress: Swift.String? = nil,
            replicaTableClassSummary: DynamoDBClientTypes.TableClassSummary? = nil
        )
        {
            self.globalSecondaryIndexes = globalSecondaryIndexes
            self.kmsMasterKeyId = kmsMasterKeyId
            self.onDemandThroughputOverride = onDemandThroughputOverride
            self.provisionedThroughputOverride = provisionedThroughputOverride
            self.regionName = regionName
            self.replicaInaccessibleDateTime = replicaInaccessibleDateTime
            self.replicaStatus = replicaStatus
            self.replicaStatusDescription = replicaStatusDescription
            self.replicaStatusPercentProgress = replicaStatusPercentProgress
            self.replicaTableClassSummary = replicaTableClassSummary
        }
    }

}

extension DynamoDBClientTypes {
    /// Contains details about the global table.
    public struct GlobalTableDescription {
        /// The creation time of the global table.
        public var creationDateTime: Foundation.Date?
        /// The unique identifier of the global table.
        public var globalTableArn: Swift.String?
        /// The global table name.
        public var globalTableName: Swift.String?
        /// The current state of the global table:
        ///
        /// * CREATING - The global table is being created.
        ///
        /// * UPDATING - The global table is being updated.
        ///
        /// * DELETING - The global table is being deleted.
        ///
        /// * ACTIVE - The global table is ready for use.
        public var globalTableStatus: DynamoDBClientTypes.GlobalTableStatus?
        /// The Regions where the global table has replicas.
        public var replicationGroup: [DynamoDBClientTypes.ReplicaDescription]?

        public init(
            creationDateTime: Foundation.Date? = nil,
            globalTableArn: Swift.String? = nil,
            globalTableName: Swift.String? = nil,
            globalTableStatus: DynamoDBClientTypes.GlobalTableStatus? = nil,
            replicationGroup: [DynamoDBClientTypes.ReplicaDescription]? = nil
        )
        {
            self.creationDateTime = creationDateTime
            self.globalTableArn = globalTableArn
            self.globalTableName = globalTableName
            self.globalTableStatus = globalTableStatus
            self.replicationGroup = replicationGroup
        }
    }

}

public struct CreateGlobalTableOutput {
    /// Contains the details of the global table.
    public var globalTableDescription: DynamoDBClientTypes.GlobalTableDescription?

    public init(
        globalTableDescription: DynamoDBClientTypes.GlobalTableDescription? = nil
    )
    {
        self.globalTableDescription = globalTableDescription
    }
}

extension DynamoDBClientTypes {
    /// Represents a replica to be added.
    public struct CreateReplicaAction {
        /// The Region of the replica to be added.
        /// This member is required.
        public var regionName: Swift.String?

        public init(
            regionName: Swift.String? = nil
        )
        {
            self.regionName = regionName
        }
    }

}

extension DynamoDBClientTypes {
    /// Represents the properties of a replica global secondary index.
    public struct ReplicaGlobalSecondaryIndex {
        /// The name of the global secondary index.
        /// This member is required.
        public var indexName: Swift.String?
        /// Overrides the maximum on-demand throughput settings for the specified global secondary index in the specified replica table.
        public var onDemandThroughputOverride: DynamoDBClientTypes.OnDemandThroughputOverride?
        /// Replica table GSI-specific provisioned throughput. If not specified, uses the source table GSI's read capacity settings.
        public var provisionedThroughputOverride: DynamoDBClientTypes.ProvisionedThroughputOverride?

        public init(
            indexName: Swift.String? = nil,
            onDemandThroughputOverride: DynamoDBClientTypes.OnDemandThroughputOverride? = nil,
            provisionedThroughputOverride: DynamoDBClientTypes.ProvisionedThroughputOverride? = nil
        )
        {
            self.indexName = indexName
            self.onDemandThroughputOverride = onDemandThroughputOverride
            self.provisionedThroughputOverride = provisionedThroughputOverride
        }
    }

}

extension DynamoDBClientTypes {
    /// Represents a replica to be created.
    public struct CreateReplicationGroupMemberAction {
        /// Replica-specific global secondary index settings.
        public var globalSecondaryIndexes: [DynamoDBClientTypes.ReplicaGlobalSecondaryIndex]?
        /// The KMS key that should be used for KMS encryption in the new replica. To specify a key, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. Note that you should only provide this parameter if the key is different from the default DynamoDB KMS key alias/aws/dynamodb.
        public var kmsMasterKeyId: Swift.String?
        /// The maximum on-demand throughput settings for the specified replica table being created. You can only modify MaxReadRequestUnits, because you can't modify MaxWriteRequestUnits for individual replica tables.
        public var onDemandThroughputOverride: DynamoDBClientTypes.OnDemandThroughputOverride?
        /// Replica-specific provisioned throughput. If not specified, uses the source table's provisioned throughput settings.
        public var provisionedThroughputOverride: DynamoDBClientTypes.ProvisionedThroughputOverride?
        /// The Region where the new replica will be created.
        /// This member is required.
        public var regionName: Swift.String?
        /// Replica-specific table class. If not specified, uses the source table's table class.
        public var tableClassOverride: DynamoDBClientTypes.TableClass?

        public init(
            globalSecondaryIndexes: [DynamoDBClientTypes.ReplicaGlobalSecondaryIndex]? = nil,
            kmsMasterKeyId: Swift.String? = nil,
            onDemandThroughputOverride: DynamoDBClientTypes.OnDemandThroughputOverride? = nil,
            provisionedThroughputOverride: DynamoDBClientTypes.ProvisionedThroughputOverride? = nil,
            regionName: Swift.String? = nil,
            tableClassOverride: DynamoDBClientTypes.TableClass? = nil
        )
        {
            self.globalSecondaryIndexes = globalSecondaryIndexes
            self.kmsMasterKeyId = kmsMasterKeyId
            self.onDemandThroughputOverride = onDemandThroughputOverride
            self.provisionedThroughputOverride = provisionedThroughputOverride
            self.regionName = regionName
            self.tableClassOverride = tableClassOverride
        }
    }

}

/// The operation conflicts with the resource's availability. For example:
///
/// * You attempted to recreate an existing table.
///
/// * You tried to delete a table currently in the CREATING state.
///
/// * You tried to update a resource that was already being updated.
///
///
/// When appropriate, wait for the ongoing update to complete and attempt the request again.
public struct ResourceInUseException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The resource which is being attempted to be changed is in use.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceInUseException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension DynamoDBClientTypes {
    /// Represents the properties of a global secondary index.
    public struct GlobalSecondaryIndex {
        /// The name of the global secondary index. The name must be unique among all other indexes on this table.
        /// This member is required.
        public var indexName: Swift.String?
        /// The complete key schema for a global secondary index, which consists of one or more pairs of attribute names and key types:
        ///
        /// * HASH - partition key
        ///
        /// * RANGE - sort key
        ///
        ///
        /// The partition key of an item is also known as its hash attribute. The term "hash attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values. The sort key of an item is also known as its range attribute. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.
        /// This member is required.
        public var keySchema: [DynamoDBClientTypes.KeySchemaElement]?
        /// The maximum number of read and write units for the specified global secondary index. If you use this parameter, you must specify MaxReadRequestUnits, MaxWriteRequestUnits, or both.
        public var onDemandThroughput: DynamoDBClientTypes.OnDemandThroughput?
        /// Represents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
        /// This member is required.
        public var projection: DynamoDBClientTypes.Projection?
        /// Represents the provisioned throughput settings for the specified global secondary index. For current minimum and maximum provisioned throughput values, see [Service, Account, and Table Quotas](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html) in the Amazon DynamoDB Developer Guide.
        public var provisionedThroughput: DynamoDBClientTypes.ProvisionedThroughput?

        public init(
            indexName: Swift.String? = nil,
            keySchema: [DynamoDBClientTypes.KeySchemaElement]? = nil,
            onDemandThroughput: DynamoDBClientTypes.OnDemandThroughput? = nil,
            projection: DynamoDBClientTypes.Projection? = nil,
            provisionedThroughput: DynamoDBClientTypes.ProvisionedThroughput? = nil
        )
        {
            self.indexName = indexName
            self.keySchema = keySchema
            self.onDemandThroughput = onDemandThroughput
            self.projection = projection
            self.provisionedThroughput = provisionedThroughput
        }
    }

}

extension DynamoDBClientTypes {
    /// Represents the properties of a local secondary index.
    public struct LocalSecondaryIndex {
        /// The name of the local secondary index. The name must be unique among all other indexes on this table.
        /// This member is required.
        public var indexName: Swift.String?
        /// The complete key schema for the local secondary index, consisting of one or more pairs of attribute names and key types:
        ///
        /// * HASH - partition key
        ///
        /// * RANGE - sort key
        ///
        ///
        /// The partition key of an item is also known as its hash attribute. The term "hash attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values. The sort key of an item is also known as its range attribute. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.
        /// This member is required.
        public var keySchema: [DynamoDBClientTypes.KeySchemaElement]?
        /// Represents attributes that are copied (projected) from the table into the local secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
        /// This member is required.
        public var projection: DynamoDBClientTypes.Projection?

        public init(
            indexName: Swift.String? = nil,
            keySchema: [DynamoDBClientTypes.KeySchemaElement]? = nil,
            projection: DynamoDBClientTypes.Projection? = nil
        )
        {
            self.indexName = indexName
            self.keySchema = keySchema
            self.projection = projection
        }
    }

}

extension DynamoDBClientTypes {
    /// Represents the settings used to enable server-side encryption.
    public struct SSESpecification {
        /// Indicates whether server-side encryption is done using an Amazon Web Services managed key or an Amazon Web Services owned key. If enabled (true), server-side encryption type is set to KMS and an Amazon Web Services managed key is used (KMS charges apply). If disabled (false) or not specified, server-side encryption is set to Amazon Web Services owned key.
        public var enabled: Swift.Bool?
        /// The KMS key that should be used for the KMS encryption. To specify a key, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. Note that you should only provide this parameter if the key is different from the default DynamoDB key alias/aws/dynamodb.
        public var kmsMasterKeyId: Swift.String?
        /// Server-side encryption type. The only supported value is:
        ///
        /// * KMS - Server-side encryption that uses Key Management Service. The key is stored in your account and is managed by KMS (KMS charges apply).
        public var sseType: DynamoDBClientTypes.SSEType?

        public init(
            enabled: Swift.Bool? = nil,
            kmsMasterKeyId: Swift.String? = nil,
            sseType: DynamoDBClientTypes.SSEType? = nil
        )
        {
            self.enabled = enabled
            self.kmsMasterKeyId = kmsMasterKeyId
            self.sseType = sseType
        }
    }

}

extension DynamoDBClientTypes {
    /// Describes a tag. A tag is a key-value pair. You can add up to 50 tags to a single DynamoDB table. Amazon Web Services-assigned tag names and values are automatically assigned the aws: prefix, which the user cannot assign. Amazon Web Services-assigned tag names do not count towards the tag limit of 50. User-assigned tag names have the prefix user: in the Cost Allocation Report. You cannot backdate the application of a tag. For an overview on tagging DynamoDB resources, see [Tagging for DynamoDB](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html) in the Amazon DynamoDB Developer Guide.
    public struct Tag {
        /// The key of the tag. Tag keys are case sensitive. Each DynamoDB table can only have up to one tag with the same key. If you try to add an existing tag (same key), the existing tag value will be updated to the new value.
        /// This member is required.
        public var key: Swift.String?
        /// The value of the tag. Tag values are case-sensitive and can be null.
        /// This member is required.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

/// Represents the input of a CreateTable operation.
public struct CreateTableInput {
    /// An array of attributes that describe the key schema for the table and indexes.
    /// This member is required.
    public var attributeDefinitions: [DynamoDBClientTypes.AttributeDefinition]?
    /// Controls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.
    ///
    /// * PROVISIONED - We recommend using PROVISIONED for predictable workloads. PROVISIONED sets the billing mode to [Provisioned capacity mode](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/provisioned-capacity-mode.html).
    ///
    /// * PAY_PER_REQUEST - We recommend using PAY_PER_REQUEST for unpredictable workloads. PAY_PER_REQUEST sets the billing mode to [On-demand capacity mode](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/on-demand-capacity-mode.html).
    public var billingMode: DynamoDBClientTypes.BillingMode?
    /// Indicates whether deletion protection is to be enabled (true) or disabled (false) on the table.
    public var deletionProtectionEnabled: Swift.Bool?
    /// One or more global secondary indexes (the maximum is 20) to be created on the table. Each global secondary index in the array includes the following:
    ///
    /// * IndexName - The name of the global secondary index. Must be unique only for this table.
    ///
    /// * KeySchema - Specifies the key schema for the global secondary index.
    ///
    /// * Projection - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:
    ///
    /// * ProjectionType - One of the following:
    ///
    /// * KEYS_ONLY - Only the index and primary keys are projected into the index.
    ///
    /// * INCLUDE - Only the specified table attributes are projected into the index. The list of projected attributes is in NonKeyAttributes.
    ///
    /// * ALL - All of the table attributes are projected into the index.
    ///
    ///
    ///
    ///
    /// * NonKeyAttributes - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes provided in NonKeyAttributes, summed across all of the secondary indexes, must not exceed 100. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.
    ///
    ///
    ///
    ///
    /// * ProvisionedThroughput - The provisioned throughput settings for the global secondary index, consisting of read and write capacity units.
    public var globalSecondaryIndexes: [DynamoDBClientTypes.GlobalSecondaryIndex]?
    /// Specifies the attributes that make up the primary key for a table or an index. The attributes in KeySchema must also be defined in the AttributeDefinitions array. For more information, see [Data Model](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html) in the Amazon DynamoDB Developer Guide. Each KeySchemaElement in the array is composed of:
    ///
    /// * AttributeName - The name of this key attribute.
    ///
    /// * KeyType - The role that the key attribute will assume:
    ///
    /// * HASH - partition key
    ///
    /// * RANGE - sort key
    ///
    ///
    ///
    ///
    ///
    /// The partition key of an item is also known as its hash attribute. The term "hash attribute" derives from the DynamoDB usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values. The sort key of an item is also known as its range attribute. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value. For a simple primary key (partition key), you must provide exactly one element with a KeyType of HASH. For a composite primary key (partition key and sort key), you must provide exactly two elements, in this order: The first element must have a KeyType of HASH, and the second element must have a KeyType of RANGE. For more information, see [Working with Tables](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#WorkingWithTables.primary.key) in the Amazon DynamoDB Developer Guide.
    /// This member is required.
    public var keySchema: [DynamoDBClientTypes.KeySchemaElement]?
    /// One or more local secondary indexes (the maximum is 5) to be created on the table. Each index is scoped to a given partition key value. There is a 10 GB size limit per partition key value; otherwise, the size of a local secondary index is unconstrained. Each local secondary index in the array includes the following:
    ///
    /// * IndexName - The name of the local secondary index. Must be unique only for this table.
    ///
    /// * KeySchema - Specifies the key schema for the local secondary index. The key schema must begin with the same partition key as the table.
    ///
    /// * Projection - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:
    ///
    /// * ProjectionType - One of the following:
    ///
    /// * KEYS_ONLY - Only the index and primary keys are projected into the index.
    ///
    /// * INCLUDE - Only the specified table attributes are projected into the index. The list of projected attributes is in NonKeyAttributes.
    ///
    /// * ALL - All of the table attributes are projected into the index.
    ///
    ///
    ///
    ///
    /// * NonKeyAttributes - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes provided in NonKeyAttributes, summed across all of the secondary indexes, must not exceed 100. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.
    public var localSecondaryIndexes: [DynamoDBClientTypes.LocalSecondaryIndex]?
    /// Sets the maximum number of read and write units for the specified table in on-demand capacity mode. If you use this parameter, you must specify MaxReadRequestUnits, MaxWriteRequestUnits, or both.
    public var onDemandThroughput: DynamoDBClientTypes.OnDemandThroughput?
    /// Represents the provisioned throughput settings for a specified table or index. The settings can be modified using the UpdateTable operation. If you set BillingMode as PROVISIONED, you must specify this property. If you set BillingMode as PAY_PER_REQUEST, you cannot specify this property. For current minimum and maximum provisioned throughput values, see [Service, Account, and Table Quotas](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html) in the Amazon DynamoDB Developer Guide.
    public var provisionedThroughput: DynamoDBClientTypes.ProvisionedThroughput?
    /// An Amazon Web Services resource-based policy document in JSON format that will be attached to the table. When you attach a resource-based policy while creating a table, the policy application is strongly consistent. The maximum size supported for a resource-based policy document is 20 KB. DynamoDB counts whitespaces when calculating the size of a policy against this limit. For a full list of all considerations that apply for resource-based policies, see [Resource-based policy considerations](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-considerations.html). You need to specify the CreateTable and PutResourcePolicy IAM actions for authorizing a user to create a table with a resource-based policy.
    public var resourcePolicy: Swift.String?
    /// Represents the settings used to enable server-side encryption.
    public var sseSpecification: DynamoDBClientTypes.SSESpecification?
    /// The settings for DynamoDB Streams on the table. These settings consist of:
    ///
    /// * StreamEnabled - Indicates whether DynamoDB Streams is to be enabled (true) or disabled (false).
    ///
    /// * StreamViewType - When an item in the table is modified, StreamViewType determines what information is written to the table's stream. Valid values for StreamViewType are:
    ///
    /// * KEYS_ONLY - Only the key attributes of the modified item are written to the stream.
    ///
    /// * NEW_IMAGE - The entire item, as it appears after it was modified, is written to the stream.
    ///
    /// * OLD_IMAGE - The entire item, as it appeared before it was modified, is written to the stream.
    ///
    /// * NEW_AND_OLD_IMAGES - Both the new and the old item images of the item are written to the stream.
    public var streamSpecification: DynamoDBClientTypes.StreamSpecification?
    /// The table class of the new table. Valid values are STANDARD and STANDARD_INFREQUENT_ACCESS.
    public var tableClass: DynamoDBClientTypes.TableClass?
    /// The name of the table to create. You can also provide the Amazon Resource Name (ARN) of the table in this parameter.
    /// This member is required.
    public var tableName: Swift.String?
    /// A list of key-value pairs to label the table. For more information, see [Tagging for DynamoDB](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html).
    public var tags: [DynamoDBClientTypes.Tag]?

    public init(
        attributeDefinitions: [DynamoDBClientTypes.AttributeDefinition]? = nil,
        billingMode: DynamoDBClientTypes.BillingMode? = nil,
        deletionProtectionEnabled: Swift.Bool? = nil,
        globalSecondaryIndexes: [DynamoDBClientTypes.GlobalSecondaryIndex]? = nil,
        keySchema: [DynamoDBClientTypes.KeySchemaElement]? = nil,
        localSecondaryIndexes: [DynamoDBClientTypes.LocalSecondaryIndex]? = nil,
        onDemandThroughput: DynamoDBClientTypes.OnDemandThroughput? = nil,
        provisionedThroughput: DynamoDBClientTypes.ProvisionedThroughput? = nil,
        resourcePolicy: Swift.String? = nil,
        sseSpecification: DynamoDBClientTypes.SSESpecification? = nil,
        streamSpecification: DynamoDBClientTypes.StreamSpecification? = nil,
        tableClass: DynamoDBClientTypes.TableClass? = nil,
        tableName: Swift.String? = nil,
        tags: [DynamoDBClientTypes.Tag]? = nil
    )
    {
        self.attributeDefinitions = attributeDefinitions
        self.billingMode = billingMode
        self.deletionProtectionEnabled = deletionProtectionEnabled
        self.globalSecondaryIndexes = globalSecondaryIndexes
        self.keySchema = keySchema
        self.localSecondaryIndexes = localSecondaryIndexes
        self.onDemandThroughput = onDemandThroughput
        self.provisionedThroughput = provisionedThroughput
        self.resourcePolicy = resourcePolicy
        self.sseSpecification = sseSpecification
        self.streamSpecification = streamSpecification
        self.tableClass = tableClass
        self.tableName = tableName
        self.tags = tags
    }
}

extension DynamoDBClientTypes {

    public enum IndexStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case creating
        case deleting
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [IndexStatus] {
            return [
                .active,
                .creating,
                .deleting,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension DynamoDBClientTypes {
    /// Represents the provisioned throughput settings for the table, consisting of read and write capacity units, along with data about increases and decreases.
    public struct ProvisionedThroughputDescription {
        /// The date and time of the last provisioned throughput decrease for this table.
        public var lastDecreaseDateTime: Foundation.Date?
        /// The date and time of the last provisioned throughput increase for this table.
        public var lastIncreaseDateTime: Foundation.Date?
        /// The number of provisioned throughput decreases for this table during this UTC calendar day. For current maximums on provisioned throughput decreases, see [Service, Account, and Table Quotas](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html) in the Amazon DynamoDB Developer Guide.
        public var numberOfDecreasesToday: Swift.Int?
        /// The maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException. Eventually consistent reads require less effort than strongly consistent reads, so a setting of 50 ReadCapacityUnits per second provides 100 eventually consistent ReadCapacityUnits per second.
        public var readCapacityUnits: Swift.Int?
        /// The maximum number of writes consumed per second before DynamoDB returns a ThrottlingException.
        public var writeCapacityUnits: Swift.Int?

        public init(
            lastDecreaseDateTime: Foundation.Date? = nil,
            lastIncreaseDateTime: Foundation.Date? = nil,
            numberOfDecreasesToday: Swift.Int? = nil,
            readCapacityUnits: Swift.Int? = nil,
            writeCapacityUnits: Swift.Int? = nil
        )
        {
            self.lastDecreaseDateTime = lastDecreaseDateTime
            self.lastIncreaseDateTime = lastIncreaseDateTime
            self.numberOfDecreasesToday = numberOfDecreasesToday
            self.readCapacityUnits = readCapacityUnits
            self.writeCapacityUnits = writeCapacityUnits
        }
    }

}

extension DynamoDBClientTypes {
    /// Represents the properties of a global secondary index.
    public struct GlobalSecondaryIndexDescription {
        /// Indicates whether the index is currently backfilling. Backfilling is the process of reading items from the table and determining whether they can be added to the index. (Not all items will qualify: For example, a partition key cannot have any duplicate values.) If an item can be added to the index, DynamoDB will do so. After all items have been processed, the backfilling operation is complete and Backfilling is false. You can delete an index that is being created during the Backfilling phase when IndexStatus is set to CREATING and Backfilling is true. You can't delete the index that is being created when IndexStatus is set to CREATING and Backfilling is false. For indexes that were created during a CreateTable operation, the Backfilling attribute does not appear in the DescribeTable output.
        public var backfilling: Swift.Bool?
        /// The Amazon Resource Name (ARN) that uniquely identifies the index.
        public var indexArn: Swift.String?
        /// The name of the global secondary index.
        public var indexName: Swift.String?
        /// The total size of the specified index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.
        public var indexSizeBytes: Swift.Int?
        /// The current state of the global secondary index:
        ///
        /// * CREATING - The index is being created.
        ///
        /// * UPDATING - The index is being updated.
        ///
        /// * DELETING - The index is being deleted.
        ///
        /// * ACTIVE - The index is ready for use.
        public var indexStatus: DynamoDBClientTypes.IndexStatus?
        /// The number of items in the specified index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.
        public var itemCount: Swift.Int?
        /// The complete key schema for a global secondary index, which consists of one or more pairs of attribute names and key types:
        ///
        /// * HASH - partition key
        ///
        /// * RANGE - sort key
        ///
        ///
        /// The partition key of an item is also known as its hash attribute. The term "hash attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values. The sort key of an item is also known as its range attribute. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.
        public var keySchema: [DynamoDBClientTypes.KeySchemaElement]?
        /// The maximum number of read and write units for the specified global secondary index. If you use this parameter, you must specify MaxReadRequestUnits, MaxWriteRequestUnits, or both.
        public var onDemandThroughput: DynamoDBClientTypes.OnDemandThroughput?
        /// Represents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
        public var projection: DynamoDBClientTypes.Projection?
        /// Represents the provisioned throughput settings for the specified global secondary index. For current minimum and maximum provisioned throughput values, see [Service, Account, and Table Quotas](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html) in the Amazon DynamoDB Developer Guide.
        public var provisionedThroughput: DynamoDBClientTypes.ProvisionedThroughputDescription?

        public init(
            backfilling: Swift.Bool? = nil,
            indexArn: Swift.String? = nil,
            indexName: Swift.String? = nil,
            indexSizeBytes: Swift.Int? = nil,
            indexStatus: DynamoDBClientTypes.IndexStatus? = nil,
            itemCount: Swift.Int? = nil,
            keySchema: [DynamoDBClientTypes.KeySchemaElement]? = nil,
            onDemandThroughput: DynamoDBClientTypes.OnDemandThroughput? = nil,
            projection: DynamoDBClientTypes.Projection? = nil,
            provisionedThroughput: DynamoDBClientTypes.ProvisionedThroughputDescription? = nil
        )
        {
            self.backfilling = backfilling
            self.indexArn = indexArn
            self.indexName = indexName
            self.indexSizeBytes = indexSizeBytes
            self.indexStatus = indexStatus
            self.itemCount = itemCount
            self.keySchema = keySchema
            self.onDemandThroughput = onDemandThroughput
            self.projection = projection
            self.provisionedThroughput = provisionedThroughput
        }
    }

}

extension DynamoDBClientTypes {
    /// Represents the properties of a local secondary index.
    public struct LocalSecondaryIndexDescription {
        /// The Amazon Resource Name (ARN) that uniquely identifies the index.
        public var indexArn: Swift.String?
        /// Represents the name of the local secondary index.
        public var indexName: Swift.String?
        /// The total size of the specified index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.
        public var indexSizeBytes: Swift.Int?
        /// The number of items in the specified index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.
        public var itemCount: Swift.Int?
        /// The complete key schema for the local secondary index, consisting of one or more pairs of attribute names and key types:
        ///
        /// * HASH - partition key
        ///
        /// * RANGE - sort key
        ///
        ///
        /// The partition key of an item is also known as its hash attribute. The term "hash attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values. The sort key of an item is also known as its range attribute. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.
        public var keySchema: [DynamoDBClientTypes.KeySchemaElement]?
        /// Represents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
        public var projection: DynamoDBClientTypes.Projection?

        public init(
            indexArn: Swift.String? = nil,
            indexName: Swift.String? = nil,
            indexSizeBytes: Swift.Int? = nil,
            itemCount: Swift.Int? = nil,
            keySchema: [DynamoDBClientTypes.KeySchemaElement]? = nil,
            projection: DynamoDBClientTypes.Projection? = nil
        )
        {
            self.indexArn = indexArn
            self.indexName = indexName
            self.indexSizeBytes = indexSizeBytes
            self.itemCount = itemCount
            self.keySchema = keySchema
            self.projection = projection
        }
    }

}

extension DynamoDBClientTypes {
    /// Contains details for the restore.
    public struct RestoreSummary {
        /// Point in time or source backup time.
        /// This member is required.
        public var restoreDateTime: Foundation.Date?
        /// Indicates if a restore is in progress or not.
        /// This member is required.
        public var restoreInProgress: Swift.Bool?
        /// The Amazon Resource Name (ARN) of the backup from which the table was restored.
        public var sourceBackupArn: Swift.String?
        /// The ARN of the source table of the backup that is being restored.
        public var sourceTableArn: Swift.String?

        public init(
            restoreDateTime: Foundation.Date? = nil,
            restoreInProgress: Swift.Bool? = nil,
            sourceBackupArn: Swift.String? = nil,
            sourceTableArn: Swift.String? = nil
        )
        {
            self.restoreDateTime = restoreDateTime
            self.restoreInProgress = restoreInProgress
            self.sourceBackupArn = sourceBackupArn
            self.sourceTableArn = sourceTableArn
        }
    }

}

extension DynamoDBClientTypes {

    public enum TableStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case archived
        case archiving
        case creating
        case deleting
        case inaccessibleEncryptionCredentials
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [TableStatus] {
            return [
                .active,
                .archived,
                .archiving,
                .creating,
                .deleting,
                .inaccessibleEncryptionCredentials,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .archived: return "ARCHIVED"
            case .archiving: return "ARCHIVING"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .inaccessibleEncryptionCredentials: return "INACCESSIBLE_ENCRYPTION_CREDENTIALS"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension DynamoDBClientTypes {
    /// Represents the properties of a table.
    public struct TableDescription {
        /// Contains information about the table archive.
        public var archivalSummary: DynamoDBClientTypes.ArchivalSummary?
        /// An array of AttributeDefinition objects. Each of these objects describes one attribute in the table and index key schema. Each AttributeDefinition object in this array is composed of:
        ///
        /// * AttributeName - The name of the attribute.
        ///
        /// * AttributeType - The data type for the attribute.
        public var attributeDefinitions: [DynamoDBClientTypes.AttributeDefinition]?
        /// Contains the details for the read/write capacity mode.
        public var billingModeSummary: DynamoDBClientTypes.BillingModeSummary?
        /// The date and time when the table was created, in [UNIX epoch time](http://www.epochconverter.com/) format.
        public var creationDateTime: Foundation.Date?
        /// Indicates whether deletion protection is enabled (true) or disabled (false) on the table.
        public var deletionProtectionEnabled: Swift.Bool?
        /// The global secondary indexes, if any, on the table. Each index is scoped to a given partition key value. Each element is composed of:
        ///
        /// * Backfilling - If true, then the index is currently in the backfilling phase. Backfilling occurs only when a new global secondary index is added to the table. It is the process by which DynamoDB populates the new index with data from the table. (This attribute does not appear for indexes that were created during a CreateTable operation.) You can delete an index that is being created during the Backfilling phase when IndexStatus is set to CREATING and Backfilling is true. You can't delete the index that is being created when IndexStatus is set to CREATING and Backfilling is false. (This attribute does not appear for indexes that were created during a CreateTable operation.)
        ///
        /// * IndexName - The name of the global secondary index.
        ///
        /// * IndexSizeBytes - The total size of the global secondary index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.
        ///
        /// * IndexStatus - The current status of the global secondary index:
        ///
        /// * CREATING - The index is being created.
        ///
        /// * UPDATING - The index is being updated.
        ///
        /// * DELETING - The index is being deleted.
        ///
        /// * ACTIVE - The index is ready for use.
        ///
        ///
        ///
        ///
        /// * ItemCount - The number of items in the global secondary index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.
        ///
        /// * KeySchema - Specifies the complete index key schema. The attribute names in the key schema must be between 1 and 255 characters (inclusive). The key schema must begin with the same partition key as the table.
        ///
        /// * Projection - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:
        ///
        /// * ProjectionType - One of the following:
        ///
        /// * KEYS_ONLY - Only the index and primary keys are projected into the index.
        ///
        /// * INCLUDE - In addition to the attributes described in KEYS_ONLY, the secondary index will include other non-key attributes that you specify.
        ///
        /// * ALL - All of the table attributes are projected into the index.
        ///
        ///
        ///
        ///
        /// * NonKeyAttributes - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes provided in NonKeyAttributes, summed across all of the secondary indexes, must not exceed 100. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.
        ///
        ///
        ///
        ///
        /// * ProvisionedThroughput - The provisioned throughput settings for the global secondary index, consisting of read and write capacity units, along with data about increases and decreases.
        ///
        ///
        /// If the table is in the DELETING state, no information about indexes will be returned.
        public var globalSecondaryIndexes: [DynamoDBClientTypes.GlobalSecondaryIndexDescription]?
        /// Represents the version of [global tables](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GlobalTables.html) in use, if the table is replicated across Amazon Web Services Regions.
        public var globalTableVersion: Swift.String?
        /// The number of items in the specified table. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.
        public var itemCount: Swift.Int?
        /// The primary key structure for the table. Each KeySchemaElement consists of:
        ///
        /// * AttributeName - The name of the attribute.
        ///
        /// * KeyType - The role of the attribute:
        ///
        /// * HASH - partition key
        ///
        /// * RANGE - sort key
        ///
        ///
        /// The partition key of an item is also known as its hash attribute. The term "hash attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values. The sort key of an item is also known as its range attribute. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.
        ///
        ///
        /// For more information about primary keys, see [Primary Key](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey) in the Amazon DynamoDB Developer Guide.
        public var keySchema: [DynamoDBClientTypes.KeySchemaElement]?
        /// The Amazon Resource Name (ARN) that uniquely identifies the latest stream for this table.
        public var latestStreamArn: Swift.String?
        /// A timestamp, in ISO 8601 format, for this stream. Note that LatestStreamLabel is not a unique identifier for the stream, because it is possible that a stream from another table might have the same timestamp. However, the combination of the following three elements is guaranteed to be unique:
        ///
        /// * Amazon Web Services customer ID
        ///
        /// * Table name
        ///
        /// * StreamLabel
        public var latestStreamLabel: Swift.String?
        /// Represents one or more local secondary indexes on the table. Each index is scoped to a given partition key value. Tables with one or more local secondary indexes are subject to an item collection size limit, where the amount of data within a given item collection cannot exceed 10 GB. Each element is composed of:
        ///
        /// * IndexName - The name of the local secondary index.
        ///
        /// * KeySchema - Specifies the complete index key schema. The attribute names in the key schema must be between 1 and 255 characters (inclusive). The key schema must begin with the same partition key as the table.
        ///
        /// * Projection - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:
        ///
        /// * ProjectionType - One of the following:
        ///
        /// * KEYS_ONLY - Only the index and primary keys are projected into the index.
        ///
        /// * INCLUDE - Only the specified table attributes are projected into the index. The list of projected attributes is in NonKeyAttributes.
        ///
        /// * ALL - All of the table attributes are projected into the index.
        ///
        ///
        ///
        ///
        /// * NonKeyAttributes - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes provided in NonKeyAttributes, summed across all of the secondary indexes, must not exceed 100. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.
        ///
        ///
        ///
        ///
        /// * IndexSizeBytes - Represents the total size of the index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.
        ///
        /// * ItemCount - Represents the number of items in the index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.
        ///
        ///
        /// If the table is in the DELETING state, no information about indexes will be returned.
        public var localSecondaryIndexes: [DynamoDBClientTypes.LocalSecondaryIndexDescription]?
        /// The maximum number of read and write units for the specified on-demand table. If you use this parameter, you must specify MaxReadRequestUnits, MaxWriteRequestUnits, or both.
        public var onDemandThroughput: DynamoDBClientTypes.OnDemandThroughput?
        /// The provisioned throughput settings for the table, consisting of read and write capacity units, along with data about increases and decreases.
        public var provisionedThroughput: DynamoDBClientTypes.ProvisionedThroughputDescription?
        /// Represents replicas of the table.
        public var replicas: [DynamoDBClientTypes.ReplicaDescription]?
        /// Contains details for the restore.
        public var restoreSummary: DynamoDBClientTypes.RestoreSummary?
        /// The description of the server-side encryption status on the specified table.
        public var sseDescription: DynamoDBClientTypes.SSEDescription?
        /// The current DynamoDB Streams configuration for the table.
        public var streamSpecification: DynamoDBClientTypes.StreamSpecification?
        /// The Amazon Resource Name (ARN) that uniquely identifies the table.
        public var tableArn: Swift.String?
        /// Contains details of the table class.
        public var tableClassSummary: DynamoDBClientTypes.TableClassSummary?
        /// Unique identifier for the table for which the backup was created.
        public var tableId: Swift.String?
        /// The name of the table.
        public var tableName: Swift.String?
        /// The total size of the specified table, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.
        public var tableSizeBytes: Swift.Int?
        /// The current state of the table:
        ///
        /// * CREATING - The table is being created.
        ///
        /// * UPDATING - The table/index configuration is being updated. The table/index remains available for data operations when UPDATING.
        ///
        /// * DELETING - The table is being deleted.
        ///
        /// * ACTIVE - The table is ready for use.
        ///
        /// * INACCESSIBLE_ENCRYPTION_CREDENTIALS - The KMS key used to encrypt the table in inaccessible. Table operations may fail due to failure to use the KMS key. DynamoDB will initiate the table archival process when a table's KMS key remains inaccessible for more than seven days.
        ///
        /// * ARCHIVING - The table is being archived. Operations are not allowed until archival is complete.
        ///
        /// * ARCHIVED - The table has been archived. See the ArchivalReason for more information.
        public var tableStatus: DynamoDBClientTypes.TableStatus?

        public init(
            archivalSummary: DynamoDBClientTypes.ArchivalSummary? = nil,
            attributeDefinitions: [DynamoDBClientTypes.AttributeDefinition]? = nil,
            billingModeSummary: DynamoDBClientTypes.BillingModeSummary? = nil,
            creationDateTime: Foundation.Date? = nil,
            deletionProtectionEnabled: Swift.Bool? = nil,
            globalSecondaryIndexes: [DynamoDBClientTypes.GlobalSecondaryIndexDescription]? = nil,
            globalTableVersion: Swift.String? = nil,
            itemCount: Swift.Int? = nil,
            keySchema: [DynamoDBClientTypes.KeySchemaElement]? = nil,
            latestStreamArn: Swift.String? = nil,
            latestStreamLabel: Swift.String? = nil,
            localSecondaryIndexes: [DynamoDBClientTypes.LocalSecondaryIndexDescription]? = nil,
            onDemandThroughput: DynamoDBClientTypes.OnDemandThroughput? = nil,
            provisionedThroughput: DynamoDBClientTypes.ProvisionedThroughputDescription? = nil,
            replicas: [DynamoDBClientTypes.ReplicaDescription]? = nil,
            restoreSummary: DynamoDBClientTypes.RestoreSummary? = nil,
            sseDescription: DynamoDBClientTypes.SSEDescription? = nil,
            streamSpecification: DynamoDBClientTypes.StreamSpecification? = nil,
            tableArn: Swift.String? = nil,
            tableClassSummary: DynamoDBClientTypes.TableClassSummary? = nil,
            tableId: Swift.String? = nil,
            tableName: Swift.String? = nil,
            tableSizeBytes: Swift.Int? = nil,
            tableStatus: DynamoDBClientTypes.TableStatus? = nil
        )
        {
            self.archivalSummary = archivalSummary
            self.attributeDefinitions = attributeDefinitions
            self.billingModeSummary = billingModeSummary
            self.creationDateTime = creationDateTime
            self.deletionProtectionEnabled = deletionProtectionEnabled
            self.globalSecondaryIndexes = globalSecondaryIndexes
            self.globalTableVersion = globalTableVersion
            self.itemCount = itemCount
            self.keySchema = keySchema
            self.latestStreamArn = latestStreamArn
            self.latestStreamLabel = latestStreamLabel
            self.localSecondaryIndexes = localSecondaryIndexes
            self.onDemandThroughput = onDemandThroughput
            self.provisionedThroughput = provisionedThroughput
            self.replicas = replicas
            self.restoreSummary = restoreSummary
            self.sseDescription = sseDescription
            self.streamSpecification = streamSpecification
            self.tableArn = tableArn
            self.tableClassSummary = tableClassSummary
            self.tableId = tableId
            self.tableName = tableName
            self.tableSizeBytes = tableSizeBytes
            self.tableStatus = tableStatus
        }
    }

}

/// Represents the output of a CreateTable operation.
public struct CreateTableOutput {
    /// Represents the properties of the table.
    public var tableDescription: DynamoDBClientTypes.TableDescription?

    public init(
        tableDescription: DynamoDBClientTypes.TableDescription? = nil
    )
    {
        self.tableDescription = tableDescription
    }
}

extension DynamoDBClientTypes {
    /// Processing options for the CSV file being imported.
    public struct CsvOptions {
        /// The delimiter used for separating items in the CSV file being imported.
        public var delimiter: Swift.String?
        /// List of the headers used to specify a common header for all source CSV files being imported. If this field is specified then the first line of each CSV file is treated as data instead of the header. If this field is not specified the the first line of each CSV file is treated as the header.
        public var headerList: [Swift.String]?

        public init(
            delimiter: Swift.String? = nil,
            headerList: [Swift.String]? = nil
        )
        {
            self.delimiter = delimiter
            self.headerList = headerList
        }
    }

}

public struct DeleteBackupInput {
    /// The ARN associated with the backup.
    /// This member is required.
    public var backupArn: Swift.String?

    public init(
        backupArn: Swift.String? = nil
    )
    {
        self.backupArn = backupArn
    }
}

public struct DeleteBackupOutput {
    /// Contains the description of the backup created for the table.
    public var backupDescription: DynamoDBClientTypes.BackupDescription?

    public init(
        backupDescription: DynamoDBClientTypes.BackupDescription? = nil
    )
    {
        self.backupDescription = backupDescription
    }
}

extension DynamoDBClientTypes {
    /// Represents a global secondary index to be deleted from an existing table.
    public struct DeleteGlobalSecondaryIndexAction {
        /// The name of the global secondary index to be deleted.
        /// This member is required.
        public var indexName: Swift.String?

        public init(
            indexName: Swift.String? = nil
        )
        {
            self.indexName = indexName
        }
    }

}

/// Operation was rejected because there is an ongoing transaction for the item.
public struct TransactionConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TransactionConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension DynamoDBClientTypes {

    public enum ReturnValue: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case allNew
        case allOld
        case `none`
        case updatedNew
        case updatedOld
        case sdkUnknown(Swift.String)

        public static var allCases: [ReturnValue] {
            return [
                .allNew,
                .allOld,
                .none,
                .updatedNew,
                .updatedOld
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .allNew: return "ALL_NEW"
            case .allOld: return "ALL_OLD"
            case .none: return "NONE"
            case .updatedNew: return "UPDATED_NEW"
            case .updatedOld: return "UPDATED_OLD"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension DynamoDBClientTypes {
    /// Represents a replica to be removed.
    public struct DeleteReplicaAction {
        /// The Region of the replica to be removed.
        /// This member is required.
        public var regionName: Swift.String?

        public init(
            regionName: Swift.String? = nil
        )
        {
            self.regionName = regionName
        }
    }

}

extension DynamoDBClientTypes {
    /// Represents a replica to be deleted.
    public struct DeleteReplicationGroupMemberAction {
        /// The Region where the replica exists.
        /// This member is required.
        public var regionName: Swift.String?

        public init(
            regionName: Swift.String? = nil
        )
        {
            self.regionName = regionName
        }
    }

}

/// The operation tried to access a nonexistent resource-based policy. If you specified an ExpectedRevisionId, it's possible that a policy is present for the resource but its revision ID didn't match the expected value.
public struct PolicyNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "PolicyNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteResourcePolicyInput {
    /// A string value that you can use to conditionally delete your policy. When you provide an expected revision ID, if the revision ID of the existing policy on the resource doesn't match or if there's no policy attached to the resource, the request will fail and return a PolicyNotFoundException.
    public var expectedRevisionId: Swift.String?
    /// The Amazon Resource Name (ARN) of the DynamoDB resource from which the policy will be removed. The resources you can specify include tables and streams. If you remove the policy of a table, it will also remove the permissions for the table's indexes defined in that policy document. This is because index permissions are defined in the table's policy.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        expectedRevisionId: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.expectedRevisionId = expectedRevisionId
        self.resourceArn = resourceArn
    }
}

public struct DeleteResourcePolicyOutput {
    /// A unique string that represents the revision ID of the policy. If you're comparing revision IDs, make sure to always use string comparison logic. This value will be empty if you make a request against a resource without a policy.
    public var revisionId: Swift.String?

    public init(
        revisionId: Swift.String? = nil
    )
    {
        self.revisionId = revisionId
    }
}

/// Represents the input of a DeleteTable operation.
public struct DeleteTableInput {
    /// The name of the table to delete. You can also provide the Amazon Resource Name (ARN) of the table in this parameter.
    /// This member is required.
    public var tableName: Swift.String?

    public init(
        tableName: Swift.String? = nil
    )
    {
        self.tableName = tableName
    }
}

/// Represents the output of a DeleteTable operation.
public struct DeleteTableOutput {
    /// Represents the properties of a table.
    public var tableDescription: DynamoDBClientTypes.TableDescription?

    public init(
        tableDescription: DynamoDBClientTypes.TableDescription? = nil
    )
    {
        self.tableDescription = tableDescription
    }
}

public struct DescribeBackupInput {
    /// The Amazon Resource Name (ARN) associated with the backup.
    /// This member is required.
    public var backupArn: Swift.String?

    public init(
        backupArn: Swift.String? = nil
    )
    {
        self.backupArn = backupArn
    }
}

public struct DescribeBackupOutput {
    /// Contains the description of the backup created for the table.
    public var backupDescription: DynamoDBClientTypes.BackupDescription?

    public init(
        backupDescription: DynamoDBClientTypes.BackupDescription? = nil
    )
    {
        self.backupDescription = backupDescription
    }
}

public struct DescribeContinuousBackupsInput {
    /// Name of the table for which the customer wants to check the continuous backups and point in time recovery settings. You can also provide the Amazon Resource Name (ARN) of the table in this parameter.
    /// This member is required.
    public var tableName: Swift.String?

    public init(
        tableName: Swift.String? = nil
    )
    {
        self.tableName = tableName
    }
}

public struct DescribeContinuousBackupsOutput {
    /// Represents the continuous backups and point in time recovery settings on the table.
    public var continuousBackupsDescription: DynamoDBClientTypes.ContinuousBackupsDescription?

    public init(
        continuousBackupsDescription: DynamoDBClientTypes.ContinuousBackupsDescription? = nil
    )
    {
        self.continuousBackupsDescription = continuousBackupsDescription
    }
}

public struct DescribeContributorInsightsInput {
    /// The name of the global secondary index to describe, if applicable.
    public var indexName: Swift.String?
    /// The name of the table to describe. You can also provide the Amazon Resource Name (ARN) of the table in this parameter.
    /// This member is required.
    public var tableName: Swift.String?

    public init(
        indexName: Swift.String? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.indexName = indexName
        self.tableName = tableName
    }
}

extension DynamoDBClientTypes {
    /// Represents a failure a contributor insights operation.
    public struct FailureException {
        /// Description of the failure.
        public var exceptionDescription: Swift.String?
        /// Exception name.
        public var exceptionName: Swift.String?

        public init(
            exceptionDescription: Swift.String? = nil,
            exceptionName: Swift.String? = nil
        )
        {
            self.exceptionDescription = exceptionDescription
            self.exceptionName = exceptionName
        }
    }

}

public struct DescribeContributorInsightsOutput {
    /// List of names of the associated contributor insights rules.
    public var contributorInsightsRuleList: [Swift.String]?
    /// Current status of contributor insights.
    public var contributorInsightsStatus: DynamoDBClientTypes.ContributorInsightsStatus?
    /// Returns information about the last failure that was encountered. The most common exceptions for a FAILED status are:
    ///
    /// * LimitExceededException - Per-account Amazon CloudWatch Contributor Insights rule limit reached. Please disable Contributor Insights for other tables/indexes OR disable Contributor Insights rules before retrying.
    ///
    /// * AccessDeniedException - Amazon CloudWatch Contributor Insights rules cannot be modified due to insufficient permissions.
    ///
    /// * AccessDeniedException - Failed to create service-linked role for Contributor Insights due to insufficient permissions.
    ///
    /// * InternalServerError - Failed to create Amazon CloudWatch Contributor Insights rules. Please retry request.
    public var failureException: DynamoDBClientTypes.FailureException?
    /// The name of the global secondary index being described.
    public var indexName: Swift.String?
    /// Timestamp of the last time the status was changed.
    public var lastUpdateDateTime: Foundation.Date?
    /// The name of the table being described.
    public var tableName: Swift.String?

    public init(
        contributorInsightsRuleList: [Swift.String]? = nil,
        contributorInsightsStatus: DynamoDBClientTypes.ContributorInsightsStatus? = nil,
        failureException: DynamoDBClientTypes.FailureException? = nil,
        indexName: Swift.String? = nil,
        lastUpdateDateTime: Foundation.Date? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.contributorInsightsRuleList = contributorInsightsRuleList
        self.contributorInsightsStatus = contributorInsightsStatus
        self.failureException = failureException
        self.indexName = indexName
        self.lastUpdateDateTime = lastUpdateDateTime
        self.tableName = tableName
    }
}

public struct DescribeEndpointsInput {

    public init() { }
}

extension DynamoDBClientTypes {
    /// An endpoint information details.
    public struct Endpoint {
        /// IP address of the endpoint.
        /// This member is required.
        public var address: Swift.String?
        /// Endpoint cache time to live (TTL) value.
        /// This member is required.
        public var cachePeriodInMinutes: Swift.Int

        public init(
            address: Swift.String? = nil,
            cachePeriodInMinutes: Swift.Int = 0
        )
        {
            self.address = address
            self.cachePeriodInMinutes = cachePeriodInMinutes
        }
    }

}

public struct DescribeEndpointsOutput {
    /// List of endpoints.
    /// This member is required.
    public var endpoints: [DynamoDBClientTypes.Endpoint]?

    public init(
        endpoints: [DynamoDBClientTypes.Endpoint]? = nil
    )
    {
        self.endpoints = endpoints
    }
}

/// The specified export was not found.
public struct ExportNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ExportNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DescribeExportInput {
    /// The Amazon Resource Name (ARN) associated with the export.
    /// This member is required.
    public var exportArn: Swift.String?

    public init(
        exportArn: Swift.String? = nil
    )
    {
        self.exportArn = exportArn
    }
}

extension DynamoDBClientTypes {

    public enum ExportFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case dynamodbJson
        case ion
        case sdkUnknown(Swift.String)

        public static var allCases: [ExportFormat] {
            return [
                .dynamodbJson,
                .ion
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .dynamodbJson: return "DYNAMODB_JSON"
            case .ion: return "ION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension DynamoDBClientTypes {

    public enum ExportStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case failed
        case inProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [ExportStatus] {
            return [
                .completed,
                .failed,
                .inProgress
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension DynamoDBClientTypes {

    public enum ExportType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case fullExport
        case incrementalExport
        case sdkUnknown(Swift.String)

        public static var allCases: [ExportType] {
            return [
                .fullExport,
                .incrementalExport
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .fullExport: return "FULL_EXPORT"
            case .incrementalExport: return "INCREMENTAL_EXPORT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension DynamoDBClientTypes {

    public enum ExportViewType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case newAndOldImages
        case newImage
        case sdkUnknown(Swift.String)

        public static var allCases: [ExportViewType] {
            return [
                .newAndOldImages,
                .newImage
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .newAndOldImages: return "NEW_AND_OLD_IMAGES"
            case .newImage: return "NEW_IMAGE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension DynamoDBClientTypes {
    /// Optional object containing the parameters specific to an incremental export.
    public struct IncrementalExportSpecification {
        /// Time in the past which provides the inclusive start range for the export table's data, counted in seconds from the start of the Unix epoch. The incremental export will reflect the table's state including and after this point in time.
        public var exportFromTime: Foundation.Date?
        /// Time in the past which provides the exclusive end range for the export table's data, counted in seconds from the start of the Unix epoch. The incremental export will reflect the table's state just prior to this point in time. If this is not provided, the latest time with data available will be used.
        public var exportToTime: Foundation.Date?
        /// The view type that was chosen for the export. Valid values are NEW_AND_OLD_IMAGES and NEW_IMAGES. The default value is NEW_AND_OLD_IMAGES.
        public var exportViewType: DynamoDBClientTypes.ExportViewType?

        public init(
            exportFromTime: Foundation.Date? = nil,
            exportToTime: Foundation.Date? = nil,
            exportViewType: DynamoDBClientTypes.ExportViewType? = nil
        )
        {
            self.exportFromTime = exportFromTime
            self.exportToTime = exportToTime
            self.exportViewType = exportViewType
        }
    }

}

extension DynamoDBClientTypes {

    public enum S3SseAlgorithm: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case aes256
        case kms
        case sdkUnknown(Swift.String)

        public static var allCases: [S3SseAlgorithm] {
            return [
                .aes256,
                .kms
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .aes256: return "AES256"
            case .kms: return "KMS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension DynamoDBClientTypes {
    /// Represents the properties of the exported table.
    public struct ExportDescription {
        /// The billable size of the table export.
        public var billedSizeBytes: Swift.Int?
        /// The client token that was provided for the export task. A client token makes calls to ExportTableToPointInTimeInput idempotent, meaning that multiple identical calls have the same effect as one single call.
        public var clientToken: Swift.String?
        /// The time at which the export task completed.
        public var endTime: Foundation.Date?
        /// The Amazon Resource Name (ARN) of the table export.
        public var exportArn: Swift.String?
        /// The format of the exported data. Valid values for ExportFormat are DYNAMODB_JSON or ION.
        public var exportFormat: DynamoDBClientTypes.ExportFormat?
        /// The name of the manifest file for the export task.
        public var exportManifest: Swift.String?
        /// Export can be in one of the following states: IN_PROGRESS, COMPLETED, or FAILED.
        public var exportStatus: DynamoDBClientTypes.ExportStatus?
        /// Point in time from which table data was exported.
        public var exportTime: Foundation.Date?
        /// The type of export that was performed. Valid values are FULL_EXPORT or INCREMENTAL_EXPORT.
        public var exportType: DynamoDBClientTypes.ExportType?
        /// Status code for the result of the failed export.
        public var failureCode: Swift.String?
        /// Export failure reason description.
        public var failureMessage: Swift.String?
        /// Optional object containing the parameters specific to an incremental export.
        public var incrementalExportSpecification: DynamoDBClientTypes.IncrementalExportSpecification?
        /// The number of items exported.
        public var itemCount: Swift.Int?
        /// The name of the Amazon S3 bucket containing the export.
        public var s3Bucket: Swift.String?
        /// The ID of the Amazon Web Services account that owns the bucket containing the export.
        public var s3BucketOwner: Swift.String?
        /// The Amazon S3 bucket prefix used as the file name and path of the exported snapshot.
        public var s3Prefix: Swift.String?
        /// Type of encryption used on the bucket where export data is stored. Valid values for S3SseAlgorithm are:
        ///
        /// * AES256 - server-side encryption with Amazon S3 managed keys
        ///
        /// * KMS - server-side encryption with KMS managed keys
        public var s3SseAlgorithm: DynamoDBClientTypes.S3SseAlgorithm?
        /// The ID of the KMS managed key used to encrypt the S3 bucket where export data is stored (if applicable).
        public var s3SseKmsKeyId: Swift.String?
        /// The time at which the export task began.
        public var startTime: Foundation.Date?
        /// The Amazon Resource Name (ARN) of the table that was exported.
        public var tableArn: Swift.String?
        /// Unique ID of the table that was exported.
        public var tableId: Swift.String?

        public init(
            billedSizeBytes: Swift.Int? = nil,
            clientToken: Swift.String? = nil,
            endTime: Foundation.Date? = nil,
            exportArn: Swift.String? = nil,
            exportFormat: DynamoDBClientTypes.ExportFormat? = nil,
            exportManifest: Swift.String? = nil,
            exportStatus: DynamoDBClientTypes.ExportStatus? = nil,
            exportTime: Foundation.Date? = nil,
            exportType: DynamoDBClientTypes.ExportType? = nil,
            failureCode: Swift.String? = nil,
            failureMessage: Swift.String? = nil,
            incrementalExportSpecification: DynamoDBClientTypes.IncrementalExportSpecification? = nil,
            itemCount: Swift.Int? = nil,
            s3Bucket: Swift.String? = nil,
            s3BucketOwner: Swift.String? = nil,
            s3Prefix: Swift.String? = nil,
            s3SseAlgorithm: DynamoDBClientTypes.S3SseAlgorithm? = nil,
            s3SseKmsKeyId: Swift.String? = nil,
            startTime: Foundation.Date? = nil,
            tableArn: Swift.String? = nil,
            tableId: Swift.String? = nil
        )
        {
            self.billedSizeBytes = billedSizeBytes
            self.clientToken = clientToken
            self.endTime = endTime
            self.exportArn = exportArn
            self.exportFormat = exportFormat
            self.exportManifest = exportManifest
            self.exportStatus = exportStatus
            self.exportTime = exportTime
            self.exportType = exportType
            self.failureCode = failureCode
            self.failureMessage = failureMessage
            self.incrementalExportSpecification = incrementalExportSpecification
            self.itemCount = itemCount
            self.s3Bucket = s3Bucket
            self.s3BucketOwner = s3BucketOwner
            self.s3Prefix = s3Prefix
            self.s3SseAlgorithm = s3SseAlgorithm
            self.s3SseKmsKeyId = s3SseKmsKeyId
            self.startTime = startTime
            self.tableArn = tableArn
            self.tableId = tableId
        }
    }

}

public struct DescribeExportOutput {
    /// Represents the properties of the export.
    public var exportDescription: DynamoDBClientTypes.ExportDescription?

    public init(
        exportDescription: DynamoDBClientTypes.ExportDescription? = nil
    )
    {
        self.exportDescription = exportDescription
    }
}

/// The specified global table does not exist.
public struct GlobalTableNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "GlobalTableNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DescribeGlobalTableInput {
    /// The name of the global table.
    /// This member is required.
    public var globalTableName: Swift.String?

    public init(
        globalTableName: Swift.String? = nil
    )
    {
        self.globalTableName = globalTableName
    }
}

public struct DescribeGlobalTableOutput {
    /// Contains the details of the global table.
    public var globalTableDescription: DynamoDBClientTypes.GlobalTableDescription?

    public init(
        globalTableDescription: DynamoDBClientTypes.GlobalTableDescription? = nil
    )
    {
        self.globalTableDescription = globalTableDescription
    }
}

public struct DescribeGlobalTableSettingsInput {
    /// The name of the global table to describe.
    /// This member is required.
    public var globalTableName: Swift.String?

    public init(
        globalTableName: Swift.String? = nil
    )
    {
        self.globalTableName = globalTableName
    }
}

extension DynamoDBClientTypes {
    /// Represents the properties of a global secondary index.
    public struct ReplicaGlobalSecondaryIndexSettingsDescription {
        /// The name of the global secondary index. The name must be unique among all other indexes on this table.
        /// This member is required.
        public var indexName: Swift.String?
        /// The current status of the global secondary index:
        ///
        /// * CREATING - The global secondary index is being created.
        ///
        /// * UPDATING - The global secondary index is being updated.
        ///
        /// * DELETING - The global secondary index is being deleted.
        ///
        /// * ACTIVE - The global secondary index is ready for use.
        public var indexStatus: DynamoDBClientTypes.IndexStatus?
        /// Auto scaling settings for a global secondary index replica's read capacity units.
        public var provisionedReadCapacityAutoScalingSettings: DynamoDBClientTypes.AutoScalingSettingsDescription?
        /// The maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException.
        public var provisionedReadCapacityUnits: Swift.Int?
        /// Auto scaling settings for a global secondary index replica's write capacity units.
        public var provisionedWriteCapacityAutoScalingSettings: DynamoDBClientTypes.AutoScalingSettingsDescription?
        /// The maximum number of writes consumed per second before DynamoDB returns a ThrottlingException.
        public var provisionedWriteCapacityUnits: Swift.Int?

        public init(
            indexName: Swift.String? = nil,
            indexStatus: DynamoDBClientTypes.IndexStatus? = nil,
            provisionedReadCapacityAutoScalingSettings: DynamoDBClientTypes.AutoScalingSettingsDescription? = nil,
            provisionedReadCapacityUnits: Swift.Int? = nil,
            provisionedWriteCapacityAutoScalingSettings: DynamoDBClientTypes.AutoScalingSettingsDescription? = nil,
            provisionedWriteCapacityUnits: Swift.Int? = nil
        )
        {
            self.indexName = indexName
            self.indexStatus = indexStatus
            self.provisionedReadCapacityAutoScalingSettings = provisionedReadCapacityAutoScalingSettings
            self.provisionedReadCapacityUnits = provisionedReadCapacityUnits
            self.provisionedWriteCapacityAutoScalingSettings = provisionedWriteCapacityAutoScalingSettings
            self.provisionedWriteCapacityUnits = provisionedWriteCapacityUnits
        }
    }

}

extension DynamoDBClientTypes {
    /// Represents the properties of a replica.
    public struct ReplicaSettingsDescription {
        /// The Region name of the replica.
        /// This member is required.
        public var regionName: Swift.String?
        /// The read/write capacity mode of the replica.
        public var replicaBillingModeSummary: DynamoDBClientTypes.BillingModeSummary?
        /// Replica global secondary index settings for the global table.
        public var replicaGlobalSecondaryIndexSettings: [DynamoDBClientTypes.ReplicaGlobalSecondaryIndexSettingsDescription]?
        /// Auto scaling settings for a global table replica's read capacity units.
        public var replicaProvisionedReadCapacityAutoScalingSettings: DynamoDBClientTypes.AutoScalingSettingsDescription?
        /// The maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException. For more information, see [Specifying Read and Write Requirements](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput) in the Amazon DynamoDB Developer Guide.
        public var replicaProvisionedReadCapacityUnits: Swift.Int?
        /// Auto scaling settings for a global table replica's write capacity units.
        public var replicaProvisionedWriteCapacityAutoScalingSettings: DynamoDBClientTypes.AutoScalingSettingsDescription?
        /// The maximum number of writes consumed per second before DynamoDB returns a ThrottlingException. For more information, see [Specifying Read and Write Requirements](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput) in the Amazon DynamoDB Developer Guide.
        public var replicaProvisionedWriteCapacityUnits: Swift.Int?
        /// The current state of the Region:
        ///
        /// * CREATING - The Region is being created.
        ///
        /// * UPDATING - The Region is being updated.
        ///
        /// * DELETING - The Region is being deleted.
        ///
        /// * ACTIVE - The Region is ready for use.
        public var replicaStatus: DynamoDBClientTypes.ReplicaStatus?
        /// Contains details of the table class.
        public var replicaTableClassSummary: DynamoDBClientTypes.TableClassSummary?

        public init(
            regionName: Swift.String? = nil,
            replicaBillingModeSummary: DynamoDBClientTypes.BillingModeSummary? = nil,
            replicaGlobalSecondaryIndexSettings: [DynamoDBClientTypes.ReplicaGlobalSecondaryIndexSettingsDescription]? = nil,
            replicaProvisionedReadCapacityAutoScalingSettings: DynamoDBClientTypes.AutoScalingSettingsDescription? = nil,
            replicaProvisionedReadCapacityUnits: Swift.Int? = nil,
            replicaProvisionedWriteCapacityAutoScalingSettings: DynamoDBClientTypes.AutoScalingSettingsDescription? = nil,
            replicaProvisionedWriteCapacityUnits: Swift.Int? = nil,
            replicaStatus: DynamoDBClientTypes.ReplicaStatus? = nil,
            replicaTableClassSummary: DynamoDBClientTypes.TableClassSummary? = nil
        )
        {
            self.regionName = regionName
            self.replicaBillingModeSummary = replicaBillingModeSummary
            self.replicaGlobalSecondaryIndexSettings = replicaGlobalSecondaryIndexSettings
            self.replicaProvisionedReadCapacityAutoScalingSettings = replicaProvisionedReadCapacityAutoScalingSettings
            self.replicaProvisionedReadCapacityUnits = replicaProvisionedReadCapacityUnits
            self.replicaProvisionedWriteCapacityAutoScalingSettings = replicaProvisionedWriteCapacityAutoScalingSettings
            self.replicaProvisionedWriteCapacityUnits = replicaProvisionedWriteCapacityUnits
            self.replicaStatus = replicaStatus
            self.replicaTableClassSummary = replicaTableClassSummary
        }
    }

}

public struct DescribeGlobalTableSettingsOutput {
    /// The name of the global table.
    public var globalTableName: Swift.String?
    /// The Region-specific settings for the global table.
    public var replicaSettings: [DynamoDBClientTypes.ReplicaSettingsDescription]?

    public init(
        globalTableName: Swift.String? = nil,
        replicaSettings: [DynamoDBClientTypes.ReplicaSettingsDescription]? = nil
    )
    {
        self.globalTableName = globalTableName
        self.replicaSettings = replicaSettings
    }
}

/// The specified import was not found.
public struct ImportNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ImportNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DescribeImportInput {
    /// The Amazon Resource Name (ARN) associated with the table you're importing to.
    /// This member is required.
    public var importArn: Swift.String?

    public init(
        importArn: Swift.String? = nil
    )
    {
        self.importArn = importArn
    }
}

extension DynamoDBClientTypes {

    public enum ImportStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cancelled
        case cancelling
        case completed
        case failed
        case inProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [ImportStatus] {
            return [
                .cancelled,
                .cancelling,
                .completed,
                .failed,
                .inProgress
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "CANCELLED"
            case .cancelling: return "CANCELLING"
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension DynamoDBClientTypes {

    public enum InputCompressionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case gzip
        case `none`
        case zstd
        case sdkUnknown(Swift.String)

        public static var allCases: [InputCompressionType] {
            return [
                .gzip,
                .none,
                .zstd
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .gzip: return "GZIP"
            case .none: return "NONE"
            case .zstd: return "ZSTD"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension DynamoDBClientTypes {

    public enum InputFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case csv
        case dynamodbJson
        case ion
        case sdkUnknown(Swift.String)

        public static var allCases: [InputFormat] {
            return [
                .csv,
                .dynamodbJson,
                .ion
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .csv: return "CSV"
            case .dynamodbJson: return "DYNAMODB_JSON"
            case .ion: return "ION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension DynamoDBClientTypes {
    /// The format options for the data that was imported into the target table. There is one value, CsvOption.
    public struct InputFormatOptions {
        /// The options for imported source files in CSV format. The values are Delimiter and HeaderList.
        public var csv: DynamoDBClientTypes.CsvOptions?

        public init(
            csv: DynamoDBClientTypes.CsvOptions? = nil
        )
        {
            self.csv = csv
        }
    }

}

extension DynamoDBClientTypes {
    /// The S3 bucket that is being imported from.
    public struct S3BucketSource {
        /// The S3 bucket that is being imported from.
        /// This member is required.
        public var s3Bucket: Swift.String?
        /// The account number of the S3 bucket that is being imported from. If the bucket is owned by the requester this is optional.
        public var s3BucketOwner: Swift.String?
        /// The key prefix shared by all S3 Objects that are being imported.
        public var s3KeyPrefix: Swift.String?

        public init(
            s3Bucket: Swift.String? = nil,
            s3BucketOwner: Swift.String? = nil,
            s3KeyPrefix: Swift.String? = nil
        )
        {
            self.s3Bucket = s3Bucket
            self.s3BucketOwner = s3BucketOwner
            self.s3KeyPrefix = s3KeyPrefix
        }
    }

}

extension DynamoDBClientTypes {
    /// The parameters for the table created as part of the import operation.
    public struct TableCreationParameters {
        /// The attributes of the table created as part of the import operation.
        /// This member is required.
        public var attributeDefinitions: [DynamoDBClientTypes.AttributeDefinition]?
        /// The billing mode for provisioning the table created as part of the import operation.
        public var billingMode: DynamoDBClientTypes.BillingMode?
        /// The Global Secondary Indexes (GSI) of the table to be created as part of the import operation.
        public var globalSecondaryIndexes: [DynamoDBClientTypes.GlobalSecondaryIndex]?
        /// The primary key and option sort key of the table created as part of the import operation.
        /// This member is required.
        public var keySchema: [DynamoDBClientTypes.KeySchemaElement]?
        /// Sets the maximum number of read and write units for the specified on-demand table. If you use this parameter, you must specify MaxReadRequestUnits, MaxWriteRequestUnits, or both.
        public var onDemandThroughput: DynamoDBClientTypes.OnDemandThroughput?
        /// Represents the provisioned throughput settings for a specified table or index. The settings can be modified using the UpdateTable operation. For current minimum and maximum provisioned throughput values, see [Service, Account, and Table Quotas](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html) in the Amazon DynamoDB Developer Guide.
        public var provisionedThroughput: DynamoDBClientTypes.ProvisionedThroughput?
        /// Represents the settings used to enable server-side encryption.
        public var sseSpecification: DynamoDBClientTypes.SSESpecification?
        /// The name of the table created as part of the import operation.
        /// This member is required.
        public var tableName: Swift.String?

        public init(
            attributeDefinitions: [DynamoDBClientTypes.AttributeDefinition]? = nil,
            billingMode: DynamoDBClientTypes.BillingMode? = nil,
            globalSecondaryIndexes: [DynamoDBClientTypes.GlobalSecondaryIndex]? = nil,
            keySchema: [DynamoDBClientTypes.KeySchemaElement]? = nil,
            onDemandThroughput: DynamoDBClientTypes.OnDemandThroughput? = nil,
            provisionedThroughput: DynamoDBClientTypes.ProvisionedThroughput? = nil,
            sseSpecification: DynamoDBClientTypes.SSESpecification? = nil,
            tableName: Swift.String? = nil
        )
        {
            self.attributeDefinitions = attributeDefinitions
            self.billingMode = billingMode
            self.globalSecondaryIndexes = globalSecondaryIndexes
            self.keySchema = keySchema
            self.onDemandThroughput = onDemandThroughput
            self.provisionedThroughput = provisionedThroughput
            self.sseSpecification = sseSpecification
            self.tableName = tableName
        }
    }

}

extension DynamoDBClientTypes {
    /// Represents the properties of the table being imported into.
    public struct ImportTableDescription {
        /// The client token that was provided for the import task. Reusing the client token on retry makes a call to ImportTable idempotent.
        public var clientToken: Swift.String?
        /// The Amazon Resource Number (ARN) of the Cloudwatch Log Group associated with the target table.
        public var cloudWatchLogGroupArn: Swift.String?
        /// The time at which the creation of the table associated with this import task completed.
        public var endTime: Foundation.Date?
        /// The number of errors occurred on importing the source file into the target table.
        public var errorCount: Swift.Int
        /// The error code corresponding to the failure that the import job ran into during execution.
        public var failureCode: Swift.String?
        /// The error message corresponding to the failure that the import job ran into during execution.
        public var failureMessage: Swift.String?
        /// The Amazon Resource Number (ARN) corresponding to the import request.
        public var importArn: Swift.String?
        /// The status of the import.
        public var importStatus: DynamoDBClientTypes.ImportStatus?
        /// The number of items successfully imported into the new table.
        public var importedItemCount: Swift.Int
        /// The compression options for the data that has been imported into the target table. The values are NONE, GZIP, or ZSTD.
        public var inputCompressionType: DynamoDBClientTypes.InputCompressionType?
        /// The format of the source data going into the target table.
        public var inputFormat: DynamoDBClientTypes.InputFormat?
        /// The format options for the data that was imported into the target table. There is one value, CsvOption.
        public var inputFormatOptions: DynamoDBClientTypes.InputFormatOptions?
        /// The total number of items processed from the source file.
        public var processedItemCount: Swift.Int
        /// The total size of data processed from the source file, in Bytes.
        public var processedSizeBytes: Swift.Int?
        /// Values for the S3 bucket the source file is imported from. Includes bucket name (required), key prefix (optional) and bucket account owner ID (optional).
        public var s3BucketSource: DynamoDBClientTypes.S3BucketSource?
        /// The time when this import task started.
        public var startTime: Foundation.Date?
        /// The Amazon Resource Number (ARN) of the table being imported into.
        public var tableArn: Swift.String?
        /// The parameters for the new table that is being imported into.
        public var tableCreationParameters: DynamoDBClientTypes.TableCreationParameters?
        /// The table id corresponding to the table created by import table process.
        public var tableId: Swift.String?

        public init(
            clientToken: Swift.String? = nil,
            cloudWatchLogGroupArn: Swift.String? = nil,
            endTime: Foundation.Date? = nil,
            errorCount: Swift.Int = 0,
            failureCode: Swift.String? = nil,
            failureMessage: Swift.String? = nil,
            importArn: Swift.String? = nil,
            importStatus: DynamoDBClientTypes.ImportStatus? = nil,
            importedItemCount: Swift.Int = 0,
            inputCompressionType: DynamoDBClientTypes.InputCompressionType? = nil,
            inputFormat: DynamoDBClientTypes.InputFormat? = nil,
            inputFormatOptions: DynamoDBClientTypes.InputFormatOptions? = nil,
            processedItemCount: Swift.Int = 0,
            processedSizeBytes: Swift.Int? = nil,
            s3BucketSource: DynamoDBClientTypes.S3BucketSource? = nil,
            startTime: Foundation.Date? = nil,
            tableArn: Swift.String? = nil,
            tableCreationParameters: DynamoDBClientTypes.TableCreationParameters? = nil,
            tableId: Swift.String? = nil
        )
        {
            self.clientToken = clientToken
            self.cloudWatchLogGroupArn = cloudWatchLogGroupArn
            self.endTime = endTime
            self.errorCount = errorCount
            self.failureCode = failureCode
            self.failureMessage = failureMessage
            self.importArn = importArn
            self.importStatus = importStatus
            self.importedItemCount = importedItemCount
            self.inputCompressionType = inputCompressionType
            self.inputFormat = inputFormat
            self.inputFormatOptions = inputFormatOptions
            self.processedItemCount = processedItemCount
            self.processedSizeBytes = processedSizeBytes
            self.s3BucketSource = s3BucketSource
            self.startTime = startTime
            self.tableArn = tableArn
            self.tableCreationParameters = tableCreationParameters
            self.tableId = tableId
        }
    }

}

public struct DescribeImportOutput {
    /// Represents the properties of the table created for the import, and parameters of the import. The import parameters include import status, how many items were processed, and how many errors were encountered.
    /// This member is required.
    public var importTableDescription: DynamoDBClientTypes.ImportTableDescription?

    public init(
        importTableDescription: DynamoDBClientTypes.ImportTableDescription? = nil
    )
    {
        self.importTableDescription = importTableDescription
    }
}

public struct DescribeKinesisStreamingDestinationInput {
    /// The name of the table being described. You can also provide the Amazon Resource Name (ARN) of the table in this parameter.
    /// This member is required.
    public var tableName: Swift.String?

    public init(
        tableName: Swift.String? = nil
    )
    {
        self.tableName = tableName
    }
}

extension DynamoDBClientTypes {

    public enum DestinationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case disabled
        case disabling
        case enableFailed
        case enabling
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [DestinationStatus] {
            return [
                .active,
                .disabled,
                .disabling,
                .enableFailed,
                .enabling,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .disabled: return "DISABLED"
            case .disabling: return "DISABLING"
            case .enableFailed: return "ENABLE_FAILED"
            case .enabling: return "ENABLING"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension DynamoDBClientTypes {
    /// Describes a Kinesis data stream destination.
    public struct KinesisDataStreamDestination {
        /// The precision of the Kinesis data stream timestamp. The values are either MILLISECOND or MICROSECOND.
        public var approximateCreationDateTimePrecision: DynamoDBClientTypes.ApproximateCreationDateTimePrecision?
        /// The current status of replication.
        public var destinationStatus: DynamoDBClientTypes.DestinationStatus?
        /// The human-readable string that corresponds to the replica status.
        public var destinationStatusDescription: Swift.String?
        /// The ARN for a specific Kinesis data stream.
        public var streamArn: Swift.String?

        public init(
            approximateCreationDateTimePrecision: DynamoDBClientTypes.ApproximateCreationDateTimePrecision? = nil,
            destinationStatus: DynamoDBClientTypes.DestinationStatus? = nil,
            destinationStatusDescription: Swift.String? = nil,
            streamArn: Swift.String? = nil
        )
        {
            self.approximateCreationDateTimePrecision = approximateCreationDateTimePrecision
            self.destinationStatus = destinationStatus
            self.destinationStatusDescription = destinationStatusDescription
            self.streamArn = streamArn
        }
    }

}

public struct DescribeKinesisStreamingDestinationOutput {
    /// The list of replica structures for the table being described.
    public var kinesisDataStreamDestinations: [DynamoDBClientTypes.KinesisDataStreamDestination]?
    /// The name of the table being described.
    public var tableName: Swift.String?

    public init(
        kinesisDataStreamDestinations: [DynamoDBClientTypes.KinesisDataStreamDestination]? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.kinesisDataStreamDestinations = kinesisDataStreamDestinations
        self.tableName = tableName
    }
}

/// Represents the input of a DescribeLimits operation. Has no content.
public struct DescribeLimitsInput {

    public init() { }
}

/// Represents the output of a DescribeLimits operation.
public struct DescribeLimitsOutput {
    /// The maximum total read capacity units that your account allows you to provision across all of your tables in this Region.
    public var accountMaxReadCapacityUnits: Swift.Int?
    /// The maximum total write capacity units that your account allows you to provision across all of your tables in this Region.
    public var accountMaxWriteCapacityUnits: Swift.Int?
    /// The maximum read capacity units that your account allows you to provision for a new table that you are creating in this Region, including the read capacity units provisioned for its global secondary indexes (GSIs).
    public var tableMaxReadCapacityUnits: Swift.Int?
    /// The maximum write capacity units that your account allows you to provision for a new table that you are creating in this Region, including the write capacity units provisioned for its global secondary indexes (GSIs).
    public var tableMaxWriteCapacityUnits: Swift.Int?

    public init(
        accountMaxReadCapacityUnits: Swift.Int? = nil,
        accountMaxWriteCapacityUnits: Swift.Int? = nil,
        tableMaxReadCapacityUnits: Swift.Int? = nil,
        tableMaxWriteCapacityUnits: Swift.Int? = nil
    )
    {
        self.accountMaxReadCapacityUnits = accountMaxReadCapacityUnits
        self.accountMaxWriteCapacityUnits = accountMaxWriteCapacityUnits
        self.tableMaxReadCapacityUnits = tableMaxReadCapacityUnits
        self.tableMaxWriteCapacityUnits = tableMaxWriteCapacityUnits
    }
}

/// Represents the input of a DescribeTable operation.
public struct DescribeTableInput {
    /// The name of the table to describe. You can also provide the Amazon Resource Name (ARN) of the table in this parameter.
    /// This member is required.
    public var tableName: Swift.String?

    public init(
        tableName: Swift.String? = nil
    )
    {
        self.tableName = tableName
    }
}

/// Represents the output of a DescribeTable operation.
public struct DescribeTableOutput {
    /// The properties of the table.
    public var table: DynamoDBClientTypes.TableDescription?

    public init(
        table: DynamoDBClientTypes.TableDescription? = nil
    )
    {
        self.table = table
    }
}

public struct DescribeTableReplicaAutoScalingInput {
    /// The name of the table. You can also provide the Amazon Resource Name (ARN) of the table in this parameter.
    /// This member is required.
    public var tableName: Swift.String?

    public init(
        tableName: Swift.String? = nil
    )
    {
        self.tableName = tableName
    }
}

extension DynamoDBClientTypes {
    /// Represents the auto scaling configuration for a replica global secondary index.
    public struct ReplicaGlobalSecondaryIndexAutoScalingDescription {
        /// The name of the global secondary index.
        public var indexName: Swift.String?
        /// The current state of the replica global secondary index:
        ///
        /// * CREATING - The index is being created.
        ///
        /// * UPDATING - The table/index configuration is being updated. The table/index remains available for data operations when UPDATING
        ///
        /// * DELETING - The index is being deleted.
        ///
        /// * ACTIVE - The index is ready for use.
        public var indexStatus: DynamoDBClientTypes.IndexStatus?
        /// Represents the auto scaling settings for a global table or global secondary index.
        public var provisionedReadCapacityAutoScalingSettings: DynamoDBClientTypes.AutoScalingSettingsDescription?
        /// Represents the auto scaling settings for a global table or global secondary index.
        public var provisionedWriteCapacityAutoScalingSettings: DynamoDBClientTypes.AutoScalingSettingsDescription?

        public init(
            indexName: Swift.String? = nil,
            indexStatus: DynamoDBClientTypes.IndexStatus? = nil,
            provisionedReadCapacityAutoScalingSettings: DynamoDBClientTypes.AutoScalingSettingsDescription? = nil,
            provisionedWriteCapacityAutoScalingSettings: DynamoDBClientTypes.AutoScalingSettingsDescription? = nil
        )
        {
            self.indexName = indexName
            self.indexStatus = indexStatus
            self.provisionedReadCapacityAutoScalingSettings = provisionedReadCapacityAutoScalingSettings
            self.provisionedWriteCapacityAutoScalingSettings = provisionedWriteCapacityAutoScalingSettings
        }
    }

}

extension DynamoDBClientTypes {
    /// Represents the auto scaling settings of the replica.
    public struct ReplicaAutoScalingDescription {
        /// Replica-specific global secondary index auto scaling settings.
        public var globalSecondaryIndexes: [DynamoDBClientTypes.ReplicaGlobalSecondaryIndexAutoScalingDescription]?
        /// The Region where the replica exists.
        public var regionName: Swift.String?
        /// Represents the auto scaling settings for a global table or global secondary index.
        public var replicaProvisionedReadCapacityAutoScalingSettings: DynamoDBClientTypes.AutoScalingSettingsDescription?
        /// Represents the auto scaling settings for a global table or global secondary index.
        public var replicaProvisionedWriteCapacityAutoScalingSettings: DynamoDBClientTypes.AutoScalingSettingsDescription?
        /// The current state of the replica:
        ///
        /// * CREATING - The replica is being created.
        ///
        /// * UPDATING - The replica is being updated.
        ///
        /// * DELETING - The replica is being deleted.
        ///
        /// * ACTIVE - The replica is ready for use.
        public var replicaStatus: DynamoDBClientTypes.ReplicaStatus?

        public init(
            globalSecondaryIndexes: [DynamoDBClientTypes.ReplicaGlobalSecondaryIndexAutoScalingDescription]? = nil,
            regionName: Swift.String? = nil,
            replicaProvisionedReadCapacityAutoScalingSettings: DynamoDBClientTypes.AutoScalingSettingsDescription? = nil,
            replicaProvisionedWriteCapacityAutoScalingSettings: DynamoDBClientTypes.AutoScalingSettingsDescription? = nil,
            replicaStatus: DynamoDBClientTypes.ReplicaStatus? = nil
        )
        {
            self.globalSecondaryIndexes = globalSecondaryIndexes
            self.regionName = regionName
            self.replicaProvisionedReadCapacityAutoScalingSettings = replicaProvisionedReadCapacityAutoScalingSettings
            self.replicaProvisionedWriteCapacityAutoScalingSettings = replicaProvisionedWriteCapacityAutoScalingSettings
            self.replicaStatus = replicaStatus
        }
    }

}

extension DynamoDBClientTypes {
    /// Represents the auto scaling configuration for a global table.
    public struct TableAutoScalingDescription {
        /// Represents replicas of the global table.
        public var replicas: [DynamoDBClientTypes.ReplicaAutoScalingDescription]?
        /// The name of the table.
        public var tableName: Swift.String?
        /// The current state of the table:
        ///
        /// * CREATING - The table is being created.
        ///
        /// * UPDATING - The table is being updated.
        ///
        /// * DELETING - The table is being deleted.
        ///
        /// * ACTIVE - The table is ready for use.
        public var tableStatus: DynamoDBClientTypes.TableStatus?

        public init(
            replicas: [DynamoDBClientTypes.ReplicaAutoScalingDescription]? = nil,
            tableName: Swift.String? = nil,
            tableStatus: DynamoDBClientTypes.TableStatus? = nil
        )
        {
            self.replicas = replicas
            self.tableName = tableName
            self.tableStatus = tableStatus
        }
    }

}

public struct DescribeTableReplicaAutoScalingOutput {
    /// Represents the auto scaling properties of the table.
    public var tableAutoScalingDescription: DynamoDBClientTypes.TableAutoScalingDescription?

    public init(
        tableAutoScalingDescription: DynamoDBClientTypes.TableAutoScalingDescription? = nil
    )
    {
        self.tableAutoScalingDescription = tableAutoScalingDescription
    }
}

public struct DescribeTimeToLiveInput {
    /// The name of the table to be described. You can also provide the Amazon Resource Name (ARN) of the table in this parameter.
    /// This member is required.
    public var tableName: Swift.String?

    public init(
        tableName: Swift.String? = nil
    )
    {
        self.tableName = tableName
    }
}

public struct DescribeTimeToLiveOutput {
    ///
    public var timeToLiveDescription: DynamoDBClientTypes.TimeToLiveDescription?

    public init(
        timeToLiveDescription: DynamoDBClientTypes.TimeToLiveDescription? = nil
    )
    {
        self.timeToLiveDescription = timeToLiveDescription
    }
}

extension DynamoDBClientTypes {
    /// Enables setting the configuration for Kinesis Streaming.
    public struct EnableKinesisStreamingConfiguration {
        /// Toggle for the precision of Kinesis data stream timestamp. The values are either MILLISECOND or MICROSECOND.
        public var approximateCreationDateTimePrecision: DynamoDBClientTypes.ApproximateCreationDateTimePrecision?

        public init(
            approximateCreationDateTimePrecision: DynamoDBClientTypes.ApproximateCreationDateTimePrecision? = nil
        )
        {
            self.approximateCreationDateTimePrecision = approximateCreationDateTimePrecision
        }
    }

}

public struct DisableKinesisStreamingDestinationInput {
    /// The source for the Kinesis streaming information that is being enabled.
    public var enableKinesisStreamingConfiguration: DynamoDBClientTypes.EnableKinesisStreamingConfiguration?
    /// The ARN for a Kinesis data stream.
    /// This member is required.
    public var streamArn: Swift.String?
    /// The name of the DynamoDB table. You can also provide the Amazon Resource Name (ARN) of the table in this parameter.
    /// This member is required.
    public var tableName: Swift.String?

    public init(
        enableKinesisStreamingConfiguration: DynamoDBClientTypes.EnableKinesisStreamingConfiguration? = nil,
        streamArn: Swift.String? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.enableKinesisStreamingConfiguration = enableKinesisStreamingConfiguration
        self.streamArn = streamArn
        self.tableName = tableName
    }
}

public struct DisableKinesisStreamingDestinationOutput {
    /// The current status of the replication.
    public var destinationStatus: DynamoDBClientTypes.DestinationStatus?
    /// The destination for the Kinesis streaming information that is being enabled.
    public var enableKinesisStreamingConfiguration: DynamoDBClientTypes.EnableKinesisStreamingConfiguration?
    /// The ARN for the specific Kinesis data stream.
    public var streamArn: Swift.String?
    /// The name of the table being modified.
    public var tableName: Swift.String?

    public init(
        destinationStatus: DynamoDBClientTypes.DestinationStatus? = nil,
        enableKinesisStreamingConfiguration: DynamoDBClientTypes.EnableKinesisStreamingConfiguration? = nil,
        streamArn: Swift.String? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.destinationStatus = destinationStatus
        self.enableKinesisStreamingConfiguration = enableKinesisStreamingConfiguration
        self.streamArn = streamArn
        self.tableName = tableName
    }
}

/// There was an attempt to insert an item with the same primary key as an item that already exists in the DynamoDB table.
public struct DuplicateItemException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DuplicateItemException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct EnableKinesisStreamingDestinationInput {
    /// The source for the Kinesis streaming information that is being enabled.
    public var enableKinesisStreamingConfiguration: DynamoDBClientTypes.EnableKinesisStreamingConfiguration?
    /// The ARN for a Kinesis data stream.
    /// This member is required.
    public var streamArn: Swift.String?
    /// The name of the DynamoDB table. You can also provide the Amazon Resource Name (ARN) of the table in this parameter.
    /// This member is required.
    public var tableName: Swift.String?

    public init(
        enableKinesisStreamingConfiguration: DynamoDBClientTypes.EnableKinesisStreamingConfiguration? = nil,
        streamArn: Swift.String? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.enableKinesisStreamingConfiguration = enableKinesisStreamingConfiguration
        self.streamArn = streamArn
        self.tableName = tableName
    }
}

public struct EnableKinesisStreamingDestinationOutput {
    /// The current status of the replication.
    public var destinationStatus: DynamoDBClientTypes.DestinationStatus?
    /// The destination for the Kinesis streaming information that is being enabled.
    public var enableKinesisStreamingConfiguration: DynamoDBClientTypes.EnableKinesisStreamingConfiguration?
    /// The ARN for the specific Kinesis data stream.
    public var streamArn: Swift.String?
    /// The name of the table being modified.
    public var tableName: Swift.String?

    public init(
        destinationStatus: DynamoDBClientTypes.DestinationStatus? = nil,
        enableKinesisStreamingConfiguration: DynamoDBClientTypes.EnableKinesisStreamingConfiguration? = nil,
        streamArn: Swift.String? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.destinationStatus = destinationStatus
        self.enableKinesisStreamingConfiguration = enableKinesisStreamingConfiguration
        self.streamArn = streamArn
        self.tableName = tableName
    }
}

/// DynamoDB rejected the request because you retried a request with a different payload but with an idempotent token that was already used.
public struct IdempotentParameterMismatchException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "IdempotentParameterMismatchException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The transaction with the given request token is already in progress. Recommended Settings This is a general recommendation for handling the TransactionInProgressException. These settings help ensure that the client retries will trigger completion of the ongoing TransactWriteItems request.
///
/// * Set clientExecutionTimeout to a value that allows at least one retry to be processed after 5 seconds have elapsed since the first attempt for the TransactWriteItems operation.
///
/// * Set socketTimeout to a value a little lower than the requestTimeout setting.
///
/// * requestTimeout should be set based on the time taken for the individual retries of a single HTTP request for your use case, but setting it to 1 second or higher should work well to reduce chances of retries and TransactionInProgressException errors.
///
/// * Use exponential backoff when retrying and tune backoff if needed.
///
///
/// Assuming [default retry policy](https://github.com/aws/aws-sdk-java/blob/fd409dee8ae23fb8953e0bb4dbde65536a7e0514/aws-java-sdk-core/src/main/java/com/amazonaws/retry/PredefinedRetryPolicies.java#L97), example timeout settings based on the guidelines above are as follows: Example timeline:
///
/// * 0-1000 first attempt
///
/// * 1000-1500 first sleep/delay (default retry policy uses 500 ms as base delay for 4xx errors)
///
/// * 1500-2500 second attempt
///
/// * 2500-3500 second sleep/delay (500 * 2, exponential backoff)
///
/// * 3500-4500 third attempt
///
/// * 4500-6500 third sleep/delay (500 * 2^2)
///
/// * 6500-7500 fourth attempt (this can trigger inline recovery since 5 seconds have elapsed since the first attempt reached TC)
public struct TransactionInProgressException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TransactionInProgressException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// There was a conflict when writing to the specified S3 bucket.
public struct ExportConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ExportConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified ExportTime is outside of the point in time recovery window.
public struct InvalidExportTimeException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidExportTimeException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Point in time recovery has not yet been enabled for this source table.
public struct PointInTimeRecoveryUnavailableException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "PointInTimeRecoveryUnavailableException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct ExportTableToPointInTimeInput {
    /// Providing a ClientToken makes the call to ExportTableToPointInTimeInput idempotent, meaning that multiple identical calls have the same effect as one single call. A client token is valid for 8 hours after the first request that uses it is completed. After 8 hours, any request with the same client token is treated as a new request. Do not resubmit the same request with the same client token for more than 8 hours, or the result might not be idempotent. If you submit a request with the same client token but a change in other parameters within the 8-hour idempotency window, DynamoDB returns an ImportConflictException.
    public var clientToken: Swift.String?
    /// The format for the exported data. Valid values for ExportFormat are DYNAMODB_JSON or ION.
    public var exportFormat: DynamoDBClientTypes.ExportFormat?
    /// Time in the past from which to export table data, counted in seconds from the start of the Unix epoch. The table export will be a snapshot of the table's state at this point in time.
    public var exportTime: Foundation.Date?
    /// Choice of whether to execute as a full export or incremental export. Valid values are FULL_EXPORT or INCREMENTAL_EXPORT. The default value is FULL_EXPORT. If INCREMENTAL_EXPORT is provided, the IncrementalExportSpecification must also be used.
    public var exportType: DynamoDBClientTypes.ExportType?
    /// Optional object containing the parameters specific to an incremental export.
    public var incrementalExportSpecification: DynamoDBClientTypes.IncrementalExportSpecification?
    /// The name of the Amazon S3 bucket to export the snapshot to.
    /// This member is required.
    public var s3Bucket: Swift.String?
    /// The ID of the Amazon Web Services account that owns the bucket the export will be stored in. S3BucketOwner is a required parameter when exporting to a S3 bucket in another account.
    public var s3BucketOwner: Swift.String?
    /// The Amazon S3 bucket prefix to use as the file name and path of the exported snapshot.
    public var s3Prefix: Swift.String?
    /// Type of encryption used on the bucket where export data will be stored. Valid values for S3SseAlgorithm are:
    ///
    /// * AES256 - server-side encryption with Amazon S3 managed keys
    ///
    /// * KMS - server-side encryption with KMS managed keys
    public var s3SseAlgorithm: DynamoDBClientTypes.S3SseAlgorithm?
    /// The ID of the KMS managed key used to encrypt the S3 bucket where export data will be stored (if applicable).
    public var s3SseKmsKeyId: Swift.String?
    /// The Amazon Resource Name (ARN) associated with the table to export.
    /// This member is required.
    public var tableArn: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        exportFormat: DynamoDBClientTypes.ExportFormat? = nil,
        exportTime: Foundation.Date? = nil,
        exportType: DynamoDBClientTypes.ExportType? = nil,
        incrementalExportSpecification: DynamoDBClientTypes.IncrementalExportSpecification? = nil,
        s3Bucket: Swift.String? = nil,
        s3BucketOwner: Swift.String? = nil,
        s3Prefix: Swift.String? = nil,
        s3SseAlgorithm: DynamoDBClientTypes.S3SseAlgorithm? = nil,
        s3SseKmsKeyId: Swift.String? = nil,
        tableArn: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.exportFormat = exportFormat
        self.exportTime = exportTime
        self.exportType = exportType
        self.incrementalExportSpecification = incrementalExportSpecification
        self.s3Bucket = s3Bucket
        self.s3BucketOwner = s3BucketOwner
        self.s3Prefix = s3Prefix
        self.s3SseAlgorithm = s3SseAlgorithm
        self.s3SseKmsKeyId = s3SseKmsKeyId
        self.tableArn = tableArn
    }
}

public struct ExportTableToPointInTimeOutput {
    /// Contains a description of the table export.
    public var exportDescription: DynamoDBClientTypes.ExportDescription?

    public init(
        exportDescription: DynamoDBClientTypes.ExportDescription? = nil
    )
    {
        self.exportDescription = exportDescription
    }
}

public struct GetResourcePolicyInput {
    /// The Amazon Resource Name (ARN) of the DynamoDB resource to which the policy is attached. The resources you can specify include tables and streams.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct GetResourcePolicyOutput {
    /// The resource-based policy document attached to the resource, which can be a table or stream, in JSON format.
    public var policy: Swift.String?
    /// A unique string that represents the revision ID of the policy. If you're comparing revision IDs, make sure to always use string comparison logic.
    public var revisionId: Swift.String?

    public init(
        policy: Swift.String? = nil,
        revisionId: Swift.String? = nil
    )
    {
        self.policy = policy
        self.revisionId = revisionId
    }
}

/// There was a conflict when importing from the specified S3 source. This can occur when the current import conflicts with a previous import request that had the same client token.
public struct ImportConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ImportConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct ImportTableInput {
    /// Providing a ClientToken makes the call to ImportTableInput idempotent, meaning that multiple identical calls have the same effect as one single call. A client token is valid for 8 hours after the first request that uses it is completed. After 8 hours, any request with the same client token is treated as a new request. Do not resubmit the same request with the same client token for more than 8 hours, or the result might not be idempotent. If you submit a request with the same client token but a change in other parameters within the 8-hour idempotency window, DynamoDB returns an IdempotentParameterMismatch exception.
    public var clientToken: Swift.String?
    /// Type of compression to be used on the input coming from the imported table.
    public var inputCompressionType: DynamoDBClientTypes.InputCompressionType?
    /// The format of the source data. Valid values for ImportFormat are CSV, DYNAMODB_JSON or ION.
    /// This member is required.
    public var inputFormat: DynamoDBClientTypes.InputFormat?
    /// Additional properties that specify how the input is formatted,
    public var inputFormatOptions: DynamoDBClientTypes.InputFormatOptions?
    /// The S3 bucket that provides the source for the import.
    /// This member is required.
    public var s3BucketSource: DynamoDBClientTypes.S3BucketSource?
    /// Parameters for the table to import the data into.
    /// This member is required.
    public var tableCreationParameters: DynamoDBClientTypes.TableCreationParameters?

    public init(
        clientToken: Swift.String? = nil,
        inputCompressionType: DynamoDBClientTypes.InputCompressionType? = nil,
        inputFormat: DynamoDBClientTypes.InputFormat? = nil,
        inputFormatOptions: DynamoDBClientTypes.InputFormatOptions? = nil,
        s3BucketSource: DynamoDBClientTypes.S3BucketSource? = nil,
        tableCreationParameters: DynamoDBClientTypes.TableCreationParameters? = nil
    )
    {
        self.clientToken = clientToken
        self.inputCompressionType = inputCompressionType
        self.inputFormat = inputFormat
        self.inputFormatOptions = inputFormatOptions
        self.s3BucketSource = s3BucketSource
        self.tableCreationParameters = tableCreationParameters
    }
}

public struct ImportTableOutput {
    /// Represents the properties of the table created for the import, and parameters of the import. The import parameters include import status, how many items were processed, and how many errors were encountered.
    /// This member is required.
    public var importTableDescription: DynamoDBClientTypes.ImportTableDescription?

    public init(
        importTableDescription: DynamoDBClientTypes.ImportTableDescription? = nil
    )
    {
        self.importTableDescription = importTableDescription
    }
}

public struct ListBackupsInput {
    /// The backups from the table specified by BackupType are listed. Where BackupType can be:
    ///
    /// * USER - On-demand backup created by you. (The default setting if no other backup types are specified.)
    ///
    /// * SYSTEM - On-demand backup automatically created by DynamoDB.
    ///
    /// * ALL - All types of on-demand backups (USER and SYSTEM).
    public var backupType: DynamoDBClientTypes.BackupTypeFilter?
    /// LastEvaluatedBackupArn is the Amazon Resource Name (ARN) of the backup last evaluated when the current page of results was returned, inclusive of the current page of results. This value may be specified as the ExclusiveStartBackupArn of a new ListBackups operation in order to fetch the next page of results.
    public var exclusiveStartBackupArn: Swift.String?
    /// Maximum number of backups to return at once.
    public var limit: Swift.Int?
    /// Lists the backups from the table specified in TableName. You can also provide the Amazon Resource Name (ARN) of the table in this parameter.
    public var tableName: Swift.String?
    /// Only backups created after this time are listed. TimeRangeLowerBound is inclusive.
    public var timeRangeLowerBound: Foundation.Date?
    /// Only backups created before this time are listed. TimeRangeUpperBound is exclusive.
    public var timeRangeUpperBound: Foundation.Date?

    public init(
        backupType: DynamoDBClientTypes.BackupTypeFilter? = nil,
        exclusiveStartBackupArn: Swift.String? = nil,
        limit: Swift.Int? = nil,
        tableName: Swift.String? = nil,
        timeRangeLowerBound: Foundation.Date? = nil,
        timeRangeUpperBound: Foundation.Date? = nil
    )
    {
        self.backupType = backupType
        self.exclusiveStartBackupArn = exclusiveStartBackupArn
        self.limit = limit
        self.tableName = tableName
        self.timeRangeLowerBound = timeRangeLowerBound
        self.timeRangeUpperBound = timeRangeUpperBound
    }
}

public struct ListBackupsOutput {
    /// List of BackupSummary objects.
    public var backupSummaries: [DynamoDBClientTypes.BackupSummary]?
    /// The ARN of the backup last evaluated when the current page of results was returned, inclusive of the current page of results. This value may be specified as the ExclusiveStartBackupArn of a new ListBackups operation in order to fetch the next page of results. If LastEvaluatedBackupArn is empty, then the last page of results has been processed and there are no more results to be retrieved. If LastEvaluatedBackupArn is not empty, this may or may not indicate that there is more data to be returned. All results are guaranteed to have been returned if and only if no value for LastEvaluatedBackupArn is returned.
    public var lastEvaluatedBackupArn: Swift.String?

    public init(
        backupSummaries: [DynamoDBClientTypes.BackupSummary]? = nil,
        lastEvaluatedBackupArn: Swift.String? = nil
    )
    {
        self.backupSummaries = backupSummaries
        self.lastEvaluatedBackupArn = lastEvaluatedBackupArn
    }
}

public struct ListContributorInsightsInput {
    /// Maximum number of results to return per page.
    public var maxResults: Swift.Int?
    /// A token to for the desired page, if there is one.
    public var nextToken: Swift.String?
    /// The name of the table. You can also provide the Amazon Resource Name (ARN) of the table in this parameter.
    public var tableName: Swift.String?

    public init(
        maxResults: Swift.Int? = 0,
        nextToken: Swift.String? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.tableName = tableName
    }
}

public struct ListContributorInsightsOutput {
    /// A list of ContributorInsightsSummary.
    public var contributorInsightsSummaries: [DynamoDBClientTypes.ContributorInsightsSummary]?
    /// A token to go to the next page if there is one.
    public var nextToken: Swift.String?

    public init(
        contributorInsightsSummaries: [DynamoDBClientTypes.ContributorInsightsSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.contributorInsightsSummaries = contributorInsightsSummaries
        self.nextToken = nextToken
    }
}

public struct ListExportsInput {
    /// Maximum number of results to return per page.
    public var maxResults: Swift.Int?
    /// An optional string that, if supplied, must be copied from the output of a previous call to ListExports. When provided in this manner, the API fetches the next page of results.
    public var nextToken: Swift.String?
    /// The Amazon Resource Name (ARN) associated with the exported table.
    public var tableArn: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        tableArn: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.tableArn = tableArn
    }
}

extension DynamoDBClientTypes {
    /// Summary information about an export task.
    public struct ExportSummary {
        /// The Amazon Resource Name (ARN) of the export.
        public var exportArn: Swift.String?
        /// Export can be in one of the following states: IN_PROGRESS, COMPLETED, or FAILED.
        public var exportStatus: DynamoDBClientTypes.ExportStatus?
        /// The type of export that was performed. Valid values are FULL_EXPORT or INCREMENTAL_EXPORT.
        public var exportType: DynamoDBClientTypes.ExportType?

        public init(
            exportArn: Swift.String? = nil,
            exportStatus: DynamoDBClientTypes.ExportStatus? = nil,
            exportType: DynamoDBClientTypes.ExportType? = nil
        )
        {
            self.exportArn = exportArn
            self.exportStatus = exportStatus
            self.exportType = exportType
        }
    }

}

public struct ListExportsOutput {
    /// A list of ExportSummary objects.
    public var exportSummaries: [DynamoDBClientTypes.ExportSummary]?
    /// If this value is returned, there are additional results to be displayed. To retrieve them, call ListExports again, with NextToken set to this value.
    public var nextToken: Swift.String?

    public init(
        exportSummaries: [DynamoDBClientTypes.ExportSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.exportSummaries = exportSummaries
        self.nextToken = nextToken
    }
}

public struct ListGlobalTablesInput {
    /// The first global table name that this operation will evaluate.
    public var exclusiveStartGlobalTableName: Swift.String?
    /// The maximum number of table names to return, if the parameter is not specified DynamoDB defaults to 100. If the number of global tables DynamoDB finds reaches this limit, it stops the operation and returns the table names collected up to that point, with a table name in the LastEvaluatedGlobalTableName to apply in a subsequent operation to the ExclusiveStartGlobalTableName parameter.
    public var limit: Swift.Int?
    /// Lists the global tables in a specific Region.
    public var regionName: Swift.String?

    public init(
        exclusiveStartGlobalTableName: Swift.String? = nil,
        limit: Swift.Int? = nil,
        regionName: Swift.String? = nil
    )
    {
        self.exclusiveStartGlobalTableName = exclusiveStartGlobalTableName
        self.limit = limit
        self.regionName = regionName
    }
}

extension DynamoDBClientTypes {
    /// Represents the properties of a global table.
    public struct GlobalTable {
        /// The global table name.
        public var globalTableName: Swift.String?
        /// The Regions where the global table has replicas.
        public var replicationGroup: [DynamoDBClientTypes.Replica]?

        public init(
            globalTableName: Swift.String? = nil,
            replicationGroup: [DynamoDBClientTypes.Replica]? = nil
        )
        {
            self.globalTableName = globalTableName
            self.replicationGroup = replicationGroup
        }
    }

}

public struct ListGlobalTablesOutput {
    /// List of global table names.
    public var globalTables: [DynamoDBClientTypes.GlobalTable]?
    /// Last evaluated global table name.
    public var lastEvaluatedGlobalTableName: Swift.String?

    public init(
        globalTables: [DynamoDBClientTypes.GlobalTable]? = nil,
        lastEvaluatedGlobalTableName: Swift.String? = nil
    )
    {
        self.globalTables = globalTables
        self.lastEvaluatedGlobalTableName = lastEvaluatedGlobalTableName
    }
}

public struct ListImportsInput {
    /// An optional string that, if supplied, must be copied from the output of a previous call to ListImports. When provided in this manner, the API fetches the next page of results.
    public var nextToken: Swift.String?
    /// The number of ImportSummary objects returned in a single page.
    public var pageSize: Swift.Int?
    /// The Amazon Resource Name (ARN) associated with the table that was imported to.
    public var tableArn: Swift.String?

    public init(
        nextToken: Swift.String? = nil,
        pageSize: Swift.Int? = nil,
        tableArn: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
        self.pageSize = pageSize
        self.tableArn = tableArn
    }
}

extension DynamoDBClientTypes {
    /// Summary information about the source file for the import.
    public struct ImportSummary {
        /// The Amazon Resource Number (ARN) of the Cloudwatch Log Group associated with this import task.
        public var cloudWatchLogGroupArn: Swift.String?
        /// The time at which this import task ended. (Does this include the successful complete creation of the table it was imported to?)
        public var endTime: Foundation.Date?
        /// The Amazon Resource Number (ARN) corresponding to the import request.
        public var importArn: Swift.String?
        /// The status of the import operation.
        public var importStatus: DynamoDBClientTypes.ImportStatus?
        /// The format of the source data. Valid values are CSV, DYNAMODB_JSON or ION.
        public var inputFormat: DynamoDBClientTypes.InputFormat?
        /// The path and S3 bucket of the source file that is being imported. This includes the S3Bucket (required), S3KeyPrefix (optional) and S3BucketOwner (optional if the bucket is owned by the requester).
        public var s3BucketSource: DynamoDBClientTypes.S3BucketSource?
        /// The time at which this import task began.
        public var startTime: Foundation.Date?
        /// The Amazon Resource Number (ARN) of the table being imported into.
        public var tableArn: Swift.String?

        public init(
            cloudWatchLogGroupArn: Swift.String? = nil,
            endTime: Foundation.Date? = nil,
            importArn: Swift.String? = nil,
            importStatus: DynamoDBClientTypes.ImportStatus? = nil,
            inputFormat: DynamoDBClientTypes.InputFormat? = nil,
            s3BucketSource: DynamoDBClientTypes.S3BucketSource? = nil,
            startTime: Foundation.Date? = nil,
            tableArn: Swift.String? = nil
        )
        {
            self.cloudWatchLogGroupArn = cloudWatchLogGroupArn
            self.endTime = endTime
            self.importArn = importArn
            self.importStatus = importStatus
            self.inputFormat = inputFormat
            self.s3BucketSource = s3BucketSource
            self.startTime = startTime
            self.tableArn = tableArn
        }
    }

}

public struct ListImportsOutput {
    /// A list of ImportSummary objects.
    public var importSummaryList: [DynamoDBClientTypes.ImportSummary]?
    /// If this value is returned, there are additional results to be displayed. To retrieve them, call ListImports again, with NextToken set to this value.
    public var nextToken: Swift.String?

    public init(
        importSummaryList: [DynamoDBClientTypes.ImportSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.importSummaryList = importSummaryList
        self.nextToken = nextToken
    }
}

/// Represents the input of a ListTables operation.
public struct ListTablesInput {
    /// The first table name that this operation will evaluate. Use the value that was returned for LastEvaluatedTableName in a previous operation, so that you can obtain the next page of results.
    public var exclusiveStartTableName: Swift.String?
    /// A maximum number of table names to return. If this parameter is not specified, the limit is 100.
    public var limit: Swift.Int?

    public init(
        exclusiveStartTableName: Swift.String? = nil,
        limit: Swift.Int? = nil
    )
    {
        self.exclusiveStartTableName = exclusiveStartTableName
        self.limit = limit
    }
}

/// Represents the output of a ListTables operation.
public struct ListTablesOutput {
    /// The name of the last table in the current page of results. Use this value as the ExclusiveStartTableName in a new request to obtain the next page of results, until all the table names are returned. If you do not receive a LastEvaluatedTableName value in the response, this means that there are no more table names to be retrieved.
    public var lastEvaluatedTableName: Swift.String?
    /// The names of the tables associated with the current account at the current endpoint. The maximum size of this array is 100. If LastEvaluatedTableName also appears in the output, you can use this value as the ExclusiveStartTableName parameter in a subsequent ListTables request and obtain the next page of results.
    public var tableNames: [Swift.String]?

    public init(
        lastEvaluatedTableName: Swift.String? = nil,
        tableNames: [Swift.String]? = nil
    )
    {
        self.lastEvaluatedTableName = lastEvaluatedTableName
        self.tableNames = tableNames
    }
}

public struct ListTagsOfResourceInput {
    /// An optional string that, if supplied, must be copied from the output of a previous call to ListTagOfResource. When provided in this manner, this API fetches the next page of results.
    public var nextToken: Swift.String?
    /// The Amazon DynamoDB resource with tags to be listed. This value is an Amazon Resource Name (ARN).
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        nextToken: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
        self.resourceArn = resourceArn
    }
}

public struct ListTagsOfResourceOutput {
    /// If this value is returned, there are additional results to be displayed. To retrieve them, call ListTagsOfResource again, with NextToken set to this value.
    public var nextToken: Swift.String?
    /// The tags currently associated with the Amazon DynamoDB resource.
    public var tags: [DynamoDBClientTypes.Tag]?

    public init(
        nextToken: Swift.String? = nil,
        tags: [DynamoDBClientTypes.Tag]? = nil
    )
    {
        self.nextToken = nextToken
        self.tags = tags
    }
}

public struct PutResourcePolicyInput {
    /// Set this parameter to true to confirm that you want to remove your permissions to change the policy of this resource in the future.
    public var confirmRemoveSelfResourceAccess: Swift.Bool?
    /// A string value that you can use to conditionally update your policy. You can provide the revision ID of your existing policy to make mutating requests against that policy. When you provide an expected revision ID, if the revision ID of the existing policy on the resource doesn't match or if there's no policy attached to the resource, your request will be rejected with a PolicyNotFoundException. To conditionally attach a policy when no policy exists for the resource, specify NO_POLICY for the revision ID.
    public var expectedRevisionId: Swift.String?
    /// An Amazon Web Services resource-based policy document in JSON format.
    ///
    /// * The maximum size supported for a resource-based policy document is 20 KB. DynamoDB counts whitespaces when calculating the size of a policy against this limit.
    ///
    /// * Within a resource-based policy, if the action for a DynamoDB service-linked role (SLR) to replicate data for a global table is denied, adding or deleting a replica will fail with an error.
    ///
    ///
    /// For a full list of all considerations that apply while attaching a resource-based policy, see [Resource-based policy considerations](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-considerations.html).
    /// This member is required.
    public var policy: Swift.String?
    /// The Amazon Resource Name (ARN) of the DynamoDB resource to which the policy will be attached. The resources you can specify include tables and streams. You can control index permissions using the base table's policy. To specify the same permission level for your table and its indexes, you can provide both the table and index Amazon Resource Name (ARN)s in the Resource field of a given Statement in your policy document. Alternatively, to specify different permissions for your table, indexes, or both, you can define multiple Statement fields in your policy document.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        confirmRemoveSelfResourceAccess: Swift.Bool? = false,
        expectedRevisionId: Swift.String? = nil,
        policy: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.confirmRemoveSelfResourceAccess = confirmRemoveSelfResourceAccess
        self.expectedRevisionId = expectedRevisionId
        self.policy = policy
        self.resourceArn = resourceArn
    }
}

public struct PutResourcePolicyOutput {
    /// A unique string that represents the revision ID of the policy. If you're comparing revision IDs, make sure to always use string comparison logic.
    public var revisionId: Swift.String?

    public init(
        revisionId: Swift.String? = nil
    )
    {
        self.revisionId = revisionId
    }
}

extension DynamoDBClientTypes {

    public enum Select: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case allAttributes
        case allProjectedAttributes
        case count
        case specificAttributes
        case sdkUnknown(Swift.String)

        public static var allCases: [Select] {
            return [
                .allAttributes,
                .allProjectedAttributes,
                .count,
                .specificAttributes
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .allAttributes: return "ALL_ATTRIBUTES"
            case .allProjectedAttributes: return "ALL_PROJECTED_ATTRIBUTES"
            case .count: return "COUNT"
            case .specificAttributes: return "SPECIFIC_ATTRIBUTES"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// A target table with the specified name already exists.
public struct TableAlreadyExistsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TableAlreadyExistsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct RestoreTableFromBackupInput {
    /// The Amazon Resource Name (ARN) associated with the backup.
    /// This member is required.
    public var backupArn: Swift.String?
    /// The billing mode of the restored table.
    public var billingModeOverride: DynamoDBClientTypes.BillingMode?
    /// List of global secondary indexes for the restored table. The indexes provided should match existing secondary indexes. You can choose to exclude some or all of the indexes at the time of restore.
    public var globalSecondaryIndexOverride: [DynamoDBClientTypes.GlobalSecondaryIndex]?
    /// List of local secondary indexes for the restored table. The indexes provided should match existing secondary indexes. You can choose to exclude some or all of the indexes at the time of restore.
    public var localSecondaryIndexOverride: [DynamoDBClientTypes.LocalSecondaryIndex]?
    /// Sets the maximum number of read and write units for the specified on-demand table. If you use this parameter, you must specify MaxReadRequestUnits, MaxWriteRequestUnits, or both.
    public var onDemandThroughputOverride: DynamoDBClientTypes.OnDemandThroughput?
    /// Provisioned throughput settings for the restored table.
    public var provisionedThroughputOverride: DynamoDBClientTypes.ProvisionedThroughput?
    /// The new server-side encryption settings for the restored table.
    public var sseSpecificationOverride: DynamoDBClientTypes.SSESpecification?
    /// The name of the new table to which the backup must be restored.
    /// This member is required.
    public var targetTableName: Swift.String?

    public init(
        backupArn: Swift.String? = nil,
        billingModeOverride: DynamoDBClientTypes.BillingMode? = nil,
        globalSecondaryIndexOverride: [DynamoDBClientTypes.GlobalSecondaryIndex]? = nil,
        localSecondaryIndexOverride: [DynamoDBClientTypes.LocalSecondaryIndex]? = nil,
        onDemandThroughputOverride: DynamoDBClientTypes.OnDemandThroughput? = nil,
        provisionedThroughputOverride: DynamoDBClientTypes.ProvisionedThroughput? = nil,
        sseSpecificationOverride: DynamoDBClientTypes.SSESpecification? = nil,
        targetTableName: Swift.String? = nil
    )
    {
        self.backupArn = backupArn
        self.billingModeOverride = billingModeOverride
        self.globalSecondaryIndexOverride = globalSecondaryIndexOverride
        self.localSecondaryIndexOverride = localSecondaryIndexOverride
        self.onDemandThroughputOverride = onDemandThroughputOverride
        self.provisionedThroughputOverride = provisionedThroughputOverride
        self.sseSpecificationOverride = sseSpecificationOverride
        self.targetTableName = targetTableName
    }
}

public struct RestoreTableFromBackupOutput {
    /// The description of the table created from an existing backup.
    public var tableDescription: DynamoDBClientTypes.TableDescription?

    public init(
        tableDescription: DynamoDBClientTypes.TableDescription? = nil
    )
    {
        self.tableDescription = tableDescription
    }
}

/// An invalid restore time was specified. RestoreDateTime must be between EarliestRestorableDateTime and LatestRestorableDateTime.
public struct InvalidRestoreTimeException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidRestoreTimeException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct RestoreTableToPointInTimeInput {
    /// The billing mode of the restored table.
    public var billingModeOverride: DynamoDBClientTypes.BillingMode?
    /// List of global secondary indexes for the restored table. The indexes provided should match existing secondary indexes. You can choose to exclude some or all of the indexes at the time of restore.
    public var globalSecondaryIndexOverride: [DynamoDBClientTypes.GlobalSecondaryIndex]?
    /// List of local secondary indexes for the restored table. The indexes provided should match existing secondary indexes. You can choose to exclude some or all of the indexes at the time of restore.
    public var localSecondaryIndexOverride: [DynamoDBClientTypes.LocalSecondaryIndex]?
    /// Sets the maximum number of read and write units for the specified on-demand table. If you use this parameter, you must specify MaxReadRequestUnits, MaxWriteRequestUnits, or both.
    public var onDemandThroughputOverride: DynamoDBClientTypes.OnDemandThroughput?
    /// Provisioned throughput settings for the restored table.
    public var provisionedThroughputOverride: DynamoDBClientTypes.ProvisionedThroughput?
    /// Time in the past to restore the table to.
    public var restoreDateTime: Foundation.Date?
    /// The DynamoDB table that will be restored. This value is an Amazon Resource Name (ARN).
    public var sourceTableArn: Swift.String?
    /// Name of the source table that is being restored.
    public var sourceTableName: Swift.String?
    /// The new server-side encryption settings for the restored table.
    public var sseSpecificationOverride: DynamoDBClientTypes.SSESpecification?
    /// The name of the new table to which it must be restored to.
    /// This member is required.
    public var targetTableName: Swift.String?
    /// Restore the table to the latest possible time. LatestRestorableDateTime is typically 5 minutes before the current time.
    public var useLatestRestorableTime: Swift.Bool?

    public init(
        billingModeOverride: DynamoDBClientTypes.BillingMode? = nil,
        globalSecondaryIndexOverride: [DynamoDBClientTypes.GlobalSecondaryIndex]? = nil,
        localSecondaryIndexOverride: [DynamoDBClientTypes.LocalSecondaryIndex]? = nil,
        onDemandThroughputOverride: DynamoDBClientTypes.OnDemandThroughput? = nil,
        provisionedThroughputOverride: DynamoDBClientTypes.ProvisionedThroughput? = nil,
        restoreDateTime: Foundation.Date? = nil,
        sourceTableArn: Swift.String? = nil,
        sourceTableName: Swift.String? = nil,
        sseSpecificationOverride: DynamoDBClientTypes.SSESpecification? = nil,
        targetTableName: Swift.String? = nil,
        useLatestRestorableTime: Swift.Bool? = nil
    )
    {
        self.billingModeOverride = billingModeOverride
        self.globalSecondaryIndexOverride = globalSecondaryIndexOverride
        self.localSecondaryIndexOverride = localSecondaryIndexOverride
        self.onDemandThroughputOverride = onDemandThroughputOverride
        self.provisionedThroughputOverride = provisionedThroughputOverride
        self.restoreDateTime = restoreDateTime
        self.sourceTableArn = sourceTableArn
        self.sourceTableName = sourceTableName
        self.sseSpecificationOverride = sseSpecificationOverride
        self.targetTableName = targetTableName
        self.useLatestRestorableTime = useLatestRestorableTime
    }
}

public struct RestoreTableToPointInTimeOutput {
    /// Represents the properties of a table.
    public var tableDescription: DynamoDBClientTypes.TableDescription?

    public init(
        tableDescription: DynamoDBClientTypes.TableDescription? = nil
    )
    {
        self.tableDescription = tableDescription
    }
}

public struct TagResourceInput {
    /// Identifies the Amazon DynamoDB resource to which tags should be added. This value is an Amazon Resource Name (ARN).
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The tags to be assigned to the Amazon DynamoDB resource.
    /// This member is required.
    public var tags: [DynamoDBClientTypes.Tag]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [DynamoDBClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

public struct UntagResourceInput {
    /// The DynamoDB resource that the tags will be removed from. This value is an Amazon Resource Name (ARN).
    /// This member is required.
    public var resourceArn: Swift.String?
    /// A list of tag keys. Existing tags of the resource whose keys are members of this list will be removed from the DynamoDB resource.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

extension DynamoDBClientTypes {
    /// Represents the settings used to enable point in time recovery.
    public struct PointInTimeRecoverySpecification {
        /// Indicates whether point in time recovery is enabled (true) or disabled (false) on the table.
        /// This member is required.
        public var pointInTimeRecoveryEnabled: Swift.Bool?

        public init(
            pointInTimeRecoveryEnabled: Swift.Bool? = nil
        )
        {
            self.pointInTimeRecoveryEnabled = pointInTimeRecoveryEnabled
        }
    }

}

public struct UpdateContinuousBackupsInput {
    /// Represents the settings used to enable point in time recovery.
    /// This member is required.
    public var pointInTimeRecoverySpecification: DynamoDBClientTypes.PointInTimeRecoverySpecification?
    /// The name of the table. You can also provide the Amazon Resource Name (ARN) of the table in this parameter.
    /// This member is required.
    public var tableName: Swift.String?

    public init(
        pointInTimeRecoverySpecification: DynamoDBClientTypes.PointInTimeRecoverySpecification? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.pointInTimeRecoverySpecification = pointInTimeRecoverySpecification
        self.tableName = tableName
    }
}

public struct UpdateContinuousBackupsOutput {
    /// Represents the continuous backups and point in time recovery settings on the table.
    public var continuousBackupsDescription: DynamoDBClientTypes.ContinuousBackupsDescription?

    public init(
        continuousBackupsDescription: DynamoDBClientTypes.ContinuousBackupsDescription? = nil
    )
    {
        self.continuousBackupsDescription = continuousBackupsDescription
    }
}

public struct UpdateContributorInsightsInput {
    /// Represents the contributor insights action.
    /// This member is required.
    public var contributorInsightsAction: DynamoDBClientTypes.ContributorInsightsAction?
    /// The global secondary index name, if applicable.
    public var indexName: Swift.String?
    /// The name of the table. You can also provide the Amazon Resource Name (ARN) of the table in this parameter.
    /// This member is required.
    public var tableName: Swift.String?

    public init(
        contributorInsightsAction: DynamoDBClientTypes.ContributorInsightsAction? = nil,
        indexName: Swift.String? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.contributorInsightsAction = contributorInsightsAction
        self.indexName = indexName
        self.tableName = tableName
    }
}

public struct UpdateContributorInsightsOutput {
    /// The status of contributor insights
    public var contributorInsightsStatus: DynamoDBClientTypes.ContributorInsightsStatus?
    /// The name of the global secondary index, if applicable.
    public var indexName: Swift.String?
    /// The name of the table.
    public var tableName: Swift.String?

    public init(
        contributorInsightsStatus: DynamoDBClientTypes.ContributorInsightsStatus? = nil,
        indexName: Swift.String? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.contributorInsightsStatus = contributorInsightsStatus
        self.indexName = indexName
        self.tableName = tableName
    }
}

/// The specified replica is already part of the global table.
public struct ReplicaAlreadyExistsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ReplicaAlreadyExistsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified replica is no longer part of the global table.
public struct ReplicaNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ReplicaNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension DynamoDBClientTypes {
    /// Represents one of the following:
    ///
    /// * A new replica to be added to an existing global table.
    ///
    /// * New parameters for an existing replica.
    ///
    /// * An existing replica to be removed from an existing global table.
    public struct ReplicaUpdate {
        /// The parameters required for creating a replica on an existing global table.
        public var create: DynamoDBClientTypes.CreateReplicaAction?
        /// The name of the existing replica to be removed.
        public var delete: DynamoDBClientTypes.DeleteReplicaAction?

        public init(
            create: DynamoDBClientTypes.CreateReplicaAction? = nil,
            delete: DynamoDBClientTypes.DeleteReplicaAction? = nil
        )
        {
            self.create = create
            self.delete = delete
        }
    }

}

public struct UpdateGlobalTableInput {
    /// The global table name.
    /// This member is required.
    public var globalTableName: Swift.String?
    /// A list of Regions that should be added or removed from the global table.
    /// This member is required.
    public var replicaUpdates: [DynamoDBClientTypes.ReplicaUpdate]?

    public init(
        globalTableName: Swift.String? = nil,
        replicaUpdates: [DynamoDBClientTypes.ReplicaUpdate]? = nil
    )
    {
        self.globalTableName = globalTableName
        self.replicaUpdates = replicaUpdates
    }
}

public struct UpdateGlobalTableOutput {
    /// Contains the details of the global table.
    public var globalTableDescription: DynamoDBClientTypes.GlobalTableDescription?

    public init(
        globalTableDescription: DynamoDBClientTypes.GlobalTableDescription? = nil
    )
    {
        self.globalTableDescription = globalTableDescription
    }
}

/// The operation tried to access a nonexistent index.
public struct IndexNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "IndexNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension DynamoDBClientTypes {
    /// Represents the settings of a global secondary index for a global table that will be modified.
    public struct GlobalTableGlobalSecondaryIndexSettingsUpdate {
        /// The name of the global secondary index. The name must be unique among all other indexes on this table.
        /// This member is required.
        public var indexName: Swift.String?
        /// Auto scaling settings for managing a global secondary index's write capacity units.
        public var provisionedWriteCapacityAutoScalingSettingsUpdate: DynamoDBClientTypes.AutoScalingSettingsUpdate?
        /// The maximum number of writes consumed per second before DynamoDB returns a ThrottlingException.
        public var provisionedWriteCapacityUnits: Swift.Int?

        public init(
            indexName: Swift.String? = nil,
            provisionedWriteCapacityAutoScalingSettingsUpdate: DynamoDBClientTypes.AutoScalingSettingsUpdate? = nil,
            provisionedWriteCapacityUnits: Swift.Int? = nil
        )
        {
            self.indexName = indexName
            self.provisionedWriteCapacityAutoScalingSettingsUpdate = provisionedWriteCapacityAutoScalingSettingsUpdate
            self.provisionedWriteCapacityUnits = provisionedWriteCapacityUnits
        }
    }

}

extension DynamoDBClientTypes {
    /// Represents the settings of a global secondary index for a global table that will be modified.
    public struct ReplicaGlobalSecondaryIndexSettingsUpdate {
        /// The name of the global secondary index. The name must be unique among all other indexes on this table.
        /// This member is required.
        public var indexName: Swift.String?
        /// Auto scaling settings for managing a global secondary index replica's read capacity units.
        public var provisionedReadCapacityAutoScalingSettingsUpdate: DynamoDBClientTypes.AutoScalingSettingsUpdate?
        /// The maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException.
        public var provisionedReadCapacityUnits: Swift.Int?

        public init(
            indexName: Swift.String? = nil,
            provisionedReadCapacityAutoScalingSettingsUpdate: DynamoDBClientTypes.AutoScalingSettingsUpdate? = nil,
            provisionedReadCapacityUnits: Swift.Int? = nil
        )
        {
            self.indexName = indexName
            self.provisionedReadCapacityAutoScalingSettingsUpdate = provisionedReadCapacityAutoScalingSettingsUpdate
            self.provisionedReadCapacityUnits = provisionedReadCapacityUnits
        }
    }

}

extension DynamoDBClientTypes {
    /// Represents the settings for a global table in a Region that will be modified.
    public struct ReplicaSettingsUpdate {
        /// The Region of the replica to be added.
        /// This member is required.
        public var regionName: Swift.String?
        /// Represents the settings of a global secondary index for a global table that will be modified.
        public var replicaGlobalSecondaryIndexSettingsUpdate: [DynamoDBClientTypes.ReplicaGlobalSecondaryIndexSettingsUpdate]?
        /// Auto scaling settings for managing a global table replica's read capacity units.
        public var replicaProvisionedReadCapacityAutoScalingSettingsUpdate: DynamoDBClientTypes.AutoScalingSettingsUpdate?
        /// The maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException. For more information, see [Specifying Read and Write Requirements](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput) in the Amazon DynamoDB Developer Guide.
        public var replicaProvisionedReadCapacityUnits: Swift.Int?
        /// Replica-specific table class. If not specified, uses the source table's table class.
        public var replicaTableClass: DynamoDBClientTypes.TableClass?

        public init(
            regionName: Swift.String? = nil,
            replicaGlobalSecondaryIndexSettingsUpdate: [DynamoDBClientTypes.ReplicaGlobalSecondaryIndexSettingsUpdate]? = nil,
            replicaProvisionedReadCapacityAutoScalingSettingsUpdate: DynamoDBClientTypes.AutoScalingSettingsUpdate? = nil,
            replicaProvisionedReadCapacityUnits: Swift.Int? = nil,
            replicaTableClass: DynamoDBClientTypes.TableClass? = nil
        )
        {
            self.regionName = regionName
            self.replicaGlobalSecondaryIndexSettingsUpdate = replicaGlobalSecondaryIndexSettingsUpdate
            self.replicaProvisionedReadCapacityAutoScalingSettingsUpdate = replicaProvisionedReadCapacityAutoScalingSettingsUpdate
            self.replicaProvisionedReadCapacityUnits = replicaProvisionedReadCapacityUnits
            self.replicaTableClass = replicaTableClass
        }
    }

}

public struct UpdateGlobalTableSettingsInput {
    /// The billing mode of the global table. If GlobalTableBillingMode is not specified, the global table defaults to PROVISIONED capacity billing mode.
    ///
    /// * PROVISIONED - We recommend using PROVISIONED for predictable workloads. PROVISIONED sets the billing mode to [Provisioned capacity mode](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/provisioned-capacity-mode.html).
    ///
    /// * PAY_PER_REQUEST - We recommend using PAY_PER_REQUEST for unpredictable workloads. PAY_PER_REQUEST sets the billing mode to [On-demand capacity mode](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/on-demand-capacity-mode.html).
    public var globalTableBillingMode: DynamoDBClientTypes.BillingMode?
    /// Represents the settings of a global secondary index for a global table that will be modified.
    public var globalTableGlobalSecondaryIndexSettingsUpdate: [DynamoDBClientTypes.GlobalTableGlobalSecondaryIndexSettingsUpdate]?
    /// The name of the global table
    /// This member is required.
    public var globalTableName: Swift.String?
    /// Auto scaling settings for managing provisioned write capacity for the global table.
    public var globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate: DynamoDBClientTypes.AutoScalingSettingsUpdate?
    /// The maximum number of writes consumed per second before DynamoDB returns a ThrottlingException.
    public var globalTableProvisionedWriteCapacityUnits: Swift.Int?
    /// Represents the settings for a global table in a Region that will be modified.
    public var replicaSettingsUpdate: [DynamoDBClientTypes.ReplicaSettingsUpdate]?

    public init(
        globalTableBillingMode: DynamoDBClientTypes.BillingMode? = nil,
        globalTableGlobalSecondaryIndexSettingsUpdate: [DynamoDBClientTypes.GlobalTableGlobalSecondaryIndexSettingsUpdate]? = nil,
        globalTableName: Swift.String? = nil,
        globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate: DynamoDBClientTypes.AutoScalingSettingsUpdate? = nil,
        globalTableProvisionedWriteCapacityUnits: Swift.Int? = nil,
        replicaSettingsUpdate: [DynamoDBClientTypes.ReplicaSettingsUpdate]? = nil
    )
    {
        self.globalTableBillingMode = globalTableBillingMode
        self.globalTableGlobalSecondaryIndexSettingsUpdate = globalTableGlobalSecondaryIndexSettingsUpdate
        self.globalTableName = globalTableName
        self.globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate = globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate
        self.globalTableProvisionedWriteCapacityUnits = globalTableProvisionedWriteCapacityUnits
        self.replicaSettingsUpdate = replicaSettingsUpdate
    }
}

public struct UpdateGlobalTableSettingsOutput {
    /// The name of the global table.
    public var globalTableName: Swift.String?
    /// The Region-specific settings for the global table.
    public var replicaSettings: [DynamoDBClientTypes.ReplicaSettingsDescription]?

    public init(
        globalTableName: Swift.String? = nil,
        replicaSettings: [DynamoDBClientTypes.ReplicaSettingsDescription]? = nil
    )
    {
        self.globalTableName = globalTableName
        self.replicaSettings = replicaSettings
    }
}

extension DynamoDBClientTypes {
    /// Enables updating the configuration for Kinesis Streaming.
    public struct UpdateKinesisStreamingConfiguration {
        /// Enables updating the precision of Kinesis data stream timestamp.
        public var approximateCreationDateTimePrecision: DynamoDBClientTypes.ApproximateCreationDateTimePrecision?

        public init(
            approximateCreationDateTimePrecision: DynamoDBClientTypes.ApproximateCreationDateTimePrecision? = nil
        )
        {
            self.approximateCreationDateTimePrecision = approximateCreationDateTimePrecision
        }
    }

}

public struct UpdateKinesisStreamingDestinationInput {
    /// The Amazon Resource Name (ARN) for the Kinesis stream input.
    /// This member is required.
    public var streamArn: Swift.String?
    /// The table name for the Kinesis streaming destination input. You can also provide the ARN of the table in this parameter.
    /// This member is required.
    public var tableName: Swift.String?
    /// The command to update the Kinesis stream configuration.
    public var updateKinesisStreamingConfiguration: DynamoDBClientTypes.UpdateKinesisStreamingConfiguration?

    public init(
        streamArn: Swift.String? = nil,
        tableName: Swift.String? = nil,
        updateKinesisStreamingConfiguration: DynamoDBClientTypes.UpdateKinesisStreamingConfiguration? = nil
    )
    {
        self.streamArn = streamArn
        self.tableName = tableName
        self.updateKinesisStreamingConfiguration = updateKinesisStreamingConfiguration
    }
}

public struct UpdateKinesisStreamingDestinationOutput {
    /// The status of the attempt to update the Kinesis streaming destination output.
    public var destinationStatus: DynamoDBClientTypes.DestinationStatus?
    /// The ARN for the Kinesis stream input.
    public var streamArn: Swift.String?
    /// The table name for the Kinesis streaming destination output.
    public var tableName: Swift.String?
    /// The command to update the Kinesis streaming destination configuration.
    public var updateKinesisStreamingConfiguration: DynamoDBClientTypes.UpdateKinesisStreamingConfiguration?

    public init(
        destinationStatus: DynamoDBClientTypes.DestinationStatus? = nil,
        streamArn: Swift.String? = nil,
        tableName: Swift.String? = nil,
        updateKinesisStreamingConfiguration: DynamoDBClientTypes.UpdateKinesisStreamingConfiguration? = nil
    )
    {
        self.destinationStatus = destinationStatus
        self.streamArn = streamArn
        self.tableName = tableName
        self.updateKinesisStreamingConfiguration = updateKinesisStreamingConfiguration
    }
}

extension DynamoDBClientTypes {
    /// Represents the new provisioned throughput settings to be applied to a global secondary index.
    public struct UpdateGlobalSecondaryIndexAction {
        /// The name of the global secondary index to be updated.
        /// This member is required.
        public var indexName: Swift.String?
        /// Updates the maximum number of read and write units for the specified global secondary index. If you use this parameter, you must specify MaxReadRequestUnits, MaxWriteRequestUnits, or both.
        public var onDemandThroughput: DynamoDBClientTypes.OnDemandThroughput?
        /// Represents the provisioned throughput settings for the specified global secondary index. For current minimum and maximum provisioned throughput values, see [Service, Account, and Table Quotas](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html) in the Amazon DynamoDB Developer Guide.
        public var provisionedThroughput: DynamoDBClientTypes.ProvisionedThroughput?

        public init(
            indexName: Swift.String? = nil,
            onDemandThroughput: DynamoDBClientTypes.OnDemandThroughput? = nil,
            provisionedThroughput: DynamoDBClientTypes.ProvisionedThroughput? = nil
        )
        {
            self.indexName = indexName
            self.onDemandThroughput = onDemandThroughput
            self.provisionedThroughput = provisionedThroughput
        }
    }

}

extension DynamoDBClientTypes {
    /// Represents one of the following:
    ///
    /// * A new global secondary index to be added to an existing table.
    ///
    /// * New provisioned throughput parameters for an existing global secondary index.
    ///
    /// * An existing global secondary index to be removed from an existing table.
    public struct GlobalSecondaryIndexUpdate {
        /// The parameters required for creating a global secondary index on an existing table:
        ///
        /// * IndexName
        ///
        /// * KeySchema
        ///
        /// * AttributeDefinitions
        ///
        /// * Projection
        ///
        /// * ProvisionedThroughput
        public var create: DynamoDBClientTypes.CreateGlobalSecondaryIndexAction?
        /// The name of an existing global secondary index to be removed.
        public var delete: DynamoDBClientTypes.DeleteGlobalSecondaryIndexAction?
        /// The name of an existing global secondary index, along with new provisioned throughput settings to be applied to that index.
        public var update: DynamoDBClientTypes.UpdateGlobalSecondaryIndexAction?

        public init(
            create: DynamoDBClientTypes.CreateGlobalSecondaryIndexAction? = nil,
            delete: DynamoDBClientTypes.DeleteGlobalSecondaryIndexAction? = nil,
            update: DynamoDBClientTypes.UpdateGlobalSecondaryIndexAction? = nil
        )
        {
            self.create = create
            self.delete = delete
            self.update = update
        }
    }

}

extension DynamoDBClientTypes {
    /// Represents a replica to be modified.
    public struct UpdateReplicationGroupMemberAction {
        /// Replica-specific global secondary index settings.
        public var globalSecondaryIndexes: [DynamoDBClientTypes.ReplicaGlobalSecondaryIndex]?
        /// The KMS key of the replica that should be used for KMS encryption. To specify a key, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. Note that you should only provide this parameter if the key is different from the default DynamoDB KMS key alias/aws/dynamodb.
        public var kmsMasterKeyId: Swift.String?
        /// Overrides the maximum on-demand throughput for the replica table.
        public var onDemandThroughputOverride: DynamoDBClientTypes.OnDemandThroughputOverride?
        /// Replica-specific provisioned throughput. If not specified, uses the source table's provisioned throughput settings.
        public var provisionedThroughputOverride: DynamoDBClientTypes.ProvisionedThroughputOverride?
        /// The Region where the replica exists.
        /// This member is required.
        public var regionName: Swift.String?
        /// Replica-specific table class. If not specified, uses the source table's table class.
        public var tableClassOverride: DynamoDBClientTypes.TableClass?

        public init(
            globalSecondaryIndexes: [DynamoDBClientTypes.ReplicaGlobalSecondaryIndex]? = nil,
            kmsMasterKeyId: Swift.String? = nil,
            onDemandThroughputOverride: DynamoDBClientTypes.OnDemandThroughputOverride? = nil,
            provisionedThroughputOverride: DynamoDBClientTypes.ProvisionedThroughputOverride? = nil,
            regionName: Swift.String? = nil,
            tableClassOverride: DynamoDBClientTypes.TableClass? = nil
        )
        {
            self.globalSecondaryIndexes = globalSecondaryIndexes
            self.kmsMasterKeyId = kmsMasterKeyId
            self.onDemandThroughputOverride = onDemandThroughputOverride
            self.provisionedThroughputOverride = provisionedThroughputOverride
            self.regionName = regionName
            self.tableClassOverride = tableClassOverride
        }
    }

}

extension DynamoDBClientTypes {
    /// Represents one of the following:
    ///
    /// * A new replica to be added to an existing regional table or global table. This request invokes the CreateTableReplica action in the destination Region.
    ///
    /// * New parameters for an existing replica. This request invokes the UpdateTable action in the destination Region.
    ///
    /// * An existing replica to be deleted. The request invokes the DeleteTableReplica action in the destination Region, deleting the replica and all if its items in the destination Region.
    ///
    ///
    /// When you manually remove a table or global table replica, you do not automatically remove any associated scalable targets, scaling policies, or CloudWatch alarms.
    public struct ReplicationGroupUpdate {
        /// The parameters required for creating a replica for the table.
        public var create: DynamoDBClientTypes.CreateReplicationGroupMemberAction?
        /// The parameters required for deleting a replica for the table.
        public var delete: DynamoDBClientTypes.DeleteReplicationGroupMemberAction?
        /// The parameters required for updating a replica for the table.
        public var update: DynamoDBClientTypes.UpdateReplicationGroupMemberAction?

        public init(
            create: DynamoDBClientTypes.CreateReplicationGroupMemberAction? = nil,
            delete: DynamoDBClientTypes.DeleteReplicationGroupMemberAction? = nil,
            update: DynamoDBClientTypes.UpdateReplicationGroupMemberAction? = nil
        )
        {
            self.create = create
            self.delete = delete
            self.update = update
        }
    }

}

/// Represents the input of an UpdateTable operation.
public struct UpdateTableInput {
    /// An array of attributes that describe the key schema for the table and indexes. If you are adding a new global secondary index to the table, AttributeDefinitions must include the key element(s) of the new index.
    public var attributeDefinitions: [DynamoDBClientTypes.AttributeDefinition]?
    /// Controls how you are charged for read and write throughput and how you manage capacity. When switching from pay-per-request to provisioned capacity, initial provisioned capacity values must be set. The initial provisioned capacity values are estimated based on the consumed read and write capacity of your table and global secondary indexes over the past 30 minutes.
    ///
    /// * PROVISIONED - We recommend using PROVISIONED for predictable workloads. PROVISIONED sets the billing mode to [Provisioned capacity mode](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/provisioned-capacity-mode.html).
    ///
    /// * PAY_PER_REQUEST - We recommend using PAY_PER_REQUEST for unpredictable workloads. PAY_PER_REQUEST sets the billing mode to [On-demand capacity mode](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/on-demand-capacity-mode.html).
    public var billingMode: DynamoDBClientTypes.BillingMode?
    /// Indicates whether deletion protection is to be enabled (true) or disabled (false) on the table.
    public var deletionProtectionEnabled: Swift.Bool?
    /// An array of one or more global secondary indexes for the table. For each index in the array, you can request one action:
    ///
    /// * Create - add a new global secondary index to the table.
    ///
    /// * Update - modify the provisioned throughput settings of an existing global secondary index.
    ///
    /// * Delete - remove a global secondary index from the table.
    ///
    ///
    /// You can create or delete only one global secondary index per UpdateTable operation. For more information, see [Managing Global Secondary Indexes](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GSI.OnlineOps.html) in the Amazon DynamoDB Developer Guide.
    public var globalSecondaryIndexUpdates: [DynamoDBClientTypes.GlobalSecondaryIndexUpdate]?
    /// Updates the maximum number of read and write units for the specified table in on-demand capacity mode. If you use this parameter, you must specify MaxReadRequestUnits, MaxWriteRequestUnits, or both.
    public var onDemandThroughput: DynamoDBClientTypes.OnDemandThroughput?
    /// The new provisioned throughput settings for the specified table or index.
    public var provisionedThroughput: DynamoDBClientTypes.ProvisionedThroughput?
    /// A list of replica update actions (create, delete, or update) for the table. For global tables, this property only applies to global tables using Version 2019.11.21 (Current version).
    public var replicaUpdates: [DynamoDBClientTypes.ReplicationGroupUpdate]?
    /// The new server-side encryption settings for the specified table.
    public var sseSpecification: DynamoDBClientTypes.SSESpecification?
    /// Represents the DynamoDB Streams configuration for the table. You receive a ValidationException if you try to enable a stream on a table that already has a stream, or if you try to disable a stream on a table that doesn't have a stream.
    public var streamSpecification: DynamoDBClientTypes.StreamSpecification?
    /// The table class of the table to be updated. Valid values are STANDARD and STANDARD_INFREQUENT_ACCESS.
    public var tableClass: DynamoDBClientTypes.TableClass?
    /// The name of the table to be updated. You can also provide the Amazon Resource Name (ARN) of the table in this parameter.
    /// This member is required.
    public var tableName: Swift.String?

    public init(
        attributeDefinitions: [DynamoDBClientTypes.AttributeDefinition]? = nil,
        billingMode: DynamoDBClientTypes.BillingMode? = nil,
        deletionProtectionEnabled: Swift.Bool? = nil,
        globalSecondaryIndexUpdates: [DynamoDBClientTypes.GlobalSecondaryIndexUpdate]? = nil,
        onDemandThroughput: DynamoDBClientTypes.OnDemandThroughput? = nil,
        provisionedThroughput: DynamoDBClientTypes.ProvisionedThroughput? = nil,
        replicaUpdates: [DynamoDBClientTypes.ReplicationGroupUpdate]? = nil,
        sseSpecification: DynamoDBClientTypes.SSESpecification? = nil,
        streamSpecification: DynamoDBClientTypes.StreamSpecification? = nil,
        tableClass: DynamoDBClientTypes.TableClass? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.attributeDefinitions = attributeDefinitions
        self.billingMode = billingMode
        self.deletionProtectionEnabled = deletionProtectionEnabled
        self.globalSecondaryIndexUpdates = globalSecondaryIndexUpdates
        self.onDemandThroughput = onDemandThroughput
        self.provisionedThroughput = provisionedThroughput
        self.replicaUpdates = replicaUpdates
        self.sseSpecification = sseSpecification
        self.streamSpecification = streamSpecification
        self.tableClass = tableClass
        self.tableName = tableName
    }
}

/// Represents the output of an UpdateTable operation.
public struct UpdateTableOutput {
    /// Represents the properties of the table.
    public var tableDescription: DynamoDBClientTypes.TableDescription?

    public init(
        tableDescription: DynamoDBClientTypes.TableDescription? = nil
    )
    {
        self.tableDescription = tableDescription
    }
}

extension DynamoDBClientTypes {
    /// Represents the auto scaling settings of a global secondary index for a global table that will be modified.
    public struct GlobalSecondaryIndexAutoScalingUpdate {
        /// The name of the global secondary index.
        public var indexName: Swift.String?
        /// Represents the auto scaling settings to be modified for a global table or global secondary index.
        public var provisionedWriteCapacityAutoScalingUpdate: DynamoDBClientTypes.AutoScalingSettingsUpdate?

        public init(
            indexName: Swift.String? = nil,
            provisionedWriteCapacityAutoScalingUpdate: DynamoDBClientTypes.AutoScalingSettingsUpdate? = nil
        )
        {
            self.indexName = indexName
            self.provisionedWriteCapacityAutoScalingUpdate = provisionedWriteCapacityAutoScalingUpdate
        }
    }

}

extension DynamoDBClientTypes {
    /// Represents the auto scaling settings of a global secondary index for a replica that will be modified.
    public struct ReplicaGlobalSecondaryIndexAutoScalingUpdate {
        /// The name of the global secondary index.
        public var indexName: Swift.String?
        /// Represents the auto scaling settings to be modified for a global table or global secondary index.
        public var provisionedReadCapacityAutoScalingUpdate: DynamoDBClientTypes.AutoScalingSettingsUpdate?

        public init(
            indexName: Swift.String? = nil,
            provisionedReadCapacityAutoScalingUpdate: DynamoDBClientTypes.AutoScalingSettingsUpdate? = nil
        )
        {
            self.indexName = indexName
            self.provisionedReadCapacityAutoScalingUpdate = provisionedReadCapacityAutoScalingUpdate
        }
    }

}

extension DynamoDBClientTypes {
    /// Represents the auto scaling settings of a replica that will be modified.
    public struct ReplicaAutoScalingUpdate {
        /// The Region where the replica exists.
        /// This member is required.
        public var regionName: Swift.String?
        /// Represents the auto scaling settings of global secondary indexes that will be modified.
        public var replicaGlobalSecondaryIndexUpdates: [DynamoDBClientTypes.ReplicaGlobalSecondaryIndexAutoScalingUpdate]?
        /// Represents the auto scaling settings to be modified for a global table or global secondary index.
        public var replicaProvisionedReadCapacityAutoScalingUpdate: DynamoDBClientTypes.AutoScalingSettingsUpdate?

        public init(
            regionName: Swift.String? = nil,
            replicaGlobalSecondaryIndexUpdates: [DynamoDBClientTypes.ReplicaGlobalSecondaryIndexAutoScalingUpdate]? = nil,
            replicaProvisionedReadCapacityAutoScalingUpdate: DynamoDBClientTypes.AutoScalingSettingsUpdate? = nil
        )
        {
            self.regionName = regionName
            self.replicaGlobalSecondaryIndexUpdates = replicaGlobalSecondaryIndexUpdates
            self.replicaProvisionedReadCapacityAutoScalingUpdate = replicaProvisionedReadCapacityAutoScalingUpdate
        }
    }

}

public struct UpdateTableReplicaAutoScalingInput {
    /// Represents the auto scaling settings of the global secondary indexes of the replica to be updated.
    public var globalSecondaryIndexUpdates: [DynamoDBClientTypes.GlobalSecondaryIndexAutoScalingUpdate]?
    /// Represents the auto scaling settings to be modified for a global table or global secondary index.
    public var provisionedWriteCapacityAutoScalingUpdate: DynamoDBClientTypes.AutoScalingSettingsUpdate?
    /// Represents the auto scaling settings of replicas of the table that will be modified.
    public var replicaUpdates: [DynamoDBClientTypes.ReplicaAutoScalingUpdate]?
    /// The name of the global table to be updated. You can also provide the Amazon Resource Name (ARN) of the table in this parameter.
    /// This member is required.
    public var tableName: Swift.String?

    public init(
        globalSecondaryIndexUpdates: [DynamoDBClientTypes.GlobalSecondaryIndexAutoScalingUpdate]? = nil,
        provisionedWriteCapacityAutoScalingUpdate: DynamoDBClientTypes.AutoScalingSettingsUpdate? = nil,
        replicaUpdates: [DynamoDBClientTypes.ReplicaAutoScalingUpdate]? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.globalSecondaryIndexUpdates = globalSecondaryIndexUpdates
        self.provisionedWriteCapacityAutoScalingUpdate = provisionedWriteCapacityAutoScalingUpdate
        self.replicaUpdates = replicaUpdates
        self.tableName = tableName
    }
}

public struct UpdateTableReplicaAutoScalingOutput {
    /// Returns information about the auto scaling settings of a table with replicas.
    public var tableAutoScalingDescription: DynamoDBClientTypes.TableAutoScalingDescription?

    public init(
        tableAutoScalingDescription: DynamoDBClientTypes.TableAutoScalingDescription? = nil
    )
    {
        self.tableAutoScalingDescription = tableAutoScalingDescription
    }
}

extension DynamoDBClientTypes {
    /// Represents the settings used to enable or disable Time to Live (TTL) for the specified table.
    public struct TimeToLiveSpecification {
        /// The name of the TTL attribute used to store the expiration time for items in the table.
        /// This member is required.
        public var attributeName: Swift.String?
        /// Indicates whether TTL is to be enabled (true) or disabled (false) on the table.
        /// This member is required.
        public var enabled: Swift.Bool?

        public init(
            attributeName: Swift.String? = nil,
            enabled: Swift.Bool? = nil
        )
        {
            self.attributeName = attributeName
            self.enabled = enabled
        }
    }

}

/// Represents the input of an UpdateTimeToLive operation.
public struct UpdateTimeToLiveInput {
    /// The name of the table to be configured. You can also provide the Amazon Resource Name (ARN) of the table in this parameter.
    /// This member is required.
    public var tableName: Swift.String?
    /// Represents the settings used to enable or disable Time to Live for the specified table.
    /// This member is required.
    public var timeToLiveSpecification: DynamoDBClientTypes.TimeToLiveSpecification?

    public init(
        tableName: Swift.String? = nil,
        timeToLiveSpecification: DynamoDBClientTypes.TimeToLiveSpecification? = nil
    )
    {
        self.tableName = tableName
        self.timeToLiveSpecification = timeToLiveSpecification
    }
}

public struct UpdateTimeToLiveOutput {
    /// Represents the output of an UpdateTimeToLive operation.
    public var timeToLiveSpecification: DynamoDBClientTypes.TimeToLiveSpecification?

    public init(
        timeToLiveSpecification: DynamoDBClientTypes.TimeToLiveSpecification? = nil
    )
    {
        self.timeToLiveSpecification = timeToLiveSpecification
    }
}

extension DynamoDBClientTypes {
    /// Represents the data for an attribute. Each attribute value is described as a name-value pair. The name is the data type, and the value is the data itself. For more information, see [Data Types](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes) in the Amazon DynamoDB Developer Guide.
    public indirect enum AttributeValue : Swift.Equatable {
        /// An attribute of type String. For example: "S": "Hello"
        case s(Swift.String)
        /// An attribute of type Number. For example: "N": "123.45" Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.
        case n(Swift.String)
        /// An attribute of type Binary. For example: "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"
        case b(Foundation.Data)
        /// An attribute of type String Set. For example: "SS": ["Giraffe", "Hippo" ,"Zebra"]
        case ss([Swift.String])
        /// An attribute of type Number Set. For example: "NS": ["42.2", "-19", "7.5", "3.14"] Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.
        case ns([Swift.String])
        /// An attribute of type Binary Set. For example: "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]
        case bs([Foundation.Data])
        /// An attribute of type Map. For example: "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}
        case m([Swift.String: DynamoDBClientTypes.AttributeValue])
        /// An attribute of type List. For example: "L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N": "3.14159"}]
        case l([DynamoDBClientTypes.AttributeValue])
        /// An attribute of type Null. For example: "NULL": true
        case null(Swift.Bool)
        /// An attribute of type Boolean. For example: "BOOL": true
        case bool(Swift.Bool)
        case sdkUnknown(Swift.String)
    }

}

extension DynamoDBClientTypes {
    /// For the UpdateItem operation, represents the attributes to be modified, the action to perform on each, and the new value for each. You cannot use UpdateItem to update any primary key attributes. Instead, you will need to delete the item, and then use PutItem to create a new item with new attributes. Attribute values cannot be null; string and binary type attributes must have lengths greater than zero; and set type attributes must not be empty. Requests with empty values will be rejected with a ValidationException exception.
    public struct AttributeValueUpdate {
        /// Specifies how to perform the update. Valid values are PUT (default), DELETE, and ADD. The behavior depends on whether the specified primary key already exists in the table. If an item with the specified Key is found in the table:
        ///
        /// * PUT - Adds the specified attribute to the item. If the attribute already exists, it is replaced by the new value.
        ///
        /// * DELETE - If no value is specified, the attribute and its value are removed from the item. The data type of the specified value must match the existing value's data type. If a set of values is specified, then those values are subtracted from the old set. For example, if the attribute value was the set [a,b,c] and the DELETE action specified [a,c], then the final attribute value would be [b]. Specifying an empty set is an error.
        ///
        /// * ADD - If the attribute does not already exist, then the attribute and its values are added to the item. If the attribute does exist, then the behavior of ADD depends on the data type of the attribute:
        ///
        /// * If the existing attribute is a number, and if Value is also a number, then the Value is mathematically added to the existing attribute. If Value is a negative number, then it is subtracted from the existing attribute. If you use ADD to increment or decrement a number value for an item that doesn't exist before the update, DynamoDB uses 0 as the initial value. In addition, if you use ADD to update an existing item, and intend to increment or decrement an attribute value which does not yet exist, DynamoDB uses 0 as the initial value. For example, suppose that the item you want to update does not yet have an attribute named itemcount, but you decide to ADD the number 3 to this attribute anyway, even though it currently does not exist. DynamoDB will create the itemcount attribute, set its initial value to 0, and finally add 3 to it. The result will be a new itemcount attribute in the item, with a value of 3.
        ///
        /// * If the existing data type is a set, and if the Value is also a set, then the Value is added to the existing set. (This is a set operation, not mathematical addition.) For example, if the attribute value was the set [1,2], and the ADD action specified [3], then the final attribute value would be [1,2,3]. An error occurs if an Add action is specified for a set attribute and the attribute type specified does not match the existing set type. Both sets must have the same primitive data type. For example, if the existing data type is a set of strings, the Value must also be a set of strings. The same holds true for number sets and binary sets.
        ///
        ///
        /// This action is only valid for an existing attribute whose data type is number or is a set. Do not use ADD for any other data types.
        ///
        ///
        /// If no item with the specified Key is found:
        ///
        /// * PUT - DynamoDB creates a new item with the specified primary key, and then adds the attribute.
        ///
        /// * DELETE - Nothing happens; there is no attribute to delete.
        ///
        /// * ADD - DynamoDB creates a new item with the supplied primary key and number (or set) for the attribute value. The only data types allowed are number, number set, string set or binary set.
        public var action: DynamoDBClientTypes.AttributeAction?
        /// Represents the data for an attribute. Each attribute value is described as a name-value pair. The name is the data type, and the value is the data itself. For more information, see [Data Types](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes) in the Amazon DynamoDB Developer Guide.
        public var value: DynamoDBClientTypes.AttributeValue?

        public init(
            action: DynamoDBClientTypes.AttributeAction? = nil,
            value: DynamoDBClientTypes.AttributeValue? = nil
        )
        {
            self.action = action
            self.value = value
        }
    }

}

extension DynamoDBClientTypes {
    /// An error associated with a statement in a PartiQL batch that was run.
    public struct BatchStatementError {
        /// The error code associated with the failed PartiQL batch statement.
        public var code: DynamoDBClientTypes.BatchStatementErrorCodeEnum?
        /// The item which caused the condition check to fail. This will be set if ReturnValuesOnConditionCheckFailure is specified as ALL_OLD.
        public var item: [Swift.String: DynamoDBClientTypes.AttributeValue]?
        /// The error message associated with the PartiQL batch response.
        public var message: Swift.String?

        public init(
            code: DynamoDBClientTypes.BatchStatementErrorCodeEnum? = nil,
            item: [Swift.String: DynamoDBClientTypes.AttributeValue]? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.item = item
            self.message = message
        }
    }

}

extension DynamoDBClientTypes {
    /// A PartiQL batch statement request.
    public struct BatchStatementRequest {
        /// The read consistency of the PartiQL batch request.
        public var consistentRead: Swift.Bool?
        /// The parameters associated with a PartiQL statement in the batch request.
        public var parameters: [DynamoDBClientTypes.AttributeValue]?
        /// An optional parameter that returns the item attributes for a PartiQL batch request operation that failed a condition check. There is no additional cost associated with requesting a return value aside from the small network and processing overhead of receiving a larger response. No read capacity units are consumed.
        public var returnValuesOnConditionCheckFailure: DynamoDBClientTypes.ReturnValuesOnConditionCheckFailure?
        /// A valid PartiQL statement.
        /// This member is required.
        public var statement: Swift.String?

        public init(
            consistentRead: Swift.Bool? = nil,
            parameters: [DynamoDBClientTypes.AttributeValue]? = nil,
            returnValuesOnConditionCheckFailure: DynamoDBClientTypes.ReturnValuesOnConditionCheckFailure? = nil,
            statement: Swift.String? = nil
        )
        {
            self.consistentRead = consistentRead
            self.parameters = parameters
            self.returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure
            self.statement = statement
        }
    }

}

extension DynamoDBClientTypes {
    /// An ordered list of errors for each item in the request which caused the transaction to get cancelled. The values of the list are ordered according to the ordering of the TransactWriteItems request parameter. If no error occurred for the associated item an error with a Null code and Null message will be present.
    public struct CancellationReason {
        /// Status code for the result of the cancelled transaction.
        public var code: Swift.String?
        /// Item in the request which caused the transaction to get cancelled.
        public var item: [Swift.String: DynamoDBClientTypes.AttributeValue]?
        /// Cancellation reason message description.
        public var message: Swift.String?

        public init(
            code: Swift.String? = nil,
            item: [Swift.String: DynamoDBClientTypes.AttributeValue]? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.item = item
            self.message = message
        }
    }

}

extension DynamoDBClientTypes {
    /// Represents the selection criteria for a Query or Scan operation:
    ///
    /// * For a Query operation, Condition is used for specifying the KeyConditions to use when querying a table or an index. For KeyConditions, only the following comparison operators are supported: EQ | LE | LT | GE | GT | BEGINS_WITH | BETWEENCondition is also used in a QueryFilter, which evaluates the query results and returns only the desired values.
    ///
    /// * For a Scan operation, Condition is used in a ScanFilter, which evaluates the scan results and returns only the desired values.
    public struct Condition {
        /// One or more values to evaluate against the supplied attribute. The number of values in the list depends on the ComparisonOperator being used. For type Number, value comparisons are numeric. String value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, a is greater than A, and a is greater than B. For a list of code values, see [http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters](http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters). For Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values.
        public var attributeValueList: [DynamoDBClientTypes.AttributeValue]?
        /// A comparator for evaluating attributes. For example, equals, greater than, less than, etc. The following comparison operators are available: EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN The following are descriptions of each comparison operator.
        ///
        /// * EQ : Equal. EQ is supported for all data types, including lists and maps. AttributeValueList can contain only one AttributeValue element of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not equal {"NS":["6", "2", "1"]}.
        ///
        /// * NE : Not equal. NE is supported for all data types, including lists and maps. AttributeValueList can contain only one AttributeValue of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an AttributeValue of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not equal {"NS":["6", "2", "1"]}.
        ///
        /// * LE : Less than or equal. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not compare to {"NS":["6", "2", "1"]}.
        ///
        /// * LT : Less than. AttributeValueList can contain only one AttributeValue of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not compare to {"NS":["6", "2", "1"]}.
        ///
        /// * GE : Greater than or equal. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not compare to {"NS":["6", "2", "1"]}.
        ///
        /// * GT : Greater than. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not compare to {"NS":["6", "2", "1"]}.
        ///
        /// * NOT_NULL : The attribute exists. NOT_NULL is supported for all data types, including lists and maps. This operator tests for the existence of an attribute, not its data type. If the data type of attribute "a" is null, and you evaluate it using NOT_NULL, the result is a Boolean true. This result is because the attribute "a" exists; its data type is not relevant to the NOT_NULL comparison operator.
        ///
        /// * NULL : The attribute does not exist. NULL is supported for all data types, including lists and maps. This operator tests for the nonexistence of an attribute, not its data type. If the data type of attribute "a" is null, and you evaluate it using NULL, the result is a Boolean false. This is because the attribute "a" exists; its data type is not relevant to the NULL comparison operator.
        ///
        /// * CONTAINS : Checks for a subsequence, or value in a set. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is of type String, then the operator checks for a substring match. If the target attribute of the comparison is of type Binary, then the operator looks for a subsequence of the target that matches the input. If the target attribute of the comparison is a set ("SS", "NS", or "BS"), then the operator evaluates to true if it finds an exact match with any member of the set. CONTAINS is supported for lists: When evaluating "a CONTAINS b", "a" can be a list; however, "b" cannot be a set, a map, or a list.
        ///
        /// * NOT_CONTAINS : Checks for absence of a subsequence, or absence of a value in a set. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is a String, then the operator checks for the absence of a substring match. If the target attribute of the comparison is Binary, then the operator checks for the absence of a subsequence of the target that matches the input. If the target attribute of the comparison is a set ("SS", "NS", or "BS"), then the operator evaluates to true if it does not find an exact match with any member of the set. NOT_CONTAINS is supported for lists: When evaluating "a NOT CONTAINS b", "a" can be a list; however, "b" cannot be a set, a map, or a list.
        ///
        /// * BEGINS_WITH : Checks for a prefix. AttributeValueList can contain only one AttributeValue of type String or Binary (not a Number or a set type). The target attribute of the comparison must be of type String or Binary (not a Number or a set type).
        ///
        /// * IN : Checks for matching elements in a list. AttributeValueList can contain one or more AttributeValue elements of type String, Number, or Binary. These attributes are compared against an existing attribute of an item. If any elements of the input are equal to the item attribute, the expression evaluates to true.
        ///
        /// * BETWEEN : Greater than or equal to the first value, and less than or equal to the second value. AttributeValueList must contain two AttributeValue elements of the same type, either String, Number, or Binary (not a set type). A target attribute matches if the target value is greater than, or equal to, the first element and less than, or equal to, the second element. If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not compare to {"N":"6"}. Also, {"N":"6"} does not compare to {"NS":["6", "2", "1"]}
        ///
        ///
        /// For usage examples of AttributeValueList and ComparisonOperator, see [Legacy Conditional Parameters](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html) in the Amazon DynamoDB Developer Guide.
        /// This member is required.
        public var comparisonOperator: DynamoDBClientTypes.ComparisonOperator?

        public init(
            attributeValueList: [DynamoDBClientTypes.AttributeValue]? = nil,
            comparisonOperator: DynamoDBClientTypes.ComparisonOperator? = nil
        )
        {
            self.attributeValueList = attributeValueList
            self.comparisonOperator = comparisonOperator
        }
    }

}

/// A condition specified in the operation could not be evaluated.
public struct ConditionalCheckFailedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Item which caused the ConditionalCheckFailedException.
        public internal(set) var item: [Swift.String: DynamoDBClientTypes.AttributeValue]? = nil
        /// The conditional request failed.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConditionalCheckFailedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        item: [Swift.String: DynamoDBClientTypes.AttributeValue]? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.item = item
        self.properties.message = message
    }
}

extension DynamoDBClientTypes {
    /// Represents a request to perform a DeleteItem operation on an item.
    public struct DeleteRequest {
        /// A map of attribute name to attribute values, representing the primary key of the item to delete. All of the table's primary key attributes must be specified, and their data types must match those of the table's key schema.
        /// This member is required.
        public var key: [Swift.String: DynamoDBClientTypes.AttributeValue]?

        public init(
            key: [Swift.String: DynamoDBClientTypes.AttributeValue]? = nil
        )
        {
            self.key = key
        }
    }

}

extension DynamoDBClientTypes {
    /// Specifies an item and related attribute values to retrieve in a TransactGetItem object.
    public struct Get {
        /// One or more substitution tokens for attribute names in the ProjectionExpression parameter.
        public var expressionAttributeNames: [Swift.String: Swift.String]?
        /// A map of attribute names to AttributeValue objects that specifies the primary key of the item to retrieve.
        /// This member is required.
        public var key: [Swift.String: DynamoDBClientTypes.AttributeValue]?
        /// A string that identifies one or more attributes of the specified item to retrieve from the table. The attributes in the expression must be separated by commas. If no attribute names are specified, then all attributes of the specified item are returned. If any of the requested attributes are not found, they do not appear in the result.
        public var projectionExpression: Swift.String?
        /// The name of the table from which to retrieve the specified item. You can also provide the Amazon Resource Name (ARN) of the table in this parameter.
        /// This member is required.
        public var tableName: Swift.String?

        public init(
            expressionAttributeNames: [Swift.String: Swift.String]? = nil,
            key: [Swift.String: DynamoDBClientTypes.AttributeValue]? = nil,
            projectionExpression: Swift.String? = nil,
            tableName: Swift.String? = nil
        )
        {
            self.expressionAttributeNames = expressionAttributeNames
            self.key = key
            self.projectionExpression = projectionExpression
            self.tableName = tableName
        }
    }

}

extension DynamoDBClientTypes {
    /// Information about item collections, if any, that were affected by the operation. ItemCollectionMetrics is only returned if the request asked for it. If the table does not have any local secondary indexes, this information is not returned in the response.
    public struct ItemCollectionMetrics {
        /// The partition key value of the item collection. This value is the same as the partition key value of the item.
        public var itemCollectionKey: [Swift.String: DynamoDBClientTypes.AttributeValue]?
        /// An estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit. The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.
        public var sizeEstimateRangeGB: [Swift.Double]?

        public init(
            itemCollectionKey: [Swift.String: DynamoDBClientTypes.AttributeValue]? = nil,
            sizeEstimateRangeGB: [Swift.Double]? = nil
        )
        {
            self.itemCollectionKey = itemCollectionKey
            self.sizeEstimateRangeGB = sizeEstimateRangeGB
        }
    }

}

extension DynamoDBClientTypes {
    /// Details for the requested item.
    public struct ItemResponse {
        /// Map of attribute data consisting of the data type and attribute value.
        public var item: [Swift.String: DynamoDBClientTypes.AttributeValue]?

        public init(
            item: [Swift.String: DynamoDBClientTypes.AttributeValue]? = nil
        )
        {
            self.item = item
        }
    }

}

extension DynamoDBClientTypes {
    /// Represents a PartiQL statement that uses parameters.
    public struct ParameterizedStatement {
        /// The parameter values.
        public var parameters: [DynamoDBClientTypes.AttributeValue]?
        /// An optional parameter that returns the item attributes for a PartiQL ParameterizedStatement operation that failed a condition check. There is no additional cost associated with requesting a return value aside from the small network and processing overhead of receiving a larger response. No read capacity units are consumed.
        public var returnValuesOnConditionCheckFailure: DynamoDBClientTypes.ReturnValuesOnConditionCheckFailure?
        /// A PartiQL statement that uses parameters.
        /// This member is required.
        public var statement: Swift.String?

        public init(
            parameters: [DynamoDBClientTypes.AttributeValue]? = nil,
            returnValuesOnConditionCheckFailure: DynamoDBClientTypes.ReturnValuesOnConditionCheckFailure? = nil,
            statement: Swift.String? = nil
        )
        {
            self.parameters = parameters
            self.returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure
            self.statement = statement
        }
    }

}

extension DynamoDBClientTypes {
    /// Represents a request to perform a PutItem operation on an item.
    public struct PutRequest {
        /// A map of attribute name to attribute values, representing the primary key of an item to be processed by PutItem. All of the table's primary key attributes must be specified, and their data types must match those of the table's key schema. If any attributes are present in the item that are part of an index key schema for the table, their types must match the index key schema.
        /// This member is required.
        public var item: [Swift.String: DynamoDBClientTypes.AttributeValue]?

        public init(
            item: [Swift.String: DynamoDBClientTypes.AttributeValue]? = nil
        )
        {
            self.item = item
        }
    }

}

public struct ExecuteStatementInput {
    /// The consistency of a read operation. If set to true, then a strongly consistent read is used; otherwise, an eventually consistent read is used.
    public var consistentRead: Swift.Bool?
    /// The maximum number of items to evaluate (not necessarily the number of matching items). If DynamoDB processes the number of items up to the limit while processing the results, it stops the operation and returns the matching values up to that point, along with a key in LastEvaluatedKey to apply in a subsequent operation so you can pick up where you left off. Also, if the processed dataset size exceeds 1 MB before DynamoDB reaches this limit, it stops the operation and returns the matching values up to the limit, and a key in LastEvaluatedKey to apply in a subsequent operation to continue the operation.
    public var limit: Swift.Int?
    /// Set this value to get remaining results, if NextToken was returned in the statement response.
    public var nextToken: Swift.String?
    /// The parameters for the PartiQL statement, if any.
    public var parameters: [DynamoDBClientTypes.AttributeValue]?
    /// Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:
    ///
    /// * INDEXES - The response includes the aggregate ConsumedCapacity for the operation, together with ConsumedCapacity for each table and secondary index that was accessed. Note that some operations, such as GetItem and BatchGetItem, do not access any indexes at all. In these cases, specifying INDEXES will only return ConsumedCapacity information for table(s).
    ///
    /// * TOTAL - The response includes only the aggregate ConsumedCapacity for the operation.
    ///
    /// * NONE - No ConsumedCapacity details are included in the response.
    public var returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity?
    /// An optional parameter that returns the item attributes for an ExecuteStatement operation that failed a condition check. There is no additional cost associated with requesting a return value aside from the small network and processing overhead of receiving a larger response. No read capacity units are consumed.
    public var returnValuesOnConditionCheckFailure: DynamoDBClientTypes.ReturnValuesOnConditionCheckFailure?
    /// The PartiQL statement representing the operation to run.
    /// This member is required.
    public var statement: Swift.String?

    public init(
        consistentRead: Swift.Bool? = nil,
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        parameters: [DynamoDBClientTypes.AttributeValue]? = nil,
        returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity? = nil,
        returnValuesOnConditionCheckFailure: DynamoDBClientTypes.ReturnValuesOnConditionCheckFailure? = nil,
        statement: Swift.String? = nil
    )
    {
        self.consistentRead = consistentRead
        self.limit = limit
        self.nextToken = nextToken
        self.parameters = parameters
        self.returnConsumedCapacity = returnConsumedCapacity
        self.returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure
        self.statement = statement
    }
}

/// Represents the input of a GetItem operation.
public struct GetItemInput {
    /// This is a legacy parameter. Use ProjectionExpression instead. For more information, see [AttributesToGet](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html) in the Amazon DynamoDB Developer Guide.
    public var attributesToGet: [Swift.String]?
    /// Determines the read consistency model: If set to true, then the operation uses strongly consistent reads; otherwise, the operation uses eventually consistent reads.
    public var consistentRead: Swift.Bool?
    /// One or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames:
    ///
    /// * To access an attribute whose name conflicts with a DynamoDB reserved word.
    ///
    /// * To create a placeholder for repeating occurrences of an attribute name in an expression.
    ///
    /// * To prevent special characters in an attribute name from being misinterpreted in an expression.
    ///
    ///
    /// Use the # character in an expression to dereference an attribute name. For example, consider the following attribute name:
    ///
    /// * Percentile
    ///
    ///
    /// The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see [Reserved Words](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html) in the Amazon DynamoDB Developer Guide). To work around this, you could specify the following for ExpressionAttributeNames:
    ///
    /// * {"#P":"Percentile"}
    ///
    ///
    /// You could then use this substitution in an expression, as in this example:
    ///
    /// * #P = :val
    ///
    ///
    /// Tokens that begin with the : character are expression attribute values, which are placeholders for the actual value at runtime. For more information on expression attribute names, see [Specifying Item Attributes](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html) in the Amazon DynamoDB Developer Guide.
    public var expressionAttributeNames: [Swift.String: Swift.String]?
    /// A map of attribute names to AttributeValue objects, representing the primary key of the item to retrieve. For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.
    /// This member is required.
    public var key: [Swift.String: DynamoDBClientTypes.AttributeValue]?
    /// A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas. If no attribute names are specified, then all attributes are returned. If any of the requested attributes are not found, they do not appear in the result. For more information, see [Specifying Item Attributes](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html) in the Amazon DynamoDB Developer Guide.
    public var projectionExpression: Swift.String?
    /// Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:
    ///
    /// * INDEXES - The response includes the aggregate ConsumedCapacity for the operation, together with ConsumedCapacity for each table and secondary index that was accessed. Note that some operations, such as GetItem and BatchGetItem, do not access any indexes at all. In these cases, specifying INDEXES will only return ConsumedCapacity information for table(s).
    ///
    /// * TOTAL - The response includes only the aggregate ConsumedCapacity for the operation.
    ///
    /// * NONE - No ConsumedCapacity details are included in the response.
    public var returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity?
    /// The name of the table containing the requested item. You can also provide the Amazon Resource Name (ARN) of the table in this parameter.
    /// This member is required.
    public var tableName: Swift.String?

    public init(
        attributesToGet: [Swift.String]? = nil,
        consistentRead: Swift.Bool? = nil,
        expressionAttributeNames: [Swift.String: Swift.String]? = nil,
        key: [Swift.String: DynamoDBClientTypes.AttributeValue]? = nil,
        projectionExpression: Swift.String? = nil,
        returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.attributesToGet = attributesToGet
        self.consistentRead = consistentRead
        self.expressionAttributeNames = expressionAttributeNames
        self.key = key
        self.projectionExpression = projectionExpression
        self.returnConsumedCapacity = returnConsumedCapacity
        self.tableName = tableName
    }
}

/// Represents the output of a GetItem operation.
public struct GetItemOutput {
    /// The capacity units consumed by the GetItem operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. ConsumedCapacity is only returned if the ReturnConsumedCapacity parameter was specified. For more information, see [Capacity unit consumption for read operations](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/read-write-operations.html#read-operation-consumption) in the Amazon DynamoDB Developer Guide.
    public var consumedCapacity: DynamoDBClientTypes.ConsumedCapacity?
    /// A map of attribute names to AttributeValue objects, as specified by ProjectionExpression.
    public var item: [Swift.String: DynamoDBClientTypes.AttributeValue]?

    public init(
        consumedCapacity: DynamoDBClientTypes.ConsumedCapacity? = nil,
        item: [Swift.String: DynamoDBClientTypes.AttributeValue]? = nil
    )
    {
        self.consumedCapacity = consumedCapacity
        self.item = item
    }
}

extension DynamoDBClientTypes {
    /// Represents a set of primary keys and, for each key, the attributes to retrieve from the table. For each primary key, you must provide all of the key attributes. For example, with a simple primary key, you only need to provide the partition key. For a composite primary key, you must provide both the partition key and the sort key.
    public struct KeysAndAttributes {
        /// This is a legacy parameter. Use ProjectionExpression instead. For more information, see [Legacy Conditional Parameters](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html) in the Amazon DynamoDB Developer Guide.
        public var attributesToGet: [Swift.String]?
        /// The consistency of a read operation. If set to true, then a strongly consistent read is used; otherwise, an eventually consistent read is used.
        public var consistentRead: Swift.Bool?
        /// One or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames:
        ///
        /// * To access an attribute whose name conflicts with a DynamoDB reserved word.
        ///
        /// * To create a placeholder for repeating occurrences of an attribute name in an expression.
        ///
        /// * To prevent special characters in an attribute name from being misinterpreted in an expression.
        ///
        ///
        /// Use the # character in an expression to dereference an attribute name. For example, consider the following attribute name:
        ///
        /// * Percentile
        ///
        ///
        /// The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see [Reserved Words](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html) in the Amazon DynamoDB Developer Guide). To work around this, you could specify the following for ExpressionAttributeNames:
        ///
        /// * {"#P":"Percentile"}
        ///
        ///
        /// You could then use this substitution in an expression, as in this example:
        ///
        /// * #P = :val
        ///
        ///
        /// Tokens that begin with the : character are expression attribute values, which are placeholders for the actual value at runtime. For more information on expression attribute names, see [Accessing Item Attributes](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html) in the Amazon DynamoDB Developer Guide.
        public var expressionAttributeNames: [Swift.String: Swift.String]?
        /// The primary key attribute values that define the items and the attributes associated with the items.
        /// This member is required.
        public var keys: [[Swift.String: DynamoDBClientTypes.AttributeValue]]?
        /// A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the ProjectionExpression must be separated by commas. If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result. For more information, see [Accessing Item Attributes](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html) in the Amazon DynamoDB Developer Guide.
        public var projectionExpression: Swift.String?

        public init(
            attributesToGet: [Swift.String]? = nil,
            consistentRead: Swift.Bool? = nil,
            expressionAttributeNames: [Swift.String: Swift.String]? = nil,
            keys: [[Swift.String: DynamoDBClientTypes.AttributeValue]]? = nil,
            projectionExpression: Swift.String? = nil
        )
        {
            self.attributesToGet = attributesToGet
            self.consistentRead = consistentRead
            self.expressionAttributeNames = expressionAttributeNames
            self.keys = keys
            self.projectionExpression = projectionExpression
        }
    }

}

extension DynamoDBClientTypes {
    /// Specifies an item to be retrieved as part of the transaction.
    public struct TransactGetItem {
        /// Contains the primary key that identifies the item to get, together with the name of the table that contains the item, and optionally the specific attributes of the item to retrieve.
        /// This member is required.
        public var `get`: DynamoDBClientTypes.Get?

        public init(
            `get`: DynamoDBClientTypes.Get? = nil
        )
        {
            self.`get` = `get`
        }
    }

}

/// The entire transaction request was canceled. DynamoDB cancels a TransactWriteItems request under the following circumstances:
///
/// * A condition in one of the condition expressions is not met.
///
/// * A table in the TransactWriteItems request is in a different account or region.
///
/// * More than one action in the TransactWriteItems operation targets the same item.
///
/// * There is insufficient provisioned capacity for the transaction to be completed.
///
/// * An item size becomes too large (larger than 400 KB), or a local secondary index (LSI) becomes too large, or a similar validation error occurs because of changes made by the transaction.
///
/// * There is a user error, such as an invalid data format.
///
/// * There is an ongoing TransactWriteItems operation that conflicts with a concurrent TransactWriteItems request. In this case the TransactWriteItems operation fails with a TransactionCanceledException.
///
///
/// DynamoDB cancels a TransactGetItems request under the following circumstances:
///
/// * There is an ongoing TransactGetItems operation that conflicts with a concurrent PutItem, UpdateItem, DeleteItem or TransactWriteItems request. In this case the TransactGetItems operation fails with a TransactionCanceledException.
///
/// * A table in the TransactGetItems request is in a different account or region.
///
/// * There is insufficient provisioned capacity for the transaction to be completed.
///
/// * There is a user error, such as an invalid data format.
///
///
/// If using Java, DynamoDB lists the cancellation reasons on the CancellationReasons property. This property is not set for other languages. Transaction cancellation reasons are ordered in the order of requested items, if an item has no error it will have None code and Null message. Cancellation reason codes and possible error messages:
///
/// * No Errors:
///
/// * Code: None
///
/// * Message: null
///
///
///
///
/// * Conditional Check Failed:
///
/// * Code: ConditionalCheckFailed
///
/// * Message: The conditional request failed.
///
///
///
///
/// * Item Collection Size Limit Exceeded:
///
/// * Code: ItemCollectionSizeLimitExceeded
///
/// * Message: Collection size exceeded.
///
///
///
///
/// * Transaction Conflict:
///
/// * Code: TransactionConflict
///
/// * Message: Transaction is ongoing for the item.
///
///
///
///
/// * Provisioned Throughput Exceeded:
///
/// * Code: ProvisionedThroughputExceeded
///
/// * Messages:
///
/// * The level of configured provisioned throughput for the table was exceeded. Consider increasing your provisioning level with the UpdateTable API. This Message is received when provisioned throughput is exceeded is on a provisioned DynamoDB table.
///
/// * The level of configured provisioned throughput for one or more global secondary indexes of the table was exceeded. Consider increasing your provisioning level for the under-provisioned global secondary indexes with the UpdateTable API. This message is returned when provisioned throughput is exceeded is on a provisioned GSI.
///
///
///
///
///
///
///
/// * Throttling Error:
///
/// * Code: ThrottlingError
///
/// * Messages:
///
/// * Throughput exceeds the current capacity of your table or index. DynamoDB is automatically scaling your table or index so please try again shortly. If exceptions persist, check if you have a hot key: https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/bp-partition-key-design.html. This message is returned when writes get throttled on an On-Demand table as DynamoDB is automatically scaling the table.
///
/// * Throughput exceeds the current capacity for one or more global secondary indexes. DynamoDB is automatically scaling your index so please try again shortly. This message is returned when writes get throttled on an On-Demand GSI as DynamoDB is automatically scaling the GSI.
///
///
///
///
///
///
///
/// * Validation Error:
///
/// * Code: ValidationError
///
/// * Messages:
///
/// * One or more parameter values were invalid.
///
/// * The update expression attempted to update the secondary index key beyond allowed size limits.
///
/// * The update expression attempted to update the secondary index key to unsupported type.
///
/// * An operand in the update expression has an incorrect data type.
///
/// * Item size to update has exceeded the maximum allowed size.
///
/// * Number overflow. Attempting to store a number with magnitude larger than supported range.
///
/// * Type mismatch for attribute to update.
///
/// * Nesting Levels have exceeded supported limits.
///
/// * The document path provided in the update expression is invalid for update.
///
/// * The provided expression refers to an attribute that does not exist in the item.
public struct TransactionCanceledException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A list of cancellation reasons.
        public internal(set) var cancellationReasons: [DynamoDBClientTypes.CancellationReason]? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TransactionCanceledException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        cancellationReasons: [DynamoDBClientTypes.CancellationReason]? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.cancellationReasons = cancellationReasons
        self.properties.message = message
    }
}

public struct BatchExecuteStatementInput {
    /// Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:
    ///
    /// * INDEXES - The response includes the aggregate ConsumedCapacity for the operation, together with ConsumedCapacity for each table and secondary index that was accessed. Note that some operations, such as GetItem and BatchGetItem, do not access any indexes at all. In these cases, specifying INDEXES will only return ConsumedCapacity information for table(s).
    ///
    /// * TOTAL - The response includes only the aggregate ConsumedCapacity for the operation.
    ///
    /// * NONE - No ConsumedCapacity details are included in the response.
    public var returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity?
    /// The list of PartiQL statements representing the batch to run.
    /// This member is required.
    public var statements: [DynamoDBClientTypes.BatchStatementRequest]?

    public init(
        returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity? = nil,
        statements: [DynamoDBClientTypes.BatchStatementRequest]? = nil
    )
    {
        self.returnConsumedCapacity = returnConsumedCapacity
        self.statements = statements
    }
}

public struct ExecuteTransactionInput {
    /// Set this value to get remaining results, if NextToken was returned in the statement response.
    public var clientRequestToken: Swift.String?
    /// Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response. For more information, see [TransactGetItems](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_TransactGetItems.html) and [TransactWriteItems](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_TransactWriteItems.html).
    public var returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity?
    /// The list of PartiQL statements representing the transaction to run.
    /// This member is required.
    public var transactStatements: [DynamoDBClientTypes.ParameterizedStatement]?

    public init(
        clientRequestToken: Swift.String? = nil,
        returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity? = nil,
        transactStatements: [DynamoDBClientTypes.ParameterizedStatement]? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.returnConsumedCapacity = returnConsumedCapacity
        self.transactStatements = transactStatements
    }
}

public struct ExecuteTransactionOutput {
    /// The capacity units consumed by the entire operation. The values of the list are ordered according to the ordering of the statements.
    public var consumedCapacity: [DynamoDBClientTypes.ConsumedCapacity]?
    /// The response to a PartiQL transaction.
    public var responses: [DynamoDBClientTypes.ItemResponse]?

    public init(
        consumedCapacity: [DynamoDBClientTypes.ConsumedCapacity]? = nil,
        responses: [DynamoDBClientTypes.ItemResponse]? = nil
    )
    {
        self.consumedCapacity = consumedCapacity
        self.responses = responses
    }
}

public struct TransactGetItemsOutput {
    /// If the ReturnConsumedCapacity value was TOTAL, this is an array of ConsumedCapacity objects, one for each table addressed by TransactGetItem objects in the TransactItems parameter. These ConsumedCapacity objects report the read-capacity units consumed by the TransactGetItems call in that table.
    public var consumedCapacity: [DynamoDBClientTypes.ConsumedCapacity]?
    /// An ordered array of up to 100 ItemResponse objects, each of which corresponds to the TransactGetItem object in the same position in the TransactItems array. Each ItemResponse object contains a Map of the name-value pairs that are the projected attributes of the requested item. If a requested item could not be retrieved, the corresponding ItemResponse object is Null, or if the requested item has no projected attributes, the corresponding ItemResponse object is an empty Map.
    public var responses: [DynamoDBClientTypes.ItemResponse]?

    public init(
        consumedCapacity: [DynamoDBClientTypes.ConsumedCapacity]? = nil,
        responses: [DynamoDBClientTypes.ItemResponse]? = nil
    )
    {
        self.consumedCapacity = consumedCapacity
        self.responses = responses
    }
}

extension DynamoDBClientTypes {
    /// Represents a condition to be compared with an attribute value. This condition can be used with DeleteItem, PutItem, or UpdateItem operations; if the comparison evaluates to true, the operation succeeds; if not, the operation fails. You can use ExpectedAttributeValue in one of two different ways:
    ///
    /// * Use AttributeValueList to specify one or more values to compare against an attribute. Use ComparisonOperator to specify how you want to perform the comparison. If the comparison evaluates to true, then the conditional operation succeeds.
    ///
    /// * Use Value to specify a value that DynamoDB will compare against an attribute. If the values match, then ExpectedAttributeValue evaluates to true and the conditional operation succeeds. Optionally, you can also set Exists to false, indicating that you do not expect to find the attribute value in the table. In this case, the conditional operation succeeds only if the comparison evaluates to false.
    ///
    ///
    /// Value and Exists are incompatible with AttributeValueList and ComparisonOperator. Note that if you use both sets of parameters at once, DynamoDB will return a ValidationException exception.
    public struct ExpectedAttributeValue {
        /// One or more values to evaluate against the supplied attribute. The number of values in the list depends on the ComparisonOperator being used. For type Number, value comparisons are numeric. String value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, a is greater than A, and a is greater than B. For a list of code values, see [http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters](http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters). For Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values. For information on specifying data types in JSON, see [JSON Data Format](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataFormat.html) in the Amazon DynamoDB Developer Guide.
        public var attributeValueList: [DynamoDBClientTypes.AttributeValue]?
        /// A comparator for evaluating attributes in the AttributeValueList. For example, equals, greater than, less than, etc. The following comparison operators are available: EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN The following are descriptions of each comparison operator.
        ///
        /// * EQ : Equal. EQ is supported for all data types, including lists and maps. AttributeValueList can contain only one AttributeValue element of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not equal {"NS":["6", "2", "1"]}.
        ///
        /// * NE : Not equal. NE is supported for all data types, including lists and maps. AttributeValueList can contain only one AttributeValue of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an AttributeValue of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not equal {"NS":["6", "2", "1"]}.
        ///
        /// * LE : Less than or equal. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not compare to {"NS":["6", "2", "1"]}.
        ///
        /// * LT : Less than. AttributeValueList can contain only one AttributeValue of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not compare to {"NS":["6", "2", "1"]}.
        ///
        /// * GE : Greater than or equal. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not compare to {"NS":["6", "2", "1"]}.
        ///
        /// * GT : Greater than. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not compare to {"NS":["6", "2", "1"]}.
        ///
        /// * NOT_NULL : The attribute exists. NOT_NULL is supported for all data types, including lists and maps. This operator tests for the existence of an attribute, not its data type. If the data type of attribute "a" is null, and you evaluate it using NOT_NULL, the result is a Boolean true. This result is because the attribute "a" exists; its data type is not relevant to the NOT_NULL comparison operator.
        ///
        /// * NULL : The attribute does not exist. NULL is supported for all data types, including lists and maps. This operator tests for the nonexistence of an attribute, not its data type. If the data type of attribute "a" is null, and you evaluate it using NULL, the result is a Boolean false. This is because the attribute "a" exists; its data type is not relevant to the NULL comparison operator.
        ///
        /// * CONTAINS : Checks for a subsequence, or value in a set. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is of type String, then the operator checks for a substring match. If the target attribute of the comparison is of type Binary, then the operator looks for a subsequence of the target that matches the input. If the target attribute of the comparison is a set ("SS", "NS", or "BS"), then the operator evaluates to true if it finds an exact match with any member of the set. CONTAINS is supported for lists: When evaluating "a CONTAINS b", "a" can be a list; however, "b" cannot be a set, a map, or a list.
        ///
        /// * NOT_CONTAINS : Checks for absence of a subsequence, or absence of a value in a set. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is a String, then the operator checks for the absence of a substring match. If the target attribute of the comparison is Binary, then the operator checks for the absence of a subsequence of the target that matches the input. If the target attribute of the comparison is a set ("SS", "NS", or "BS"), then the operator evaluates to true if it does not find an exact match with any member of the set. NOT_CONTAINS is supported for lists: When evaluating "a NOT CONTAINS b", "a" can be a list; however, "b" cannot be a set, a map, or a list.
        ///
        /// * BEGINS_WITH : Checks for a prefix. AttributeValueList can contain only one AttributeValue of type String or Binary (not a Number or a set type). The target attribute of the comparison must be of type String or Binary (not a Number or a set type).
        ///
        /// * IN : Checks for matching elements in a list. AttributeValueList can contain one or more AttributeValue elements of type String, Number, or Binary. These attributes are compared against an existing attribute of an item. If any elements of the input are equal to the item attribute, the expression evaluates to true.
        ///
        /// * BETWEEN : Greater than or equal to the first value, and less than or equal to the second value. AttributeValueList must contain two AttributeValue elements of the same type, either String, Number, or Binary (not a set type). A target attribute matches if the target value is greater than, or equal to, the first element and less than, or equal to, the second element. If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not compare to {"N":"6"}. Also, {"N":"6"} does not compare to {"NS":["6", "2", "1"]}
        public var comparisonOperator: DynamoDBClientTypes.ComparisonOperator?
        /// Causes DynamoDB to evaluate the value before attempting a conditional operation:
        ///
        /// * If Exists is true, DynamoDB will check to see if that attribute value already exists in the table. If it is found, then the operation succeeds. If it is not found, the operation fails with a ConditionCheckFailedException.
        ///
        /// * If Exists is false, DynamoDB assumes that the attribute value does not exist in the table. If in fact the value does not exist, then the assumption is valid and the operation succeeds. If the value is found, despite the assumption that it does not exist, the operation fails with a ConditionCheckFailedException.
        ///
        ///
        /// The default setting for Exists is true. If you supply a Value all by itself, DynamoDB assumes the attribute exists: You don't have to set Exists to true, because it is implied. DynamoDB returns a ValidationException if:
        ///
        /// * Exists is true but there is no Value to check. (You expect a value to exist, but don't specify what that value is.)
        ///
        /// * Exists is false but you also provide a Value. (You cannot expect an attribute to have a value, while also expecting it not to exist.)
        public var exists: Swift.Bool?
        /// Represents the data for the expected attribute. Each attribute value is described as a name-value pair. The name is the data type, and the value is the data itself. For more information, see [Data Types](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes) in the Amazon DynamoDB Developer Guide.
        public var value: DynamoDBClientTypes.AttributeValue?

        public init(
            attributeValueList: [DynamoDBClientTypes.AttributeValue]? = nil,
            comparisonOperator: DynamoDBClientTypes.ComparisonOperator? = nil,
            exists: Swift.Bool? = nil,
            value: DynamoDBClientTypes.AttributeValue? = nil
        )
        {
            self.attributeValueList = attributeValueList
            self.comparisonOperator = comparisonOperator
            self.exists = exists
            self.value = value
        }
    }

}

/// Represents the input of a BatchGetItem operation.
public struct BatchGetItemInput {
    /// A map of one or more table names or table ARNs and, for each table, a map that describes one or more items to retrieve from that table. Each table name or ARN can be used only once per BatchGetItem request. Each element in the map of items to retrieve consists of the following:
    ///
    /// * ConsistentRead - If true, a strongly consistent read is used; if false (the default), an eventually consistent read is used.
    ///
    /// * ExpressionAttributeNames - One or more substitution tokens for attribute names in the ProjectionExpression parameter. The following are some use cases for using ExpressionAttributeNames:
    ///
    /// * To access an attribute whose name conflicts with a DynamoDB reserved word.
    ///
    /// * To create a placeholder for repeating occurrences of an attribute name in an expression.
    ///
    /// * To prevent special characters in an attribute name from being misinterpreted in an expression.
    ///
    ///
    /// Use the # character in an expression to dereference an attribute name. For example, consider the following attribute name:
    ///
    /// * Percentile
    ///
    ///
    /// The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see [Reserved Words](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html) in the Amazon DynamoDB Developer Guide). To work around this, you could specify the following for ExpressionAttributeNames:
    ///
    /// * {"#P":"Percentile"}
    ///
    ///
    /// You could then use this substitution in an expression, as in this example:
    ///
    /// * #P = :val
    ///
    ///
    /// Tokens that begin with the : character are expression attribute values, which are placeholders for the actual value at runtime. For more information about expression attribute names, see [Accessing Item Attributes](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html) in the Amazon DynamoDB Developer Guide.
    ///
    /// * Keys - An array of primary key attribute values that define specific items in the table. For each primary key, you must provide all of the key attributes. For example, with a simple primary key, you only need to provide the partition key value. For a composite key, you must provide both the partition key value and the sort key value.
    ///
    /// * ProjectionExpression - A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas. If no attribute names are specified, then all attributes are returned. If any of the requested attributes are not found, they do not appear in the result. For more information, see [Accessing Item Attributes](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html) in the Amazon DynamoDB Developer Guide.
    ///
    /// * AttributesToGet - This is a legacy parameter. Use ProjectionExpression instead. For more information, see [AttributesToGet](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html) in the Amazon DynamoDB Developer Guide.
    /// This member is required.
    public var requestItems: [Swift.String: DynamoDBClientTypes.KeysAndAttributes]?
    /// Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:
    ///
    /// * INDEXES - The response includes the aggregate ConsumedCapacity for the operation, together with ConsumedCapacity for each table and secondary index that was accessed. Note that some operations, such as GetItem and BatchGetItem, do not access any indexes at all. In these cases, specifying INDEXES will only return ConsumedCapacity information for table(s).
    ///
    /// * TOTAL - The response includes only the aggregate ConsumedCapacity for the operation.
    ///
    /// * NONE - No ConsumedCapacity details are included in the response.
    public var returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity?

    public init(
        requestItems: [Swift.String: DynamoDBClientTypes.KeysAndAttributes]? = nil,
        returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity? = nil
    )
    {
        self.requestItems = requestItems
        self.returnConsumedCapacity = returnConsumedCapacity
    }
}

public struct TransactGetItemsInput {
    /// A value of TOTAL causes consumed capacity information to be returned, and a value of NONE prevents that information from being returned. No other value is valid.
    public var returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity?
    /// An ordered array of up to 100 TransactGetItem objects, each of which contains a Get structure.
    /// This member is required.
    public var transactItems: [DynamoDBClientTypes.TransactGetItem]?

    public init(
        returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity? = nil,
        transactItems: [DynamoDBClientTypes.TransactGetItem]? = nil
    )
    {
        self.returnConsumedCapacity = returnConsumedCapacity
        self.transactItems = transactItems
    }
}

public struct TransactWriteItemsOutput {
    /// The capacity units consumed by the entire TransactWriteItems operation. The values of the list are ordered according to the ordering of the TransactItems request parameter.
    public var consumedCapacity: [DynamoDBClientTypes.ConsumedCapacity]?
    /// A list of tables that were processed by TransactWriteItems and, for each table, information about any item collections that were affected by individual UpdateItem, PutItem, or DeleteItem operations.
    public var itemCollectionMetrics: [Swift.String: [DynamoDBClientTypes.ItemCollectionMetrics]]?

    public init(
        consumedCapacity: [DynamoDBClientTypes.ConsumedCapacity]? = nil,
        itemCollectionMetrics: [Swift.String: [DynamoDBClientTypes.ItemCollectionMetrics]]? = nil
    )
    {
        self.consumedCapacity = consumedCapacity
        self.itemCollectionMetrics = itemCollectionMetrics
    }
}

extension DynamoDBClientTypes {
    /// Represents a request to perform a check that an item exists or to check the condition of specific attributes of the item.
    public struct ConditionCheck {
        /// A condition that must be satisfied in order for a conditional update to succeed. For more information, see [Condition expressions](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.ConditionExpressions.html) in the Amazon DynamoDB Developer Guide.
        /// This member is required.
        public var conditionExpression: Swift.String?
        /// One or more substitution tokens for attribute names in an expression. For more information, see [Expression attribute names](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.ExpressionAttributeNames.html) in the Amazon DynamoDB Developer Guide.
        public var expressionAttributeNames: [Swift.String: Swift.String]?
        /// One or more values that can be substituted in an expression. For more information, see [Condition expressions](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.ConditionExpressions.html) in the Amazon DynamoDB Developer Guide.
        public var expressionAttributeValues: [Swift.String: DynamoDBClientTypes.AttributeValue]?
        /// The primary key of the item to be checked. Each element consists of an attribute name and a value for that attribute.
        /// This member is required.
        public var key: [Swift.String: DynamoDBClientTypes.AttributeValue]?
        /// Use ReturnValuesOnConditionCheckFailure to get the item attributes if the ConditionCheck condition fails. For ReturnValuesOnConditionCheckFailure, the valid values are: NONE and ALL_OLD.
        public var returnValuesOnConditionCheckFailure: DynamoDBClientTypes.ReturnValuesOnConditionCheckFailure?
        /// Name of the table for the check item request. You can also provide the Amazon Resource Name (ARN) of the table in this parameter.
        /// This member is required.
        public var tableName: Swift.String?

        public init(
            conditionExpression: Swift.String? = nil,
            expressionAttributeNames: [Swift.String: Swift.String]? = nil,
            expressionAttributeValues: [Swift.String: DynamoDBClientTypes.AttributeValue]? = nil,
            key: [Swift.String: DynamoDBClientTypes.AttributeValue]? = nil,
            returnValuesOnConditionCheckFailure: DynamoDBClientTypes.ReturnValuesOnConditionCheckFailure? = nil,
            tableName: Swift.String? = nil
        )
        {
            self.conditionExpression = conditionExpression
            self.expressionAttributeNames = expressionAttributeNames
            self.expressionAttributeValues = expressionAttributeValues
            self.key = key
            self.returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure
            self.tableName = tableName
        }
    }

}

extension DynamoDBClientTypes {
    /// Represents a request to perform a DeleteItem operation.
    public struct Delete {
        /// A condition that must be satisfied in order for a conditional delete to succeed.
        public var conditionExpression: Swift.String?
        /// One or more substitution tokens for attribute names in an expression.
        public var expressionAttributeNames: [Swift.String: Swift.String]?
        /// One or more values that can be substituted in an expression.
        public var expressionAttributeValues: [Swift.String: DynamoDBClientTypes.AttributeValue]?
        /// The primary key of the item to be deleted. Each element consists of an attribute name and a value for that attribute.
        /// This member is required.
        public var key: [Swift.String: DynamoDBClientTypes.AttributeValue]?
        /// Use ReturnValuesOnConditionCheckFailure to get the item attributes if the Delete condition fails. For ReturnValuesOnConditionCheckFailure, the valid values are: NONE and ALL_OLD.
        public var returnValuesOnConditionCheckFailure: DynamoDBClientTypes.ReturnValuesOnConditionCheckFailure?
        /// Name of the table in which the item to be deleted resides. You can also provide the Amazon Resource Name (ARN) of the table in this parameter.
        /// This member is required.
        public var tableName: Swift.String?

        public init(
            conditionExpression: Swift.String? = nil,
            expressionAttributeNames: [Swift.String: Swift.String]? = nil,
            expressionAttributeValues: [Swift.String: DynamoDBClientTypes.AttributeValue]? = nil,
            key: [Swift.String: DynamoDBClientTypes.AttributeValue]? = nil,
            returnValuesOnConditionCheckFailure: DynamoDBClientTypes.ReturnValuesOnConditionCheckFailure? = nil,
            tableName: Swift.String? = nil
        )
        {
            self.conditionExpression = conditionExpression
            self.expressionAttributeNames = expressionAttributeNames
            self.expressionAttributeValues = expressionAttributeValues
            self.key = key
            self.returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure
            self.tableName = tableName
        }
    }

}

extension DynamoDBClientTypes {
    /// Represents a request to perform a PutItem operation.
    public struct Put {
        /// A condition that must be satisfied in order for a conditional update to succeed.
        public var conditionExpression: Swift.String?
        /// One or more substitution tokens for attribute names in an expression.
        public var expressionAttributeNames: [Swift.String: Swift.String]?
        /// One or more values that can be substituted in an expression.
        public var expressionAttributeValues: [Swift.String: DynamoDBClientTypes.AttributeValue]?
        /// A map of attribute name to attribute values, representing the primary key of the item to be written by PutItem. All of the table's primary key attributes must be specified, and their data types must match those of the table's key schema. If any attributes are present in the item that are part of an index key schema for the table, their types must match the index key schema.
        /// This member is required.
        public var item: [Swift.String: DynamoDBClientTypes.AttributeValue]?
        /// Use ReturnValuesOnConditionCheckFailure to get the item attributes if the Put condition fails. For ReturnValuesOnConditionCheckFailure, the valid values are: NONE and ALL_OLD.
        public var returnValuesOnConditionCheckFailure: DynamoDBClientTypes.ReturnValuesOnConditionCheckFailure?
        /// Name of the table in which to write the item. You can also provide the Amazon Resource Name (ARN) of the table in this parameter.
        /// This member is required.
        public var tableName: Swift.String?

        public init(
            conditionExpression: Swift.String? = nil,
            expressionAttributeNames: [Swift.String: Swift.String]? = nil,
            expressionAttributeValues: [Swift.String: DynamoDBClientTypes.AttributeValue]? = nil,
            item: [Swift.String: DynamoDBClientTypes.AttributeValue]? = nil,
            returnValuesOnConditionCheckFailure: DynamoDBClientTypes.ReturnValuesOnConditionCheckFailure? = nil,
            tableName: Swift.String? = nil
        )
        {
            self.conditionExpression = conditionExpression
            self.expressionAttributeNames = expressionAttributeNames
            self.expressionAttributeValues = expressionAttributeValues
            self.item = item
            self.returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure
            self.tableName = tableName
        }
    }

}

extension DynamoDBClientTypes {
    /// Represents a request to perform an UpdateItem operation.
    public struct Update {
        /// A condition that must be satisfied in order for a conditional update to succeed.
        public var conditionExpression: Swift.String?
        /// One or more substitution tokens for attribute names in an expression.
        public var expressionAttributeNames: [Swift.String: Swift.String]?
        /// One or more values that can be substituted in an expression.
        public var expressionAttributeValues: [Swift.String: DynamoDBClientTypes.AttributeValue]?
        /// The primary key of the item to be updated. Each element consists of an attribute name and a value for that attribute.
        /// This member is required.
        public var key: [Swift.String: DynamoDBClientTypes.AttributeValue]?
        /// Use ReturnValuesOnConditionCheckFailure to get the item attributes if the Update condition fails. For ReturnValuesOnConditionCheckFailure, the valid values are: NONE and ALL_OLD.
        public var returnValuesOnConditionCheckFailure: DynamoDBClientTypes.ReturnValuesOnConditionCheckFailure?
        /// Name of the table for the UpdateItem request. You can also provide the Amazon Resource Name (ARN) of the table in this parameter.
        /// This member is required.
        public var tableName: Swift.String?
        /// An expression that defines one or more attributes to be updated, the action to be performed on them, and new value(s) for them.
        /// This member is required.
        public var updateExpression: Swift.String?

        public init(
            conditionExpression: Swift.String? = nil,
            expressionAttributeNames: [Swift.String: Swift.String]? = nil,
            expressionAttributeValues: [Swift.String: DynamoDBClientTypes.AttributeValue]? = nil,
            key: [Swift.String: DynamoDBClientTypes.AttributeValue]? = nil,
            returnValuesOnConditionCheckFailure: DynamoDBClientTypes.ReturnValuesOnConditionCheckFailure? = nil,
            tableName: Swift.String? = nil,
            updateExpression: Swift.String? = nil
        )
        {
            self.conditionExpression = conditionExpression
            self.expressionAttributeNames = expressionAttributeNames
            self.expressionAttributeValues = expressionAttributeValues
            self.key = key
            self.returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure
            self.tableName = tableName
            self.updateExpression = updateExpression
        }
    }

}

extension DynamoDBClientTypes {
    /// A PartiQL batch statement response..
    public struct BatchStatementResponse {
        /// The error associated with a failed PartiQL batch statement.
        public var error: DynamoDBClientTypes.BatchStatementError?
        /// A DynamoDB item associated with a BatchStatementResponse
        public var item: [Swift.String: DynamoDBClientTypes.AttributeValue]?
        /// The table name associated with a failed PartiQL batch statement.
        public var tableName: Swift.String?

        public init(
            error: DynamoDBClientTypes.BatchStatementError? = nil,
            item: [Swift.String: DynamoDBClientTypes.AttributeValue]? = nil,
            tableName: Swift.String? = nil
        )
        {
            self.error = error
            self.item = item
            self.tableName = tableName
        }
    }

}

/// Represents the output of a DeleteItem operation.
public struct DeleteItemOutput {
    /// A map of attribute names to AttributeValue objects, representing the item as it appeared before the DeleteItem operation. This map appears in the response only if ReturnValues was specified as ALL_OLD in the request.
    public var attributes: [Swift.String: DynamoDBClientTypes.AttributeValue]?
    /// The capacity units consumed by the DeleteItem operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. ConsumedCapacity is only returned if the ReturnConsumedCapacity parameter was specified. For more information, see [Provisioned capacity mode](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/provisioned-capacity-mode.html) in the Amazon DynamoDB Developer Guide.
    public var consumedCapacity: DynamoDBClientTypes.ConsumedCapacity?
    /// Information about item collections, if any, that were affected by the DeleteItem operation. ItemCollectionMetrics is only returned if the ReturnItemCollectionMetrics parameter was specified. If the table does not have any local secondary indexes, this information is not returned in the response. Each ItemCollectionMetrics element consists of:
    ///
    /// * ItemCollectionKey - The partition key value of the item collection. This is the same as the partition key value of the item itself.
    ///
    /// * SizeEstimateRangeGB - An estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit. The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.
    public var itemCollectionMetrics: DynamoDBClientTypes.ItemCollectionMetrics?

    public init(
        attributes: [Swift.String: DynamoDBClientTypes.AttributeValue]? = nil,
        consumedCapacity: DynamoDBClientTypes.ConsumedCapacity? = nil,
        itemCollectionMetrics: DynamoDBClientTypes.ItemCollectionMetrics? = nil
    )
    {
        self.attributes = attributes
        self.consumedCapacity = consumedCapacity
        self.itemCollectionMetrics = itemCollectionMetrics
    }
}

public struct ExecuteStatementOutput {
    /// The capacity units consumed by an operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. ConsumedCapacity is only returned if the request asked for it. For more information, see [Provisioned capacity mode](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/provisioned-capacity-mode.html) in the Amazon DynamoDB Developer Guide.
    public var consumedCapacity: DynamoDBClientTypes.ConsumedCapacity?
    /// If a read operation was used, this property will contain the result of the read operation; a map of attribute names and their values. For the write operations this value will be empty.
    public var items: [[Swift.String: DynamoDBClientTypes.AttributeValue]]?
    /// The primary key of the item where the operation stopped, inclusive of the previous result set. Use this value to start a new operation, excluding this value in the new request. If LastEvaluatedKey is empty, then the "last page" of results has been processed and there is no more data to be retrieved. If LastEvaluatedKey is not empty, it does not necessarily mean that there is more data in the result set. The only way to know when you have reached the end of the result set is when LastEvaluatedKey is empty.
    public var lastEvaluatedKey: [Swift.String: DynamoDBClientTypes.AttributeValue]?
    /// If the response of a read request exceeds the response payload limit DynamoDB will set this value in the response. If set, you can use that this value in the subsequent request to get the remaining results.
    public var nextToken: Swift.String?

    public init(
        consumedCapacity: DynamoDBClientTypes.ConsumedCapacity? = nil,
        items: [[Swift.String: DynamoDBClientTypes.AttributeValue]]? = nil,
        lastEvaluatedKey: [Swift.String: DynamoDBClientTypes.AttributeValue]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.consumedCapacity = consumedCapacity
        self.items = items
        self.lastEvaluatedKey = lastEvaluatedKey
        self.nextToken = nextToken
    }
}

/// Represents the output of a PutItem operation.
public struct PutItemOutput {
    /// The attribute values as they appeared before the PutItem operation, but only if ReturnValues is specified as ALL_OLD in the request. Each element consists of an attribute name and an attribute value.
    public var attributes: [Swift.String: DynamoDBClientTypes.AttributeValue]?
    /// The capacity units consumed by the PutItem operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. ConsumedCapacity is only returned if the ReturnConsumedCapacity parameter was specified. For more information, see [Capacity unity consumption for write operations](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/read-write-operations.html#write-operation-consumption) in the Amazon DynamoDB Developer Guide.
    public var consumedCapacity: DynamoDBClientTypes.ConsumedCapacity?
    /// Information about item collections, if any, that were affected by the PutItem operation. ItemCollectionMetrics is only returned if the ReturnItemCollectionMetrics parameter was specified. If the table does not have any local secondary indexes, this information is not returned in the response. Each ItemCollectionMetrics element consists of:
    ///
    /// * ItemCollectionKey - The partition key value of the item collection. This is the same as the partition key value of the item itself.
    ///
    /// * SizeEstimateRangeGB - An estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit. The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.
    public var itemCollectionMetrics: DynamoDBClientTypes.ItemCollectionMetrics?

    public init(
        attributes: [Swift.String: DynamoDBClientTypes.AttributeValue]? = nil,
        consumedCapacity: DynamoDBClientTypes.ConsumedCapacity? = nil,
        itemCollectionMetrics: DynamoDBClientTypes.ItemCollectionMetrics? = nil
    )
    {
        self.attributes = attributes
        self.consumedCapacity = consumedCapacity
        self.itemCollectionMetrics = itemCollectionMetrics
    }
}

/// Represents the output of a Query operation.
public struct QueryOutput {
    /// The capacity units consumed by the Query operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. ConsumedCapacity is only returned if the ReturnConsumedCapacity parameter was specified. For more information, see [Capacity unit consumption for read operations](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/read-write-operations.html#read-operation-consumption) in the Amazon DynamoDB Developer Guide.
    public var consumedCapacity: DynamoDBClientTypes.ConsumedCapacity?
    /// The number of items in the response. If you used a QueryFilter in the request, then Count is the number of items returned after the filter was applied, and ScannedCount is the number of matching items before the filter was applied. If you did not use a filter in the request, then Count and ScannedCount are the same.
    public var count: Swift.Int
    /// An array of item attributes that match the query criteria. Each element in this array consists of an attribute name and the value for that attribute.
    public var items: [[Swift.String: DynamoDBClientTypes.AttributeValue]]?
    /// The primary key of the item where the operation stopped, inclusive of the previous result set. Use this value to start a new operation, excluding this value in the new request. If LastEvaluatedKey is empty, then the "last page" of results has been processed and there is no more data to be retrieved. If LastEvaluatedKey is not empty, it does not necessarily mean that there is more data in the result set. The only way to know when you have reached the end of the result set is when LastEvaluatedKey is empty.
    public var lastEvaluatedKey: [Swift.String: DynamoDBClientTypes.AttributeValue]?
    /// The number of items evaluated, before any QueryFilter is applied. A high ScannedCount value with few, or no, Count results indicates an inefficient Query operation. For more information, see [Count and ScannedCount](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.Count) in the Amazon DynamoDB Developer Guide. If you did not use a filter in the request, then ScannedCount is the same as Count.
    public var scannedCount: Swift.Int

    public init(
        consumedCapacity: DynamoDBClientTypes.ConsumedCapacity? = nil,
        count: Swift.Int = 0,
        items: [[Swift.String: DynamoDBClientTypes.AttributeValue]]? = nil,
        lastEvaluatedKey: [Swift.String: DynamoDBClientTypes.AttributeValue]? = nil,
        scannedCount: Swift.Int = 0
    )
    {
        self.consumedCapacity = consumedCapacity
        self.count = count
        self.items = items
        self.lastEvaluatedKey = lastEvaluatedKey
        self.scannedCount = scannedCount
    }
}

/// Represents the output of a Scan operation.
public struct ScanOutput {
    /// The capacity units consumed by the Scan operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. ConsumedCapacity is only returned if the ReturnConsumedCapacity parameter was specified. For more information, see [Capacity unit consumption for read operations](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/read-write-operations.html#read-operation-consumption) in the Amazon DynamoDB Developer Guide.
    public var consumedCapacity: DynamoDBClientTypes.ConsumedCapacity?
    /// The number of items in the response. If you set ScanFilter in the request, then Count is the number of items returned after the filter was applied, and ScannedCount is the number of matching items before the filter was applied. If you did not use a filter in the request, then Count is the same as ScannedCount.
    public var count: Swift.Int
    /// An array of item attributes that match the scan criteria. Each element in this array consists of an attribute name and the value for that attribute.
    public var items: [[Swift.String: DynamoDBClientTypes.AttributeValue]]?
    /// The primary key of the item where the operation stopped, inclusive of the previous result set. Use this value to start a new operation, excluding this value in the new request. If LastEvaluatedKey is empty, then the "last page" of results has been processed and there is no more data to be retrieved. If LastEvaluatedKey is not empty, it does not necessarily mean that there is more data in the result set. The only way to know when you have reached the end of the result set is when LastEvaluatedKey is empty.
    public var lastEvaluatedKey: [Swift.String: DynamoDBClientTypes.AttributeValue]?
    /// The number of items evaluated, before any ScanFilter is applied. A high ScannedCount value with few, or no, Count results indicates an inefficient Scan operation. For more information, see [Count and ScannedCount](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#Count) in the Amazon DynamoDB Developer Guide. If you did not use a filter in the request, then ScannedCount is the same as Count.
    public var scannedCount: Swift.Int

    public init(
        consumedCapacity: DynamoDBClientTypes.ConsumedCapacity? = nil,
        count: Swift.Int = 0,
        items: [[Swift.String: DynamoDBClientTypes.AttributeValue]]? = nil,
        lastEvaluatedKey: [Swift.String: DynamoDBClientTypes.AttributeValue]? = nil,
        scannedCount: Swift.Int = 0
    )
    {
        self.consumedCapacity = consumedCapacity
        self.count = count
        self.items = items
        self.lastEvaluatedKey = lastEvaluatedKey
        self.scannedCount = scannedCount
    }
}

/// Represents the output of an UpdateItem operation.
public struct UpdateItemOutput {
    /// A map of attribute values as they appear before or after the UpdateItem operation, as determined by the ReturnValues parameter. The Attributes map is only present if the update was successful and ReturnValues was specified as something other than NONE in the request. Each element represents one attribute.
    public var attributes: [Swift.String: DynamoDBClientTypes.AttributeValue]?
    /// The capacity units consumed by the UpdateItem operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. ConsumedCapacity is only returned if the ReturnConsumedCapacity parameter was specified. For more information, see [Capacity unity consumption for write operations](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/read-write-operations.html#write-operation-consumption) in the Amazon DynamoDB Developer Guide.
    public var consumedCapacity: DynamoDBClientTypes.ConsumedCapacity?
    /// Information about item collections, if any, that were affected by the UpdateItem operation. ItemCollectionMetrics is only returned if the ReturnItemCollectionMetrics parameter was specified. If the table does not have any local secondary indexes, this information is not returned in the response. Each ItemCollectionMetrics element consists of:
    ///
    /// * ItemCollectionKey - The partition key value of the item collection. This is the same as the partition key value of the item itself.
    ///
    /// * SizeEstimateRangeGB - An estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit. The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.
    public var itemCollectionMetrics: DynamoDBClientTypes.ItemCollectionMetrics?

    public init(
        attributes: [Swift.String: DynamoDBClientTypes.AttributeValue]? = nil,
        consumedCapacity: DynamoDBClientTypes.ConsumedCapacity? = nil,
        itemCollectionMetrics: DynamoDBClientTypes.ItemCollectionMetrics? = nil
    )
    {
        self.attributes = attributes
        self.consumedCapacity = consumedCapacity
        self.itemCollectionMetrics = itemCollectionMetrics
    }
}

extension DynamoDBClientTypes {
    /// Represents an operation to perform - either DeleteItem or PutItem. You can only request one of these operations, not both, in a single WriteRequest. If you do need to perform both of these operations, you need to provide two separate WriteRequest objects.
    public struct WriteRequest {
        /// A request to perform a DeleteItem operation.
        public var deleteRequest: DynamoDBClientTypes.DeleteRequest?
        /// A request to perform a PutItem operation.
        public var putRequest: DynamoDBClientTypes.PutRequest?

        public init(
            deleteRequest: DynamoDBClientTypes.DeleteRequest? = nil,
            putRequest: DynamoDBClientTypes.PutRequest? = nil
        )
        {
            self.deleteRequest = deleteRequest
            self.putRequest = putRequest
        }
    }

}

public struct BatchExecuteStatementOutput {
    /// The capacity units consumed by the entire operation. The values of the list are ordered according to the ordering of the statements.
    public var consumedCapacity: [DynamoDBClientTypes.ConsumedCapacity]?
    /// The response to each PartiQL statement in the batch. The values of the list are ordered according to the ordering of the request statements.
    public var responses: [DynamoDBClientTypes.BatchStatementResponse]?

    public init(
        consumedCapacity: [DynamoDBClientTypes.ConsumedCapacity]? = nil,
        responses: [DynamoDBClientTypes.BatchStatementResponse]? = nil
    )
    {
        self.consumedCapacity = consumedCapacity
        self.responses = responses
    }
}

/// Represents the output of a BatchGetItem operation.
public struct BatchGetItemOutput {
    /// The read capacity units consumed by the entire BatchGetItem operation. Each element consists of:
    ///
    /// * TableName - The table that consumed the provisioned throughput.
    ///
    /// * CapacityUnits - The total number of capacity units consumed.
    public var consumedCapacity: [DynamoDBClientTypes.ConsumedCapacity]?
    /// A map of table name or table ARN to a list of items. Each object in Responses consists of a table name or ARN, along with a map of attribute data consisting of the data type and attribute value.
    public var responses: [Swift.String: [[Swift.String: DynamoDBClientTypes.AttributeValue]]]?
    /// A map of tables and their respective keys that were not processed with the current response. The UnprocessedKeys value is in the same form as RequestItems, so the value can be provided directly to a subsequent BatchGetItem operation. For more information, see RequestItems in the Request Parameters section. Each element consists of:
    ///
    /// * Keys - An array of primary key attribute values that define specific items in the table.
    ///
    /// * ProjectionExpression - One or more attributes to be retrieved from the table or index. By default, all attributes are returned. If a requested attribute is not found, it does not appear in the result.
    ///
    /// * ConsistentRead - The consistency of a read operation. If set to true, then a strongly consistent read is used; otherwise, an eventually consistent read is used.
    ///
    ///
    /// If there are no unprocessed keys remaining, the response contains an empty UnprocessedKeys map.
    public var unprocessedKeys: [Swift.String: DynamoDBClientTypes.KeysAndAttributes]?

    public init(
        consumedCapacity: [DynamoDBClientTypes.ConsumedCapacity]? = nil,
        responses: [Swift.String: [[Swift.String: DynamoDBClientTypes.AttributeValue]]]? = nil,
        unprocessedKeys: [Swift.String: DynamoDBClientTypes.KeysAndAttributes]? = nil
    )
    {
        self.consumedCapacity = consumedCapacity
        self.responses = responses
        self.unprocessedKeys = unprocessedKeys
    }
}

/// Represents the input of a Scan operation.
public struct ScanInput {
    /// This is a legacy parameter. Use ProjectionExpression instead. For more information, see [AttributesToGet](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html) in the Amazon DynamoDB Developer Guide.
    public var attributesToGet: [Swift.String]?
    /// This is a legacy parameter. Use FilterExpression instead. For more information, see [ConditionalOperator](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html) in the Amazon DynamoDB Developer Guide.
    public var conditionalOperator: DynamoDBClientTypes.ConditionalOperator?
    /// A Boolean value that determines the read consistency model during the scan:
    ///
    /// * If ConsistentRead is false, then the data returned from Scan might not contain the results from other recently completed write operations (PutItem, UpdateItem, or DeleteItem).
    ///
    /// * If ConsistentRead is true, then all of the write operations that completed before the Scan began are guaranteed to be contained in the Scan response.
    ///
    ///
    /// The default setting for ConsistentRead is false. The ConsistentRead parameter is not supported on global secondary indexes. If you scan a global secondary index with ConsistentRead set to true, you will receive a ValidationException.
    public var consistentRead: Swift.Bool?
    /// The primary key of the first item that this operation will evaluate. Use the value that was returned for LastEvaluatedKey in the previous operation. The data type for ExclusiveStartKey must be String, Number or Binary. No set data types are allowed. In a parallel scan, a Scan request that includes ExclusiveStartKey must specify the same segment whose previous Scan returned the corresponding value of LastEvaluatedKey.
    public var exclusiveStartKey: [Swift.String: DynamoDBClientTypes.AttributeValue]?
    /// One or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames:
    ///
    /// * To access an attribute whose name conflicts with a DynamoDB reserved word.
    ///
    /// * To create a placeholder for repeating occurrences of an attribute name in an expression.
    ///
    /// * To prevent special characters in an attribute name from being misinterpreted in an expression.
    ///
    ///
    /// Use the # character in an expression to dereference an attribute name. For example, consider the following attribute name:
    ///
    /// * Percentile
    ///
    ///
    /// The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see [Reserved Words](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html) in the Amazon DynamoDB Developer Guide). To work around this, you could specify the following for ExpressionAttributeNames:
    ///
    /// * {"#P":"Percentile"}
    ///
    ///
    /// You could then use this substitution in an expression, as in this example:
    ///
    /// * #P = :val
    ///
    ///
    /// Tokens that begin with the : character are expression attribute values, which are placeholders for the actual value at runtime. For more information on expression attribute names, see [Specifying Item Attributes](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html) in the Amazon DynamoDB Developer Guide.
    public var expressionAttributeNames: [Swift.String: Swift.String]?
    /// One or more values that can be substituted in an expression. Use the : (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the ProductStatus attribute was one of the following: Available | Backordered | Discontinued You would first need to specify ExpressionAttributeValues as follows: { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} } You could then use these values in an expression, such as this: ProductStatus IN (:avail, :back, :disc) For more information on expression attribute values, see [Condition Expressions](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html) in the Amazon DynamoDB Developer Guide.
    public var expressionAttributeValues: [Swift.String: DynamoDBClientTypes.AttributeValue]?
    /// A string that contains conditions that DynamoDB applies after the Scan operation, but before the data is returned to you. Items that do not satisfy the FilterExpression criteria are not returned. A FilterExpression is applied after the items have already been read; the process of filtering does not consume any additional read capacity units. For more information, see [Filter Expressions](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.FilterExpression) in the Amazon DynamoDB Developer Guide.
    public var filterExpression: Swift.String?
    /// The name of a secondary index to scan. This index can be any local secondary index or global secondary index. Note that if you use the IndexName parameter, you must also provide TableName.
    public var indexName: Swift.String?
    /// The maximum number of items to evaluate (not necessarily the number of matching items). If DynamoDB processes the number of items up to the limit while processing the results, it stops the operation and returns the matching values up to that point, and a key in LastEvaluatedKey to apply in a subsequent operation, so that you can pick up where you left off. Also, if the processed dataset size exceeds 1 MB before DynamoDB reaches this limit, it stops the operation and returns the matching values up to the limit, and a key in LastEvaluatedKey to apply in a subsequent operation to continue the operation. For more information, see [Working with Queries](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html) in the Amazon DynamoDB Developer Guide.
    public var limit: Swift.Int?
    /// A string that identifies one or more attributes to retrieve from the specified table or index. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas. If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result. For more information, see [Specifying Item Attributes](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html) in the Amazon DynamoDB Developer Guide.
    public var projectionExpression: Swift.String?
    /// Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:
    ///
    /// * INDEXES - The response includes the aggregate ConsumedCapacity for the operation, together with ConsumedCapacity for each table and secondary index that was accessed. Note that some operations, such as GetItem and BatchGetItem, do not access any indexes at all. In these cases, specifying INDEXES will only return ConsumedCapacity information for table(s).
    ///
    /// * TOTAL - The response includes only the aggregate ConsumedCapacity for the operation.
    ///
    /// * NONE - No ConsumedCapacity details are included in the response.
    public var returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity?
    /// This is a legacy parameter. Use FilterExpression instead. For more information, see [ScanFilter](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ScanFilter.html) in the Amazon DynamoDB Developer Guide.
    public var scanFilter: [Swift.String: DynamoDBClientTypes.Condition]?
    /// For a parallel Scan request, Segment identifies an individual segment to be scanned by an application worker. Segment IDs are zero-based, so the first segment is always 0. For example, if you want to use four application threads to scan a table or an index, then the first thread specifies a Segment value of 0, the second thread specifies 1, and so on. The value of LastEvaluatedKey returned from a parallel Scan request must be used as ExclusiveStartKey with the same segment ID in a subsequent Scan operation. The value for Segment must be greater than or equal to 0, and less than the value provided for TotalSegments. If you provide Segment, you must also provide TotalSegments.
    public var segment: Swift.Int?
    /// The attributes to be returned in the result. You can retrieve all item attributes, specific item attributes, the count of matching items, or in the case of an index, some or all of the attributes projected into the index.
    ///
    /// * ALL_ATTRIBUTES - Returns all of the item attributes from the specified table or index. If you query a local secondary index, then for each matching item in the index, DynamoDB fetches the entire item from the parent table. If the index is configured to project all item attributes, then all of the data can be obtained from the local secondary index, and no fetching is required.
    ///
    /// * ALL_PROJECTED_ATTRIBUTES - Allowed only when querying an index. Retrieves all attributes that have been projected into the index. If the index is configured to project all attributes, this return value is equivalent to specifying ALL_ATTRIBUTES.
    ///
    /// * COUNT - Returns the number of matching items, rather than the matching items themselves. Note that this uses the same quantity of read capacity units as getting the items, and is subject to the same item size calculations.
    ///
    /// * SPECIFIC_ATTRIBUTES - Returns only the attributes listed in ProjectionExpression. This return value is equivalent to specifying ProjectionExpression without specifying any value for Select. If you query or scan a local secondary index and request only attributes that are projected into that index, the operation reads only the index and not the table. If any of the requested attributes are not projected into the local secondary index, DynamoDB fetches each of these attributes from the parent table. This extra fetching incurs additional throughput cost and latency. If you query or scan a global secondary index, you can only request attributes that are projected into the index. Global secondary index queries cannot fetch attributes from the parent table.
    ///
    ///
    /// If neither Select nor ProjectionExpression are specified, DynamoDB defaults to ALL_ATTRIBUTES when accessing a table, and ALL_PROJECTED_ATTRIBUTES when accessing an index. You cannot use both Select and ProjectionExpression together in a single request, unless the value for Select is SPECIFIC_ATTRIBUTES. (This usage is equivalent to specifying ProjectionExpression without any value for Select.) If you use the ProjectionExpression parameter, then the value for Select can only be SPECIFIC_ATTRIBUTES. Any other value for Select will return an error.
    public var select: DynamoDBClientTypes.Select?
    /// The name of the table containing the requested items or if you provide IndexName, the name of the table to which that index belongs. You can also provide the Amazon Resource Name (ARN) of the table in this parameter.
    /// This member is required.
    public var tableName: Swift.String?
    /// For a parallel Scan request, TotalSegments represents the total number of segments into which the Scan operation will be divided. The value of TotalSegments corresponds to the number of application workers that will perform the parallel scan. For example, if you want to use four application threads to scan a table or an index, specify a TotalSegments value of 4. The value for TotalSegments must be greater than or equal to 1, and less than or equal to 1000000. If you specify a TotalSegments value of 1, the Scan operation will be sequential rather than parallel. If you specify TotalSegments, you must also specify Segment.
    public var totalSegments: Swift.Int?

    public init(
        attributesToGet: [Swift.String]? = nil,
        conditionalOperator: DynamoDBClientTypes.ConditionalOperator? = nil,
        consistentRead: Swift.Bool? = nil,
        exclusiveStartKey: [Swift.String: DynamoDBClientTypes.AttributeValue]? = nil,
        expressionAttributeNames: [Swift.String: Swift.String]? = nil,
        expressionAttributeValues: [Swift.String: DynamoDBClientTypes.AttributeValue]? = nil,
        filterExpression: Swift.String? = nil,
        indexName: Swift.String? = nil,
        limit: Swift.Int? = nil,
        projectionExpression: Swift.String? = nil,
        returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity? = nil,
        scanFilter: [Swift.String: DynamoDBClientTypes.Condition]? = nil,
        segment: Swift.Int? = nil,
        select: DynamoDBClientTypes.Select? = nil,
        tableName: Swift.String? = nil,
        totalSegments: Swift.Int? = nil
    )
    {
        self.attributesToGet = attributesToGet
        self.conditionalOperator = conditionalOperator
        self.consistentRead = consistentRead
        self.exclusiveStartKey = exclusiveStartKey
        self.expressionAttributeNames = expressionAttributeNames
        self.expressionAttributeValues = expressionAttributeValues
        self.filterExpression = filterExpression
        self.indexName = indexName
        self.limit = limit
        self.projectionExpression = projectionExpression
        self.returnConsumedCapacity = returnConsumedCapacity
        self.scanFilter = scanFilter
        self.segment = segment
        self.select = select
        self.tableName = tableName
        self.totalSegments = totalSegments
    }
}

/// Represents the input of a BatchWriteItem operation.
public struct BatchWriteItemInput {
    /// A map of one or more table names or table ARNs and, for each table, a list of operations to be performed (DeleteRequest or PutRequest). Each element in the map consists of the following:
    ///
    /// * DeleteRequest - Perform a DeleteItem operation on the specified item. The item to be deleted is identified by a Key subelement:
    ///
    /// * Key - A map of primary key attribute values that uniquely identify the item. Each entry in this map consists of an attribute name and an attribute value. For each primary key, you must provide all of the key attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.
    ///
    ///
    ///
    ///
    /// * PutRequest - Perform a PutItem operation on the specified item. The item to be put is identified by an Item subelement:
    ///
    /// * Item - A map of attributes and their values. Each entry in this map consists of an attribute name and an attribute value. Attribute values must not be null; string and binary type attributes must have lengths greater than zero; and set type attributes must not be empty. Requests that contain empty values are rejected with a ValidationException exception. If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition.
    /// This member is required.
    public var requestItems: [Swift.String: [DynamoDBClientTypes.WriteRequest]]?
    /// Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:
    ///
    /// * INDEXES - The response includes the aggregate ConsumedCapacity for the operation, together with ConsumedCapacity for each table and secondary index that was accessed. Note that some operations, such as GetItem and BatchGetItem, do not access any indexes at all. In these cases, specifying INDEXES will only return ConsumedCapacity information for table(s).
    ///
    /// * TOTAL - The response includes only the aggregate ConsumedCapacity for the operation.
    ///
    /// * NONE - No ConsumedCapacity details are included in the response.
    public var returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity?
    /// Determines whether item collection metrics are returned. If set to SIZE, the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to NONE (the default), no statistics are returned.
    public var returnItemCollectionMetrics: DynamoDBClientTypes.ReturnItemCollectionMetrics?

    public init(
        requestItems: [Swift.String: [DynamoDBClientTypes.WriteRequest]]? = nil,
        returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity? = nil,
        returnItemCollectionMetrics: DynamoDBClientTypes.ReturnItemCollectionMetrics? = nil
    )
    {
        self.requestItems = requestItems
        self.returnConsumedCapacity = returnConsumedCapacity
        self.returnItemCollectionMetrics = returnItemCollectionMetrics
    }
}

/// Represents the input of a DeleteItem operation.
public struct DeleteItemInput {
    /// A condition that must be satisfied in order for a conditional DeleteItem to succeed. An expression can contain any of the following:
    ///
    /// * Functions: attribute_exists | attribute_not_exists | attribute_type | contains | begins_with | size These function names are case-sensitive.
    ///
    /// * Comparison operators: = | <> | < | > | <= | >= | BETWEEN | IN
    ///
    /// * Logical operators: AND | OR | NOT
    ///
    ///
    /// For more information about condition expressions, see [Condition Expressions](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html) in the Amazon DynamoDB Developer Guide.
    public var conditionExpression: Swift.String?
    /// This is a legacy parameter. Use ConditionExpression instead. For more information, see [ConditionalOperator](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html) in the Amazon DynamoDB Developer Guide.
    public var conditionalOperator: DynamoDBClientTypes.ConditionalOperator?
    /// This is a legacy parameter. Use ConditionExpression instead. For more information, see [Expected](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.Expected.html) in the Amazon DynamoDB Developer Guide.
    public var expected: [Swift.String: DynamoDBClientTypes.ExpectedAttributeValue]?
    /// One or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames:
    ///
    /// * To access an attribute whose name conflicts with a DynamoDB reserved word.
    ///
    /// * To create a placeholder for repeating occurrences of an attribute name in an expression.
    ///
    /// * To prevent special characters in an attribute name from being misinterpreted in an expression.
    ///
    ///
    /// Use the # character in an expression to dereference an attribute name. For example, consider the following attribute name:
    ///
    /// * Percentile
    ///
    ///
    /// The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see [Reserved Words](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html) in the Amazon DynamoDB Developer Guide). To work around this, you could specify the following for ExpressionAttributeNames:
    ///
    /// * {"#P":"Percentile"}
    ///
    ///
    /// You could then use this substitution in an expression, as in this example:
    ///
    /// * #P = :val
    ///
    ///
    /// Tokens that begin with the : character are expression attribute values, which are placeholders for the actual value at runtime. For more information on expression attribute names, see [Specifying Item Attributes](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html) in the Amazon DynamoDB Developer Guide.
    public var expressionAttributeNames: [Swift.String: Swift.String]?
    /// One or more values that can be substituted in an expression. Use the : (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the ProductStatus attribute was one of the following: Available | Backordered | Discontinued You would first need to specify ExpressionAttributeValues as follows: { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} } You could then use these values in an expression, such as this: ProductStatus IN (:avail, :back, :disc) For more information on expression attribute values, see [Condition Expressions](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html) in the Amazon DynamoDB Developer Guide.
    public var expressionAttributeValues: [Swift.String: DynamoDBClientTypes.AttributeValue]?
    /// A map of attribute names to AttributeValue objects, representing the primary key of the item to delete. For the primary key, you must provide all of the key attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.
    /// This member is required.
    public var key: [Swift.String: DynamoDBClientTypes.AttributeValue]?
    /// Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:
    ///
    /// * INDEXES - The response includes the aggregate ConsumedCapacity for the operation, together with ConsumedCapacity for each table and secondary index that was accessed. Note that some operations, such as GetItem and BatchGetItem, do not access any indexes at all. In these cases, specifying INDEXES will only return ConsumedCapacity information for table(s).
    ///
    /// * TOTAL - The response includes only the aggregate ConsumedCapacity for the operation.
    ///
    /// * NONE - No ConsumedCapacity details are included in the response.
    public var returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity?
    /// Determines whether item collection metrics are returned. If set to SIZE, the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to NONE (the default), no statistics are returned.
    public var returnItemCollectionMetrics: DynamoDBClientTypes.ReturnItemCollectionMetrics?
    /// Use ReturnValues if you want to get the item attributes as they appeared before they were deleted. For DeleteItem, the valid values are:
    ///
    /// * NONE - If ReturnValues is not specified, or if its value is NONE, then nothing is returned. (This setting is the default for ReturnValues.)
    ///
    /// * ALL_OLD - The content of the old item is returned.
    ///
    ///
    /// There is no additional cost associated with requesting a return value aside from the small network and processing overhead of receiving a larger response. No read capacity units are consumed. The ReturnValues parameter is used by several DynamoDB operations; however, DeleteItem does not recognize any values other than NONE or ALL_OLD.
    public var returnValues: DynamoDBClientTypes.ReturnValue?
    /// An optional parameter that returns the item attributes for a DeleteItem operation that failed a condition check. There is no additional cost associated with requesting a return value aside from the small network and processing overhead of receiving a larger response. No read capacity units are consumed.
    public var returnValuesOnConditionCheckFailure: DynamoDBClientTypes.ReturnValuesOnConditionCheckFailure?
    /// The name of the table from which to delete the item. You can also provide the Amazon Resource Name (ARN) of the table in this parameter.
    /// This member is required.
    public var tableName: Swift.String?

    public init(
        conditionExpression: Swift.String? = nil,
        conditionalOperator: DynamoDBClientTypes.ConditionalOperator? = nil,
        expected: [Swift.String: DynamoDBClientTypes.ExpectedAttributeValue]? = nil,
        expressionAttributeNames: [Swift.String: Swift.String]? = nil,
        expressionAttributeValues: [Swift.String: DynamoDBClientTypes.AttributeValue]? = nil,
        key: [Swift.String: DynamoDBClientTypes.AttributeValue]? = nil,
        returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity? = nil,
        returnItemCollectionMetrics: DynamoDBClientTypes.ReturnItemCollectionMetrics? = nil,
        returnValues: DynamoDBClientTypes.ReturnValue? = nil,
        returnValuesOnConditionCheckFailure: DynamoDBClientTypes.ReturnValuesOnConditionCheckFailure? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.conditionExpression = conditionExpression
        self.conditionalOperator = conditionalOperator
        self.expected = expected
        self.expressionAttributeNames = expressionAttributeNames
        self.expressionAttributeValues = expressionAttributeValues
        self.key = key
        self.returnConsumedCapacity = returnConsumedCapacity
        self.returnItemCollectionMetrics = returnItemCollectionMetrics
        self.returnValues = returnValues
        self.returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure
        self.tableName = tableName
    }
}

/// Represents the input of a PutItem operation.
public struct PutItemInput {
    /// A condition that must be satisfied in order for a conditional PutItem operation to succeed. An expression can contain any of the following:
    ///
    /// * Functions: attribute_exists | attribute_not_exists | attribute_type | contains | begins_with | size These function names are case-sensitive.
    ///
    /// * Comparison operators: = | <> | < | > | <= | >= | BETWEEN | IN
    ///
    /// * Logical operators: AND | OR | NOT
    ///
    ///
    /// For more information on condition expressions, see [Condition Expressions](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html) in the Amazon DynamoDB Developer Guide.
    public var conditionExpression: Swift.String?
    /// This is a legacy parameter. Use ConditionExpression instead. For more information, see [ConditionalOperator](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html) in the Amazon DynamoDB Developer Guide.
    public var conditionalOperator: DynamoDBClientTypes.ConditionalOperator?
    /// This is a legacy parameter. Use ConditionExpression instead. For more information, see [Expected](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.Expected.html) in the Amazon DynamoDB Developer Guide.
    public var expected: [Swift.String: DynamoDBClientTypes.ExpectedAttributeValue]?
    /// One or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames:
    ///
    /// * To access an attribute whose name conflicts with a DynamoDB reserved word.
    ///
    /// * To create a placeholder for repeating occurrences of an attribute name in an expression.
    ///
    /// * To prevent special characters in an attribute name from being misinterpreted in an expression.
    ///
    ///
    /// Use the # character in an expression to dereference an attribute name. For example, consider the following attribute name:
    ///
    /// * Percentile
    ///
    ///
    /// The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see [Reserved Words](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html) in the Amazon DynamoDB Developer Guide). To work around this, you could specify the following for ExpressionAttributeNames:
    ///
    /// * {"#P":"Percentile"}
    ///
    ///
    /// You could then use this substitution in an expression, as in this example:
    ///
    /// * #P = :val
    ///
    ///
    /// Tokens that begin with the : character are expression attribute values, which are placeholders for the actual value at runtime. For more information on expression attribute names, see [Specifying Item Attributes](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html) in the Amazon DynamoDB Developer Guide.
    public var expressionAttributeNames: [Swift.String: Swift.String]?
    /// One or more values that can be substituted in an expression. Use the : (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the ProductStatus attribute was one of the following: Available | Backordered | Discontinued You would first need to specify ExpressionAttributeValues as follows: { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} } You could then use these values in an expression, such as this: ProductStatus IN (:avail, :back, :disc) For more information on expression attribute values, see [Condition Expressions](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html) in the Amazon DynamoDB Developer Guide.
    public var expressionAttributeValues: [Swift.String: DynamoDBClientTypes.AttributeValue]?
    /// A map of attribute name/value pairs, one for each attribute. Only the primary key attributes are required; you can optionally provide other attribute name-value pairs for the item. You must provide all of the attributes for the primary key. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide both values for both the partition key and the sort key. If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition. Empty String and Binary attribute values are allowed. Attribute values of type String and Binary must have a length greater than zero if the attribute is used as a key attribute for a table or index. For more information about primary keys, see [Primary Key](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.CoreComponents.html#HowItWorks.CoreComponents.PrimaryKey) in the Amazon DynamoDB Developer Guide. Each element in the Item map is an AttributeValue object.
    /// This member is required.
    public var item: [Swift.String: DynamoDBClientTypes.AttributeValue]?
    /// Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:
    ///
    /// * INDEXES - The response includes the aggregate ConsumedCapacity for the operation, together with ConsumedCapacity for each table and secondary index that was accessed. Note that some operations, such as GetItem and BatchGetItem, do not access any indexes at all. In these cases, specifying INDEXES will only return ConsumedCapacity information for table(s).
    ///
    /// * TOTAL - The response includes only the aggregate ConsumedCapacity for the operation.
    ///
    /// * NONE - No ConsumedCapacity details are included in the response.
    public var returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity?
    /// Determines whether item collection metrics are returned. If set to SIZE, the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to NONE (the default), no statistics are returned.
    public var returnItemCollectionMetrics: DynamoDBClientTypes.ReturnItemCollectionMetrics?
    /// Use ReturnValues if you want to get the item attributes as they appeared before they were updated with the PutItem request. For PutItem, the valid values are:
    ///
    /// * NONE - If ReturnValues is not specified, or if its value is NONE, then nothing is returned. (This setting is the default for ReturnValues.)
    ///
    /// * ALL_OLD - If PutItem overwrote an attribute name-value pair, then the content of the old item is returned.
    ///
    ///
    /// The values returned are strongly consistent. There is no additional cost associated with requesting a return value aside from the small network and processing overhead of receiving a larger response. No read capacity units are consumed. The ReturnValues parameter is used by several DynamoDB operations; however, PutItem does not recognize any values other than NONE or ALL_OLD.
    public var returnValues: DynamoDBClientTypes.ReturnValue?
    /// An optional parameter that returns the item attributes for a PutItem operation that failed a condition check. There is no additional cost associated with requesting a return value aside from the small network and processing overhead of receiving a larger response. No read capacity units are consumed.
    public var returnValuesOnConditionCheckFailure: DynamoDBClientTypes.ReturnValuesOnConditionCheckFailure?
    /// The name of the table to contain the item. You can also provide the Amazon Resource Name (ARN) of the table in this parameter.
    /// This member is required.
    public var tableName: Swift.String?

    public init(
        conditionExpression: Swift.String? = nil,
        conditionalOperator: DynamoDBClientTypes.ConditionalOperator? = nil,
        expected: [Swift.String: DynamoDBClientTypes.ExpectedAttributeValue]? = nil,
        expressionAttributeNames: [Swift.String: Swift.String]? = nil,
        expressionAttributeValues: [Swift.String: DynamoDBClientTypes.AttributeValue]? = nil,
        item: [Swift.String: DynamoDBClientTypes.AttributeValue]? = nil,
        returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity? = nil,
        returnItemCollectionMetrics: DynamoDBClientTypes.ReturnItemCollectionMetrics? = nil,
        returnValues: DynamoDBClientTypes.ReturnValue? = nil,
        returnValuesOnConditionCheckFailure: DynamoDBClientTypes.ReturnValuesOnConditionCheckFailure? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.conditionExpression = conditionExpression
        self.conditionalOperator = conditionalOperator
        self.expected = expected
        self.expressionAttributeNames = expressionAttributeNames
        self.expressionAttributeValues = expressionAttributeValues
        self.item = item
        self.returnConsumedCapacity = returnConsumedCapacity
        self.returnItemCollectionMetrics = returnItemCollectionMetrics
        self.returnValues = returnValues
        self.returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure
        self.tableName = tableName
    }
}

/// Represents the input of a Query operation.
public struct QueryInput {
    /// This is a legacy parameter. Use ProjectionExpression instead. For more information, see [AttributesToGet](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html) in the Amazon DynamoDB Developer Guide.
    public var attributesToGet: [Swift.String]?
    /// This is a legacy parameter. Use FilterExpression instead. For more information, see [ConditionalOperator](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html) in the Amazon DynamoDB Developer Guide.
    public var conditionalOperator: DynamoDBClientTypes.ConditionalOperator?
    /// Determines the read consistency model: If set to true, then the operation uses strongly consistent reads; otherwise, the operation uses eventually consistent reads. Strongly consistent reads are not supported on global secondary indexes. If you query a global secondary index with ConsistentRead set to true, you will receive a ValidationException.
    public var consistentRead: Swift.Bool?
    /// The primary key of the first item that this operation will evaluate. Use the value that was returned for LastEvaluatedKey in the previous operation. The data type for ExclusiveStartKey must be String, Number, or Binary. No set data types are allowed.
    public var exclusiveStartKey: [Swift.String: DynamoDBClientTypes.AttributeValue]?
    /// One or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames:
    ///
    /// * To access an attribute whose name conflicts with a DynamoDB reserved word.
    ///
    /// * To create a placeholder for repeating occurrences of an attribute name in an expression.
    ///
    /// * To prevent special characters in an attribute name from being misinterpreted in an expression.
    ///
    ///
    /// Use the # character in an expression to dereference an attribute name. For example, consider the following attribute name:
    ///
    /// * Percentile
    ///
    ///
    /// The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see [Reserved Words](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html) in the Amazon DynamoDB Developer Guide). To work around this, you could specify the following for ExpressionAttributeNames:
    ///
    /// * {"#P":"Percentile"}
    ///
    ///
    /// You could then use this substitution in an expression, as in this example:
    ///
    /// * #P = :val
    ///
    ///
    /// Tokens that begin with the : character are expression attribute values, which are placeholders for the actual value at runtime. For more information on expression attribute names, see [Specifying Item Attributes](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html) in the Amazon DynamoDB Developer Guide.
    public var expressionAttributeNames: [Swift.String: Swift.String]?
    /// One or more values that can be substituted in an expression. Use the : (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the ProductStatus attribute was one of the following: Available | Backordered | Discontinued You would first need to specify ExpressionAttributeValues as follows: { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} } You could then use these values in an expression, such as this: ProductStatus IN (:avail, :back, :disc) For more information on expression attribute values, see [Specifying Conditions](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html) in the Amazon DynamoDB Developer Guide.
    public var expressionAttributeValues: [Swift.String: DynamoDBClientTypes.AttributeValue]?
    /// A string that contains conditions that DynamoDB applies after the Query operation, but before the data is returned to you. Items that do not satisfy the FilterExpression criteria are not returned. A FilterExpression does not allow key attributes. You cannot define a filter expression based on a partition key or a sort key. A FilterExpression is applied after the items have already been read; the process of filtering does not consume any additional read capacity units. For more information, see [Filter Expressions](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Query.FilterExpression.html) in the Amazon DynamoDB Developer Guide.
    public var filterExpression: Swift.String?
    /// The name of an index to query. This index can be any local secondary index or global secondary index on the table. Note that if you use the IndexName parameter, you must also provide TableName.
    public var indexName: Swift.String?
    /// The condition that specifies the key values for items to be retrieved by the Query action. The condition must perform an equality test on a single partition key value. The condition can optionally perform one of several comparison tests on a single sort key value. This allows Query to retrieve one item with a given partition key value and sort key value, or several items that have the same partition key value but different sort key values. The partition key equality test is required, and must be specified in the following format: partitionKeyName = :partitionkeyval If you also want to provide a condition for the sort key, it must be combined using AND with the condition for the sort key. Following is an example, using the = comparison operator for the sort key: partitionKeyName
    ///     =
    ///
    ///
    ///     :partitionkeyval
    ///
    ///
    ///     AND
    ///
    ///
    ///     sortKeyName
    ///
    ///
    ///     =
    ///
    /// :sortkeyval Valid comparisons for the sort key condition are as follows:
    ///
    /// * sortKeyName=:sortkeyval - true if the sort key value is equal to :sortkeyval.
    ///
    /// * sortKeyName<:sortkeyval - true if the sort key value is less than :sortkeyval.
    ///
    /// * sortKeyName<=:sortkeyval - true if the sort key value is less than or equal to :sortkeyval.
    ///
    /// * sortKeyName>:sortkeyval - true if the sort key value is greater than :sortkeyval.
    ///
    /// * sortKeyName>= :sortkeyval - true if the sort key value is greater than or equal to :sortkeyval.
    ///
    /// * sortKeyNameBETWEEN:sortkeyval1AND:sortkeyval2 - true if the sort key value is greater than or equal to :sortkeyval1, and less than or equal to :sortkeyval2.
    ///
    /// * begins_with (sortKeyName, :sortkeyval) - true if the sort key value begins with a particular operand. (You cannot use this function with a sort key that is of type Number.) Note that the function name begins_with is case-sensitive.
    ///
    ///
    /// Use the ExpressionAttributeValues parameter to replace tokens such as :partitionval and :sortval with actual values at runtime. You can optionally use the ExpressionAttributeNames parameter to replace the names of the partition key and sort key with placeholder tokens. This option might be necessary if an attribute name conflicts with a DynamoDB reserved word. For example, the following KeyConditionExpression parameter causes an error because Size is a reserved word:
    ///
    /// * Size = :myval
    ///
    ///
    /// To work around this, define a placeholder (such a #S) to represent the attribute name Size. KeyConditionExpression then is as follows:
    ///
    /// * #S = :myval
    ///
    ///
    /// For a list of reserved words, see [Reserved Words](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html) in the Amazon DynamoDB Developer Guide. For more information on ExpressionAttributeNames and ExpressionAttributeValues, see [Using Placeholders for Attribute Names and Values](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ExpressionPlaceholders.html) in the Amazon DynamoDB Developer Guide.
    public var keyConditionExpression: Swift.String?
    /// This is a legacy parameter. Use KeyConditionExpression instead. For more information, see [KeyConditions](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.KeyConditions.html) in the Amazon DynamoDB Developer Guide.
    public var keyConditions: [Swift.String: DynamoDBClientTypes.Condition]?
    /// The maximum number of items to evaluate (not necessarily the number of matching items). If DynamoDB processes the number of items up to the limit while processing the results, it stops the operation and returns the matching values up to that point, and a key in LastEvaluatedKey to apply in a subsequent operation, so that you can pick up where you left off. Also, if the processed dataset size exceeds 1 MB before DynamoDB reaches this limit, it stops the operation and returns the matching values up to the limit, and a key in LastEvaluatedKey to apply in a subsequent operation to continue the operation. For more information, see [Query and Scan](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html) in the Amazon DynamoDB Developer Guide.
    public var limit: Swift.Int?
    /// A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas. If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result. For more information, see [Accessing Item Attributes](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html) in the Amazon DynamoDB Developer Guide.
    public var projectionExpression: Swift.String?
    /// This is a legacy parameter. Use FilterExpression instead. For more information, see [QueryFilter](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.QueryFilter.html) in the Amazon DynamoDB Developer Guide.
    public var queryFilter: [Swift.String: DynamoDBClientTypes.Condition]?
    /// Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:
    ///
    /// * INDEXES - The response includes the aggregate ConsumedCapacity for the operation, together with ConsumedCapacity for each table and secondary index that was accessed. Note that some operations, such as GetItem and BatchGetItem, do not access any indexes at all. In these cases, specifying INDEXES will only return ConsumedCapacity information for table(s).
    ///
    /// * TOTAL - The response includes only the aggregate ConsumedCapacity for the operation.
    ///
    /// * NONE - No ConsumedCapacity details are included in the response.
    public var returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity?
    /// Specifies the order for index traversal: If true (default), the traversal is performed in ascending order; if false, the traversal is performed in descending order. Items with the same partition key value are stored in sorted order by sort key. If the sort key data type is Number, the results are stored in numeric order. For type String, the results are stored in order of UTF-8 bytes. For type Binary, DynamoDB treats each byte of the binary data as unsigned. If ScanIndexForward is true, DynamoDB returns the results in the order in which they are stored (by sort key value). This is the default behavior. If ScanIndexForward is false, DynamoDB reads the results in reverse order by sort key value, and then returns the results to the client.
    public var scanIndexForward: Swift.Bool?
    /// The attributes to be returned in the result. You can retrieve all item attributes, specific item attributes, the count of matching items, or in the case of an index, some or all of the attributes projected into the index.
    ///
    /// * ALL_ATTRIBUTES - Returns all of the item attributes from the specified table or index. If you query a local secondary index, then for each matching item in the index, DynamoDB fetches the entire item from the parent table. If the index is configured to project all item attributes, then all of the data can be obtained from the local secondary index, and no fetching is required.
    ///
    /// * ALL_PROJECTED_ATTRIBUTES - Allowed only when querying an index. Retrieves all attributes that have been projected into the index. If the index is configured to project all attributes, this return value is equivalent to specifying ALL_ATTRIBUTES.
    ///
    /// * COUNT - Returns the number of matching items, rather than the matching items themselves. Note that this uses the same quantity of read capacity units as getting the items, and is subject to the same item size calculations.
    ///
    /// * SPECIFIC_ATTRIBUTES - Returns only the attributes listed in ProjectionExpression. This return value is equivalent to specifying ProjectionExpression without specifying any value for Select. If you query or scan a local secondary index and request only attributes that are projected into that index, the operation will read only the index and not the table. If any of the requested attributes are not projected into the local secondary index, DynamoDB fetches each of these attributes from the parent table. This extra fetching incurs additional throughput cost and latency. If you query or scan a global secondary index, you can only request attributes that are projected into the index. Global secondary index queries cannot fetch attributes from the parent table.
    ///
    ///
    /// If neither Select nor ProjectionExpression are specified, DynamoDB defaults to ALL_ATTRIBUTES when accessing a table, and ALL_PROJECTED_ATTRIBUTES when accessing an index. You cannot use both Select and ProjectionExpression together in a single request, unless the value for Select is SPECIFIC_ATTRIBUTES. (This usage is equivalent to specifying ProjectionExpression without any value for Select.) If you use the ProjectionExpression parameter, then the value for Select can only be SPECIFIC_ATTRIBUTES. Any other value for Select will return an error.
    public var select: DynamoDBClientTypes.Select?
    /// The name of the table containing the requested items. You can also provide the Amazon Resource Name (ARN) of the table in this parameter.
    /// This member is required.
    public var tableName: Swift.String?

    public init(
        attributesToGet: [Swift.String]? = nil,
        conditionalOperator: DynamoDBClientTypes.ConditionalOperator? = nil,
        consistentRead: Swift.Bool? = nil,
        exclusiveStartKey: [Swift.String: DynamoDBClientTypes.AttributeValue]? = nil,
        expressionAttributeNames: [Swift.String: Swift.String]? = nil,
        expressionAttributeValues: [Swift.String: DynamoDBClientTypes.AttributeValue]? = nil,
        filterExpression: Swift.String? = nil,
        indexName: Swift.String? = nil,
        keyConditionExpression: Swift.String? = nil,
        keyConditions: [Swift.String: DynamoDBClientTypes.Condition]? = nil,
        limit: Swift.Int? = nil,
        projectionExpression: Swift.String? = nil,
        queryFilter: [Swift.String: DynamoDBClientTypes.Condition]? = nil,
        returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity? = nil,
        scanIndexForward: Swift.Bool? = nil,
        select: DynamoDBClientTypes.Select? = nil,
        tableName: Swift.String? = nil
    )
    {
        self.attributesToGet = attributesToGet
        self.conditionalOperator = conditionalOperator
        self.consistentRead = consistentRead
        self.exclusiveStartKey = exclusiveStartKey
        self.expressionAttributeNames = expressionAttributeNames
        self.expressionAttributeValues = expressionAttributeValues
        self.filterExpression = filterExpression
        self.indexName = indexName
        self.keyConditionExpression = keyConditionExpression
        self.keyConditions = keyConditions
        self.limit = limit
        self.projectionExpression = projectionExpression
        self.queryFilter = queryFilter
        self.returnConsumedCapacity = returnConsumedCapacity
        self.scanIndexForward = scanIndexForward
        self.select = select
        self.tableName = tableName
    }
}

/// Represents the output of a BatchWriteItem operation.
public struct BatchWriteItemOutput {
    /// The capacity units consumed by the entire BatchWriteItem operation. Each element consists of:
    ///
    /// * TableName - The table that consumed the provisioned throughput.
    ///
    /// * CapacityUnits - The total number of capacity units consumed.
    public var consumedCapacity: [DynamoDBClientTypes.ConsumedCapacity]?
    /// A list of tables that were processed by BatchWriteItem and, for each table, information about any item collections that were affected by individual DeleteItem or PutItem operations. Each entry consists of the following subelements:
    ///
    /// * ItemCollectionKey - The partition key value of the item collection. This is the same as the partition key value of the item.
    ///
    /// * SizeEstimateRangeGB - An estimate of item collection size, expressed in GB. This is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on the table. Use this estimate to measure whether a local secondary index is approaching its size limit. The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.
    public var itemCollectionMetrics: [Swift.String: [DynamoDBClientTypes.ItemCollectionMetrics]]?
    /// A map of tables and requests against those tables that were not processed. The UnprocessedItems value is in the same form as RequestItems, so you can provide this value directly to a subsequent BatchWriteItem operation. For more information, see RequestItems in the Request Parameters section. Each UnprocessedItems entry consists of a table name or table ARN and, for that table, a list of operations to perform (DeleteRequest or PutRequest).
    ///
    /// * DeleteRequest - Perform a DeleteItem operation on the specified item. The item to be deleted is identified by a Key subelement:
    ///
    /// * Key - A map of primary key attribute values that uniquely identify the item. Each entry in this map consists of an attribute name and an attribute value.
    ///
    ///
    ///
    ///
    /// * PutRequest - Perform a PutItem operation on the specified item. The item to be put is identified by an Item subelement:
    ///
    /// * Item - A map of attributes and their values. Each entry in this map consists of an attribute name and an attribute value. Attribute values must not be null; string and binary type attributes must have lengths greater than zero; and set type attributes must not be empty. Requests that contain empty values will be rejected with a ValidationException exception. If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition.
    ///
    ///
    ///
    ///
    ///
    /// If there are no unprocessed items remaining, the response contains an empty UnprocessedItems map.
    public var unprocessedItems: [Swift.String: [DynamoDBClientTypes.WriteRequest]]?

    public init(
        consumedCapacity: [DynamoDBClientTypes.ConsumedCapacity]? = nil,
        itemCollectionMetrics: [Swift.String: [DynamoDBClientTypes.ItemCollectionMetrics]]? = nil,
        unprocessedItems: [Swift.String: [DynamoDBClientTypes.WriteRequest]]? = nil
    )
    {
        self.consumedCapacity = consumedCapacity
        self.itemCollectionMetrics = itemCollectionMetrics
        self.unprocessedItems = unprocessedItems
    }
}

/// Represents the input of an UpdateItem operation.
public struct UpdateItemInput {
    /// This is a legacy parameter. Use UpdateExpression instead. For more information, see [AttributeUpdates](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributeUpdates.html) in the Amazon DynamoDB Developer Guide.
    public var attributeUpdates: [Swift.String: DynamoDBClientTypes.AttributeValueUpdate]?
    /// A condition that must be satisfied in order for a conditional update to succeed. An expression can contain any of the following:
    ///
    /// * Functions: attribute_exists | attribute_not_exists | attribute_type | contains | begins_with | size These function names are case-sensitive.
    ///
    /// * Comparison operators: = | <> | < | > | <= | >= | BETWEEN | IN
    ///
    /// * Logical operators: AND | OR | NOT
    ///
    ///
    /// For more information about condition expressions, see [Specifying Conditions](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html) in the Amazon DynamoDB Developer Guide.
    public var conditionExpression: Swift.String?
    /// This is a legacy parameter. Use ConditionExpression instead. For more information, see [ConditionalOperator](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html) in the Amazon DynamoDB Developer Guide.
    public var conditionalOperator: DynamoDBClientTypes.ConditionalOperator?
    /// This is a legacy parameter. Use ConditionExpression instead. For more information, see [Expected](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.Expected.html) in the Amazon DynamoDB Developer Guide.
    public var expected: [Swift.String: DynamoDBClientTypes.ExpectedAttributeValue]?
    /// One or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames:
    ///
    /// * To access an attribute whose name conflicts with a DynamoDB reserved word.
    ///
    /// * To create a placeholder for repeating occurrences of an attribute name in an expression.
    ///
    /// * To prevent special characters in an attribute name from being misinterpreted in an expression.
    ///
    ///
    /// Use the # character in an expression to dereference an attribute name. For example, consider the following attribute name:
    ///
    /// * Percentile
    ///
    ///
    /// The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see [Reserved Words](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html) in the Amazon DynamoDB Developer Guide.) To work around this, you could specify the following for ExpressionAttributeNames:
    ///
    /// * {"#P":"Percentile"}
    ///
    ///
    /// You could then use this substitution in an expression, as in this example:
    ///
    /// * #P = :val
    ///
    ///
    /// Tokens that begin with the : character are expression attribute values, which are placeholders for the actual value at runtime. For more information about expression attribute names, see [Specifying Item Attributes](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html) in the Amazon DynamoDB Developer Guide.
    public var expressionAttributeNames: [Swift.String: Swift.String]?
    /// One or more values that can be substituted in an expression. Use the : (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the ProductStatus attribute was one of the following: Available | Backordered | Discontinued You would first need to specify ExpressionAttributeValues as follows: { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} } You could then use these values in an expression, such as this: ProductStatus IN (:avail, :back, :disc) For more information on expression attribute values, see [Condition Expressions](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html) in the Amazon DynamoDB Developer Guide.
    public var expressionAttributeValues: [Swift.String: DynamoDBClientTypes.AttributeValue]?
    /// The primary key of the item to be updated. Each element consists of an attribute name and a value for that attribute. For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.
    /// This member is required.
    public var key: [Swift.String: DynamoDBClientTypes.AttributeValue]?
    /// Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:
    ///
    /// * INDEXES - The response includes the aggregate ConsumedCapacity for the operation, together with ConsumedCapacity for each table and secondary index that was accessed. Note that some operations, such as GetItem and BatchGetItem, do not access any indexes at all. In these cases, specifying INDEXES will only return ConsumedCapacity information for table(s).
    ///
    /// * TOTAL - The response includes only the aggregate ConsumedCapacity for the operation.
    ///
    /// * NONE - No ConsumedCapacity details are included in the response.
    public var returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity?
    /// Determines whether item collection metrics are returned. If set to SIZE, the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to NONE (the default), no statistics are returned.
    public var returnItemCollectionMetrics: DynamoDBClientTypes.ReturnItemCollectionMetrics?
    /// Use ReturnValues if you want to get the item attributes as they appear before or after they are successfully updated. For UpdateItem, the valid values are:
    ///
    /// * NONE - If ReturnValues is not specified, or if its value is NONE, then nothing is returned. (This setting is the default for ReturnValues.)
    ///
    /// * ALL_OLD - Returns all of the attributes of the item, as they appeared before the UpdateItem operation.
    ///
    /// * UPDATED_OLD - Returns only the updated attributes, as they appeared before the UpdateItem operation.
    ///
    /// * ALL_NEW - Returns all of the attributes of the item, as they appear after the UpdateItem operation.
    ///
    /// * UPDATED_NEW - Returns only the updated attributes, as they appear after the UpdateItem operation.
    ///
    ///
    /// There is no additional cost associated with requesting a return value aside from the small network and processing overhead of receiving a larger response. No read capacity units are consumed. The values returned are strongly consistent.
    public var returnValues: DynamoDBClientTypes.ReturnValue?
    /// An optional parameter that returns the item attributes for an UpdateItem operation that failed a condition check. There is no additional cost associated with requesting a return value aside from the small network and processing overhead of receiving a larger response. No read capacity units are consumed.
    public var returnValuesOnConditionCheckFailure: DynamoDBClientTypes.ReturnValuesOnConditionCheckFailure?
    /// The name of the table containing the item to update. You can also provide the Amazon Resource Name (ARN) of the table in this parameter.
    /// This member is required.
    public var tableName: Swift.String?
    /// An expression that defines one or more attributes to be updated, the action to be performed on them, and new values for them. The following action values are available for UpdateExpression.
    ///
    /// * SET - Adds one or more attributes and values to an item. If any of these attributes already exist, they are replaced by the new values. You can also use SET to add or subtract from an attribute that is of type Number. For example: SET myNum = myNum + :valSET supports the following functions:
    ///
    /// * if_not_exists (path, operand) - if the item does not contain an attribute at the specified path, then if_not_exists evaluates to operand; otherwise, it evaluates to path. You can use this function to avoid overwriting an attribute that may already be present in the item.
    ///
    /// * list_append (operand, operand) - evaluates to a list with a new element added to it. You can append the new element to the start or the end of the list by reversing the order of the operands.
    ///
    ///
    /// These function names are case-sensitive.
    ///
    /// * REMOVE - Removes one or more attributes from an item.
    ///
    /// * ADD - Adds the specified value to the item, if the attribute does not already exist. If the attribute does exist, then the behavior of ADD depends on the data type of the attribute:
    ///
    /// * If the existing attribute is a number, and if Value is also a number, then Value is mathematically added to the existing attribute. If Value is a negative number, then it is subtracted from the existing attribute. If you use ADD to increment or decrement a number value for an item that doesn't exist before the update, DynamoDB uses 0 as the initial value. Similarly, if you use ADD for an existing item to increment or decrement an attribute value that doesn't exist before the update, DynamoDB uses 0 as the initial value. For example, suppose that the item you want to update doesn't have an attribute named itemcount, but you decide to ADD the number 3 to this attribute anyway. DynamoDB will create the itemcount attribute, set its initial value to 0, and finally add 3 to it. The result will be a new itemcount attribute in the item, with a value of 3.
    ///
    /// * If the existing data type is a set and if Value is also a set, then Value is added to the existing set. For example, if the attribute value is the set [1,2], and the ADD action specified [3], then the final attribute value is [1,2,3]. An error occurs if an ADD action is specified for a set attribute and the attribute type specified does not match the existing set type. Both sets must have the same primitive data type. For example, if the existing data type is a set of strings, the Value must also be a set of strings.
    ///
    ///
    /// The ADD action only supports Number and set data types. In addition, ADD can only be used on top-level attributes, not nested attributes.
    ///
    /// * DELETE - Deletes an element from a set. If a set of values is specified, then those values are subtracted from the old set. For example, if the attribute value was the set [a,b,c] and the DELETE action specifies [a,c], then the final attribute value is [b]. Specifying an empty set is an error. The DELETE action only supports set data types. In addition, DELETE can only be used on top-level attributes, not nested attributes.
    ///
    ///
    /// You can have many actions in a single expression, such as the following: SET a=:value1, b=:value2 DELETE :value3, :value4, :value5 For more information on update expressions, see [Modifying Items and Attributes](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.Modifying.html) in the Amazon DynamoDB Developer Guide.
    public var updateExpression: Swift.String?

    public init(
        attributeUpdates: [Swift.String: DynamoDBClientTypes.AttributeValueUpdate]? = nil,
        conditionExpression: Swift.String? = nil,
        conditionalOperator: DynamoDBClientTypes.ConditionalOperator? = nil,
        expected: [Swift.String: DynamoDBClientTypes.ExpectedAttributeValue]? = nil,
        expressionAttributeNames: [Swift.String: Swift.String]? = nil,
        expressionAttributeValues: [Swift.String: DynamoDBClientTypes.AttributeValue]? = nil,
        key: [Swift.String: DynamoDBClientTypes.AttributeValue]? = nil,
        returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity? = nil,
        returnItemCollectionMetrics: DynamoDBClientTypes.ReturnItemCollectionMetrics? = nil,
        returnValues: DynamoDBClientTypes.ReturnValue? = nil,
        returnValuesOnConditionCheckFailure: DynamoDBClientTypes.ReturnValuesOnConditionCheckFailure? = nil,
        tableName: Swift.String? = nil,
        updateExpression: Swift.String? = nil
    )
    {
        self.attributeUpdates = attributeUpdates
        self.conditionExpression = conditionExpression
        self.conditionalOperator = conditionalOperator
        self.expected = expected
        self.expressionAttributeNames = expressionAttributeNames
        self.expressionAttributeValues = expressionAttributeValues
        self.key = key
        self.returnConsumedCapacity = returnConsumedCapacity
        self.returnItemCollectionMetrics = returnItemCollectionMetrics
        self.returnValues = returnValues
        self.returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure
        self.tableName = tableName
        self.updateExpression = updateExpression
    }
}

extension DynamoDBClientTypes {
    /// A list of requests that can perform update, put, delete, or check operations on multiple items in one or more tables atomically.
    public struct TransactWriteItem {
        /// A request to perform a check item operation.
        public var conditionCheck: DynamoDBClientTypes.ConditionCheck?
        /// A request to perform a DeleteItem operation.
        public var delete: DynamoDBClientTypes.Delete?
        /// A request to perform a PutItem operation.
        public var put: DynamoDBClientTypes.Put?
        /// A request to perform an UpdateItem operation.
        public var update: DynamoDBClientTypes.Update?

        public init(
            conditionCheck: DynamoDBClientTypes.ConditionCheck? = nil,
            delete: DynamoDBClientTypes.Delete? = nil,
            put: DynamoDBClientTypes.Put? = nil,
            update: DynamoDBClientTypes.Update? = nil
        )
        {
            self.conditionCheck = conditionCheck
            self.delete = delete
            self.put = put
            self.update = update
        }
    }

}

public struct TransactWriteItemsInput {
    /// Providing a ClientRequestToken makes the call to TransactWriteItems idempotent, meaning that multiple identical calls have the same effect as one single call. Although multiple identical calls using the same client request token produce the same result on the server (no side effects), the responses to the calls might not be the same. If the ReturnConsumedCapacity parameter is set, then the initial TransactWriteItems call returns the amount of write capacity units consumed in making the changes. Subsequent TransactWriteItems calls with the same client token return the number of read capacity units consumed in reading the item. A client request token is valid for 10 minutes after the first request that uses it is completed. After 10 minutes, any request with the same client token is treated as a new request. Do not resubmit the same request with the same client token for more than 10 minutes, or the result might not be idempotent. If you submit a request with the same client token but a change in other parameters within the 10-minute idempotency window, DynamoDB returns an IdempotentParameterMismatch exception.
    public var clientRequestToken: Swift.String?
    /// Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:
    ///
    /// * INDEXES - The response includes the aggregate ConsumedCapacity for the operation, together with ConsumedCapacity for each table and secondary index that was accessed. Note that some operations, such as GetItem and BatchGetItem, do not access any indexes at all. In these cases, specifying INDEXES will only return ConsumedCapacity information for table(s).
    ///
    /// * TOTAL - The response includes only the aggregate ConsumedCapacity for the operation.
    ///
    /// * NONE - No ConsumedCapacity details are included in the response.
    public var returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity?
    /// Determines whether item collection metrics are returned. If set to SIZE, the response includes statistics about item collections (if any), that were modified during the operation and are returned in the response. If set to NONE (the default), no statistics are returned.
    public var returnItemCollectionMetrics: DynamoDBClientTypes.ReturnItemCollectionMetrics?
    /// An ordered array of up to 100 TransactWriteItem objects, each of which contains a ConditionCheck, Put, Update, or Delete object. These can operate on items in different tables, but the tables must reside in the same Amazon Web Services account and Region, and no two of them can operate on the same item.
    /// This member is required.
    public var transactItems: [DynamoDBClientTypes.TransactWriteItem]?

    public init(
        clientRequestToken: Swift.String? = nil,
        returnConsumedCapacity: DynamoDBClientTypes.ReturnConsumedCapacity? = nil,
        returnItemCollectionMetrics: DynamoDBClientTypes.ReturnItemCollectionMetrics? = nil,
        transactItems: [DynamoDBClientTypes.TransactWriteItem]? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.returnConsumedCapacity = returnConsumedCapacity
        self.returnItemCollectionMetrics = returnItemCollectionMetrics
        self.transactItems = transactItems
    }
}

extension BatchExecuteStatementInput {

    static func urlPathProvider(_ value: BatchExecuteStatementInput) -> Swift.String? {
        return "/"
    }
}

extension BatchGetItemInput {

    static func urlPathProvider(_ value: BatchGetItemInput) -> Swift.String? {
        return "/"
    }
}

extension BatchWriteItemInput {

    static func urlPathProvider(_ value: BatchWriteItemInput) -> Swift.String? {
        return "/"
    }
}

extension CreateBackupInput {

    static func urlPathProvider(_ value: CreateBackupInput) -> Swift.String? {
        return "/"
    }
}

extension CreateGlobalTableInput {

    static func urlPathProvider(_ value: CreateGlobalTableInput) -> Swift.String? {
        return "/"
    }
}

extension CreateTableInput {

    static func urlPathProvider(_ value: CreateTableInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteBackupInput {

    static func urlPathProvider(_ value: DeleteBackupInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteItemInput {

    static func urlPathProvider(_ value: DeleteItemInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteResourcePolicyInput {

    static func urlPathProvider(_ value: DeleteResourcePolicyInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteTableInput {

    static func urlPathProvider(_ value: DeleteTableInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeBackupInput {

    static func urlPathProvider(_ value: DescribeBackupInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeContinuousBackupsInput {

    static func urlPathProvider(_ value: DescribeContinuousBackupsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeContributorInsightsInput {

    static func urlPathProvider(_ value: DescribeContributorInsightsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeEndpointsInput {

    static func urlPathProvider(_ value: DescribeEndpointsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeExportInput {

    static func urlPathProvider(_ value: DescribeExportInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeGlobalTableInput {

    static func urlPathProvider(_ value: DescribeGlobalTableInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeGlobalTableSettingsInput {

    static func urlPathProvider(_ value: DescribeGlobalTableSettingsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeImportInput {

    static func urlPathProvider(_ value: DescribeImportInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeKinesisStreamingDestinationInput {

    static func urlPathProvider(_ value: DescribeKinesisStreamingDestinationInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeLimitsInput {

    static func urlPathProvider(_ value: DescribeLimitsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeTableInput {

    static func urlPathProvider(_ value: DescribeTableInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeTableReplicaAutoScalingInput {

    static func urlPathProvider(_ value: DescribeTableReplicaAutoScalingInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeTimeToLiveInput {

    static func urlPathProvider(_ value: DescribeTimeToLiveInput) -> Swift.String? {
        return "/"
    }
}

extension DisableKinesisStreamingDestinationInput {

    static func urlPathProvider(_ value: DisableKinesisStreamingDestinationInput) -> Swift.String? {
        return "/"
    }
}

extension EnableKinesisStreamingDestinationInput {

    static func urlPathProvider(_ value: EnableKinesisStreamingDestinationInput) -> Swift.String? {
        return "/"
    }
}

extension ExecuteStatementInput {

    static func urlPathProvider(_ value: ExecuteStatementInput) -> Swift.String? {
        return "/"
    }
}

extension ExecuteTransactionInput {

    static func urlPathProvider(_ value: ExecuteTransactionInput) -> Swift.String? {
        return "/"
    }
}

extension ExportTableToPointInTimeInput {

    static func urlPathProvider(_ value: ExportTableToPointInTimeInput) -> Swift.String? {
        return "/"
    }
}

extension GetItemInput {

    static func urlPathProvider(_ value: GetItemInput) -> Swift.String? {
        return "/"
    }
}

extension GetResourcePolicyInput {

    static func urlPathProvider(_ value: GetResourcePolicyInput) -> Swift.String? {
        return "/"
    }
}

extension ImportTableInput {

    static func urlPathProvider(_ value: ImportTableInput) -> Swift.String? {
        return "/"
    }
}

extension ListBackupsInput {

    static func urlPathProvider(_ value: ListBackupsInput) -> Swift.String? {
        return "/"
    }
}

extension ListContributorInsightsInput {

    static func urlPathProvider(_ value: ListContributorInsightsInput) -> Swift.String? {
        return "/"
    }
}

extension ListExportsInput {

    static func urlPathProvider(_ value: ListExportsInput) -> Swift.String? {
        return "/"
    }
}

extension ListGlobalTablesInput {

    static func urlPathProvider(_ value: ListGlobalTablesInput) -> Swift.String? {
        return "/"
    }
}

extension ListImportsInput {

    static func urlPathProvider(_ value: ListImportsInput) -> Swift.String? {
        return "/"
    }
}

extension ListTablesInput {

    static func urlPathProvider(_ value: ListTablesInput) -> Swift.String? {
        return "/"
    }
}

extension ListTagsOfResourceInput {

    static func urlPathProvider(_ value: ListTagsOfResourceInput) -> Swift.String? {
        return "/"
    }
}

extension PutItemInput {

    static func urlPathProvider(_ value: PutItemInput) -> Swift.String? {
        return "/"
    }
}

extension PutResourcePolicyInput {

    static func urlPathProvider(_ value: PutResourcePolicyInput) -> Swift.String? {
        return "/"
    }
}

extension QueryInput {

    static func urlPathProvider(_ value: QueryInput) -> Swift.String? {
        return "/"
    }
}

extension RestoreTableFromBackupInput {

    static func urlPathProvider(_ value: RestoreTableFromBackupInput) -> Swift.String? {
        return "/"
    }
}

extension RestoreTableToPointInTimeInput {

    static func urlPathProvider(_ value: RestoreTableToPointInTimeInput) -> Swift.String? {
        return "/"
    }
}

extension ScanInput {

    static func urlPathProvider(_ value: ScanInput) -> Swift.String? {
        return "/"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension TransactGetItemsInput {

    static func urlPathProvider(_ value: TransactGetItemsInput) -> Swift.String? {
        return "/"
    }
}

extension TransactWriteItemsInput {

    static func urlPathProvider(_ value: TransactWriteItemsInput) -> Swift.String? {
        return "/"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateContinuousBackupsInput {

    static func urlPathProvider(_ value: UpdateContinuousBackupsInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateContributorInsightsInput {

    static func urlPathProvider(_ value: UpdateContributorInsightsInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateGlobalTableInput {

    static func urlPathProvider(_ value: UpdateGlobalTableInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateGlobalTableSettingsInput {

    static func urlPathProvider(_ value: UpdateGlobalTableSettingsInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateItemInput {

    static func urlPathProvider(_ value: UpdateItemInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateKinesisStreamingDestinationInput {

    static func urlPathProvider(_ value: UpdateKinesisStreamingDestinationInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateTableInput {

    static func urlPathProvider(_ value: UpdateTableInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateTableReplicaAutoScalingInput {

    static func urlPathProvider(_ value: UpdateTableReplicaAutoScalingInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateTimeToLiveInput {

    static func urlPathProvider(_ value: UpdateTimeToLiveInput) -> Swift.String? {
        return "/"
    }
}

extension BatchExecuteStatementInput {

    static func write(value: BatchExecuteStatementInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ReturnConsumedCapacity"].write(value.returnConsumedCapacity)
        try writer["Statements"].writeList(value.statements, memberWritingClosure: DynamoDBClientTypes.BatchStatementRequest.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension BatchGetItemInput {

    static func write(value: BatchGetItemInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RequestItems"].writeMap(value.requestItems, valueWritingClosure: DynamoDBClientTypes.KeysAndAttributes.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ReturnConsumedCapacity"].write(value.returnConsumedCapacity)
    }
}

extension BatchWriteItemInput {

    static func write(value: BatchWriteItemInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RequestItems"].writeMap(value.requestItems, valueWritingClosure: SmithyReadWrite.listWritingClosure(memberWritingClosure: DynamoDBClientTypes.WriteRequest.write(value:to:), memberNodeInfo: "member", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ReturnConsumedCapacity"].write(value.returnConsumedCapacity)
        try writer["ReturnItemCollectionMetrics"].write(value.returnItemCollectionMetrics)
    }
}

extension CreateBackupInput {

    static func write(value: CreateBackupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BackupName"].write(value.backupName)
        try writer["TableName"].write(value.tableName)
    }
}

extension CreateGlobalTableInput {

    static func write(value: CreateGlobalTableInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GlobalTableName"].write(value.globalTableName)
        try writer["ReplicationGroup"].writeList(value.replicationGroup, memberWritingClosure: DynamoDBClientTypes.Replica.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateTableInput {

    static func write(value: CreateTableInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AttributeDefinitions"].writeList(value.attributeDefinitions, memberWritingClosure: DynamoDBClientTypes.AttributeDefinition.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["BillingMode"].write(value.billingMode)
        try writer["DeletionProtectionEnabled"].write(value.deletionProtectionEnabled)
        try writer["GlobalSecondaryIndexes"].writeList(value.globalSecondaryIndexes, memberWritingClosure: DynamoDBClientTypes.GlobalSecondaryIndex.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["KeySchema"].writeList(value.keySchema, memberWritingClosure: DynamoDBClientTypes.KeySchemaElement.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["LocalSecondaryIndexes"].writeList(value.localSecondaryIndexes, memberWritingClosure: DynamoDBClientTypes.LocalSecondaryIndex.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["OnDemandThroughput"].write(value.onDemandThroughput, with: DynamoDBClientTypes.OnDemandThroughput.write(value:to:))
        try writer["ProvisionedThroughput"].write(value.provisionedThroughput, with: DynamoDBClientTypes.ProvisionedThroughput.write(value:to:))
        try writer["ResourcePolicy"].write(value.resourcePolicy)
        try writer["SSESpecification"].write(value.sseSpecification, with: DynamoDBClientTypes.SSESpecification.write(value:to:))
        try writer["StreamSpecification"].write(value.streamSpecification, with: DynamoDBClientTypes.StreamSpecification.write(value:to:))
        try writer["TableClass"].write(value.tableClass)
        try writer["TableName"].write(value.tableName)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: DynamoDBClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DeleteBackupInput {

    static func write(value: DeleteBackupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BackupArn"].write(value.backupArn)
    }
}

extension DeleteItemInput {

    static func write(value: DeleteItemInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConditionExpression"].write(value.conditionExpression)
        try writer["ConditionalOperator"].write(value.conditionalOperator)
        try writer["Expected"].writeMap(value.expected, valueWritingClosure: DynamoDBClientTypes.ExpectedAttributeValue.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ExpressionAttributeNames"].writeMap(value.expressionAttributeNames, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ExpressionAttributeValues"].writeMap(value.expressionAttributeValues, valueWritingClosure: DynamoDBClientTypes.AttributeValue.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["Key"].writeMap(value.key, valueWritingClosure: DynamoDBClientTypes.AttributeValue.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ReturnConsumedCapacity"].write(value.returnConsumedCapacity)
        try writer["ReturnItemCollectionMetrics"].write(value.returnItemCollectionMetrics)
        try writer["ReturnValues"].write(value.returnValues)
        try writer["ReturnValuesOnConditionCheckFailure"].write(value.returnValuesOnConditionCheckFailure)
        try writer["TableName"].write(value.tableName)
    }
}

extension DeleteResourcePolicyInput {

    static func write(value: DeleteResourcePolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ExpectedRevisionId"].write(value.expectedRevisionId)
        try writer["ResourceArn"].write(value.resourceArn)
    }
}

extension DeleteTableInput {

    static func write(value: DeleteTableInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TableName"].write(value.tableName)
    }
}

extension DescribeBackupInput {

    static func write(value: DescribeBackupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BackupArn"].write(value.backupArn)
    }
}

extension DescribeContinuousBackupsInput {

    static func write(value: DescribeContinuousBackupsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TableName"].write(value.tableName)
    }
}

extension DescribeContributorInsightsInput {

    static func write(value: DescribeContributorInsightsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IndexName"].write(value.indexName)
        try writer["TableName"].write(value.tableName)
    }
}

extension DescribeEndpointsInput {

    static func write(value: DescribeEndpointsInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension DescribeExportInput {

    static func write(value: DescribeExportInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ExportArn"].write(value.exportArn)
    }
}

extension DescribeGlobalTableInput {

    static func write(value: DescribeGlobalTableInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GlobalTableName"].write(value.globalTableName)
    }
}

extension DescribeGlobalTableSettingsInput {

    static func write(value: DescribeGlobalTableSettingsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GlobalTableName"].write(value.globalTableName)
    }
}

extension DescribeImportInput {

    static func write(value: DescribeImportInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ImportArn"].write(value.importArn)
    }
}

extension DescribeKinesisStreamingDestinationInput {

    static func write(value: DescribeKinesisStreamingDestinationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TableName"].write(value.tableName)
    }
}

extension DescribeLimitsInput {

    static func write(value: DescribeLimitsInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension DescribeTableInput {

    static func write(value: DescribeTableInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TableName"].write(value.tableName)
    }
}

extension DescribeTableReplicaAutoScalingInput {

    static func write(value: DescribeTableReplicaAutoScalingInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TableName"].write(value.tableName)
    }
}

extension DescribeTimeToLiveInput {

    static func write(value: DescribeTimeToLiveInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TableName"].write(value.tableName)
    }
}

extension DisableKinesisStreamingDestinationInput {

    static func write(value: DisableKinesisStreamingDestinationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EnableKinesisStreamingConfiguration"].write(value.enableKinesisStreamingConfiguration, with: DynamoDBClientTypes.EnableKinesisStreamingConfiguration.write(value:to:))
        try writer["StreamArn"].write(value.streamArn)
        try writer["TableName"].write(value.tableName)
    }
}

extension EnableKinesisStreamingDestinationInput {

    static func write(value: EnableKinesisStreamingDestinationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EnableKinesisStreamingConfiguration"].write(value.enableKinesisStreamingConfiguration, with: DynamoDBClientTypes.EnableKinesisStreamingConfiguration.write(value:to:))
        try writer["StreamArn"].write(value.streamArn)
        try writer["TableName"].write(value.tableName)
    }
}

extension ExecuteStatementInput {

    static func write(value: ExecuteStatementInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConsistentRead"].write(value.consistentRead)
        try writer["Limit"].write(value.limit)
        try writer["NextToken"].write(value.nextToken)
        try writer["Parameters"].writeList(value.parameters, memberWritingClosure: DynamoDBClientTypes.AttributeValue.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ReturnConsumedCapacity"].write(value.returnConsumedCapacity)
        try writer["ReturnValuesOnConditionCheckFailure"].write(value.returnValuesOnConditionCheckFailure)
        try writer["Statement"].write(value.statement)
    }
}

extension ExecuteTransactionInput {

    static func write(value: ExecuteTransactionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["ReturnConsumedCapacity"].write(value.returnConsumedCapacity)
        try writer["TransactStatements"].writeList(value.transactStatements, memberWritingClosure: DynamoDBClientTypes.ParameterizedStatement.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension ExportTableToPointInTimeInput {

    static func write(value: ExportTableToPointInTimeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientToken"].write(value.clientToken)
        try writer["ExportFormat"].write(value.exportFormat)
        try writer["ExportTime"].writeTimestamp(value.exportTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["ExportType"].write(value.exportType)
        try writer["IncrementalExportSpecification"].write(value.incrementalExportSpecification, with: DynamoDBClientTypes.IncrementalExportSpecification.write(value:to:))
        try writer["S3Bucket"].write(value.s3Bucket)
        try writer["S3BucketOwner"].write(value.s3BucketOwner)
        try writer["S3Prefix"].write(value.s3Prefix)
        try writer["S3SseAlgorithm"].write(value.s3SseAlgorithm)
        try writer["S3SseKmsKeyId"].write(value.s3SseKmsKeyId)
        try writer["TableArn"].write(value.tableArn)
    }
}

extension GetItemInput {

    static func write(value: GetItemInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AttributesToGet"].writeList(value.attributesToGet, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ConsistentRead"].write(value.consistentRead)
        try writer["ExpressionAttributeNames"].writeMap(value.expressionAttributeNames, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["Key"].writeMap(value.key, valueWritingClosure: DynamoDBClientTypes.AttributeValue.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ProjectionExpression"].write(value.projectionExpression)
        try writer["ReturnConsumedCapacity"].write(value.returnConsumedCapacity)
        try writer["TableName"].write(value.tableName)
    }
}

extension GetResourcePolicyInput {

    static func write(value: GetResourcePolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
    }
}

extension ImportTableInput {

    static func write(value: ImportTableInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientToken"].write(value.clientToken)
        try writer["InputCompressionType"].write(value.inputCompressionType)
        try writer["InputFormat"].write(value.inputFormat)
        try writer["InputFormatOptions"].write(value.inputFormatOptions, with: DynamoDBClientTypes.InputFormatOptions.write(value:to:))
        try writer["S3BucketSource"].write(value.s3BucketSource, with: DynamoDBClientTypes.S3BucketSource.write(value:to:))
        try writer["TableCreationParameters"].write(value.tableCreationParameters, with: DynamoDBClientTypes.TableCreationParameters.write(value:to:))
    }
}

extension ListBackupsInput {

    static func write(value: ListBackupsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BackupType"].write(value.backupType)
        try writer["ExclusiveStartBackupArn"].write(value.exclusiveStartBackupArn)
        try writer["Limit"].write(value.limit)
        try writer["TableName"].write(value.tableName)
        try writer["TimeRangeLowerBound"].writeTimestamp(value.timeRangeLowerBound, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["TimeRangeUpperBound"].writeTimestamp(value.timeRangeUpperBound, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

extension ListContributorInsightsInput {

    static func write(value: ListContributorInsightsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["TableName"].write(value.tableName)
    }
}

extension ListExportsInput {

    static func write(value: ListExportsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["TableArn"].write(value.tableArn)
    }
}

extension ListGlobalTablesInput {

    static func write(value: ListGlobalTablesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ExclusiveStartGlobalTableName"].write(value.exclusiveStartGlobalTableName)
        try writer["Limit"].write(value.limit)
        try writer["RegionName"].write(value.regionName)
    }
}

extension ListImportsInput {

    static func write(value: ListImportsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["NextToken"].write(value.nextToken)
        try writer["PageSize"].write(value.pageSize)
        try writer["TableArn"].write(value.tableArn)
    }
}

extension ListTablesInput {

    static func write(value: ListTablesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ExclusiveStartTableName"].write(value.exclusiveStartTableName)
        try writer["Limit"].write(value.limit)
    }
}

extension ListTagsOfResourceInput {

    static func write(value: ListTagsOfResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["NextToken"].write(value.nextToken)
        try writer["ResourceArn"].write(value.resourceArn)
    }
}

extension PutItemInput {

    static func write(value: PutItemInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConditionExpression"].write(value.conditionExpression)
        try writer["ConditionalOperator"].write(value.conditionalOperator)
        try writer["Expected"].writeMap(value.expected, valueWritingClosure: DynamoDBClientTypes.ExpectedAttributeValue.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ExpressionAttributeNames"].writeMap(value.expressionAttributeNames, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ExpressionAttributeValues"].writeMap(value.expressionAttributeValues, valueWritingClosure: DynamoDBClientTypes.AttributeValue.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["Item"].writeMap(value.item, valueWritingClosure: DynamoDBClientTypes.AttributeValue.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ReturnConsumedCapacity"].write(value.returnConsumedCapacity)
        try writer["ReturnItemCollectionMetrics"].write(value.returnItemCollectionMetrics)
        try writer["ReturnValues"].write(value.returnValues)
        try writer["ReturnValuesOnConditionCheckFailure"].write(value.returnValuesOnConditionCheckFailure)
        try writer["TableName"].write(value.tableName)
    }
}

extension PutResourcePolicyInput {

    static func write(value: PutResourcePolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ExpectedRevisionId"].write(value.expectedRevisionId)
        try writer["Policy"].write(value.policy)
        try writer["ResourceArn"].write(value.resourceArn)
    }
}

extension QueryInput {

    static func write(value: QueryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AttributesToGet"].writeList(value.attributesToGet, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ConditionalOperator"].write(value.conditionalOperator)
        try writer["ConsistentRead"].write(value.consistentRead)
        try writer["ExclusiveStartKey"].writeMap(value.exclusiveStartKey, valueWritingClosure: DynamoDBClientTypes.AttributeValue.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ExpressionAttributeNames"].writeMap(value.expressionAttributeNames, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ExpressionAttributeValues"].writeMap(value.expressionAttributeValues, valueWritingClosure: DynamoDBClientTypes.AttributeValue.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["FilterExpression"].write(value.filterExpression)
        try writer["IndexName"].write(value.indexName)
        try writer["KeyConditionExpression"].write(value.keyConditionExpression)
        try writer["KeyConditions"].writeMap(value.keyConditions, valueWritingClosure: DynamoDBClientTypes.Condition.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["Limit"].write(value.limit)
        try writer["ProjectionExpression"].write(value.projectionExpression)
        try writer["QueryFilter"].writeMap(value.queryFilter, valueWritingClosure: DynamoDBClientTypes.Condition.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ReturnConsumedCapacity"].write(value.returnConsumedCapacity)
        try writer["ScanIndexForward"].write(value.scanIndexForward)
        try writer["Select"].write(value.select)
        try writer["TableName"].write(value.tableName)
    }
}

extension RestoreTableFromBackupInput {

    static func write(value: RestoreTableFromBackupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BackupArn"].write(value.backupArn)
        try writer["BillingModeOverride"].write(value.billingModeOverride)
        try writer["GlobalSecondaryIndexOverride"].writeList(value.globalSecondaryIndexOverride, memberWritingClosure: DynamoDBClientTypes.GlobalSecondaryIndex.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["LocalSecondaryIndexOverride"].writeList(value.localSecondaryIndexOverride, memberWritingClosure: DynamoDBClientTypes.LocalSecondaryIndex.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["OnDemandThroughputOverride"].write(value.onDemandThroughputOverride, with: DynamoDBClientTypes.OnDemandThroughput.write(value:to:))
        try writer["ProvisionedThroughputOverride"].write(value.provisionedThroughputOverride, with: DynamoDBClientTypes.ProvisionedThroughput.write(value:to:))
        try writer["SSESpecificationOverride"].write(value.sseSpecificationOverride, with: DynamoDBClientTypes.SSESpecification.write(value:to:))
        try writer["TargetTableName"].write(value.targetTableName)
    }
}

extension RestoreTableToPointInTimeInput {

    static func write(value: RestoreTableToPointInTimeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BillingModeOverride"].write(value.billingModeOverride)
        try writer["GlobalSecondaryIndexOverride"].writeList(value.globalSecondaryIndexOverride, memberWritingClosure: DynamoDBClientTypes.GlobalSecondaryIndex.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["LocalSecondaryIndexOverride"].writeList(value.localSecondaryIndexOverride, memberWritingClosure: DynamoDBClientTypes.LocalSecondaryIndex.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["OnDemandThroughputOverride"].write(value.onDemandThroughputOverride, with: DynamoDBClientTypes.OnDemandThroughput.write(value:to:))
        try writer["ProvisionedThroughputOverride"].write(value.provisionedThroughputOverride, with: DynamoDBClientTypes.ProvisionedThroughput.write(value:to:))
        try writer["RestoreDateTime"].writeTimestamp(value.restoreDateTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["SSESpecificationOverride"].write(value.sseSpecificationOverride, with: DynamoDBClientTypes.SSESpecification.write(value:to:))
        try writer["SourceTableArn"].write(value.sourceTableArn)
        try writer["SourceTableName"].write(value.sourceTableName)
        try writer["TargetTableName"].write(value.targetTableName)
        try writer["UseLatestRestorableTime"].write(value.useLatestRestorableTime)
    }
}

extension ScanInput {

    static func write(value: ScanInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AttributesToGet"].writeList(value.attributesToGet, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ConditionalOperator"].write(value.conditionalOperator)
        try writer["ConsistentRead"].write(value.consistentRead)
        try writer["ExclusiveStartKey"].writeMap(value.exclusiveStartKey, valueWritingClosure: DynamoDBClientTypes.AttributeValue.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ExpressionAttributeNames"].writeMap(value.expressionAttributeNames, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ExpressionAttributeValues"].writeMap(value.expressionAttributeValues, valueWritingClosure: DynamoDBClientTypes.AttributeValue.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["FilterExpression"].write(value.filterExpression)
        try writer["IndexName"].write(value.indexName)
        try writer["Limit"].write(value.limit)
        try writer["ProjectionExpression"].write(value.projectionExpression)
        try writer["ReturnConsumedCapacity"].write(value.returnConsumedCapacity)
        try writer["ScanFilter"].writeMap(value.scanFilter, valueWritingClosure: DynamoDBClientTypes.Condition.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["Segment"].write(value.segment)
        try writer["Select"].write(value.select)
        try writer["TableName"].write(value.tableName)
        try writer["TotalSegments"].write(value.totalSegments)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: DynamoDBClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension TransactGetItemsInput {

    static func write(value: TransactGetItemsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ReturnConsumedCapacity"].write(value.returnConsumedCapacity)
        try writer["TransactItems"].writeList(value.transactItems, memberWritingClosure: DynamoDBClientTypes.TransactGetItem.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension TransactWriteItemsInput {

    static func write(value: TransactWriteItemsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["ReturnConsumedCapacity"].write(value.returnConsumedCapacity)
        try writer["ReturnItemCollectionMetrics"].write(value.returnItemCollectionMetrics)
        try writer["TransactItems"].writeList(value.transactItems, memberWritingClosure: DynamoDBClientTypes.TransactWriteItem.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UntagResourceInput {

    static func write(value: UntagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateContinuousBackupsInput {

    static func write(value: UpdateContinuousBackupsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PointInTimeRecoverySpecification"].write(value.pointInTimeRecoverySpecification, with: DynamoDBClientTypes.PointInTimeRecoverySpecification.write(value:to:))
        try writer["TableName"].write(value.tableName)
    }
}

extension UpdateContributorInsightsInput {

    static func write(value: UpdateContributorInsightsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ContributorInsightsAction"].write(value.contributorInsightsAction)
        try writer["IndexName"].write(value.indexName)
        try writer["TableName"].write(value.tableName)
    }
}

extension UpdateGlobalTableInput {

    static func write(value: UpdateGlobalTableInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GlobalTableName"].write(value.globalTableName)
        try writer["ReplicaUpdates"].writeList(value.replicaUpdates, memberWritingClosure: DynamoDBClientTypes.ReplicaUpdate.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateGlobalTableSettingsInput {

    static func write(value: UpdateGlobalTableSettingsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GlobalTableBillingMode"].write(value.globalTableBillingMode)
        try writer["GlobalTableGlobalSecondaryIndexSettingsUpdate"].writeList(value.globalTableGlobalSecondaryIndexSettingsUpdate, memberWritingClosure: DynamoDBClientTypes.GlobalTableGlobalSecondaryIndexSettingsUpdate.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["GlobalTableName"].write(value.globalTableName)
        try writer["GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate"].write(value.globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate, with: DynamoDBClientTypes.AutoScalingSettingsUpdate.write(value:to:))
        try writer["GlobalTableProvisionedWriteCapacityUnits"].write(value.globalTableProvisionedWriteCapacityUnits)
        try writer["ReplicaSettingsUpdate"].writeList(value.replicaSettingsUpdate, memberWritingClosure: DynamoDBClientTypes.ReplicaSettingsUpdate.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateItemInput {

    static func write(value: UpdateItemInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AttributeUpdates"].writeMap(value.attributeUpdates, valueWritingClosure: DynamoDBClientTypes.AttributeValueUpdate.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ConditionExpression"].write(value.conditionExpression)
        try writer["ConditionalOperator"].write(value.conditionalOperator)
        try writer["Expected"].writeMap(value.expected, valueWritingClosure: DynamoDBClientTypes.ExpectedAttributeValue.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ExpressionAttributeNames"].writeMap(value.expressionAttributeNames, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ExpressionAttributeValues"].writeMap(value.expressionAttributeValues, valueWritingClosure: DynamoDBClientTypes.AttributeValue.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["Key"].writeMap(value.key, valueWritingClosure: DynamoDBClientTypes.AttributeValue.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ReturnConsumedCapacity"].write(value.returnConsumedCapacity)
        try writer["ReturnItemCollectionMetrics"].write(value.returnItemCollectionMetrics)
        try writer["ReturnValues"].write(value.returnValues)
        try writer["ReturnValuesOnConditionCheckFailure"].write(value.returnValuesOnConditionCheckFailure)
        try writer["TableName"].write(value.tableName)
        try writer["UpdateExpression"].write(value.updateExpression)
    }
}

extension UpdateKinesisStreamingDestinationInput {

    static func write(value: UpdateKinesisStreamingDestinationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["StreamArn"].write(value.streamArn)
        try writer["TableName"].write(value.tableName)
        try writer["UpdateKinesisStreamingConfiguration"].write(value.updateKinesisStreamingConfiguration, with: DynamoDBClientTypes.UpdateKinesisStreamingConfiguration.write(value:to:))
    }
}

extension UpdateTableInput {

    static func write(value: UpdateTableInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AttributeDefinitions"].writeList(value.attributeDefinitions, memberWritingClosure: DynamoDBClientTypes.AttributeDefinition.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["BillingMode"].write(value.billingMode)
        try writer["DeletionProtectionEnabled"].write(value.deletionProtectionEnabled)
        try writer["GlobalSecondaryIndexUpdates"].writeList(value.globalSecondaryIndexUpdates, memberWritingClosure: DynamoDBClientTypes.GlobalSecondaryIndexUpdate.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["OnDemandThroughput"].write(value.onDemandThroughput, with: DynamoDBClientTypes.OnDemandThroughput.write(value:to:))
        try writer["ProvisionedThroughput"].write(value.provisionedThroughput, with: DynamoDBClientTypes.ProvisionedThroughput.write(value:to:))
        try writer["ReplicaUpdates"].writeList(value.replicaUpdates, memberWritingClosure: DynamoDBClientTypes.ReplicationGroupUpdate.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SSESpecification"].write(value.sseSpecification, with: DynamoDBClientTypes.SSESpecification.write(value:to:))
        try writer["StreamSpecification"].write(value.streamSpecification, with: DynamoDBClientTypes.StreamSpecification.write(value:to:))
        try writer["TableClass"].write(value.tableClass)
        try writer["TableName"].write(value.tableName)
    }
}

extension UpdateTableReplicaAutoScalingInput {

    static func write(value: UpdateTableReplicaAutoScalingInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GlobalSecondaryIndexUpdates"].writeList(value.globalSecondaryIndexUpdates, memberWritingClosure: DynamoDBClientTypes.GlobalSecondaryIndexAutoScalingUpdate.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ProvisionedWriteCapacityAutoScalingUpdate"].write(value.provisionedWriteCapacityAutoScalingUpdate, with: DynamoDBClientTypes.AutoScalingSettingsUpdate.write(value:to:))
        try writer["ReplicaUpdates"].writeList(value.replicaUpdates, memberWritingClosure: DynamoDBClientTypes.ReplicaAutoScalingUpdate.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TableName"].write(value.tableName)
    }
}

extension UpdateTimeToLiveInput {

    static func write(value: UpdateTimeToLiveInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TableName"].write(value.tableName)
        try writer["TimeToLiveSpecification"].write(value.timeToLiveSpecification, with: DynamoDBClientTypes.TimeToLiveSpecification.write(value:to:))
    }
}

extension BatchExecuteStatementOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchExecuteStatementOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchExecuteStatementOutput()
        value.consumedCapacity = try reader["ConsumedCapacity"].readListIfPresent(memberReadingClosure: DynamoDBClientTypes.ConsumedCapacity.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.responses = try reader["Responses"].readListIfPresent(memberReadingClosure: DynamoDBClientTypes.BatchStatementResponse.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension BatchGetItemOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchGetItemOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchGetItemOutput()
        value.consumedCapacity = try reader["ConsumedCapacity"].readListIfPresent(memberReadingClosure: DynamoDBClientTypes.ConsumedCapacity.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.responses = try reader["Responses"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.listReadingClosure(memberReadingClosure: SmithyReadWrite.mapReadingClosure(valueReadingClosure: DynamoDBClientTypes.AttributeValue.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false), memberNodeInfo: "member", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.unprocessedKeys = try reader["UnprocessedKeys"].readMapIfPresent(valueReadingClosure: DynamoDBClientTypes.KeysAndAttributes.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension BatchWriteItemOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchWriteItemOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchWriteItemOutput()
        value.consumedCapacity = try reader["ConsumedCapacity"].readListIfPresent(memberReadingClosure: DynamoDBClientTypes.ConsumedCapacity.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.itemCollectionMetrics = try reader["ItemCollectionMetrics"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.listReadingClosure(memberReadingClosure: DynamoDBClientTypes.ItemCollectionMetrics.read(from:), memberNodeInfo: "member", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.unprocessedItems = try reader["UnprocessedItems"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.listReadingClosure(memberReadingClosure: DynamoDBClientTypes.WriteRequest.read(from:), memberNodeInfo: "member", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension CreateBackupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateBackupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateBackupOutput()
        value.backupDetails = try reader["BackupDetails"].readIfPresent(with: DynamoDBClientTypes.BackupDetails.read(from:))
        return value
    }
}

extension CreateGlobalTableOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateGlobalTableOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateGlobalTableOutput()
        value.globalTableDescription = try reader["GlobalTableDescription"].readIfPresent(with: DynamoDBClientTypes.GlobalTableDescription.read(from:))
        return value
    }
}

extension CreateTableOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateTableOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateTableOutput()
        value.tableDescription = try reader["TableDescription"].readIfPresent(with: DynamoDBClientTypes.TableDescription.read(from:))
        return value
    }
}

extension DeleteBackupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteBackupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteBackupOutput()
        value.backupDescription = try reader["BackupDescription"].readIfPresent(with: DynamoDBClientTypes.BackupDescription.read(from:))
        return value
    }
}

extension DeleteItemOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteItemOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteItemOutput()
        value.attributes = try reader["Attributes"].readMapIfPresent(valueReadingClosure: DynamoDBClientTypes.AttributeValue.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.consumedCapacity = try reader["ConsumedCapacity"].readIfPresent(with: DynamoDBClientTypes.ConsumedCapacity.read(from:))
        value.itemCollectionMetrics = try reader["ItemCollectionMetrics"].readIfPresent(with: DynamoDBClientTypes.ItemCollectionMetrics.read(from:))
        return value
    }
}

extension DeleteResourcePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteResourcePolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteResourcePolicyOutput()
        value.revisionId = try reader["RevisionId"].readIfPresent()
        return value
    }
}

extension DeleteTableOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteTableOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteTableOutput()
        value.tableDescription = try reader["TableDescription"].readIfPresent(with: DynamoDBClientTypes.TableDescription.read(from:))
        return value
    }
}

extension DescribeBackupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeBackupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeBackupOutput()
        value.backupDescription = try reader["BackupDescription"].readIfPresent(with: DynamoDBClientTypes.BackupDescription.read(from:))
        return value
    }
}

extension DescribeContinuousBackupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeContinuousBackupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeContinuousBackupsOutput()
        value.continuousBackupsDescription = try reader["ContinuousBackupsDescription"].readIfPresent(with: DynamoDBClientTypes.ContinuousBackupsDescription.read(from:))
        return value
    }
}

extension DescribeContributorInsightsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeContributorInsightsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeContributorInsightsOutput()
        value.contributorInsightsRuleList = try reader["ContributorInsightsRuleList"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.contributorInsightsStatus = try reader["ContributorInsightsStatus"].readIfPresent()
        value.failureException = try reader["FailureException"].readIfPresent(with: DynamoDBClientTypes.FailureException.read(from:))
        value.indexName = try reader["IndexName"].readIfPresent()
        value.lastUpdateDateTime = try reader["LastUpdateDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.tableName = try reader["TableName"].readIfPresent()
        return value
    }
}

extension DescribeEndpointsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeEndpointsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeEndpointsOutput()
        value.endpoints = try reader["Endpoints"].readListIfPresent(memberReadingClosure: DynamoDBClientTypes.Endpoint.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension DescribeExportOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeExportOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeExportOutput()
        value.exportDescription = try reader["ExportDescription"].readIfPresent(with: DynamoDBClientTypes.ExportDescription.read(from:))
        return value
    }
}

extension DescribeGlobalTableOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeGlobalTableOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeGlobalTableOutput()
        value.globalTableDescription = try reader["GlobalTableDescription"].readIfPresent(with: DynamoDBClientTypes.GlobalTableDescription.read(from:))
        return value
    }
}

extension DescribeGlobalTableSettingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeGlobalTableSettingsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeGlobalTableSettingsOutput()
        value.globalTableName = try reader["GlobalTableName"].readIfPresent()
        value.replicaSettings = try reader["ReplicaSettings"].readListIfPresent(memberReadingClosure: DynamoDBClientTypes.ReplicaSettingsDescription.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeImportOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeImportOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeImportOutput()
        value.importTableDescription = try reader["ImportTableDescription"].readIfPresent(with: DynamoDBClientTypes.ImportTableDescription.read(from:))
        return value
    }
}

extension DescribeKinesisStreamingDestinationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeKinesisStreamingDestinationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeKinesisStreamingDestinationOutput()
        value.kinesisDataStreamDestinations = try reader["KinesisDataStreamDestinations"].readListIfPresent(memberReadingClosure: DynamoDBClientTypes.KinesisDataStreamDestination.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.tableName = try reader["TableName"].readIfPresent()
        return value
    }
}

extension DescribeLimitsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeLimitsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeLimitsOutput()
        value.accountMaxReadCapacityUnits = try reader["AccountMaxReadCapacityUnits"].readIfPresent()
        value.accountMaxWriteCapacityUnits = try reader["AccountMaxWriteCapacityUnits"].readIfPresent()
        value.tableMaxReadCapacityUnits = try reader["TableMaxReadCapacityUnits"].readIfPresent()
        value.tableMaxWriteCapacityUnits = try reader["TableMaxWriteCapacityUnits"].readIfPresent()
        return value
    }
}

extension DescribeTableOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeTableOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeTableOutput()
        value.table = try reader["Table"].readIfPresent(with: DynamoDBClientTypes.TableDescription.read(from:))
        return value
    }
}

extension DescribeTableReplicaAutoScalingOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeTableReplicaAutoScalingOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeTableReplicaAutoScalingOutput()
        value.tableAutoScalingDescription = try reader["TableAutoScalingDescription"].readIfPresent(with: DynamoDBClientTypes.TableAutoScalingDescription.read(from:))
        return value
    }
}

extension DescribeTimeToLiveOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeTimeToLiveOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeTimeToLiveOutput()
        value.timeToLiveDescription = try reader["TimeToLiveDescription"].readIfPresent(with: DynamoDBClientTypes.TimeToLiveDescription.read(from:))
        return value
    }
}

extension DisableKinesisStreamingDestinationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisableKinesisStreamingDestinationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DisableKinesisStreamingDestinationOutput()
        value.destinationStatus = try reader["DestinationStatus"].readIfPresent()
        value.enableKinesisStreamingConfiguration = try reader["EnableKinesisStreamingConfiguration"].readIfPresent(with: DynamoDBClientTypes.EnableKinesisStreamingConfiguration.read(from:))
        value.streamArn = try reader["StreamArn"].readIfPresent()
        value.tableName = try reader["TableName"].readIfPresent()
        return value
    }
}

extension EnableKinesisStreamingDestinationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> EnableKinesisStreamingDestinationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = EnableKinesisStreamingDestinationOutput()
        value.destinationStatus = try reader["DestinationStatus"].readIfPresent()
        value.enableKinesisStreamingConfiguration = try reader["EnableKinesisStreamingConfiguration"].readIfPresent(with: DynamoDBClientTypes.EnableKinesisStreamingConfiguration.read(from:))
        value.streamArn = try reader["StreamArn"].readIfPresent()
        value.tableName = try reader["TableName"].readIfPresent()
        return value
    }
}

extension ExecuteStatementOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ExecuteStatementOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ExecuteStatementOutput()
        value.consumedCapacity = try reader["ConsumedCapacity"].readIfPresent(with: DynamoDBClientTypes.ConsumedCapacity.read(from:))
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: SmithyReadWrite.mapReadingClosure(valueReadingClosure: DynamoDBClientTypes.AttributeValue.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false), memberNodeInfo: "member", isFlattened: false)
        value.lastEvaluatedKey = try reader["LastEvaluatedKey"].readMapIfPresent(valueReadingClosure: DynamoDBClientTypes.AttributeValue.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ExecuteTransactionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ExecuteTransactionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ExecuteTransactionOutput()
        value.consumedCapacity = try reader["ConsumedCapacity"].readListIfPresent(memberReadingClosure: DynamoDBClientTypes.ConsumedCapacity.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.responses = try reader["Responses"].readListIfPresent(memberReadingClosure: DynamoDBClientTypes.ItemResponse.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ExportTableToPointInTimeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ExportTableToPointInTimeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ExportTableToPointInTimeOutput()
        value.exportDescription = try reader["ExportDescription"].readIfPresent(with: DynamoDBClientTypes.ExportDescription.read(from:))
        return value
    }
}

extension GetItemOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetItemOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetItemOutput()
        value.consumedCapacity = try reader["ConsumedCapacity"].readIfPresent(with: DynamoDBClientTypes.ConsumedCapacity.read(from:))
        value.item = try reader["Item"].readMapIfPresent(valueReadingClosure: DynamoDBClientTypes.AttributeValue.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension GetResourcePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetResourcePolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetResourcePolicyOutput()
        value.policy = try reader["Policy"].readIfPresent()
        value.revisionId = try reader["RevisionId"].readIfPresent()
        return value
    }
}

extension ImportTableOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ImportTableOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ImportTableOutput()
        value.importTableDescription = try reader["ImportTableDescription"].readIfPresent(with: DynamoDBClientTypes.ImportTableDescription.read(from:))
        return value
    }
}

extension ListBackupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListBackupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListBackupsOutput()
        value.backupSummaries = try reader["BackupSummaries"].readListIfPresent(memberReadingClosure: DynamoDBClientTypes.BackupSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.lastEvaluatedBackupArn = try reader["LastEvaluatedBackupArn"].readIfPresent()
        return value
    }
}

extension ListContributorInsightsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListContributorInsightsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListContributorInsightsOutput()
        value.contributorInsightsSummaries = try reader["ContributorInsightsSummaries"].readListIfPresent(memberReadingClosure: DynamoDBClientTypes.ContributorInsightsSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListExportsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListExportsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListExportsOutput()
        value.exportSummaries = try reader["ExportSummaries"].readListIfPresent(memberReadingClosure: DynamoDBClientTypes.ExportSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListGlobalTablesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListGlobalTablesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListGlobalTablesOutput()
        value.globalTables = try reader["GlobalTables"].readListIfPresent(memberReadingClosure: DynamoDBClientTypes.GlobalTable.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.lastEvaluatedGlobalTableName = try reader["LastEvaluatedGlobalTableName"].readIfPresent()
        return value
    }
}

extension ListImportsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListImportsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListImportsOutput()
        value.importSummaryList = try reader["ImportSummaryList"].readListIfPresent(memberReadingClosure: DynamoDBClientTypes.ImportSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListTablesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTablesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTablesOutput()
        value.lastEvaluatedTableName = try reader["LastEvaluatedTableName"].readIfPresent()
        value.tableNames = try reader["TableNames"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTagsOfResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsOfResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsOfResourceOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: DynamoDBClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PutItemOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutItemOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutItemOutput()
        value.attributes = try reader["Attributes"].readMapIfPresent(valueReadingClosure: DynamoDBClientTypes.AttributeValue.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.consumedCapacity = try reader["ConsumedCapacity"].readIfPresent(with: DynamoDBClientTypes.ConsumedCapacity.read(from:))
        value.itemCollectionMetrics = try reader["ItemCollectionMetrics"].readIfPresent(with: DynamoDBClientTypes.ItemCollectionMetrics.read(from:))
        return value
    }
}

extension PutResourcePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutResourcePolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutResourcePolicyOutput()
        value.revisionId = try reader["RevisionId"].readIfPresent()
        return value
    }
}

extension QueryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> QueryOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = QueryOutput()
        value.consumedCapacity = try reader["ConsumedCapacity"].readIfPresent(with: DynamoDBClientTypes.ConsumedCapacity.read(from:))
        value.count = try reader["Count"].readIfPresent() ?? 0
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: SmithyReadWrite.mapReadingClosure(valueReadingClosure: DynamoDBClientTypes.AttributeValue.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false), memberNodeInfo: "member", isFlattened: false)
        value.lastEvaluatedKey = try reader["LastEvaluatedKey"].readMapIfPresent(valueReadingClosure: DynamoDBClientTypes.AttributeValue.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.scannedCount = try reader["ScannedCount"].readIfPresent() ?? 0
        return value
    }
}

extension RestoreTableFromBackupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RestoreTableFromBackupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RestoreTableFromBackupOutput()
        value.tableDescription = try reader["TableDescription"].readIfPresent(with: DynamoDBClientTypes.TableDescription.read(from:))
        return value
    }
}

extension RestoreTableToPointInTimeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RestoreTableToPointInTimeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RestoreTableToPointInTimeOutput()
        value.tableDescription = try reader["TableDescription"].readIfPresent(with: DynamoDBClientTypes.TableDescription.read(from:))
        return value
    }
}

extension ScanOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ScanOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ScanOutput()
        value.consumedCapacity = try reader["ConsumedCapacity"].readIfPresent(with: DynamoDBClientTypes.ConsumedCapacity.read(from:))
        value.count = try reader["Count"].readIfPresent() ?? 0
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: SmithyReadWrite.mapReadingClosure(valueReadingClosure: DynamoDBClientTypes.AttributeValue.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false), memberNodeInfo: "member", isFlattened: false)
        value.lastEvaluatedKey = try reader["LastEvaluatedKey"].readMapIfPresent(valueReadingClosure: DynamoDBClientTypes.AttributeValue.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.scannedCount = try reader["ScannedCount"].readIfPresent() ?? 0
        return value
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension TransactGetItemsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TransactGetItemsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = TransactGetItemsOutput()
        value.consumedCapacity = try reader["ConsumedCapacity"].readListIfPresent(memberReadingClosure: DynamoDBClientTypes.ConsumedCapacity.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.responses = try reader["Responses"].readListIfPresent(memberReadingClosure: DynamoDBClientTypes.ItemResponse.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension TransactWriteItemsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TransactWriteItemsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = TransactWriteItemsOutput()
        value.consumedCapacity = try reader["ConsumedCapacity"].readListIfPresent(memberReadingClosure: DynamoDBClientTypes.ConsumedCapacity.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.itemCollectionMetrics = try reader["ItemCollectionMetrics"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.listReadingClosure(memberReadingClosure: DynamoDBClientTypes.ItemCollectionMetrics.read(from:), memberNodeInfo: "member", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateContinuousBackupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateContinuousBackupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateContinuousBackupsOutput()
        value.continuousBackupsDescription = try reader["ContinuousBackupsDescription"].readIfPresent(with: DynamoDBClientTypes.ContinuousBackupsDescription.read(from:))
        return value
    }
}

extension UpdateContributorInsightsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateContributorInsightsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateContributorInsightsOutput()
        value.contributorInsightsStatus = try reader["ContributorInsightsStatus"].readIfPresent()
        value.indexName = try reader["IndexName"].readIfPresent()
        value.tableName = try reader["TableName"].readIfPresent()
        return value
    }
}

extension UpdateGlobalTableOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateGlobalTableOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateGlobalTableOutput()
        value.globalTableDescription = try reader["GlobalTableDescription"].readIfPresent(with: DynamoDBClientTypes.GlobalTableDescription.read(from:))
        return value
    }
}

extension UpdateGlobalTableSettingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateGlobalTableSettingsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateGlobalTableSettingsOutput()
        value.globalTableName = try reader["GlobalTableName"].readIfPresent()
        value.replicaSettings = try reader["ReplicaSettings"].readListIfPresent(memberReadingClosure: DynamoDBClientTypes.ReplicaSettingsDescription.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension UpdateItemOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateItemOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateItemOutput()
        value.attributes = try reader["Attributes"].readMapIfPresent(valueReadingClosure: DynamoDBClientTypes.AttributeValue.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.consumedCapacity = try reader["ConsumedCapacity"].readIfPresent(with: DynamoDBClientTypes.ConsumedCapacity.read(from:))
        value.itemCollectionMetrics = try reader["ItemCollectionMetrics"].readIfPresent(with: DynamoDBClientTypes.ItemCollectionMetrics.read(from:))
        return value
    }
}

extension UpdateKinesisStreamingDestinationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateKinesisStreamingDestinationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateKinesisStreamingDestinationOutput()
        value.destinationStatus = try reader["DestinationStatus"].readIfPresent()
        value.streamArn = try reader["StreamArn"].readIfPresent()
        value.tableName = try reader["TableName"].readIfPresent()
        value.updateKinesisStreamingConfiguration = try reader["UpdateKinesisStreamingConfiguration"].readIfPresent(with: DynamoDBClientTypes.UpdateKinesisStreamingConfiguration.read(from:))
        return value
    }
}

extension UpdateTableOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateTableOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateTableOutput()
        value.tableDescription = try reader["TableDescription"].readIfPresent(with: DynamoDBClientTypes.TableDescription.read(from:))
        return value
    }
}

extension UpdateTableReplicaAutoScalingOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateTableReplicaAutoScalingOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateTableReplicaAutoScalingOutput()
        value.tableAutoScalingDescription = try reader["TableAutoScalingDescription"].readIfPresent(with: DynamoDBClientTypes.TableAutoScalingDescription.read(from:))
        return value
    }
}

extension UpdateTimeToLiveOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateTimeToLiveOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateTimeToLiveOutput()
        value.timeToLiveSpecification = try reader["TimeToLiveSpecification"].readIfPresent(with: DynamoDBClientTypes.TimeToLiveSpecification.read(from:))
        return value
    }
}

enum BatchExecuteStatementOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "RequestLimitExceeded": return try RequestLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchGetItemOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "RequestLimitExceeded": return try RequestLimitExceeded.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchWriteItemOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "ItemCollectionSizeLimitExceededException": return try ItemCollectionSizeLimitExceededException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "RequestLimitExceeded": return try RequestLimitExceeded.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateBackupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BackupInUseException": return try BackupInUseException.makeError(baseError: baseError)
            case "ContinuousBackupsUnavailableException": return try ContinuousBackupsUnavailableException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "TableInUseException": return try TableInUseException.makeError(baseError: baseError)
            case "TableNotFoundException": return try TableNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateGlobalTableOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "GlobalTableAlreadyExistsException": return try GlobalTableAlreadyExistsException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "TableNotFoundException": return try TableNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateTableOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteBackupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BackupInUseException": return try BackupInUseException.makeError(baseError: baseError)
            case "BackupNotFoundException": return try BackupNotFoundException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteItemOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConditionalCheckFailedException": return try ConditionalCheckFailedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "ItemCollectionSizeLimitExceededException": return try ItemCollectionSizeLimitExceededException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "RequestLimitExceeded": return try RequestLimitExceeded.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TransactionConflictException": return try TransactionConflictException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteResourcePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "PolicyNotFoundException": return try PolicyNotFoundException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteTableOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeBackupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BackupNotFoundException": return try BackupNotFoundException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeContinuousBackupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "TableNotFoundException": return try TableNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeContributorInsightsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeEndpointsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeExportOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ExportNotFoundException": return try ExportNotFoundException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeGlobalTableOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "GlobalTableNotFoundException": return try GlobalTableNotFoundException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeGlobalTableSettingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "GlobalTableNotFoundException": return try GlobalTableNotFoundException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeImportOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ImportNotFoundException": return try ImportNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeKinesisStreamingDestinationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeLimitsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeTableOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeTableReplicaAutoScalingOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeTimeToLiveOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisableKinesisStreamingDestinationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum EnableKinesisStreamingDestinationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ExecuteStatementOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConditionalCheckFailedException": return try ConditionalCheckFailedException.makeError(baseError: baseError)
            case "DuplicateItemException": return try DuplicateItemException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "ItemCollectionSizeLimitExceededException": return try ItemCollectionSizeLimitExceededException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "RequestLimitExceeded": return try RequestLimitExceeded.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TransactionConflictException": return try TransactionConflictException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ExecuteTransactionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "IdempotentParameterMismatchException": return try IdempotentParameterMismatchException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "RequestLimitExceeded": return try RequestLimitExceeded.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TransactionCanceledException": return try TransactionCanceledException.makeError(baseError: baseError)
            case "TransactionInProgressException": return try TransactionInProgressException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ExportTableToPointInTimeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ExportConflictException": return try ExportConflictException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidExportTimeException": return try InvalidExportTimeException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "PointInTimeRecoveryUnavailableException": return try PointInTimeRecoveryUnavailableException.makeError(baseError: baseError)
            case "TableNotFoundException": return try TableNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetItemOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "RequestLimitExceeded": return try RequestLimitExceeded.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetResourcePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "PolicyNotFoundException": return try PolicyNotFoundException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ImportTableOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ImportConflictException": return try ImportConflictException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListBackupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListContributorInsightsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListExportsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListGlobalTablesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListImportsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTablesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsOfResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutItemOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConditionalCheckFailedException": return try ConditionalCheckFailedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "ItemCollectionSizeLimitExceededException": return try ItemCollectionSizeLimitExceededException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "RequestLimitExceeded": return try RequestLimitExceeded.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TransactionConflictException": return try TransactionConflictException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutResourcePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "PolicyNotFoundException": return try PolicyNotFoundException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum QueryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "RequestLimitExceeded": return try RequestLimitExceeded.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RestoreTableFromBackupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BackupInUseException": return try BackupInUseException.makeError(baseError: baseError)
            case "BackupNotFoundException": return try BackupNotFoundException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "TableAlreadyExistsException": return try TableAlreadyExistsException.makeError(baseError: baseError)
            case "TableInUseException": return try TableInUseException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RestoreTableToPointInTimeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "InvalidRestoreTimeException": return try InvalidRestoreTimeException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "PointInTimeRecoveryUnavailableException": return try PointInTimeRecoveryUnavailableException.makeError(baseError: baseError)
            case "TableAlreadyExistsException": return try TableAlreadyExistsException.makeError(baseError: baseError)
            case "TableInUseException": return try TableInUseException.makeError(baseError: baseError)
            case "TableNotFoundException": return try TableNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ScanOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "RequestLimitExceeded": return try RequestLimitExceeded.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TransactGetItemsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "RequestLimitExceeded": return try RequestLimitExceeded.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TransactionCanceledException": return try TransactionCanceledException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TransactWriteItemsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "IdempotentParameterMismatchException": return try IdempotentParameterMismatchException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "RequestLimitExceeded": return try RequestLimitExceeded.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TransactionCanceledException": return try TransactionCanceledException.makeError(baseError: baseError)
            case "TransactionInProgressException": return try TransactionInProgressException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateContinuousBackupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ContinuousBackupsUnavailableException": return try ContinuousBackupsUnavailableException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "TableNotFoundException": return try TableNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateContributorInsightsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateGlobalTableOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "GlobalTableNotFoundException": return try GlobalTableNotFoundException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "ReplicaAlreadyExistsException": return try ReplicaAlreadyExistsException.makeError(baseError: baseError)
            case "ReplicaNotFoundException": return try ReplicaNotFoundException.makeError(baseError: baseError)
            case "TableNotFoundException": return try TableNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateGlobalTableSettingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "GlobalTableNotFoundException": return try GlobalTableNotFoundException.makeError(baseError: baseError)
            case "IndexNotFoundException": return try IndexNotFoundException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ReplicaNotFoundException": return try ReplicaNotFoundException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateItemOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConditionalCheckFailedException": return try ConditionalCheckFailedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "ItemCollectionSizeLimitExceededException": return try ItemCollectionSizeLimitExceededException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "RequestLimitExceeded": return try RequestLimitExceeded.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TransactionConflictException": return try TransactionConflictException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateKinesisStreamingDestinationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateTableOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateTableReplicaAutoScalingOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateTimeToLiveOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension InternalServerError {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InternalServerError {
        let reader = baseError.errorBodyReader
        var value = InternalServerError()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension RequestLimitExceeded {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> RequestLimitExceeded {
        let reader = baseError.errorBodyReader
        var value = RequestLimitExceeded()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidEndpointException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidEndpointException {
        let reader = baseError.errorBodyReader
        var value = InvalidEndpointException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ProvisionedThroughputExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ProvisionedThroughputExceededException {
        let reader = baseError.errorBodyReader
        var value = ProvisionedThroughputExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ItemCollectionSizeLimitExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ItemCollectionSizeLimitExceededException {
        let reader = baseError.errorBodyReader
        var value = ItemCollectionSizeLimitExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension LimitExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> LimitExceededException {
        let reader = baseError.errorBodyReader
        var value = LimitExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TableInUseException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> TableInUseException {
        let reader = baseError.errorBodyReader
        var value = TableInUseException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension BackupInUseException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> BackupInUseException {
        let reader = baseError.errorBodyReader
        var value = BackupInUseException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TableNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> TableNotFoundException {
        let reader = baseError.errorBodyReader
        var value = TableNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ContinuousBackupsUnavailableException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ContinuousBackupsUnavailableException {
        let reader = baseError.errorBodyReader
        var value = ContinuousBackupsUnavailableException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension GlobalTableAlreadyExistsException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> GlobalTableAlreadyExistsException {
        let reader = baseError.errorBodyReader
        var value = GlobalTableAlreadyExistsException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceInUseException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceInUseException {
        let reader = baseError.errorBodyReader
        var value = ResourceInUseException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension BackupNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> BackupNotFoundException {
        let reader = baseError.errorBodyReader
        var value = BackupNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TransactionConflictException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> TransactionConflictException {
        let reader = baseError.errorBodyReader
        var value = TransactionConflictException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConditionalCheckFailedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ConditionalCheckFailedException {
        let reader = baseError.errorBodyReader
        var value = ConditionalCheckFailedException()
        value.properties.item = try reader["Item"].readMapIfPresent(valueReadingClosure: DynamoDBClientTypes.AttributeValue.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension PolicyNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> PolicyNotFoundException {
        let reader = baseError.errorBodyReader
        var value = PolicyNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ExportNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ExportNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ExportNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension GlobalTableNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> GlobalTableNotFoundException {
        let reader = baseError.errorBodyReader
        var value = GlobalTableNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ImportNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ImportNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ImportNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DuplicateItemException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> DuplicateItemException {
        let reader = baseError.errorBodyReader
        var value = DuplicateItemException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension IdempotentParameterMismatchException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> IdempotentParameterMismatchException {
        let reader = baseError.errorBodyReader
        var value = IdempotentParameterMismatchException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TransactionCanceledException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> TransactionCanceledException {
        let reader = baseError.errorBodyReader
        var value = TransactionCanceledException()
        value.properties.cancellationReasons = try reader["CancellationReasons"].readListIfPresent(memberReadingClosure: DynamoDBClientTypes.CancellationReason.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TransactionInProgressException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> TransactionInProgressException {
        let reader = baseError.errorBodyReader
        var value = TransactionInProgressException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidExportTimeException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidExportTimeException {
        let reader = baseError.errorBodyReader
        var value = InvalidExportTimeException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension PointInTimeRecoveryUnavailableException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> PointInTimeRecoveryUnavailableException {
        let reader = baseError.errorBodyReader
        var value = PointInTimeRecoveryUnavailableException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ExportConflictException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ExportConflictException {
        let reader = baseError.errorBodyReader
        var value = ExportConflictException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ImportConflictException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ImportConflictException {
        let reader = baseError.errorBodyReader
        var value = ImportConflictException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TableAlreadyExistsException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> TableAlreadyExistsException {
        let reader = baseError.errorBodyReader
        var value = TableAlreadyExistsException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidRestoreTimeException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidRestoreTimeException {
        let reader = baseError.errorBodyReader
        var value = InvalidRestoreTimeException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ReplicaNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ReplicaNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ReplicaNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ReplicaAlreadyExistsException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ReplicaAlreadyExistsException {
        let reader = baseError.errorBodyReader
        var value = ReplicaAlreadyExistsException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension IndexNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> IndexNotFoundException {
        let reader = baseError.errorBodyReader
        var value = IndexNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DynamoDBClientTypes.BatchStatementResponse {

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.BatchStatementResponse {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.BatchStatementResponse()
        value.error = try reader["Error"].readIfPresent(with: DynamoDBClientTypes.BatchStatementError.read(from:))
        value.tableName = try reader["TableName"].readIfPresent()
        value.item = try reader["Item"].readMapIfPresent(valueReadingClosure: DynamoDBClientTypes.AttributeValue.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension DynamoDBClientTypes.AttributeValue {

    static func write(value: DynamoDBClientTypes.AttributeValue?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        switch value {
            case let .b(b):
                try writer["B"].write(b)
            case let .bool(bool):
                try writer["BOOL"].write(bool)
            case let .bs(bs):
                try writer["BS"].writeList(bs, memberWritingClosure: SmithyReadWrite.WritingClosures.writeData(value:to:), memberNodeInfo: "member", isFlattened: false)
            case let .l(l):
                try writer["L"].writeList(l, memberWritingClosure: DynamoDBClientTypes.AttributeValue.write(value:to:), memberNodeInfo: "member", isFlattened: false)
            case let .m(m):
                try writer["M"].writeMap(m, valueWritingClosure: DynamoDBClientTypes.AttributeValue.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
            case let .n(n):
                try writer["N"].write(n)
            case let .ns(ns):
                try writer["NS"].writeList(ns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
            case let .null(null):
                try writer["NULL"].write(null)
            case let .s(s):
                try writer["S"].write(s)
            case let .ss(ss):
                try writer["SS"].writeList(ss, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
            case let .sdkUnknown(sdkUnknown):
                try writer["sdkUnknown"].write(sdkUnknown)
        }
    }

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.AttributeValue {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        let name = reader.children.filter { $0.hasContent && $0.nodeInfo.name != "__type" }.first?.nodeInfo.name
        switch name {
            case "S":
                return .s(try reader["S"].read())
            case "N":
                return .n(try reader["N"].read())
            case "B":
                return .b(try reader["B"].read())
            case "SS":
                return .ss(try reader["SS"].readList(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false))
            case "NS":
                return .ns(try reader["NS"].readList(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false))
            case "BS":
                return .bs(try reader["BS"].readList(memberReadingClosure: SmithyReadWrite.ReadingClosures.readData(from:), memberNodeInfo: "member", isFlattened: false))
            case "M":
                return .m(try reader["M"].readMap(valueReadingClosure: DynamoDBClientTypes.AttributeValue.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false))
            case "L":
                return .l(try reader["L"].readList(memberReadingClosure: DynamoDBClientTypes.AttributeValue.read(from:), memberNodeInfo: "member", isFlattened: false))
            case "NULL":
                return .null(try reader["NULL"].read())
            case "BOOL":
                return .bool(try reader["BOOL"].read())
            default:
                return .sdkUnknown(name ?? "")
        }
    }
}

extension DynamoDBClientTypes.BatchStatementError {

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.BatchStatementError {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.BatchStatementError()
        value.code = try reader["Code"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        value.item = try reader["Item"].readMapIfPresent(valueReadingClosure: DynamoDBClientTypes.AttributeValue.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension DynamoDBClientTypes.ConsumedCapacity {

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.ConsumedCapacity {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.ConsumedCapacity()
        value.tableName = try reader["TableName"].readIfPresent()
        value.capacityUnits = try reader["CapacityUnits"].readIfPresent()
        value.readCapacityUnits = try reader["ReadCapacityUnits"].readIfPresent()
        value.writeCapacityUnits = try reader["WriteCapacityUnits"].readIfPresent()
        value.table = try reader["Table"].readIfPresent(with: DynamoDBClientTypes.Capacity.read(from:))
        value.localSecondaryIndexes = try reader["LocalSecondaryIndexes"].readMapIfPresent(valueReadingClosure: DynamoDBClientTypes.Capacity.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.globalSecondaryIndexes = try reader["GlobalSecondaryIndexes"].readMapIfPresent(valueReadingClosure: DynamoDBClientTypes.Capacity.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension DynamoDBClientTypes.Capacity {

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.Capacity {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.Capacity()
        value.readCapacityUnits = try reader["ReadCapacityUnits"].readIfPresent()
        value.writeCapacityUnits = try reader["WriteCapacityUnits"].readIfPresent()
        value.capacityUnits = try reader["CapacityUnits"].readIfPresent()
        return value
    }
}

extension DynamoDBClientTypes.KeysAndAttributes {

    static func write(value: DynamoDBClientTypes.KeysAndAttributes?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AttributesToGet"].writeList(value.attributesToGet, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ConsistentRead"].write(value.consistentRead)
        try writer["ExpressionAttributeNames"].writeMap(value.expressionAttributeNames, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["Keys"].writeList(value.keys, memberWritingClosure: SmithyReadWrite.mapWritingClosure(valueWritingClosure: DynamoDBClientTypes.AttributeValue.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false), memberNodeInfo: "member", isFlattened: false)
        try writer["ProjectionExpression"].write(value.projectionExpression)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.KeysAndAttributes {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.KeysAndAttributes()
        value.keys = try reader["Keys"].readListIfPresent(memberReadingClosure: SmithyReadWrite.mapReadingClosure(valueReadingClosure: DynamoDBClientTypes.AttributeValue.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false), memberNodeInfo: "member", isFlattened: false) ?? []
        value.attributesToGet = try reader["AttributesToGet"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.consistentRead = try reader["ConsistentRead"].readIfPresent()
        value.projectionExpression = try reader["ProjectionExpression"].readIfPresent()
        value.expressionAttributeNames = try reader["ExpressionAttributeNames"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension DynamoDBClientTypes.WriteRequest {

    static func write(value: DynamoDBClientTypes.WriteRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DeleteRequest"].write(value.deleteRequest, with: DynamoDBClientTypes.DeleteRequest.write(value:to:))
        try writer["PutRequest"].write(value.putRequest, with: DynamoDBClientTypes.PutRequest.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.WriteRequest {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.WriteRequest()
        value.putRequest = try reader["PutRequest"].readIfPresent(with: DynamoDBClientTypes.PutRequest.read(from:))
        value.deleteRequest = try reader["DeleteRequest"].readIfPresent(with: DynamoDBClientTypes.DeleteRequest.read(from:))
        return value
    }
}

extension DynamoDBClientTypes.DeleteRequest {

    static func write(value: DynamoDBClientTypes.DeleteRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].writeMap(value.key, valueWritingClosure: DynamoDBClientTypes.AttributeValue.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.DeleteRequest {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.DeleteRequest()
        value.key = try reader["Key"].readMapIfPresent(valueReadingClosure: DynamoDBClientTypes.AttributeValue.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false) ?? [:]
        return value
    }
}

extension DynamoDBClientTypes.PutRequest {

    static func write(value: DynamoDBClientTypes.PutRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Item"].writeMap(value.item, valueWritingClosure: DynamoDBClientTypes.AttributeValue.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.PutRequest {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.PutRequest()
        value.item = try reader["Item"].readMapIfPresent(valueReadingClosure: DynamoDBClientTypes.AttributeValue.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false) ?? [:]
        return value
    }
}

extension DynamoDBClientTypes.ItemCollectionMetrics {

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.ItemCollectionMetrics {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.ItemCollectionMetrics()
        value.itemCollectionKey = try reader["ItemCollectionKey"].readMapIfPresent(valueReadingClosure: DynamoDBClientTypes.AttributeValue.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.sizeEstimateRangeGB = try reader["SizeEstimateRangeGB"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readDouble(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DynamoDBClientTypes.BackupDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.BackupDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.BackupDetails()
        value.backupArn = try reader["BackupArn"].readIfPresent() ?? ""
        value.backupName = try reader["BackupName"].readIfPresent() ?? ""
        value.backupSizeBytes = try reader["BackupSizeBytes"].readIfPresent()
        value.backupStatus = try reader["BackupStatus"].readIfPresent() ?? .sdkUnknown("")
        value.backupType = try reader["BackupType"].readIfPresent() ?? .sdkUnknown("")
        value.backupCreationDateTime = try reader["BackupCreationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.backupExpiryDateTime = try reader["BackupExpiryDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension DynamoDBClientTypes.GlobalTableDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.GlobalTableDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.GlobalTableDescription()
        value.replicationGroup = try reader["ReplicationGroup"].readListIfPresent(memberReadingClosure: DynamoDBClientTypes.ReplicaDescription.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.globalTableArn = try reader["GlobalTableArn"].readIfPresent()
        value.creationDateTime = try reader["CreationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.globalTableStatus = try reader["GlobalTableStatus"].readIfPresent()
        value.globalTableName = try reader["GlobalTableName"].readIfPresent()
        return value
    }
}

extension DynamoDBClientTypes.ReplicaDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.ReplicaDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.ReplicaDescription()
        value.regionName = try reader["RegionName"].readIfPresent()
        value.replicaStatus = try reader["ReplicaStatus"].readIfPresent()
        value.replicaStatusDescription = try reader["ReplicaStatusDescription"].readIfPresent()
        value.replicaStatusPercentProgress = try reader["ReplicaStatusPercentProgress"].readIfPresent()
        value.kmsMasterKeyId = try reader["KMSMasterKeyId"].readIfPresent()
        value.provisionedThroughputOverride = try reader["ProvisionedThroughputOverride"].readIfPresent(with: DynamoDBClientTypes.ProvisionedThroughputOverride.read(from:))
        value.onDemandThroughputOverride = try reader["OnDemandThroughputOverride"].readIfPresent(with: DynamoDBClientTypes.OnDemandThroughputOverride.read(from:))
        value.globalSecondaryIndexes = try reader["GlobalSecondaryIndexes"].readListIfPresent(memberReadingClosure: DynamoDBClientTypes.ReplicaGlobalSecondaryIndexDescription.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.replicaInaccessibleDateTime = try reader["ReplicaInaccessibleDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.replicaTableClassSummary = try reader["ReplicaTableClassSummary"].readIfPresent(with: DynamoDBClientTypes.TableClassSummary.read(from:))
        return value
    }
}

extension DynamoDBClientTypes.TableClassSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.TableClassSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.TableClassSummary()
        value.tableClass = try reader["TableClass"].readIfPresent()
        value.lastUpdateDateTime = try reader["LastUpdateDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension DynamoDBClientTypes.ReplicaGlobalSecondaryIndexDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.ReplicaGlobalSecondaryIndexDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.ReplicaGlobalSecondaryIndexDescription()
        value.indexName = try reader["IndexName"].readIfPresent()
        value.provisionedThroughputOverride = try reader["ProvisionedThroughputOverride"].readIfPresent(with: DynamoDBClientTypes.ProvisionedThroughputOverride.read(from:))
        value.onDemandThroughputOverride = try reader["OnDemandThroughputOverride"].readIfPresent(with: DynamoDBClientTypes.OnDemandThroughputOverride.read(from:))
        return value
    }
}

extension DynamoDBClientTypes.OnDemandThroughputOverride {

    static func write(value: DynamoDBClientTypes.OnDemandThroughputOverride?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxReadRequestUnits"].write(value.maxReadRequestUnits)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.OnDemandThroughputOverride {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.OnDemandThroughputOverride()
        value.maxReadRequestUnits = try reader["MaxReadRequestUnits"].readIfPresent()
        return value
    }
}

extension DynamoDBClientTypes.ProvisionedThroughputOverride {

    static func write(value: DynamoDBClientTypes.ProvisionedThroughputOverride?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ReadCapacityUnits"].write(value.readCapacityUnits)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.ProvisionedThroughputOverride {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.ProvisionedThroughputOverride()
        value.readCapacityUnits = try reader["ReadCapacityUnits"].readIfPresent()
        return value
    }
}

extension DynamoDBClientTypes.TableDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.TableDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.TableDescription()
        value.attributeDefinitions = try reader["AttributeDefinitions"].readListIfPresent(memberReadingClosure: DynamoDBClientTypes.AttributeDefinition.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.tableName = try reader["TableName"].readIfPresent()
        value.keySchema = try reader["KeySchema"].readListIfPresent(memberReadingClosure: DynamoDBClientTypes.KeySchemaElement.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.tableStatus = try reader["TableStatus"].readIfPresent()
        value.creationDateTime = try reader["CreationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.provisionedThroughput = try reader["ProvisionedThroughput"].readIfPresent(with: DynamoDBClientTypes.ProvisionedThroughputDescription.read(from:))
        value.tableSizeBytes = try reader["TableSizeBytes"].readIfPresent()
        value.itemCount = try reader["ItemCount"].readIfPresent()
        value.tableArn = try reader["TableArn"].readIfPresent()
        value.tableId = try reader["TableId"].readIfPresent()
        value.billingModeSummary = try reader["BillingModeSummary"].readIfPresent(with: DynamoDBClientTypes.BillingModeSummary.read(from:))
        value.localSecondaryIndexes = try reader["LocalSecondaryIndexes"].readListIfPresent(memberReadingClosure: DynamoDBClientTypes.LocalSecondaryIndexDescription.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.globalSecondaryIndexes = try reader["GlobalSecondaryIndexes"].readListIfPresent(memberReadingClosure: DynamoDBClientTypes.GlobalSecondaryIndexDescription.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.streamSpecification = try reader["StreamSpecification"].readIfPresent(with: DynamoDBClientTypes.StreamSpecification.read(from:))
        value.latestStreamLabel = try reader["LatestStreamLabel"].readIfPresent()
        value.latestStreamArn = try reader["LatestStreamArn"].readIfPresent()
        value.globalTableVersion = try reader["GlobalTableVersion"].readIfPresent()
        value.replicas = try reader["Replicas"].readListIfPresent(memberReadingClosure: DynamoDBClientTypes.ReplicaDescription.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.restoreSummary = try reader["RestoreSummary"].readIfPresent(with: DynamoDBClientTypes.RestoreSummary.read(from:))
        value.sseDescription = try reader["SSEDescription"].readIfPresent(with: DynamoDBClientTypes.SSEDescription.read(from:))
        value.archivalSummary = try reader["ArchivalSummary"].readIfPresent(with: DynamoDBClientTypes.ArchivalSummary.read(from:))
        value.tableClassSummary = try reader["TableClassSummary"].readIfPresent(with: DynamoDBClientTypes.TableClassSummary.read(from:))
        value.deletionProtectionEnabled = try reader["DeletionProtectionEnabled"].readIfPresent()
        value.onDemandThroughput = try reader["OnDemandThroughput"].readIfPresent(with: DynamoDBClientTypes.OnDemandThroughput.read(from:))
        return value
    }
}

extension DynamoDBClientTypes.OnDemandThroughput {

    static func write(value: DynamoDBClientTypes.OnDemandThroughput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxReadRequestUnits"].write(value.maxReadRequestUnits)
        try writer["MaxWriteRequestUnits"].write(value.maxWriteRequestUnits)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.OnDemandThroughput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.OnDemandThroughput()
        value.maxReadRequestUnits = try reader["MaxReadRequestUnits"].readIfPresent()
        value.maxWriteRequestUnits = try reader["MaxWriteRequestUnits"].readIfPresent()
        return value
    }
}

extension DynamoDBClientTypes.ArchivalSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.ArchivalSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.ArchivalSummary()
        value.archivalDateTime = try reader["ArchivalDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.archivalReason = try reader["ArchivalReason"].readIfPresent()
        value.archivalBackupArn = try reader["ArchivalBackupArn"].readIfPresent()
        return value
    }
}

extension DynamoDBClientTypes.SSEDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.SSEDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.SSEDescription()
        value.status = try reader["Status"].readIfPresent()
        value.sseType = try reader["SSEType"].readIfPresent()
        value.kmsMasterKeyArn = try reader["KMSMasterKeyArn"].readIfPresent()
        value.inaccessibleEncryptionDateTime = try reader["InaccessibleEncryptionDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension DynamoDBClientTypes.RestoreSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.RestoreSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.RestoreSummary()
        value.sourceBackupArn = try reader["SourceBackupArn"].readIfPresent()
        value.sourceTableArn = try reader["SourceTableArn"].readIfPresent()
        value.restoreDateTime = try reader["RestoreDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.restoreInProgress = try reader["RestoreInProgress"].readIfPresent() ?? false
        return value
    }
}

extension DynamoDBClientTypes.StreamSpecification {

    static func write(value: DynamoDBClientTypes.StreamSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["StreamEnabled"].write(value.streamEnabled)
        try writer["StreamViewType"].write(value.streamViewType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.StreamSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.StreamSpecification()
        value.streamEnabled = try reader["StreamEnabled"].readIfPresent() ?? false
        value.streamViewType = try reader["StreamViewType"].readIfPresent()
        return value
    }
}

extension DynamoDBClientTypes.GlobalSecondaryIndexDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.GlobalSecondaryIndexDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.GlobalSecondaryIndexDescription()
        value.indexName = try reader["IndexName"].readIfPresent()
        value.keySchema = try reader["KeySchema"].readListIfPresent(memberReadingClosure: DynamoDBClientTypes.KeySchemaElement.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.projection = try reader["Projection"].readIfPresent(with: DynamoDBClientTypes.Projection.read(from:))
        value.indexStatus = try reader["IndexStatus"].readIfPresent()
        value.backfilling = try reader["Backfilling"].readIfPresent()
        value.provisionedThroughput = try reader["ProvisionedThroughput"].readIfPresent(with: DynamoDBClientTypes.ProvisionedThroughputDescription.read(from:))
        value.indexSizeBytes = try reader["IndexSizeBytes"].readIfPresent()
        value.itemCount = try reader["ItemCount"].readIfPresent()
        value.indexArn = try reader["IndexArn"].readIfPresent()
        value.onDemandThroughput = try reader["OnDemandThroughput"].readIfPresent(with: DynamoDBClientTypes.OnDemandThroughput.read(from:))
        return value
    }
}

extension DynamoDBClientTypes.ProvisionedThroughputDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.ProvisionedThroughputDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.ProvisionedThroughputDescription()
        value.lastIncreaseDateTime = try reader["LastIncreaseDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastDecreaseDateTime = try reader["LastDecreaseDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.numberOfDecreasesToday = try reader["NumberOfDecreasesToday"].readIfPresent()
        value.readCapacityUnits = try reader["ReadCapacityUnits"].readIfPresent()
        value.writeCapacityUnits = try reader["WriteCapacityUnits"].readIfPresent()
        return value
    }
}

extension DynamoDBClientTypes.Projection {

    static func write(value: DynamoDBClientTypes.Projection?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["NonKeyAttributes"].writeList(value.nonKeyAttributes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ProjectionType"].write(value.projectionType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.Projection {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.Projection()
        value.projectionType = try reader["ProjectionType"].readIfPresent()
        value.nonKeyAttributes = try reader["NonKeyAttributes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DynamoDBClientTypes.KeySchemaElement {

    static func write(value: DynamoDBClientTypes.KeySchemaElement?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AttributeName"].write(value.attributeName)
        try writer["KeyType"].write(value.keyType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.KeySchemaElement {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.KeySchemaElement()
        value.attributeName = try reader["AttributeName"].readIfPresent() ?? ""
        value.keyType = try reader["KeyType"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension DynamoDBClientTypes.LocalSecondaryIndexDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.LocalSecondaryIndexDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.LocalSecondaryIndexDescription()
        value.indexName = try reader["IndexName"].readIfPresent()
        value.keySchema = try reader["KeySchema"].readListIfPresent(memberReadingClosure: DynamoDBClientTypes.KeySchemaElement.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.projection = try reader["Projection"].readIfPresent(with: DynamoDBClientTypes.Projection.read(from:))
        value.indexSizeBytes = try reader["IndexSizeBytes"].readIfPresent()
        value.itemCount = try reader["ItemCount"].readIfPresent()
        value.indexArn = try reader["IndexArn"].readIfPresent()
        return value
    }
}

extension DynamoDBClientTypes.BillingModeSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.BillingModeSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.BillingModeSummary()
        value.billingMode = try reader["BillingMode"].readIfPresent()
        value.lastUpdateToPayPerRequestDateTime = try reader["LastUpdateToPayPerRequestDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension DynamoDBClientTypes.AttributeDefinition {

    static func write(value: DynamoDBClientTypes.AttributeDefinition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AttributeName"].write(value.attributeName)
        try writer["AttributeType"].write(value.attributeType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.AttributeDefinition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.AttributeDefinition()
        value.attributeName = try reader["AttributeName"].readIfPresent() ?? ""
        value.attributeType = try reader["AttributeType"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension DynamoDBClientTypes.BackupDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.BackupDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.BackupDescription()
        value.backupDetails = try reader["BackupDetails"].readIfPresent(with: DynamoDBClientTypes.BackupDetails.read(from:))
        value.sourceTableDetails = try reader["SourceTableDetails"].readIfPresent(with: DynamoDBClientTypes.SourceTableDetails.read(from:))
        value.sourceTableFeatureDetails = try reader["SourceTableFeatureDetails"].readIfPresent(with: DynamoDBClientTypes.SourceTableFeatureDetails.read(from:))
        return value
    }
}

extension DynamoDBClientTypes.SourceTableFeatureDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.SourceTableFeatureDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.SourceTableFeatureDetails()
        value.localSecondaryIndexes = try reader["LocalSecondaryIndexes"].readListIfPresent(memberReadingClosure: DynamoDBClientTypes.LocalSecondaryIndexInfo.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.globalSecondaryIndexes = try reader["GlobalSecondaryIndexes"].readListIfPresent(memberReadingClosure: DynamoDBClientTypes.GlobalSecondaryIndexInfo.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.streamDescription = try reader["StreamDescription"].readIfPresent(with: DynamoDBClientTypes.StreamSpecification.read(from:))
        value.timeToLiveDescription = try reader["TimeToLiveDescription"].readIfPresent(with: DynamoDBClientTypes.TimeToLiveDescription.read(from:))
        value.sseDescription = try reader["SSEDescription"].readIfPresent(with: DynamoDBClientTypes.SSEDescription.read(from:))
        return value
    }
}

extension DynamoDBClientTypes.TimeToLiveDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.TimeToLiveDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.TimeToLiveDescription()
        value.timeToLiveStatus = try reader["TimeToLiveStatus"].readIfPresent()
        value.attributeName = try reader["AttributeName"].readIfPresent()
        return value
    }
}

extension DynamoDBClientTypes.GlobalSecondaryIndexInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.GlobalSecondaryIndexInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.GlobalSecondaryIndexInfo()
        value.indexName = try reader["IndexName"].readIfPresent()
        value.keySchema = try reader["KeySchema"].readListIfPresent(memberReadingClosure: DynamoDBClientTypes.KeySchemaElement.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.projection = try reader["Projection"].readIfPresent(with: DynamoDBClientTypes.Projection.read(from:))
        value.provisionedThroughput = try reader["ProvisionedThroughput"].readIfPresent(with: DynamoDBClientTypes.ProvisionedThroughput.read(from:))
        value.onDemandThroughput = try reader["OnDemandThroughput"].readIfPresent(with: DynamoDBClientTypes.OnDemandThroughput.read(from:))
        return value
    }
}

extension DynamoDBClientTypes.ProvisionedThroughput {

    static func write(value: DynamoDBClientTypes.ProvisionedThroughput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ReadCapacityUnits"].write(value.readCapacityUnits)
        try writer["WriteCapacityUnits"].write(value.writeCapacityUnits)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.ProvisionedThroughput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.ProvisionedThroughput()
        value.readCapacityUnits = try reader["ReadCapacityUnits"].readIfPresent() ?? 0
        value.writeCapacityUnits = try reader["WriteCapacityUnits"].readIfPresent() ?? 0
        return value
    }
}

extension DynamoDBClientTypes.LocalSecondaryIndexInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.LocalSecondaryIndexInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.LocalSecondaryIndexInfo()
        value.indexName = try reader["IndexName"].readIfPresent()
        value.keySchema = try reader["KeySchema"].readListIfPresent(memberReadingClosure: DynamoDBClientTypes.KeySchemaElement.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.projection = try reader["Projection"].readIfPresent(with: DynamoDBClientTypes.Projection.read(from:))
        return value
    }
}

extension DynamoDBClientTypes.SourceTableDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.SourceTableDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.SourceTableDetails()
        value.tableName = try reader["TableName"].readIfPresent() ?? ""
        value.tableId = try reader["TableId"].readIfPresent() ?? ""
        value.tableArn = try reader["TableArn"].readIfPresent()
        value.tableSizeBytes = try reader["TableSizeBytes"].readIfPresent()
        value.keySchema = try reader["KeySchema"].readListIfPresent(memberReadingClosure: DynamoDBClientTypes.KeySchemaElement.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.tableCreationDateTime = try reader["TableCreationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.provisionedThroughput = try reader["ProvisionedThroughput"].readIfPresent(with: DynamoDBClientTypes.ProvisionedThroughput.read(from:))
        value.onDemandThroughput = try reader["OnDemandThroughput"].readIfPresent(with: DynamoDBClientTypes.OnDemandThroughput.read(from:))
        value.itemCount = try reader["ItemCount"].readIfPresent()
        value.billingMode = try reader["BillingMode"].readIfPresent()
        return value
    }
}

extension DynamoDBClientTypes.ContinuousBackupsDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.ContinuousBackupsDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.ContinuousBackupsDescription()
        value.continuousBackupsStatus = try reader["ContinuousBackupsStatus"].readIfPresent() ?? .sdkUnknown("")
        value.pointInTimeRecoveryDescription = try reader["PointInTimeRecoveryDescription"].readIfPresent(with: DynamoDBClientTypes.PointInTimeRecoveryDescription.read(from:))
        return value
    }
}

extension DynamoDBClientTypes.PointInTimeRecoveryDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.PointInTimeRecoveryDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.PointInTimeRecoveryDescription()
        value.pointInTimeRecoveryStatus = try reader["PointInTimeRecoveryStatus"].readIfPresent()
        value.earliestRestorableDateTime = try reader["EarliestRestorableDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.latestRestorableDateTime = try reader["LatestRestorableDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension DynamoDBClientTypes.FailureException {

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.FailureException {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.FailureException()
        value.exceptionName = try reader["ExceptionName"].readIfPresent()
        value.exceptionDescription = try reader["ExceptionDescription"].readIfPresent()
        return value
    }
}

extension DynamoDBClientTypes.Endpoint {

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.Endpoint {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.Endpoint()
        value.address = try reader["Address"].readIfPresent() ?? ""
        value.cachePeriodInMinutes = try reader["CachePeriodInMinutes"].readIfPresent() ?? 0
        return value
    }
}

extension DynamoDBClientTypes.ExportDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.ExportDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.ExportDescription()
        value.exportArn = try reader["ExportArn"].readIfPresent()
        value.exportStatus = try reader["ExportStatus"].readIfPresent()
        value.startTime = try reader["StartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endTime = try reader["EndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.exportManifest = try reader["ExportManifest"].readIfPresent()
        value.tableArn = try reader["TableArn"].readIfPresent()
        value.tableId = try reader["TableId"].readIfPresent()
        value.exportTime = try reader["ExportTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.clientToken = try reader["ClientToken"].readIfPresent()
        value.s3Bucket = try reader["S3Bucket"].readIfPresent()
        value.s3BucketOwner = try reader["S3BucketOwner"].readIfPresent()
        value.s3Prefix = try reader["S3Prefix"].readIfPresent()
        value.s3SseAlgorithm = try reader["S3SseAlgorithm"].readIfPresent()
        value.s3SseKmsKeyId = try reader["S3SseKmsKeyId"].readIfPresent()
        value.failureCode = try reader["FailureCode"].readIfPresent()
        value.failureMessage = try reader["FailureMessage"].readIfPresent()
        value.exportFormat = try reader["ExportFormat"].readIfPresent()
        value.billedSizeBytes = try reader["BilledSizeBytes"].readIfPresent()
        value.itemCount = try reader["ItemCount"].readIfPresent()
        value.exportType = try reader["ExportType"].readIfPresent()
        value.incrementalExportSpecification = try reader["IncrementalExportSpecification"].readIfPresent(with: DynamoDBClientTypes.IncrementalExportSpecification.read(from:))
        return value
    }
}

extension DynamoDBClientTypes.IncrementalExportSpecification {

    static func write(value: DynamoDBClientTypes.IncrementalExportSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ExportFromTime"].writeTimestamp(value.exportFromTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["ExportToTime"].writeTimestamp(value.exportToTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["ExportViewType"].write(value.exportViewType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.IncrementalExportSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.IncrementalExportSpecification()
        value.exportFromTime = try reader["ExportFromTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.exportToTime = try reader["ExportToTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.exportViewType = try reader["ExportViewType"].readIfPresent()
        return value
    }
}

extension DynamoDBClientTypes.ReplicaSettingsDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.ReplicaSettingsDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.ReplicaSettingsDescription()
        value.regionName = try reader["RegionName"].readIfPresent() ?? ""
        value.replicaStatus = try reader["ReplicaStatus"].readIfPresent()
        value.replicaBillingModeSummary = try reader["ReplicaBillingModeSummary"].readIfPresent(with: DynamoDBClientTypes.BillingModeSummary.read(from:))
        value.replicaProvisionedReadCapacityUnits = try reader["ReplicaProvisionedReadCapacityUnits"].readIfPresent()
        value.replicaProvisionedReadCapacityAutoScalingSettings = try reader["ReplicaProvisionedReadCapacityAutoScalingSettings"].readIfPresent(with: DynamoDBClientTypes.AutoScalingSettingsDescription.read(from:))
        value.replicaProvisionedWriteCapacityUnits = try reader["ReplicaProvisionedWriteCapacityUnits"].readIfPresent()
        value.replicaProvisionedWriteCapacityAutoScalingSettings = try reader["ReplicaProvisionedWriteCapacityAutoScalingSettings"].readIfPresent(with: DynamoDBClientTypes.AutoScalingSettingsDescription.read(from:))
        value.replicaGlobalSecondaryIndexSettings = try reader["ReplicaGlobalSecondaryIndexSettings"].readListIfPresent(memberReadingClosure: DynamoDBClientTypes.ReplicaGlobalSecondaryIndexSettingsDescription.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.replicaTableClassSummary = try reader["ReplicaTableClassSummary"].readIfPresent(with: DynamoDBClientTypes.TableClassSummary.read(from:))
        return value
    }
}

extension DynamoDBClientTypes.ReplicaGlobalSecondaryIndexSettingsDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.ReplicaGlobalSecondaryIndexSettingsDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.ReplicaGlobalSecondaryIndexSettingsDescription()
        value.indexName = try reader["IndexName"].readIfPresent() ?? ""
        value.indexStatus = try reader["IndexStatus"].readIfPresent()
        value.provisionedReadCapacityUnits = try reader["ProvisionedReadCapacityUnits"].readIfPresent()
        value.provisionedReadCapacityAutoScalingSettings = try reader["ProvisionedReadCapacityAutoScalingSettings"].readIfPresent(with: DynamoDBClientTypes.AutoScalingSettingsDescription.read(from:))
        value.provisionedWriteCapacityUnits = try reader["ProvisionedWriteCapacityUnits"].readIfPresent()
        value.provisionedWriteCapacityAutoScalingSettings = try reader["ProvisionedWriteCapacityAutoScalingSettings"].readIfPresent(with: DynamoDBClientTypes.AutoScalingSettingsDescription.read(from:))
        return value
    }
}

extension DynamoDBClientTypes.AutoScalingSettingsDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.AutoScalingSettingsDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.AutoScalingSettingsDescription()
        value.minimumUnits = try reader["MinimumUnits"].readIfPresent()
        value.maximumUnits = try reader["MaximumUnits"].readIfPresent()
        value.autoScalingDisabled = try reader["AutoScalingDisabled"].readIfPresent()
        value.autoScalingRoleArn = try reader["AutoScalingRoleArn"].readIfPresent()
        value.scalingPolicies = try reader["ScalingPolicies"].readListIfPresent(memberReadingClosure: DynamoDBClientTypes.AutoScalingPolicyDescription.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DynamoDBClientTypes.AutoScalingPolicyDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.AutoScalingPolicyDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.AutoScalingPolicyDescription()
        value.policyName = try reader["PolicyName"].readIfPresent()
        value.targetTrackingScalingPolicyConfiguration = try reader["TargetTrackingScalingPolicyConfiguration"].readIfPresent(with: DynamoDBClientTypes.AutoScalingTargetTrackingScalingPolicyConfigurationDescription.read(from:))
        return value
    }
}

extension DynamoDBClientTypes.AutoScalingTargetTrackingScalingPolicyConfigurationDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.AutoScalingTargetTrackingScalingPolicyConfigurationDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.AutoScalingTargetTrackingScalingPolicyConfigurationDescription()
        value.disableScaleIn = try reader["DisableScaleIn"].readIfPresent()
        value.scaleInCooldown = try reader["ScaleInCooldown"].readIfPresent()
        value.scaleOutCooldown = try reader["ScaleOutCooldown"].readIfPresent()
        value.targetValue = try reader["TargetValue"].readIfPresent() ?? 0.0
        return value
    }
}

extension DynamoDBClientTypes.ImportTableDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.ImportTableDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.ImportTableDescription()
        value.importArn = try reader["ImportArn"].readIfPresent()
        value.importStatus = try reader["ImportStatus"].readIfPresent()
        value.tableArn = try reader["TableArn"].readIfPresent()
        value.tableId = try reader["TableId"].readIfPresent()
        value.clientToken = try reader["ClientToken"].readIfPresent()
        value.s3BucketSource = try reader["S3BucketSource"].readIfPresent(with: DynamoDBClientTypes.S3BucketSource.read(from:))
        value.errorCount = try reader["ErrorCount"].readIfPresent() ?? 0
        value.cloudWatchLogGroupArn = try reader["CloudWatchLogGroupArn"].readIfPresent()
        value.inputFormat = try reader["InputFormat"].readIfPresent()
        value.inputFormatOptions = try reader["InputFormatOptions"].readIfPresent(with: DynamoDBClientTypes.InputFormatOptions.read(from:))
        value.inputCompressionType = try reader["InputCompressionType"].readIfPresent()
        value.tableCreationParameters = try reader["TableCreationParameters"].readIfPresent(with: DynamoDBClientTypes.TableCreationParameters.read(from:))
        value.startTime = try reader["StartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endTime = try reader["EndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.processedSizeBytes = try reader["ProcessedSizeBytes"].readIfPresent()
        value.processedItemCount = try reader["ProcessedItemCount"].readIfPresent() ?? 0
        value.importedItemCount = try reader["ImportedItemCount"].readIfPresent() ?? 0
        value.failureCode = try reader["FailureCode"].readIfPresent()
        value.failureMessage = try reader["FailureMessage"].readIfPresent()
        return value
    }
}

extension DynamoDBClientTypes.TableCreationParameters {

    static func write(value: DynamoDBClientTypes.TableCreationParameters?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AttributeDefinitions"].writeList(value.attributeDefinitions, memberWritingClosure: DynamoDBClientTypes.AttributeDefinition.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["BillingMode"].write(value.billingMode)
        try writer["GlobalSecondaryIndexes"].writeList(value.globalSecondaryIndexes, memberWritingClosure: DynamoDBClientTypes.GlobalSecondaryIndex.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["KeySchema"].writeList(value.keySchema, memberWritingClosure: DynamoDBClientTypes.KeySchemaElement.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["OnDemandThroughput"].write(value.onDemandThroughput, with: DynamoDBClientTypes.OnDemandThroughput.write(value:to:))
        try writer["ProvisionedThroughput"].write(value.provisionedThroughput, with: DynamoDBClientTypes.ProvisionedThroughput.write(value:to:))
        try writer["SSESpecification"].write(value.sseSpecification, with: DynamoDBClientTypes.SSESpecification.write(value:to:))
        try writer["TableName"].write(value.tableName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.TableCreationParameters {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.TableCreationParameters()
        value.tableName = try reader["TableName"].readIfPresent() ?? ""
        value.attributeDefinitions = try reader["AttributeDefinitions"].readListIfPresent(memberReadingClosure: DynamoDBClientTypes.AttributeDefinition.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.keySchema = try reader["KeySchema"].readListIfPresent(memberReadingClosure: DynamoDBClientTypes.KeySchemaElement.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.billingMode = try reader["BillingMode"].readIfPresent()
        value.provisionedThroughput = try reader["ProvisionedThroughput"].readIfPresent(with: DynamoDBClientTypes.ProvisionedThroughput.read(from:))
        value.onDemandThroughput = try reader["OnDemandThroughput"].readIfPresent(with: DynamoDBClientTypes.OnDemandThroughput.read(from:))
        value.sseSpecification = try reader["SSESpecification"].readIfPresent(with: DynamoDBClientTypes.SSESpecification.read(from:))
        value.globalSecondaryIndexes = try reader["GlobalSecondaryIndexes"].readListIfPresent(memberReadingClosure: DynamoDBClientTypes.GlobalSecondaryIndex.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DynamoDBClientTypes.GlobalSecondaryIndex {

    static func write(value: DynamoDBClientTypes.GlobalSecondaryIndex?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IndexName"].write(value.indexName)
        try writer["KeySchema"].writeList(value.keySchema, memberWritingClosure: DynamoDBClientTypes.KeySchemaElement.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["OnDemandThroughput"].write(value.onDemandThroughput, with: DynamoDBClientTypes.OnDemandThroughput.write(value:to:))
        try writer["Projection"].write(value.projection, with: DynamoDBClientTypes.Projection.write(value:to:))
        try writer["ProvisionedThroughput"].write(value.provisionedThroughput, with: DynamoDBClientTypes.ProvisionedThroughput.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.GlobalSecondaryIndex {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.GlobalSecondaryIndex()
        value.indexName = try reader["IndexName"].readIfPresent() ?? ""
        value.keySchema = try reader["KeySchema"].readListIfPresent(memberReadingClosure: DynamoDBClientTypes.KeySchemaElement.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.projection = try reader["Projection"].readIfPresent(with: DynamoDBClientTypes.Projection.read(from:))
        value.provisionedThroughput = try reader["ProvisionedThroughput"].readIfPresent(with: DynamoDBClientTypes.ProvisionedThroughput.read(from:))
        value.onDemandThroughput = try reader["OnDemandThroughput"].readIfPresent(with: DynamoDBClientTypes.OnDemandThroughput.read(from:))
        return value
    }
}

extension DynamoDBClientTypes.SSESpecification {

    static func write(value: DynamoDBClientTypes.SSESpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Enabled"].write(value.enabled)
        try writer["KMSMasterKeyId"].write(value.kmsMasterKeyId)
        try writer["SSEType"].write(value.sseType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.SSESpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.SSESpecification()
        value.enabled = try reader["Enabled"].readIfPresent()
        value.sseType = try reader["SSEType"].readIfPresent()
        value.kmsMasterKeyId = try reader["KMSMasterKeyId"].readIfPresent()
        return value
    }
}

extension DynamoDBClientTypes.InputFormatOptions {

    static func write(value: DynamoDBClientTypes.InputFormatOptions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Csv"].write(value.csv, with: DynamoDBClientTypes.CsvOptions.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.InputFormatOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.InputFormatOptions()
        value.csv = try reader["Csv"].readIfPresent(with: DynamoDBClientTypes.CsvOptions.read(from:))
        return value
    }
}

extension DynamoDBClientTypes.CsvOptions {

    static func write(value: DynamoDBClientTypes.CsvOptions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Delimiter"].write(value.delimiter)
        try writer["HeaderList"].writeList(value.headerList, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.CsvOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.CsvOptions()
        value.delimiter = try reader["Delimiter"].readIfPresent()
        value.headerList = try reader["HeaderList"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DynamoDBClientTypes.S3BucketSource {

    static func write(value: DynamoDBClientTypes.S3BucketSource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["S3Bucket"].write(value.s3Bucket)
        try writer["S3BucketOwner"].write(value.s3BucketOwner)
        try writer["S3KeyPrefix"].write(value.s3KeyPrefix)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.S3BucketSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.S3BucketSource()
        value.s3BucketOwner = try reader["S3BucketOwner"].readIfPresent()
        value.s3Bucket = try reader["S3Bucket"].readIfPresent() ?? ""
        value.s3KeyPrefix = try reader["S3KeyPrefix"].readIfPresent()
        return value
    }
}

extension DynamoDBClientTypes.KinesisDataStreamDestination {

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.KinesisDataStreamDestination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.KinesisDataStreamDestination()
        value.streamArn = try reader["StreamArn"].readIfPresent()
        value.destinationStatus = try reader["DestinationStatus"].readIfPresent()
        value.destinationStatusDescription = try reader["DestinationStatusDescription"].readIfPresent()
        value.approximateCreationDateTimePrecision = try reader["ApproximateCreationDateTimePrecision"].readIfPresent()
        return value
    }
}

extension DynamoDBClientTypes.TableAutoScalingDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.TableAutoScalingDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.TableAutoScalingDescription()
        value.tableName = try reader["TableName"].readIfPresent()
        value.tableStatus = try reader["TableStatus"].readIfPresent()
        value.replicas = try reader["Replicas"].readListIfPresent(memberReadingClosure: DynamoDBClientTypes.ReplicaAutoScalingDescription.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DynamoDBClientTypes.ReplicaAutoScalingDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.ReplicaAutoScalingDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.ReplicaAutoScalingDescription()
        value.regionName = try reader["RegionName"].readIfPresent()
        value.globalSecondaryIndexes = try reader["GlobalSecondaryIndexes"].readListIfPresent(memberReadingClosure: DynamoDBClientTypes.ReplicaGlobalSecondaryIndexAutoScalingDescription.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.replicaProvisionedReadCapacityAutoScalingSettings = try reader["ReplicaProvisionedReadCapacityAutoScalingSettings"].readIfPresent(with: DynamoDBClientTypes.AutoScalingSettingsDescription.read(from:))
        value.replicaProvisionedWriteCapacityAutoScalingSettings = try reader["ReplicaProvisionedWriteCapacityAutoScalingSettings"].readIfPresent(with: DynamoDBClientTypes.AutoScalingSettingsDescription.read(from:))
        value.replicaStatus = try reader["ReplicaStatus"].readIfPresent()
        return value
    }
}

extension DynamoDBClientTypes.ReplicaGlobalSecondaryIndexAutoScalingDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.ReplicaGlobalSecondaryIndexAutoScalingDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.ReplicaGlobalSecondaryIndexAutoScalingDescription()
        value.indexName = try reader["IndexName"].readIfPresent()
        value.indexStatus = try reader["IndexStatus"].readIfPresent()
        value.provisionedReadCapacityAutoScalingSettings = try reader["ProvisionedReadCapacityAutoScalingSettings"].readIfPresent(with: DynamoDBClientTypes.AutoScalingSettingsDescription.read(from:))
        value.provisionedWriteCapacityAutoScalingSettings = try reader["ProvisionedWriteCapacityAutoScalingSettings"].readIfPresent(with: DynamoDBClientTypes.AutoScalingSettingsDescription.read(from:))
        return value
    }
}

extension DynamoDBClientTypes.EnableKinesisStreamingConfiguration {

    static func write(value: DynamoDBClientTypes.EnableKinesisStreamingConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ApproximateCreationDateTimePrecision"].write(value.approximateCreationDateTimePrecision)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.EnableKinesisStreamingConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.EnableKinesisStreamingConfiguration()
        value.approximateCreationDateTimePrecision = try reader["ApproximateCreationDateTimePrecision"].readIfPresent()
        return value
    }
}

extension DynamoDBClientTypes.ItemResponse {

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.ItemResponse {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.ItemResponse()
        value.item = try reader["Item"].readMapIfPresent(valueReadingClosure: DynamoDBClientTypes.AttributeValue.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension DynamoDBClientTypes.BackupSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.BackupSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.BackupSummary()
        value.tableName = try reader["TableName"].readIfPresent()
        value.tableId = try reader["TableId"].readIfPresent()
        value.tableArn = try reader["TableArn"].readIfPresent()
        value.backupArn = try reader["BackupArn"].readIfPresent()
        value.backupName = try reader["BackupName"].readIfPresent()
        value.backupCreationDateTime = try reader["BackupCreationDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.backupExpiryDateTime = try reader["BackupExpiryDateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.backupStatus = try reader["BackupStatus"].readIfPresent()
        value.backupType = try reader["BackupType"].readIfPresent()
        value.backupSizeBytes = try reader["BackupSizeBytes"].readIfPresent()
        return value
    }
}

extension DynamoDBClientTypes.ContributorInsightsSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.ContributorInsightsSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.ContributorInsightsSummary()
        value.tableName = try reader["TableName"].readIfPresent()
        value.indexName = try reader["IndexName"].readIfPresent()
        value.contributorInsightsStatus = try reader["ContributorInsightsStatus"].readIfPresent()
        return value
    }
}

extension DynamoDBClientTypes.ExportSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.ExportSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.ExportSummary()
        value.exportArn = try reader["ExportArn"].readIfPresent()
        value.exportStatus = try reader["ExportStatus"].readIfPresent()
        value.exportType = try reader["ExportType"].readIfPresent()
        return value
    }
}

extension DynamoDBClientTypes.GlobalTable {

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.GlobalTable {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.GlobalTable()
        value.globalTableName = try reader["GlobalTableName"].readIfPresent()
        value.replicationGroup = try reader["ReplicationGroup"].readListIfPresent(memberReadingClosure: DynamoDBClientTypes.Replica.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DynamoDBClientTypes.Replica {

    static func write(value: DynamoDBClientTypes.Replica?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RegionName"].write(value.regionName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.Replica {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.Replica()
        value.regionName = try reader["RegionName"].readIfPresent()
        return value
    }
}

extension DynamoDBClientTypes.ImportSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.ImportSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.ImportSummary()
        value.importArn = try reader["ImportArn"].readIfPresent()
        value.importStatus = try reader["ImportStatus"].readIfPresent()
        value.tableArn = try reader["TableArn"].readIfPresent()
        value.s3BucketSource = try reader["S3BucketSource"].readIfPresent(with: DynamoDBClientTypes.S3BucketSource.read(from:))
        value.cloudWatchLogGroupArn = try reader["CloudWatchLogGroupArn"].readIfPresent()
        value.inputFormat = try reader["InputFormat"].readIfPresent()
        value.startTime = try reader["StartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endTime = try reader["EndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension DynamoDBClientTypes.Tag {

    static func write(value: DynamoDBClientTypes.Tag?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.Tag()
        value.key = try reader["Key"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent() ?? ""
        return value
    }
}

extension DynamoDBClientTypes.UpdateKinesisStreamingConfiguration {

    static func write(value: DynamoDBClientTypes.UpdateKinesisStreamingConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ApproximateCreationDateTimePrecision"].write(value.approximateCreationDateTimePrecision)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.UpdateKinesisStreamingConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.UpdateKinesisStreamingConfiguration()
        value.approximateCreationDateTimePrecision = try reader["ApproximateCreationDateTimePrecision"].readIfPresent()
        return value
    }
}

extension DynamoDBClientTypes.TimeToLiveSpecification {

    static func write(value: DynamoDBClientTypes.TimeToLiveSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AttributeName"].write(value.attributeName)
        try writer["Enabled"].write(value.enabled)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.TimeToLiveSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.TimeToLiveSpecification()
        value.enabled = try reader["Enabled"].readIfPresent() ?? false
        value.attributeName = try reader["AttributeName"].readIfPresent() ?? ""
        return value
    }
}

extension DynamoDBClientTypes.CancellationReason {

    static func read(from reader: SmithyJSON.Reader) throws -> DynamoDBClientTypes.CancellationReason {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = DynamoDBClientTypes.CancellationReason()
        value.item = try reader["Item"].readMapIfPresent(valueReadingClosure: DynamoDBClientTypes.AttributeValue.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.code = try reader["Code"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension DynamoDBClientTypes.BatchStatementRequest {

    static func write(value: DynamoDBClientTypes.BatchStatementRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConsistentRead"].write(value.consistentRead)
        try writer["Parameters"].writeList(value.parameters, memberWritingClosure: DynamoDBClientTypes.AttributeValue.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ReturnValuesOnConditionCheckFailure"].write(value.returnValuesOnConditionCheckFailure)
        try writer["Statement"].write(value.statement)
    }
}

extension DynamoDBClientTypes.LocalSecondaryIndex {

    static func write(value: DynamoDBClientTypes.LocalSecondaryIndex?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IndexName"].write(value.indexName)
        try writer["KeySchema"].writeList(value.keySchema, memberWritingClosure: DynamoDBClientTypes.KeySchemaElement.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Projection"].write(value.projection, with: DynamoDBClientTypes.Projection.write(value:to:))
    }
}

extension DynamoDBClientTypes.ExpectedAttributeValue {

    static func write(value: DynamoDBClientTypes.ExpectedAttributeValue?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AttributeValueList"].writeList(value.attributeValueList, memberWritingClosure: DynamoDBClientTypes.AttributeValue.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ComparisonOperator"].write(value.comparisonOperator)
        try writer["Exists"].write(value.exists)
        try writer["Value"].write(value.value, with: DynamoDBClientTypes.AttributeValue.write(value:to:))
    }
}

extension DynamoDBClientTypes.ParameterizedStatement {

    static func write(value: DynamoDBClientTypes.ParameterizedStatement?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Parameters"].writeList(value.parameters, memberWritingClosure: DynamoDBClientTypes.AttributeValue.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ReturnValuesOnConditionCheckFailure"].write(value.returnValuesOnConditionCheckFailure)
        try writer["Statement"].write(value.statement)
    }
}

extension DynamoDBClientTypes.Condition {

    static func write(value: DynamoDBClientTypes.Condition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AttributeValueList"].writeList(value.attributeValueList, memberWritingClosure: DynamoDBClientTypes.AttributeValue.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ComparisonOperator"].write(value.comparisonOperator)
    }
}

extension DynamoDBClientTypes.TransactGetItem {

    static func write(value: DynamoDBClientTypes.TransactGetItem?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Get"].write(value.`get`, with: DynamoDBClientTypes.Get.write(value:to:))
    }
}

extension DynamoDBClientTypes.Get {

    static func write(value: DynamoDBClientTypes.Get?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ExpressionAttributeNames"].writeMap(value.expressionAttributeNames, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["Key"].writeMap(value.key, valueWritingClosure: DynamoDBClientTypes.AttributeValue.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ProjectionExpression"].write(value.projectionExpression)
        try writer["TableName"].write(value.tableName)
    }
}

extension DynamoDBClientTypes.TransactWriteItem {

    static func write(value: DynamoDBClientTypes.TransactWriteItem?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConditionCheck"].write(value.conditionCheck, with: DynamoDBClientTypes.ConditionCheck.write(value:to:))
        try writer["Delete"].write(value.delete, with: DynamoDBClientTypes.Delete.write(value:to:))
        try writer["Put"].write(value.put, with: DynamoDBClientTypes.Put.write(value:to:))
        try writer["Update"].write(value.update, with: DynamoDBClientTypes.Update.write(value:to:))
    }
}

extension DynamoDBClientTypes.Update {

    static func write(value: DynamoDBClientTypes.Update?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConditionExpression"].write(value.conditionExpression)
        try writer["ExpressionAttributeNames"].writeMap(value.expressionAttributeNames, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ExpressionAttributeValues"].writeMap(value.expressionAttributeValues, valueWritingClosure: DynamoDBClientTypes.AttributeValue.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["Key"].writeMap(value.key, valueWritingClosure: DynamoDBClientTypes.AttributeValue.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ReturnValuesOnConditionCheckFailure"].write(value.returnValuesOnConditionCheckFailure)
        try writer["TableName"].write(value.tableName)
        try writer["UpdateExpression"].write(value.updateExpression)
    }
}

extension DynamoDBClientTypes.Delete {

    static func write(value: DynamoDBClientTypes.Delete?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConditionExpression"].write(value.conditionExpression)
        try writer["ExpressionAttributeNames"].writeMap(value.expressionAttributeNames, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ExpressionAttributeValues"].writeMap(value.expressionAttributeValues, valueWritingClosure: DynamoDBClientTypes.AttributeValue.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["Key"].writeMap(value.key, valueWritingClosure: DynamoDBClientTypes.AttributeValue.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ReturnValuesOnConditionCheckFailure"].write(value.returnValuesOnConditionCheckFailure)
        try writer["TableName"].write(value.tableName)
    }
}

extension DynamoDBClientTypes.Put {

    static func write(value: DynamoDBClientTypes.Put?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConditionExpression"].write(value.conditionExpression)
        try writer["ExpressionAttributeNames"].writeMap(value.expressionAttributeNames, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ExpressionAttributeValues"].writeMap(value.expressionAttributeValues, valueWritingClosure: DynamoDBClientTypes.AttributeValue.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["Item"].writeMap(value.item, valueWritingClosure: DynamoDBClientTypes.AttributeValue.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ReturnValuesOnConditionCheckFailure"].write(value.returnValuesOnConditionCheckFailure)
        try writer["TableName"].write(value.tableName)
    }
}

extension DynamoDBClientTypes.ConditionCheck {

    static func write(value: DynamoDBClientTypes.ConditionCheck?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConditionExpression"].write(value.conditionExpression)
        try writer["ExpressionAttributeNames"].writeMap(value.expressionAttributeNames, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ExpressionAttributeValues"].writeMap(value.expressionAttributeValues, valueWritingClosure: DynamoDBClientTypes.AttributeValue.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["Key"].writeMap(value.key, valueWritingClosure: DynamoDBClientTypes.AttributeValue.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ReturnValuesOnConditionCheckFailure"].write(value.returnValuesOnConditionCheckFailure)
        try writer["TableName"].write(value.tableName)
    }
}

extension DynamoDBClientTypes.PointInTimeRecoverySpecification {

    static func write(value: DynamoDBClientTypes.PointInTimeRecoverySpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PointInTimeRecoveryEnabled"].write(value.pointInTimeRecoveryEnabled)
    }
}

extension DynamoDBClientTypes.ReplicaUpdate {

    static func write(value: DynamoDBClientTypes.ReplicaUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Create"].write(value.create, with: DynamoDBClientTypes.CreateReplicaAction.write(value:to:))
        try writer["Delete"].write(value.delete, with: DynamoDBClientTypes.DeleteReplicaAction.write(value:to:))
    }
}

extension DynamoDBClientTypes.DeleteReplicaAction {

    static func write(value: DynamoDBClientTypes.DeleteReplicaAction?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RegionName"].write(value.regionName)
    }
}

extension DynamoDBClientTypes.CreateReplicaAction {

    static func write(value: DynamoDBClientTypes.CreateReplicaAction?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RegionName"].write(value.regionName)
    }
}

extension DynamoDBClientTypes.AutoScalingSettingsUpdate {

    static func write(value: DynamoDBClientTypes.AutoScalingSettingsUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingDisabled"].write(value.autoScalingDisabled)
        try writer["AutoScalingRoleArn"].write(value.autoScalingRoleArn)
        try writer["MaximumUnits"].write(value.maximumUnits)
        try writer["MinimumUnits"].write(value.minimumUnits)
        try writer["ScalingPolicyUpdate"].write(value.scalingPolicyUpdate, with: DynamoDBClientTypes.AutoScalingPolicyUpdate.write(value:to:))
    }
}

extension DynamoDBClientTypes.AutoScalingPolicyUpdate {

    static func write(value: DynamoDBClientTypes.AutoScalingPolicyUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PolicyName"].write(value.policyName)
        try writer["TargetTrackingScalingPolicyConfiguration"].write(value.targetTrackingScalingPolicyConfiguration, with: DynamoDBClientTypes.AutoScalingTargetTrackingScalingPolicyConfigurationUpdate.write(value:to:))
    }
}

extension DynamoDBClientTypes.AutoScalingTargetTrackingScalingPolicyConfigurationUpdate {

    static func write(value: DynamoDBClientTypes.AutoScalingTargetTrackingScalingPolicyConfigurationUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DisableScaleIn"].write(value.disableScaleIn)
        try writer["ScaleInCooldown"].write(value.scaleInCooldown)
        try writer["ScaleOutCooldown"].write(value.scaleOutCooldown)
        try writer["TargetValue"].write(value.targetValue)
    }
}

extension DynamoDBClientTypes.GlobalTableGlobalSecondaryIndexSettingsUpdate {

    static func write(value: DynamoDBClientTypes.GlobalTableGlobalSecondaryIndexSettingsUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IndexName"].write(value.indexName)
        try writer["ProvisionedWriteCapacityAutoScalingSettingsUpdate"].write(value.provisionedWriteCapacityAutoScalingSettingsUpdate, with: DynamoDBClientTypes.AutoScalingSettingsUpdate.write(value:to:))
        try writer["ProvisionedWriteCapacityUnits"].write(value.provisionedWriteCapacityUnits)
    }
}

extension DynamoDBClientTypes.ReplicaSettingsUpdate {

    static func write(value: DynamoDBClientTypes.ReplicaSettingsUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RegionName"].write(value.regionName)
        try writer["ReplicaGlobalSecondaryIndexSettingsUpdate"].writeList(value.replicaGlobalSecondaryIndexSettingsUpdate, memberWritingClosure: DynamoDBClientTypes.ReplicaGlobalSecondaryIndexSettingsUpdate.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate"].write(value.replicaProvisionedReadCapacityAutoScalingSettingsUpdate, with: DynamoDBClientTypes.AutoScalingSettingsUpdate.write(value:to:))
        try writer["ReplicaProvisionedReadCapacityUnits"].write(value.replicaProvisionedReadCapacityUnits)
        try writer["ReplicaTableClass"].write(value.replicaTableClass)
    }
}

extension DynamoDBClientTypes.ReplicaGlobalSecondaryIndexSettingsUpdate {

    static func write(value: DynamoDBClientTypes.ReplicaGlobalSecondaryIndexSettingsUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IndexName"].write(value.indexName)
        try writer["ProvisionedReadCapacityAutoScalingSettingsUpdate"].write(value.provisionedReadCapacityAutoScalingSettingsUpdate, with: DynamoDBClientTypes.AutoScalingSettingsUpdate.write(value:to:))
        try writer["ProvisionedReadCapacityUnits"].write(value.provisionedReadCapacityUnits)
    }
}

extension DynamoDBClientTypes.AttributeValueUpdate {

    static func write(value: DynamoDBClientTypes.AttributeValueUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Action"].write(value.action)
        try writer["Value"].write(value.value, with: DynamoDBClientTypes.AttributeValue.write(value:to:))
    }
}

extension DynamoDBClientTypes.GlobalSecondaryIndexUpdate {

    static func write(value: DynamoDBClientTypes.GlobalSecondaryIndexUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Create"].write(value.create, with: DynamoDBClientTypes.CreateGlobalSecondaryIndexAction.write(value:to:))
        try writer["Delete"].write(value.delete, with: DynamoDBClientTypes.DeleteGlobalSecondaryIndexAction.write(value:to:))
        try writer["Update"].write(value.update, with: DynamoDBClientTypes.UpdateGlobalSecondaryIndexAction.write(value:to:))
    }
}

extension DynamoDBClientTypes.DeleteGlobalSecondaryIndexAction {

    static func write(value: DynamoDBClientTypes.DeleteGlobalSecondaryIndexAction?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IndexName"].write(value.indexName)
    }
}

extension DynamoDBClientTypes.CreateGlobalSecondaryIndexAction {

    static func write(value: DynamoDBClientTypes.CreateGlobalSecondaryIndexAction?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IndexName"].write(value.indexName)
        try writer["KeySchema"].writeList(value.keySchema, memberWritingClosure: DynamoDBClientTypes.KeySchemaElement.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["OnDemandThroughput"].write(value.onDemandThroughput, with: DynamoDBClientTypes.OnDemandThroughput.write(value:to:))
        try writer["Projection"].write(value.projection, with: DynamoDBClientTypes.Projection.write(value:to:))
        try writer["ProvisionedThroughput"].write(value.provisionedThroughput, with: DynamoDBClientTypes.ProvisionedThroughput.write(value:to:))
    }
}

extension DynamoDBClientTypes.UpdateGlobalSecondaryIndexAction {

    static func write(value: DynamoDBClientTypes.UpdateGlobalSecondaryIndexAction?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IndexName"].write(value.indexName)
        try writer["OnDemandThroughput"].write(value.onDemandThroughput, with: DynamoDBClientTypes.OnDemandThroughput.write(value:to:))
        try writer["ProvisionedThroughput"].write(value.provisionedThroughput, with: DynamoDBClientTypes.ProvisionedThroughput.write(value:to:))
    }
}

extension DynamoDBClientTypes.ReplicationGroupUpdate {

    static func write(value: DynamoDBClientTypes.ReplicationGroupUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Create"].write(value.create, with: DynamoDBClientTypes.CreateReplicationGroupMemberAction.write(value:to:))
        try writer["Delete"].write(value.delete, with: DynamoDBClientTypes.DeleteReplicationGroupMemberAction.write(value:to:))
        try writer["Update"].write(value.update, with: DynamoDBClientTypes.UpdateReplicationGroupMemberAction.write(value:to:))
    }
}

extension DynamoDBClientTypes.DeleteReplicationGroupMemberAction {

    static func write(value: DynamoDBClientTypes.DeleteReplicationGroupMemberAction?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RegionName"].write(value.regionName)
    }
}

extension DynamoDBClientTypes.UpdateReplicationGroupMemberAction {

    static func write(value: DynamoDBClientTypes.UpdateReplicationGroupMemberAction?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GlobalSecondaryIndexes"].writeList(value.globalSecondaryIndexes, memberWritingClosure: DynamoDBClientTypes.ReplicaGlobalSecondaryIndex.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["KMSMasterKeyId"].write(value.kmsMasterKeyId)
        try writer["OnDemandThroughputOverride"].write(value.onDemandThroughputOverride, with: DynamoDBClientTypes.OnDemandThroughputOverride.write(value:to:))
        try writer["ProvisionedThroughputOverride"].write(value.provisionedThroughputOverride, with: DynamoDBClientTypes.ProvisionedThroughputOverride.write(value:to:))
        try writer["RegionName"].write(value.regionName)
        try writer["TableClassOverride"].write(value.tableClassOverride)
    }
}

extension DynamoDBClientTypes.ReplicaGlobalSecondaryIndex {

    static func write(value: DynamoDBClientTypes.ReplicaGlobalSecondaryIndex?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IndexName"].write(value.indexName)
        try writer["OnDemandThroughputOverride"].write(value.onDemandThroughputOverride, with: DynamoDBClientTypes.OnDemandThroughputOverride.write(value:to:))
        try writer["ProvisionedThroughputOverride"].write(value.provisionedThroughputOverride, with: DynamoDBClientTypes.ProvisionedThroughputOverride.write(value:to:))
    }
}

extension DynamoDBClientTypes.CreateReplicationGroupMemberAction {

    static func write(value: DynamoDBClientTypes.CreateReplicationGroupMemberAction?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GlobalSecondaryIndexes"].writeList(value.globalSecondaryIndexes, memberWritingClosure: DynamoDBClientTypes.ReplicaGlobalSecondaryIndex.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["KMSMasterKeyId"].write(value.kmsMasterKeyId)
        try writer["OnDemandThroughputOverride"].write(value.onDemandThroughputOverride, with: DynamoDBClientTypes.OnDemandThroughputOverride.write(value:to:))
        try writer["ProvisionedThroughputOverride"].write(value.provisionedThroughputOverride, with: DynamoDBClientTypes.ProvisionedThroughputOverride.write(value:to:))
        try writer["RegionName"].write(value.regionName)
        try writer["TableClassOverride"].write(value.tableClassOverride)
    }
}

extension DynamoDBClientTypes.GlobalSecondaryIndexAutoScalingUpdate {

    static func write(value: DynamoDBClientTypes.GlobalSecondaryIndexAutoScalingUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IndexName"].write(value.indexName)
        try writer["ProvisionedWriteCapacityAutoScalingUpdate"].write(value.provisionedWriteCapacityAutoScalingUpdate, with: DynamoDBClientTypes.AutoScalingSettingsUpdate.write(value:to:))
    }
}

extension DynamoDBClientTypes.ReplicaAutoScalingUpdate {

    static func write(value: DynamoDBClientTypes.ReplicaAutoScalingUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RegionName"].write(value.regionName)
        try writer["ReplicaGlobalSecondaryIndexUpdates"].writeList(value.replicaGlobalSecondaryIndexUpdates, memberWritingClosure: DynamoDBClientTypes.ReplicaGlobalSecondaryIndexAutoScalingUpdate.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ReplicaProvisionedReadCapacityAutoScalingUpdate"].write(value.replicaProvisionedReadCapacityAutoScalingUpdate, with: DynamoDBClientTypes.AutoScalingSettingsUpdate.write(value:to:))
    }
}

extension DynamoDBClientTypes.ReplicaGlobalSecondaryIndexAutoScalingUpdate {

    static func write(value: DynamoDBClientTypes.ReplicaGlobalSecondaryIndexAutoScalingUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IndexName"].write(value.indexName)
        try writer["ProvisionedReadCapacityAutoScalingUpdate"].write(value.provisionedReadCapacityAutoScalingUpdate, with: DynamoDBClientTypes.AutoScalingSettingsUpdate.write(value:to:))
    }
}

public enum DynamoDBClientTypes {}
