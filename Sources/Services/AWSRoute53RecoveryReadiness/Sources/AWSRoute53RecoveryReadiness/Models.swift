//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum Smithy.ClientError
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.URIQueryItem
@_spi(SmithyTimestamps) import struct SmithyTimestamps.TimestampFormatter


public struct DeleteCellOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteReadinessCheckOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteRecoveryGroupOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteResourceSetOutput: Swift.Sendable {

    public init() { }
}

public struct UntagResourceOutput: Swift.Sendable {

    public init() { }
}

extension Route53RecoveryReadinessClientTypes {

    /// Information about a cell.
    public struct CellOutput: Swift.Sendable {
        /// The Amazon Resource Name (ARN) for the cell.
        /// This member is required.
        public var cellArn: Swift.String?
        /// The name of the cell.
        /// This member is required.
        public var cellName: Swift.String?
        /// A list of cell ARNs.
        /// This member is required.
        public var cells: [Swift.String]?
        /// The readiness scope for the cell, which can be a cell Amazon Resource Name (ARN) or a recovery group ARN. This is a list but currently can have only one element.
        /// This member is required.
        public var parentReadinessScopes: [Swift.String]?
        /// Tags on the resources.
        public var tags: [Swift.String: Swift.String]?

        public init(
            cellArn: Swift.String? = nil,
            cellName: Swift.String? = nil,
            cells: [Swift.String]? = nil,
            parentReadinessScopes: [Swift.String]? = nil,
            tags: [Swift.String: Swift.String]? = nil
        )
        {
            self.cellArn = cellArn
            self.cellName = cellName
            self.cells = cells
            self.parentReadinessScopes = parentReadinessScopes
            self.tags = tags
        }
    }
}

extension Route53RecoveryReadinessClientTypes {

    /// Readiness rule information, including the resource type, rule ID, and rule description.
    public struct ListRulesOutput: Swift.Sendable {
        /// The resource type that the readiness rule applies to.
        /// This member is required.
        public var resourceType: Swift.String?
        /// The description of a readiness rule.
        /// This member is required.
        public var ruleDescription: Swift.String?
        /// The ID for the readiness rule.
        /// This member is required.
        public var ruleId: Swift.String?

        public init(
            resourceType: Swift.String? = nil,
            ruleDescription: Swift.String? = nil,
            ruleId: Swift.String? = nil
        )
        {
            self.resourceType = resourceType
            self.ruleDescription = ruleDescription
            self.ruleId = ruleId
        }
    }
}

extension Route53RecoveryReadinessClientTypes {

    /// Information relating to readiness check status.
    public struct Message: Swift.Sendable {
        /// The text of a readiness check message.
        public var messageText: Swift.String?

        public init(
            messageText: Swift.String? = nil
        )
        {
            self.messageText = messageText
        }
    }
}

extension Route53RecoveryReadinessClientTypes {

    /// A readiness check.
    public struct ReadinessCheckOutput: Swift.Sendable {
        /// The Amazon Resource Name (ARN) associated with a readiness check.
        /// This member is required.
        public var readinessCheckArn: Swift.String?
        /// Name of a readiness check.
        public var readinessCheckName: Swift.String?
        /// Name of the resource set to be checked.
        /// This member is required.
        public var resourceSet: Swift.String?
        /// A collection of tags associated with a resource.
        public var tags: [Swift.String: Swift.String]?

        public init(
            readinessCheckArn: Swift.String? = nil,
            readinessCheckName: Swift.String? = nil,
            resourceSet: Swift.String? = nil,
            tags: [Swift.String: Swift.String]? = nil
        )
        {
            self.readinessCheckArn = readinessCheckArn
            self.readinessCheckName = readinessCheckName
            self.resourceSet = resourceSet
            self.tags = tags
        }
    }
}

extension Route53RecoveryReadinessClientTypes {

    /// The readiness status.
    public enum Readiness: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case notAuthorized
        case notReady
        case ready
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [Readiness] {
            return [
                .notAuthorized,
                .notReady,
                .ready,
                .unknown
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .notAuthorized: return "NOT_AUTHORIZED"
            case .notReady: return "NOT_READY"
            case .ready: return "READY"
            case .unknown: return "UNKNOWN"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Route53RecoveryReadinessClientTypes {

    /// Summary of all readiness check statuses in a recovery group, paginated in GetRecoveryGroupReadinessSummary and GetCellReadinessSummary.
    public struct ReadinessCheckSummary: Swift.Sendable {
        /// The readiness status of this readiness check.
        public var readiness: Route53RecoveryReadinessClientTypes.Readiness?
        /// The name of a readiness check.
        public var readinessCheckName: Swift.String?

        public init(
            readiness: Route53RecoveryReadinessClientTypes.Readiness? = nil,
            readinessCheckName: Swift.String? = nil
        )
        {
            self.readiness = readiness
            self.readinessCheckName = readinessCheckName
        }
    }
}

extension Route53RecoveryReadinessClientTypes {

    /// Recommendations that are provided to make an application more recovery resilient.
    public struct Recommendation: Swift.Sendable {
        /// Text of the recommendations that are provided to make an application more recovery resilient.
        /// This member is required.
        public var recommendationText: Swift.String?

        public init(
            recommendationText: Swift.String? = nil
        )
        {
            self.recommendationText = recommendationText
        }
    }
}

extension Route53RecoveryReadinessClientTypes {

    /// A representation of the application, typically containing multiple cells.
    public struct RecoveryGroupOutput: Swift.Sendable {
        /// A list of a cell's Amazon Resource Names (ARNs).
        /// This member is required.
        public var cells: [Swift.String]?
        /// The Amazon Resource Name (ARN) for the recovery group.
        /// This member is required.
        public var recoveryGroupArn: Swift.String?
        /// The name of the recovery group.
        /// This member is required.
        public var recoveryGroupName: Swift.String?
        /// The tags associated with the recovery group.
        public var tags: [Swift.String: Swift.String]?

        public init(
            cells: [Swift.String]? = nil,
            recoveryGroupArn: Swift.String? = nil,
            recoveryGroupName: Swift.String? = nil,
            tags: [Swift.String: Swift.String]? = nil
        )
        {
            self.cells = cells
            self.recoveryGroupArn = recoveryGroupArn
            self.recoveryGroupName = recoveryGroupName
            self.tags = tags
        }
    }
}

extension Route53RecoveryReadinessClientTypes {

    /// The Network Load Balancer resource that a DNS target resource points to.
    public struct NLBResource: Swift.Sendable {
        /// The Network Load Balancer resource Amazon Resource Name (ARN).
        public var arn: Swift.String?

        public init(
            arn: Swift.String? = nil
        )
        {
            self.arn = arn
        }
    }
}

extension Route53RecoveryReadinessClientTypes {

    /// The Route 53 resource that a DNS target resource record points to.
    public struct R53ResourceRecord: Swift.Sendable {
        /// The DNS target domain name.
        public var domainName: Swift.String?
        /// The Route 53 Resource Record Set ID.
        public var recordSetId: Swift.String?

        public init(
            domainName: Swift.String? = nil,
            recordSetId: Swift.String? = nil
        )
        {
            self.domainName = domainName
            self.recordSetId = recordSetId
        }
    }
}

extension Route53RecoveryReadinessClientTypes {

    /// The target resource that the Route 53 record points to.
    public struct TargetResource: Swift.Sendable {
        /// The Network Load Balancer Resource.
        public var nlbResource: Route53RecoveryReadinessClientTypes.NLBResource?
        /// The Route 53 resource.
        public var r53Resource: Route53RecoveryReadinessClientTypes.R53ResourceRecord?

        public init(
            nlbResource: Route53RecoveryReadinessClientTypes.NLBResource? = nil,
            r53Resource: Route53RecoveryReadinessClientTypes.R53ResourceRecord? = nil
        )
        {
            self.nlbResource = nlbResource
            self.r53Resource = r53Resource
        }
    }
}

extension Route53RecoveryReadinessClientTypes {

    /// A component for DNS/routing control readiness checks and architecture checks.
    public struct DNSTargetResource: Swift.Sendable {
        /// The domain name that acts as an ingress point to a portion of the customer application.
        public var domainName: Swift.String?
        /// The hosted zone Amazon Resource Name (ARN) that contains the DNS record with the provided name of the target resource.
        public var hostedZoneArn: Swift.String?
        /// The Route 53 record set ID that uniquely identifies a DNS record, given a name and a type.
        public var recordSetId: Swift.String?
        /// The type of DNS record of the target resource.
        public var recordType: Swift.String?
        /// The target resource of the DNS target resource.
        public var targetResource: Route53RecoveryReadinessClientTypes.TargetResource?

        public init(
            domainName: Swift.String? = nil,
            hostedZoneArn: Swift.String? = nil,
            recordSetId: Swift.String? = nil,
            recordType: Swift.String? = nil,
            targetResource: Route53RecoveryReadinessClientTypes.TargetResource? = nil
        )
        {
            self.domainName = domainName
            self.hostedZoneArn = hostedZoneArn
            self.recordSetId = recordSetId
            self.recordType = recordType
            self.targetResource = targetResource
        }
    }
}

extension Route53RecoveryReadinessClientTypes {

    /// The resource element of a resource set.
    public struct Resource: Swift.Sendable {
        /// The component identifier of the resource, generated when DNS target resource is used.
        public var componentId: Swift.String?
        /// The DNS target resource.
        public var dnsTargetResource: Route53RecoveryReadinessClientTypes.DNSTargetResource?
        /// A list of recovery group Amazon Resource Names (ARNs) and cell ARNs that this resource is contained within.
        public var readinessScopes: [Swift.String]?
        /// The Amazon Resource Name (ARN) of the Amazon Web Services resource.
        public var resourceArn: Swift.String?

        public init(
            componentId: Swift.String? = nil,
            dnsTargetResource: Route53RecoveryReadinessClientTypes.DNSTargetResource? = nil,
            readinessScopes: [Swift.String]? = nil,
            resourceArn: Swift.String? = nil
        )
        {
            self.componentId = componentId
            self.dnsTargetResource = dnsTargetResource
            self.readinessScopes = readinessScopes
            self.resourceArn = resourceArn
        }
    }
}

extension Route53RecoveryReadinessClientTypes {

    /// The result of a successful Resource request, with status for an individual resource.
    public struct ResourceResult: Swift.Sendable {
        /// The component id of the resource.
        public var componentId: Swift.String?
        /// The time (UTC) that the resource was last checked for readiness, in ISO-8601 format.
        /// This member is required.
        public var lastCheckedTimestamp: Foundation.Date?
        /// The readiness of a resource.
        /// This member is required.
        public var readiness: Route53RecoveryReadinessClientTypes.Readiness?
        /// The Amazon Resource Name (ARN) of the resource.
        public var resourceArn: Swift.String?

        public init(
            componentId: Swift.String? = nil,
            lastCheckedTimestamp: Foundation.Date? = nil,
            readiness: Route53RecoveryReadinessClientTypes.Readiness? = nil,
            resourceArn: Swift.String? = nil
        )
        {
            self.componentId = componentId
            self.lastCheckedTimestamp = lastCheckedTimestamp
            self.readiness = readiness
            self.resourceArn = resourceArn
        }
    }
}

extension Route53RecoveryReadinessClientTypes {

    /// A collection of resources of the same type.
    public struct ResourceSetOutput: Swift.Sendable {
        /// The Amazon Resource Name (ARN) for the resource set.
        /// This member is required.
        public var resourceSetArn: Swift.String?
        /// The name of the resource set.
        /// This member is required.
        public var resourceSetName: Swift.String?
        /// The resource type of the resources in the resource set. Enter one of the following values for resource type: AWS::ApiGateway::Stage, AWS::ApiGatewayV2::Stage, AWS::AutoScaling::AutoScalingGroup, AWS::CloudWatch::Alarm, AWS::EC2::CustomerGateway, AWS::DynamoDB::Table, AWS::EC2::Volume, AWS::ElasticLoadBalancing::LoadBalancer, AWS::ElasticLoadBalancingV2::LoadBalancer, AWS::Lambda::Function, AWS::MSK::Cluster, AWS::RDS::DBCluster, AWS::Route53::HealthCheck, AWS::SQS::Queue, AWS::SNS::Topic, AWS::SNS::Subscription, AWS::EC2::VPC, AWS::EC2::VPNConnection, AWS::EC2::VPNGateway, AWS::Route53RecoveryReadiness::DNSTargetResource
        /// This member is required.
        public var resourceSetType: Swift.String?
        /// A list of resource objects.
        /// This member is required.
        public var resources: [Route53RecoveryReadinessClientTypes.Resource]?
        /// A collection of tags associated with a resource.
        public var tags: [Swift.String: Swift.String]?

        public init(
            resourceSetArn: Swift.String? = nil,
            resourceSetName: Swift.String? = nil,
            resourceSetType: Swift.String? = nil,
            resources: [Route53RecoveryReadinessClientTypes.Resource]? = nil,
            tags: [Swift.String: Swift.String]? = nil
        )
        {
            self.resourceSetArn = resourceSetArn
            self.resourceSetName = resourceSetName
            self.resourceSetType = resourceSetType
            self.resources = resources
            self.tags = tags
        }
    }
}

extension Route53RecoveryReadinessClientTypes {

    /// The result of a successful Rule request, with status for an individual rule.
    public struct RuleResult: Swift.Sendable {
        /// The time the resource was last checked for readiness, in ISO-8601 format, UTC.
        /// This member is required.
        public var lastCheckedTimestamp: Foundation.Date?
        /// Details about the resource's readiness.
        /// This member is required.
        public var messages: [Route53RecoveryReadinessClientTypes.Message]?
        /// The readiness at rule level.
        /// This member is required.
        public var readiness: Route53RecoveryReadinessClientTypes.Readiness?
        /// The identifier of the rule.
        /// This member is required.
        public var ruleId: Swift.String?

        public init(
            lastCheckedTimestamp: Foundation.Date? = nil,
            messages: [Route53RecoveryReadinessClientTypes.Message]? = nil,
            readiness: Route53RecoveryReadinessClientTypes.Readiness? = nil,
            ruleId: Swift.String? = nil
        )
        {
            self.lastCheckedTimestamp = lastCheckedTimestamp
            self.messages = messages
            self.readiness = readiness
            self.ruleId = ruleId
        }
    }
}

/// User does not have sufficient access to perform this action.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Updating or deleting a resource can cause an inconsistent state.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// An unexpected error occurred.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Request was denied due to request throttling.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The input fails to satisfy the constraints specified by an AWS service.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CreateCellInput: Swift.Sendable {
    /// The name of the cell to create.
    /// This member is required.
    public var cellName: Swift.String?
    /// A list of cell Amazon Resource Names (ARNs) contained within this cell, for use in nested cells. For example, Availability Zones within specific Amazon Web Services Regions.
    public var cells: [Swift.String]?
    /// A collection of tags associated with a resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        cellName: Swift.String? = nil,
        cells: [Swift.String]? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.cellName = cellName
        self.cells = cells
        self.tags = tags
    }
}

public struct CreateCellOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) for the cell.
    public var cellArn: Swift.String?
    /// The name of the cell.
    public var cellName: Swift.String?
    /// A list of cell ARNs.
    public var cells: [Swift.String]?
    /// The readiness scope for the cell, which can be a cell Amazon Resource Name (ARN) or a recovery group ARN. This is a list but currently can have only one element.
    public var parentReadinessScopes: [Swift.String]?
    /// Tags on the resources.
    public var tags: [Swift.String: Swift.String]?

    public init(
        cellArn: Swift.String? = nil,
        cellName: Swift.String? = nil,
        cells: [Swift.String]? = nil,
        parentReadinessScopes: [Swift.String]? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.cellArn = cellArn
        self.cellName = cellName
        self.cells = cells
        self.parentReadinessScopes = parentReadinessScopes
        self.tags = tags
    }
}

public struct CreateCrossAccountAuthorizationInput: Swift.Sendable {
    /// The cross-account authorization.
    /// This member is required.
    public var crossAccountAuthorization: Swift.String?

    public init(
        crossAccountAuthorization: Swift.String? = nil
    )
    {
        self.crossAccountAuthorization = crossAccountAuthorization
    }
}

public struct CreateCrossAccountAuthorizationOutput: Swift.Sendable {
    /// The cross-account authorization.
    public var crossAccountAuthorization: Swift.String?

    public init(
        crossAccountAuthorization: Swift.String? = nil
    )
    {
        self.crossAccountAuthorization = crossAccountAuthorization
    }
}

public struct CreateReadinessCheckInput: Swift.Sendable {
    /// The name of the readiness check to create.
    /// This member is required.
    public var readinessCheckName: Swift.String?
    /// The name of the resource set to check.
    /// This member is required.
    public var resourceSetName: Swift.String?
    /// A collection of tags associated with a resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        readinessCheckName: Swift.String? = nil,
        resourceSetName: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.readinessCheckName = readinessCheckName
        self.resourceSetName = resourceSetName
        self.tags = tags
    }
}

public struct CreateReadinessCheckOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) associated with a readiness check.
    public var readinessCheckArn: Swift.String?
    /// Name of a readiness check.
    public var readinessCheckName: Swift.String?
    /// Name of the resource set to be checked.
    public var resourceSet: Swift.String?
    /// A collection of tags associated with a resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        readinessCheckArn: Swift.String? = nil,
        readinessCheckName: Swift.String? = nil,
        resourceSet: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.readinessCheckArn = readinessCheckArn
        self.readinessCheckName = readinessCheckName
        self.resourceSet = resourceSet
        self.tags = tags
    }
}

public struct CreateRecoveryGroupInput: Swift.Sendable {
    /// A list of the cell Amazon Resource Names (ARNs) in the recovery group.
    public var cells: [Swift.String]?
    /// The name of the recovery group to create.
    /// This member is required.
    public var recoveryGroupName: Swift.String?
    /// A collection of tags associated with a resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        cells: [Swift.String]? = nil,
        recoveryGroupName: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.cells = cells
        self.recoveryGroupName = recoveryGroupName
        self.tags = tags
    }
}

public struct CreateRecoveryGroupOutput: Swift.Sendable {
    /// A list of a cell's Amazon Resource Names (ARNs).
    public var cells: [Swift.String]?
    /// The Amazon Resource Name (ARN) for the recovery group.
    public var recoveryGroupArn: Swift.String?
    /// The name of the recovery group.
    public var recoveryGroupName: Swift.String?
    /// The tags associated with the recovery group.
    public var tags: [Swift.String: Swift.String]?

    public init(
        cells: [Swift.String]? = nil,
        recoveryGroupArn: Swift.String? = nil,
        recoveryGroupName: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.cells = cells
        self.recoveryGroupArn = recoveryGroupArn
        self.recoveryGroupName = recoveryGroupName
        self.tags = tags
    }
}

public struct CreateResourceSetInput: Swift.Sendable {
    /// The name of the resource set to create.
    /// This member is required.
    public var resourceSetName: Swift.String?
    /// The resource type of the resources in the resource set. Enter one of the following values for resource type: AWS::ApiGateway::Stage, AWS::ApiGatewayV2::Stage, AWS::AutoScaling::AutoScalingGroup, AWS::CloudWatch::Alarm, AWS::EC2::CustomerGateway, AWS::DynamoDB::Table, AWS::EC2::Volume, AWS::ElasticLoadBalancing::LoadBalancer, AWS::ElasticLoadBalancingV2::LoadBalancer, AWS::Lambda::Function, AWS::MSK::Cluster, AWS::RDS::DBCluster, AWS::Route53::HealthCheck, AWS::SQS::Queue, AWS::SNS::Topic, AWS::SNS::Subscription, AWS::EC2::VPC, AWS::EC2::VPNConnection, AWS::EC2::VPNGateway, AWS::Route53RecoveryReadiness::DNSTargetResource
    /// This member is required.
    public var resourceSetType: Swift.String?
    /// A list of resource objects in the resource set.
    /// This member is required.
    public var resources: [Route53RecoveryReadinessClientTypes.Resource]?
    /// A tag to associate with the parameters for a resource set.
    public var tags: [Swift.String: Swift.String]?

    public init(
        resourceSetName: Swift.String? = nil,
        resourceSetType: Swift.String? = nil,
        resources: [Route53RecoveryReadinessClientTypes.Resource]? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.resourceSetName = resourceSetName
        self.resourceSetType = resourceSetType
        self.resources = resources
        self.tags = tags
    }
}

public struct CreateResourceSetOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) for the resource set.
    public var resourceSetArn: Swift.String?
    /// The name of the resource set.
    public var resourceSetName: Swift.String?
    /// The resource type of the resources in the resource set. Enter one of the following values for resource type: AWS::ApiGateway::Stage, AWS::ApiGatewayV2::Stage, AWS::AutoScaling::AutoScalingGroup, AWS::CloudWatch::Alarm, AWS::EC2::CustomerGateway, AWS::DynamoDB::Table, AWS::EC2::Volume, AWS::ElasticLoadBalancing::LoadBalancer, AWS::ElasticLoadBalancingV2::LoadBalancer, AWS::Lambda::Function, AWS::MSK::Cluster, AWS::RDS::DBCluster, AWS::Route53::HealthCheck, AWS::SQS::Queue, AWS::SNS::Topic, AWS::SNS::Subscription, AWS::EC2::VPC, AWS::EC2::VPNConnection, AWS::EC2::VPNGateway, AWS::Route53RecoveryReadiness::DNSTargetResource
    public var resourceSetType: Swift.String?
    /// A list of resource objects.
    public var resources: [Route53RecoveryReadinessClientTypes.Resource]?
    /// A collection of tags associated with a resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        resourceSetArn: Swift.String? = nil,
        resourceSetName: Swift.String? = nil,
        resourceSetType: Swift.String? = nil,
        resources: [Route53RecoveryReadinessClientTypes.Resource]? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.resourceSetArn = resourceSetArn
        self.resourceSetName = resourceSetName
        self.resourceSetType = resourceSetType
        self.resources = resources
        self.tags = tags
    }
}

/// The requested resource does not exist.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteCellInput: Swift.Sendable {
    /// The name of the cell.
    /// This member is required.
    public var cellName: Swift.String?

    public init(
        cellName: Swift.String? = nil
    )
    {
        self.cellName = cellName
    }
}

public struct DeleteCrossAccountAuthorizationInput: Swift.Sendable {
    /// The cross-account authorization.
    /// This member is required.
    public var crossAccountAuthorization: Swift.String?

    public init(
        crossAccountAuthorization: Swift.String? = nil
    )
    {
        self.crossAccountAuthorization = crossAccountAuthorization
    }
}

public struct DeleteCrossAccountAuthorizationOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteReadinessCheckInput: Swift.Sendable {
    /// Name of a readiness check.
    /// This member is required.
    public var readinessCheckName: Swift.String?

    public init(
        readinessCheckName: Swift.String? = nil
    )
    {
        self.readinessCheckName = readinessCheckName
    }
}

public struct DeleteRecoveryGroupInput: Swift.Sendable {
    /// The name of a recovery group.
    /// This member is required.
    public var recoveryGroupName: Swift.String?

    public init(
        recoveryGroupName: Swift.String? = nil
    )
    {
        self.recoveryGroupName = recoveryGroupName
    }
}

public struct DeleteResourceSetInput: Swift.Sendable {
    /// Name of a resource set.
    /// This member is required.
    public var resourceSetName: Swift.String?

    public init(
        resourceSetName: Swift.String? = nil
    )
    {
        self.resourceSetName = resourceSetName
    }
}

public struct GetArchitectureRecommendationsInput: Swift.Sendable {
    /// The number of objects that you want to return with this call.
    public var maxResults: Swift.Int?
    /// The token that identifies which batch of results you want to see.
    public var nextToken: Swift.String?
    /// The name of a recovery group.
    /// This member is required.
    public var recoveryGroupName: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        recoveryGroupName: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.recoveryGroupName = recoveryGroupName
    }
}

public struct GetArchitectureRecommendationsOutput: Swift.Sendable {
    /// The time that a recovery group was last assessed for recommendations, in UTC ISO-8601 format.
    public var lastAuditTimestamp: Foundation.Date?
    /// The token that identifies which batch of results you want to see.
    public var nextToken: Swift.String?
    /// A list of the recommendations for the customer's application.
    public var recommendations: [Route53RecoveryReadinessClientTypes.Recommendation]?

    public init(
        lastAuditTimestamp: Foundation.Date? = nil,
        nextToken: Swift.String? = nil,
        recommendations: [Route53RecoveryReadinessClientTypes.Recommendation]? = nil
    )
    {
        self.lastAuditTimestamp = lastAuditTimestamp
        self.nextToken = nextToken
        self.recommendations = recommendations
    }
}

public struct GetCellInput: Swift.Sendable {
    /// The name of the cell.
    /// This member is required.
    public var cellName: Swift.String?

    public init(
        cellName: Swift.String? = nil
    )
    {
        self.cellName = cellName
    }
}

public struct GetCellOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) for the cell.
    public var cellArn: Swift.String?
    /// The name of the cell.
    public var cellName: Swift.String?
    /// A list of cell ARNs.
    public var cells: [Swift.String]?
    /// The readiness scope for the cell, which can be a cell Amazon Resource Name (ARN) or a recovery group ARN. This is a list but currently can have only one element.
    public var parentReadinessScopes: [Swift.String]?
    /// Tags on the resources.
    public var tags: [Swift.String: Swift.String]?

    public init(
        cellArn: Swift.String? = nil,
        cellName: Swift.String? = nil,
        cells: [Swift.String]? = nil,
        parentReadinessScopes: [Swift.String]? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.cellArn = cellArn
        self.cellName = cellName
        self.cells = cells
        self.parentReadinessScopes = parentReadinessScopes
        self.tags = tags
    }
}

public struct GetCellReadinessSummaryInput: Swift.Sendable {
    /// The name of the cell.
    /// This member is required.
    public var cellName: Swift.String?
    /// The number of objects that you want to return with this call.
    public var maxResults: Swift.Int?
    /// The token that identifies which batch of results you want to see.
    public var nextToken: Swift.String?

    public init(
        cellName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.cellName = cellName
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct GetCellReadinessSummaryOutput: Swift.Sendable {
    /// The token that identifies which batch of results you want to see.
    public var nextToken: Swift.String?
    /// The readiness at a cell level.
    public var readiness: Route53RecoveryReadinessClientTypes.Readiness?
    /// Summaries for the readiness checks that make up the cell.
    public var readinessChecks: [Route53RecoveryReadinessClientTypes.ReadinessCheckSummary]?

    public init(
        nextToken: Swift.String? = nil,
        readiness: Route53RecoveryReadinessClientTypes.Readiness? = nil,
        readinessChecks: [Route53RecoveryReadinessClientTypes.ReadinessCheckSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.readiness = readiness
        self.readinessChecks = readinessChecks
    }
}

public struct GetReadinessCheckInput: Swift.Sendable {
    /// Name of a readiness check.
    /// This member is required.
    public var readinessCheckName: Swift.String?

    public init(
        readinessCheckName: Swift.String? = nil
    )
    {
        self.readinessCheckName = readinessCheckName
    }
}

public struct GetReadinessCheckOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) associated with a readiness check.
    public var readinessCheckArn: Swift.String?
    /// Name of a readiness check.
    public var readinessCheckName: Swift.String?
    /// Name of the resource set to be checked.
    public var resourceSet: Swift.String?
    /// A collection of tags associated with a resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        readinessCheckArn: Swift.String? = nil,
        readinessCheckName: Swift.String? = nil,
        resourceSet: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.readinessCheckArn = readinessCheckArn
        self.readinessCheckName = readinessCheckName
        self.resourceSet = resourceSet
        self.tags = tags
    }
}

public struct GetReadinessCheckResourceStatusInput: Swift.Sendable {
    /// The number of objects that you want to return with this call.
    public var maxResults: Swift.Int?
    /// The token that identifies which batch of results you want to see.
    public var nextToken: Swift.String?
    /// Name of a readiness check.
    /// This member is required.
    public var readinessCheckName: Swift.String?
    /// The resource identifier, which is the Amazon Resource Name (ARN) or the identifier generated for the resource by Application Recovery Controller (for example, for a DNS target resource).
    /// This member is required.
    public var resourceIdentifier: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        readinessCheckName: Swift.String? = nil,
        resourceIdentifier: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.readinessCheckName = readinessCheckName
        self.resourceIdentifier = resourceIdentifier
    }
}

public struct GetReadinessCheckResourceStatusOutput: Swift.Sendable {
    /// The token that identifies which batch of results you want to see.
    public var nextToken: Swift.String?
    /// The readiness at a rule level.
    public var readiness: Route53RecoveryReadinessClientTypes.Readiness?
    /// Details of the rule's results.
    public var rules: [Route53RecoveryReadinessClientTypes.RuleResult]?

    public init(
        nextToken: Swift.String? = nil,
        readiness: Route53RecoveryReadinessClientTypes.Readiness? = nil,
        rules: [Route53RecoveryReadinessClientTypes.RuleResult]? = nil
    )
    {
        self.nextToken = nextToken
        self.readiness = readiness
        self.rules = rules
    }
}

public struct GetReadinessCheckStatusInput: Swift.Sendable {
    /// The number of objects that you want to return with this call.
    public var maxResults: Swift.Int?
    /// The token that identifies which batch of results you want to see.
    public var nextToken: Swift.String?
    /// Name of a readiness check.
    /// This member is required.
    public var readinessCheckName: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        readinessCheckName: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.readinessCheckName = readinessCheckName
    }
}

public struct GetReadinessCheckStatusOutput: Swift.Sendable {
    /// Top level messages for readiness check status
    public var messages: [Route53RecoveryReadinessClientTypes.Message]?
    /// The token that identifies which batch of results you want to see.
    public var nextToken: Swift.String?
    /// The readiness at rule level.
    public var readiness: Route53RecoveryReadinessClientTypes.Readiness?
    /// Summary of the readiness of resources.
    public var resources: [Route53RecoveryReadinessClientTypes.ResourceResult]?

    public init(
        messages: [Route53RecoveryReadinessClientTypes.Message]? = nil,
        nextToken: Swift.String? = nil,
        readiness: Route53RecoveryReadinessClientTypes.Readiness? = nil,
        resources: [Route53RecoveryReadinessClientTypes.ResourceResult]? = nil
    )
    {
        self.messages = messages
        self.nextToken = nextToken
        self.readiness = readiness
        self.resources = resources
    }
}

public struct GetRecoveryGroupInput: Swift.Sendable {
    /// The name of a recovery group.
    /// This member is required.
    public var recoveryGroupName: Swift.String?

    public init(
        recoveryGroupName: Swift.String? = nil
    )
    {
        self.recoveryGroupName = recoveryGroupName
    }
}

public struct GetRecoveryGroupOutput: Swift.Sendable {
    /// A list of a cell's Amazon Resource Names (ARNs).
    public var cells: [Swift.String]?
    /// The Amazon Resource Name (ARN) for the recovery group.
    public var recoveryGroupArn: Swift.String?
    /// The name of the recovery group.
    public var recoveryGroupName: Swift.String?
    /// The tags associated with the recovery group.
    public var tags: [Swift.String: Swift.String]?

    public init(
        cells: [Swift.String]? = nil,
        recoveryGroupArn: Swift.String? = nil,
        recoveryGroupName: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.cells = cells
        self.recoveryGroupArn = recoveryGroupArn
        self.recoveryGroupName = recoveryGroupName
        self.tags = tags
    }
}

public struct GetRecoveryGroupReadinessSummaryInput: Swift.Sendable {
    /// The number of objects that you want to return with this call.
    public var maxResults: Swift.Int?
    /// The token that identifies which batch of results you want to see.
    public var nextToken: Swift.String?
    /// The name of a recovery group.
    /// This member is required.
    public var recoveryGroupName: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        recoveryGroupName: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.recoveryGroupName = recoveryGroupName
    }
}

public struct GetRecoveryGroupReadinessSummaryOutput: Swift.Sendable {
    /// The token that identifies which batch of results you want to see.
    public var nextToken: Swift.String?
    /// The readiness status at a recovery group level.
    public var readiness: Route53RecoveryReadinessClientTypes.Readiness?
    /// Summaries of the readiness checks for the recovery group.
    public var readinessChecks: [Route53RecoveryReadinessClientTypes.ReadinessCheckSummary]?

    public init(
        nextToken: Swift.String? = nil,
        readiness: Route53RecoveryReadinessClientTypes.Readiness? = nil,
        readinessChecks: [Route53RecoveryReadinessClientTypes.ReadinessCheckSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.readiness = readiness
        self.readinessChecks = readinessChecks
    }
}

public struct GetResourceSetInput: Swift.Sendable {
    /// Name of a resource set.
    /// This member is required.
    public var resourceSetName: Swift.String?

    public init(
        resourceSetName: Swift.String? = nil
    )
    {
        self.resourceSetName = resourceSetName
    }
}

public struct GetResourceSetOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) for the resource set.
    public var resourceSetArn: Swift.String?
    /// The name of the resource set.
    public var resourceSetName: Swift.String?
    /// The resource type of the resources in the resource set. Enter one of the following values for resource type: AWS::ApiGateway::Stage, AWS::ApiGatewayV2::Stage, AWS::AutoScaling::AutoScalingGroup, AWS::CloudWatch::Alarm, AWS::EC2::CustomerGateway, AWS::DynamoDB::Table, AWS::EC2::Volume, AWS::ElasticLoadBalancing::LoadBalancer, AWS::ElasticLoadBalancingV2::LoadBalancer, AWS::Lambda::Function, AWS::MSK::Cluster, AWS::RDS::DBCluster, AWS::Route53::HealthCheck, AWS::SQS::Queue, AWS::SNS::Topic, AWS::SNS::Subscription, AWS::EC2::VPC, AWS::EC2::VPNConnection, AWS::EC2::VPNGateway, AWS::Route53RecoveryReadiness::DNSTargetResource
    public var resourceSetType: Swift.String?
    /// A list of resource objects.
    public var resources: [Route53RecoveryReadinessClientTypes.Resource]?
    /// A collection of tags associated with a resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        resourceSetArn: Swift.String? = nil,
        resourceSetName: Swift.String? = nil,
        resourceSetType: Swift.String? = nil,
        resources: [Route53RecoveryReadinessClientTypes.Resource]? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.resourceSetArn = resourceSetArn
        self.resourceSetName = resourceSetName
        self.resourceSetType = resourceSetType
        self.resources = resources
        self.tags = tags
    }
}

public struct ListCellsInput: Swift.Sendable {
    /// The number of objects that you want to return with this call.
    public var maxResults: Swift.Int?
    /// The token that identifies which batch of results you want to see.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListCellsOutput: Swift.Sendable {
    /// A list of cells.
    public var cells: [Route53RecoveryReadinessClientTypes.CellOutput]?
    /// The token that identifies which batch of results you want to see.
    public var nextToken: Swift.String?

    public init(
        cells: [Route53RecoveryReadinessClientTypes.CellOutput]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.cells = cells
        self.nextToken = nextToken
    }
}

public struct ListCrossAccountAuthorizationsInput: Swift.Sendable {
    /// The number of objects that you want to return with this call.
    public var maxResults: Swift.Int?
    /// The token that identifies which batch of results you want to see.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListCrossAccountAuthorizationsOutput: Swift.Sendable {
    /// A list of cross-account authorizations.
    public var crossAccountAuthorizations: [Swift.String]?
    /// The token that identifies which batch of results you want to see.
    public var nextToken: Swift.String?

    public init(
        crossAccountAuthorizations: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.crossAccountAuthorizations = crossAccountAuthorizations
        self.nextToken = nextToken
    }
}

public struct ListReadinessChecksInput: Swift.Sendable {
    /// The number of objects that you want to return with this call.
    public var maxResults: Swift.Int?
    /// The token that identifies which batch of results you want to see.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListReadinessChecksOutput: Swift.Sendable {
    /// The token that identifies which batch of results you want to see.
    public var nextToken: Swift.String?
    /// A list of readiness checks associated with the account.
    public var readinessChecks: [Route53RecoveryReadinessClientTypes.ReadinessCheckOutput]?

    public init(
        nextToken: Swift.String? = nil,
        readinessChecks: [Route53RecoveryReadinessClientTypes.ReadinessCheckOutput]? = nil
    )
    {
        self.nextToken = nextToken
        self.readinessChecks = readinessChecks
    }
}

public struct ListRecoveryGroupsInput: Swift.Sendable {
    /// The number of objects that you want to return with this call.
    public var maxResults: Swift.Int?
    /// The token that identifies which batch of results you want to see.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListRecoveryGroupsOutput: Swift.Sendable {
    /// The token that identifies which batch of results you want to see.
    public var nextToken: Swift.String?
    /// A list of recovery groups.
    public var recoveryGroups: [Route53RecoveryReadinessClientTypes.RecoveryGroupOutput]?

    public init(
        nextToken: Swift.String? = nil,
        recoveryGroups: [Route53RecoveryReadinessClientTypes.RecoveryGroupOutput]? = nil
    )
    {
        self.nextToken = nextToken
        self.recoveryGroups = recoveryGroups
    }
}

public struct ListResourceSetsInput: Swift.Sendable {
    /// The number of objects that you want to return with this call.
    public var maxResults: Swift.Int?
    /// The token that identifies which batch of results you want to see.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListResourceSetsOutput: Swift.Sendable {
    /// The token that identifies which batch of results you want to see.
    public var nextToken: Swift.String?
    /// A list of resource sets associated with the account.
    public var resourceSets: [Route53RecoveryReadinessClientTypes.ResourceSetOutput]?

    public init(
        nextToken: Swift.String? = nil,
        resourceSets: [Route53RecoveryReadinessClientTypes.ResourceSetOutput]? = nil
    )
    {
        self.nextToken = nextToken
        self.resourceSets = resourceSets
    }
}

public struct ListRulesInput: Swift.Sendable {
    /// The number of objects that you want to return with this call.
    public var maxResults: Swift.Int?
    /// The token that identifies which batch of results you want to see.
    public var nextToken: Swift.String?
    /// The resource type that a readiness rule applies to.
    public var resourceType: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceType: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceType = resourceType
    }
}

public struct ListRulesOutput: Swift.Sendable {
    /// The token that identifies which batch of results you want to see.
    public var nextToken: Swift.String?
    /// A list of readiness rules for a specific resource type.
    public var rules: [Route53RecoveryReadinessClientTypes.ListRulesOutput]?

    public init(
        nextToken: Swift.String? = nil,
        rules: [Route53RecoveryReadinessClientTypes.ListRulesOutput]? = nil
    )
    {
        self.nextToken = nextToken
        self.rules = rules
    }
}

public struct ListTagsForResourcesInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) for a resource.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct ListTagsForResourcesOutput: Swift.Sendable {
    ///
    public var tags: [Swift.String: Swift.String]?

    public init(
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

public struct TagResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) for a resource.
    /// This member is required.
    public var resourceArn: Swift.String?
    ///
    /// This member is required.
    public var tags: [Swift.String: Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

public struct TagResourceOutput: Swift.Sendable {

    public init() { }
}

public struct UntagResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) for a resource.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The keys for tags you add to resources.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

public struct UpdateCellInput: Swift.Sendable {
    /// The name of the cell.
    /// This member is required.
    public var cellName: Swift.String?
    /// A list of cell Amazon Resource Names (ARNs), which completely replaces the previous list.
    /// This member is required.
    public var cells: [Swift.String]?

    public init(
        cellName: Swift.String? = nil,
        cells: [Swift.String]? = nil
    )
    {
        self.cellName = cellName
        self.cells = cells
    }
}

public struct UpdateCellOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) for the cell.
    public var cellArn: Swift.String?
    /// The name of the cell.
    public var cellName: Swift.String?
    /// A list of cell ARNs.
    public var cells: [Swift.String]?
    /// The readiness scope for the cell, which can be a cell Amazon Resource Name (ARN) or a recovery group ARN. This is a list but currently can have only one element.
    public var parentReadinessScopes: [Swift.String]?
    /// Tags on the resources.
    public var tags: [Swift.String: Swift.String]?

    public init(
        cellArn: Swift.String? = nil,
        cellName: Swift.String? = nil,
        cells: [Swift.String]? = nil,
        parentReadinessScopes: [Swift.String]? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.cellArn = cellArn
        self.cellName = cellName
        self.cells = cells
        self.parentReadinessScopes = parentReadinessScopes
        self.tags = tags
    }
}

/// Name of a readiness check to describe.
public struct UpdateReadinessCheckInput: Swift.Sendable {
    /// Name of a readiness check.
    /// This member is required.
    public var readinessCheckName: Swift.String?
    /// The name of the resource set to be checked.
    /// This member is required.
    public var resourceSetName: Swift.String?

    public init(
        readinessCheckName: Swift.String? = nil,
        resourceSetName: Swift.String? = nil
    )
    {
        self.readinessCheckName = readinessCheckName
        self.resourceSetName = resourceSetName
    }
}

public struct UpdateReadinessCheckOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) associated with a readiness check.
    public var readinessCheckArn: Swift.String?
    /// Name of a readiness check.
    public var readinessCheckName: Swift.String?
    /// Name of the resource set to be checked.
    public var resourceSet: Swift.String?
    /// A collection of tags associated with a resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        readinessCheckArn: Swift.String? = nil,
        readinessCheckName: Swift.String? = nil,
        resourceSet: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.readinessCheckArn = readinessCheckArn
        self.readinessCheckName = readinessCheckName
        self.resourceSet = resourceSet
        self.tags = tags
    }
}

/// Name of a recovery group.
public struct UpdateRecoveryGroupInput: Swift.Sendable {
    /// A list of cell Amazon Resource Names (ARNs). This list completely replaces the previous list.
    /// This member is required.
    public var cells: [Swift.String]?
    /// The name of a recovery group.
    /// This member is required.
    public var recoveryGroupName: Swift.String?

    public init(
        cells: [Swift.String]? = nil,
        recoveryGroupName: Swift.String? = nil
    )
    {
        self.cells = cells
        self.recoveryGroupName = recoveryGroupName
    }
}

public struct UpdateRecoveryGroupOutput: Swift.Sendable {
    /// A list of a cell's Amazon Resource Names (ARNs).
    public var cells: [Swift.String]?
    /// The Amazon Resource Name (ARN) for the recovery group.
    public var recoveryGroupArn: Swift.String?
    /// The name of the recovery group.
    public var recoveryGroupName: Swift.String?
    /// The tags associated with the recovery group.
    public var tags: [Swift.String: Swift.String]?

    public init(
        cells: [Swift.String]? = nil,
        recoveryGroupArn: Swift.String? = nil,
        recoveryGroupName: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.cells = cells
        self.recoveryGroupArn = recoveryGroupArn
        self.recoveryGroupName = recoveryGroupName
        self.tags = tags
    }
}

/// Name of a resource set.
public struct UpdateResourceSetInput: Swift.Sendable {
    /// Name of a resource set.
    /// This member is required.
    public var resourceSetName: Swift.String?
    /// The resource type of the resources in the resource set. Enter one of the following values for resource type: AWS::ApiGateway::Stage, AWS::ApiGatewayV2::Stage, AWS::AutoScaling::AutoScalingGroup, AWS::CloudWatch::Alarm, AWS::EC2::CustomerGateway, AWS::DynamoDB::Table, AWS::EC2::Volume, AWS::ElasticLoadBalancing::LoadBalancer, AWS::ElasticLoadBalancingV2::LoadBalancer, AWS::Lambda::Function, AWS::MSK::Cluster, AWS::RDS::DBCluster, AWS::Route53::HealthCheck, AWS::SQS::Queue, AWS::SNS::Topic, AWS::SNS::Subscription, AWS::EC2::VPC, AWS::EC2::VPNConnection, AWS::EC2::VPNGateway, AWS::Route53RecoveryReadiness::DNSTargetResource
    /// This member is required.
    public var resourceSetType: Swift.String?
    /// A list of resource objects.
    /// This member is required.
    public var resources: [Route53RecoveryReadinessClientTypes.Resource]?

    public init(
        resourceSetName: Swift.String? = nil,
        resourceSetType: Swift.String? = nil,
        resources: [Route53RecoveryReadinessClientTypes.Resource]? = nil
    )
    {
        self.resourceSetName = resourceSetName
        self.resourceSetType = resourceSetType
        self.resources = resources
    }
}

public struct UpdateResourceSetOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) for the resource set.
    public var resourceSetArn: Swift.String?
    /// The name of the resource set.
    public var resourceSetName: Swift.String?
    /// The resource type of the resources in the resource set. Enter one of the following values for resource type: AWS::ApiGateway::Stage, AWS::ApiGatewayV2::Stage, AWS::AutoScaling::AutoScalingGroup, AWS::CloudWatch::Alarm, AWS::EC2::CustomerGateway, AWS::DynamoDB::Table, AWS::EC2::Volume, AWS::ElasticLoadBalancing::LoadBalancer, AWS::ElasticLoadBalancingV2::LoadBalancer, AWS::Lambda::Function, AWS::MSK::Cluster, AWS::RDS::DBCluster, AWS::Route53::HealthCheck, AWS::SQS::Queue, AWS::SNS::Topic, AWS::SNS::Subscription, AWS::EC2::VPC, AWS::EC2::VPNConnection, AWS::EC2::VPNGateway, AWS::Route53RecoveryReadiness::DNSTargetResource
    public var resourceSetType: Swift.String?
    /// A list of resource objects.
    public var resources: [Route53RecoveryReadinessClientTypes.Resource]?
    /// A collection of tags associated with a resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        resourceSetArn: Swift.String? = nil,
        resourceSetName: Swift.String? = nil,
        resourceSetType: Swift.String? = nil,
        resources: [Route53RecoveryReadinessClientTypes.Resource]? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.resourceSetArn = resourceSetArn
        self.resourceSetName = resourceSetName
        self.resourceSetType = resourceSetType
        self.resources = resources
        self.tags = tags
    }
}

extension CreateCellInput {

    static func urlPathProvider(_ value: CreateCellInput) -> Swift.String? {
        return "/cells"
    }
}

extension CreateCrossAccountAuthorizationInput {

    static func urlPathProvider(_ value: CreateCrossAccountAuthorizationInput) -> Swift.String? {
        return "/crossaccountauthorizations"
    }
}

extension CreateReadinessCheckInput {

    static func urlPathProvider(_ value: CreateReadinessCheckInput) -> Swift.String? {
        return "/readinesschecks"
    }
}

extension CreateRecoveryGroupInput {

    static func urlPathProvider(_ value: CreateRecoveryGroupInput) -> Swift.String? {
        return "/recoverygroups"
    }
}

extension CreateResourceSetInput {

    static func urlPathProvider(_ value: CreateResourceSetInput) -> Swift.String? {
        return "/resourcesets"
    }
}

extension DeleteCellInput {

    static func urlPathProvider(_ value: DeleteCellInput) -> Swift.String? {
        guard let cellName = value.cellName else {
            return nil
        }
        return "/cells/\(cellName.urlPercentEncoding())"
    }
}

extension DeleteCrossAccountAuthorizationInput {

    static func urlPathProvider(_ value: DeleteCrossAccountAuthorizationInput) -> Swift.String? {
        guard let crossAccountAuthorization = value.crossAccountAuthorization else {
            return nil
        }
        return "/crossaccountauthorizations/\(crossAccountAuthorization.urlPercentEncoding())"
    }
}

extension DeleteReadinessCheckInput {

    static func urlPathProvider(_ value: DeleteReadinessCheckInput) -> Swift.String? {
        guard let readinessCheckName = value.readinessCheckName else {
            return nil
        }
        return "/readinesschecks/\(readinessCheckName.urlPercentEncoding())"
    }
}

extension DeleteRecoveryGroupInput {

    static func urlPathProvider(_ value: DeleteRecoveryGroupInput) -> Swift.String? {
        guard let recoveryGroupName = value.recoveryGroupName else {
            return nil
        }
        return "/recoverygroups/\(recoveryGroupName.urlPercentEncoding())"
    }
}

extension DeleteResourceSetInput {

    static func urlPathProvider(_ value: DeleteResourceSetInput) -> Swift.String? {
        guard let resourceSetName = value.resourceSetName else {
            return nil
        }
        return "/resourcesets/\(resourceSetName.urlPercentEncoding())"
    }
}

extension GetArchitectureRecommendationsInput {

    static func urlPathProvider(_ value: GetArchitectureRecommendationsInput) -> Swift.String? {
        guard let recoveryGroupName = value.recoveryGroupName else {
            return nil
        }
        return "/recoverygroups/\(recoveryGroupName.urlPercentEncoding())/architectureRecommendations"
    }
}

extension GetArchitectureRecommendationsInput {

    static func queryItemProvider(_ value: GetArchitectureRecommendationsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension GetCellInput {

    static func urlPathProvider(_ value: GetCellInput) -> Swift.String? {
        guard let cellName = value.cellName else {
            return nil
        }
        return "/cells/\(cellName.urlPercentEncoding())"
    }
}

extension GetCellReadinessSummaryInput {

    static func urlPathProvider(_ value: GetCellReadinessSummaryInput) -> Swift.String? {
        guard let cellName = value.cellName else {
            return nil
        }
        return "/cellreadiness/\(cellName.urlPercentEncoding())"
    }
}

extension GetCellReadinessSummaryInput {

    static func queryItemProvider(_ value: GetCellReadinessSummaryInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension GetReadinessCheckInput {

    static func urlPathProvider(_ value: GetReadinessCheckInput) -> Swift.String? {
        guard let readinessCheckName = value.readinessCheckName else {
            return nil
        }
        return "/readinesschecks/\(readinessCheckName.urlPercentEncoding())"
    }
}

extension GetReadinessCheckResourceStatusInput {

    static func urlPathProvider(_ value: GetReadinessCheckResourceStatusInput) -> Swift.String? {
        guard let readinessCheckName = value.readinessCheckName else {
            return nil
        }
        guard let resourceIdentifier = value.resourceIdentifier else {
            return nil
        }
        return "/readinesschecks/\(readinessCheckName.urlPercentEncoding())/resource/\(resourceIdentifier.urlPercentEncoding())/status"
    }
}

extension GetReadinessCheckResourceStatusInput {

    static func queryItemProvider(_ value: GetReadinessCheckResourceStatusInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension GetReadinessCheckStatusInput {

    static func urlPathProvider(_ value: GetReadinessCheckStatusInput) -> Swift.String? {
        guard let readinessCheckName = value.readinessCheckName else {
            return nil
        }
        return "/readinesschecks/\(readinessCheckName.urlPercentEncoding())/status"
    }
}

extension GetReadinessCheckStatusInput {

    static func queryItemProvider(_ value: GetReadinessCheckStatusInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension GetRecoveryGroupInput {

    static func urlPathProvider(_ value: GetRecoveryGroupInput) -> Swift.String? {
        guard let recoveryGroupName = value.recoveryGroupName else {
            return nil
        }
        return "/recoverygroups/\(recoveryGroupName.urlPercentEncoding())"
    }
}

extension GetRecoveryGroupReadinessSummaryInput {

    static func urlPathProvider(_ value: GetRecoveryGroupReadinessSummaryInput) -> Swift.String? {
        guard let recoveryGroupName = value.recoveryGroupName else {
            return nil
        }
        return "/recoverygroupreadiness/\(recoveryGroupName.urlPercentEncoding())"
    }
}

extension GetRecoveryGroupReadinessSummaryInput {

    static func queryItemProvider(_ value: GetRecoveryGroupReadinessSummaryInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension GetResourceSetInput {

    static func urlPathProvider(_ value: GetResourceSetInput) -> Swift.String? {
        guard let resourceSetName = value.resourceSetName else {
            return nil
        }
        return "/resourcesets/\(resourceSetName.urlPercentEncoding())"
    }
}

extension ListCellsInput {

    static func urlPathProvider(_ value: ListCellsInput) -> Swift.String? {
        return "/cells"
    }
}

extension ListCellsInput {

    static func queryItemProvider(_ value: ListCellsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListCrossAccountAuthorizationsInput {

    static func urlPathProvider(_ value: ListCrossAccountAuthorizationsInput) -> Swift.String? {
        return "/crossaccountauthorizations"
    }
}

extension ListCrossAccountAuthorizationsInput {

    static func queryItemProvider(_ value: ListCrossAccountAuthorizationsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListReadinessChecksInput {

    static func urlPathProvider(_ value: ListReadinessChecksInput) -> Swift.String? {
        return "/readinesschecks"
    }
}

extension ListReadinessChecksInput {

    static func queryItemProvider(_ value: ListReadinessChecksInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListRecoveryGroupsInput {

    static func urlPathProvider(_ value: ListRecoveryGroupsInput) -> Swift.String? {
        return "/recoverygroups"
    }
}

extension ListRecoveryGroupsInput {

    static func queryItemProvider(_ value: ListRecoveryGroupsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListResourceSetsInput {

    static func urlPathProvider(_ value: ListResourceSetsInput) -> Swift.String? {
        return "/resourcesets"
    }
}

extension ListResourceSetsInput {

    static func queryItemProvider(_ value: ListResourceSetsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListRulesInput {

    static func urlPathProvider(_ value: ListRulesInput) -> Swift.String? {
        return "/rules"
    }
}

extension ListRulesInput {

    static func queryItemProvider(_ value: ListRulesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let resourceType = value.resourceType {
            let resourceTypeQueryItem = Smithy.URIQueryItem(name: "resourceType".urlPercentEncoding(), value: Swift.String(resourceType).urlPercentEncoding())
            items.append(resourceTypeQueryItem)
        }
        return items
    }
}

extension ListTagsForResourcesInput {

    static func urlPathProvider(_ value: ListTagsForResourcesInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func queryItemProvider(_ value: UntagResourceInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let tagKeys = value.tagKeys else {
            let message = "Creating a URL Query Item failed. tagKeys is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        tagKeys.forEach { queryItemValue in
            let queryItem = Smithy.URIQueryItem(name: "tagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
            items.append(queryItem)
        }
        return items
    }
}

extension UpdateCellInput {

    static func urlPathProvider(_ value: UpdateCellInput) -> Swift.String? {
        guard let cellName = value.cellName else {
            return nil
        }
        return "/cells/\(cellName.urlPercentEncoding())"
    }
}

extension UpdateReadinessCheckInput {

    static func urlPathProvider(_ value: UpdateReadinessCheckInput) -> Swift.String? {
        guard let readinessCheckName = value.readinessCheckName else {
            return nil
        }
        return "/readinesschecks/\(readinessCheckName.urlPercentEncoding())"
    }
}

extension UpdateRecoveryGroupInput {

    static func urlPathProvider(_ value: UpdateRecoveryGroupInput) -> Swift.String? {
        guard let recoveryGroupName = value.recoveryGroupName else {
            return nil
        }
        return "/recoverygroups/\(recoveryGroupName.urlPercentEncoding())"
    }
}

extension UpdateResourceSetInput {

    static func urlPathProvider(_ value: UpdateResourceSetInput) -> Swift.String? {
        guard let resourceSetName = value.resourceSetName else {
            return nil
        }
        return "/resourcesets/\(resourceSetName.urlPercentEncoding())"
    }
}

extension CreateCellInput {

    static func write(value: CreateCellInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cellName"].write(value.cellName)
        try writer["cells"].writeList(value.cells, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateCrossAccountAuthorizationInput {

    static func write(value: CreateCrossAccountAuthorizationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["crossAccountAuthorization"].write(value.crossAccountAuthorization)
    }
}

extension CreateReadinessCheckInput {

    static func write(value: CreateReadinessCheckInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["readinessCheckName"].write(value.readinessCheckName)
        try writer["resourceSetName"].write(value.resourceSetName)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateRecoveryGroupInput {

    static func write(value: CreateRecoveryGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cells"].writeList(value.cells, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["recoveryGroupName"].write(value.recoveryGroupName)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateResourceSetInput {

    static func write(value: CreateResourceSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resourceSetName"].write(value.resourceSetName)
        try writer["resourceSetType"].write(value.resourceSetType)
        try writer["resources"].writeList(value.resources, memberWritingClosure: Route53RecoveryReadinessClientTypes.Resource.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension UpdateCellInput {

    static func write(value: UpdateCellInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cells"].writeList(value.cells, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateReadinessCheckInput {

    static func write(value: UpdateReadinessCheckInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resourceSetName"].write(value.resourceSetName)
    }
}

extension UpdateRecoveryGroupInput {

    static func write(value: UpdateRecoveryGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cells"].writeList(value.cells, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateResourceSetInput {

    static func write(value: UpdateResourceSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resourceSetType"].write(value.resourceSetType)
        try writer["resources"].writeList(value.resources, memberWritingClosure: Route53RecoveryReadinessClientTypes.Resource.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateCellOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateCellOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateCellOutput()
        value.cellArn = try reader["cellArn"].readIfPresent()
        value.cellName = try reader["cellName"].readIfPresent()
        value.cells = try reader["cells"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.parentReadinessScopes = try reader["parentReadinessScopes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension CreateCrossAccountAuthorizationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateCrossAccountAuthorizationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateCrossAccountAuthorizationOutput()
        value.crossAccountAuthorization = try reader["crossAccountAuthorization"].readIfPresent()
        return value
    }
}

extension CreateReadinessCheckOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateReadinessCheckOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateReadinessCheckOutput()
        value.readinessCheckArn = try reader["readinessCheckArn"].readIfPresent()
        value.readinessCheckName = try reader["readinessCheckName"].readIfPresent()
        value.resourceSet = try reader["resourceSet"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension CreateRecoveryGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateRecoveryGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateRecoveryGroupOutput()
        value.cells = try reader["cells"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.recoveryGroupArn = try reader["recoveryGroupArn"].readIfPresent()
        value.recoveryGroupName = try reader["recoveryGroupName"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension CreateResourceSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateResourceSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateResourceSetOutput()
        value.resourceSetArn = try reader["resourceSetArn"].readIfPresent()
        value.resourceSetName = try reader["resourceSetName"].readIfPresent()
        value.resourceSetType = try reader["resourceSetType"].readIfPresent()
        value.resources = try reader["resources"].readListIfPresent(memberReadingClosure: Route53RecoveryReadinessClientTypes.Resource.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension DeleteCellOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteCellOutput {
        return DeleteCellOutput()
    }
}

extension DeleteCrossAccountAuthorizationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteCrossAccountAuthorizationOutput {
        return DeleteCrossAccountAuthorizationOutput()
    }
}

extension DeleteReadinessCheckOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteReadinessCheckOutput {
        return DeleteReadinessCheckOutput()
    }
}

extension DeleteRecoveryGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteRecoveryGroupOutput {
        return DeleteRecoveryGroupOutput()
    }
}

extension DeleteResourceSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteResourceSetOutput {
        return DeleteResourceSetOutput()
    }
}

extension GetArchitectureRecommendationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetArchitectureRecommendationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetArchitectureRecommendationsOutput()
        value.lastAuditTimestamp = try reader["lastAuditTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.recommendations = try reader["recommendations"].readListIfPresent(memberReadingClosure: Route53RecoveryReadinessClientTypes.Recommendation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetCellOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetCellOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetCellOutput()
        value.cellArn = try reader["cellArn"].readIfPresent()
        value.cellName = try reader["cellName"].readIfPresent()
        value.cells = try reader["cells"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.parentReadinessScopes = try reader["parentReadinessScopes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension GetCellReadinessSummaryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetCellReadinessSummaryOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetCellReadinessSummaryOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.readiness = try reader["readiness"].readIfPresent()
        value.readinessChecks = try reader["readinessChecks"].readListIfPresent(memberReadingClosure: Route53RecoveryReadinessClientTypes.ReadinessCheckSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetReadinessCheckOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetReadinessCheckOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetReadinessCheckOutput()
        value.readinessCheckArn = try reader["readinessCheckArn"].readIfPresent()
        value.readinessCheckName = try reader["readinessCheckName"].readIfPresent()
        value.resourceSet = try reader["resourceSet"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension GetReadinessCheckResourceStatusOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetReadinessCheckResourceStatusOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetReadinessCheckResourceStatusOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.readiness = try reader["readiness"].readIfPresent()
        value.rules = try reader["rules"].readListIfPresent(memberReadingClosure: Route53RecoveryReadinessClientTypes.RuleResult.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetReadinessCheckStatusOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetReadinessCheckStatusOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetReadinessCheckStatusOutput()
        value.messages = try reader["messages"].readListIfPresent(memberReadingClosure: Route53RecoveryReadinessClientTypes.Message.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.readiness = try reader["readiness"].readIfPresent()
        value.resources = try reader["resources"].readListIfPresent(memberReadingClosure: Route53RecoveryReadinessClientTypes.ResourceResult.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetRecoveryGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetRecoveryGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetRecoveryGroupOutput()
        value.cells = try reader["cells"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.recoveryGroupArn = try reader["recoveryGroupArn"].readIfPresent()
        value.recoveryGroupName = try reader["recoveryGroupName"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension GetRecoveryGroupReadinessSummaryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetRecoveryGroupReadinessSummaryOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetRecoveryGroupReadinessSummaryOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.readiness = try reader["readiness"].readIfPresent()
        value.readinessChecks = try reader["readinessChecks"].readListIfPresent(memberReadingClosure: Route53RecoveryReadinessClientTypes.ReadinessCheckSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetResourceSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetResourceSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetResourceSetOutput()
        value.resourceSetArn = try reader["resourceSetArn"].readIfPresent()
        value.resourceSetName = try reader["resourceSetName"].readIfPresent()
        value.resourceSetType = try reader["resourceSetType"].readIfPresent()
        value.resources = try reader["resources"].readListIfPresent(memberReadingClosure: Route53RecoveryReadinessClientTypes.Resource.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension ListCellsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListCellsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListCellsOutput()
        value.cells = try reader["cells"].readListIfPresent(memberReadingClosure: Route53RecoveryReadinessClientTypes.CellOutput.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListCrossAccountAuthorizationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListCrossAccountAuthorizationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListCrossAccountAuthorizationsOutput()
        value.crossAccountAuthorizations = try reader["crossAccountAuthorizations"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListReadinessChecksOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListReadinessChecksOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListReadinessChecksOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.readinessChecks = try reader["readinessChecks"].readListIfPresent(memberReadingClosure: Route53RecoveryReadinessClientTypes.ReadinessCheckOutput.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListRecoveryGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListRecoveryGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListRecoveryGroupsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.recoveryGroups = try reader["recoveryGroups"].readListIfPresent(memberReadingClosure: Route53RecoveryReadinessClientTypes.RecoveryGroupOutput.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListResourceSetsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListResourceSetsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListResourceSetsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.resourceSets = try reader["resourceSets"].readListIfPresent(memberReadingClosure: Route53RecoveryReadinessClientTypes.ResourceSetOutput.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListRulesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListRulesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListRulesOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.rules = try reader["rules"].readListIfPresent(memberReadingClosure: Route53RecoveryReadinessClientTypes.ListRulesOutput.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTagsForResourcesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourcesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourcesOutput()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateCellOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateCellOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateCellOutput()
        value.cellArn = try reader["cellArn"].readIfPresent()
        value.cellName = try reader["cellName"].readIfPresent()
        value.cells = try reader["cells"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.parentReadinessScopes = try reader["parentReadinessScopes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension UpdateReadinessCheckOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateReadinessCheckOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateReadinessCheckOutput()
        value.readinessCheckArn = try reader["readinessCheckArn"].readIfPresent()
        value.readinessCheckName = try reader["readinessCheckName"].readIfPresent()
        value.resourceSet = try reader["resourceSet"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension UpdateRecoveryGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateRecoveryGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateRecoveryGroupOutput()
        value.cells = try reader["cells"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.recoveryGroupArn = try reader["recoveryGroupArn"].readIfPresent()
        value.recoveryGroupName = try reader["recoveryGroupName"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension UpdateResourceSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateResourceSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateResourceSetOutput()
        value.resourceSetArn = try reader["resourceSetArn"].readIfPresent()
        value.resourceSetName = try reader["resourceSetName"].readIfPresent()
        value.resourceSetType = try reader["resourceSetType"].readIfPresent()
        value.resources = try reader["resources"].readListIfPresent(memberReadingClosure: Route53RecoveryReadinessClientTypes.Resource.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

enum CreateCellOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateCrossAccountAuthorizationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateReadinessCheckOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateRecoveryGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateResourceSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteCellOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteCrossAccountAuthorizationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteReadinessCheckOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteRecoveryGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteResourceSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetArchitectureRecommendationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetCellOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetCellReadinessSummaryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetReadinessCheckOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetReadinessCheckResourceStatusOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetReadinessCheckStatusOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetRecoveryGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetRecoveryGroupReadinessSummaryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetResourceSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListCellsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListCrossAccountAuthorizationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListReadinessChecksOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListRecoveryGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListResourceSetsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListRulesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourcesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateCellOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateReadinessCheckOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateRecoveryGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateResourceSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension InternalServerException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalServerException {
        let reader = baseError.errorBodyReader
        var value = InternalServerException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ThrottlingException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ThrottlingException {
        let reader = baseError.errorBodyReader
        var value = ThrottlingException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension Route53RecoveryReadinessClientTypes.Resource {

    static func write(value: Route53RecoveryReadinessClientTypes.Resource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["componentId"].write(value.componentId)
        try writer["dnsTargetResource"].write(value.dnsTargetResource, with: Route53RecoveryReadinessClientTypes.DNSTargetResource.write(value:to:))
        try writer["readinessScopes"].writeList(value.readinessScopes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["resourceArn"].write(value.resourceArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> Route53RecoveryReadinessClientTypes.Resource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Route53RecoveryReadinessClientTypes.Resource()
        value.componentId = try reader["componentId"].readIfPresent()
        value.dnsTargetResource = try reader["dnsTargetResource"].readIfPresent(with: Route53RecoveryReadinessClientTypes.DNSTargetResource.read(from:))
        value.readinessScopes = try reader["readinessScopes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.resourceArn = try reader["resourceArn"].readIfPresent()
        return value
    }
}

extension Route53RecoveryReadinessClientTypes.DNSTargetResource {

    static func write(value: Route53RecoveryReadinessClientTypes.DNSTargetResource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["domainName"].write(value.domainName)
        try writer["hostedZoneArn"].write(value.hostedZoneArn)
        try writer["recordSetId"].write(value.recordSetId)
        try writer["recordType"].write(value.recordType)
        try writer["targetResource"].write(value.targetResource, with: Route53RecoveryReadinessClientTypes.TargetResource.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> Route53RecoveryReadinessClientTypes.DNSTargetResource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Route53RecoveryReadinessClientTypes.DNSTargetResource()
        value.domainName = try reader["domainName"].readIfPresent()
        value.hostedZoneArn = try reader["hostedZoneArn"].readIfPresent()
        value.recordSetId = try reader["recordSetId"].readIfPresent()
        value.recordType = try reader["recordType"].readIfPresent()
        value.targetResource = try reader["targetResource"].readIfPresent(with: Route53RecoveryReadinessClientTypes.TargetResource.read(from:))
        return value
    }
}

extension Route53RecoveryReadinessClientTypes.TargetResource {

    static func write(value: Route53RecoveryReadinessClientTypes.TargetResource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["nLBResource"].write(value.nlbResource, with: Route53RecoveryReadinessClientTypes.NLBResource.write(value:to:))
        try writer["r53Resource"].write(value.r53Resource, with: Route53RecoveryReadinessClientTypes.R53ResourceRecord.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> Route53RecoveryReadinessClientTypes.TargetResource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Route53RecoveryReadinessClientTypes.TargetResource()
        value.nlbResource = try reader["nLBResource"].readIfPresent(with: Route53RecoveryReadinessClientTypes.NLBResource.read(from:))
        value.r53Resource = try reader["r53Resource"].readIfPresent(with: Route53RecoveryReadinessClientTypes.R53ResourceRecord.read(from:))
        return value
    }
}

extension Route53RecoveryReadinessClientTypes.R53ResourceRecord {

    static func write(value: Route53RecoveryReadinessClientTypes.R53ResourceRecord?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["domainName"].write(value.domainName)
        try writer["recordSetId"].write(value.recordSetId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> Route53RecoveryReadinessClientTypes.R53ResourceRecord {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Route53RecoveryReadinessClientTypes.R53ResourceRecord()
        value.domainName = try reader["domainName"].readIfPresent()
        value.recordSetId = try reader["recordSetId"].readIfPresent()
        return value
    }
}

extension Route53RecoveryReadinessClientTypes.NLBResource {

    static func write(value: Route53RecoveryReadinessClientTypes.NLBResource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["arn"].write(value.arn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> Route53RecoveryReadinessClientTypes.NLBResource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Route53RecoveryReadinessClientTypes.NLBResource()
        value.arn = try reader["arn"].readIfPresent()
        return value
    }
}

extension Route53RecoveryReadinessClientTypes.Recommendation {

    static func read(from reader: SmithyJSON.Reader) throws -> Route53RecoveryReadinessClientTypes.Recommendation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Route53RecoveryReadinessClientTypes.Recommendation()
        value.recommendationText = try reader["recommendationText"].readIfPresent() ?? ""
        return value
    }
}

extension Route53RecoveryReadinessClientTypes.ReadinessCheckSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> Route53RecoveryReadinessClientTypes.ReadinessCheckSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Route53RecoveryReadinessClientTypes.ReadinessCheckSummary()
        value.readiness = try reader["readiness"].readIfPresent()
        value.readinessCheckName = try reader["readinessCheckName"].readIfPresent()
        return value
    }
}

extension Route53RecoveryReadinessClientTypes.RuleResult {

    static func read(from reader: SmithyJSON.Reader) throws -> Route53RecoveryReadinessClientTypes.RuleResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Route53RecoveryReadinessClientTypes.RuleResult()
        value.lastCheckedTimestamp = try reader["lastCheckedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.messages = try reader["messages"].readListIfPresent(memberReadingClosure: Route53RecoveryReadinessClientTypes.Message.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.readiness = try reader["readiness"].readIfPresent() ?? .sdkUnknown("")
        value.ruleId = try reader["ruleId"].readIfPresent() ?? ""
        return value
    }
}

extension Route53RecoveryReadinessClientTypes.Message {

    static func read(from reader: SmithyJSON.Reader) throws -> Route53RecoveryReadinessClientTypes.Message {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Route53RecoveryReadinessClientTypes.Message()
        value.messageText = try reader["messageText"].readIfPresent()
        return value
    }
}

extension Route53RecoveryReadinessClientTypes.ResourceResult {

    static func read(from reader: SmithyJSON.Reader) throws -> Route53RecoveryReadinessClientTypes.ResourceResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Route53RecoveryReadinessClientTypes.ResourceResult()
        value.componentId = try reader["componentId"].readIfPresent()
        value.lastCheckedTimestamp = try reader["lastCheckedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.readiness = try reader["readiness"].readIfPresent() ?? .sdkUnknown("")
        value.resourceArn = try reader["resourceArn"].readIfPresent()
        return value
    }
}

extension Route53RecoveryReadinessClientTypes.CellOutput {

    static func read(from reader: SmithyJSON.Reader) throws -> Route53RecoveryReadinessClientTypes.CellOutput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Route53RecoveryReadinessClientTypes.CellOutput()
        value.cellArn = try reader["cellArn"].readIfPresent() ?? ""
        value.cellName = try reader["cellName"].readIfPresent() ?? ""
        value.cells = try reader["cells"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.parentReadinessScopes = try reader["parentReadinessScopes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension Route53RecoveryReadinessClientTypes.ReadinessCheckOutput {

    static func read(from reader: SmithyJSON.Reader) throws -> Route53RecoveryReadinessClientTypes.ReadinessCheckOutput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Route53RecoveryReadinessClientTypes.ReadinessCheckOutput()
        value.readinessCheckArn = try reader["readinessCheckArn"].readIfPresent() ?? ""
        value.readinessCheckName = try reader["readinessCheckName"].readIfPresent()
        value.resourceSet = try reader["resourceSet"].readIfPresent() ?? ""
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension Route53RecoveryReadinessClientTypes.RecoveryGroupOutput {

    static func read(from reader: SmithyJSON.Reader) throws -> Route53RecoveryReadinessClientTypes.RecoveryGroupOutput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Route53RecoveryReadinessClientTypes.RecoveryGroupOutput()
        value.cells = try reader["cells"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.recoveryGroupArn = try reader["recoveryGroupArn"].readIfPresent() ?? ""
        value.recoveryGroupName = try reader["recoveryGroupName"].readIfPresent() ?? ""
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension Route53RecoveryReadinessClientTypes.ResourceSetOutput {

    static func read(from reader: SmithyJSON.Reader) throws -> Route53RecoveryReadinessClientTypes.ResourceSetOutput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Route53RecoveryReadinessClientTypes.ResourceSetOutput()
        value.resourceSetArn = try reader["resourceSetArn"].readIfPresent() ?? ""
        value.resourceSetName = try reader["resourceSetName"].readIfPresent() ?? ""
        value.resourceSetType = try reader["resourceSetType"].readIfPresent() ?? ""
        value.resources = try reader["resources"].readListIfPresent(memberReadingClosure: Route53RecoveryReadinessClientTypes.Resource.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension Route53RecoveryReadinessClientTypes.ListRulesOutput {

    static func read(from reader: SmithyJSON.Reader) throws -> Route53RecoveryReadinessClientTypes.ListRulesOutput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Route53RecoveryReadinessClientTypes.ListRulesOutput()
        value.resourceType = try reader["resourceType"].readIfPresent() ?? ""
        value.ruleDescription = try reader["ruleDescription"].readIfPresent() ?? ""
        value.ruleId = try reader["ruleId"].readIfPresent() ?? ""
        return value
    }
}

public enum Route53RecoveryReadinessClientTypes {}
