//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.URIQueryItem


public struct CancelTagSyncTaskOutput: Swift.Sendable {

    public init() { }
}

public struct GetAccountSettingsInput: Swift.Sendable {

    public init() { }
}

extension ResourceGroupsClientTypes {

    public enum GroupLifecycleEventsDesiredStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case inactive
        case sdkUnknown(Swift.String)

        public static var allCases: [GroupLifecycleEventsDesiredStatus] {
            return [
                .active,
                .inactive
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .inactive: return "INACTIVE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResourceGroupsClientTypes {

    public enum GroupLifecycleEventsStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case error
        case inactive
        case inProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [GroupLifecycleEventsStatus] {
            return [
                .active,
                .error,
                .inactive,
                .inProgress
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .error: return "ERROR"
            case .inactive: return "INACTIVE"
            case .inProgress: return "IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResourceGroupsClientTypes {

    /// The Resource Groups settings for this Amazon Web Services account.
    public struct AccountSettings: Swift.Sendable {
        /// The desired target status of the group lifecycle events feature. If
        public var groupLifecycleEventsDesiredStatus: ResourceGroupsClientTypes.GroupLifecycleEventsDesiredStatus?
        /// The current status of the group lifecycle events feature.
        public var groupLifecycleEventsStatus: ResourceGroupsClientTypes.GroupLifecycleEventsStatus?
        /// The text of any error message occurs during an attempt to turn group lifecycle events on or off.
        public var groupLifecycleEventsStatusMessage: Swift.String?

        public init(
            groupLifecycleEventsDesiredStatus: ResourceGroupsClientTypes.GroupLifecycleEventsDesiredStatus? = nil,
            groupLifecycleEventsStatus: ResourceGroupsClientTypes.GroupLifecycleEventsStatus? = nil,
            groupLifecycleEventsStatusMessage: Swift.String? = nil
        )
        {
            self.groupLifecycleEventsDesiredStatus = groupLifecycleEventsDesiredStatus
            self.groupLifecycleEventsStatus = groupLifecycleEventsStatus
            self.groupLifecycleEventsStatusMessage = groupLifecycleEventsStatusMessage
        }
    }
}

/// The request includes one or more parameters that violate validation rules.
public struct BadRequestException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "BadRequestException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The caller isn't authorized to make the request. Check permissions.
public struct ForbiddenException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ForbiddenException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// An internal error occurred while processing the request. Try again later.
public struct InternalServerErrorException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerErrorException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request uses an HTTP method that isn't allowed for the specified resource.
public struct MethodNotAllowedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "MethodNotAllowedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// You've exceeded throttling limits by making too many requests in a period of time.
public struct TooManyRequestsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyRequestsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was rejected because it doesn't have valid credentials for the target resource.
public struct UnauthorizedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnauthorizedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CancelTagSyncTaskInput: Swift.Sendable {
    /// The Amazon resource name (ARN) of the tag-sync task.
    /// This member is required.
    public var taskArn: Swift.String?

    public init(
        taskArn: Swift.String? = nil
    )
    {
        self.taskArn = taskArn
    }
}

extension ResourceGroupsClientTypes {

    /// A parameter for a group configuration item. For details about group service configuration syntax, see [Service configurations for resource groups](https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html).
    public struct GroupConfigurationParameter: Swift.Sendable {
        /// The name of the group configuration parameter. For the list of parameters that you can use with each configuration item type, see [Supported resource types and parameters](https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html#about-slg-types).
        /// This member is required.
        public var name: Swift.String?
        /// The value or values to be used for the specified parameter. For the list of values you can use with each parameter, see [Supported resource types and parameters](https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html#about-slg-types).
        public var values: [Swift.String]?

        public init(
            name: Swift.String? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }
}

extension ResourceGroupsClientTypes {

    /// An item in a group configuration. A group service configuration can have one or more items. For details about group service configuration syntax, see [Service configurations for resource groups](https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html).
    public struct GroupConfigurationItem: Swift.Sendable {
        /// A collection of parameters for this group configuration item. For the list of parameters that you can use with each configuration item type, see [Supported resource types and parameters](https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html#about-slg-types).
        public var parameters: [ResourceGroupsClientTypes.GroupConfigurationParameter]?
        /// Specifies the type of group configuration item. Each item must have a unique value for type. For the list of types that you can specify for a configuration item, see [Supported resource types and parameters](https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html#about-slg-types).
        /// This member is required.
        public var type: Swift.String?

        public init(
            parameters: [ResourceGroupsClientTypes.GroupConfigurationParameter]? = nil,
            type: Swift.String? = nil
        )
        {
            self.parameters = parameters
            self.type = type
        }
    }
}

extension ResourceGroupsClientTypes {

    public enum QueryType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cloudformationStack10
        case tagFilters10
        case sdkUnknown(Swift.String)

        public static var allCases: [QueryType] {
            return [
                .cloudformationStack10,
                .tagFilters10
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cloudformationStack10: return "CLOUDFORMATION_STACK_1_0"
            case .tagFilters10: return "TAG_FILTERS_1_0"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResourceGroupsClientTypes {

    /// The query you can use to define a resource group or a search for resources. A ResourceQuery specifies both a query Type and a Query string as JSON string objects. See the examples section for example JSON strings. For more information about creating a resource group with a resource query, see [Build queries and groups in Resource Groups](https://docs.aws.amazon.com/ARG/latest/userguide/gettingstarted-query.html) in the Resource Groups User Guide When you combine all of the elements together into a single string, any double quotes that are embedded inside another double quote pair must be escaped by preceding the embedded double quote with a backslash character (\). For example, a complete ResourceQuery parameter must be formatted like the following CLI parameter example: --resource-query '{"Type":"TAG_FILTERS_1_0","Query":"{\"ResourceTypeFilters\":[\"AWS::AllSupported\"],\"TagFilters\":[{\"Key\":\"Stage\",\"Values\":[\"Test\"]}]}"}' In the preceding example, all of the double quote characters in the value part of the Query element must be escaped because the value itself is surrounded by double quotes. For more information, see [Quoting strings](https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-parameters-quoting-strings.html) in the Command Line Interface User Guide. For the complete list of resource types that you can use in the array value for ResourceTypeFilters, see [Resources you can use with Resource Groups and Tag Editor](https://docs.aws.amazon.com/ARG/latest/userguide/supported-resources.html) in the Resource Groups User Guide. For example: "ResourceTypeFilters":["AWS::S3::Bucket", "AWS::EC2::Instance"]
    public struct ResourceQuery: Swift.Sendable {
        /// The query that defines a group or a search. The contents depends on the value of the Type element.
        ///
        /// * ResourceTypeFilters – Applies to all ResourceQuery objects of either Type. This element contains one of the following two items:
        ///
        /// * The value AWS::AllSupported. This causes the ResourceQuery to match resources of any resource type that also match the query.
        ///
        /// * A list (a JSON array) of resource type identifiers that limit the query to only resources of the specified types. For the complete list of resource types that you can use in the array value for ResourceTypeFilters, see [Resources you can use with Resource Groups and Tag Editor](https://docs.aws.amazon.com/ARG/latest/userguide/supported-resources.html) in the Resource Groups User Guide.
        ///
        ///
        /// Example: "ResourceTypeFilters": ["AWS::AllSupported"] or "ResourceTypeFilters": ["AWS::EC2::Instance", "AWS::S3::Bucket"]
        ///
        /// * TagFilters – applicable only if Type = TAG_FILTERS_1_0. The Query contains a JSON string that represents a collection of simple tag filters. The JSON string uses a syntax similar to the [GetResources](https://docs.aws.amazon.com/resourcegroupstagging/latest/APIReference/API_GetResources.html) operation, but uses only the [ ResourceTypeFilters](https://docs.aws.amazon.com/resourcegroupstagging/latest/APIReference/API_GetResources.html#resourcegrouptagging-GetResources-request-ResourceTypeFilters) and [TagFilters](https://docs.aws.amazon.com/resourcegroupstagging/latest/APIReference/API_GetResources.html#resourcegrouptagging-GetResources-request-TagFiltersTagFilters) fields. If you specify more than one tag key, only resources that match all tag keys, and at least one value of each specified tag key, are returned in your query. If you specify more than one value for a tag key, a resource matches the filter if it has a tag key value that matches any of the specified values. For example, consider the following sample query for resources that have two tags, Stage and Version, with two values each: [{"Stage":["Test","Deploy"]},{"Version":["1","2"]}] The results of this resource query could include the following.
        ///
        /// * An Amazon EC2 instance that has the following two tags: {"Stage":"Deploy"}, and {"Version":"2"}
        ///
        /// * An S3 bucket that has the following two tags: {"Stage":"Test"}, and {"Version":"1"}
        ///
        ///
        /// The resource query results would not include the following items in the results, however.
        ///
        /// * An Amazon EC2 instance that has only the following tag: {"Stage":"Deploy"}. The instance does not have all of the tag keys specified in the filter, so it is excluded from the results.
        ///
        /// * An RDS database that has the following two tags: {"Stage":"Archived"} and {"Version":"4"} The database has all of the tag keys, but none of those keys has an associated value that matches at least one of the specified values in the filter.
        ///
        ///
        /// Example: "TagFilters": [ { "Key": "Stage", "Values": [ "Gamma", "Beta" ] }
        ///
        /// * StackIdentifier – applicable only if Type = CLOUDFORMATION_STACK_1_0. The value of this parameter is the Amazon Resource Name (ARN) of the CloudFormation stack whose resources you want included in the group.
        /// This member is required.
        public var query: Swift.String?
        /// The type of the query to perform. This can have one of two values:
        ///
        /// * CLOUDFORMATION_STACK_1_0: Specifies that you want the group to contain the members of an CloudFormation stack. The Query contains a StackIdentifier element with an Amazon resource name (ARN) for a CloudFormation stack.
        ///
        /// * TAG_FILTERS_1_0: Specifies that you want the group to include resource that have tags that match the query.
        /// This member is required.
        public var type: ResourceGroupsClientTypes.QueryType?

        public init(
            query: Swift.String? = nil,
            type: ResourceGroupsClientTypes.QueryType? = nil
        )
        {
            self.query = query
            self.type = type
        }
    }
}

public struct CreateGroupInput: Swift.Sendable {
    /// A configuration associates the resource group with an Amazon Web Services service and specifies how the service can interact with the resources in the group. A configuration is an array of [GroupConfigurationItem] elements. For details about the syntax of service configurations, see [Service configurations for Resource Groups](https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html). A resource group can contain either a Configuration or a ResourceQuery, but not both.
    public var configuration: [ResourceGroupsClientTypes.GroupConfigurationItem]?
    /// The critical rank of the application group on a scale of 1 to 10, with a rank of 1 being the most critical, and a rank of 10 being least critical.
    public var criticality: Swift.Int?
    /// The description of the resource group. Descriptions can consist of letters, numbers, hyphens, underscores, periods, and spaces.
    public var description: Swift.String?
    /// The name of the application group, which you can change at any time.
    public var displayName: Swift.String?
    /// The name of the group, which is the identifier of the group in other operations. You can't change the name of a resource group after you create it. A resource group name can consist of letters, numbers, hyphens, periods, and underscores. The name cannot start with AWS, aws, or any other possible capitalization; these are reserved. A resource group name must be unique within each Amazon Web Services Region in your Amazon Web Services account.
    /// This member is required.
    public var name: Swift.String?
    /// A name, email address or other identifier for the person or group who is considered as the owner of this application group within your organization.
    public var owner: Swift.String?
    /// The resource query that determines which Amazon Web Services resources are members of this group. For more information about resource queries, see [Create a tag-based group in Resource Groups](https://docs.aws.amazon.com/ARG/latest/userguide/gettingstarted-query.html#gettingstarted-query-cli-tag). A resource group can contain either a ResourceQuery or a Configuration, but not both.
    public var resourceQuery: ResourceGroupsClientTypes.ResourceQuery?
    /// The tags to add to the group. A tag is key-value pair string.
    public var tags: [Swift.String: Swift.String]?

    public init(
        configuration: [ResourceGroupsClientTypes.GroupConfigurationItem]? = nil,
        criticality: Swift.Int? = nil,
        description: Swift.String? = nil,
        displayName: Swift.String? = nil,
        name: Swift.String? = nil,
        owner: Swift.String? = nil,
        resourceQuery: ResourceGroupsClientTypes.ResourceQuery? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.configuration = configuration
        self.criticality = criticality
        self.description = description
        self.displayName = displayName
        self.name = name
        self.owner = owner
        self.resourceQuery = resourceQuery
        self.tags = tags
    }
}

extension ResourceGroupsClientTypes {

    /// A resource group that contains Amazon Web Services resources. You can assign resources to the group by associating either of the following elements with the group:
    ///
    /// * [ResourceQuery] - Use a resource query to specify a set of tag keys and values. All resources in the same Amazon Web Services Region and Amazon Web Services account that have those keys with the same values are included in the group. You can add a resource query when you create the group, or later by using the [PutGroupConfiguration] operation.
    ///
    /// * [GroupConfiguration] - Use a service configuration to associate the group with an Amazon Web Services service. The configuration specifies which resource types can be included in the group.
    public struct Group: Swift.Sendable {
        /// A tag that defines the application group membership. This tag is only supported for application groups.
        public var applicationTag: [Swift.String: Swift.String]?
        /// The critical rank of the application group on a scale of 1 to 10, with a rank of 1 being the most critical, and a rank of 10 being least critical.
        public var criticality: Swift.Int?
        /// The description of the resource group.
        public var description: Swift.String?
        /// The name of the application group, which you can change at any time.
        public var displayName: Swift.String?
        /// The Amazon resource name (ARN) of the resource group.
        /// This member is required.
        public var groupArn: Swift.String?
        /// The name of the resource group.
        /// This member is required.
        public var name: Swift.String?
        /// A name, email address or other identifier for the person or group who is considered as the owner of this application group within your organization.
        public var owner: Swift.String?

        public init(
            applicationTag: [Swift.String: Swift.String]? = nil,
            criticality: Swift.Int? = nil,
            description: Swift.String? = nil,
            displayName: Swift.String? = nil,
            groupArn: Swift.String? = nil,
            name: Swift.String? = nil,
            owner: Swift.String? = nil
        )
        {
            self.applicationTag = applicationTag
            self.criticality = criticality
            self.description = description
            self.displayName = displayName
            self.groupArn = groupArn
            self.name = name
            self.owner = owner
        }
    }
}

extension ResourceGroupsClientTypes {

    public enum GroupConfigurationStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case updateComplete
        case updateFailed
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [GroupConfigurationStatus] {
            return [
                .updateComplete,
                .updateFailed,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .updateComplete: return "UPDATE_COMPLETE"
            case .updateFailed: return "UPDATE_FAILED"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResourceGroupsClientTypes {

    /// A service configuration associated with a resource group. The configuration options are determined by the Amazon Web Services service that defines the Type, and specifies which resources can be included in the group. You can add a service configuration when you create the group by using [CreateGroup], or later by using the [PutGroupConfiguration] operation. For details about group service configuration syntax, see [Service configurations for resource groups](https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html).
    public struct GroupConfiguration: Swift.Sendable {
        /// The configuration currently associated with the group and in effect.
        public var configuration: [ResourceGroupsClientTypes.GroupConfigurationItem]?
        /// If present, the reason why a request to update the group configuration failed.
        public var failureReason: Swift.String?
        /// If present, the new configuration that is in the process of being applied to the group.
        public var proposedConfiguration: [ResourceGroupsClientTypes.GroupConfigurationItem]?
        /// The current status of an attempt to update the group configuration.
        public var status: ResourceGroupsClientTypes.GroupConfigurationStatus?

        public init(
            configuration: [ResourceGroupsClientTypes.GroupConfigurationItem]? = nil,
            failureReason: Swift.String? = nil,
            proposedConfiguration: [ResourceGroupsClientTypes.GroupConfigurationItem]? = nil,
            status: ResourceGroupsClientTypes.GroupConfigurationStatus? = nil
        )
        {
            self.configuration = configuration
            self.failureReason = failureReason
            self.proposedConfiguration = proposedConfiguration
            self.status = status
        }
    }
}

public struct CreateGroupOutput: Swift.Sendable {
    /// The description of the resource group.
    public var group: ResourceGroupsClientTypes.Group?
    /// The service configuration associated with the resource group. For details about the syntax of a service configuration, see [Service configurations for Resource Groups](https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html).
    public var groupConfiguration: ResourceGroupsClientTypes.GroupConfiguration?
    /// The resource query associated with the group. For more information about resource queries, see [Create a tag-based group in Resource Groups](https://docs.aws.amazon.com/ARG/latest/userguide/gettingstarted-query.html#gettingstarted-query-cli-tag).
    public var resourceQuery: ResourceGroupsClientTypes.ResourceQuery?
    /// The tags associated with the group.
    public var tags: [Swift.String: Swift.String]?

    public init(
        group: ResourceGroupsClientTypes.Group? = nil,
        groupConfiguration: ResourceGroupsClientTypes.GroupConfiguration? = nil,
        resourceQuery: ResourceGroupsClientTypes.ResourceQuery? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.group = group
        self.groupConfiguration = groupConfiguration
        self.resourceQuery = resourceQuery
        self.tags = tags
    }
}

/// One or more of the specified resources don't exist.
public struct NotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteGroupInput: Swift.Sendable {
    /// The name or the Amazon resource name (ARN) of the resource group to delete.
    public var group: Swift.String?
    /// Deprecated - don't use this parameter. Use Group instead.
    @available(*, deprecated, message: "This field is deprecated, use Group instead.")
    public var groupName: Swift.String?

    public init(
        group: Swift.String? = nil,
        groupName: Swift.String? = nil
    )
    {
        self.group = group
        self.groupName = groupName
    }
}

public struct DeleteGroupOutput: Swift.Sendable {
    /// A full description of the deleted resource group.
    public var group: ResourceGroupsClientTypes.Group?

    public init(
        group: ResourceGroupsClientTypes.Group? = nil
    )
    {
        self.group = group
    }
}

public struct GetAccountSettingsOutput: Swift.Sendable {
    /// The current settings for the optional features in Resource Groups.
    public var accountSettings: ResourceGroupsClientTypes.AccountSettings?

    public init(
        accountSettings: ResourceGroupsClientTypes.AccountSettings? = nil
    )
    {
        self.accountSettings = accountSettings
    }
}

public struct GetGroupInput: Swift.Sendable {
    /// The name or the Amazon resource name (ARN) of the resource group to retrieve.
    public var group: Swift.String?
    /// Deprecated - don't use this parameter. Use Group instead.
    @available(*, deprecated, message: "This field is deprecated, use Group instead.")
    public var groupName: Swift.String?

    public init(
        group: Swift.String? = nil,
        groupName: Swift.String? = nil
    )
    {
        self.group = group
        self.groupName = groupName
    }
}

public struct GetGroupOutput: Swift.Sendable {
    /// A structure that contains the metadata details for the specified resource group. Use [GetGroupQuery] and [GetGroupConfiguration] to get those additional details of the resource group.
    public var group: ResourceGroupsClientTypes.Group?

    public init(
        group: ResourceGroupsClientTypes.Group? = nil
    )
    {
        self.group = group
    }
}

public struct GetGroupConfigurationInput: Swift.Sendable {
    /// The name or the Amazon resource name (ARN) of the resource group for which you want to retrive the service configuration.
    public var group: Swift.String?

    public init(
        group: Swift.String? = nil
    )
    {
        self.group = group
    }
}

public struct GetGroupConfigurationOutput: Swift.Sendable {
    /// A structure that describes the service configuration attached with the specified group. For details about the service configuration syntax, see [Service configurations for Resource Groups](https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html).
    public var groupConfiguration: ResourceGroupsClientTypes.GroupConfiguration?

    public init(
        groupConfiguration: ResourceGroupsClientTypes.GroupConfiguration? = nil
    )
    {
        self.groupConfiguration = groupConfiguration
    }
}

public struct GetGroupQueryInput: Swift.Sendable {
    /// The name or the Amazon resource name (ARN) of the resource group to query.
    public var group: Swift.String?
    /// Don't use this parameter. Use Group instead.
    @available(*, deprecated, message: "This field is deprecated, use Group instead.")
    public var groupName: Swift.String?

    public init(
        group: Swift.String? = nil,
        groupName: Swift.String? = nil
    )
    {
        self.group = group
        self.groupName = groupName
    }
}

extension ResourceGroupsClientTypes {

    /// A mapping of a query attached to a resource group that determines the Amazon Web Services resources that are members of the group.
    public struct GroupQuery: Swift.Sendable {
        /// The name of the resource group that is associated with the specified resource query.
        /// This member is required.
        public var groupName: Swift.String?
        /// The resource query that determines which Amazon Web Services resources are members of the associated resource group.
        /// This member is required.
        public var resourceQuery: ResourceGroupsClientTypes.ResourceQuery?

        public init(
            groupName: Swift.String? = nil,
            resourceQuery: ResourceGroupsClientTypes.ResourceQuery? = nil
        )
        {
            self.groupName = groupName
            self.resourceQuery = resourceQuery
        }
    }
}

public struct GetGroupQueryOutput: Swift.Sendable {
    /// The resource query associated with the specified group. For more information about resource queries, see [Create a tag-based group in Resource Groups](https://docs.aws.amazon.com/ARG/latest/userguide/gettingstarted-query.html#gettingstarted-query-cli-tag).
    public var groupQuery: ResourceGroupsClientTypes.GroupQuery?

    public init(
        groupQuery: ResourceGroupsClientTypes.GroupQuery? = nil
    )
    {
        self.groupQuery = groupQuery
    }
}

public struct GetTagsInput: Swift.Sendable {
    /// The Amazon resource name (ARN) of the resource group whose tags you want to retrieve.
    /// This member is required.
    public var arn: Swift.String?

    public init(
        arn: Swift.String? = nil
    )
    {
        self.arn = arn
    }
}

public struct GetTagsOutput: Swift.Sendable {
    /// TheAmazon resource name (ARN) of the tagged resource group.
    public var arn: Swift.String?
    /// The tags associated with the specified resource group.
    public var tags: [Swift.String: Swift.String]?

    public init(
        arn: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.arn = arn
        self.tags = tags
    }
}

public struct GetTagSyncTaskInput: Swift.Sendable {
    /// The Amazon resource name (ARN) of the tag-sync task.
    /// This member is required.
    public var taskArn: Swift.String?

    public init(
        taskArn: Swift.String? = nil
    )
    {
        self.taskArn = taskArn
    }
}

extension ResourceGroupsClientTypes {

    public enum TagSyncTaskStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case error
        case sdkUnknown(Swift.String)

        public static var allCases: [TagSyncTaskStatus] {
            return [
                .active,
                .error
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .error: return "ERROR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetTagSyncTaskOutput: Swift.Sendable {
    /// The timestamp of when the tag-sync task was created.
    public var createdAt: Foundation.Date?
    /// The specific error message in cases where the tag-sync task status is ERROR.
    public var errorMessage: Swift.String?
    /// The Amazon resource name (ARN) of the application group.
    public var groupArn: Swift.String?
    /// The name of the application group.
    public var groupName: Swift.String?
    /// The Amazon resource name (ARN) of the role assumed by Resource Groups to tag and untag resources on your behalf. For more information about this role, review [Tag-sync required permissions](https://docs.aws.amazon.com/servicecatalog/latest/arguide/app-tag-sync.html#tag-sync-role).
    public var roleArn: Swift.String?
    /// The status of the tag-sync task. Valid values include:
    ///
    /// * ACTIVE - The tag-sync task is actively managing resources in the application by adding or removing the awsApplication tag from resources when they are tagged or untagged with the specified tag key-value pair.
    ///
    /// * ERROR - The tag-sync task is not actively managing resources in the application. Review the ErrorMessage for more information about resolving the error.
    public var status: ResourceGroupsClientTypes.TagSyncTaskStatus?
    /// The tag key.
    public var tagKey: Swift.String?
    /// The tag value.
    public var tagValue: Swift.String?
    /// The Amazon resource name (ARN) of the tag-sync task.
    public var taskArn: Swift.String?

    public init(
        createdAt: Foundation.Date? = nil,
        errorMessage: Swift.String? = nil,
        groupArn: Swift.String? = nil,
        groupName: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        status: ResourceGroupsClientTypes.TagSyncTaskStatus? = nil,
        tagKey: Swift.String? = nil,
        tagValue: Swift.String? = nil,
        taskArn: Swift.String? = nil
    )
    {
        self.createdAt = createdAt
        self.errorMessage = errorMessage
        self.groupArn = groupArn
        self.groupName = groupName
        self.roleArn = roleArn
        self.status = status
        self.tagKey = tagKey
        self.tagValue = tagValue
        self.taskArn = taskArn
    }
}

public struct GroupResourcesInput: Swift.Sendable {
    /// The name or the Amazon resource name (ARN) of the resource group to add resources to.
    /// This member is required.
    public var group: Swift.String?
    /// The list of Amazon resource names (ARNs) of the resources to be added to the group.
    /// This member is required.
    public var resourceArns: [Swift.String]?

    public init(
        group: Swift.String? = nil,
        resourceArns: [Swift.String]? = nil
    )
    {
        self.group = group
        self.resourceArns = resourceArns
    }
}

extension ResourceGroupsClientTypes {

    /// A resource that failed to be added to or removed from a group.
    public struct FailedResource: Swift.Sendable {
        /// The error code associated with the failure.
        public var errorCode: Swift.String?
        /// The error message text associated with the failure.
        public var errorMessage: Swift.String?
        /// The Amazon resource name (ARN) of the resource that failed to be added or removed.
        public var resourceArn: Swift.String?

        public init(
            errorCode: Swift.String? = nil,
            errorMessage: Swift.String? = nil,
            resourceArn: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.resourceArn = resourceArn
        }
    }
}

extension ResourceGroupsClientTypes {

    /// A structure that identifies a resource that is currently pending addition to the group as a member. Adding a resource to a resource group happens asynchronously as a background task and this one isn't completed yet.
    public struct PendingResource: Swift.Sendable {
        /// The Amazon resource name (ARN) of the resource that's in a pending state.
        public var resourceArn: Swift.String?

        public init(
            resourceArn: Swift.String? = nil
        )
        {
            self.resourceArn = resourceArn
        }
    }
}

public struct GroupResourcesOutput: Swift.Sendable {
    /// A list of Amazon resource names (ARNs) of any resources that this operation failed to add to the group.
    public var failed: [ResourceGroupsClientTypes.FailedResource]?
    /// A list of Amazon resource names (ARNs) of any resources that this operation is still in the process adding to the group. These pending additions continue asynchronously. You can check the status of pending additions by using the [ListGroupResources] operation, and checking the Resources array in the response and the Status field of each object in that array.
    public var pending: [ResourceGroupsClientTypes.PendingResource]?
    /// A list of Amazon resource names (ARNs) of the resources that this operation successfully added to the group.
    public var succeeded: [Swift.String]?

    public init(
        failed: [ResourceGroupsClientTypes.FailedResource]? = nil,
        pending: [ResourceGroupsClientTypes.PendingResource]? = nil,
        succeeded: [Swift.String]? = nil
    )
    {
        self.failed = failed
        self.pending = pending
        self.succeeded = succeeded
    }
}

extension ResourceGroupsClientTypes {

    public enum ListGroupingStatusesFilterName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case resourcearn
        case status
        case sdkUnknown(Swift.String)

        public static var allCases: [ListGroupingStatusesFilterName] {
            return [
                .resourcearn,
                .status
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .resourcearn: return "resource-arn"
            case .status: return "status"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResourceGroupsClientTypes {

    /// A filter name and value pair that is used to obtain more specific results from the list of grouping statuses.
    public struct ListGroupingStatusesFilter: Swift.Sendable {
        /// The name of the filter. Filter names are case-sensitive.
        /// This member is required.
        public var name: ResourceGroupsClientTypes.ListGroupingStatusesFilterName?
        /// One or more filter values. Allowed filter values vary by resource filter name, and are case-sensitive.
        /// This member is required.
        public var values: [Swift.String]?

        public init(
            name: ResourceGroupsClientTypes.ListGroupingStatusesFilterName? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }
}

public struct ListGroupingStatusesInput: Swift.Sendable {
    /// The filter name and value pair that is used to return more specific results from a list of resources.
    public var filters: [ResourceGroupsClientTypes.ListGroupingStatusesFilter]?
    /// The application group identifier, expressed as an Amazon resource name (ARN) or the application group name.
    /// This member is required.
    public var group: Swift.String?
    /// The maximum number of resources and their statuses returned in the response.
    public var maxResults: Swift.Int?
    /// The parameter for receiving additional results if you receive a NextToken response in a previous request. A NextToken response indicates that more output is available. Set this parameter to the value provided by a previous call's NextToken response to indicate where the output should continue from.
    public var nextToken: Swift.String?

    public init(
        filters: [ResourceGroupsClientTypes.ListGroupingStatusesFilter]? = nil,
        group: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filters = filters
        self.group = group
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension ResourceGroupsClientTypes {

    public enum GroupingType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case group
        case ungroup
        case sdkUnknown(Swift.String)

        public static var allCases: [GroupingType] {
            return [
                .group,
                .ungroup
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .group: return "GROUP"
            case .ungroup: return "UNGROUP"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResourceGroupsClientTypes {

    public enum GroupingStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case inProgress
        case skipped
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [GroupingStatus] {
            return [
                .failed,
                .inProgress,
                .skipped,
                .success
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .skipped: return "SKIPPED"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResourceGroupsClientTypes {

    /// The information about a grouping or ungrouping resource action.
    public struct GroupingStatusesItem: Swift.Sendable {
        /// Describes the resource grouping action with values of GROUP or UNGROUP.
        public var action: ResourceGroupsClientTypes.GroupingType?
        /// Specifies the error code that was raised.
        public var errorCode: Swift.String?
        /// A message that explains the ErrorCode.
        public var errorMessage: Swift.String?
        /// The Amazon resource name (ARN) of a resource.
        public var resourceArn: Swift.String?
        /// Describes the resource grouping status with values of SUCCESS, FAILED, IN_PROGRESS, or SKIPPED.
        public var status: ResourceGroupsClientTypes.GroupingStatus?
        /// A timestamp of when the status was last updated.
        public var updatedAt: Foundation.Date?

        public init(
            action: ResourceGroupsClientTypes.GroupingType? = nil,
            errorCode: Swift.String? = nil,
            errorMessage: Swift.String? = nil,
            resourceArn: Swift.String? = nil,
            status: ResourceGroupsClientTypes.GroupingStatus? = nil,
            updatedAt: Foundation.Date? = nil
        )
        {
            self.action = action
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.resourceArn = resourceArn
            self.status = status
            self.updatedAt = updatedAt
        }
    }
}

public struct ListGroupingStatusesOutput: Swift.Sendable {
    /// The application group identifier, expressed as an Amazon resource name (ARN) or the application group name.
    public var group: Swift.String?
    /// Returns details about the grouping or ungrouping status of the resources in the specified application group.
    public var groupingStatuses: [ResourceGroupsClientTypes.GroupingStatusesItem]?
    /// If present, indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
    public var nextToken: Swift.String?

    public init(
        group: Swift.String? = nil,
        groupingStatuses: [ResourceGroupsClientTypes.GroupingStatusesItem]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.group = group
        self.groupingStatuses = groupingStatuses
        self.nextToken = nextToken
    }
}

extension ResourceGroupsClientTypes {

    public enum ResourceFilterName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case resourcetype
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceFilterName] {
            return [
                .resourcetype
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .resourcetype: return "resource-type"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResourceGroupsClientTypes {

    /// A filter name and value pair that is used to obtain more specific results from a list of resources.
    public struct ResourceFilter: Swift.Sendable {
        /// The name of the filter. Filter names are case-sensitive.
        /// This member is required.
        public var name: ResourceGroupsClientTypes.ResourceFilterName?
        /// One or more filter values. Allowed filter values vary by resource filter name, and are case-sensitive.
        /// This member is required.
        public var values: [Swift.String]?

        public init(
            name: ResourceGroupsClientTypes.ResourceFilterName? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }
}

public struct ListGroupResourcesInput: Swift.Sendable {
    /// Filters, formatted as [ResourceFilter] objects, that you want to apply to a ListGroupResources operation. Filters the results to include only those of the specified resource types.
    ///
    /// * resource-type - Filter resources by their type. Specify up to five resource types in the format AWS::ServiceCode::ResourceType. For example, AWS::EC2::Instance, or AWS::S3::Bucket.
    ///
    ///
    /// When you specify a resource-type filter for ListGroupResources, Resource Groups validates your filter resource types against the types that are defined in the query associated with the group. For example, if a group contains only S3 buckets because its query specifies only that resource type, but your resource-type filter includes EC2 instances, AWS Resource Groups does not filter for EC2 instances. In this case, a ListGroupResources request returns a BadRequestException error with a message similar to the following: The resource types specified as filters in the request are not valid. The error includes a list of resource types that failed the validation because they are not part of the query associated with the group. This validation doesn't occur when the group query specifies AWS::AllSupported, because a group based on such a query can contain any of the allowed resource types for the query type (tag-based or Amazon CloudFront stack-based queries).
    public var filters: [ResourceGroupsClientTypes.ResourceFilter]?
    /// The name or the Amazon resource name (ARN) of the resource group.
    public var group: Swift.String?
    /// Deprecated - don't use this parameter. Use the Group request field instead.
    @available(*, deprecated, message: "This field is deprecated, use Group instead.")
    public var groupName: Swift.String?
    /// The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that the service might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// The parameter for receiving additional results if you receive a NextToken response in a previous request. A NextToken response indicates that more output is available. Set this parameter to the value provided by a previous call's NextToken response to indicate where the output should continue from.
    public var nextToken: Swift.String?

    public init(
        filters: [ResourceGroupsClientTypes.ResourceFilter]? = nil,
        group: Swift.String? = nil,
        groupName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filters = filters
        self.group = group
        self.groupName = groupName
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension ResourceGroupsClientTypes {

    public enum QueryErrorCode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cloudformationStackInactive
        case cloudformationStackNotExisting
        case cloudformationStackUnassumableRole
        case resourceTypeNotSupported
        case sdkUnknown(Swift.String)

        public static var allCases: [QueryErrorCode] {
            return [
                .cloudformationStackInactive,
                .cloudformationStackNotExisting,
                .cloudformationStackUnassumableRole,
                .resourceTypeNotSupported
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cloudformationStackInactive: return "CLOUDFORMATION_STACK_INACTIVE"
            case .cloudformationStackNotExisting: return "CLOUDFORMATION_STACK_NOT_EXISTING"
            case .cloudformationStackUnassumableRole: return "CLOUDFORMATION_STACK_UNASSUMABLE_ROLE"
            case .resourceTypeNotSupported: return "RESOURCE_TYPE_NOT_SUPPORTED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResourceGroupsClientTypes {

    /// A two-part error structure that can occur in ListGroupResources or SearchResources.
    public struct QueryError: Swift.Sendable {
        /// Specifies the error code that was raised.
        public var errorCode: ResourceGroupsClientTypes.QueryErrorCode?
        /// A message that explains the ErrorCode.
        public var message: Swift.String?

        public init(
            errorCode: ResourceGroupsClientTypes.QueryErrorCode? = nil,
            message: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.message = message
        }
    }
}

extension ResourceGroupsClientTypes {

    /// A structure that contains the ARN of a resource and its resource type.
    public struct ResourceIdentifier: Swift.Sendable {
        /// The Amazon resource name (ARN) of a resource.
        public var resourceArn: Swift.String?
        /// The resource type of a resource, such as AWS::EC2::Instance.
        public var resourceType: Swift.String?

        public init(
            resourceArn: Swift.String? = nil,
            resourceType: Swift.String? = nil
        )
        {
            self.resourceArn = resourceArn
            self.resourceType = resourceType
        }
    }
}

extension ResourceGroupsClientTypes {

    public enum ResourceStatusValue: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceStatusValue] {
            return [
                .pending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .pending: return "PENDING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResourceGroupsClientTypes {

    /// A structure that identifies the current group membership status for a resource. Adding a resource to a resource group is performed asynchronously as a background task. A PENDING status indicates, for this resource, that the process isn't completed yet.
    public struct ResourceStatus: Swift.Sendable {
        /// The current status.
        public var name: ResourceGroupsClientTypes.ResourceStatusValue?

        public init(
            name: ResourceGroupsClientTypes.ResourceStatusValue? = nil
        )
        {
            self.name = name
        }
    }
}

extension ResourceGroupsClientTypes {

    /// A structure returned by the [ListGroupResources] operation that contains identity and group membership status information for one of the resources in the group.
    public struct ListGroupResourcesItem: Swift.Sendable {
        /// A structure that contains the ARN of a resource and its resource type.
        public var identifier: ResourceGroupsClientTypes.ResourceIdentifier?
        /// A structure that contains the status of this resource's membership in the group. This field is present in the response only if the group is of type AWS::EC2::HostManagement.
        public var status: ResourceGroupsClientTypes.ResourceStatus?

        public init(
            identifier: ResourceGroupsClientTypes.ResourceIdentifier? = nil,
            status: ResourceGroupsClientTypes.ResourceStatus? = nil
        )
        {
            self.identifier = identifier
            self.status = status
        }
    }
}

public struct ListGroupResourcesOutput: Swift.Sendable {
    /// If present, indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
    public var nextToken: Swift.String?
    /// A list of QueryError objects. Each error contains an ErrorCode and Message. Possible values for ErrorCode are CLOUDFORMATION_STACK_INACTIVE, CLOUDFORMATION_STACK_NOT_EXISTING, CLOUDFORMATION_STACK_UNASSUMABLE_ROLE and RESOURCE_TYPE_NOT_SUPPORTED.
    public var queryErrors: [ResourceGroupsClientTypes.QueryError]?
    /// Deprecated - don't use this parameter. Use the Resources response field instead.
    @available(*, deprecated, message: "This field is deprecated, use Resources instead.")
    public var resourceIdentifiers: [ResourceGroupsClientTypes.ResourceIdentifier]?
    /// An array of resources from which you can determine each resource's identity, type, and group membership status.
    public var resources: [ResourceGroupsClientTypes.ListGroupResourcesItem]?

    public init(
        nextToken: Swift.String? = nil,
        queryErrors: [ResourceGroupsClientTypes.QueryError]? = nil,
        resourceIdentifiers: [ResourceGroupsClientTypes.ResourceIdentifier]? = nil,
        resources: [ResourceGroupsClientTypes.ListGroupResourcesItem]? = nil
    )
    {
        self.nextToken = nextToken
        self.queryErrors = queryErrors
        self.resourceIdentifiers = resourceIdentifiers
        self.resources = resources
    }
}

extension ResourceGroupsClientTypes {

    public enum GroupFilterName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case configurationtype
        case criticality
        case displayname
        case owner
        case resourcetype
        case sdkUnknown(Swift.String)

        public static var allCases: [GroupFilterName] {
            return [
                .configurationtype,
                .criticality,
                .displayname,
                .owner,
                .resourcetype
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .configurationtype: return "configuration-type"
            case .criticality: return "criticality"
            case .displayname: return "display-name"
            case .owner: return "owner"
            case .resourcetype: return "resource-type"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ResourceGroupsClientTypes {

    /// A filter collection that you can use to restrict the results from a List operation to only those you want to include.
    public struct GroupFilter: Swift.Sendable {
        /// The name of the filter. Filter names are case-sensitive.
        /// This member is required.
        public var name: ResourceGroupsClientTypes.GroupFilterName?
        /// One or more filter values. Allowed filter values vary by group filter name, and are case-sensitive.
        /// This member is required.
        public var values: [Swift.String]?

        public init(
            name: ResourceGroupsClientTypes.GroupFilterName? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }
}

public struct ListGroupsInput: Swift.Sendable {
    /// Filters, formatted as [GroupFilter] objects, that you want to apply to a ListGroups operation.
    ///
    /// * resource-type - Filter the results to include only those resource groups that have the specified resource type in their ResourceTypeFilter. For example, AWS::EC2::Instance would return any resource group with a ResourceTypeFilter that includes AWS::EC2::Instance.
    ///
    /// * configuration-type - Filter the results to include only those groups that have the specified configuration types attached. The current supported values are:
    ///
    /// * AWS::ResourceGroups::ApplicationGroup
    ///
    /// * AWS::AppRegistry::Application
    ///
    /// * AWS::AppRegistry::ApplicationResourceGroups
    ///
    /// * AWS::CloudFormation::Stack
    ///
    /// * AWS::EC2::CapacityReservationPool
    ///
    /// * AWS::EC2::HostManagement
    ///
    /// * AWS::NetworkFirewall::RuleGroup
    public var filters: [ResourceGroupsClientTypes.GroupFilter]?
    /// The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that the service might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// The parameter for receiving additional results if you receive a NextToken response in a previous request. A NextToken response indicates that more output is available. Set this parameter to the value provided by a previous call's NextToken response to indicate where the output should continue from.
    public var nextToken: Swift.String?

    public init(
        filters: [ResourceGroupsClientTypes.GroupFilter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension ResourceGroupsClientTypes {

    /// The unique identifiers for a resource group.
    public struct GroupIdentifier: Swift.Sendable {
        /// The critical rank of the application group on a scale of 1 to 10, with a rank of 1 being the most critical, and a rank of 10 being least critical.
        public var criticality: Swift.Int?
        /// The description of the application group.
        public var description: Swift.String?
        /// The name of the application group, which you can change at any time.
        public var displayName: Swift.String?
        /// The Amazon resource name (ARN) of the resource group.
        public var groupArn: Swift.String?
        /// The name of the resource group.
        public var groupName: Swift.String?
        /// A name, email address or other identifier for the person or group who is considered as the owner of this group within your organization.
        public var owner: Swift.String?

        public init(
            criticality: Swift.Int? = nil,
            description: Swift.String? = nil,
            displayName: Swift.String? = nil,
            groupArn: Swift.String? = nil,
            groupName: Swift.String? = nil,
            owner: Swift.String? = nil
        )
        {
            self.criticality = criticality
            self.description = description
            self.displayName = displayName
            self.groupArn = groupArn
            self.groupName = groupName
            self.owner = owner
        }
    }
}

public struct ListGroupsOutput: Swift.Sendable {
    /// A list of [GroupIdentifier] objects. Each identifier is an object that contains both the Name and the GroupArn.
    public var groupIdentifiers: [ResourceGroupsClientTypes.GroupIdentifier]?
    /// Deprecated - don't use this field. Use the GroupIdentifiers response field instead.
    @available(*, deprecated, message: "This field is deprecated, use GroupIdentifiers instead.")
    public var groups: [ResourceGroupsClientTypes.Group]?
    /// If present, indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
    public var nextToken: Swift.String?

    public init(
        groupIdentifiers: [ResourceGroupsClientTypes.GroupIdentifier]? = nil,
        groups: [ResourceGroupsClientTypes.Group]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.groupIdentifiers = groupIdentifiers
        self.groups = groups
        self.nextToken = nextToken
    }
}

extension ResourceGroupsClientTypes {

    /// Returns tag-sync tasks filtered by the Amazon resource name (ARN) or name of a specified application group.
    public struct ListTagSyncTasksFilter: Swift.Sendable {
        /// The Amazon resource name (ARN) of the application group.
        public var groupArn: Swift.String?
        /// The name of the application group.
        public var groupName: Swift.String?

        public init(
            groupArn: Swift.String? = nil,
            groupName: Swift.String? = nil
        )
        {
            self.groupArn = groupArn
            self.groupName = groupName
        }
    }
}

public struct ListTagSyncTasksInput: Swift.Sendable {
    /// The Amazon resource name (ARN) or name of the application group for which you want to return a list of tag-sync tasks.
    public var filters: [ResourceGroupsClientTypes.ListTagSyncTasksFilter]?
    /// The maximum number of results to be included in the response.
    public var maxResults: Swift.Int?
    /// The parameter for receiving additional results if you receive a NextToken response in a previous request. A NextToken response indicates that more output is available. Set this parameter to the value provided by a previous call's NextToken response to indicate where the output should continue from.
    public var nextToken: Swift.String?

    public init(
        filters: [ResourceGroupsClientTypes.ListTagSyncTasksFilter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension ResourceGroupsClientTypes {

    /// The Amazon resource name (ARN) of the tag-sync task.
    public struct TagSyncTaskItem: Swift.Sendable {
        /// The timestamp of when the tag-sync task was created.
        public var createdAt: Foundation.Date?
        /// The specific error message in cases where the tag-sync task status is Error.
        public var errorMessage: Swift.String?
        /// The Amazon resource name (ARN) of the application group.
        public var groupArn: Swift.String?
        /// The name of the application group.
        public var groupName: Swift.String?
        /// The Amazon resource name (ARN) of the role assumed by the service to tag and untag resources on your behalf.
        public var roleArn: Swift.String?
        /// The status of the tag-sync task. Valid values include:
        ///
        /// * ACTIVE - The tag-sync task is actively managing resources in the application by adding or removing the awsApplication tag from resources when they are tagged or untagged with the specified tag key-value pair.
        ///
        /// * ERROR - The tag-sync task is not actively managing resources in the application. Review the ErrorMessage for more information about resolving the error.
        public var status: ResourceGroupsClientTypes.TagSyncTaskStatus?
        /// The tag key.
        public var tagKey: Swift.String?
        /// The tag value.
        public var tagValue: Swift.String?
        /// The Amazon resource name (ARN) of the tag-sync task.
        public var taskArn: Swift.String?

        public init(
            createdAt: Foundation.Date? = nil,
            errorMessage: Swift.String? = nil,
            groupArn: Swift.String? = nil,
            groupName: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            status: ResourceGroupsClientTypes.TagSyncTaskStatus? = nil,
            tagKey: Swift.String? = nil,
            tagValue: Swift.String? = nil,
            taskArn: Swift.String? = nil
        )
        {
            self.createdAt = createdAt
            self.errorMessage = errorMessage
            self.groupArn = groupArn
            self.groupName = groupName
            self.roleArn = roleArn
            self.status = status
            self.tagKey = tagKey
            self.tagValue = tagValue
            self.taskArn = taskArn
        }
    }
}

public struct ListTagSyncTasksOutput: Swift.Sendable {
    /// If present, indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
    public var nextToken: Swift.String?
    /// A list of tag-sync tasks and information about each task.
    public var tagSyncTasks: [ResourceGroupsClientTypes.TagSyncTaskItem]?

    public init(
        nextToken: Swift.String? = nil,
        tagSyncTasks: [ResourceGroupsClientTypes.TagSyncTaskItem]? = nil
    )
    {
        self.nextToken = nextToken
        self.tagSyncTasks = tagSyncTasks
    }
}

public struct PutGroupConfigurationInput: Swift.Sendable {
    /// The new configuration to associate with the specified group. A configuration associates the resource group with an Amazon Web Services service and specifies how the service can interact with the resources in the group. A configuration is an array of [GroupConfigurationItem] elements. For information about the syntax of a service configuration, see [Service configurations for Resource Groups](https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html). A resource group can contain either a Configuration or a ResourceQuery, but not both.
    public var configuration: [ResourceGroupsClientTypes.GroupConfigurationItem]?
    /// The name or Amazon resource name (ARN) of the resource group with the configuration that you want to update.
    public var group: Swift.String?

    public init(
        configuration: [ResourceGroupsClientTypes.GroupConfigurationItem]? = nil,
        group: Swift.String? = nil
    )
    {
        self.configuration = configuration
        self.group = group
    }
}

public struct PutGroupConfigurationOutput: Swift.Sendable {

    public init() { }
}

public struct SearchResourcesInput: Swift.Sendable {
    /// The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that the service might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// The parameter for receiving additional results if you receive a NextToken response in a previous request. A NextToken response indicates that more output is available. Set this parameter to the value provided by a previous call's NextToken response to indicate where the output should continue from.
    public var nextToken: Swift.String?
    /// The search query, using the same formats that are supported for resource group definition. For more information, see [CreateGroup].
    /// This member is required.
    public var resourceQuery: ResourceGroupsClientTypes.ResourceQuery?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceQuery: ResourceGroupsClientTypes.ResourceQuery? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceQuery = resourceQuery
    }
}

public struct SearchResourcesOutput: Swift.Sendable {
    /// If present, indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
    public var nextToken: Swift.String?
    /// A list of QueryError objects. Each error contains an ErrorCode and Message. Possible values for ErrorCode:
    ///
    /// * CLOUDFORMATION_STACK_INACTIVE
    ///
    /// * CLOUDFORMATION_STACK_NOT_EXISTING
    ///
    /// * CLOUDFORMATION_STACK_UNASSUMABLE_ROLE
    public var queryErrors: [ResourceGroupsClientTypes.QueryError]?
    /// The ARNs and resource types of resources that are members of the group that you specified.
    public var resourceIdentifiers: [ResourceGroupsClientTypes.ResourceIdentifier]?

    public init(
        nextToken: Swift.String? = nil,
        queryErrors: [ResourceGroupsClientTypes.QueryError]? = nil,
        resourceIdentifiers: [ResourceGroupsClientTypes.ResourceIdentifier]? = nil
    )
    {
        self.nextToken = nextToken
        self.queryErrors = queryErrors
        self.resourceIdentifiers = resourceIdentifiers
    }
}

public struct StartTagSyncTaskInput: Swift.Sendable {
    /// The Amazon resource name (ARN) or name of the application group for which you want to create a tag-sync task.
    /// This member is required.
    public var group: Swift.String?
    /// The Amazon resource name (ARN) of the role assumed by the service to tag and untag resources on your behalf.
    /// This member is required.
    public var roleArn: Swift.String?
    /// The tag key. Resources tagged with this tag key-value pair will be added to the application. If a resource with this tag is later untagged, the tag-sync task removes the resource from the application.
    /// This member is required.
    public var tagKey: Swift.String?
    /// The tag value. Resources tagged with this tag key-value pair will be added to the application. If a resource with this tag is later untagged, the tag-sync task removes the resource from the application.
    /// This member is required.
    public var tagValue: Swift.String?

    public init(
        group: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        tagKey: Swift.String? = nil,
        tagValue: Swift.String? = nil
    )
    {
        self.group = group
        self.roleArn = roleArn
        self.tagKey = tagKey
        self.tagValue = tagValue
    }
}

public struct StartTagSyncTaskOutput: Swift.Sendable {
    /// The Amazon resource name (ARN) of the application group for which you want to add or remove resources.
    public var groupArn: Swift.String?
    /// The name of the application group to onboard and sync resources.
    public var groupName: Swift.String?
    /// The Amazon resource name (ARN) of the role assumed by the service to tag and untag resources on your behalf.
    public var roleArn: Swift.String?
    /// The tag key of the tag-sync task.
    public var tagKey: Swift.String?
    /// The tag value of the tag-sync task.
    public var tagValue: Swift.String?
    /// The Amazon resource name (ARN) of the new tag-sync task.
    public var taskArn: Swift.String?

    public init(
        groupArn: Swift.String? = nil,
        groupName: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        tagKey: Swift.String? = nil,
        tagValue: Swift.String? = nil,
        taskArn: Swift.String? = nil
    )
    {
        self.groupArn = groupArn
        self.groupName = groupName
        self.roleArn = roleArn
        self.tagKey = tagKey
        self.tagValue = tagValue
        self.taskArn = taskArn
    }
}

public struct TagInput: Swift.Sendable {
    /// The Amazon resource name (ARN) of the resource group to which to add tags.
    /// This member is required.
    public var arn: Swift.String?
    /// The tags to add to the specified resource group. A tag is a string-to-string map of key-value pairs.
    /// This member is required.
    public var tags: [Swift.String: Swift.String]?

    public init(
        arn: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.arn = arn
        self.tags = tags
    }
}

public struct TagOutput: Swift.Sendable {
    /// The Amazon resource name (ARN) of the tagged resource.
    public var arn: Swift.String?
    /// The tags that have been added to the specified resource group.
    public var tags: [Swift.String: Swift.String]?

    public init(
        arn: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.arn = arn
        self.tags = tags
    }
}

public struct UngroupResourcesInput: Swift.Sendable {
    /// The name or the Amazon resource name (ARN) of the resource group from which to remove the resources.
    /// This member is required.
    public var group: Swift.String?
    /// The Amazon resource names (ARNs) of the resources to be removed from the group.
    /// This member is required.
    public var resourceArns: [Swift.String]?

    public init(
        group: Swift.String? = nil,
        resourceArns: [Swift.String]? = nil
    )
    {
        self.group = group
        self.resourceArns = resourceArns
    }
}

public struct UngroupResourcesOutput: Swift.Sendable {
    /// A list of any resources that failed to be removed from the group by this operation.
    public var failed: [ResourceGroupsClientTypes.FailedResource]?
    /// A list of any resources that are still in the process of being removed from the group by this operation. These pending removals continue asynchronously. You can check the status of pending removals by using the [ListGroupResources] operation. After the resource is successfully removed, it no longer appears in the response.
    public var pending: [ResourceGroupsClientTypes.PendingResource]?
    /// A list of resources that were successfully removed from the group by this operation.
    public var succeeded: [Swift.String]?

    public init(
        failed: [ResourceGroupsClientTypes.FailedResource]? = nil,
        pending: [ResourceGroupsClientTypes.PendingResource]? = nil,
        succeeded: [Swift.String]? = nil
    )
    {
        self.failed = failed
        self.pending = pending
        self.succeeded = succeeded
    }
}

public struct UntagInput: Swift.Sendable {
    /// The Amazon resource name (ARN) of the resource group from which to remove tags. The command removed both the specified keys and any values associated with those keys.
    /// This member is required.
    public var arn: Swift.String?
    /// The keys of the tags to be removed.
    /// This member is required.
    public var keys: [Swift.String]?

    public init(
        arn: Swift.String? = nil,
        keys: [Swift.String]? = nil
    )
    {
        self.arn = arn
        self.keys = keys
    }
}

public struct UntagOutput: Swift.Sendable {
    /// The Amazon resource name (ARN) of the resource group from which tags have been removed.
    public var arn: Swift.String?
    /// The keys of the tags that were removed.
    public var keys: [Swift.String]?

    public init(
        arn: Swift.String? = nil,
        keys: [Swift.String]? = nil
    )
    {
        self.arn = arn
        self.keys = keys
    }
}

public struct UpdateAccountSettingsInput: Swift.Sendable {
    /// Specifies whether you want to turn [group lifecycle events](https://docs.aws.amazon.com/ARG/latest/userguide/monitor-groups.html) on or off. You can't turn on group lifecycle events if your resource groups quota is greater than 2,000.
    public var groupLifecycleEventsDesiredStatus: ResourceGroupsClientTypes.GroupLifecycleEventsDesiredStatus?

    public init(
        groupLifecycleEventsDesiredStatus: ResourceGroupsClientTypes.GroupLifecycleEventsDesiredStatus? = nil
    )
    {
        self.groupLifecycleEventsDesiredStatus = groupLifecycleEventsDesiredStatus
    }
}

public struct UpdateAccountSettingsOutput: Swift.Sendable {
    /// A structure that displays the status of the optional features in the account.
    public var accountSettings: ResourceGroupsClientTypes.AccountSettings?

    public init(
        accountSettings: ResourceGroupsClientTypes.AccountSettings? = nil
    )
    {
        self.accountSettings = accountSettings
    }
}

public struct UpdateGroupInput: Swift.Sendable {
    /// The critical rank of the application group on a scale of 1 to 10, with a rank of 1 being the most critical, and a rank of 10 being least critical.
    public var criticality: Swift.Int?
    /// The new description that you want to update the resource group with. Descriptions can contain letters, numbers, hyphens, underscores, periods, and spaces.
    public var description: Swift.String?
    /// The name of the application group, which you can change at any time.
    public var displayName: Swift.String?
    /// The name or the ARN of the resource group to update.
    public var group: Swift.String?
    /// Don't use this parameter. Use Group instead.
    @available(*, deprecated, message: "This field is deprecated, use Group instead.")
    public var groupName: Swift.String?
    /// A name, email address or other identifier for the person or group who is considered as the owner of this application group within your organization.
    public var owner: Swift.String?

    public init(
        criticality: Swift.Int? = nil,
        description: Swift.String? = nil,
        displayName: Swift.String? = nil,
        group: Swift.String? = nil,
        groupName: Swift.String? = nil,
        owner: Swift.String? = nil
    )
    {
        self.criticality = criticality
        self.description = description
        self.displayName = displayName
        self.group = group
        self.groupName = groupName
        self.owner = owner
    }
}

public struct UpdateGroupOutput: Swift.Sendable {
    /// The update description of the resource group.
    public var group: ResourceGroupsClientTypes.Group?

    public init(
        group: ResourceGroupsClientTypes.Group? = nil
    )
    {
        self.group = group
    }
}

public struct UpdateGroupQueryInput: Swift.Sendable {
    /// The name or the Amazon resource name (ARN) of the resource group to query.
    public var group: Swift.String?
    /// Don't use this parameter. Use Group instead.
    @available(*, deprecated, message: "This field is deprecated, use Group instead.")
    public var groupName: Swift.String?
    /// The resource query to determine which Amazon Web Services resources are members of this resource group. A resource group can contain either a Configuration or a ResourceQuery, but not both.
    /// This member is required.
    public var resourceQuery: ResourceGroupsClientTypes.ResourceQuery?

    public init(
        group: Swift.String? = nil,
        groupName: Swift.String? = nil,
        resourceQuery: ResourceGroupsClientTypes.ResourceQuery? = nil
    )
    {
        self.group = group
        self.groupName = groupName
        self.resourceQuery = resourceQuery
    }
}

public struct UpdateGroupQueryOutput: Swift.Sendable {
    /// The updated resource query associated with the resource group after the update.
    public var groupQuery: ResourceGroupsClientTypes.GroupQuery?

    public init(
        groupQuery: ResourceGroupsClientTypes.GroupQuery? = nil
    )
    {
        self.groupQuery = groupQuery
    }
}

extension CancelTagSyncTaskInput {

    static func urlPathProvider(_ value: CancelTagSyncTaskInput) -> Swift.String? {
        return "/cancel-tag-sync-task"
    }
}

extension CreateGroupInput {

    static func urlPathProvider(_ value: CreateGroupInput) -> Swift.String? {
        return "/groups"
    }
}

extension DeleteGroupInput {

    static func urlPathProvider(_ value: DeleteGroupInput) -> Swift.String? {
        return "/delete-group"
    }
}

extension GetAccountSettingsInput {

    static func urlPathProvider(_ value: GetAccountSettingsInput) -> Swift.String? {
        return "/get-account-settings"
    }
}

extension GetGroupInput {

    static func urlPathProvider(_ value: GetGroupInput) -> Swift.String? {
        return "/get-group"
    }
}

extension GetGroupConfigurationInput {

    static func urlPathProvider(_ value: GetGroupConfigurationInput) -> Swift.String? {
        return "/get-group-configuration"
    }
}

extension GetGroupQueryInput {

    static func urlPathProvider(_ value: GetGroupQueryInput) -> Swift.String? {
        return "/get-group-query"
    }
}

extension GetTagsInput {

    static func urlPathProvider(_ value: GetTagsInput) -> Swift.String? {
        guard let arn = value.arn else {
            return nil
        }
        return "/resources/\(arn.urlPercentEncoding())/tags"
    }
}

extension GetTagSyncTaskInput {

    static func urlPathProvider(_ value: GetTagSyncTaskInput) -> Swift.String? {
        return "/get-tag-sync-task"
    }
}

extension GroupResourcesInput {

    static func urlPathProvider(_ value: GroupResourcesInput) -> Swift.String? {
        return "/group-resources"
    }
}

extension ListGroupingStatusesInput {

    static func urlPathProvider(_ value: ListGroupingStatusesInput) -> Swift.String? {
        return "/list-grouping-statuses"
    }
}

extension ListGroupResourcesInput {

    static func urlPathProvider(_ value: ListGroupResourcesInput) -> Swift.String? {
        return "/list-group-resources"
    }
}

extension ListGroupsInput {

    static func urlPathProvider(_ value: ListGroupsInput) -> Swift.String? {
        return "/groups-list"
    }
}

extension ListGroupsInput {

    static func queryItemProvider(_ value: ListGroupsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListTagSyncTasksInput {

    static func urlPathProvider(_ value: ListTagSyncTasksInput) -> Swift.String? {
        return "/list-tag-sync-tasks"
    }
}

extension PutGroupConfigurationInput {

    static func urlPathProvider(_ value: PutGroupConfigurationInput) -> Swift.String? {
        return "/put-group-configuration"
    }
}

extension SearchResourcesInput {

    static func urlPathProvider(_ value: SearchResourcesInput) -> Swift.String? {
        return "/resources/search"
    }
}

extension StartTagSyncTaskInput {

    static func urlPathProvider(_ value: StartTagSyncTaskInput) -> Swift.String? {
        return "/start-tag-sync-task"
    }
}

extension TagInput {

    static func urlPathProvider(_ value: TagInput) -> Swift.String? {
        guard let arn = value.arn else {
            return nil
        }
        return "/resources/\(arn.urlPercentEncoding())/tags"
    }
}

extension UngroupResourcesInput {

    static func urlPathProvider(_ value: UngroupResourcesInput) -> Swift.String? {
        return "/ungroup-resources"
    }
}

extension UntagInput {

    static func urlPathProvider(_ value: UntagInput) -> Swift.String? {
        guard let arn = value.arn else {
            return nil
        }
        return "/resources/\(arn.urlPercentEncoding())/tags"
    }
}

extension UpdateAccountSettingsInput {

    static func urlPathProvider(_ value: UpdateAccountSettingsInput) -> Swift.String? {
        return "/update-account-settings"
    }
}

extension UpdateGroupInput {

    static func urlPathProvider(_ value: UpdateGroupInput) -> Swift.String? {
        return "/update-group"
    }
}

extension UpdateGroupQueryInput {

    static func urlPathProvider(_ value: UpdateGroupQueryInput) -> Swift.String? {
        return "/update-group-query"
    }
}

extension CancelTagSyncTaskInput {

    static func write(value: CancelTagSyncTaskInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TaskArn"].write(value.taskArn)
    }
}

extension CreateGroupInput {

    static func write(value: CreateGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Configuration"].writeList(value.configuration, memberWritingClosure: ResourceGroupsClientTypes.GroupConfigurationItem.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Criticality"].write(value.criticality)
        try writer["Description"].write(value.description)
        try writer["DisplayName"].write(value.displayName)
        try writer["Name"].write(value.name)
        try writer["Owner"].write(value.owner)
        try writer["ResourceQuery"].write(value.resourceQuery, with: ResourceGroupsClientTypes.ResourceQuery.write(value:to:))
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension DeleteGroupInput {

    static func write(value: DeleteGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Group"].write(value.group)
        try writer["GroupName"].write(value.groupName)
    }
}

extension GetGroupInput {

    static func write(value: GetGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Group"].write(value.group)
        try writer["GroupName"].write(value.groupName)
    }
}

extension GetGroupConfigurationInput {

    static func write(value: GetGroupConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Group"].write(value.group)
    }
}

extension GetGroupQueryInput {

    static func write(value: GetGroupQueryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Group"].write(value.group)
        try writer["GroupName"].write(value.groupName)
    }
}

extension GetTagSyncTaskInput {

    static func write(value: GetTagSyncTaskInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TaskArn"].write(value.taskArn)
    }
}

extension GroupResourcesInput {

    static func write(value: GroupResourcesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Group"].write(value.group)
        try writer["ResourceArns"].writeList(value.resourceArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension ListGroupingStatusesInput {

    static func write(value: ListGroupingStatusesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Filters"].writeList(value.filters, memberWritingClosure: ResourceGroupsClientTypes.ListGroupingStatusesFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Group"].write(value.group)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListGroupResourcesInput {

    static func write(value: ListGroupResourcesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Filters"].writeList(value.filters, memberWritingClosure: ResourceGroupsClientTypes.ResourceFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Group"].write(value.group)
        try writer["GroupName"].write(value.groupName)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListGroupsInput {

    static func write(value: ListGroupsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Filters"].writeList(value.filters, memberWritingClosure: ResourceGroupsClientTypes.GroupFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension ListTagSyncTasksInput {

    static func write(value: ListTagSyncTasksInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Filters"].writeList(value.filters, memberWritingClosure: ResourceGroupsClientTypes.ListTagSyncTasksFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension PutGroupConfigurationInput {

    static func write(value: PutGroupConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Configuration"].writeList(value.configuration, memberWritingClosure: ResourceGroupsClientTypes.GroupConfigurationItem.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Group"].write(value.group)
    }
}

extension SearchResourcesInput {

    static func write(value: SearchResourcesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["ResourceQuery"].write(value.resourceQuery, with: ResourceGroupsClientTypes.ResourceQuery.write(value:to:))
    }
}

extension StartTagSyncTaskInput {

    static func write(value: StartTagSyncTaskInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Group"].write(value.group)
        try writer["RoleArn"].write(value.roleArn)
        try writer["TagKey"].write(value.tagKey)
        try writer["TagValue"].write(value.tagValue)
    }
}

extension TagInput {

    static func write(value: TagInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension UngroupResourcesInput {

    static func write(value: UngroupResourcesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Group"].write(value.group)
        try writer["ResourceArns"].writeList(value.resourceArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UntagInput {

    static func write(value: UntagInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Keys"].writeList(value.keys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateAccountSettingsInput {

    static func write(value: UpdateAccountSettingsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GroupLifecycleEventsDesiredStatus"].write(value.groupLifecycleEventsDesiredStatus)
    }
}

extension UpdateGroupInput {

    static func write(value: UpdateGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Criticality"].write(value.criticality)
        try writer["Description"].write(value.description)
        try writer["DisplayName"].write(value.displayName)
        try writer["Group"].write(value.group)
        try writer["GroupName"].write(value.groupName)
        try writer["Owner"].write(value.owner)
    }
}

extension UpdateGroupQueryInput {

    static func write(value: UpdateGroupQueryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Group"].write(value.group)
        try writer["GroupName"].write(value.groupName)
        try writer["ResourceQuery"].write(value.resourceQuery, with: ResourceGroupsClientTypes.ResourceQuery.write(value:to:))
    }
}

extension CancelTagSyncTaskOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CancelTagSyncTaskOutput {
        return CancelTagSyncTaskOutput()
    }
}

extension CreateGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateGroupOutput()
        value.group = try reader["Group"].readIfPresent(with: ResourceGroupsClientTypes.Group.read(from:))
        value.groupConfiguration = try reader["GroupConfiguration"].readIfPresent(with: ResourceGroupsClientTypes.GroupConfiguration.read(from:))
        value.resourceQuery = try reader["ResourceQuery"].readIfPresent(with: ResourceGroupsClientTypes.ResourceQuery.read(from:))
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension DeleteGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteGroupOutput()
        value.group = try reader["Group"].readIfPresent(with: ResourceGroupsClientTypes.Group.read(from:))
        return value
    }
}

extension GetAccountSettingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetAccountSettingsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetAccountSettingsOutput()
        value.accountSettings = try reader["AccountSettings"].readIfPresent(with: ResourceGroupsClientTypes.AccountSettings.read(from:))
        return value
    }
}

extension GetGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetGroupOutput()
        value.group = try reader["Group"].readIfPresent(with: ResourceGroupsClientTypes.Group.read(from:))
        return value
    }
}

extension GetGroupConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetGroupConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetGroupConfigurationOutput()
        value.groupConfiguration = try reader["GroupConfiguration"].readIfPresent(with: ResourceGroupsClientTypes.GroupConfiguration.read(from:))
        return value
    }
}

extension GetGroupQueryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetGroupQueryOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetGroupQueryOutput()
        value.groupQuery = try reader["GroupQuery"].readIfPresent(with: ResourceGroupsClientTypes.GroupQuery.read(from:))
        return value
    }
}

extension GetTagsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetTagsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetTagsOutput()
        value.arn = try reader["Arn"].readIfPresent()
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension GetTagSyncTaskOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetTagSyncTaskOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetTagSyncTaskOutput()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.errorMessage = try reader["ErrorMessage"].readIfPresent()
        value.groupArn = try reader["GroupArn"].readIfPresent()
        value.groupName = try reader["GroupName"].readIfPresent()
        value.roleArn = try reader["RoleArn"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.tagKey = try reader["TagKey"].readIfPresent()
        value.tagValue = try reader["TagValue"].readIfPresent()
        value.taskArn = try reader["TaskArn"].readIfPresent()
        return value
    }
}

extension GroupResourcesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GroupResourcesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GroupResourcesOutput()
        value.failed = try reader["Failed"].readListIfPresent(memberReadingClosure: ResourceGroupsClientTypes.FailedResource.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.pending = try reader["Pending"].readListIfPresent(memberReadingClosure: ResourceGroupsClientTypes.PendingResource.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.succeeded = try reader["Succeeded"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListGroupingStatusesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListGroupingStatusesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListGroupingStatusesOutput()
        value.group = try reader["Group"].readIfPresent()
        value.groupingStatuses = try reader["GroupingStatuses"].readListIfPresent(memberReadingClosure: ResourceGroupsClientTypes.GroupingStatusesItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListGroupResourcesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListGroupResourcesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListGroupResourcesOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.queryErrors = try reader["QueryErrors"].readListIfPresent(memberReadingClosure: ResourceGroupsClientTypes.QueryError.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.resourceIdentifiers = try reader["ResourceIdentifiers"].readListIfPresent(memberReadingClosure: ResourceGroupsClientTypes.ResourceIdentifier.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.resources = try reader["Resources"].readListIfPresent(memberReadingClosure: ResourceGroupsClientTypes.ListGroupResourcesItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListGroupsOutput()
        value.groupIdentifiers = try reader["GroupIdentifiers"].readListIfPresent(memberReadingClosure: ResourceGroupsClientTypes.GroupIdentifier.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.groups = try reader["Groups"].readListIfPresent(memberReadingClosure: ResourceGroupsClientTypes.Group.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListTagSyncTasksOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagSyncTasksOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagSyncTasksOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.tagSyncTasks = try reader["TagSyncTasks"].readListIfPresent(memberReadingClosure: ResourceGroupsClientTypes.TagSyncTaskItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PutGroupConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutGroupConfigurationOutput {
        return PutGroupConfigurationOutput()
    }
}

extension SearchResourcesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SearchResourcesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = SearchResourcesOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.queryErrors = try reader["QueryErrors"].readListIfPresent(memberReadingClosure: ResourceGroupsClientTypes.QueryError.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.resourceIdentifiers = try reader["ResourceIdentifiers"].readListIfPresent(memberReadingClosure: ResourceGroupsClientTypes.ResourceIdentifier.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension StartTagSyncTaskOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartTagSyncTaskOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartTagSyncTaskOutput()
        value.groupArn = try reader["GroupArn"].readIfPresent()
        value.groupName = try reader["GroupName"].readIfPresent()
        value.roleArn = try reader["RoleArn"].readIfPresent()
        value.tagKey = try reader["TagKey"].readIfPresent()
        value.tagValue = try reader["TagValue"].readIfPresent()
        value.taskArn = try reader["TaskArn"].readIfPresent()
        return value
    }
}

extension TagOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = TagOutput()
        value.arn = try reader["Arn"].readIfPresent()
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension UngroupResourcesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UngroupResourcesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UngroupResourcesOutput()
        value.failed = try reader["Failed"].readListIfPresent(memberReadingClosure: ResourceGroupsClientTypes.FailedResource.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.pending = try reader["Pending"].readListIfPresent(memberReadingClosure: ResourceGroupsClientTypes.PendingResource.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.succeeded = try reader["Succeeded"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension UntagOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UntagOutput()
        value.arn = try reader["Arn"].readIfPresent()
        value.keys = try reader["Keys"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension UpdateAccountSettingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateAccountSettingsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateAccountSettingsOutput()
        value.accountSettings = try reader["AccountSettings"].readIfPresent(with: ResourceGroupsClientTypes.AccountSettings.read(from:))
        return value
    }
}

extension UpdateGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateGroupOutput()
        value.group = try reader["Group"].readIfPresent(with: ResourceGroupsClientTypes.Group.read(from:))
        return value
    }
}

extension UpdateGroupQueryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateGroupQueryOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateGroupQueryOutput()
        value.groupQuery = try reader["GroupQuery"].readIfPresent(with: ResourceGroupsClientTypes.GroupQuery.read(from:))
        return value
    }
}

enum CancelTagSyncTaskOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "MethodNotAllowedException": return try MethodNotAllowedException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "MethodNotAllowedException": return try MethodNotAllowedException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "MethodNotAllowedException": return try MethodNotAllowedException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetAccountSettingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "MethodNotAllowedException": return try MethodNotAllowedException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "MethodNotAllowedException": return try MethodNotAllowedException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetGroupConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "MethodNotAllowedException": return try MethodNotAllowedException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetGroupQueryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "MethodNotAllowedException": return try MethodNotAllowedException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetTagsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "MethodNotAllowedException": return try MethodNotAllowedException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetTagSyncTaskOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "MethodNotAllowedException": return try MethodNotAllowedException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GroupResourcesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "MethodNotAllowedException": return try MethodNotAllowedException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListGroupingStatusesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "MethodNotAllowedException": return try MethodNotAllowedException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListGroupResourcesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "MethodNotAllowedException": return try MethodNotAllowedException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "MethodNotAllowedException": return try MethodNotAllowedException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagSyncTasksOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "MethodNotAllowedException": return try MethodNotAllowedException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutGroupConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "MethodNotAllowedException": return try MethodNotAllowedException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SearchResourcesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "MethodNotAllowedException": return try MethodNotAllowedException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartTagSyncTaskOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "MethodNotAllowedException": return try MethodNotAllowedException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "MethodNotAllowedException": return try MethodNotAllowedException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UngroupResourcesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "MethodNotAllowedException": return try MethodNotAllowedException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "MethodNotAllowedException": return try MethodNotAllowedException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateAccountSettingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "MethodNotAllowedException": return try MethodNotAllowedException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "MethodNotAllowedException": return try MethodNotAllowedException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateGroupQueryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "MethodNotAllowedException": return try MethodNotAllowedException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ForbiddenException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ForbiddenException {
        let reader = baseError.errorBodyReader
        var value = ForbiddenException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TooManyRequestsException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> TooManyRequestsException {
        let reader = baseError.errorBodyReader
        var value = TooManyRequestsException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension BadRequestException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> BadRequestException {
        let reader = baseError.errorBodyReader
        var value = BadRequestException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension MethodNotAllowedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> MethodNotAllowedException {
        let reader = baseError.errorBodyReader
        var value = MethodNotAllowedException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServerErrorException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalServerErrorException {
        let reader = baseError.errorBodyReader
        var value = InternalServerErrorException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UnauthorizedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> UnauthorizedException {
        let reader = baseError.errorBodyReader
        var value = UnauthorizedException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension NotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> NotFoundException {
        let reader = baseError.errorBodyReader
        var value = NotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceGroupsClientTypes.Group {

    static func read(from reader: SmithyJSON.Reader) throws -> ResourceGroupsClientTypes.Group {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResourceGroupsClientTypes.Group()
        value.groupArn = try reader["GroupArn"].readIfPresent() ?? ""
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.description = try reader["Description"].readIfPresent()
        value.criticality = try reader["Criticality"].readIfPresent()
        value.owner = try reader["Owner"].readIfPresent()
        value.displayName = try reader["DisplayName"].readIfPresent()
        value.applicationTag = try reader["ApplicationTag"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension ResourceGroupsClientTypes.ResourceQuery {

    static func write(value: ResourceGroupsClientTypes.ResourceQuery?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Query"].write(value.query)
        try writer["Type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ResourceGroupsClientTypes.ResourceQuery {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResourceGroupsClientTypes.ResourceQuery()
        value.type = try reader["Type"].readIfPresent() ?? .sdkUnknown("")
        value.query = try reader["Query"].readIfPresent() ?? ""
        return value
    }
}

extension ResourceGroupsClientTypes.GroupConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> ResourceGroupsClientTypes.GroupConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResourceGroupsClientTypes.GroupConfiguration()
        value.configuration = try reader["Configuration"].readListIfPresent(memberReadingClosure: ResourceGroupsClientTypes.GroupConfigurationItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.proposedConfiguration = try reader["ProposedConfiguration"].readListIfPresent(memberReadingClosure: ResourceGroupsClientTypes.GroupConfigurationItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.status = try reader["Status"].readIfPresent()
        value.failureReason = try reader["FailureReason"].readIfPresent()
        return value
    }
}

extension ResourceGroupsClientTypes.GroupConfigurationItem {

    static func write(value: ResourceGroupsClientTypes.GroupConfigurationItem?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Parameters"].writeList(value.parameters, memberWritingClosure: ResourceGroupsClientTypes.GroupConfigurationParameter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ResourceGroupsClientTypes.GroupConfigurationItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResourceGroupsClientTypes.GroupConfigurationItem()
        value.type = try reader["Type"].readIfPresent() ?? ""
        value.parameters = try reader["Parameters"].readListIfPresent(memberReadingClosure: ResourceGroupsClientTypes.GroupConfigurationParameter.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ResourceGroupsClientTypes.GroupConfigurationParameter {

    static func write(value: ResourceGroupsClientTypes.GroupConfigurationParameter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ResourceGroupsClientTypes.GroupConfigurationParameter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResourceGroupsClientTypes.GroupConfigurationParameter()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.values = try reader["Values"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ResourceGroupsClientTypes.AccountSettings {

    static func read(from reader: SmithyJSON.Reader) throws -> ResourceGroupsClientTypes.AccountSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResourceGroupsClientTypes.AccountSettings()
        value.groupLifecycleEventsDesiredStatus = try reader["GroupLifecycleEventsDesiredStatus"].readIfPresent()
        value.groupLifecycleEventsStatus = try reader["GroupLifecycleEventsStatus"].readIfPresent()
        value.groupLifecycleEventsStatusMessage = try reader["GroupLifecycleEventsStatusMessage"].readIfPresent()
        return value
    }
}

extension ResourceGroupsClientTypes.GroupQuery {

    static func read(from reader: SmithyJSON.Reader) throws -> ResourceGroupsClientTypes.GroupQuery {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResourceGroupsClientTypes.GroupQuery()
        value.groupName = try reader["GroupName"].readIfPresent() ?? ""
        value.resourceQuery = try reader["ResourceQuery"].readIfPresent(with: ResourceGroupsClientTypes.ResourceQuery.read(from:))
        return value
    }
}

extension ResourceGroupsClientTypes.FailedResource {

    static func read(from reader: SmithyJSON.Reader) throws -> ResourceGroupsClientTypes.FailedResource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResourceGroupsClientTypes.FailedResource()
        value.resourceArn = try reader["ResourceArn"].readIfPresent()
        value.errorMessage = try reader["ErrorMessage"].readIfPresent()
        value.errorCode = try reader["ErrorCode"].readIfPresent()
        return value
    }
}

extension ResourceGroupsClientTypes.PendingResource {

    static func read(from reader: SmithyJSON.Reader) throws -> ResourceGroupsClientTypes.PendingResource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResourceGroupsClientTypes.PendingResource()
        value.resourceArn = try reader["ResourceArn"].readIfPresent()
        return value
    }
}

extension ResourceGroupsClientTypes.GroupingStatusesItem {

    static func read(from reader: SmithyJSON.Reader) throws -> ResourceGroupsClientTypes.GroupingStatusesItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResourceGroupsClientTypes.GroupingStatusesItem()
        value.resourceArn = try reader["ResourceArn"].readIfPresent()
        value.action = try reader["Action"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.errorMessage = try reader["ErrorMessage"].readIfPresent()
        value.errorCode = try reader["ErrorCode"].readIfPresent()
        value.updatedAt = try reader["UpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension ResourceGroupsClientTypes.ListGroupResourcesItem {

    static func read(from reader: SmithyJSON.Reader) throws -> ResourceGroupsClientTypes.ListGroupResourcesItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResourceGroupsClientTypes.ListGroupResourcesItem()
        value.identifier = try reader["Identifier"].readIfPresent(with: ResourceGroupsClientTypes.ResourceIdentifier.read(from:))
        value.status = try reader["Status"].readIfPresent(with: ResourceGroupsClientTypes.ResourceStatus.read(from:))
        return value
    }
}

extension ResourceGroupsClientTypes.ResourceStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> ResourceGroupsClientTypes.ResourceStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResourceGroupsClientTypes.ResourceStatus()
        value.name = try reader["Name"].readIfPresent()
        return value
    }
}

extension ResourceGroupsClientTypes.ResourceIdentifier {

    static func read(from reader: SmithyJSON.Reader) throws -> ResourceGroupsClientTypes.ResourceIdentifier {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResourceGroupsClientTypes.ResourceIdentifier()
        value.resourceArn = try reader["ResourceArn"].readIfPresent()
        value.resourceType = try reader["ResourceType"].readIfPresent()
        return value
    }
}

extension ResourceGroupsClientTypes.QueryError {

    static func read(from reader: SmithyJSON.Reader) throws -> ResourceGroupsClientTypes.QueryError {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResourceGroupsClientTypes.QueryError()
        value.errorCode = try reader["ErrorCode"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension ResourceGroupsClientTypes.GroupIdentifier {

    static func read(from reader: SmithyJSON.Reader) throws -> ResourceGroupsClientTypes.GroupIdentifier {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResourceGroupsClientTypes.GroupIdentifier()
        value.groupName = try reader["GroupName"].readIfPresent()
        value.groupArn = try reader["GroupArn"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.criticality = try reader["Criticality"].readIfPresent()
        value.owner = try reader["Owner"].readIfPresent()
        value.displayName = try reader["DisplayName"].readIfPresent()
        return value
    }
}

extension ResourceGroupsClientTypes.TagSyncTaskItem {

    static func read(from reader: SmithyJSON.Reader) throws -> ResourceGroupsClientTypes.TagSyncTaskItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ResourceGroupsClientTypes.TagSyncTaskItem()
        value.groupArn = try reader["GroupArn"].readIfPresent()
        value.groupName = try reader["GroupName"].readIfPresent()
        value.taskArn = try reader["TaskArn"].readIfPresent()
        value.tagKey = try reader["TagKey"].readIfPresent()
        value.tagValue = try reader["TagValue"].readIfPresent()
        value.roleArn = try reader["RoleArn"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.errorMessage = try reader["ErrorMessage"].readIfPresent()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension ResourceGroupsClientTypes.ListGroupingStatusesFilter {

    static func write(value: ResourceGroupsClientTypes.ListGroupingStatusesFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension ResourceGroupsClientTypes.ResourceFilter {

    static func write(value: ResourceGroupsClientTypes.ResourceFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension ResourceGroupsClientTypes.GroupFilter {

    static func write(value: ResourceGroupsClientTypes.GroupFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension ResourceGroupsClientTypes.ListTagSyncTasksFilter {

    static func write(value: ResourceGroupsClientTypes.ListTagSyncTasksFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GroupArn"].write(value.groupArn)
        try writer["GroupName"].write(value.groupName)
    }
}

public enum ResourceGroupsClientTypes {}
