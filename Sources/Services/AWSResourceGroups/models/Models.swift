// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension BadRequestException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BadRequestExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request includes one or more parameters that violate validation rules.
public struct BadRequestException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct BadRequestExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension BadRequestExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CreateGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configuration = "Configuration"
        case description = "Description"
        case name = "Name"
        case resourceQuery = "ResourceQuery"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configuration = configuration {
            var configurationContainer = encodeContainer.nestedUnkeyedContainer(forKey: .configuration)
            for groupconfigurationitem0 in configuration {
                try configurationContainer.encode(groupconfigurationitem0)
            }
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let resourceQuery = self.resourceQuery {
            try encodeContainer.encode(resourceQuery, forKey: .resourceQuery)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension CreateGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/groups"
    }
}

public struct CreateGroupInput: Swift.Equatable {
    /// A configuration associates the resource group with an AWS service and specifies how the service can interact with the resources in the group. A configuration is an array of [GroupConfigurationItem] elements. For details about the syntax of service configurations, see [Service configurations for resource groups](https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html). A resource group can contain either a Configuration or a ResourceQuery, but not both.
    public var configuration: [ResourceGroupsClientTypes.GroupConfigurationItem]?
    /// The description of the resource group. Descriptions can consist of letters, numbers, hyphens, underscores, periods, and spaces.
    public var description: Swift.String?
    /// The name of the group, which is the identifier of the group in other operations. You can't change the name of a resource group after you create it. A resource group name can consist of letters, numbers, hyphens, periods, and underscores. The name cannot start with AWS or aws; these are reserved. A resource group name must be unique within each AWS Region in your AWS account.
    /// This member is required.
    public var name: Swift.String?
    /// The resource query that determines which AWS resources are members of this group. For more information about resource queries, see [Create a tag-based group in Resource Groups](https://docs.aws.amazon.com/ARG/latest/userguide/gettingstarted-query.html#gettingstarted-query-cli-tag). A resource group can contain either a ResourceQuery or a Configuration, but not both.
    public var resourceQuery: ResourceGroupsClientTypes.ResourceQuery?
    /// The tags to add to the group. A tag is key-value pair string.
    public var tags: [Swift.String:Swift.String]?

    public init (
        configuration: [ResourceGroupsClientTypes.GroupConfigurationItem]? = nil,
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        resourceQuery: ResourceGroupsClientTypes.ResourceQuery? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.configuration = configuration
        self.description = description
        self.name = name
        self.resourceQuery = resourceQuery
        self.tags = tags
    }
}

struct CreateGroupInputBody: Swift.Equatable {
    let name: Swift.String?
    let description: Swift.String?
    let resourceQuery: ResourceGroupsClientTypes.ResourceQuery?
    let tags: [Swift.String:Swift.String]?
    let configuration: [ResourceGroupsClientTypes.GroupConfigurationItem]?
}

extension CreateGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configuration = "Configuration"
        case description = "Description"
        case name = "Name"
        case resourceQuery = "ResourceQuery"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let resourceQueryDecoded = try containerValues.decodeIfPresent(ResourceGroupsClientTypes.ResourceQuery.self, forKey: .resourceQuery)
        resourceQuery = resourceQueryDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let configurationContainer = try containerValues.decodeIfPresent([ResourceGroupsClientTypes.GroupConfigurationItem?].self, forKey: .configuration)
        var configurationDecoded0:[ResourceGroupsClientTypes.GroupConfigurationItem]? = nil
        if let configurationContainer = configurationContainer {
            configurationDecoded0 = [ResourceGroupsClientTypes.GroupConfigurationItem]()
            for structure0 in configurationContainer {
                if let structure0 = structure0 {
                    configurationDecoded0?.append(structure0)
                }
            }
        }
        configuration = configurationDecoded0
    }
}

extension CreateGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateGroupOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.group = output.group
            self.groupConfiguration = output.groupConfiguration
            self.resourceQuery = output.resourceQuery
            self.tags = output.tags
        } else {
            self.group = nil
            self.groupConfiguration = nil
            self.resourceQuery = nil
            self.tags = nil
        }
    }
}

public struct CreateGroupOutputResponse: Swift.Equatable {
    /// The description of the resource group.
    public var group: ResourceGroupsClientTypes.Group?
    /// The service configuration associated with the resource group. For details about the syntax of a service configuration, see [Service configurations for resource groups](https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html).
    public var groupConfiguration: ResourceGroupsClientTypes.GroupConfiguration?
    /// The resource query associated with the group. For more information about resource queries, see [Create a tag-based group in Resource Groups](https://docs.aws.amazon.com/ARG/latest/userguide/gettingstarted-query.html#gettingstarted-query-cli-tag).
    public var resourceQuery: ResourceGroupsClientTypes.ResourceQuery?
    /// The tags associated with the group.
    public var tags: [Swift.String:Swift.String]?

    public init (
        group: ResourceGroupsClientTypes.Group? = nil,
        groupConfiguration: ResourceGroupsClientTypes.GroupConfiguration? = nil,
        resourceQuery: ResourceGroupsClientTypes.ResourceQuery? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.group = group
        self.groupConfiguration = groupConfiguration
        self.resourceQuery = resourceQuery
        self.tags = tags
    }
}

struct CreateGroupOutputResponseBody: Swift.Equatable {
    let group: ResourceGroupsClientTypes.Group?
    let resourceQuery: ResourceGroupsClientTypes.ResourceQuery?
    let tags: [Swift.String:Swift.String]?
    let groupConfiguration: ResourceGroupsClientTypes.GroupConfiguration?
}

extension CreateGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case group = "Group"
        case groupConfiguration = "GroupConfiguration"
        case resourceQuery = "ResourceQuery"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupDecoded = try containerValues.decodeIfPresent(ResourceGroupsClientTypes.Group.self, forKey: .group)
        group = groupDecoded
        let resourceQueryDecoded = try containerValues.decodeIfPresent(ResourceGroupsClientTypes.ResourceQuery.self, forKey: .resourceQuery)
        resourceQuery = resourceQueryDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let groupConfigurationDecoded = try containerValues.decodeIfPresent(ResourceGroupsClientTypes.GroupConfiguration.self, forKey: .groupConfiguration)
        groupConfiguration = groupConfigurationDecoded
    }
}

extension DeleteGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case group = "Group"
        case groupName = "GroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let group = self.group {
            try encodeContainer.encode(group, forKey: .group)
        }
        if let groupName = self.groupName {
            try encodeContainer.encode(groupName, forKey: .groupName)
        }
    }
}

extension DeleteGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/delete-group"
    }
}

public struct DeleteGroupInput: Swift.Equatable {
    /// The name or the ARN of the resource group to delete.
    public var group: Swift.String?
    /// Deprecated - don't use this parameter. Use Group instead.
    @available(*, deprecated, message: "This field is deprecated, use Group instead.")
    public var groupName: Swift.String?

    public init (
        group: Swift.String? = nil,
        groupName: Swift.String? = nil
    )
    {
        self.group = group
        self.groupName = groupName
    }
}

struct DeleteGroupInputBody: Swift.Equatable {
    let groupName: Swift.String?
    let group: Swift.String?
}

extension DeleteGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case group = "Group"
        case groupName = "GroupName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupName)
        groupName = groupNameDecoded
        let groupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .group)
        group = groupDecoded
    }
}

extension DeleteGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteGroupOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.group = output.group
        } else {
            self.group = nil
        }
    }
}

public struct DeleteGroupOutputResponse: Swift.Equatable {
    /// A full description of the deleted resource group.
    public var group: ResourceGroupsClientTypes.Group?

    public init (
        group: ResourceGroupsClientTypes.Group? = nil
    )
    {
        self.group = group
    }
}

struct DeleteGroupOutputResponseBody: Swift.Equatable {
    let group: ResourceGroupsClientTypes.Group?
}

extension DeleteGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case group = "Group"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupDecoded = try containerValues.decodeIfPresent(ResourceGroupsClientTypes.Group.self, forKey: .group)
        group = groupDecoded
    }
}

extension ResourceGroupsClientTypes.FailedResource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorCode = "ErrorCode"
        case errorMessage = "ErrorMessage"
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorCode = self.errorCode {
            try encodeContainer.encode(errorCode, forKey: .errorCode)
        }
        if let errorMessage = self.errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
    }
}

extension ResourceGroupsClientTypes {
    /// A resource that failed to be added to or removed from a group.
    public struct FailedResource: Swift.Equatable {
        /// The error code associated with the failure.
        public var errorCode: Swift.String?
        /// The error message text associated with the failure.
        public var errorMessage: Swift.String?
        /// The ARN of the resource that failed to be added or removed.
        public var resourceArn: Swift.String?

        public init (
            errorCode: Swift.String? = nil,
            errorMessage: Swift.String? = nil,
            resourceArn: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.resourceArn = resourceArn
        }
    }

}

extension ForbiddenException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ForbiddenExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The caller isn't authorized to make the request. Check permissions.
public struct ForbiddenException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ForbiddenExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ForbiddenExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension GetGroupConfigurationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case group = "Group"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let group = self.group {
            try encodeContainer.encode(group, forKey: .group)
        }
    }
}

extension GetGroupConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/get-group-configuration"
    }
}

public struct GetGroupConfigurationInput: Swift.Equatable {
    /// The name or the ARN of the resource group.
    public var group: Swift.String?

    public init (
        group: Swift.String? = nil
    )
    {
        self.group = group
    }
}

struct GetGroupConfigurationInputBody: Swift.Equatable {
    let group: Swift.String?
}

extension GetGroupConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case group = "Group"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .group)
        group = groupDecoded
    }
}

extension GetGroupConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetGroupConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetGroupConfigurationOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetGroupConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetGroupConfigurationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.groupConfiguration = output.groupConfiguration
        } else {
            self.groupConfiguration = nil
        }
    }
}

public struct GetGroupConfigurationOutputResponse: Swift.Equatable {
    /// The service configuration associated with the specified group. For details about the service configuration syntax, see [Service configurations for resource groups](https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html).
    public var groupConfiguration: ResourceGroupsClientTypes.GroupConfiguration?

    public init (
        groupConfiguration: ResourceGroupsClientTypes.GroupConfiguration? = nil
    )
    {
        self.groupConfiguration = groupConfiguration
    }
}

struct GetGroupConfigurationOutputResponseBody: Swift.Equatable {
    let groupConfiguration: ResourceGroupsClientTypes.GroupConfiguration?
}

extension GetGroupConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groupConfiguration = "GroupConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupConfigurationDecoded = try containerValues.decodeIfPresent(ResourceGroupsClientTypes.GroupConfiguration.self, forKey: .groupConfiguration)
        groupConfiguration = groupConfigurationDecoded
    }
}

extension GetGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case group = "Group"
        case groupName = "GroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let group = self.group {
            try encodeContainer.encode(group, forKey: .group)
        }
        if let groupName = self.groupName {
            try encodeContainer.encode(groupName, forKey: .groupName)
        }
    }
}

extension GetGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/get-group"
    }
}

public struct GetGroupInput: Swift.Equatable {
    /// The name or the ARN of the resource group to retrieve.
    public var group: Swift.String?
    /// Deprecated - don't use this parameter. Use Group instead.
    @available(*, deprecated, message: "This field is deprecated, use Group instead.")
    public var groupName: Swift.String?

    public init (
        group: Swift.String? = nil,
        groupName: Swift.String? = nil
    )
    {
        self.group = group
        self.groupName = groupName
    }
}

struct GetGroupInputBody: Swift.Equatable {
    let groupName: Swift.String?
    let group: Swift.String?
}

extension GetGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case group = "Group"
        case groupName = "GroupName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupName)
        groupName = groupNameDecoded
        let groupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .group)
        group = groupDecoded
    }
}

extension GetGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetGroupOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.group = output.group
        } else {
            self.group = nil
        }
    }
}

public struct GetGroupOutputResponse: Swift.Equatable {
    /// A full description of the resource group.
    public var group: ResourceGroupsClientTypes.Group?

    public init (
        group: ResourceGroupsClientTypes.Group? = nil
    )
    {
        self.group = group
    }
}

struct GetGroupOutputResponseBody: Swift.Equatable {
    let group: ResourceGroupsClientTypes.Group?
}

extension GetGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case group = "Group"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupDecoded = try containerValues.decodeIfPresent(ResourceGroupsClientTypes.Group.self, forKey: .group)
        group = groupDecoded
    }
}

extension GetGroupQueryInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case group = "Group"
        case groupName = "GroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let group = self.group {
            try encodeContainer.encode(group, forKey: .group)
        }
        if let groupName = self.groupName {
            try encodeContainer.encode(groupName, forKey: .groupName)
        }
    }
}

extension GetGroupQueryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/get-group-query"
    }
}

public struct GetGroupQueryInput: Swift.Equatable {
    /// The name or the ARN of the resource group to query.
    public var group: Swift.String?
    /// Don't use this parameter. Use Group instead.
    @available(*, deprecated, message: "This field is deprecated, use Group instead.")
    public var groupName: Swift.String?

    public init (
        group: Swift.String? = nil,
        groupName: Swift.String? = nil
    )
    {
        self.group = group
        self.groupName = groupName
    }
}

struct GetGroupQueryInputBody: Swift.Equatable {
    let groupName: Swift.String?
    let group: Swift.String?
}

extension GetGroupQueryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case group = "Group"
        case groupName = "GroupName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupName)
        groupName = groupNameDecoded
        let groupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .group)
        group = groupDecoded
    }
}

extension GetGroupQueryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetGroupQueryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetGroupQueryOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetGroupQueryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetGroupQueryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.groupQuery = output.groupQuery
        } else {
            self.groupQuery = nil
        }
    }
}

public struct GetGroupQueryOutputResponse: Swift.Equatable {
    /// The resource query associated with the specified group. For more information about resource queries, see [Create a tag-based group in Resource Groups](https://docs.aws.amazon.com/ARG/latest/userguide/gettingstarted-query.html#gettingstarted-query-cli-tag).
    public var groupQuery: ResourceGroupsClientTypes.GroupQuery?

    public init (
        groupQuery: ResourceGroupsClientTypes.GroupQuery? = nil
    )
    {
        self.groupQuery = groupQuery
    }
}

struct GetGroupQueryOutputResponseBody: Swift.Equatable {
    let groupQuery: ResourceGroupsClientTypes.GroupQuery?
}

extension GetGroupQueryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groupQuery = "GroupQuery"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupQueryDecoded = try containerValues.decodeIfPresent(ResourceGroupsClientTypes.GroupQuery.self, forKey: .groupQuery)
        groupQuery = groupQueryDecoded
    }
}

extension GetTagsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let arn = arn else {
            return nil
        }
        return "/resources/\(arn.urlPercentEncoding())/tags"
    }
}

public struct GetTagsInput: Swift.Equatable {
    /// The ARN of the resource group whose tags you want to retrieve.
    /// This member is required.
    public var arn: Swift.String?

    public init (
        arn: Swift.String? = nil
    )
    {
        self.arn = arn
    }
}

struct GetTagsInputBody: Swift.Equatable {
}

extension GetTagsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetTagsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetTagsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetTagsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetTagsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetTagsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.arn = output.arn
            self.tags = output.tags
        } else {
            self.arn = nil
            self.tags = nil
        }
    }
}

public struct GetTagsOutputResponse: Swift.Equatable {
    /// The ARN of the tagged resource group.
    public var arn: Swift.String?
    /// The tags associated with the specified resource group.
    public var tags: [Swift.String:Swift.String]?

    public init (
        arn: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.arn = arn
        self.tags = tags
    }
}

struct GetTagsOutputResponseBody: Swift.Equatable {
    let arn: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension GetTagsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension ResourceGroupsClientTypes.Group: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case groupArn = "GroupArn"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let groupArn = self.groupArn {
            try encodeContainer.encode(groupArn, forKey: .groupArn)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupArn)
        groupArn = groupArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

extension ResourceGroupsClientTypes {
    /// A resource group that contains AWS resources. You can assign resources to the group by associating either of the following elements with the group:
    ///
    /// * [ResourceQuery] - Use a resource query to specify a set of tag keys and values. All resources in the same AWS Region and AWS account that have those keys with the same values are included in the group. You can add a resource query when you create the group, or later by using the [PutGroupConfiguration] operation.
    ///
    /// * [GroupConfiguration] - Use a service configuration to associate the group with an AWS service. The configuration specifies which resource types can be included in the group.
    public struct Group: Swift.Equatable {
        /// The description of the resource group.
        public var description: Swift.String?
        /// The ARN of the resource group.
        /// This member is required.
        public var groupArn: Swift.String?
        /// The name of the resource group.
        /// This member is required.
        public var name: Swift.String?

        public init (
            description: Swift.String? = nil,
            groupArn: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.description = description
            self.groupArn = groupArn
            self.name = name
        }
    }

}

extension ResourceGroupsClientTypes.GroupConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configuration = "Configuration"
        case failureReason = "FailureReason"
        case proposedConfiguration = "ProposedConfiguration"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configuration = configuration {
            var configurationContainer = encodeContainer.nestedUnkeyedContainer(forKey: .configuration)
            for groupconfigurationitem0 in configuration {
                try configurationContainer.encode(groupconfigurationitem0)
            }
        }
        if let failureReason = self.failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let proposedConfiguration = proposedConfiguration {
            var proposedConfigurationContainer = encodeContainer.nestedUnkeyedContainer(forKey: .proposedConfiguration)
            for groupconfigurationitem0 in proposedConfiguration {
                try proposedConfigurationContainer.encode(groupconfigurationitem0)
            }
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationContainer = try containerValues.decodeIfPresent([ResourceGroupsClientTypes.GroupConfigurationItem?].self, forKey: .configuration)
        var configurationDecoded0:[ResourceGroupsClientTypes.GroupConfigurationItem]? = nil
        if let configurationContainer = configurationContainer {
            configurationDecoded0 = [ResourceGroupsClientTypes.GroupConfigurationItem]()
            for structure0 in configurationContainer {
                if let structure0 = structure0 {
                    configurationDecoded0?.append(structure0)
                }
            }
        }
        configuration = configurationDecoded0
        let proposedConfigurationContainer = try containerValues.decodeIfPresent([ResourceGroupsClientTypes.GroupConfigurationItem?].self, forKey: .proposedConfiguration)
        var proposedConfigurationDecoded0:[ResourceGroupsClientTypes.GroupConfigurationItem]? = nil
        if let proposedConfigurationContainer = proposedConfigurationContainer {
            proposedConfigurationDecoded0 = [ResourceGroupsClientTypes.GroupConfigurationItem]()
            for structure0 in proposedConfigurationContainer {
                if let structure0 = structure0 {
                    proposedConfigurationDecoded0?.append(structure0)
                }
            }
        }
        proposedConfiguration = proposedConfigurationDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(ResourceGroupsClientTypes.GroupConfigurationStatus.self, forKey: .status)
        status = statusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
    }
}

extension ResourceGroupsClientTypes {
    /// A service configuration associated with a resource group. The configuration options are determined by the AWS service that defines the Type, and specifies which resources can be included in the group. You can add a service configuration when you create the group by using [CreateGroup], or later by using the [PutGroupConfiguration] operation. For details about group service configuration syntax, see [Service configurations for resource groups](https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html).
    public struct GroupConfiguration: Swift.Equatable {
        /// The configuration currently associated with the group and in effect.
        public var configuration: [ResourceGroupsClientTypes.GroupConfigurationItem]?
        /// If present, the reason why a request to update the group configuration failed.
        public var failureReason: Swift.String?
        /// If present, the new configuration that is in the process of being applied to the group.
        public var proposedConfiguration: [ResourceGroupsClientTypes.GroupConfigurationItem]?
        /// The current status of an attempt to update the group configuration.
        public var status: ResourceGroupsClientTypes.GroupConfigurationStatus?

        public init (
            configuration: [ResourceGroupsClientTypes.GroupConfigurationItem]? = nil,
            failureReason: Swift.String? = nil,
            proposedConfiguration: [ResourceGroupsClientTypes.GroupConfigurationItem]? = nil,
            status: ResourceGroupsClientTypes.GroupConfigurationStatus? = nil
        )
        {
            self.configuration = configuration
            self.failureReason = failureReason
            self.proposedConfiguration = proposedConfiguration
            self.status = status
        }
    }

}

extension ResourceGroupsClientTypes.GroupConfigurationItem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case parameters = "Parameters"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .parameters)
            for groupconfigurationparameter0 in parameters {
                try parametersContainer.encode(groupconfigurationparameter0)
            }
        }
        if let type = self.type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let parametersContainer = try containerValues.decodeIfPresent([ResourceGroupsClientTypes.GroupConfigurationParameter?].self, forKey: .parameters)
        var parametersDecoded0:[ResourceGroupsClientTypes.GroupConfigurationParameter]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [ResourceGroupsClientTypes.GroupConfigurationParameter]()
            for structure0 in parametersContainer {
                if let structure0 = structure0 {
                    parametersDecoded0?.append(structure0)
                }
            }
        }
        parameters = parametersDecoded0
    }
}

extension ResourceGroupsClientTypes {
    /// An item in a group configuration. A group service configuration can have one or more items. For details about group service configuration syntax, see [Service configurations for resource groups](https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html).
    public struct GroupConfigurationItem: Swift.Equatable {
        /// A collection of parameters for this group configuration item. For the list of parameters that you can use with each configuration item type, see [Supported resource types and parameters](https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html#about-slg-types).
        public var parameters: [ResourceGroupsClientTypes.GroupConfigurationParameter]?
        /// Specifies the type of group configuration item. Each item must have a unique value for type. For the list of types that you can specify for a configuration item, see [Supported resource types and parameters](https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html#about-slg-types).
        /// This member is required.
        public var type: Swift.String?

        public init (
            parameters: [ResourceGroupsClientTypes.GroupConfigurationParameter]? = nil,
            type: Swift.String? = nil
        )
        {
            self.parameters = parameters
            self.type = type
        }
    }

}

extension ResourceGroupsClientTypes.GroupConfigurationParameter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for groupconfigurationparametervalue0 in values {
                try valuesContainer.encode(groupconfigurationparametervalue0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .values)
        var valuesDecoded0:[Swift.String]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.String]()
            for string0 in valuesContainer {
                if let string0 = string0 {
                    valuesDecoded0?.append(string0)
                }
            }
        }
        values = valuesDecoded0
    }
}

extension ResourceGroupsClientTypes {
    /// A parameter for a group configuration item. For details about group service configuration syntax, see [Service configurations for resource groups](https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html).
    public struct GroupConfigurationParameter: Swift.Equatable {
        /// The name of the group configuration parameter. For the list of parameters that you can use with each configuration item type, see [Supported resource types and parameters](https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html#about-slg-types).
        /// This member is required.
        public var name: Swift.String?
        /// The value or values to be used for the specified parameter. For the list of values you can use with each parameter, see [Supported resource types and parameters](https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html#about-slg-types).
        public var values: [Swift.String]?

        public init (
            name: Swift.String? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

extension ResourceGroupsClientTypes {
    public enum GroupConfigurationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case updateComplete
        case updateFailed
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [GroupConfigurationStatus] {
            return [
                .updateComplete,
                .updateFailed,
                .updating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .updateComplete: return "UPDATE_COMPLETE"
            case .updateFailed: return "UPDATE_FAILED"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = GroupConfigurationStatus(rawValue: rawValue) ?? GroupConfigurationStatus.sdkUnknown(rawValue)
        }
    }
}

extension ResourceGroupsClientTypes.GroupFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for groupfiltervalue0 in values {
                try valuesContainer.encode(groupfiltervalue0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(ResourceGroupsClientTypes.GroupFilterName.self, forKey: .name)
        name = nameDecoded
        let valuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .values)
        var valuesDecoded0:[Swift.String]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.String]()
            for string0 in valuesContainer {
                if let string0 = string0 {
                    valuesDecoded0?.append(string0)
                }
            }
        }
        values = valuesDecoded0
    }
}

extension ResourceGroupsClientTypes {
    /// A filter collection that you can use to restrict the results from a List operation to only those you want to include.
    public struct GroupFilter: Swift.Equatable {
        /// The name of the filter. Filter names are case-sensitive.
        /// This member is required.
        public var name: ResourceGroupsClientTypes.GroupFilterName?
        /// One or more filter values. Allowed filter values vary by group filter name, and are case-sensitive.
        /// This member is required.
        public var values: [Swift.String]?

        public init (
            name: ResourceGroupsClientTypes.GroupFilterName? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

extension ResourceGroupsClientTypes {
    public enum GroupFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case configurationtype
        case resourcetype
        case sdkUnknown(Swift.String)

        public static var allCases: [GroupFilterName] {
            return [
                .configurationtype,
                .resourcetype,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .configurationtype: return "configuration-type"
            case .resourcetype: return "resource-type"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = GroupFilterName(rawValue: rawValue) ?? GroupFilterName.sdkUnknown(rawValue)
        }
    }
}

extension ResourceGroupsClientTypes.GroupIdentifier: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groupArn = "GroupArn"
        case groupName = "GroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let groupArn = self.groupArn {
            try encodeContainer.encode(groupArn, forKey: .groupArn)
        }
        if let groupName = self.groupName {
            try encodeContainer.encode(groupName, forKey: .groupName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupName)
        groupName = groupNameDecoded
        let groupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupArn)
        groupArn = groupArnDecoded
    }
}

extension ResourceGroupsClientTypes {
    /// The unique identifiers for a resource group.
    public struct GroupIdentifier: Swift.Equatable {
        /// The ARN of the resource group.
        public var groupArn: Swift.String?
        /// The name of the resource group.
        public var groupName: Swift.String?

        public init (
            groupArn: Swift.String? = nil,
            groupName: Swift.String? = nil
        )
        {
            self.groupArn = groupArn
            self.groupName = groupName
        }
    }

}

extension ResourceGroupsClientTypes.GroupQuery: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groupName = "GroupName"
        case resourceQuery = "ResourceQuery"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let groupName = self.groupName {
            try encodeContainer.encode(groupName, forKey: .groupName)
        }
        if let resourceQuery = self.resourceQuery {
            try encodeContainer.encode(resourceQuery, forKey: .resourceQuery)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupName)
        groupName = groupNameDecoded
        let resourceQueryDecoded = try containerValues.decodeIfPresent(ResourceGroupsClientTypes.ResourceQuery.self, forKey: .resourceQuery)
        resourceQuery = resourceQueryDecoded
    }
}

extension ResourceGroupsClientTypes {
    /// A mapping of a query attached to a resource group that determines the AWS resources that are members of the group.
    public struct GroupQuery: Swift.Equatable {
        /// The name of the resource group that is associated with the specified resource query.
        /// This member is required.
        public var groupName: Swift.String?
        /// The resource query that determines which AWS resources are members of the associated resource group.
        /// This member is required.
        public var resourceQuery: ResourceGroupsClientTypes.ResourceQuery?

        public init (
            groupName: Swift.String? = nil,
            resourceQuery: ResourceGroupsClientTypes.ResourceQuery? = nil
        )
        {
            self.groupName = groupName
            self.resourceQuery = resourceQuery
        }
    }

}

extension GroupResourcesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case group = "Group"
        case resourceArns = "ResourceArns"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let group = self.group {
            try encodeContainer.encode(group, forKey: .group)
        }
        if let resourceArns = resourceArns {
            var resourceArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceArns)
            for resourcearn0 in resourceArns {
                try resourceArnsContainer.encode(resourcearn0)
            }
        }
    }
}

extension GroupResourcesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/group-resources"
    }
}

public struct GroupResourcesInput: Swift.Equatable {
    /// The name or the ARN of the resource group to add resources to.
    /// This member is required.
    public var group: Swift.String?
    /// The list of ARNs for resources to be added to the group.
    /// This member is required.
    public var resourceArns: [Swift.String]?

    public init (
        group: Swift.String? = nil,
        resourceArns: [Swift.String]? = nil
    )
    {
        self.group = group
        self.resourceArns = resourceArns
    }
}

struct GroupResourcesInputBody: Swift.Equatable {
    let group: Swift.String?
    let resourceArns: [Swift.String]?
}

extension GroupResourcesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case group = "Group"
        case resourceArns = "ResourceArns"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .group)
        group = groupDecoded
        let resourceArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .resourceArns)
        var resourceArnsDecoded0:[Swift.String]? = nil
        if let resourceArnsContainer = resourceArnsContainer {
            resourceArnsDecoded0 = [Swift.String]()
            for string0 in resourceArnsContainer {
                if let string0 = string0 {
                    resourceArnsDecoded0?.append(string0)
                }
            }
        }
        resourceArns = resourceArnsDecoded0
    }
}

extension GroupResourcesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GroupResourcesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GroupResourcesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GroupResourcesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GroupResourcesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.failed = output.failed
            self.pending = output.pending
            self.succeeded = output.succeeded
        } else {
            self.failed = nil
            self.pending = nil
            self.succeeded = nil
        }
    }
}

public struct GroupResourcesOutputResponse: Swift.Equatable {
    /// A list of ARNs of any resources that failed to be added to the group by this operation.
    public var failed: [ResourceGroupsClientTypes.FailedResource]?
    /// A list of ARNs of any resources that are still in the process of being added to the group by this operation. These pending additions continue asynchronously. You can check the status of pending additions by using the [ListGroupResources] operation, and checking the Resources array in the response and the Status field of each object in that array.
    public var pending: [ResourceGroupsClientTypes.PendingResource]?
    /// A list of ARNs of resources that were successfully added to the group by this operation.
    public var succeeded: [Swift.String]?

    public init (
        failed: [ResourceGroupsClientTypes.FailedResource]? = nil,
        pending: [ResourceGroupsClientTypes.PendingResource]? = nil,
        succeeded: [Swift.String]? = nil
    )
    {
        self.failed = failed
        self.pending = pending
        self.succeeded = succeeded
    }
}

struct GroupResourcesOutputResponseBody: Swift.Equatable {
    let succeeded: [Swift.String]?
    let failed: [ResourceGroupsClientTypes.FailedResource]?
    let pending: [ResourceGroupsClientTypes.PendingResource]?
}

extension GroupResourcesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failed = "Failed"
        case pending = "Pending"
        case succeeded = "Succeeded"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let succeededContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .succeeded)
        var succeededDecoded0:[Swift.String]? = nil
        if let succeededContainer = succeededContainer {
            succeededDecoded0 = [Swift.String]()
            for string0 in succeededContainer {
                if let string0 = string0 {
                    succeededDecoded0?.append(string0)
                }
            }
        }
        succeeded = succeededDecoded0
        let failedContainer = try containerValues.decodeIfPresent([ResourceGroupsClientTypes.FailedResource?].self, forKey: .failed)
        var failedDecoded0:[ResourceGroupsClientTypes.FailedResource]? = nil
        if let failedContainer = failedContainer {
            failedDecoded0 = [ResourceGroupsClientTypes.FailedResource]()
            for structure0 in failedContainer {
                if let structure0 = structure0 {
                    failedDecoded0?.append(structure0)
                }
            }
        }
        failed = failedDecoded0
        let pendingContainer = try containerValues.decodeIfPresent([ResourceGroupsClientTypes.PendingResource?].self, forKey: .pending)
        var pendingDecoded0:[ResourceGroupsClientTypes.PendingResource]? = nil
        if let pendingContainer = pendingContainer {
            pendingDecoded0 = [ResourceGroupsClientTypes.PendingResource]()
            for structure0 in pendingContainer {
                if let structure0 = structure0 {
                    pendingDecoded0?.append(structure0)
                }
            }
        }
        pending = pendingDecoded0
    }
}

extension InternalServerErrorException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InternalServerErrorExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An internal error occurred while processing the request. Try again later.
public struct InternalServerErrorException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InternalServerErrorExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InternalServerErrorExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ListGroupResourcesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case group = "Group"
        case groupName = "GroupName"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for resourcefilter0 in filters {
                try filtersContainer.encode(resourcefilter0)
            }
        }
        if let group = self.group {
            try encodeContainer.encode(group, forKey: .group)
        }
        if let groupName = self.groupName {
            try encodeContainer.encode(groupName, forKey: .groupName)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListGroupResourcesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/list-group-resources"
    }
}

public struct ListGroupResourcesInput: Swift.Equatable {
    /// Filters, formatted as [ResourceFilter] objects, that you want to apply to a ListGroupResources operation. Filters the results to include only those of the specified resource types.
    ///
    /// * resource-type - Filter resources by their type. Specify up to five resource types in the format AWS::ServiceCode::ResourceType. For example, AWS::EC2::Instance, or AWS::S3::Bucket.
    ///
    ///
    /// When you specify a resource-type filter for ListGroupResources, AWS Resource Groups validates your filter resource types against the types that are defined in the query associated with the group. For example, if a group contains only S3 buckets because its query specifies only that resource type, but your resource-type filter includes EC2 instances, AWS Resource Groups does not filter for EC2 instances. In this case, a ListGroupResources request returns a BadRequestException error with a message similar to the following: The resource types specified as filters in the request are not valid. The error includes a list of resource types that failed the validation because they are not part of the query associated with the group. This validation doesn't occur when the group query specifies AWS::AllSupported, because a group based on such a query can contain any of the allowed resource types for the query type (tag-based or AWS CloudFormation stack-based queries).
    public var filters: [ResourceGroupsClientTypes.ResourceFilter]?
    /// The name or the ARN of the resource group
    public var group: Swift.String?
    /// Deprecated - don't use this parameter. Use the Group request field instead.
    @available(*, deprecated, message: "This field is deprecated, use Group instead.")
    public var groupName: Swift.String?
    /// The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that the service might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// The parameter for receiving additional results if you receive a NextToken response in a previous request. A NextToken response indicates that more output is available. Set this parameter to the value provided by a previous call's NextToken response to indicate where the output should continue from.
    public var nextToken: Swift.String?

    public init (
        filters: [ResourceGroupsClientTypes.ResourceFilter]? = nil,
        group: Swift.String? = nil,
        groupName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filters = filters
        self.group = group
        self.groupName = groupName
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListGroupResourcesInputBody: Swift.Equatable {
    let groupName: Swift.String?
    let group: Swift.String?
    let filters: [ResourceGroupsClientTypes.ResourceFilter]?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension ListGroupResourcesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case group = "Group"
        case groupName = "GroupName"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupName)
        groupName = groupNameDecoded
        let groupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .group)
        group = groupDecoded
        let filtersContainer = try containerValues.decodeIfPresent([ResourceGroupsClientTypes.ResourceFilter?].self, forKey: .filters)
        var filtersDecoded0:[ResourceGroupsClientTypes.ResourceFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [ResourceGroupsClientTypes.ResourceFilter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ResourceGroupsClientTypes.ListGroupResourcesItem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identifier = "Identifier"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let identifier = self.identifier {
            try encodeContainer.encode(identifier, forKey: .identifier)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identifierDecoded = try containerValues.decodeIfPresent(ResourceGroupsClientTypes.ResourceIdentifier.self, forKey: .identifier)
        identifier = identifierDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ResourceGroupsClientTypes.ResourceStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension ResourceGroupsClientTypes {
    /// A structure returned by the [ListGroupResources] operation that contains identity and group membership status information for one of the resources in the group.
    public struct ListGroupResourcesItem: Swift.Equatable {
        /// A structure that contains the ARN of a resource and its resource type.
        public var identifier: ResourceGroupsClientTypes.ResourceIdentifier?
        /// A structure that contains the status of this resource's membership in the group. This field is present in the response only if the group is of type AWS::EC2::HostManagement.
        public var status: ResourceGroupsClientTypes.ResourceStatus?

        public init (
            identifier: ResourceGroupsClientTypes.ResourceIdentifier? = nil,
            status: ResourceGroupsClientTypes.ResourceStatus? = nil
        )
        {
            self.identifier = identifier
            self.status = status
        }
    }

}

extension ListGroupResourcesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListGroupResourcesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListGroupResourcesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListGroupResourcesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListGroupResourcesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.queryErrors = output.queryErrors
            self.resourceIdentifiers = output.resourceIdentifiers
            self.resources = output.resources
        } else {
            self.nextToken = nil
            self.queryErrors = nil
            self.resourceIdentifiers = nil
            self.resources = nil
        }
    }
}

public struct ListGroupResourcesOutputResponse: Swift.Equatable {
    /// If present, indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
    public var nextToken: Swift.String?
    /// A list of QueryError objects. Each error is an object that contains ErrorCode and Message structures. Possible values for ErrorCode are CLOUDFORMATION_STACK_INACTIVE and CLOUDFORMATION_STACK_NOT_EXISTING.
    public var queryErrors: [ResourceGroupsClientTypes.QueryError]?
    /// Deprecated - don't use this parameter. Use the Resources response field instead.
    @available(*, deprecated, message: "This field is deprecated, use Resources instead.")
    public var resourceIdentifiers: [ResourceGroupsClientTypes.ResourceIdentifier]?
    /// An array of resources from which you can determine each resource's identity, type, and group membership status.
    public var resources: [ResourceGroupsClientTypes.ListGroupResourcesItem]?

    public init (
        nextToken: Swift.String? = nil,
        queryErrors: [ResourceGroupsClientTypes.QueryError]? = nil,
        resourceIdentifiers: [ResourceGroupsClientTypes.ResourceIdentifier]? = nil,
        resources: [ResourceGroupsClientTypes.ListGroupResourcesItem]? = nil
    )
    {
        self.nextToken = nextToken
        self.queryErrors = queryErrors
        self.resourceIdentifiers = resourceIdentifiers
        self.resources = resources
    }
}

struct ListGroupResourcesOutputResponseBody: Swift.Equatable {
    let resources: [ResourceGroupsClientTypes.ListGroupResourcesItem]?
    let resourceIdentifiers: [ResourceGroupsClientTypes.ResourceIdentifier]?
    let nextToken: Swift.String?
    let queryErrors: [ResourceGroupsClientTypes.QueryError]?
}

extension ListGroupResourcesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case queryErrors = "QueryErrors"
        case resourceIdentifiers = "ResourceIdentifiers"
        case resources = "Resources"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourcesContainer = try containerValues.decodeIfPresent([ResourceGroupsClientTypes.ListGroupResourcesItem?].self, forKey: .resources)
        var resourcesDecoded0:[ResourceGroupsClientTypes.ListGroupResourcesItem]? = nil
        if let resourcesContainer = resourcesContainer {
            resourcesDecoded0 = [ResourceGroupsClientTypes.ListGroupResourcesItem]()
            for structure0 in resourcesContainer {
                if let structure0 = structure0 {
                    resourcesDecoded0?.append(structure0)
                }
            }
        }
        resources = resourcesDecoded0
        let resourceIdentifiersContainer = try containerValues.decodeIfPresent([ResourceGroupsClientTypes.ResourceIdentifier?].self, forKey: .resourceIdentifiers)
        var resourceIdentifiersDecoded0:[ResourceGroupsClientTypes.ResourceIdentifier]? = nil
        if let resourceIdentifiersContainer = resourceIdentifiersContainer {
            resourceIdentifiersDecoded0 = [ResourceGroupsClientTypes.ResourceIdentifier]()
            for structure0 in resourceIdentifiersContainer {
                if let structure0 = structure0 {
                    resourceIdentifiersDecoded0?.append(structure0)
                }
            }
        }
        resourceIdentifiers = resourceIdentifiersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let queryErrorsContainer = try containerValues.decodeIfPresent([ResourceGroupsClientTypes.QueryError?].self, forKey: .queryErrors)
        var queryErrorsDecoded0:[ResourceGroupsClientTypes.QueryError]? = nil
        if let queryErrorsContainer = queryErrorsContainer {
            queryErrorsDecoded0 = [ResourceGroupsClientTypes.QueryError]()
            for structure0 in queryErrorsContainer {
                if let structure0 = structure0 {
                    queryErrorsDecoded0?.append(structure0)
                }
            }
        }
        queryErrors = queryErrorsDecoded0
    }
}

extension ListGroupsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for groupfilter0 in filters {
                try filtersContainer.encode(groupfilter0)
            }
        }
    }
}

extension ListGroupsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            return items
        }
    }
}

extension ListGroupsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/groups-list"
    }
}

public struct ListGroupsInput: Swift.Equatable {
    /// Filters, formatted as [GroupFilter] objects, that you want to apply to a ListGroups operation.
    ///
    /// * resource-type - Filter the results to include only those of the specified resource types. Specify up to five resource types in the format AWS::ServiceCode::ResourceType . For example, AWS::EC2::Instance, or AWS::S3::Bucket.
    ///
    /// * configuration-type - Filter the results to include only those groups that have the specified configuration types attached. The current supported values are:
    ///
    /// * AWS:EC2::CapacityReservationPool
    ///
    /// * AWS:EC2::HostManagement
    public var filters: [ResourceGroupsClientTypes.GroupFilter]?
    /// The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that the service might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// The parameter for receiving additional results if you receive a NextToken response in a previous request. A NextToken response indicates that more output is available. Set this parameter to the value provided by a previous call's NextToken response to indicate where the output should continue from.
    public var nextToken: Swift.String?

    public init (
        filters: [ResourceGroupsClientTypes.GroupFilter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListGroupsInputBody: Swift.Equatable {
    let filters: [ResourceGroupsClientTypes.GroupFilter]?
}

extension ListGroupsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filtersContainer = try containerValues.decodeIfPresent([ResourceGroupsClientTypes.GroupFilter?].self, forKey: .filters)
        var filtersDecoded0:[ResourceGroupsClientTypes.GroupFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [ResourceGroupsClientTypes.GroupFilter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
    }
}

extension ListGroupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListGroupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListGroupsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListGroupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListGroupsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.groupIdentifiers = output.groupIdentifiers
            self.groups = output.groups
            self.nextToken = output.nextToken
        } else {
            self.groupIdentifiers = nil
            self.groups = nil
            self.nextToken = nil
        }
    }
}

public struct ListGroupsOutputResponse: Swift.Equatable {
    /// A list of [GroupIdentifier] objects. Each identifier is an object that contains both the Name and the GroupArn.
    public var groupIdentifiers: [ResourceGroupsClientTypes.GroupIdentifier]?
    /// Deprecated - don't use this field. Use the GroupIdentifiers response field instead.
    @available(*, deprecated, message: "This field is deprecated, use GroupIdentifiers instead.")
    public var groups: [ResourceGroupsClientTypes.Group]?
    /// If present, indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
    public var nextToken: Swift.String?

    public init (
        groupIdentifiers: [ResourceGroupsClientTypes.GroupIdentifier]? = nil,
        groups: [ResourceGroupsClientTypes.Group]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.groupIdentifiers = groupIdentifiers
        self.groups = groups
        self.nextToken = nextToken
    }
}

struct ListGroupsOutputResponseBody: Swift.Equatable {
    let groupIdentifiers: [ResourceGroupsClientTypes.GroupIdentifier]?
    let groups: [ResourceGroupsClientTypes.Group]?
    let nextToken: Swift.String?
}

extension ListGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groupIdentifiers = "GroupIdentifiers"
        case groups = "Groups"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupIdentifiersContainer = try containerValues.decodeIfPresent([ResourceGroupsClientTypes.GroupIdentifier?].self, forKey: .groupIdentifiers)
        var groupIdentifiersDecoded0:[ResourceGroupsClientTypes.GroupIdentifier]? = nil
        if let groupIdentifiersContainer = groupIdentifiersContainer {
            groupIdentifiersDecoded0 = [ResourceGroupsClientTypes.GroupIdentifier]()
            for structure0 in groupIdentifiersContainer {
                if let structure0 = structure0 {
                    groupIdentifiersDecoded0?.append(structure0)
                }
            }
        }
        groupIdentifiers = groupIdentifiersDecoded0
        let groupsContainer = try containerValues.decodeIfPresent([ResourceGroupsClientTypes.Group?].self, forKey: .groups)
        var groupsDecoded0:[ResourceGroupsClientTypes.Group]? = nil
        if let groupsContainer = groupsContainer {
            groupsDecoded0 = [ResourceGroupsClientTypes.Group]()
            for structure0 in groupsContainer {
                if let structure0 = structure0 {
                    groupsDecoded0?.append(structure0)
                }
            }
        }
        groups = groupsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension MethodNotAllowedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: MethodNotAllowedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request uses an HTTP method that isn't allowed for the specified resource.
public struct MethodNotAllowedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct MethodNotAllowedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension MethodNotAllowedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension NotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: NotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// One or more of the specified resources don't exist.
public struct NotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension NotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceGroupsClientTypes.PendingResource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension ResourceGroupsClientTypes {
    /// A structure that identifies a resource that is currently pending addition to the group as a member. Adding a resource to a resource group happens asynchronously as a background task and this one isn't completed yet.
    public struct PendingResource: Swift.Equatable {
        /// The Amazon resource name (ARN) of the resource that's in a pending state.
        public var resourceArn: Swift.String?

        public init (
            resourceArn: Swift.String? = nil
        )
        {
            self.resourceArn = resourceArn
        }
    }

}

extension PutGroupConfigurationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configuration = "Configuration"
        case group = "Group"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configuration = configuration {
            var configurationContainer = encodeContainer.nestedUnkeyedContainer(forKey: .configuration)
            for groupconfigurationitem0 in configuration {
                try configurationContainer.encode(groupconfigurationitem0)
            }
        }
        if let group = self.group {
            try encodeContainer.encode(group, forKey: .group)
        }
    }
}

extension PutGroupConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/put-group-configuration"
    }
}

public struct PutGroupConfigurationInput: Swift.Equatable {
    /// The new configuration to associate with the specified group. A configuration associates the resource group with an AWS service and specifies how the service can interact with the resources in the group. A configuration is an array of [GroupConfigurationItem] elements. For information about the syntax of a service configuration, see [Service configurations for resource groups](https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html). A resource group can contain either a Configuration or a ResourceQuery, but not both.
    public var configuration: [ResourceGroupsClientTypes.GroupConfigurationItem]?
    /// The name or ARN of the resource group with the configuration that you want to update.
    public var group: Swift.String?

    public init (
        configuration: [ResourceGroupsClientTypes.GroupConfigurationItem]? = nil,
        group: Swift.String? = nil
    )
    {
        self.configuration = configuration
        self.group = group
    }
}

struct PutGroupConfigurationInputBody: Swift.Equatable {
    let group: Swift.String?
    let configuration: [ResourceGroupsClientTypes.GroupConfigurationItem]?
}

extension PutGroupConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configuration = "Configuration"
        case group = "Group"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .group)
        group = groupDecoded
        let configurationContainer = try containerValues.decodeIfPresent([ResourceGroupsClientTypes.GroupConfigurationItem?].self, forKey: .configuration)
        var configurationDecoded0:[ResourceGroupsClientTypes.GroupConfigurationItem]? = nil
        if let configurationContainer = configurationContainer {
            configurationDecoded0 = [ResourceGroupsClientTypes.GroupConfigurationItem]()
            for structure0 in configurationContainer {
                if let structure0 = structure0 {
                    configurationDecoded0?.append(structure0)
                }
            }
        }
        configuration = configurationDecoded0
    }
}

extension PutGroupConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutGroupConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutGroupConfigurationOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutGroupConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutGroupConfigurationOutputResponse: Swift.Equatable {

    public init () { }
}

extension ResourceGroupsClientTypes.QueryError: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorCode = "ErrorCode"
        case message = "Message"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorCode = self.errorCode {
            try encodeContainer.encode(errorCode.rawValue, forKey: .errorCode)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorCodeDecoded = try containerValues.decodeIfPresent(ResourceGroupsClientTypes.QueryErrorCode.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceGroupsClientTypes {
    /// A two-part error structure that can occur in ListGroupResources or SearchResources operations on CloudFormation stack-based queries. The error occurs if the CloudFormation stack on which the query is based either does not exist, or has a status that renders the stack inactive. A QueryError occurrence does not necessarily mean that AWS Resource Groups could not complete the operation, but the resulting group might have no member resources.
    public struct QueryError: Swift.Equatable {
        /// Possible values are CLOUDFORMATION_STACK_INACTIVE and CLOUDFORMATION_STACK_NOT_EXISTING.
        public var errorCode: ResourceGroupsClientTypes.QueryErrorCode?
        /// A message that explains the ErrorCode value. Messages might state that the specified CloudFormation stack does not exist (or no longer exists). For CLOUDFORMATION_STACK_INACTIVE, the message typically states that the CloudFormation stack has a status that is not (or no longer) active, such as CREATE_FAILED.
        public var message: Swift.String?

        public init (
            errorCode: ResourceGroupsClientTypes.QueryErrorCode? = nil,
            message: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.message = message
        }
    }

}

extension ResourceGroupsClientTypes {
    public enum QueryErrorCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cloudformationStackInactive
        case cloudformationStackNotExisting
        case sdkUnknown(Swift.String)

        public static var allCases: [QueryErrorCode] {
            return [
                .cloudformationStackInactive,
                .cloudformationStackNotExisting,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cloudformationStackInactive: return "CLOUDFORMATION_STACK_INACTIVE"
            case .cloudformationStackNotExisting: return "CLOUDFORMATION_STACK_NOT_EXISTING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = QueryErrorCode(rawValue: rawValue) ?? QueryErrorCode.sdkUnknown(rawValue)
        }
    }
}

extension ResourceGroupsClientTypes {
    public enum QueryType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cloudformationStack10
        case tagFilters10
        case sdkUnknown(Swift.String)

        public static var allCases: [QueryType] {
            return [
                .cloudformationStack10,
                .tagFilters10,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cloudformationStack10: return "CLOUDFORMATION_STACK_1_0"
            case .tagFilters10: return "TAG_FILTERS_1_0"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = QueryType(rawValue: rawValue) ?? QueryType.sdkUnknown(rawValue)
        }
    }
}

extension ResourceGroupsClientTypes.ResourceFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for resourcefiltervalue0 in values {
                try valuesContainer.encode(resourcefiltervalue0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(ResourceGroupsClientTypes.ResourceFilterName.self, forKey: .name)
        name = nameDecoded
        let valuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .values)
        var valuesDecoded0:[Swift.String]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.String]()
            for string0 in valuesContainer {
                if let string0 = string0 {
                    valuesDecoded0?.append(string0)
                }
            }
        }
        values = valuesDecoded0
    }
}

extension ResourceGroupsClientTypes {
    /// A filter name and value pair that is used to obtain more specific results from a list of resources.
    public struct ResourceFilter: Swift.Equatable {
        /// The name of the filter. Filter names are case-sensitive.
        /// This member is required.
        public var name: ResourceGroupsClientTypes.ResourceFilterName?
        /// One or more filter values. Allowed filter values vary by resource filter name, and are case-sensitive.
        /// This member is required.
        public var values: [Swift.String]?

        public init (
            name: ResourceGroupsClientTypes.ResourceFilterName? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

extension ResourceGroupsClientTypes {
    public enum ResourceFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case resourcetype
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceFilterName] {
            return [
                .resourcetype,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .resourcetype: return "resource-type"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResourceFilterName(rawValue: rawValue) ?? ResourceFilterName.sdkUnknown(rawValue)
        }
    }
}

extension ResourceGroupsClientTypes.ResourceIdentifier: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case resourceType = "ResourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType, forKey: .resourceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
    }
}

extension ResourceGroupsClientTypes {
    /// A structure that contains the ARN of a resource and its resource type.
    public struct ResourceIdentifier: Swift.Equatable {
        /// The ARN of a resource.
        public var resourceArn: Swift.String?
        /// The resource type of a resource, such as AWS::EC2::Instance.
        public var resourceType: Swift.String?

        public init (
            resourceArn: Swift.String? = nil,
            resourceType: Swift.String? = nil
        )
        {
            self.resourceArn = resourceArn
            self.resourceType = resourceType
        }
    }

}

extension ResourceGroupsClientTypes.ResourceQuery: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case query = "Query"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let query = self.query {
            try encodeContainer.encode(query, forKey: .query)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(ResourceGroupsClientTypes.QueryType.self, forKey: .type)
        type = typeDecoded
        let queryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .query)
        query = queryDecoded
    }
}

extension ResourceGroupsClientTypes {
    /// The query that is used to define a resource group or a search for resources. A query specifies both a query type and a query string as a JSON object. See the examples section for example JSON strings. The examples that follow are shown as standard JSON strings. If you include such a string as a parameter to the AWS CLI or an SDK API, you might need to 'escape' the string into a single line. For example, see the [Quoting strings](https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-parameters-quoting-strings.html) in the AWS CLI User Guide. Example 1 The following generic example shows a resource query JSON string that includes only resources that meet the following criteria:
    ///
    /// * The resource type must be either resource_type1 or resource_type2.
    ///
    /// * The resource must have a tag Key1 with a value of either ValueA or ValueB.
    ///
    /// * The resource must have a tag Key2 with a value of either ValueC or ValueD.
    ///
    ///
    /// { "Type": "TAG_FILTERS_1_0", "Query": { "ResourceTypeFilters": [ "resource_type1", "resource_type2"], "TagFilters": [ { "Key": "Key1", "Values": ["ValueA","ValueB"] }, { "Key":"Key2", "Values":["ValueC","ValueD"] } ] } } This has the equivalent "shortcut" syntax of the following: { "Type": "TAG_FILTERS_1_0", "Query": { "ResourceTypeFilters": [ "resource_type1", "resource_type2"], "TagFilters": [ { "Key1": ["ValueA","ValueB"] }, { "Key2": ["ValueC","ValueD"] } ] } } Example 2 The following example shows a resource query JSON string that includes only Amazon EC2 instances that are tagged Stage with a value of Test. { "Type": "TAG_FILTERS_1_0", "Query": "{ "ResourceTypeFilters": "AWS::EC2::Instance", "TagFilters": { "Stage": "Test" } } } Example 3 The following example shows a resource query JSON string that includes resource of any supported type as long as it is tagged Stage with a value of Prod. { "Type": "TAG_FILTERS_1_0", "Query": { "ResourceTypeFilters": "AWS::AllSupported", "TagFilters": { "Stage": "Prod" } } } Example 4 The following example shows a resource query JSON string that includes only Amazon EC2 instances and Amazon S3 buckets that are part of the specified AWS CloudFormation stack. { "Type": "CLOUDFORMATION_STACK_1_0", "Query": { "ResourceTypeFilters": [ "AWS::EC2::Instance", "AWS::S3::Bucket" ], "StackIdentifier": "arn:aws:cloudformation:us-west-2:123456789012:stack/AWStestuseraccount/fb0d5000-aba8-00e8-aa9e-50d5cEXAMPLE" } }
    public struct ResourceQuery: Swift.Equatable {
        /// The query that defines a group or a search.
        /// This member is required.
        public var query: Swift.String?
        /// The type of the query. You can use the following values:
        ///
        /// * CLOUDFORMATION_STACK_1_0: Specifies that the Query contains an ARN for a CloudFormation stack.
        ///
        /// * TAG_FILTERS_1_0: Specifies that the Query parameter contains a JSON string that represents a collection of simple tag filters for resource types and tags. The JSON string uses a syntax similar to the [GetResources](https://docs.aws.amazon.com/resourcegroupstagging/latest/APIReference/API_GetResources.html) operation, but uses only the [ ResourceTypeFilters](https://docs.aws.amazon.com/resourcegroupstagging/latest/APIReference/API_GetResources.html#resourcegrouptagging-GetResources-request-ResourceTypeFilters) and [TagFilters](https://docs.aws.amazon.com/resourcegroupstagging/latest/APIReference/API_GetResources.html#resourcegrouptagging-GetResources-request-TagFiltersTagFilters) fields. If you specify more than one tag key, only resources that match all tag keys, and at least one value of each specified tag key, are returned in your query. If you specify more than one value for a tag key, a resource matches the filter if it has a tag key value that matches any of the specified values. For example, consider the following sample query for resources that have two tags, Stage and Version, with two values each: [{"Stage":["Test","Deploy"]},{"Version":["1","2"]}] The results of this query could include the following.
        ///
        /// * An EC2 instance that has the following two tags: {"Stage":"Deploy"}, and {"Version":"2"}
        ///
        /// * An S3 bucket that has the following two tags: {"Stage":"Test"}, and {"Version":"1"}
        ///
        ///
        /// The query would not include the following items in the results, however.
        ///
        /// * An EC2 instance that has only the following tag: {"Stage":"Deploy"}. The instance does not have all of the tag keys specified in the filter, so it is excluded from the results.
        ///
        /// * An RDS database that has the following two tags: {"Stage":"Archived"} and {"Version":"4"} The database has all of the tag keys, but none of those keys has an associated value that matches at least one of the specified values in the filter.
        /// This member is required.
        public var type: ResourceGroupsClientTypes.QueryType?

        public init (
            query: Swift.String? = nil,
            type: ResourceGroupsClientTypes.QueryType? = nil
        )
        {
            self.query = query
            self.type = type
        }
    }

}

extension ResourceGroupsClientTypes.ResourceStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(ResourceGroupsClientTypes.ResourceStatusValue.self, forKey: .name)
        name = nameDecoded
    }
}

extension ResourceGroupsClientTypes {
    /// A structure that identifies the current group membership status for a resource. Adding a resource to a resource group is performed asynchronously as a background task. A PENDING status indicates, for this resource, that the process isn't completed yet.
    public struct ResourceStatus: Swift.Equatable {
        /// The current status.
        public var name: ResourceGroupsClientTypes.ResourceStatusValue?

        public init (
            name: ResourceGroupsClientTypes.ResourceStatusValue? = nil
        )
        {
            self.name = name
        }
    }

}

extension ResourceGroupsClientTypes {
    public enum ResourceStatusValue: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceStatusValue] {
            return [
                .pending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .pending: return "PENDING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResourceStatusValue(rawValue: rawValue) ?? ResourceStatusValue.sdkUnknown(rawValue)
        }
    }
}

extension SearchResourcesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case resourceQuery = "ResourceQuery"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let resourceQuery = self.resourceQuery {
            try encodeContainer.encode(resourceQuery, forKey: .resourceQuery)
        }
    }
}

extension SearchResourcesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/resources/search"
    }
}

public struct SearchResourcesInput: Swift.Equatable {
    /// The total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that the service might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
    public var maxResults: Swift.Int?
    /// The parameter for receiving additional results if you receive a NextToken response in a previous request. A NextToken response indicates that more output is available. Set this parameter to the value provided by a previous call's NextToken response to indicate where the output should continue from.
    public var nextToken: Swift.String?
    /// The search query, using the same formats that are supported for resource group definition. For more information, see [CreateGroup].
    /// This member is required.
    public var resourceQuery: ResourceGroupsClientTypes.ResourceQuery?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceQuery: ResourceGroupsClientTypes.ResourceQuery? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceQuery = resourceQuery
    }
}

struct SearchResourcesInputBody: Swift.Equatable {
    let resourceQuery: ResourceGroupsClientTypes.ResourceQuery?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension SearchResourcesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case resourceQuery = "ResourceQuery"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceQueryDecoded = try containerValues.decodeIfPresent(ResourceGroupsClientTypes.ResourceQuery.self, forKey: .resourceQuery)
        resourceQuery = resourceQueryDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension SearchResourcesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SearchResourcesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SearchResourcesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case tooManyRequestsException(TooManyRequestsException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SearchResourcesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: SearchResourcesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.queryErrors = output.queryErrors
            self.resourceIdentifiers = output.resourceIdentifiers
        } else {
            self.nextToken = nil
            self.queryErrors = nil
            self.resourceIdentifiers = nil
        }
    }
}

public struct SearchResourcesOutputResponse: Swift.Equatable {
    /// If present, indicates that more output is available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
    public var nextToken: Swift.String?
    /// A list of QueryError objects. Each error is an object that contains ErrorCode and Message structures. Possible values for ErrorCode are CLOUDFORMATION_STACK_INACTIVE and CLOUDFORMATION_STACK_NOT_EXISTING.
    public var queryErrors: [ResourceGroupsClientTypes.QueryError]?
    /// The ARNs and resource types of resources that are members of the group that you specified.
    public var resourceIdentifiers: [ResourceGroupsClientTypes.ResourceIdentifier]?

    public init (
        nextToken: Swift.String? = nil,
        queryErrors: [ResourceGroupsClientTypes.QueryError]? = nil,
        resourceIdentifiers: [ResourceGroupsClientTypes.ResourceIdentifier]? = nil
    )
    {
        self.nextToken = nextToken
        self.queryErrors = queryErrors
        self.resourceIdentifiers = resourceIdentifiers
    }
}

struct SearchResourcesOutputResponseBody: Swift.Equatable {
    let resourceIdentifiers: [ResourceGroupsClientTypes.ResourceIdentifier]?
    let nextToken: Swift.String?
    let queryErrors: [ResourceGroupsClientTypes.QueryError]?
}

extension SearchResourcesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case queryErrors = "QueryErrors"
        case resourceIdentifiers = "ResourceIdentifiers"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceIdentifiersContainer = try containerValues.decodeIfPresent([ResourceGroupsClientTypes.ResourceIdentifier?].self, forKey: .resourceIdentifiers)
        var resourceIdentifiersDecoded0:[ResourceGroupsClientTypes.ResourceIdentifier]? = nil
        if let resourceIdentifiersContainer = resourceIdentifiersContainer {
            resourceIdentifiersDecoded0 = [ResourceGroupsClientTypes.ResourceIdentifier]()
            for structure0 in resourceIdentifiersContainer {
                if let structure0 = structure0 {
                    resourceIdentifiersDecoded0?.append(structure0)
                }
            }
        }
        resourceIdentifiers = resourceIdentifiersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let queryErrorsContainer = try containerValues.decodeIfPresent([ResourceGroupsClientTypes.QueryError?].self, forKey: .queryErrors)
        var queryErrorsDecoded0:[ResourceGroupsClientTypes.QueryError]? = nil
        if let queryErrorsContainer = queryErrorsContainer {
            queryErrorsDecoded0 = [ResourceGroupsClientTypes.QueryError]()
            for structure0 in queryErrorsContainer {
                if let structure0 = structure0 {
                    queryErrorsDecoded0?.append(structure0)
                }
            }
        }
        queryErrors = queryErrorsDecoded0
    }
}

extension TagInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension TagInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let arn = arn else {
            return nil
        }
        return "/resources/\(arn.urlPercentEncoding())/tags"
    }
}

public struct TagInput: Swift.Equatable {
    /// The ARN of the resource group to which to add tags.
    /// This member is required.
    public var arn: Swift.String?
    /// The tags to add to the specified resource group. A tag is a string-to-string map of key-value pairs.
    /// This member is required.
    public var tags: [Swift.String:Swift.String]?

    public init (
        arn: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.arn = arn
        self.tags = tags
    }
}

struct TagInputBody: Swift.Equatable {
    let tags: [Swift.String:Swift.String]?
}

extension TagInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum TagOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TagOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.arn = output.arn
            self.tags = output.tags
        } else {
            self.arn = nil
            self.tags = nil
        }
    }
}

public struct TagOutputResponse: Swift.Equatable {
    /// The ARN of the tagged resource.
    public var arn: Swift.String?
    /// The tags that have been added to the specified resource group.
    public var tags: [Swift.String:Swift.String]?

    public init (
        arn: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.arn = arn
        self.tags = tags
    }
}

struct TagOutputResponseBody: Swift.Equatable {
    let arn: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension TagOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TooManyRequestsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TooManyRequestsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You've exceeded throttling limits by making too many requests in a period of time.
public struct TooManyRequestsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TooManyRequestsExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension TooManyRequestsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UnauthorizedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UnauthorizedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was rejected because it doesn't have valid credentials for the target resource.
public struct UnauthorizedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct UnauthorizedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension UnauthorizedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UngroupResourcesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case group = "Group"
        case resourceArns = "ResourceArns"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let group = self.group {
            try encodeContainer.encode(group, forKey: .group)
        }
        if let resourceArns = resourceArns {
            var resourceArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceArns)
            for resourcearn0 in resourceArns {
                try resourceArnsContainer.encode(resourcearn0)
            }
        }
    }
}

extension UngroupResourcesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/ungroup-resources"
    }
}

public struct UngroupResourcesInput: Swift.Equatable {
    /// The name or the ARN of the resource group from which to remove the resources.
    /// This member is required.
    public var group: Swift.String?
    /// The ARNs of the resources to be removed from the group.
    /// This member is required.
    public var resourceArns: [Swift.String]?

    public init (
        group: Swift.String? = nil,
        resourceArns: [Swift.String]? = nil
    )
    {
        self.group = group
        self.resourceArns = resourceArns
    }
}

struct UngroupResourcesInputBody: Swift.Equatable {
    let group: Swift.String?
    let resourceArns: [Swift.String]?
}

extension UngroupResourcesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case group = "Group"
        case resourceArns = "ResourceArns"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .group)
        group = groupDecoded
        let resourceArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .resourceArns)
        var resourceArnsDecoded0:[Swift.String]? = nil
        if let resourceArnsContainer = resourceArnsContainer {
            resourceArnsDecoded0 = [Swift.String]()
            for string0 in resourceArnsContainer {
                if let string0 = string0 {
                    resourceArnsDecoded0?.append(string0)
                }
            }
        }
        resourceArns = resourceArnsDecoded0
    }
}

extension UngroupResourcesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UngroupResourcesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UngroupResourcesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UngroupResourcesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UngroupResourcesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.failed = output.failed
            self.pending = output.pending
            self.succeeded = output.succeeded
        } else {
            self.failed = nil
            self.pending = nil
            self.succeeded = nil
        }
    }
}

public struct UngroupResourcesOutputResponse: Swift.Equatable {
    /// A list of any resources that failed to be removed from the group by this operation.
    public var failed: [ResourceGroupsClientTypes.FailedResource]?
    /// A list of any resources that are still in the process of being removed from the group by this operation. These pending removals continue asynchronously. You can check the status of pending removals by using the [ListGroupResources] operation. After the resource is successfully removed, it no longer appears in the response.
    public var pending: [ResourceGroupsClientTypes.PendingResource]?
    /// A list of resources that were successfully removed from the group by this operation.
    public var succeeded: [Swift.String]?

    public init (
        failed: [ResourceGroupsClientTypes.FailedResource]? = nil,
        pending: [ResourceGroupsClientTypes.PendingResource]? = nil,
        succeeded: [Swift.String]? = nil
    )
    {
        self.failed = failed
        self.pending = pending
        self.succeeded = succeeded
    }
}

struct UngroupResourcesOutputResponseBody: Swift.Equatable {
    let succeeded: [Swift.String]?
    let failed: [ResourceGroupsClientTypes.FailedResource]?
    let pending: [ResourceGroupsClientTypes.PendingResource]?
}

extension UngroupResourcesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failed = "Failed"
        case pending = "Pending"
        case succeeded = "Succeeded"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let succeededContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .succeeded)
        var succeededDecoded0:[Swift.String]? = nil
        if let succeededContainer = succeededContainer {
            succeededDecoded0 = [Swift.String]()
            for string0 in succeededContainer {
                if let string0 = string0 {
                    succeededDecoded0?.append(string0)
                }
            }
        }
        succeeded = succeededDecoded0
        let failedContainer = try containerValues.decodeIfPresent([ResourceGroupsClientTypes.FailedResource?].self, forKey: .failed)
        var failedDecoded0:[ResourceGroupsClientTypes.FailedResource]? = nil
        if let failedContainer = failedContainer {
            failedDecoded0 = [ResourceGroupsClientTypes.FailedResource]()
            for structure0 in failedContainer {
                if let structure0 = structure0 {
                    failedDecoded0?.append(structure0)
                }
            }
        }
        failed = failedDecoded0
        let pendingContainer = try containerValues.decodeIfPresent([ResourceGroupsClientTypes.PendingResource?].self, forKey: .pending)
        var pendingDecoded0:[ResourceGroupsClientTypes.PendingResource]? = nil
        if let pendingContainer = pendingContainer {
            pendingDecoded0 = [ResourceGroupsClientTypes.PendingResource]()
            for structure0 in pendingContainer {
                if let structure0 = structure0 {
                    pendingDecoded0?.append(structure0)
                }
            }
        }
        pending = pendingDecoded0
    }
}

extension UntagInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keys = "Keys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keys = keys {
            var keysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keys)
            for tagkey0 in keys {
                try keysContainer.encode(tagkey0)
            }
        }
    }
}

extension UntagInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let arn = arn else {
            return nil
        }
        return "/resources/\(arn.urlPercentEncoding())/tags"
    }
}

public struct UntagInput: Swift.Equatable {
    /// The ARN of the resource group from which to remove tags. The command removed both the specified keys and any values associated with those keys.
    /// This member is required.
    public var arn: Swift.String?
    /// The keys of the tags to be removed.
    /// This member is required.
    public var keys: [Swift.String]?

    public init (
        arn: Swift.String? = nil,
        keys: [Swift.String]? = nil
    )
    {
        self.arn = arn
        self.keys = keys
    }
}

struct UntagInputBody: Swift.Equatable {
    let keys: [Swift.String]?
}

extension UntagInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keys = "Keys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .keys)
        var keysDecoded0:[Swift.String]? = nil
        if let keysContainer = keysContainer {
            keysDecoded0 = [Swift.String]()
            for string0 in keysContainer {
                if let string0 = string0 {
                    keysDecoded0?.append(string0)
                }
            }
        }
        keys = keysDecoded0
    }
}

extension UntagOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UntagOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UntagOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.arn = output.arn
            self.keys = output.keys
        } else {
            self.arn = nil
            self.keys = nil
        }
    }
}

public struct UntagOutputResponse: Swift.Equatable {
    /// The ARN of the resource group from which tags have been removed.
    public var arn: Swift.String?
    /// The keys of the tags that were removed.
    public var keys: [Swift.String]?

    public init (
        arn: Swift.String? = nil,
        keys: [Swift.String]? = nil
    )
    {
        self.arn = arn
        self.keys = keys
    }
}

struct UntagOutputResponseBody: Swift.Equatable {
    let arn: Swift.String?
    let keys: [Swift.String]?
}

extension UntagOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case keys = "Keys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let keysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .keys)
        var keysDecoded0:[Swift.String]? = nil
        if let keysContainer = keysContainer {
            keysDecoded0 = [Swift.String]()
            for string0 in keysContainer {
                if let string0 = string0 {
                    keysDecoded0?.append(string0)
                }
            }
        }
        keys = keysDecoded0
    }
}

extension UpdateGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case group = "Group"
        case groupName = "GroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let group = self.group {
            try encodeContainer.encode(group, forKey: .group)
        }
        if let groupName = self.groupName {
            try encodeContainer.encode(groupName, forKey: .groupName)
        }
    }
}

extension UpdateGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/update-group"
    }
}

public struct UpdateGroupInput: Swift.Equatable {
    /// The new description that you want to update the resource group with. Descriptions can contain letters, numbers, hyphens, underscores, periods, and spaces.
    public var description: Swift.String?
    /// The name or the ARN of the resource group to modify.
    public var group: Swift.String?
    /// Don't use this parameter. Use Group instead.
    @available(*, deprecated, message: "This field is deprecated, use Group instead.")
    public var groupName: Swift.String?

    public init (
        description: Swift.String? = nil,
        group: Swift.String? = nil,
        groupName: Swift.String? = nil
    )
    {
        self.description = description
        self.group = group
        self.groupName = groupName
    }
}

struct UpdateGroupInputBody: Swift.Equatable {
    let groupName: Swift.String?
    let group: Swift.String?
    let description: Swift.String?
}

extension UpdateGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case group = "Group"
        case groupName = "GroupName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupName)
        groupName = groupNameDecoded
        let groupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .group)
        group = groupDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

extension UpdateGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateGroupOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.group = output.group
        } else {
            self.group = nil
        }
    }
}

public struct UpdateGroupOutputResponse: Swift.Equatable {
    /// The update description of the resource group.
    public var group: ResourceGroupsClientTypes.Group?

    public init (
        group: ResourceGroupsClientTypes.Group? = nil
    )
    {
        self.group = group
    }
}

struct UpdateGroupOutputResponseBody: Swift.Equatable {
    let group: ResourceGroupsClientTypes.Group?
}

extension UpdateGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case group = "Group"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupDecoded = try containerValues.decodeIfPresent(ResourceGroupsClientTypes.Group.self, forKey: .group)
        group = groupDecoded
    }
}

extension UpdateGroupQueryInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case group = "Group"
        case groupName = "GroupName"
        case resourceQuery = "ResourceQuery"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let group = self.group {
            try encodeContainer.encode(group, forKey: .group)
        }
        if let groupName = self.groupName {
            try encodeContainer.encode(groupName, forKey: .groupName)
        }
        if let resourceQuery = self.resourceQuery {
            try encodeContainer.encode(resourceQuery, forKey: .resourceQuery)
        }
    }
}

extension UpdateGroupQueryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/update-group-query"
    }
}

public struct UpdateGroupQueryInput: Swift.Equatable {
    /// The name or the ARN of the resource group to query.
    public var group: Swift.String?
    /// Don't use this parameter. Use Group instead.
    @available(*, deprecated, message: "This field is deprecated, use Group instead.")
    public var groupName: Swift.String?
    /// The resource query to determine which AWS resources are members of this resource group. A resource group can contain either a Configuration or a ResourceQuery, but not both.
    /// This member is required.
    public var resourceQuery: ResourceGroupsClientTypes.ResourceQuery?

    public init (
        group: Swift.String? = nil,
        groupName: Swift.String? = nil,
        resourceQuery: ResourceGroupsClientTypes.ResourceQuery? = nil
    )
    {
        self.group = group
        self.groupName = groupName
        self.resourceQuery = resourceQuery
    }
}

struct UpdateGroupQueryInputBody: Swift.Equatable {
    let groupName: Swift.String?
    let group: Swift.String?
    let resourceQuery: ResourceGroupsClientTypes.ResourceQuery?
}

extension UpdateGroupQueryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case group = "Group"
        case groupName = "GroupName"
        case resourceQuery = "ResourceQuery"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupName)
        groupName = groupNameDecoded
        let groupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .group)
        group = groupDecoded
        let resourceQueryDecoded = try containerValues.decodeIfPresent(ResourceGroupsClientTypes.ResourceQuery.self, forKey: .resourceQuery)
        resourceQuery = resourceQueryDecoded
    }
}

extension UpdateGroupQueryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateGroupQueryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ForbiddenException" : self = .forbiddenException(try ForbiddenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerErrorException" : self = .internalServerErrorException(try InternalServerErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MethodNotAllowedException" : self = .methodNotAllowedException(try MethodNotAllowedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyRequestsException" : self = .tooManyRequestsException(try TooManyRequestsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateGroupQueryOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case forbiddenException(ForbiddenException)
    case internalServerErrorException(InternalServerErrorException)
    case methodNotAllowedException(MethodNotAllowedException)
    case notFoundException(NotFoundException)
    case tooManyRequestsException(TooManyRequestsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateGroupQueryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateGroupQueryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.groupQuery = output.groupQuery
        } else {
            self.groupQuery = nil
        }
    }
}

public struct UpdateGroupQueryOutputResponse: Swift.Equatable {
    /// The updated resource query associated with the resource group after the update.
    public var groupQuery: ResourceGroupsClientTypes.GroupQuery?

    public init (
        groupQuery: ResourceGroupsClientTypes.GroupQuery? = nil
    )
    {
        self.groupQuery = groupQuery
    }
}

struct UpdateGroupQueryOutputResponseBody: Swift.Equatable {
    let groupQuery: ResourceGroupsClientTypes.GroupQuery?
}

extension UpdateGroupQueryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groupQuery = "GroupQuery"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupQueryDecoded = try containerValues.decodeIfPresent(ResourceGroupsClientTypes.GroupQuery.self, forKey: .groupQuery)
        groupQuery = groupQueryDecoded
    }
}
