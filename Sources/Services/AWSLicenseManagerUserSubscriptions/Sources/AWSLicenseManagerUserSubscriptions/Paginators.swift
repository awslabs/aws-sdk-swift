//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

import protocol ClientRuntime.PaginateToken
import struct ClientRuntime.PaginatorSequence

extension LicenseManagerUserSubscriptionsClient {
    /// Paginate over `[ListIdentityProvidersOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListIdentityProvidersInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListIdentityProvidersOutput`
    public func listIdentityProvidersPaginated(input: ListIdentityProvidersInput) -> ClientRuntime.PaginatorSequence<ListIdentityProvidersInput, ListIdentityProvidersOutput> {
        return ClientRuntime.PaginatorSequence<ListIdentityProvidersInput, ListIdentityProvidersOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listIdentityProviders(input:))
    }
}

extension ListIdentityProvidersInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListIdentityProvidersInput {
        return ListIdentityProvidersInput(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListIdentityProvidersInput, OperationStackOutput == ListIdentityProvidersOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listIdentityProvidersPaginated`
    /// to access the nested member `[LicenseManagerUserSubscriptionsClientTypes.IdentityProviderSummary]`
    /// - Returns: `[LicenseManagerUserSubscriptionsClientTypes.IdentityProviderSummary]`
    public func identityProviderSummaries() async throws -> [LicenseManagerUserSubscriptionsClientTypes.IdentityProviderSummary] {
        return try await self.asyncCompactMap { item in item.identityProviderSummaries }
    }
}
extension LicenseManagerUserSubscriptionsClient {
    /// Paginate over `[ListInstancesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListInstancesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListInstancesOutput`
    public func listInstancesPaginated(input: ListInstancesInput) -> ClientRuntime.PaginatorSequence<ListInstancesInput, ListInstancesOutput> {
        return ClientRuntime.PaginatorSequence<ListInstancesInput, ListInstancesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listInstances(input:))
    }
}

extension ListInstancesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListInstancesInput {
        return ListInstancesInput(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListInstancesInput, OperationStackOutput == ListInstancesOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listInstancesPaginated`
    /// to access the nested member `[LicenseManagerUserSubscriptionsClientTypes.InstanceSummary]`
    /// - Returns: `[LicenseManagerUserSubscriptionsClientTypes.InstanceSummary]`
    public func instanceSummaries() async throws -> [LicenseManagerUserSubscriptionsClientTypes.InstanceSummary] {
        return try await self.asyncCompactMap { item in item.instanceSummaries }
    }
}
extension LicenseManagerUserSubscriptionsClient {
    /// Paginate over `[ListLicenseServerEndpointsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListLicenseServerEndpointsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListLicenseServerEndpointsOutput`
    public func listLicenseServerEndpointsPaginated(input: ListLicenseServerEndpointsInput) -> ClientRuntime.PaginatorSequence<ListLicenseServerEndpointsInput, ListLicenseServerEndpointsOutput> {
        return ClientRuntime.PaginatorSequence<ListLicenseServerEndpointsInput, ListLicenseServerEndpointsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listLicenseServerEndpoints(input:))
    }
}

extension ListLicenseServerEndpointsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListLicenseServerEndpointsInput {
        return ListLicenseServerEndpointsInput(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListLicenseServerEndpointsInput, OperationStackOutput == ListLicenseServerEndpointsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listLicenseServerEndpointsPaginated`
    /// to access the nested member `[LicenseManagerUserSubscriptionsClientTypes.LicenseServerEndpoint]`
    /// - Returns: `[LicenseManagerUserSubscriptionsClientTypes.LicenseServerEndpoint]`
    public func licenseServerEndpoints() async throws -> [LicenseManagerUserSubscriptionsClientTypes.LicenseServerEndpoint] {
        return try await self.asyncCompactMap { item in item.licenseServerEndpoints }
    }
}
extension LicenseManagerUserSubscriptionsClient {
    /// Paginate over `[ListProductSubscriptionsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListProductSubscriptionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListProductSubscriptionsOutput`
    public func listProductSubscriptionsPaginated(input: ListProductSubscriptionsInput) -> ClientRuntime.PaginatorSequence<ListProductSubscriptionsInput, ListProductSubscriptionsOutput> {
        return ClientRuntime.PaginatorSequence<ListProductSubscriptionsInput, ListProductSubscriptionsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listProductSubscriptions(input:))
    }
}

extension ListProductSubscriptionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListProductSubscriptionsInput {
        return ListProductSubscriptionsInput(
            filters: self.filters,
            identityProvider: self.identityProvider,
            maxResults: self.maxResults,
            nextToken: token,
            product: self.product
        )}
}

extension PaginatorSequence where OperationStackInput == ListProductSubscriptionsInput, OperationStackOutput == ListProductSubscriptionsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listProductSubscriptionsPaginated`
    /// to access the nested member `[LicenseManagerUserSubscriptionsClientTypes.ProductUserSummary]`
    /// - Returns: `[LicenseManagerUserSubscriptionsClientTypes.ProductUserSummary]`
    public func productUserSummaries() async throws -> [LicenseManagerUserSubscriptionsClientTypes.ProductUserSummary] {
        return try await self.asyncCompactMap { item in item.productUserSummaries }
    }
}
extension LicenseManagerUserSubscriptionsClient {
    /// Paginate over `[ListUserAssociationsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListUserAssociationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListUserAssociationsOutput`
    public func listUserAssociationsPaginated(input: ListUserAssociationsInput) -> ClientRuntime.PaginatorSequence<ListUserAssociationsInput, ListUserAssociationsOutput> {
        return ClientRuntime.PaginatorSequence<ListUserAssociationsInput, ListUserAssociationsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listUserAssociations(input:))
    }
}

extension ListUserAssociationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListUserAssociationsInput {
        return ListUserAssociationsInput(
            filters: self.filters,
            identityProvider: self.identityProvider,
            instanceId: self.instanceId,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListUserAssociationsInput, OperationStackOutput == ListUserAssociationsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listUserAssociationsPaginated`
    /// to access the nested member `[LicenseManagerUserSubscriptionsClientTypes.InstanceUserSummary]`
    /// - Returns: `[LicenseManagerUserSubscriptionsClientTypes.InstanceUserSummary]`
    public func instanceUserSummaries() async throws -> [LicenseManagerUserSubscriptionsClientTypes.InstanceUserSummary] {
        return try await self.asyncCompactMap { item in item.instanceUserSummaries }
    }
}
