// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime


/// Paginate over `[ListIdentityProvidersOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListIdentityProvidersInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListIdentityProvidersOutputResponse`
extension LicenseManagerUserSubscriptionsClient {
    public func listIdentityProvidersPaginated(input: ListIdentityProvidersInput) -> ClientRuntime.PaginatorSequence<ListIdentityProvidersInput, ListIdentityProvidersOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListIdentityProvidersInput, ListIdentityProvidersOutputResponse>(input: input, inputKey: \ListIdentityProvidersInput.nextToken, outputKey: \ListIdentityProvidersOutputResponse.nextToken, paginationFunction: self.listIdentityProviders(input:))
    }
}

extension ListIdentityProvidersInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListIdentityProvidersInput {
        return ListIdentityProvidersInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `listIdentityProvidersPaginated`
/// to access the nested member `[LicenseManagerUserSubscriptionsClientTypes.IdentityProviderSummary]`
/// - Returns: `[LicenseManagerUserSubscriptionsClientTypes.IdentityProviderSummary]`
extension PaginatorSequence where Input == ListIdentityProvidersInput, Output == ListIdentityProvidersOutputResponse {
    public func identityProviderSummaries() async throws -> [LicenseManagerUserSubscriptionsClientTypes.IdentityProviderSummary] {
        return try await self.asyncCompactMap { item in item.identityProviderSummaries }
    }
}

/// Paginate over `[ListInstancesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListInstancesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListInstancesOutputResponse`
extension LicenseManagerUserSubscriptionsClient {
    public func listInstancesPaginated(input: ListInstancesInput) -> ClientRuntime.PaginatorSequence<ListInstancesInput, ListInstancesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListInstancesInput, ListInstancesOutputResponse>(input: input, inputKey: \ListInstancesInput.nextToken, outputKey: \ListInstancesOutputResponse.nextToken, paginationFunction: self.listInstances(input:))
    }
}

extension ListInstancesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListInstancesInput {
        return ListInstancesInput(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `listInstancesPaginated`
/// to access the nested member `[LicenseManagerUserSubscriptionsClientTypes.InstanceSummary]`
/// - Returns: `[LicenseManagerUserSubscriptionsClientTypes.InstanceSummary]`
extension PaginatorSequence where Input == ListInstancesInput, Output == ListInstancesOutputResponse {
    public func instanceSummaries() async throws -> [LicenseManagerUserSubscriptionsClientTypes.InstanceSummary] {
        return try await self.asyncCompactMap { item in item.instanceSummaries }
    }
}

/// Paginate over `[ListProductSubscriptionsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListProductSubscriptionsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListProductSubscriptionsOutputResponse`
extension LicenseManagerUserSubscriptionsClient {
    public func listProductSubscriptionsPaginated(input: ListProductSubscriptionsInput) -> ClientRuntime.PaginatorSequence<ListProductSubscriptionsInput, ListProductSubscriptionsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListProductSubscriptionsInput, ListProductSubscriptionsOutputResponse>(input: input, inputKey: \ListProductSubscriptionsInput.nextToken, outputKey: \ListProductSubscriptionsOutputResponse.nextToken, paginationFunction: self.listProductSubscriptions(input:))
    }
}

extension ListProductSubscriptionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListProductSubscriptionsInput {
        return ListProductSubscriptionsInput(
            filters: self.filters,
            identityProvider: self.identityProvider,
            maxResults: self.maxResults,
            nextToken: token,
            product: self.product
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `listProductSubscriptionsPaginated`
/// to access the nested member `[LicenseManagerUserSubscriptionsClientTypes.ProductUserSummary]`
/// - Returns: `[LicenseManagerUserSubscriptionsClientTypes.ProductUserSummary]`
extension PaginatorSequence where Input == ListProductSubscriptionsInput, Output == ListProductSubscriptionsOutputResponse {
    public func productUserSummaries() async throws -> [LicenseManagerUserSubscriptionsClientTypes.ProductUserSummary] {
        return try await self.asyncCompactMap { item in item.productUserSummaries }
    }
}

/// Paginate over `[ListUserAssociationsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListUserAssociationsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListUserAssociationsOutputResponse`
extension LicenseManagerUserSubscriptionsClient {
    public func listUserAssociationsPaginated(input: ListUserAssociationsInput) -> ClientRuntime.PaginatorSequence<ListUserAssociationsInput, ListUserAssociationsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListUserAssociationsInput, ListUserAssociationsOutputResponse>(input: input, inputKey: \ListUserAssociationsInput.nextToken, outputKey: \ListUserAssociationsOutputResponse.nextToken, paginationFunction: self.listUserAssociations(input:))
    }
}

extension ListUserAssociationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListUserAssociationsInput {
        return ListUserAssociationsInput(
            filters: self.filters,
            identityProvider: self.identityProvider,
            instanceId: self.instanceId,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `listUserAssociationsPaginated`
/// to access the nested member `[LicenseManagerUserSubscriptionsClientTypes.InstanceUserSummary]`
/// - Returns: `[LicenseManagerUserSubscriptionsClientTypes.InstanceUserSummary]`
extension PaginatorSequence where Input == ListUserAssociationsInput, Output == ListUserAssociationsOutputResponse {
    public func instanceUserSummaries() async throws -> [LicenseManagerUserSubscriptionsClientTypes.InstanceUserSummary] {
        return try await self.asyncCompactMap { item in item.instanceUserSummaries }
    }
}
