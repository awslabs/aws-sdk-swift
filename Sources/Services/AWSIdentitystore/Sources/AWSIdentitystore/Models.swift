//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.Document

/// You do not have sufficient access to perform this action.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        /// The identifier for each request. This value is a globally unique ID that is generated by the identity store service for each sent request, and is then returned inside the exception if the request fails.
        public internal(set) var requestId: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        requestId: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.requestId = requestId
    }
}

extension IdentitystoreClientTypes {
    /// The address associated with the specified user.
    public struct Address {
        /// The country of the address.
        public var country: Swift.String?
        /// A string containing a formatted version of the address for display.
        public var formatted: Swift.String?
        /// A string of the address locality.
        public var locality: Swift.String?
        /// The postal code of the address.
        public var postalCode: Swift.String?
        /// A Boolean value representing whether this is the primary address for the associated resource.
        public var primary: Swift.Bool
        /// The region of the address.
        public var region: Swift.String?
        /// The street of the address.
        public var streetAddress: Swift.String?
        /// A string representing the type of address. For example, "Home."
        public var type: Swift.String?

        public init(
            country: Swift.String? = nil,
            formatted: Swift.String? = nil,
            locality: Swift.String? = nil,
            postalCode: Swift.String? = nil,
            primary: Swift.Bool = false,
            region: Swift.String? = nil,
            streetAddress: Swift.String? = nil,
            type: Swift.String? = nil
        )
        {
            self.country = country
            self.formatted = formatted
            self.locality = locality
            self.postalCode = postalCode
            self.primary = primary
            self.region = region
            self.streetAddress = streetAddress
            self.type = type
        }
    }

}

extension IdentitystoreClientTypes.Address: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Address(country: \"CONTENT_REDACTED\", formatted: \"CONTENT_REDACTED\", locality: \"CONTENT_REDACTED\", postalCode: \"CONTENT_REDACTED\", primary: \"CONTENT_REDACTED\", region: \"CONTENT_REDACTED\", streetAddress: \"CONTENT_REDACTED\", type: \"CONTENT_REDACTED\")"}
}

extension IdentitystoreClientTypes {
    /// The identifier issued to this resource by an external identity provider.
    public struct ExternalId {
        /// The identifier issued to this resource by an external identity provider.
        /// This member is required.
        public var id: Swift.String?
        /// The issuer for an external identifier.
        /// This member is required.
        public var issuer: Swift.String?

        public init(
            id: Swift.String? = nil,
            issuer: Swift.String? = nil
        )
        {
            self.id = id
            self.issuer = issuer
        }
    }

}

extension IdentitystoreClientTypes.ExternalId: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExternalId(id: \"CONTENT_REDACTED\", issuer: \"CONTENT_REDACTED\")"}
}

extension IdentitystoreClientTypes {
    /// An entity attribute that's unique to a specific entity.
    public struct UniqueAttribute {
        /// A string representation of the path to a given attribute or sub-attribute. Supports JMESPath.
        /// This member is required.
        public var attributePath: Swift.String?
        /// The value of the attribute. This is a Document type. This type is not supported by Java V1, Go V1, and older versions of the CLI.
        /// This member is required.
        public var attributeValue: Smithy.Document?

        public init(
            attributePath: Swift.String? = nil,
            attributeValue: Smithy.Document? = nil
        )
        {
            self.attributePath = attributePath
            self.attributeValue = attributeValue
        }
    }

}

extension IdentitystoreClientTypes {
    /// A unique identifier for a user or group that is not the primary identifier. This value can be an identifier from an external identity provider (IdP) that is associated with the user, the group, or a unique attribute.
    public enum AlternateIdentifier {
        /// The identifier issued to this resource by an external identity provider.
        case externalid(IdentitystoreClientTypes.ExternalId)
        /// An entity attribute that's unique to a specific entity.
        case uniqueattribute(IdentitystoreClientTypes.UniqueAttribute)
        case sdkUnknown(Swift.String)
    }

}

extension IdentitystoreClientTypes {
    /// An operation that applies to the requested group. This operation might add, replace, or remove an attribute.
    public struct AttributeOperation {
        /// A string representation of the path to a given attribute or sub-attribute. Supports JMESPath.
        /// This member is required.
        public var attributePath: Swift.String?
        /// The value of the attribute. This is a Document type. This type is not supported by Java V1, Go V1, and older versions of the CLI.
        public var attributeValue: Smithy.Document?

        public init(
            attributePath: Swift.String? = nil,
            attributeValue: Smithy.Document? = nil
        )
        {
            self.attributePath = attributePath
            self.attributeValue = attributeValue
        }
    }

}

extension IdentitystoreClientTypes {

    public enum ResourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case group
        case groupMembership
        case identityStore
        case user
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceType] {
            return [
                .group,
                .groupMembership,
                .identityStore,
                .user
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .group: return "GROUP"
            case .groupMembership: return "GROUP_MEMBERSHIP"
            case .identityStore: return "IDENTITY_STORE"
            case .user: return "USER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// Indicates that a requested resource is not found.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        /// The identifier for each request. This value is a globally unique ID that is generated by the identity store service for each sent request, and is then returned inside the exception if the request fails.
        public internal(set) var requestId: Swift.String? = nil
        /// The identifier for a resource in the identity store that can be used as UserId or GroupId. The format for ResourceId is either UUID or 1234567890-UUID, where UUID is a randomly generated value for each resource when it is created and 1234567890 represents the IdentityStoreId string value. In the case that the identity store is migrated from a legacy SSO identity store, the ResourceId for that identity store will be in the format of UUID. Otherwise, it will be in the 1234567890-UUID format.
        public internal(set) var resourceId: Swift.String? = nil
        /// An enum object indicating the type of resource in the identity store service. Valid values include USER, GROUP, and IDENTITY_STORE.
        public internal(set) var resourceType: IdentitystoreClientTypes.ResourceType? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        requestId: Swift.String? = nil,
        resourceId: Swift.String? = nil,
        resourceType: IdentitystoreClientTypes.ResourceType? = nil
    )
    {
        self.properties.message = message
        self.properties.requestId = requestId
        self.properties.resourceId = resourceId
        self.properties.resourceType = resourceType
    }
}

/// The request failed because it contains a syntax error.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        /// The identifier for each request. This value is a globally unique ID that is generated by the identity store service for each sent request, and is then returned inside the exception if the request fails.
        public internal(set) var requestId: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        requestId: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.requestId = requestId
    }
}

public struct GetGroupIdInput {
    /// A unique identifier for a user or group that is not the primary identifier. This value can be an identifier from an external identity provider (IdP) that is associated with the user, the group, or a unique attribute. For the unique attribute, the only valid path is displayName.
    /// This member is required.
    public var alternateIdentifier: IdentitystoreClientTypes.AlternateIdentifier?
    /// The globally unique identifier for the identity store.
    /// This member is required.
    public var identityStoreId: Swift.String?

    public init(
        alternateIdentifier: IdentitystoreClientTypes.AlternateIdentifier? = nil,
        identityStoreId: Swift.String? = nil
    )
    {
        self.alternateIdentifier = alternateIdentifier
        self.identityStoreId = identityStoreId
    }
}

public struct GetGroupIdOutput {
    /// The identifier for a group in the identity store.
    /// This member is required.
    public var groupId: Swift.String?
    /// The globally unique identifier for the identity store.
    /// This member is required.
    public var identityStoreId: Swift.String?

    public init(
        groupId: Swift.String? = nil,
        identityStoreId: Swift.String? = nil
    )
    {
        self.groupId = groupId
        self.identityStoreId = identityStoreId
    }
}

extension IdentitystoreClientTypes {
    /// An object containing the identifier of a group member.
    public enum MemberId {
        /// An object containing the identifiers of resources that can be members.
        case userid(Swift.String)
        case sdkUnknown(Swift.String)
    }

}

public struct GetGroupMembershipIdInput {
    /// The identifier for a group in the identity store.
    /// This member is required.
    public var groupId: Swift.String?
    /// The globally unique identifier for the identity store.
    /// This member is required.
    public var identityStoreId: Swift.String?
    /// An object that contains the identifier of a group member. Setting the UserID field to the specific identifier for a user indicates that the user is a member of the group.
    /// This member is required.
    public var memberId: IdentitystoreClientTypes.MemberId?

    public init(
        groupId: Swift.String? = nil,
        identityStoreId: Swift.String? = nil,
        memberId: IdentitystoreClientTypes.MemberId? = nil
    )
    {
        self.groupId = groupId
        self.identityStoreId = identityStoreId
        self.memberId = memberId
    }
}

public struct GetGroupMembershipIdOutput {
    /// The globally unique identifier for the identity store.
    /// This member is required.
    public var identityStoreId: Swift.String?
    /// The identifier for a GroupMembership in an identity store.
    /// This member is required.
    public var membershipId: Swift.String?

    public init(
        identityStoreId: Swift.String? = nil,
        membershipId: Swift.String? = nil
    )
    {
        self.identityStoreId = identityStoreId
        self.membershipId = membershipId
    }
}

public struct GetUserIdInput {
    /// A unique identifier for a user or group that is not the primary identifier. This value can be an identifier from an external identity provider (IdP) that is associated with the user, the group, or a unique attribute. For the unique attribute, the only valid paths are userName and emails.value.
    /// This member is required.
    public var alternateIdentifier: IdentitystoreClientTypes.AlternateIdentifier?
    /// The globally unique identifier for the identity store.
    /// This member is required.
    public var identityStoreId: Swift.String?

    public init(
        alternateIdentifier: IdentitystoreClientTypes.AlternateIdentifier? = nil,
        identityStoreId: Swift.String? = nil
    )
    {
        self.alternateIdentifier = alternateIdentifier
        self.identityStoreId = identityStoreId
    }
}

public struct GetUserIdOutput {
    /// The globally unique identifier for the identity store.
    /// This member is required.
    public var identityStoreId: Swift.String?
    /// The identifier for a user in the identity store.
    /// This member is required.
    public var userId: Swift.String?

    public init(
        identityStoreId: Swift.String? = nil,
        userId: Swift.String? = nil
    )
    {
        self.identityStoreId = identityStoreId
        self.userId = userId
    }
}

extension IdentitystoreClientTypes {

    public enum ConflictExceptionReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case concurrentModification
        case uniquenessConstraintViolation
        case sdkUnknown(Swift.String)

        public static var allCases: [ConflictExceptionReason] {
            return [
                .concurrentModification,
                .uniquenessConstraintViolation
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .concurrentModification: return "CONCURRENT_MODIFICATION"
            case .uniquenessConstraintViolation: return "UNIQUENESS_CONSTRAINT_VIOLATION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// This request cannot be completed for one of the following reasons:
///
/// * Performing the requested operation would violate an existing uniqueness claim in the identity store. Resolve the conflict before retrying this request.
///
/// * The requested resource was being concurrently modified by another request.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        /// This request cannot be completed for one of the following reasons:
        ///
        /// * Performing the requested operation would violate an existing uniqueness claim in the identity store. Resolve the conflict before retrying this request.
        ///
        /// * The requested resource was being concurrently modified by another request.
        public internal(set) var reason: IdentitystoreClientTypes.ConflictExceptionReason? = nil
        /// The identifier for each request. This value is a globally unique ID that is generated by the identity store service for each sent request, and is then returned inside the exception if the request fails.
        public internal(set) var requestId: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        reason: IdentitystoreClientTypes.ConflictExceptionReason? = nil,
        requestId: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.reason = reason
        self.properties.requestId = requestId
    }
}

/// The request would cause the number of users or groups in the identity store to exceed the maximum allowed.
public struct ServiceQuotaExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        /// The identifier for each request. This value is a globally unique ID that is generated by the identity store service for each sent request, and is then returned inside the exception if the request fails.
        public internal(set) var requestId: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceQuotaExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        requestId: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.requestId = requestId
    }
}

public struct CreateGroupMembershipInput {
    /// The identifier for a group in the identity store.
    /// This member is required.
    public var groupId: Swift.String?
    /// The globally unique identifier for the identity store.
    /// This member is required.
    public var identityStoreId: Swift.String?
    /// An object that contains the identifier of a group member. Setting the UserID field to the specific identifier for a user indicates that the user is a member of the group.
    /// This member is required.
    public var memberId: IdentitystoreClientTypes.MemberId?

    public init(
        groupId: Swift.String? = nil,
        identityStoreId: Swift.String? = nil,
        memberId: IdentitystoreClientTypes.MemberId? = nil
    )
    {
        self.groupId = groupId
        self.identityStoreId = identityStoreId
        self.memberId = memberId
    }
}

public struct CreateGroupMembershipOutput {
    /// The globally unique identifier for the identity store.
    /// This member is required.
    public var identityStoreId: Swift.String?
    /// The identifier for a newly created GroupMembership in an identity store.
    /// This member is required.
    public var membershipId: Swift.String?

    public init(
        identityStoreId: Swift.String? = nil,
        membershipId: Swift.String? = nil
    )
    {
        self.identityStoreId = identityStoreId
        self.membershipId = membershipId
    }
}

public struct DeleteGroupMembershipInput {
    /// The globally unique identifier for the identity store.
    /// This member is required.
    public var identityStoreId: Swift.String?
    /// The identifier for a GroupMembership in an identity store.
    /// This member is required.
    public var membershipId: Swift.String?

    public init(
        identityStoreId: Swift.String? = nil,
        membershipId: Swift.String? = nil
    )
    {
        self.identityStoreId = identityStoreId
        self.membershipId = membershipId
    }
}

public struct DeleteGroupMembershipOutput {

    public init() { }
}

public struct DescribeGroupMembershipInput {
    /// The globally unique identifier for the identity store.
    /// This member is required.
    public var identityStoreId: Swift.String?
    /// The identifier for a GroupMembership in an identity store.
    /// This member is required.
    public var membershipId: Swift.String?

    public init(
        identityStoreId: Swift.String? = nil,
        membershipId: Swift.String? = nil
    )
    {
        self.identityStoreId = identityStoreId
        self.membershipId = membershipId
    }
}

public struct DescribeGroupMembershipOutput {
    /// The identifier for a group in the identity store.
    /// This member is required.
    public var groupId: Swift.String?
    /// The globally unique identifier for the identity store.
    /// This member is required.
    public var identityStoreId: Swift.String?
    /// An object containing the identifier of a group member.
    /// This member is required.
    public var memberId: IdentitystoreClientTypes.MemberId?
    /// The identifier for a GroupMembership in an identity store.
    /// This member is required.
    public var membershipId: Swift.String?

    public init(
        groupId: Swift.String? = nil,
        identityStoreId: Swift.String? = nil,
        memberId: IdentitystoreClientTypes.MemberId? = nil,
        membershipId: Swift.String? = nil
    )
    {
        self.groupId = groupId
        self.identityStoreId = identityStoreId
        self.memberId = memberId
        self.membershipId = membershipId
    }
}

public struct ListGroupMembershipsInput {
    /// The identifier for a group in the identity store.
    /// This member is required.
    public var groupId: Swift.String?
    /// The globally unique identifier for the identity store.
    /// This member is required.
    public var identityStoreId: Swift.String?
    /// The maximum number of results to be returned per request. This parameter is used in all List requests to specify how many results to return in one page.
    public var maxResults: Swift.Int?
    /// The pagination token used for the ListUsers, ListGroups and ListGroupMemberships API operations. This value is generated by the identity store service. It is returned in the API response if the total results are more than the size of one page. This token is also returned when it is used in the API request to search for the next page.
    public var nextToken: Swift.String?

    public init(
        groupId: Swift.String? = nil,
        identityStoreId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.groupId = groupId
        self.identityStoreId = identityStoreId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension IdentitystoreClientTypes {
    /// Contains the identifiers for a group, a group member, and a GroupMembership object in the identity store.
    public struct GroupMembership {
        /// The identifier for a group in the identity store.
        public var groupId: Swift.String?
        /// The globally unique identifier for the identity store.
        /// This member is required.
        public var identityStoreId: Swift.String?
        /// An object that contains the identifier of a group member. Setting the UserID field to the specific identifier for a user indicates that the user is a member of the group.
        public var memberId: IdentitystoreClientTypes.MemberId?
        /// The identifier for a GroupMembership object in an identity store.
        public var membershipId: Swift.String?

        public init(
            groupId: Swift.String? = nil,
            identityStoreId: Swift.String? = nil,
            memberId: IdentitystoreClientTypes.MemberId? = nil,
            membershipId: Swift.String? = nil
        )
        {
            self.groupId = groupId
            self.identityStoreId = identityStoreId
            self.memberId = memberId
            self.membershipId = membershipId
        }
    }

}

public struct ListGroupMembershipsOutput {
    /// A list of GroupMembership objects in the group.
    /// This member is required.
    public var groupMemberships: [IdentitystoreClientTypes.GroupMembership]?
    /// The pagination token used for the ListUsers, ListGroups, and ListGroupMemberships API operations. This value is generated by the identity store service. It is returned in the API response if the total results are more than the size of one page. This token is also returned when it is used in the API request to search for the next page.
    public var nextToken: Swift.String?

    public init(
        groupMemberships: [IdentitystoreClientTypes.GroupMembership]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.groupMemberships = groupMemberships
        self.nextToken = nextToken
    }
}

public struct CreateGroupInput {
    /// A string containing the description of the group.
    public var description: Swift.String?
    /// A string containing the name of the group. This value is commonly displayed when the group is referenced. Administrator and AWSAdministrators are reserved names and can't be used for users or groups.
    public var displayName: Swift.String?
    /// The globally unique identifier for the identity store.
    /// This member is required.
    public var identityStoreId: Swift.String?

    public init(
        description: Swift.String? = nil,
        displayName: Swift.String? = nil,
        identityStoreId: Swift.String? = nil
    )
    {
        self.description = description
        self.displayName = displayName
        self.identityStoreId = identityStoreId
    }
}

extension CreateGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateGroupInput(identityStoreId: \(Swift.String(describing: identityStoreId)), description: \"CONTENT_REDACTED\", displayName: \"CONTENT_REDACTED\")"}
}

public struct CreateGroupOutput {
    /// The identifier of the newly created group in the identity store.
    /// This member is required.
    public var groupId: Swift.String?
    /// The globally unique identifier for the identity store.
    /// This member is required.
    public var identityStoreId: Swift.String?

    public init(
        groupId: Swift.String? = nil,
        identityStoreId: Swift.String? = nil
    )
    {
        self.groupId = groupId
        self.identityStoreId = identityStoreId
    }
}

public struct DeleteGroupInput {
    /// The identifier for a group in the identity store.
    /// This member is required.
    public var groupId: Swift.String?
    /// The globally unique identifier for the identity store.
    /// This member is required.
    public var identityStoreId: Swift.String?

    public init(
        groupId: Swift.String? = nil,
        identityStoreId: Swift.String? = nil
    )
    {
        self.groupId = groupId
        self.identityStoreId = identityStoreId
    }
}

public struct DeleteGroupOutput {

    public init() { }
}

public struct DescribeGroupInput {
    /// The identifier for a group in the identity store.
    /// This member is required.
    public var groupId: Swift.String?
    /// The globally unique identifier for the identity store, such as d-1234567890. In this example, d- is a fixed prefix, and 1234567890 is a randomly generated string that contains numbers and lower case letters. This value is generated at the time that a new identity store is created.
    /// This member is required.
    public var identityStoreId: Swift.String?

    public init(
        groupId: Swift.String? = nil,
        identityStoreId: Swift.String? = nil
    )
    {
        self.groupId = groupId
        self.identityStoreId = identityStoreId
    }
}

public struct DescribeGroupOutput {
    /// A string containing a description of the group.
    public var description: Swift.String?
    /// The group’s display name value. The length limit is 1,024 characters. This value can consist of letters, accented characters, symbols, numbers, punctuation, tab, new line, carriage return, space, and nonbreaking space in this attribute. This value is specified at the time that the group is created and stored as an attribute of the group object in the identity store.
    public var displayName: Swift.String?
    /// A list of ExternalId objects that contains the identifiers issued to this resource by an external identity provider.
    public var externalIds: [IdentitystoreClientTypes.ExternalId]?
    /// The identifier for a group in the identity store.
    /// This member is required.
    public var groupId: Swift.String?
    /// The globally unique identifier for the identity store.
    /// This member is required.
    public var identityStoreId: Swift.String?

    public init(
        description: Swift.String? = nil,
        displayName: Swift.String? = nil,
        externalIds: [IdentitystoreClientTypes.ExternalId]? = nil,
        groupId: Swift.String? = nil,
        identityStoreId: Swift.String? = nil
    )
    {
        self.description = description
        self.displayName = displayName
        self.externalIds = externalIds
        self.groupId = groupId
        self.identityStoreId = identityStoreId
    }
}

extension DescribeGroupOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeGroupOutput(externalIds: \(Swift.String(describing: externalIds)), groupId: \(Swift.String(describing: groupId)), identityStoreId: \(Swift.String(describing: identityStoreId)), description: \"CONTENT_REDACTED\", displayName: \"CONTENT_REDACTED\")"}
}

extension IdentitystoreClientTypes {
    /// A query filter used by ListUsers and ListGroups. This filter object provides the attribute name and attribute value to search users or groups.
    public struct Filter {
        /// The attribute path that is used to specify which attribute name to search. Length limit is 255 characters. For example, UserName is a valid attribute path for the ListUsers API, and DisplayName is a valid attribute path for the ListGroups API.
        /// This member is required.
        public var attributePath: Swift.String?
        /// Represents the data for an attribute. Each attribute value is described as a name-value pair.
        /// This member is required.
        public var attributeValue: Swift.String?

        public init(
            attributePath: Swift.String? = nil,
            attributeValue: Swift.String? = nil
        )
        {
            self.attributePath = attributePath
            self.attributeValue = attributeValue
        }
    }

}

extension IdentitystoreClientTypes.Filter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Filter(attributePath: \(Swift.String(describing: attributePath)), attributeValue: \"CONTENT_REDACTED\")"}
}

public struct ListGroupsInput {
    /// A list of Filter objects, which is used in the ListUsers and ListGroups requests.
    @available(*, deprecated, message: "Using filters with ListGroups API is deprecated, please use GetGroupId API instead.")
    public var filters: [IdentitystoreClientTypes.Filter]?
    /// The globally unique identifier for the identity store, such as d-1234567890. In this example, d- is a fixed prefix, and 1234567890 is a randomly generated string that contains numbers and lower case letters. This value is generated at the time that a new identity store is created.
    /// This member is required.
    public var identityStoreId: Swift.String?
    /// The maximum number of results to be returned per request. This parameter is used in the ListUsers and ListGroups requests to specify how many results to return in one page. The length limit is 50 characters.
    public var maxResults: Swift.Int?
    /// The pagination token used for the ListUsers and ListGroups API operations. This value is generated by the identity store service. It is returned in the API response if the total results are more than the size of one page. This token is also returned when it is used in the API request to search for the next page.
    public var nextToken: Swift.String?

    public init(
        filters: [IdentitystoreClientTypes.Filter]? = nil,
        identityStoreId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filters = filters
        self.identityStoreId = identityStoreId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension IdentitystoreClientTypes {
    /// A group object that contains the metadata and attributes for a specified group.
    public struct Group {
        /// A string containing a description of the specified group.
        public var description: Swift.String?
        /// The display name value for the group. The length limit is 1,024 characters. This value can consist of letters, accented characters, symbols, numbers, punctuation, tab, new line, carriage return, space, and nonbreaking space in this attribute. This value is specified at the time the group is created and stored as an attribute of the group object in the identity store.
        public var displayName: Swift.String?
        /// A list of ExternalId objects that contains the identifiers issued to this resource by an external identity provider.
        public var externalIds: [IdentitystoreClientTypes.ExternalId]?
        /// The identifier for a group in the identity store.
        /// This member is required.
        public var groupId: Swift.String?
        /// The globally unique identifier for the identity store.
        /// This member is required.
        public var identityStoreId: Swift.String?

        public init(
            description: Swift.String? = nil,
            displayName: Swift.String? = nil,
            externalIds: [IdentitystoreClientTypes.ExternalId]? = nil,
            groupId: Swift.String? = nil,
            identityStoreId: Swift.String? = nil
        )
        {
            self.description = description
            self.displayName = displayName
            self.externalIds = externalIds
            self.groupId = groupId
            self.identityStoreId = identityStoreId
        }
    }

}

extension IdentitystoreClientTypes.Group: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Group(externalIds: \(Swift.String(describing: externalIds)), groupId: \(Swift.String(describing: groupId)), identityStoreId: \(Swift.String(describing: identityStoreId)), description: \"CONTENT_REDACTED\", displayName: \"CONTENT_REDACTED\")"}
}

public struct ListGroupsOutput {
    /// A list of Group objects in the identity store.
    /// This member is required.
    public var groups: [IdentitystoreClientTypes.Group]?
    /// The pagination token used for the ListUsers and ListGroups API operations. This value is generated by the identity store service. It is returned in the API response if the total results are more than the size of one page. This token is also returned when it1 is used in the API request to search for the next page.
    public var nextToken: Swift.String?

    public init(
        groups: [IdentitystoreClientTypes.Group]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.groups = groups
        self.nextToken = nextToken
    }
}

public struct UpdateGroupInput {
    /// The identifier for a group in the identity store.
    /// This member is required.
    public var groupId: Swift.String?
    /// The globally unique identifier for the identity store.
    /// This member is required.
    public var identityStoreId: Swift.String?
    /// A list of AttributeOperation objects to apply to the requested group. These operations might add, replace, or remove an attribute.
    /// This member is required.
    public var operations: [IdentitystoreClientTypes.AttributeOperation]?

    public init(
        groupId: Swift.String? = nil,
        identityStoreId: Swift.String? = nil,
        operations: [IdentitystoreClientTypes.AttributeOperation]? = nil
    )
    {
        self.groupId = groupId
        self.identityStoreId = identityStoreId
        self.operations = operations
    }
}

public struct UpdateGroupOutput {

    public init() { }
}

/// The request processing has failed because of an unknown error, exception or failure with an internal server.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        /// The identifier for each request. This value is a globally unique ID that is generated by the identity store service for each sent request, and is then returned inside the exception if the request fails.
        public internal(set) var requestId: Swift.String? = nil
        /// The number of seconds to wait before retrying the next request.
        public internal(set) var retryAfterSeconds: Swift.Int = 0
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { true }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        requestId: Swift.String? = nil,
        retryAfterSeconds: Swift.Int = 0
    )
    {
        self.properties.message = message
        self.properties.requestId = requestId
        self.properties.retryAfterSeconds = retryAfterSeconds
    }
}

public struct IsMemberInGroupsInput {
    /// A list of identifiers for groups in the identity store.
    /// This member is required.
    public var groupIds: [Swift.String]?
    /// The globally unique identifier for the identity store.
    /// This member is required.
    public var identityStoreId: Swift.String?
    /// An object containing the identifier of a group member.
    /// This member is required.
    public var memberId: IdentitystoreClientTypes.MemberId?

    public init(
        groupIds: [Swift.String]? = nil,
        identityStoreId: Swift.String? = nil,
        memberId: IdentitystoreClientTypes.MemberId? = nil
    )
    {
        self.groupIds = groupIds
        self.identityStoreId = identityStoreId
        self.memberId = memberId
    }
}

extension IdentitystoreClientTypes {
    /// Indicates whether a resource is a member of a group in the identity store.
    public struct GroupMembershipExistenceResult {
        /// The identifier for a group in the identity store.
        public var groupId: Swift.String?
        /// An object that contains the identifier of a group member. Setting the UserID field to the specific identifier for a user indicates that the user is a member of the group.
        public var memberId: IdentitystoreClientTypes.MemberId?
        /// Indicates whether a membership relation exists or not.
        public var membershipExists: Swift.Bool

        public init(
            groupId: Swift.String? = nil,
            memberId: IdentitystoreClientTypes.MemberId? = nil,
            membershipExists: Swift.Bool = false
        )
        {
            self.groupId = groupId
            self.memberId = memberId
            self.membershipExists = membershipExists
        }
    }

}

extension IdentitystoreClientTypes.GroupMembershipExistenceResult: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GroupMembershipExistenceResult(groupId: \(Swift.String(describing: groupId)), memberId: \(Swift.String(describing: memberId)), membershipExists: \"CONTENT_REDACTED\")"}
}

public struct IsMemberInGroupsOutput {
    /// A list containing the results of membership existence checks.
    /// This member is required.
    public var results: [IdentitystoreClientTypes.GroupMembershipExistenceResult]?

    public init(
        results: [IdentitystoreClientTypes.GroupMembershipExistenceResult]? = nil
    )
    {
        self.results = results
    }
}

public struct ListGroupMembershipsForMemberInput {
    /// The globally unique identifier for the identity store.
    /// This member is required.
    public var identityStoreId: Swift.String?
    /// The maximum number of results to be returned per request. This parameter is used in the ListUsers and ListGroups requests to specify how many results to return in one page. The length limit is 50 characters.
    public var maxResults: Swift.Int?
    /// An object that contains the identifier of a group member. Setting the UserID field to the specific identifier for a user indicates that the user is a member of the group.
    /// This member is required.
    public var memberId: IdentitystoreClientTypes.MemberId?
    /// The pagination token used for the ListUsers, ListGroups, and ListGroupMemberships API operations. This value is generated by the identity store service. It is returned in the API response if the total results are more than the size of one page. This token is also returned when it is used in the API request to search for the next page.
    public var nextToken: Swift.String?

    public init(
        identityStoreId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        memberId: IdentitystoreClientTypes.MemberId? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.identityStoreId = identityStoreId
        self.maxResults = maxResults
        self.memberId = memberId
        self.nextToken = nextToken
    }
}

public struct ListGroupMembershipsForMemberOutput {
    /// A list of GroupMembership objects in the group for a specified member.
    /// This member is required.
    public var groupMemberships: [IdentitystoreClientTypes.GroupMembership]?
    /// The pagination token used for the ListUsers, ListGroups, and ListGroupMemberships API operations. This value is generated by the identity store service. It is returned in the API response if the total results are more than the size of one page. This token is also returned when it is used in the API request to search for the next page.
    public var nextToken: Swift.String?

    public init(
        groupMemberships: [IdentitystoreClientTypes.GroupMembership]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.groupMemberships = groupMemberships
        self.nextToken = nextToken
    }
}

/// Indicates that the principal has crossed the throttling limits of the API operations.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        /// The identifier for each request. This value is a globally unique ID that is generated by the identity store service for each sent request, and is then returned inside the exception if the request fails.
        public internal(set) var requestId: Swift.String? = nil
        /// The number of seconds to wait before retrying the next request.
        public internal(set) var retryAfterSeconds: Swift.Int = 0
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { true }
    public static var isThrottling: Swift.Bool { true }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        requestId: Swift.String? = nil,
        retryAfterSeconds: Swift.Int = 0
    )
    {
        self.properties.message = message
        self.properties.requestId = requestId
        self.properties.retryAfterSeconds = retryAfterSeconds
    }
}

extension IdentitystoreClientTypes {
    /// The email address associated with the user.
    public struct Email {
        /// A Boolean value representing whether this is the primary email address for the associated resource.
        public var primary: Swift.Bool
        /// A string representing the type of address. For example, "Work."
        public var type: Swift.String?
        /// A string containing an email address. For example, "johndoe@amazon.com."
        public var value: Swift.String?

        public init(
            primary: Swift.Bool = false,
            type: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.primary = primary
            self.type = type
            self.value = value
        }
    }

}

extension IdentitystoreClientTypes.Email: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Email(primary: \"CONTENT_REDACTED\", type: \"CONTENT_REDACTED\", value: \"CONTENT_REDACTED\")"}
}

extension IdentitystoreClientTypes {
    /// The full name of the user.
    public struct Name {
        /// The family name of the user.
        public var familyName: Swift.String?
        /// A string containing a formatted version of the name for display.
        public var formatted: Swift.String?
        /// The given name of the user.
        public var givenName: Swift.String?
        /// The honorific prefix of the user. For example, "Dr."
        public var honorificPrefix: Swift.String?
        /// The honorific suffix of the user. For example, "M.D."
        public var honorificSuffix: Swift.String?
        /// The middle name of the user.
        public var middleName: Swift.String?

        public init(
            familyName: Swift.String? = nil,
            formatted: Swift.String? = nil,
            givenName: Swift.String? = nil,
            honorificPrefix: Swift.String? = nil,
            honorificSuffix: Swift.String? = nil,
            middleName: Swift.String? = nil
        )
        {
            self.familyName = familyName
            self.formatted = formatted
            self.givenName = givenName
            self.honorificPrefix = honorificPrefix
            self.honorificSuffix = honorificSuffix
            self.middleName = middleName
        }
    }

}

extension IdentitystoreClientTypes.Name: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Name(familyName: \"CONTENT_REDACTED\", formatted: \"CONTENT_REDACTED\", givenName: \"CONTENT_REDACTED\", honorificPrefix: \"CONTENT_REDACTED\", honorificSuffix: \"CONTENT_REDACTED\", middleName: \"CONTENT_REDACTED\")"}
}

extension IdentitystoreClientTypes {
    /// The phone number associated with the user.
    public struct PhoneNumber {
        /// A Boolean value representing whether this is the primary phone number for the associated resource.
        public var primary: Swift.Bool
        /// A string representing the type of a phone number. For example, "Mobile."
        public var type: Swift.String?
        /// A string containing a phone number. For example, "8675309" or "+1 (800) 123-4567".
        public var value: Swift.String?

        public init(
            primary: Swift.Bool = false,
            type: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.primary = primary
            self.type = type
            self.value = value
        }
    }

}

extension IdentitystoreClientTypes.PhoneNumber: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PhoneNumber(primary: \"CONTENT_REDACTED\", type: \"CONTENT_REDACTED\", value: \"CONTENT_REDACTED\")"}
}

public struct CreateUserInput {
    /// A list of Address objects containing addresses associated with the user.
    public var addresses: [IdentitystoreClientTypes.Address]?
    /// A string containing the name of the user. This value is typically formatted for display when the user is referenced. For example, "John Doe."
    public var displayName: Swift.String?
    /// A list of Email objects containing email addresses associated with the user.
    public var emails: [IdentitystoreClientTypes.Email]?
    /// The globally unique identifier for the identity store.
    /// This member is required.
    public var identityStoreId: Swift.String?
    /// A string containing the geographical region or location of the user.
    public var locale: Swift.String?
    /// An object containing the name of the user.
    public var name: IdentitystoreClientTypes.Name?
    /// A string containing an alternate name for the user.
    public var nickName: Swift.String?
    /// A list of PhoneNumber objects containing phone numbers associated with the user.
    public var phoneNumbers: [IdentitystoreClientTypes.PhoneNumber]?
    /// A string containing the preferred language of the user. For example, "American English" or "en-us."
    public var preferredLanguage: Swift.String?
    /// A string containing a URL that might be associated with the user.
    public var profileUrl: Swift.String?
    /// A string containing the time zone of the user.
    public var timezone: Swift.String?
    /// A string containing the title of the user. Possible values are left unspecified. The value can vary based on your specific use case.
    public var title: Swift.String?
    /// A unique string used to identify the user. The length limit is 128 characters. This value can consist of letters, accented characters, symbols, numbers, and punctuation. This value is specified at the time the user is created and stored as an attribute of the user object in the identity store. Administrator and AWSAdministrators are reserved names and can't be used for users or groups.
    public var userName: Swift.String?
    /// A string indicating the type of user. Possible values are left unspecified. The value can vary based on your specific use case.
    public var userType: Swift.String?

    public init(
        addresses: [IdentitystoreClientTypes.Address]? = nil,
        displayName: Swift.String? = nil,
        emails: [IdentitystoreClientTypes.Email]? = nil,
        identityStoreId: Swift.String? = nil,
        locale: Swift.String? = nil,
        name: IdentitystoreClientTypes.Name? = nil,
        nickName: Swift.String? = nil,
        phoneNumbers: [IdentitystoreClientTypes.PhoneNumber]? = nil,
        preferredLanguage: Swift.String? = nil,
        profileUrl: Swift.String? = nil,
        timezone: Swift.String? = nil,
        title: Swift.String? = nil,
        userName: Swift.String? = nil,
        userType: Swift.String? = nil
    )
    {
        self.addresses = addresses
        self.displayName = displayName
        self.emails = emails
        self.identityStoreId = identityStoreId
        self.locale = locale
        self.name = name
        self.nickName = nickName
        self.phoneNumbers = phoneNumbers
        self.preferredLanguage = preferredLanguage
        self.profileUrl = profileUrl
        self.timezone = timezone
        self.title = title
        self.userName = userName
        self.userType = userType
    }
}

extension CreateUserInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateUserInput(addresses: \(Swift.String(describing: addresses)), emails: \(Swift.String(describing: emails)), identityStoreId: \(Swift.String(describing: identityStoreId)), name: \(Swift.String(describing: name)), phoneNumbers: \(Swift.String(describing: phoneNumbers)), displayName: \"CONTENT_REDACTED\", locale: \"CONTENT_REDACTED\", nickName: \"CONTENT_REDACTED\", preferredLanguage: \"CONTENT_REDACTED\", profileUrl: \"CONTENT_REDACTED\", timezone: \"CONTENT_REDACTED\", title: \"CONTENT_REDACTED\", userName: \"CONTENT_REDACTED\", userType: \"CONTENT_REDACTED\")"}
}

public struct CreateUserOutput {
    /// The globally unique identifier for the identity store.
    /// This member is required.
    public var identityStoreId: Swift.String?
    /// The identifier of the newly created user in the identity store.
    /// This member is required.
    public var userId: Swift.String?

    public init(
        identityStoreId: Swift.String? = nil,
        userId: Swift.String? = nil
    )
    {
        self.identityStoreId = identityStoreId
        self.userId = userId
    }
}

public struct DeleteUserInput {
    /// The globally unique identifier for the identity store.
    /// This member is required.
    public var identityStoreId: Swift.String?
    /// The identifier for a user in the identity store.
    /// This member is required.
    public var userId: Swift.String?

    public init(
        identityStoreId: Swift.String? = nil,
        userId: Swift.String? = nil
    )
    {
        self.identityStoreId = identityStoreId
        self.userId = userId
    }
}

public struct DeleteUserOutput {

    public init() { }
}

public struct DescribeUserInput {
    /// The globally unique identifier for the identity store, such as d-1234567890. In this example, d- is a fixed prefix, and 1234567890 is a randomly generated string that contains numbers and lower case letters. This value is generated at the time that a new identity store is created.
    /// This member is required.
    public var identityStoreId: Swift.String?
    /// The identifier for a user in the identity store.
    /// This member is required.
    public var userId: Swift.String?

    public init(
        identityStoreId: Swift.String? = nil,
        userId: Swift.String? = nil
    )
    {
        self.identityStoreId = identityStoreId
        self.userId = userId
    }
}

public struct DescribeUserOutput {
    /// The physical address of the user.
    public var addresses: [IdentitystoreClientTypes.Address]?
    /// The display name of the user.
    public var displayName: Swift.String?
    /// The email address of the user.
    public var emails: [IdentitystoreClientTypes.Email]?
    /// A list of ExternalId objects that contains the identifiers issued to this resource by an external identity provider.
    public var externalIds: [IdentitystoreClientTypes.ExternalId]?
    /// The globally unique identifier for the identity store.
    /// This member is required.
    public var identityStoreId: Swift.String?
    /// A string containing the geographical region or location of the user.
    public var locale: Swift.String?
    /// The name of the user.
    public var name: IdentitystoreClientTypes.Name?
    /// An alternative descriptive name for the user.
    public var nickName: Swift.String?
    /// A list of PhoneNumber objects associated with a user.
    public var phoneNumbers: [IdentitystoreClientTypes.PhoneNumber]?
    /// The preferred language of the user.
    public var preferredLanguage: Swift.String?
    /// A URL link for the user's profile.
    public var profileUrl: Swift.String?
    /// The time zone for a user.
    public var timezone: Swift.String?
    /// A string containing the title of the user.
    public var title: Swift.String?
    /// The identifier for a user in the identity store.
    /// This member is required.
    public var userId: Swift.String?
    /// A unique string used to identify the user. The length limit is 128 characters. This value can consist of letters, accented characters, symbols, numbers, and punctuation. This value is specified at the time the user is created and stored as an attribute of the user object in the identity store.
    public var userName: Swift.String?
    /// A string indicating the type of user.
    public var userType: Swift.String?

    public init(
        addresses: [IdentitystoreClientTypes.Address]? = nil,
        displayName: Swift.String? = nil,
        emails: [IdentitystoreClientTypes.Email]? = nil,
        externalIds: [IdentitystoreClientTypes.ExternalId]? = nil,
        identityStoreId: Swift.String? = nil,
        locale: Swift.String? = nil,
        name: IdentitystoreClientTypes.Name? = nil,
        nickName: Swift.String? = nil,
        phoneNumbers: [IdentitystoreClientTypes.PhoneNumber]? = nil,
        preferredLanguage: Swift.String? = nil,
        profileUrl: Swift.String? = nil,
        timezone: Swift.String? = nil,
        title: Swift.String? = nil,
        userId: Swift.String? = nil,
        userName: Swift.String? = nil,
        userType: Swift.String? = nil
    )
    {
        self.addresses = addresses
        self.displayName = displayName
        self.emails = emails
        self.externalIds = externalIds
        self.identityStoreId = identityStoreId
        self.locale = locale
        self.name = name
        self.nickName = nickName
        self.phoneNumbers = phoneNumbers
        self.preferredLanguage = preferredLanguage
        self.profileUrl = profileUrl
        self.timezone = timezone
        self.title = title
        self.userId = userId
        self.userName = userName
        self.userType = userType
    }
}

extension DescribeUserOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeUserOutput(addresses: \(Swift.String(describing: addresses)), emails: \(Swift.String(describing: emails)), externalIds: \(Swift.String(describing: externalIds)), identityStoreId: \(Swift.String(describing: identityStoreId)), name: \(Swift.String(describing: name)), phoneNumbers: \(Swift.String(describing: phoneNumbers)), userId: \(Swift.String(describing: userId)), displayName: \"CONTENT_REDACTED\", locale: \"CONTENT_REDACTED\", nickName: \"CONTENT_REDACTED\", preferredLanguage: \"CONTENT_REDACTED\", profileUrl: \"CONTENT_REDACTED\", timezone: \"CONTENT_REDACTED\", title: \"CONTENT_REDACTED\", userName: \"CONTENT_REDACTED\", userType: \"CONTENT_REDACTED\")"}
}

public struct ListUsersInput {
    /// A list of Filter objects, which is used in the ListUsers and ListGroups requests.
    @available(*, deprecated, message: "Using filters with ListUsers API is deprecated, please use GetGroupId API instead.")
    public var filters: [IdentitystoreClientTypes.Filter]?
    /// The globally unique identifier for the identity store, such as d-1234567890. In this example, d- is a fixed prefix, and 1234567890 is a randomly generated string that contains numbers and lower case letters. This value is generated at the time that a new identity store is created.
    /// This member is required.
    public var identityStoreId: Swift.String?
    /// The maximum number of results to be returned per request. This parameter is used in the ListUsers and ListGroups requests to specify how many results to return in one page. The length limit is 50 characters.
    public var maxResults: Swift.Int?
    /// The pagination token used for the ListUsers and ListGroups API operations. This value is generated by the identity store service. It is returned in the API response if the total results are more than the size of one page. This token is also returned when it is used in the API request to search for the next page.
    public var nextToken: Swift.String?

    public init(
        filters: [IdentitystoreClientTypes.Filter]? = nil,
        identityStoreId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filters = filters
        self.identityStoreId = identityStoreId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension IdentitystoreClientTypes {
    /// A user object that contains the metadata and attributes for a specified user.
    public struct User {
        /// A list of Address objects containing addresses associated with the user.
        public var addresses: [IdentitystoreClientTypes.Address]?
        /// A string containing the name of the user that is formatted for display when the user is referenced. For example, "John Doe."
        public var displayName: Swift.String?
        /// A list of Email objects containing email addresses associated with the user.
        public var emails: [IdentitystoreClientTypes.Email]?
        /// A list of ExternalId objects that contains the identifiers issued to this resource by an external identity provider.
        public var externalIds: [IdentitystoreClientTypes.ExternalId]?
        /// The globally unique identifier for the identity store.
        /// This member is required.
        public var identityStoreId: Swift.String?
        /// A string containing the geographical region or location of the user.
        public var locale: Swift.String?
        /// An object containing the name of the user.
        public var name: IdentitystoreClientTypes.Name?
        /// A string containing an alternate name for the user.
        public var nickName: Swift.String?
        /// A list of PhoneNumber objects containing phone numbers associated with the user.
        public var phoneNumbers: [IdentitystoreClientTypes.PhoneNumber]?
        /// A string containing the preferred language of the user. For example, "American English" or "en-us."
        public var preferredLanguage: Swift.String?
        /// A string containing a URL that might be associated with the user.
        public var profileUrl: Swift.String?
        /// A string containing the time zone of the user.
        public var timezone: Swift.String?
        /// A string containing the title of the user. Possible values are left unspecified. The value can vary based on your specific use case.
        public var title: Swift.String?
        /// The identifier for a user in the identity store.
        /// This member is required.
        public var userId: Swift.String?
        /// A unique string used to identify the user. The length limit is 128 characters. This value can consist of letters, accented characters, symbols, numbers, and punctuation. This value is specified at the time the user is created and stored as an attribute of the user object in the identity store.
        public var userName: Swift.String?
        /// A string indicating the type of user. Possible values are left unspecified. The value can vary based on your specific use case.
        public var userType: Swift.String?

        public init(
            addresses: [IdentitystoreClientTypes.Address]? = nil,
            displayName: Swift.String? = nil,
            emails: [IdentitystoreClientTypes.Email]? = nil,
            externalIds: [IdentitystoreClientTypes.ExternalId]? = nil,
            identityStoreId: Swift.String? = nil,
            locale: Swift.String? = nil,
            name: IdentitystoreClientTypes.Name? = nil,
            nickName: Swift.String? = nil,
            phoneNumbers: [IdentitystoreClientTypes.PhoneNumber]? = nil,
            preferredLanguage: Swift.String? = nil,
            profileUrl: Swift.String? = nil,
            timezone: Swift.String? = nil,
            title: Swift.String? = nil,
            userId: Swift.String? = nil,
            userName: Swift.String? = nil,
            userType: Swift.String? = nil
        )
        {
            self.addresses = addresses
            self.displayName = displayName
            self.emails = emails
            self.externalIds = externalIds
            self.identityStoreId = identityStoreId
            self.locale = locale
            self.name = name
            self.nickName = nickName
            self.phoneNumbers = phoneNumbers
            self.preferredLanguage = preferredLanguage
            self.profileUrl = profileUrl
            self.timezone = timezone
            self.title = title
            self.userId = userId
            self.userName = userName
            self.userType = userType
        }
    }

}

extension IdentitystoreClientTypes.User: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "User(addresses: \(Swift.String(describing: addresses)), emails: \(Swift.String(describing: emails)), externalIds: \(Swift.String(describing: externalIds)), identityStoreId: \(Swift.String(describing: identityStoreId)), name: \(Swift.String(describing: name)), phoneNumbers: \(Swift.String(describing: phoneNumbers)), userId: \(Swift.String(describing: userId)), displayName: \"CONTENT_REDACTED\", locale: \"CONTENT_REDACTED\", nickName: \"CONTENT_REDACTED\", preferredLanguage: \"CONTENT_REDACTED\", profileUrl: \"CONTENT_REDACTED\", timezone: \"CONTENT_REDACTED\", title: \"CONTENT_REDACTED\", userName: \"CONTENT_REDACTED\", userType: \"CONTENT_REDACTED\")"}
}

public struct ListUsersOutput {
    /// The pagination token used for the ListUsers and ListGroups API operations. This value is generated by the identity store service. It is returned in the API response if the total results are more than the size of one page. This token is also returned when it is used in the API request to search for the next page.
    public var nextToken: Swift.String?
    /// A list of User objects in the identity store.
    /// This member is required.
    public var users: [IdentitystoreClientTypes.User]?

    public init(
        nextToken: Swift.String? = nil,
        users: [IdentitystoreClientTypes.User]? = nil
    )
    {
        self.nextToken = nextToken
        self.users = users
    }
}

public struct UpdateUserInput {
    /// The globally unique identifier for the identity store.
    /// This member is required.
    public var identityStoreId: Swift.String?
    /// A list of AttributeOperation objects to apply to the requested user. These operations might add, replace, or remove an attribute.
    /// This member is required.
    public var operations: [IdentitystoreClientTypes.AttributeOperation]?
    /// The identifier for a user in the identity store.
    /// This member is required.
    public var userId: Swift.String?

    public init(
        identityStoreId: Swift.String? = nil,
        operations: [IdentitystoreClientTypes.AttributeOperation]? = nil,
        userId: Swift.String? = nil
    )
    {
        self.identityStoreId = identityStoreId
        self.operations = operations
        self.userId = userId
    }
}

public struct UpdateUserOutput {

    public init() { }
}

extension CreateGroupInput {

    static func urlPathProvider(_ value: CreateGroupInput) -> Swift.String? {
        return "/"
    }
}

extension CreateGroupMembershipInput {

    static func urlPathProvider(_ value: CreateGroupMembershipInput) -> Swift.String? {
        return "/"
    }
}

extension CreateUserInput {

    static func urlPathProvider(_ value: CreateUserInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteGroupInput {

    static func urlPathProvider(_ value: DeleteGroupInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteGroupMembershipInput {

    static func urlPathProvider(_ value: DeleteGroupMembershipInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteUserInput {

    static func urlPathProvider(_ value: DeleteUserInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeGroupInput {

    static func urlPathProvider(_ value: DescribeGroupInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeGroupMembershipInput {

    static func urlPathProvider(_ value: DescribeGroupMembershipInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeUserInput {

    static func urlPathProvider(_ value: DescribeUserInput) -> Swift.String? {
        return "/"
    }
}

extension GetGroupIdInput {

    static func urlPathProvider(_ value: GetGroupIdInput) -> Swift.String? {
        return "/"
    }
}

extension GetGroupMembershipIdInput {

    static func urlPathProvider(_ value: GetGroupMembershipIdInput) -> Swift.String? {
        return "/"
    }
}

extension GetUserIdInput {

    static func urlPathProvider(_ value: GetUserIdInput) -> Swift.String? {
        return "/"
    }
}

extension IsMemberInGroupsInput {

    static func urlPathProvider(_ value: IsMemberInGroupsInput) -> Swift.String? {
        return "/"
    }
}

extension ListGroupMembershipsInput {

    static func urlPathProvider(_ value: ListGroupMembershipsInput) -> Swift.String? {
        return "/"
    }
}

extension ListGroupMembershipsForMemberInput {

    static func urlPathProvider(_ value: ListGroupMembershipsForMemberInput) -> Swift.String? {
        return "/"
    }
}

extension ListGroupsInput {

    static func urlPathProvider(_ value: ListGroupsInput) -> Swift.String? {
        return "/"
    }
}

extension ListUsersInput {

    static func urlPathProvider(_ value: ListUsersInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateGroupInput {

    static func urlPathProvider(_ value: UpdateGroupInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateUserInput {

    static func urlPathProvider(_ value: UpdateUserInput) -> Swift.String? {
        return "/"
    }
}

extension CreateGroupInput {

    static func write(value: CreateGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["DisplayName"].write(value.displayName)
        try writer["IdentityStoreId"].write(value.identityStoreId)
    }
}

extension CreateGroupMembershipInput {

    static func write(value: CreateGroupMembershipInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GroupId"].write(value.groupId)
        try writer["IdentityStoreId"].write(value.identityStoreId)
        try writer["MemberId"].write(value.memberId, with: IdentitystoreClientTypes.MemberId.write(value:to:))
    }
}

extension CreateUserInput {

    static func write(value: CreateUserInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Addresses"].writeList(value.addresses, memberWritingClosure: IdentitystoreClientTypes.Address.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["DisplayName"].write(value.displayName)
        try writer["Emails"].writeList(value.emails, memberWritingClosure: IdentitystoreClientTypes.Email.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["IdentityStoreId"].write(value.identityStoreId)
        try writer["Locale"].write(value.locale)
        try writer["Name"].write(value.name, with: IdentitystoreClientTypes.Name.write(value:to:))
        try writer["NickName"].write(value.nickName)
        try writer["PhoneNumbers"].writeList(value.phoneNumbers, memberWritingClosure: IdentitystoreClientTypes.PhoneNumber.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["PreferredLanguage"].write(value.preferredLanguage)
        try writer["ProfileUrl"].write(value.profileUrl)
        try writer["Timezone"].write(value.timezone)
        try writer["Title"].write(value.title)
        try writer["UserName"].write(value.userName)
        try writer["UserType"].write(value.userType)
    }
}

extension DeleteGroupInput {

    static func write(value: DeleteGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GroupId"].write(value.groupId)
        try writer["IdentityStoreId"].write(value.identityStoreId)
    }
}

extension DeleteGroupMembershipInput {

    static func write(value: DeleteGroupMembershipInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IdentityStoreId"].write(value.identityStoreId)
        try writer["MembershipId"].write(value.membershipId)
    }
}

extension DeleteUserInput {

    static func write(value: DeleteUserInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IdentityStoreId"].write(value.identityStoreId)
        try writer["UserId"].write(value.userId)
    }
}

extension DescribeGroupInput {

    static func write(value: DescribeGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GroupId"].write(value.groupId)
        try writer["IdentityStoreId"].write(value.identityStoreId)
    }
}

extension DescribeGroupMembershipInput {

    static func write(value: DescribeGroupMembershipInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IdentityStoreId"].write(value.identityStoreId)
        try writer["MembershipId"].write(value.membershipId)
    }
}

extension DescribeUserInput {

    static func write(value: DescribeUserInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IdentityStoreId"].write(value.identityStoreId)
        try writer["UserId"].write(value.userId)
    }
}

extension GetGroupIdInput {

    static func write(value: GetGroupIdInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AlternateIdentifier"].write(value.alternateIdentifier, with: IdentitystoreClientTypes.AlternateIdentifier.write(value:to:))
        try writer["IdentityStoreId"].write(value.identityStoreId)
    }
}

extension GetGroupMembershipIdInput {

    static func write(value: GetGroupMembershipIdInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GroupId"].write(value.groupId)
        try writer["IdentityStoreId"].write(value.identityStoreId)
        try writer["MemberId"].write(value.memberId, with: IdentitystoreClientTypes.MemberId.write(value:to:))
    }
}

extension GetUserIdInput {

    static func write(value: GetUserIdInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AlternateIdentifier"].write(value.alternateIdentifier, with: IdentitystoreClientTypes.AlternateIdentifier.write(value:to:))
        try writer["IdentityStoreId"].write(value.identityStoreId)
    }
}

extension IsMemberInGroupsInput {

    static func write(value: IsMemberInGroupsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GroupIds"].writeList(value.groupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["IdentityStoreId"].write(value.identityStoreId)
        try writer["MemberId"].write(value.memberId, with: IdentitystoreClientTypes.MemberId.write(value:to:))
    }
}

extension ListGroupMembershipsInput {

    static func write(value: ListGroupMembershipsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GroupId"].write(value.groupId)
        try writer["IdentityStoreId"].write(value.identityStoreId)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListGroupMembershipsForMemberInput {

    static func write(value: ListGroupMembershipsForMemberInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IdentityStoreId"].write(value.identityStoreId)
        try writer["MaxResults"].write(value.maxResults)
        try writer["MemberId"].write(value.memberId, with: IdentitystoreClientTypes.MemberId.write(value:to:))
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListGroupsInput {

    static func write(value: ListGroupsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Filters"].writeList(value.filters, memberWritingClosure: IdentitystoreClientTypes.Filter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["IdentityStoreId"].write(value.identityStoreId)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListUsersInput {

    static func write(value: ListUsersInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Filters"].writeList(value.filters, memberWritingClosure: IdentitystoreClientTypes.Filter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["IdentityStoreId"].write(value.identityStoreId)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension UpdateGroupInput {

    static func write(value: UpdateGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GroupId"].write(value.groupId)
        try writer["IdentityStoreId"].write(value.identityStoreId)
        try writer["Operations"].writeList(value.operations, memberWritingClosure: IdentitystoreClientTypes.AttributeOperation.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateUserInput {

    static func write(value: UpdateUserInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IdentityStoreId"].write(value.identityStoreId)
        try writer["Operations"].writeList(value.operations, memberWritingClosure: IdentitystoreClientTypes.AttributeOperation.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["UserId"].write(value.userId)
    }
}

extension CreateGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateGroupOutput()
        value.groupId = try reader["GroupId"].readIfPresent() ?? ""
        value.identityStoreId = try reader["IdentityStoreId"].readIfPresent() ?? ""
        return value
    }
}

extension CreateGroupMembershipOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateGroupMembershipOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateGroupMembershipOutput()
        value.identityStoreId = try reader["IdentityStoreId"].readIfPresent() ?? ""
        value.membershipId = try reader["MembershipId"].readIfPresent() ?? ""
        return value
    }
}

extension CreateUserOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateUserOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateUserOutput()
        value.identityStoreId = try reader["IdentityStoreId"].readIfPresent() ?? ""
        value.userId = try reader["UserId"].readIfPresent() ?? ""
        return value
    }
}

extension DeleteGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteGroupOutput {
        return DeleteGroupOutput()
    }
}

extension DeleteGroupMembershipOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteGroupMembershipOutput {
        return DeleteGroupMembershipOutput()
    }
}

extension DeleteUserOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteUserOutput {
        return DeleteUserOutput()
    }
}

extension DescribeGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeGroupOutput()
        value.description = try reader["Description"].readIfPresent()
        value.displayName = try reader["DisplayName"].readIfPresent()
        value.externalIds = try reader["ExternalIds"].readListIfPresent(memberReadingClosure: IdentitystoreClientTypes.ExternalId.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.groupId = try reader["GroupId"].readIfPresent() ?? ""
        value.identityStoreId = try reader["IdentityStoreId"].readIfPresent() ?? ""
        return value
    }
}

extension DescribeGroupMembershipOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeGroupMembershipOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeGroupMembershipOutput()
        value.groupId = try reader["GroupId"].readIfPresent() ?? ""
        value.identityStoreId = try reader["IdentityStoreId"].readIfPresent() ?? ""
        value.memberId = try reader["MemberId"].readIfPresent(with: IdentitystoreClientTypes.MemberId.read(from:))
        value.membershipId = try reader["MembershipId"].readIfPresent() ?? ""
        return value
    }
}

extension DescribeUserOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeUserOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeUserOutput()
        value.addresses = try reader["Addresses"].readListIfPresent(memberReadingClosure: IdentitystoreClientTypes.Address.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.displayName = try reader["DisplayName"].readIfPresent()
        value.emails = try reader["Emails"].readListIfPresent(memberReadingClosure: IdentitystoreClientTypes.Email.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.externalIds = try reader["ExternalIds"].readListIfPresent(memberReadingClosure: IdentitystoreClientTypes.ExternalId.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.identityStoreId = try reader["IdentityStoreId"].readIfPresent() ?? ""
        value.locale = try reader["Locale"].readIfPresent()
        value.name = try reader["Name"].readIfPresent(with: IdentitystoreClientTypes.Name.read(from:))
        value.nickName = try reader["NickName"].readIfPresent()
        value.phoneNumbers = try reader["PhoneNumbers"].readListIfPresent(memberReadingClosure: IdentitystoreClientTypes.PhoneNumber.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.preferredLanguage = try reader["PreferredLanguage"].readIfPresent()
        value.profileUrl = try reader["ProfileUrl"].readIfPresent()
        value.timezone = try reader["Timezone"].readIfPresent()
        value.title = try reader["Title"].readIfPresent()
        value.userId = try reader["UserId"].readIfPresent() ?? ""
        value.userName = try reader["UserName"].readIfPresent()
        value.userType = try reader["UserType"].readIfPresent()
        return value
    }
}

extension GetGroupIdOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetGroupIdOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetGroupIdOutput()
        value.groupId = try reader["GroupId"].readIfPresent() ?? ""
        value.identityStoreId = try reader["IdentityStoreId"].readIfPresent() ?? ""
        return value
    }
}

extension GetGroupMembershipIdOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetGroupMembershipIdOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetGroupMembershipIdOutput()
        value.identityStoreId = try reader["IdentityStoreId"].readIfPresent() ?? ""
        value.membershipId = try reader["MembershipId"].readIfPresent() ?? ""
        return value
    }
}

extension GetUserIdOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetUserIdOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetUserIdOutput()
        value.identityStoreId = try reader["IdentityStoreId"].readIfPresent() ?? ""
        value.userId = try reader["UserId"].readIfPresent() ?? ""
        return value
    }
}

extension IsMemberInGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> IsMemberInGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = IsMemberInGroupsOutput()
        value.results = try reader["Results"].readListIfPresent(memberReadingClosure: IdentitystoreClientTypes.GroupMembershipExistenceResult.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListGroupMembershipsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListGroupMembershipsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListGroupMembershipsOutput()
        value.groupMemberships = try reader["GroupMemberships"].readListIfPresent(memberReadingClosure: IdentitystoreClientTypes.GroupMembership.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListGroupMembershipsForMemberOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListGroupMembershipsForMemberOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListGroupMembershipsForMemberOutput()
        value.groupMemberships = try reader["GroupMemberships"].readListIfPresent(memberReadingClosure: IdentitystoreClientTypes.GroupMembership.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListGroupsOutput()
        value.groups = try reader["Groups"].readListIfPresent(memberReadingClosure: IdentitystoreClientTypes.Group.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListUsersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListUsersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListUsersOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.users = try reader["Users"].readListIfPresent(memberReadingClosure: IdentitystoreClientTypes.User.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension UpdateGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateGroupOutput {
        return UpdateGroupOutput()
    }
}

extension UpdateUserOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateUserOutput {
        return UpdateUserOutput()
    }
}

func httpServiceError(baseError: AWSClientRuntime.AWSJSONError) throws -> Swift.Error? {
    switch baseError.code {
        case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
        case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
        case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
        default: return nil
    }
}

enum CreateGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateGroupMembershipOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateUserOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteGroupMembershipOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteUserOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeGroupMembershipOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeUserOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetGroupIdOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetGroupMembershipIdOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetUserIdOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum IsMemberInGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListGroupMembershipsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListGroupMembershipsForMemberOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListUsersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateUserOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.properties.reason = try reader["Reason"].readIfPresent()
        value.properties.requestId = try reader["RequestId"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceQuotaExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ServiceQuotaExceededException {
        let reader = baseError.errorBodyReader
        var value = ServiceQuotaExceededException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.properties.requestId = try reader["RequestId"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.properties.requestId = try reader["RequestId"].readIfPresent()
        value.properties.resourceId = try reader["ResourceId"].readIfPresent()
        value.properties.resourceType = try reader["ResourceType"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.properties.requestId = try reader["RequestId"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.properties.requestId = try reader["RequestId"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServerException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InternalServerException {
        let reader = baseError.errorBodyReader
        let httpResponse = baseError.httpResponse
        var value = InternalServerException()
        if let retryAfterSecondsHeaderValue = httpResponse.headers.value(for: "Retry-After") {
            value.properties.retryAfterSeconds = Swift.Int(retryAfterSecondsHeaderValue) ?? 0
        }
        value.properties.message = try reader["Message"].readIfPresent()
        value.properties.requestId = try reader["RequestId"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ThrottlingException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ThrottlingException {
        let reader = baseError.errorBodyReader
        let httpResponse = baseError.httpResponse
        var value = ThrottlingException()
        if let retryAfterSecondsHeaderValue = httpResponse.headers.value(for: "Retry-After") {
            value.properties.retryAfterSeconds = Swift.Int(retryAfterSecondsHeaderValue) ?? 0
        }
        value.properties.message = try reader["Message"].readIfPresent()
        value.properties.requestId = try reader["RequestId"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension IdentitystoreClientTypes.ExternalId {

    static func write(value: IdentitystoreClientTypes.ExternalId?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Id"].write(value.id)
        try writer["Issuer"].write(value.issuer)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IdentitystoreClientTypes.ExternalId {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IdentitystoreClientTypes.ExternalId()
        value.issuer = try reader["Issuer"].readIfPresent() ?? ""
        value.id = try reader["Id"].readIfPresent() ?? ""
        return value
    }
}

extension IdentitystoreClientTypes.MemberId {

    static func write(value: IdentitystoreClientTypes.MemberId?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        switch value {
            case let .userid(userid):
                try writer["UserId"].write(userid)
            case let .sdkUnknown(sdkUnknown):
                try writer["sdkUnknown"].write(sdkUnknown)
        }
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IdentitystoreClientTypes.MemberId {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        let name = reader.children.filter { $0.hasContent && $0.nodeInfo.name != "__type" }.first?.nodeInfo.name
        switch name {
            case "UserId":
                return .userid(try reader["UserId"].read())
            default:
                return .sdkUnknown(name ?? "")
        }
    }
}

extension IdentitystoreClientTypes.Name {

    static func write(value: IdentitystoreClientTypes.Name?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FamilyName"].write(value.familyName)
        try writer["Formatted"].write(value.formatted)
        try writer["GivenName"].write(value.givenName)
        try writer["HonorificPrefix"].write(value.honorificPrefix)
        try writer["HonorificSuffix"].write(value.honorificSuffix)
        try writer["MiddleName"].write(value.middleName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IdentitystoreClientTypes.Name {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IdentitystoreClientTypes.Name()
        value.formatted = try reader["Formatted"].readIfPresent()
        value.familyName = try reader["FamilyName"].readIfPresent()
        value.givenName = try reader["GivenName"].readIfPresent()
        value.middleName = try reader["MiddleName"].readIfPresent()
        value.honorificPrefix = try reader["HonorificPrefix"].readIfPresent()
        value.honorificSuffix = try reader["HonorificSuffix"].readIfPresent()
        return value
    }
}

extension IdentitystoreClientTypes.Email {

    static func write(value: IdentitystoreClientTypes.Email?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Primary"].write(value.primary)
        try writer["Type"].write(value.type)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IdentitystoreClientTypes.Email {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IdentitystoreClientTypes.Email()
        value.value = try reader["Value"].readIfPresent()
        value.type = try reader["Type"].readIfPresent()
        value.primary = try reader["Primary"].readIfPresent() ?? false
        return value
    }
}

extension IdentitystoreClientTypes.Address {

    static func write(value: IdentitystoreClientTypes.Address?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Country"].write(value.country)
        try writer["Formatted"].write(value.formatted)
        try writer["Locality"].write(value.locality)
        try writer["PostalCode"].write(value.postalCode)
        try writer["Primary"].write(value.primary)
        try writer["Region"].write(value.region)
        try writer["StreetAddress"].write(value.streetAddress)
        try writer["Type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IdentitystoreClientTypes.Address {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IdentitystoreClientTypes.Address()
        value.streetAddress = try reader["StreetAddress"].readIfPresent()
        value.locality = try reader["Locality"].readIfPresent()
        value.region = try reader["Region"].readIfPresent()
        value.postalCode = try reader["PostalCode"].readIfPresent()
        value.country = try reader["Country"].readIfPresent()
        value.formatted = try reader["Formatted"].readIfPresent()
        value.type = try reader["Type"].readIfPresent()
        value.primary = try reader["Primary"].readIfPresent() ?? false
        return value
    }
}

extension IdentitystoreClientTypes.PhoneNumber {

    static func write(value: IdentitystoreClientTypes.PhoneNumber?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Primary"].write(value.primary)
        try writer["Type"].write(value.type)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IdentitystoreClientTypes.PhoneNumber {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IdentitystoreClientTypes.PhoneNumber()
        value.value = try reader["Value"].readIfPresent()
        value.type = try reader["Type"].readIfPresent()
        value.primary = try reader["Primary"].readIfPresent() ?? false
        return value
    }
}

extension IdentitystoreClientTypes.GroupMembershipExistenceResult {

    static func read(from reader: SmithyJSON.Reader) throws -> IdentitystoreClientTypes.GroupMembershipExistenceResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IdentitystoreClientTypes.GroupMembershipExistenceResult()
        value.groupId = try reader["GroupId"].readIfPresent()
        value.memberId = try reader["MemberId"].readIfPresent(with: IdentitystoreClientTypes.MemberId.read(from:))
        value.membershipExists = try reader["MembershipExists"].readIfPresent() ?? false
        return value
    }
}

extension IdentitystoreClientTypes.GroupMembership {

    static func read(from reader: SmithyJSON.Reader) throws -> IdentitystoreClientTypes.GroupMembership {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IdentitystoreClientTypes.GroupMembership()
        value.identityStoreId = try reader["IdentityStoreId"].readIfPresent() ?? ""
        value.membershipId = try reader["MembershipId"].readIfPresent()
        value.groupId = try reader["GroupId"].readIfPresent()
        value.memberId = try reader["MemberId"].readIfPresent(with: IdentitystoreClientTypes.MemberId.read(from:))
        return value
    }
}

extension IdentitystoreClientTypes.Group {

    static func read(from reader: SmithyJSON.Reader) throws -> IdentitystoreClientTypes.Group {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IdentitystoreClientTypes.Group()
        value.groupId = try reader["GroupId"].readIfPresent() ?? ""
        value.displayName = try reader["DisplayName"].readIfPresent()
        value.externalIds = try reader["ExternalIds"].readListIfPresent(memberReadingClosure: IdentitystoreClientTypes.ExternalId.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.description = try reader["Description"].readIfPresent()
        value.identityStoreId = try reader["IdentityStoreId"].readIfPresent() ?? ""
        return value
    }
}

extension IdentitystoreClientTypes.User {

    static func read(from reader: SmithyJSON.Reader) throws -> IdentitystoreClientTypes.User {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IdentitystoreClientTypes.User()
        value.userName = try reader["UserName"].readIfPresent()
        value.userId = try reader["UserId"].readIfPresent() ?? ""
        value.externalIds = try reader["ExternalIds"].readListIfPresent(memberReadingClosure: IdentitystoreClientTypes.ExternalId.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.name = try reader["Name"].readIfPresent(with: IdentitystoreClientTypes.Name.read(from:))
        value.displayName = try reader["DisplayName"].readIfPresent()
        value.nickName = try reader["NickName"].readIfPresent()
        value.profileUrl = try reader["ProfileUrl"].readIfPresent()
        value.emails = try reader["Emails"].readListIfPresent(memberReadingClosure: IdentitystoreClientTypes.Email.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.addresses = try reader["Addresses"].readListIfPresent(memberReadingClosure: IdentitystoreClientTypes.Address.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.phoneNumbers = try reader["PhoneNumbers"].readListIfPresent(memberReadingClosure: IdentitystoreClientTypes.PhoneNumber.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.userType = try reader["UserType"].readIfPresent()
        value.title = try reader["Title"].readIfPresent()
        value.preferredLanguage = try reader["PreferredLanguage"].readIfPresent()
        value.locale = try reader["Locale"].readIfPresent()
        value.timezone = try reader["Timezone"].readIfPresent()
        value.identityStoreId = try reader["IdentityStoreId"].readIfPresent() ?? ""
        return value
    }
}

extension IdentitystoreClientTypes.AlternateIdentifier {

    static func write(value: IdentitystoreClientTypes.AlternateIdentifier?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        switch value {
            case let .externalid(externalid):
                try writer["ExternalId"].write(externalid, with: IdentitystoreClientTypes.ExternalId.write(value:to:))
            case let .uniqueattribute(uniqueattribute):
                try writer["UniqueAttribute"].write(uniqueattribute, with: IdentitystoreClientTypes.UniqueAttribute.write(value:to:))
            case let .sdkUnknown(sdkUnknown):
                try writer["sdkUnknown"].write(sdkUnknown)
        }
    }
}

extension IdentitystoreClientTypes.UniqueAttribute {

    static func write(value: IdentitystoreClientTypes.UniqueAttribute?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AttributePath"].write(value.attributePath)
        try writer["AttributeValue"].write(value.attributeValue)
    }
}

extension IdentitystoreClientTypes.Filter {

    static func write(value: IdentitystoreClientTypes.Filter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AttributePath"].write(value.attributePath)
        try writer["AttributeValue"].write(value.attributeValue)
    }
}

extension IdentitystoreClientTypes.AttributeOperation {

    static func write(value: IdentitystoreClientTypes.AttributeOperation?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AttributePath"].write(value.attributePath)
        try writer["AttributeValue"].write(value.attributeValue)
    }
}

public enum IdentitystoreClientTypes {}
