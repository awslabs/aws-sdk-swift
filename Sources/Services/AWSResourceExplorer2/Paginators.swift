// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ResourceExplorer2Client {
    /// Paginate over `[ListSupportedResourceTypesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListSupportedResourceTypesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListSupportedResourceTypesOutputResponse`
    public func listSupportedResourceTypesPaginated(input: ListSupportedResourceTypesInput) -> ClientRuntime.PaginatorSequence<ListSupportedResourceTypesInput, ListSupportedResourceTypesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListSupportedResourceTypesInput, ListSupportedResourceTypesOutputResponse>(input: input, inputKey: \ListSupportedResourceTypesInput.nextToken, outputKey: \ListSupportedResourceTypesOutputResponse.nextToken, paginationFunction: self.listSupportedResourceTypes(input:))
    }
}

extension ListSupportedResourceTypesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListSupportedResourceTypesInput {
        return ListSupportedResourceTypesInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListSupportedResourceTypesInput, Output == ListSupportedResourceTypesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listSupportedResourceTypesPaginated`
    /// to access the nested member `[ResourceExplorer2ClientTypes.SupportedResourceType]`
    /// - Returns: `[ResourceExplorer2ClientTypes.SupportedResourceType]`
    public func resourceTypes() async throws -> [ResourceExplorer2ClientTypes.SupportedResourceType] {
        return try await self.asyncCompactMap { item in item.resourceTypes }
    }
}
extension ResourceExplorer2Client {
    /// Paginate over `[SearchOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[SearchInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `SearchOutputResponse`
    public func searchPaginated(input: SearchInput) -> ClientRuntime.PaginatorSequence<SearchInput, SearchOutputResponse> {
        return ClientRuntime.PaginatorSequence<SearchInput, SearchOutputResponse>(input: input, inputKey: \SearchInput.nextToken, outputKey: \SearchOutputResponse.nextToken, paginationFunction: self.search(input:))
    }
}

extension SearchInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> SearchInput {
        return SearchInput(
            maxResults: self.maxResults,
            nextToken: token,
            queryString: self.queryString,
            viewArn: self.viewArn
        )}
}

extension PaginatorSequence where Input == SearchInput, Output == SearchOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `searchPaginated`
    /// to access the nested member `[ResourceExplorer2ClientTypes.Resource]`
    /// - Returns: `[ResourceExplorer2ClientTypes.Resource]`
    public func resources() async throws -> [ResourceExplorer2ClientTypes.Resource] {
        return try await self.asyncCompactMap { item in item.resources }
    }
}
