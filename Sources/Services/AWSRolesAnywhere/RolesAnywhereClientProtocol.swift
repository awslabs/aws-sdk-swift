// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// Identity and Access Management Roles Anywhere provides a secure way for your workloads such as servers, containers, and applications that run outside of Amazon Web Services to obtain temporary Amazon Web Services credentials. Your workloads can use the same IAM policies and roles you have for native Amazon Web Services applications to access Amazon Web Services resources. Using IAM Roles Anywhere eliminates the need to manage long-term credentials for workloads running outside of Amazon Web Services. To use IAM Roles Anywhere, your workloads must use X.509 certificates issued by their certificate authority (CA). You register the CA with IAM Roles Anywhere as a trust anchor to establish trust between your public key infrastructure (PKI) and IAM Roles Anywhere. If you don't manage your own PKI system, you can use Private Certificate Authority to create a CA and then use that to establish trust with IAM Roles Anywhere. This guide describes the IAM Roles Anywhere operations that you can call programmatically. For more information about IAM Roles Anywhere, see the [IAM Roles Anywhere User Guide](https://docs.aws.amazon.com/rolesanywhere/latest/userguide/introduction.html).
public protocol RolesAnywhereClientProtocol {
    /// Creates a profile, a list of the roles that Roles Anywhere service is trusted to assume. You use profiles to intersect permissions with IAM managed policies. Required permissions: rolesanywhere:CreateProfile.
    ///
    /// - Parameter CreateProfileInput : [no documentation found]
    ///
    /// - Returns: `CreateProfileOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AccessDeniedException` : You do not have sufficient access to perform this action.
    /// - `ValidationException` : Validation exception error.
    func createProfile(input: CreateProfileInput) async throws -> CreateProfileOutputResponse
    /// Creates a trust anchor to establish trust between IAM Roles Anywhere and your certificate authority (CA). You can define a trust anchor as a reference to an Private Certificate Authority (Private CA) or by uploading a CA certificate. Your Amazon Web Services workloads can authenticate with the trust anchor using certificates issued by the CA in exchange for temporary Amazon Web Services credentials. Required permissions: rolesanywhere:CreateTrustAnchor.
    ///
    /// - Parameter CreateTrustAnchorInput : [no documentation found]
    ///
    /// - Returns: `CreateTrustAnchorOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AccessDeniedException` : You do not have sufficient access to perform this action.
    /// - `ValidationException` : Validation exception error.
    func createTrustAnchor(input: CreateTrustAnchorInput) async throws -> CreateTrustAnchorOutputResponse
    /// Deletes a certificate revocation list (CRL). Required permissions: rolesanywhere:DeleteCrl.
    ///
    /// - Parameter DeleteCrlInput : [no documentation found]
    ///
    /// - Returns: `DeleteCrlOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AccessDeniedException` : You do not have sufficient access to perform this action.
    /// - `ResourceNotFoundException` : The resource could not be found.
    func deleteCrl(input: DeleteCrlInput) async throws -> DeleteCrlOutputResponse
    /// Deletes a profile. Required permissions: rolesanywhere:DeleteProfile.
    ///
    /// - Parameter DeleteProfileInput : [no documentation found]
    ///
    /// - Returns: `DeleteProfileOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AccessDeniedException` : You do not have sufficient access to perform this action.
    /// - `ResourceNotFoundException` : The resource could not be found.
    func deleteProfile(input: DeleteProfileInput) async throws -> DeleteProfileOutputResponse
    /// Deletes a trust anchor. Required permissions: rolesanywhere:DeleteTrustAnchor.
    ///
    /// - Parameter DeleteTrustAnchorInput : [no documentation found]
    ///
    /// - Returns: `DeleteTrustAnchorOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AccessDeniedException` : You do not have sufficient access to perform this action.
    /// - `ResourceNotFoundException` : The resource could not be found.
    func deleteTrustAnchor(input: DeleteTrustAnchorInput) async throws -> DeleteTrustAnchorOutputResponse
    /// Disables a certificate revocation list (CRL). Required permissions: rolesanywhere:DisableCrl.
    ///
    /// - Parameter DisableCrlInput : [no documentation found]
    ///
    /// - Returns: `DisableCrlOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AccessDeniedException` : You do not have sufficient access to perform this action.
    /// - `ResourceNotFoundException` : The resource could not be found.
    func disableCrl(input: DisableCrlInput) async throws -> DisableCrlOutputResponse
    /// Disables a profile. When disabled, temporary credential requests with this profile fail. Required permissions: rolesanywhere:DisableProfile.
    ///
    /// - Parameter DisableProfileInput : [no documentation found]
    ///
    /// - Returns: `DisableProfileOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AccessDeniedException` : You do not have sufficient access to perform this action.
    /// - `ResourceNotFoundException` : The resource could not be found.
    func disableProfile(input: DisableProfileInput) async throws -> DisableProfileOutputResponse
    /// Disables a trust anchor. When disabled, temporary credential requests specifying this trust anchor are unauthorized. Required permissions: rolesanywhere:DisableTrustAnchor.
    ///
    /// - Parameter DisableTrustAnchorInput : [no documentation found]
    ///
    /// - Returns: `DisableTrustAnchorOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AccessDeniedException` : You do not have sufficient access to perform this action.
    /// - `ResourceNotFoundException` : The resource could not be found.
    func disableTrustAnchor(input: DisableTrustAnchorInput) async throws -> DisableTrustAnchorOutputResponse
    /// Enables a certificate revocation list (CRL). When enabled, certificates stored in the CRL are unauthorized to receive session credentials. Required permissions: rolesanywhere:EnableCrl.
    ///
    /// - Parameter EnableCrlInput : [no documentation found]
    ///
    /// - Returns: `EnableCrlOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AccessDeniedException` : You do not have sufficient access to perform this action.
    /// - `ResourceNotFoundException` : The resource could not be found.
    func enableCrl(input: EnableCrlInput) async throws -> EnableCrlOutputResponse
    /// Enables temporary credential requests for a profile. Required permissions: rolesanywhere:EnableProfile.
    ///
    /// - Parameter EnableProfileInput : [no documentation found]
    ///
    /// - Returns: `EnableProfileOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AccessDeniedException` : You do not have sufficient access to perform this action.
    /// - `ResourceNotFoundException` : The resource could not be found.
    func enableProfile(input: EnableProfileInput) async throws -> EnableProfileOutputResponse
    /// Enables a trust anchor. When enabled, certificates in the trust anchor chain are authorized for trust validation. Required permissions: rolesanywhere:EnableTrustAnchor.
    ///
    /// - Parameter EnableTrustAnchorInput : [no documentation found]
    ///
    /// - Returns: `EnableTrustAnchorOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AccessDeniedException` : You do not have sufficient access to perform this action.
    /// - `ResourceNotFoundException` : The resource could not be found.
    func enableTrustAnchor(input: EnableTrustAnchorInput) async throws -> EnableTrustAnchorOutputResponse
    /// Gets a certificate revocation list (CRL). Required permissions: rolesanywhere:GetCrl.
    ///
    /// - Parameter GetCrlInput : [no documentation found]
    ///
    /// - Returns: `GetCrlOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ResourceNotFoundException` : The resource could not be found.
    func getCrl(input: GetCrlInput) async throws -> GetCrlOutputResponse
    /// Gets a profile. Required permissions: rolesanywhere:GetProfile.
    ///
    /// - Parameter GetProfileInput : [no documentation found]
    ///
    /// - Returns: `GetProfileOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AccessDeniedException` : You do not have sufficient access to perform this action.
    /// - `ResourceNotFoundException` : The resource could not be found.
    func getProfile(input: GetProfileInput) async throws -> GetProfileOutputResponse
    /// Gets a subject, which associates a certificate identity with authentication attempts. The subject stores auditing information such as the status of the last authentication attempt, the certificate data used in the attempt, and the last time the associated identity attempted authentication. Required permissions: rolesanywhere:GetSubject.
    ///
    /// - Parameter GetSubjectInput : [no documentation found]
    ///
    /// - Returns: `GetSubjectOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AccessDeniedException` : You do not have sufficient access to perform this action.
    /// - `ResourceNotFoundException` : The resource could not be found.
    func getSubject(input: GetSubjectInput) async throws -> GetSubjectOutputResponse
    /// Gets a trust anchor. Required permissions: rolesanywhere:GetTrustAnchor.
    ///
    /// - Parameter GetTrustAnchorInput : [no documentation found]
    ///
    /// - Returns: `GetTrustAnchorOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AccessDeniedException` : You do not have sufficient access to perform this action.
    /// - `ResourceNotFoundException` : The resource could not be found.
    /// - `ValidationException` : Validation exception error.
    func getTrustAnchor(input: GetTrustAnchorInput) async throws -> GetTrustAnchorOutputResponse
    /// Imports the certificate revocation list (CRL). A CRL is a list of certificates that have been revoked by the issuing certificate Authority (CA). IAM Roles Anywhere validates against the CRL before issuing credentials. Required permissions: rolesanywhere:ImportCrl.
    ///
    /// - Parameter ImportCrlInput : [no documentation found]
    ///
    /// - Returns: `ImportCrlOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AccessDeniedException` : You do not have sufficient access to perform this action.
    /// - `ValidationException` : Validation exception error.
    func importCrl(input: ImportCrlInput) async throws -> ImportCrlOutputResponse
    /// Lists all certificate revocation lists (CRL) in the authenticated account and Amazon Web Services Region. Required permissions: rolesanywhere:ListCrls.
    ///
    /// - Parameter ListCrlsInput : [no documentation found]
    ///
    /// - Returns: `ListCrlsOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AccessDeniedException` : You do not have sufficient access to perform this action.
    /// - `ValidationException` : Validation exception error.
    func listCrls(input: ListCrlsInput) async throws -> ListCrlsOutputResponse
    /// Lists all profiles in the authenticated account and Amazon Web Services Region. Required permissions: rolesanywhere:ListProfiles.
    ///
    /// - Parameter ListProfilesInput : [no documentation found]
    ///
    /// - Returns: `ListProfilesOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AccessDeniedException` : You do not have sufficient access to perform this action.
    /// - `ValidationException` : Validation exception error.
    func listProfiles(input: ListProfilesInput) async throws -> ListProfilesOutputResponse
    /// Lists the subjects in the authenticated account and Amazon Web Services Region. Required permissions: rolesanywhere:ListSubjects.
    ///
    /// - Parameter ListSubjectsInput : [no documentation found]
    ///
    /// - Returns: `ListSubjectsOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AccessDeniedException` : You do not have sufficient access to perform this action.
    /// - `ValidationException` : Validation exception error.
    func listSubjects(input: ListSubjectsInput) async throws -> ListSubjectsOutputResponse
    /// Lists the tags attached to the resource. Required permissions: rolesanywhere:ListTagsForResource.
    ///
    /// - Parameter ListTagsForResourceInput : [no documentation found]
    ///
    /// - Returns: `ListTagsForResourceOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AccessDeniedException` : You do not have sufficient access to perform this action.
    /// - `ResourceNotFoundException` : The resource could not be found.
    /// - `ValidationException` : Validation exception error.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    /// Lists the trust anchors in the authenticated account and Amazon Web Services Region. Required permissions: rolesanywhere:ListTrustAnchors.
    ///
    /// - Parameter ListTrustAnchorsInput : [no documentation found]
    ///
    /// - Returns: `ListTrustAnchorsOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AccessDeniedException` : You do not have sufficient access to perform this action.
    /// - `ValidationException` : Validation exception error.
    func listTrustAnchors(input: ListTrustAnchorsInput) async throws -> ListTrustAnchorsOutputResponse
    /// Attaches a list of notification settings to a trust anchor. A notification setting includes information such as event name, threshold, status of the notification setting, and the channel to notify. Required permissions: rolesanywhere:PutNotificationSettings.
    ///
    /// - Parameter PutNotificationSettingsInput : [no documentation found]
    ///
    /// - Returns: `PutNotificationSettingsOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AccessDeniedException` : You do not have sufficient access to perform this action.
    /// - `ResourceNotFoundException` : The resource could not be found.
    /// - `ValidationException` : Validation exception error.
    func putNotificationSettings(input: PutNotificationSettingsInput) async throws -> PutNotificationSettingsOutputResponse
    /// Resets the custom notification setting to IAM Roles Anywhere default setting. Required permissions: rolesanywhere:ResetNotificationSettings.
    ///
    /// - Parameter ResetNotificationSettingsInput : [no documentation found]
    ///
    /// - Returns: `ResetNotificationSettingsOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AccessDeniedException` : You do not have sufficient access to perform this action.
    /// - `ResourceNotFoundException` : The resource could not be found.
    /// - `ValidationException` : Validation exception error.
    func resetNotificationSettings(input: ResetNotificationSettingsInput) async throws -> ResetNotificationSettingsOutputResponse
    /// Attaches tags to a resource. Required permissions: rolesanywhere:TagResource.
    ///
    /// - Parameter TagResourceInput : [no documentation found]
    ///
    /// - Returns: `TagResourceOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AccessDeniedException` : You do not have sufficient access to perform this action.
    /// - `ResourceNotFoundException` : The resource could not be found.
    /// - `TooManyTagsException` : Too many tags.
    /// - `ValidationException` : Validation exception error.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    /// Removes tags from the resource. Required permissions: rolesanywhere:UntagResource.
    ///
    /// - Parameter UntagResourceInput : [no documentation found]
    ///
    /// - Returns: `UntagResourceOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AccessDeniedException` : You do not have sufficient access to perform this action.
    /// - `ResourceNotFoundException` : The resource could not be found.
    /// - `ValidationException` : Validation exception error.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    /// Updates the certificate revocation list (CRL). A CRL is a list of certificates that have been revoked by the issuing certificate authority (CA). IAM Roles Anywhere validates against the CRL before issuing credentials. Required permissions: rolesanywhere:UpdateCrl.
    ///
    /// - Parameter UpdateCrlInput : [no documentation found]
    ///
    /// - Returns: `UpdateCrlOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AccessDeniedException` : You do not have sufficient access to perform this action.
    /// - `ResourceNotFoundException` : The resource could not be found.
    /// - `ValidationException` : Validation exception error.
    func updateCrl(input: UpdateCrlInput) async throws -> UpdateCrlOutputResponse
    /// Updates a profile, a list of the roles that IAM Roles Anywhere service is trusted to assume. You use profiles to intersect permissions with IAM managed policies. Required permissions: rolesanywhere:UpdateProfile.
    ///
    /// - Parameter UpdateProfileInput : [no documentation found]
    ///
    /// - Returns: `UpdateProfileOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AccessDeniedException` : You do not have sufficient access to perform this action.
    /// - `ResourceNotFoundException` : The resource could not be found.
    /// - `ValidationException` : Validation exception error.
    func updateProfile(input: UpdateProfileInput) async throws -> UpdateProfileOutputResponse
    /// Updates a trust anchor. You establish trust between IAM Roles Anywhere and your certificate authority (CA) by configuring a trust anchor. You can define a trust anchor as a reference to an Private Certificate Authority (Private CA) or by uploading a CA certificate. Your Amazon Web Services workloads can authenticate with the trust anchor using certificates issued by the CA in exchange for temporary Amazon Web Services credentials. Required permissions: rolesanywhere:UpdateTrustAnchor.
    ///
    /// - Parameter UpdateTrustAnchorInput : [no documentation found]
    ///
    /// - Returns: `UpdateTrustAnchorOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AccessDeniedException` : You do not have sufficient access to perform this action.
    /// - `ResourceNotFoundException` : The resource could not be found.
    /// - `ValidationException` : Validation exception error.
    func updateTrustAnchor(input: UpdateTrustAnchorInput) async throws -> UpdateTrustAnchorOutputResponse
}

public enum RolesAnywhereClientTypes {}
