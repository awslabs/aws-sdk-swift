//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum Smithy.ClientError
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
@_spi(SmithyReadWrite) import func SmithyReadWrite.listReadingClosure
@_spi(SmithyReadWrite) import func SmithyReadWrite.mapReadingClosure
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.URIQueryItem
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox

public struct DeleteMalwareProtectionPlanOutput {

    public init() { }
}

public struct GetOrganizationStatisticsInput {

    public init() { }
}

public struct UpdateMalwareProtectionPlanOutput {

    public init() { }
}

/// A bad request exception object.
public struct BadRequestException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The error message.
        public internal(set) var message: Swift.String? = nil
        /// The error type.
        public internal(set) var type: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "BadRequestException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        type: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.type = type
    }
}

/// An internal server error exception object.
public struct InternalServerErrorException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The error message.
        public internal(set) var message: Swift.String? = nil
        /// The error type.
        public internal(set) var type: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerErrorException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        type: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.type = type
    }
}

public struct AcceptAdministratorInvitationInput {
    /// The account ID of the GuardDuty administrator account whose invitation you're accepting.
    /// This member is required.
    public var administratorId: Swift.String?
    /// The unique ID of the detector of the GuardDuty member account.
    /// This member is required.
    public var detectorId: Swift.String?
    /// The value that is used to validate the administrator account to the member account.
    /// This member is required.
    public var invitationId: Swift.String?

    public init(
        administratorId: Swift.String? = nil,
        detectorId: Swift.String? = nil,
        invitationId: Swift.String? = nil
    )
    {
        self.administratorId = administratorId
        self.detectorId = detectorId
        self.invitationId = invitationId
    }
}

public struct AcceptAdministratorInvitationOutput {

    public init() { }
}

@available(*, deprecated, message: "This input is deprecated, use AcceptAdministratorInvitationRequest instead")
public struct AcceptInvitationInput {
    /// The unique ID of the detector of the GuardDuty member account.
    /// This member is required.
    public var detectorId: Swift.String?
    /// The value that is used to validate the administrator account to the member account.
    /// This member is required.
    public var invitationId: Swift.String?
    /// The account ID of the GuardDuty administrator account whose invitation you're accepting.
    /// This member is required.
    public var masterId: Swift.String?

    public init(
        detectorId: Swift.String? = nil,
        invitationId: Swift.String? = nil,
        masterId: Swift.String? = nil
    )
    {
        self.detectorId = detectorId
        self.invitationId = invitationId
        self.masterId = masterId
    }
}

@available(*, deprecated, message: "This output is deprecated, use AcceptAdministratorInvitationResponse instead")
public struct AcceptInvitationOutput {

    public init() { }
}

extension GuardDutyClientTypes {
    /// Contains information on the current access control policies for the bucket.
    public struct AccessControlList {
        /// A value that indicates whether public read access for the bucket is enabled through an Access Control List (ACL).
        public var allowsPublicReadAccess: Swift.Bool?
        /// A value that indicates whether public write access for the bucket is enabled through an Access Control List (ACL).
        public var allowsPublicWriteAccess: Swift.Bool?

        public init(
            allowsPublicReadAccess: Swift.Bool? = nil,
            allowsPublicWriteAccess: Swift.Bool? = nil
        )
        {
            self.allowsPublicReadAccess = allowsPublicReadAccess
            self.allowsPublicWriteAccess = allowsPublicWriteAccess
        }
    }

}

/// An access denied exception object.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The error message.
        public internal(set) var message: Swift.String? = nil
        /// The error type.
        public internal(set) var type: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        type: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.type = type
    }
}

extension GuardDutyClientTypes {
    /// Contains information about the access keys.
    public struct AccessKeyDetails {
        /// The access key ID of the user.
        public var accessKeyId: Swift.String?
        /// The principal ID of the user.
        public var principalId: Swift.String?
        /// The name of the user.
        public var userName: Swift.String?
        /// The type of the user.
        public var userType: Swift.String?

        public init(
            accessKeyId: Swift.String? = nil,
            principalId: Swift.String? = nil,
            userName: Swift.String? = nil,
            userType: Swift.String? = nil
        )
        {
            self.accessKeyId = accessKeyId
            self.principalId = principalId
            self.userName = userName
            self.userType = userType
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about the account.
    public struct AccountDetail {
        /// The member account ID.
        /// This member is required.
        public var accountId: Swift.String?
        /// The email address of the member account.
        /// This member is required.
        public var email: Swift.String?

        public init(
            accountId: Swift.String? = nil,
            email: Swift.String? = nil
        )
        {
            self.accountId = accountId
            self.email = email
        }
    }

}

extension GuardDutyClientTypes.AccountDetail: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AccountDetail(accountId: \(Swift.String(describing: accountId)), email: \"CONTENT_REDACTED\")"}
}

extension GuardDutyClientTypes {
    /// Contains information about which data sources are enabled for the GuardDuty member account.
    public struct DataSourceFreeTrial {
        /// A value that specifies the number of days left to use each enabled data source.
        public var freeTrialDaysRemaining: Swift.Int?

        public init(
            freeTrialDaysRemaining: Swift.Int? = nil
        )
        {
            self.freeTrialDaysRemaining = freeTrialDaysRemaining
        }
    }

}

extension GuardDutyClientTypes {
    /// Provides details about the Kubernetes resources when it is enabled as a data source.
    public struct KubernetesDataSourceFreeTrial {
        /// Describes whether Kubernetes audit logs are enabled as a data source.
        public var auditLogs: GuardDutyClientTypes.DataSourceFreeTrial?

        public init(
            auditLogs: GuardDutyClientTypes.DataSourceFreeTrial? = nil
        )
        {
            self.auditLogs = auditLogs
        }
    }

}

extension GuardDutyClientTypes {
    /// Provides details about Malware Protection when it is enabled as a data source.
    public struct MalwareProtectionDataSourceFreeTrial {
        /// Describes whether Malware Protection for EC2 instances with findings is enabled as a data source.
        public var scanEc2InstanceWithFindings: GuardDutyClientTypes.DataSourceFreeTrial?

        public init(
            scanEc2InstanceWithFindings: GuardDutyClientTypes.DataSourceFreeTrial? = nil
        )
        {
            self.scanEc2InstanceWithFindings = scanEc2InstanceWithFindings
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about which data sources are enabled for the GuardDuty member account.
    public struct DataSourcesFreeTrial {
        /// Describes whether any Amazon Web Services CloudTrail management event logs are enabled as data sources.
        public var cloudTrail: GuardDutyClientTypes.DataSourceFreeTrial?
        /// Describes whether any DNS logs are enabled as data sources.
        public var dnsLogs: GuardDutyClientTypes.DataSourceFreeTrial?
        /// Describes whether any VPC Flow logs are enabled as data sources.
        public var flowLogs: GuardDutyClientTypes.DataSourceFreeTrial?
        /// Describes whether any Kubernetes logs are enabled as data sources.
        public var kubernetes: GuardDutyClientTypes.KubernetesDataSourceFreeTrial?
        /// Describes whether Malware Protection is enabled as a data source.
        public var malwareProtection: GuardDutyClientTypes.MalwareProtectionDataSourceFreeTrial?
        /// Describes whether any S3 data event logs are enabled as data sources.
        public var s3Logs: GuardDutyClientTypes.DataSourceFreeTrial?

        public init(
            cloudTrail: GuardDutyClientTypes.DataSourceFreeTrial? = nil,
            dnsLogs: GuardDutyClientTypes.DataSourceFreeTrial? = nil,
            flowLogs: GuardDutyClientTypes.DataSourceFreeTrial? = nil,
            kubernetes: GuardDutyClientTypes.KubernetesDataSourceFreeTrial? = nil,
            malwareProtection: GuardDutyClientTypes.MalwareProtectionDataSourceFreeTrial? = nil,
            s3Logs: GuardDutyClientTypes.DataSourceFreeTrial? = nil
        )
        {
            self.cloudTrail = cloudTrail
            self.dnsLogs = dnsLogs
            self.flowLogs = flowLogs
            self.kubernetes = kubernetes
            self.malwareProtection = malwareProtection
            self.s3Logs = s3Logs
        }
    }

}

extension GuardDutyClientTypes {

    public enum FreeTrialFeatureResult: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cloudTrail
        case dnsLogs
        case ebsMalwareProtection
        case ec2RuntimeMonitoring
        case eksAuditLogs
        case eksRuntimeMonitoring
        case fargateRuntimeMonitoring
        case flowLogs
        case lambdaNetworkLogs
        case rdsLoginEvents
        case s3DataEvents
        case sdkUnknown(Swift.String)

        public static var allCases: [FreeTrialFeatureResult] {
            return [
                .cloudTrail,
                .dnsLogs,
                .ebsMalwareProtection,
                .ec2RuntimeMonitoring,
                .eksAuditLogs,
                .eksRuntimeMonitoring,
                .fargateRuntimeMonitoring,
                .flowLogs,
                .lambdaNetworkLogs,
                .rdsLoginEvents,
                .s3DataEvents
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cloudTrail: return "CLOUD_TRAIL"
            case .dnsLogs: return "DNS_LOGS"
            case .ebsMalwareProtection: return "EBS_MALWARE_PROTECTION"
            case .ec2RuntimeMonitoring: return "EC2_RUNTIME_MONITORING"
            case .eksAuditLogs: return "EKS_AUDIT_LOGS"
            case .eksRuntimeMonitoring: return "EKS_RUNTIME_MONITORING"
            case .fargateRuntimeMonitoring: return "FARGATE_RUNTIME_MONITORING"
            case .flowLogs: return "FLOW_LOGS"
            case .lambdaNetworkLogs: return "LAMBDA_NETWORK_LOGS"
            case .rdsLoginEvents: return "RDS_LOGIN_EVENTS"
            case .s3DataEvents: return "S3_DATA_EVENTS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GuardDutyClientTypes {
    /// Contains information about the free trial period for a feature.
    public struct FreeTrialFeatureConfigurationResult {
        /// The number of the remaining free trial days for the feature.
        public var freeTrialDaysRemaining: Swift.Int?
        /// The name of the feature for which the free trial is configured.
        public var name: GuardDutyClientTypes.FreeTrialFeatureResult?

        public init(
            freeTrialDaysRemaining: Swift.Int? = nil,
            name: GuardDutyClientTypes.FreeTrialFeatureResult? = nil
        )
        {
            self.freeTrialDaysRemaining = freeTrialDaysRemaining
            self.name = name
        }
    }

}

extension GuardDutyClientTypes {
    /// Provides details of the GuardDuty member account that uses a free trial service.
    public struct AccountFreeTrialInfo {
        /// The account identifier of the GuardDuty member account.
        public var accountId: Swift.String?
        /// Describes the data source enabled for the GuardDuty member account.
        @available(*, deprecated, message: "This parameter is deprecated, use Features instead")
        public var dataSources: GuardDutyClientTypes.DataSourcesFreeTrial?
        /// A list of features enabled for the GuardDuty account.
        public var features: [GuardDutyClientTypes.FreeTrialFeatureConfigurationResult]?

        public init(
            accountId: Swift.String? = nil,
            dataSources: GuardDutyClientTypes.DataSourcesFreeTrial? = nil,
            features: [GuardDutyClientTypes.FreeTrialFeatureConfigurationResult]? = nil
        )
        {
            self.accountId = accountId
            self.dataSources = dataSources
            self.features = features
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information on how the bucker owner's S3 Block Public Access settings are being applied to the S3 bucket. See [S3 Block Public Access](https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html) for more information.
    public struct BlockPublicAccess {
        /// Indicates if S3 Block Public Access is set to BlockPublicAcls.
        public var blockPublicAcls: Swift.Bool?
        /// Indicates if S3 Block Public Access is set to BlockPublicPolicy.
        public var blockPublicPolicy: Swift.Bool?
        /// Indicates if S3 Block Public Access is set to IgnorePublicAcls.
        public var ignorePublicAcls: Swift.Bool?
        /// Indicates if S3 Block Public Access is set to RestrictPublicBuckets.
        public var restrictPublicBuckets: Swift.Bool?

        public init(
            blockPublicAcls: Swift.Bool? = nil,
            blockPublicPolicy: Swift.Bool? = nil,
            ignorePublicAcls: Swift.Bool? = nil,
            restrictPublicBuckets: Swift.Bool? = nil
        )
        {
            self.blockPublicAcls = blockPublicAcls
            self.blockPublicPolicy = blockPublicPolicy
            self.ignorePublicAcls = ignorePublicAcls
            self.restrictPublicBuckets = restrictPublicBuckets
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about the account level permissions on the S3 bucket.
    public struct AccountLevelPermissions {
        /// Describes the S3 Block Public Access settings of the bucket's parent account.
        public var blockPublicAccess: GuardDutyClientTypes.BlockPublicAccess?

        public init(
            blockPublicAccess: GuardDutyClientTypes.BlockPublicAccess? = nil
        )
        {
            self.blockPublicAccess = blockPublicAccess
        }
    }

}

extension GuardDutyClientTypes {
    /// Represents a list of map of accounts with the number of findings associated with each account.
    public struct AccountStatistics {
        /// The ID of the Amazon Web Services account.
        public var accountId: Swift.String?
        /// The timestamp at which the finding for this account was last generated.
        public var lastGeneratedAt: Foundation.Date?
        /// The total number of findings associated with an account.
        public var totalFindings: Swift.Int?

        public init(
            accountId: Swift.String? = nil,
            lastGeneratedAt: Foundation.Date? = nil,
            totalFindings: Swift.Int? = nil
        )
        {
            self.accountId = accountId
            self.lastGeneratedAt = lastGeneratedAt
            self.totalFindings = totalFindings
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about the domain.
    public struct DomainDetails {
        /// The domain information for the Amazon Web Services API call.
        public var domain: Swift.String?

        public init(
            domain: Swift.String? = nil
        )
        {
            self.domain = domain
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains details about the remote Amazon Web Services account that made the API call.
    public struct RemoteAccountDetails {
        /// The Amazon Web Services account ID of the remote API caller.
        public var accountId: Swift.String?
        /// Details on whether the Amazon Web Services account of the remote API caller is related to your GuardDuty environment. If this value is True the API caller is affiliated to your account in some way. If it is False the API caller is from outside your environment.
        public var affiliated: Swift.Bool?

        public init(
            accountId: Swift.String? = nil,
            affiliated: Swift.Bool? = nil
        )
        {
            self.accountId = accountId
            self.affiliated = affiliated
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about the city associated with the IP address.
    public struct City {
        /// The city name of the remote IP address.
        public var cityName: Swift.String?

        public init(
            cityName: Swift.String? = nil
        )
        {
            self.cityName = cityName
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about the country where the remote IP address is located.
    public struct Country {
        /// The country code of the remote IP address.
        public var countryCode: Swift.String?
        /// The country name of the remote IP address.
        public var countryName: Swift.String?

        public init(
            countryCode: Swift.String? = nil,
            countryName: Swift.String? = nil
        )
        {
            self.countryCode = countryCode
            self.countryName = countryName
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about the location of the remote IP address.
    public struct GeoLocation {
        /// The latitude information of the remote IP address.
        public var lat: Swift.Double?
        /// The longitude information of the remote IP address.
        public var lon: Swift.Double?

        public init(
            lat: Swift.Double? = nil,
            lon: Swift.Double? = nil
        )
        {
            self.lat = lat
            self.lon = lon
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about the ISP organization of the remote IP address.
    public struct Organization {
        /// The Autonomous System Number (ASN) of the internet provider of the remote IP address.
        public var asn: Swift.String?
        /// The organization that registered this ASN.
        public var asnOrg: Swift.String?
        /// The ISP information for the internet provider.
        public var isp: Swift.String?
        /// The name of the internet provider.
        public var org: Swift.String?

        public init(
            asn: Swift.String? = nil,
            asnOrg: Swift.String? = nil,
            isp: Swift.String? = nil,
            org: Swift.String? = nil
        )
        {
            self.asn = asn
            self.asnOrg = asnOrg
            self.isp = isp
            self.org = org
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about the remote IP address of the connection.
    public struct RemoteIpDetails {
        /// The city information of the remote IP address.
        public var city: GuardDutyClientTypes.City?
        /// The country code of the remote IP address.
        public var country: GuardDutyClientTypes.Country?
        /// The location information of the remote IP address.
        public var geoLocation: GuardDutyClientTypes.GeoLocation?
        /// The IPv4 remote address of the connection.
        public var ipAddressV4: Swift.String?
        /// The IPv6 remote address of the connection.
        public var ipAddressV6: Swift.String?
        /// The ISP organization information of the remote IP address.
        public var organization: GuardDutyClientTypes.Organization?

        public init(
            city: GuardDutyClientTypes.City? = nil,
            country: GuardDutyClientTypes.Country? = nil,
            geoLocation: GuardDutyClientTypes.GeoLocation? = nil,
            ipAddressV4: Swift.String? = nil,
            ipAddressV6: Swift.String? = nil,
            organization: GuardDutyClientTypes.Organization? = nil
        )
        {
            self.city = city
            self.country = country
            self.geoLocation = geoLocation
            self.ipAddressV4 = ipAddressV4
            self.ipAddressV6 = ipAddressV6
            self.organization = organization
        }
    }

}

extension GuardDutyClientTypes.RemoteIpDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RemoteIpDetails(city: \(Swift.String(describing: city)), country: \(Swift.String(describing: country)), geoLocation: \(Swift.String(describing: geoLocation)), organization: \(Swift.String(describing: organization)), ipAddressV4: \"CONTENT_REDACTED\", ipAddressV6: \"CONTENT_REDACTED\")"}
}

extension GuardDutyClientTypes {
    /// Contains information about the API action.
    public struct AwsApiCallAction {
        /// The details of the Amazon Web Services account that made the API call. This field identifies the resources that were affected by this API call.
        public var affectedResources: [Swift.String: Swift.String]?
        /// The Amazon Web Services API name.
        public var api: Swift.String?
        /// The Amazon Web Services API caller type.
        public var callerType: Swift.String?
        /// The domain information for the Amazon Web Services API call.
        public var domainDetails: GuardDutyClientTypes.DomainDetails?
        /// The error code of the failed Amazon Web Services API action.
        public var errorCode: Swift.String?
        /// The details of the Amazon Web Services account that made the API call. This field appears if the call was made from outside your account.
        public var remoteAccountDetails: GuardDutyClientTypes.RemoteAccountDetails?
        /// The remote IP information of the connection that initiated the Amazon Web Services API call.
        public var remoteIpDetails: GuardDutyClientTypes.RemoteIpDetails?
        /// The Amazon Web Services service name whose API was invoked.
        public var serviceName: Swift.String?
        /// The agent through which the API request was made.
        public var userAgent: Swift.String?

        public init(
            affectedResources: [Swift.String: Swift.String]? = nil,
            api: Swift.String? = nil,
            callerType: Swift.String? = nil,
            domainDetails: GuardDutyClientTypes.DomainDetails? = nil,
            errorCode: Swift.String? = nil,
            remoteAccountDetails: GuardDutyClientTypes.RemoteAccountDetails? = nil,
            remoteIpDetails: GuardDutyClientTypes.RemoteIpDetails? = nil,
            serviceName: Swift.String? = nil,
            userAgent: Swift.String? = nil
        )
        {
            self.affectedResources = affectedResources
            self.api = api
            self.callerType = callerType
            self.domainDetails = domainDetails
            self.errorCode = errorCode
            self.remoteAccountDetails = remoteAccountDetails
            self.remoteIpDetails = remoteIpDetails
            self.serviceName = serviceName
            self.userAgent = userAgent
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about the DNS_REQUEST action described in this finding.
    public struct DnsRequestAction {
        /// Indicates whether the targeted port is blocked.
        public var blocked: Swift.Bool?
        /// The domain information for the DNS query.
        public var domain: Swift.String?
        /// The second and top level domain involved in the activity that potentially prompted GuardDuty to generate this finding. For a list of top-level and second-level domains, see [public suffix list](https://publicsuffix.org/).
        public var domainWithSuffix: Swift.String?
        /// The network connection protocol observed in the activity that prompted GuardDuty to generate the finding.
        public var `protocol`: Swift.String?

        public init(
            blocked: Swift.Bool? = nil,
            domain: Swift.String? = nil,
            domainWithSuffix: Swift.String? = nil,
            `protocol`: Swift.String? = nil
        )
        {
            self.blocked = blocked
            self.domain = domain
            self.domainWithSuffix = domainWithSuffix
            self.`protocol` = `protocol`
        }
    }

}

extension GuardDutyClientTypes {
    /// Information about the Kubernetes API call action described in this finding.
    public struct KubernetesApiCallAction {
        /// The name of the namespace where the Kubernetes API call action takes place.
        public var namespace: Swift.String?
        /// Parameters related to the Kubernetes API call action.
        public var parameters: Swift.String?
        /// Contains information about the remote IP address of the connection.
        public var remoteIpDetails: GuardDutyClientTypes.RemoteIpDetails?
        /// The Kubernetes API request URI.
        public var requestUri: Swift.String?
        /// The resource component in the Kubernetes API call action.
        public var resource: Swift.String?
        /// The name of the resource in the Kubernetes API call action.
        public var resourceName: Swift.String?
        /// The IP of the Kubernetes API caller and the IPs of any proxies or load balancers between the caller and the API endpoint.
        public var sourceIps: [Swift.String]?
        /// The resulting HTTP response code of the Kubernetes API call action.
        public var statusCode: Swift.Int?
        /// The name of the sub-resource in the Kubernetes API call action.
        public var subresource: Swift.String?
        /// The user agent of the caller of the Kubernetes API.
        public var userAgent: Swift.String?
        /// The Kubernetes API request HTTP verb.
        public var verb: Swift.String?

        public init(
            namespace: Swift.String? = nil,
            parameters: Swift.String? = nil,
            remoteIpDetails: GuardDutyClientTypes.RemoteIpDetails? = nil,
            requestUri: Swift.String? = nil,
            resource: Swift.String? = nil,
            resourceName: Swift.String? = nil,
            sourceIps: [Swift.String]? = nil,
            statusCode: Swift.Int? = nil,
            subresource: Swift.String? = nil,
            userAgent: Swift.String? = nil,
            verb: Swift.String? = nil
        )
        {
            self.namespace = namespace
            self.parameters = parameters
            self.remoteIpDetails = remoteIpDetails
            self.requestUri = requestUri
            self.resource = resource
            self.resourceName = resourceName
            self.sourceIps = sourceIps
            self.statusCode = statusCode
            self.subresource = subresource
            self.userAgent = userAgent
            self.verb = verb
        }
    }

}

extension GuardDutyClientTypes {
    /// Information about the Kubernetes API for which you check if you have permission to call.
    public struct KubernetesPermissionCheckedDetails {
        /// Information whether the user has the permission to call the Kubernetes API.
        public var allowed: Swift.Bool?
        /// The namespace where the Kubernetes API action will take place.
        public var namespace: Swift.String?
        /// The Kubernetes resource with which your Kubernetes API call will interact.
        public var resource: Swift.String?
        /// The verb component of the Kubernetes API call. For example, when you check whether or not you have the permission to call the CreatePod API, the verb component will be Create.
        public var verb: Swift.String?

        public init(
            allowed: Swift.Bool? = nil,
            namespace: Swift.String? = nil,
            resource: Swift.String? = nil,
            verb: Swift.String? = nil
        )
        {
            self.allowed = allowed
            self.namespace = namespace
            self.resource = resource
            self.verb = verb
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about the role binding that grants the permission defined in a Kubernetes role.
    public struct KubernetesRoleBindingDetails {
        /// The kind of the role. For role binding, this value will be RoleBinding.
        public var kind: Swift.String?
        /// The name of the RoleBinding.
        public var name: Swift.String?
        /// The type of the role being referenced. This could be either Role or ClusterRole.
        public var roleRefKind: Swift.String?
        /// The name of the role being referenced. This must match the name of the Role or ClusterRole that you want to bind to.
        public var roleRefName: Swift.String?
        /// The unique identifier of the role binding.
        public var uid: Swift.String?

        public init(
            kind: Swift.String? = nil,
            name: Swift.String? = nil,
            roleRefKind: Swift.String? = nil,
            roleRefName: Swift.String? = nil,
            uid: Swift.String? = nil
        )
        {
            self.kind = kind
            self.name = name
            self.roleRefKind = roleRefKind
            self.roleRefName = roleRefName
            self.uid = uid
        }
    }

}

extension GuardDutyClientTypes {
    /// Information about the Kubernetes role name and role type.
    public struct KubernetesRoleDetails {
        /// The kind of role. For this API, the value of kind will be Role.
        public var kind: Swift.String?
        /// The name of the Kubernetes role.
        public var name: Swift.String?
        /// The unique identifier of the Kubernetes role name.
        public var uid: Swift.String?

        public init(
            kind: Swift.String? = nil,
            name: Swift.String? = nil,
            uid: Swift.String? = nil
        )
        {
            self.kind = kind
            self.name = name
            self.uid = uid
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about the local IP address of the connection.
    public struct LocalIpDetails {
        /// The IPv4 local address of the connection.
        public var ipAddressV4: Swift.String?
        /// The IPv6 local address of the connection.
        public var ipAddressV6: Swift.String?

        public init(
            ipAddressV4: Swift.String? = nil,
            ipAddressV6: Swift.String? = nil
        )
        {
            self.ipAddressV4 = ipAddressV4
            self.ipAddressV6 = ipAddressV6
        }
    }

}

extension GuardDutyClientTypes.LocalIpDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LocalIpDetails(ipAddressV4: \"CONTENT_REDACTED\", ipAddressV6: \"CONTENT_REDACTED\")"}
}

extension GuardDutyClientTypes {
    /// Contains information about the port for the local connection.
    public struct LocalPortDetails {
        /// The port number of the local connection.
        public var port: Swift.Int?
        /// The port name of the local connection.
        public var portName: Swift.String?

        public init(
            port: Swift.Int? = nil,
            portName: Swift.String? = nil
        )
        {
            self.port = port
            self.portName = portName
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about the remote port.
    public struct RemotePortDetails {
        /// The port number of the remote connection.
        public var port: Swift.Int?
        /// The port name of the remote connection.
        public var portName: Swift.String?

        public init(
            port: Swift.Int? = nil,
            portName: Swift.String? = nil
        )
        {
            self.port = port
            self.portName = portName
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about the NETWORK_CONNECTION action described in the finding.
    public struct NetworkConnectionAction {
        /// Indicates whether EC2 blocked the network connection to your instance.
        public var blocked: Swift.Bool?
        /// The network connection direction.
        public var connectionDirection: Swift.String?
        /// The local IP information of the connection.
        public var localIpDetails: GuardDutyClientTypes.LocalIpDetails?
        /// The local port information of the connection.
        public var localPortDetails: GuardDutyClientTypes.LocalPortDetails?
        /// The network connection protocol.
        public var `protocol`: Swift.String?
        /// The remote IP information of the connection.
        public var remoteIpDetails: GuardDutyClientTypes.RemoteIpDetails?
        /// The remote port information of the connection.
        public var remotePortDetails: GuardDutyClientTypes.RemotePortDetails?

        public init(
            blocked: Swift.Bool? = nil,
            connectionDirection: Swift.String? = nil,
            localIpDetails: GuardDutyClientTypes.LocalIpDetails? = nil,
            localPortDetails: GuardDutyClientTypes.LocalPortDetails? = nil,
            `protocol`: Swift.String? = nil,
            remoteIpDetails: GuardDutyClientTypes.RemoteIpDetails? = nil,
            remotePortDetails: GuardDutyClientTypes.RemotePortDetails? = nil
        )
        {
            self.blocked = blocked
            self.connectionDirection = connectionDirection
            self.localIpDetails = localIpDetails
            self.localPortDetails = localPortDetails
            self.`protocol` = `protocol`
            self.remoteIpDetails = remoteIpDetails
            self.remotePortDetails = remotePortDetails
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about the port probe details.
    public struct PortProbeDetail {
        /// The local IP information of the connection.
        public var localIpDetails: GuardDutyClientTypes.LocalIpDetails?
        /// The local port information of the connection.
        public var localPortDetails: GuardDutyClientTypes.LocalPortDetails?
        /// The remote IP information of the connection.
        public var remoteIpDetails: GuardDutyClientTypes.RemoteIpDetails?

        public init(
            localIpDetails: GuardDutyClientTypes.LocalIpDetails? = nil,
            localPortDetails: GuardDutyClientTypes.LocalPortDetails? = nil,
            remoteIpDetails: GuardDutyClientTypes.RemoteIpDetails? = nil
        )
        {
            self.localIpDetails = localIpDetails
            self.localPortDetails = localPortDetails
            self.remoteIpDetails = remoteIpDetails
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about the PORT_PROBE action described in the finding.
    public struct PortProbeAction {
        /// Indicates whether EC2 blocked the port probe to the instance, such as with an ACL.
        public var blocked: Swift.Bool?
        /// A list of objects related to port probe details.
        public var portProbeDetails: [GuardDutyClientTypes.PortProbeDetail]?

        public init(
            blocked: Swift.Bool? = nil,
            portProbeDetails: [GuardDutyClientTypes.PortProbeDetail]? = nil
        )
        {
            self.blocked = blocked
            self.portProbeDetails = portProbeDetails
        }
    }

}

extension GuardDutyClientTypes {
    /// Information about the login attempts.
    public struct LoginAttribute {
        /// Indicates the application name used to attempt log in.
        public var application: Swift.String?
        /// Represents the sum of failed (unsuccessful) login attempts made to establish a connection to the database instance.
        public var failedLoginAttempts: Swift.Int?
        /// Represents the sum of successful connections (a correct combination of login attributes) made to the database instance by the actor.
        public var successfulLoginAttempts: Swift.Int?
        /// Indicates the user name which attempted to log in.
        public var user: Swift.String?

        public init(
            application: Swift.String? = nil,
            failedLoginAttempts: Swift.Int? = nil,
            successfulLoginAttempts: Swift.Int? = nil,
            user: Swift.String? = nil
        )
        {
            self.application = application
            self.failedLoginAttempts = failedLoginAttempts
            self.successfulLoginAttempts = successfulLoginAttempts
            self.user = user
        }
    }

}

extension GuardDutyClientTypes {
    /// Indicates that a login attempt was made to the potentially compromised database from a remote IP address.
    public struct RdsLoginAttemptAction {
        /// Indicates the login attributes used in the login attempt.
        public var loginAttributes: [GuardDutyClientTypes.LoginAttribute]?
        /// Contains information about the remote IP address of the connection.
        public var remoteIpDetails: GuardDutyClientTypes.RemoteIpDetails?

        public init(
            loginAttributes: [GuardDutyClientTypes.LoginAttribute]? = nil,
            remoteIpDetails: GuardDutyClientTypes.RemoteIpDetails? = nil
        )
        {
            self.loginAttributes = loginAttributes
            self.remoteIpDetails = remoteIpDetails
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about actions.
    public struct Action {
        /// The GuardDuty finding activity type.
        public var actionType: Swift.String?
        /// Information about the AWS_API_CALL action described in this finding.
        public var awsApiCallAction: GuardDutyClientTypes.AwsApiCallAction?
        /// Information about the DNS_REQUEST action described in this finding.
        public var dnsRequestAction: GuardDutyClientTypes.DnsRequestAction?
        /// Information about the Kubernetes API call action described in this finding.
        public var kubernetesApiCallAction: GuardDutyClientTypes.KubernetesApiCallAction?
        /// Information whether the user has the permission to use a specific Kubernetes API.
        public var kubernetesPermissionCheckedDetails: GuardDutyClientTypes.KubernetesPermissionCheckedDetails?
        /// Information about the role binding that grants the permission defined in a Kubernetes role.
        public var kubernetesRoleBindingDetails: GuardDutyClientTypes.KubernetesRoleBindingDetails?
        /// Information about the Kubernetes role name and role type.
        public var kubernetesRoleDetails: GuardDutyClientTypes.KubernetesRoleDetails?
        /// Information about the NETWORK_CONNECTION action described in this finding.
        public var networkConnectionAction: GuardDutyClientTypes.NetworkConnectionAction?
        /// Information about the PORT_PROBE action described in this finding.
        public var portProbeAction: GuardDutyClientTypes.PortProbeAction?
        /// Information about RDS_LOGIN_ATTEMPT action described in this finding.
        public var rdsLoginAttemptAction: GuardDutyClientTypes.RdsLoginAttemptAction?

        public init(
            actionType: Swift.String? = nil,
            awsApiCallAction: GuardDutyClientTypes.AwsApiCallAction? = nil,
            dnsRequestAction: GuardDutyClientTypes.DnsRequestAction? = nil,
            kubernetesApiCallAction: GuardDutyClientTypes.KubernetesApiCallAction? = nil,
            kubernetesPermissionCheckedDetails: GuardDutyClientTypes.KubernetesPermissionCheckedDetails? = nil,
            kubernetesRoleBindingDetails: GuardDutyClientTypes.KubernetesRoleBindingDetails? = nil,
            kubernetesRoleDetails: GuardDutyClientTypes.KubernetesRoleDetails? = nil,
            networkConnectionAction: GuardDutyClientTypes.NetworkConnectionAction? = nil,
            portProbeAction: GuardDutyClientTypes.PortProbeAction? = nil,
            rdsLoginAttemptAction: GuardDutyClientTypes.RdsLoginAttemptAction? = nil
        )
        {
            self.actionType = actionType
            self.awsApiCallAction = awsApiCallAction
            self.dnsRequestAction = dnsRequestAction
            self.kubernetesApiCallAction = kubernetesApiCallAction
            self.kubernetesPermissionCheckedDetails = kubernetesPermissionCheckedDetails
            self.kubernetesRoleBindingDetails = kubernetesRoleBindingDetails
            self.kubernetesRoleDetails = kubernetesRoleDetails
            self.networkConnectionAction = networkConnectionAction
            self.portProbeAction = portProbeAction
            self.rdsLoginAttemptAction = rdsLoginAttemptAction
        }
    }

}

extension GuardDutyClientTypes {
    /// Information about the installed EKS add-on (GuardDuty security agent).
    public struct AddonDetails {
        /// Status of the installed EKS add-on.
        public var addonStatus: Swift.String?
        /// Version of the installed EKS add-on.
        public var addonVersion: Swift.String?

        public init(
            addonStatus: Swift.String? = nil,
            addonVersion: Swift.String? = nil
        )
        {
            self.addonStatus = addonStatus
            self.addonVersion = addonVersion
        }
    }

}

extension GuardDutyClientTypes {

    public enum AdminStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disableInProgress
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [AdminStatus] {
            return [
                .disableInProgress,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disableInProgress: return "DISABLE_IN_PROGRESS"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GuardDutyClientTypes {
    /// The account within the organization specified as the GuardDuty delegated administrator.
    public struct AdminAccount {
        /// The Amazon Web Services account ID for the account.
        public var adminAccountId: Swift.String?
        /// Indicates whether the account is enabled as the delegated administrator.
        public var adminStatus: GuardDutyClientTypes.AdminStatus?

        public init(
            adminAccountId: Swift.String? = nil,
            adminStatus: GuardDutyClientTypes.AdminStatus? = nil
        )
        {
            self.adminAccountId = adminAccountId
            self.adminStatus = adminStatus
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about the administrator account and invitation.
    public struct Administrator {
        /// The ID of the account used as the administrator account.
        public var accountId: Swift.String?
        /// The value that is used to validate the administrator account to the member account.
        public var invitationId: Swift.String?
        /// The timestamp when the invitation was sent.
        public var invitedAt: Swift.String?
        /// The status of the relationship between the administrator and member accounts.
        public var relationshipStatus: Swift.String?

        public init(
            accountId: Swift.String? = nil,
            invitationId: Swift.String? = nil,
            invitedAt: Swift.String? = nil,
            relationshipStatus: Swift.String? = nil
        )
        {
            self.accountId = accountId
            self.invitationId = invitationId
            self.invitedAt = invitedAt
            self.relationshipStatus = relationshipStatus
        }
    }

}

extension GuardDutyClientTypes {
    /// Information about the installed GuardDuty security agent.
    public struct AgentDetails {
        /// Version of the installed GuardDuty security agent.
        public var version: Swift.String?

        public init(
            version: Swift.String? = nil
        )
        {
            self.version = version
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about the observed behavior.
    public struct Observations {
        /// The text that was unusual.
        public var text: [Swift.String]?

        public init(
            text: [Swift.String]? = nil
        )
        {
            self.text = text
        }
    }

}

extension GuardDutyClientTypes {

    public enum ProfileSubtype: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case frequent
        case infrequent
        case rare
        case unseen
        case sdkUnknown(Swift.String)

        public static var allCases: [ProfileSubtype] {
            return [
                .frequent,
                .infrequent,
                .rare,
                .unseen
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .frequent: return "FREQUENT"
            case .infrequent: return "INFREQUENT"
            case .rare: return "RARE"
            case .unseen: return "UNSEEN"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GuardDutyClientTypes {

    public enum ProfileType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case frequency
        case sdkUnknown(Swift.String)

        public static var allCases: [ProfileType] {
            return [
                .frequency
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .frequency: return "FREQUENCY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GuardDutyClientTypes {
    /// Contains information about the unusual anomalies.
    public struct AnomalyObject {
        /// The recorded value.
        public var observations: GuardDutyClientTypes.Observations?
        /// The frequency of the anomaly.
        public var profileSubtype: GuardDutyClientTypes.ProfileSubtype?
        /// The type of behavior of the profile.
        public var profileType: GuardDutyClientTypes.ProfileType?

        public init(
            observations: GuardDutyClientTypes.Observations? = nil,
            profileSubtype: GuardDutyClientTypes.ProfileSubtype? = nil,
            profileType: GuardDutyClientTypes.ProfileType? = nil
        )
        {
            self.observations = observations
            self.profileSubtype = profileSubtype
            self.profileType = profileType
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about the behavior of the anomaly that is new to GuardDuty.
    public struct AnomalyUnusual {
        /// The behavior of the anomalous activity that caused GuardDuty to generate the finding.
        public var behavior: [Swift.String: [Swift.String: GuardDutyClientTypes.AnomalyObject]]?

        public init(
            behavior: [Swift.String: [Swift.String: GuardDutyClientTypes.AnomalyObject]]? = nil
        )
        {
            self.behavior = behavior
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about the anomalies.
    public struct Anomaly {
        /// Information about the types of profiles.
        public var profiles: [Swift.String: [Swift.String: [GuardDutyClientTypes.AnomalyObject]]]?
        /// Information about the behavior of the anomalies.
        public var unusual: GuardDutyClientTypes.AnomalyUnusual?

        public init(
            profiles: [Swift.String: [Swift.String: [GuardDutyClientTypes.AnomalyObject]]]? = nil,
            unusual: GuardDutyClientTypes.AnomalyUnusual? = nil
        )
        {
            self.profiles = profiles
            self.unusual = unusual
        }
    }

}

public struct ArchiveFindingsInput {
    /// The ID of the detector that specifies the GuardDuty service whose findings you want to archive.
    /// This member is required.
    public var detectorId: Swift.String?
    /// The IDs of the findings that you want to archive.
    /// This member is required.
    public var findingIds: [Swift.String]?

    public init(
        detectorId: Swift.String? = nil,
        findingIds: [Swift.String]? = nil
    )
    {
        self.detectorId = detectorId
        self.findingIds = findingIds
    }
}

public struct ArchiveFindingsOutput {

    public init() { }
}

extension GuardDutyClientTypes {

    public enum AutoEnableMembers: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case all
        case new
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoEnableMembers] {
            return [
                .all,
                .new,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case .new: return "NEW"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GuardDutyClientTypes {
    /// Contains information on the current bucket policies for the S3 bucket.
    public struct BucketPolicy {
        /// A value that indicates whether public read access for the bucket is enabled through a bucket policy.
        public var allowsPublicReadAccess: Swift.Bool?
        /// A value that indicates whether public write access for the bucket is enabled through a bucket policy.
        public var allowsPublicWriteAccess: Swift.Bool?

        public init(
            allowsPublicReadAccess: Swift.Bool? = nil,
            allowsPublicWriteAccess: Swift.Bool? = nil
        )
        {
            self.allowsPublicReadAccess = allowsPublicReadAccess
            self.allowsPublicWriteAccess = allowsPublicWriteAccess
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about the bucket level permissions for the S3 bucket.
    public struct BucketLevelPermissions {
        /// Contains information on how Access Control Policies are applied to the bucket.
        public var accessControlList: GuardDutyClientTypes.AccessControlList?
        /// Contains information on which account level S3 Block Public Access settings are applied to the S3 bucket.
        public var blockPublicAccess: GuardDutyClientTypes.BlockPublicAccess?
        /// Contains information on the bucket policies for the S3 bucket.
        public var bucketPolicy: GuardDutyClientTypes.BucketPolicy?

        public init(
            accessControlList: GuardDutyClientTypes.AccessControlList? = nil,
            blockPublicAccess: GuardDutyClientTypes.BlockPublicAccess? = nil,
            bucketPolicy: GuardDutyClientTypes.BucketPolicy? = nil
        )
        {
            self.accessControlList = accessControlList
            self.blockPublicAccess = blockPublicAccess
            self.bucketPolicy = bucketPolicy
        }
    }

}

extension GuardDutyClientTypes {

    public enum DataSourceStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [DataSourceStatus] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GuardDutyClientTypes {
    /// Contains information on the status of CloudTrail as a data source for the detector.
    public struct CloudTrailConfigurationResult {
        /// Describes whether CloudTrail is enabled as a data source for the detector.
        /// This member is required.
        public var status: GuardDutyClientTypes.DataSourceStatus?

        public init(
            status: GuardDutyClientTypes.DataSourceStatus? = nil
        )
        {
            self.status = status
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about the condition.
    public struct Condition {
        /// Represents the equal condition to be applied to a single field when querying for findings.
        @available(*, deprecated)
        public var eq: [Swift.String]?
        /// Represents an equal condition to be applied to a single field when querying for findings.
        public var equals: [Swift.String]?
        /// Represents a greater than condition to be applied to a single field when querying for findings.
        public var greaterThan: Swift.Int?
        /// Represents a greater than or equal condition to be applied to a single field when querying for findings.
        public var greaterThanOrEqual: Swift.Int?
        /// Represents a greater than condition to be applied to a single field when querying for findings.
        @available(*, deprecated)
        public var gt: Swift.Int?
        /// Represents a greater than or equal condition to be applied to a single field when querying for findings.
        @available(*, deprecated)
        public var gte: Swift.Int?
        /// Represents a less than condition to be applied to a single field when querying for findings.
        public var lessThan: Swift.Int?
        /// Represents a less than or equal condition to be applied to a single field when querying for findings.
        public var lessThanOrEqual: Swift.Int?
        /// Represents a less than condition to be applied to a single field when querying for findings.
        @available(*, deprecated)
        public var lt: Swift.Int?
        /// Represents a less than or equal condition to be applied to a single field when querying for findings.
        @available(*, deprecated)
        public var lte: Swift.Int?
        /// Represents the not equal condition to be applied to a single field when querying for findings.
        @available(*, deprecated)
        public var neq: [Swift.String]?
        /// Represents a not equal condition to be applied to a single field when querying for findings.
        public var notEquals: [Swift.String]?

        public init(
            eq: [Swift.String]? = nil,
            equals: [Swift.String]? = nil,
            greaterThan: Swift.Int? = nil,
            greaterThanOrEqual: Swift.Int? = nil,
            gt: Swift.Int? = nil,
            gte: Swift.Int? = nil,
            lessThan: Swift.Int? = nil,
            lessThanOrEqual: Swift.Int? = nil,
            lt: Swift.Int? = nil,
            lte: Swift.Int? = nil,
            neq: [Swift.String]? = nil,
            notEquals: [Swift.String]? = nil
        )
        {
            self.eq = eq
            self.equals = equals
            self.greaterThan = greaterThan
            self.greaterThanOrEqual = greaterThanOrEqual
            self.gt = gt
            self.gte = gte
            self.lessThan = lessThan
            self.lessThanOrEqual = lessThanOrEqual
            self.lt = lt
            self.lte = lte
            self.neq = neq
            self.notEquals = notEquals
        }
    }

}

/// A request conflict exception object.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The error message.
        public internal(set) var message: Swift.String? = nil
        /// The error type.
        public internal(set) var type: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        type: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.type = type
    }
}

extension GuardDutyClientTypes {
    /// Container security context.
    public struct SecurityContext {
        /// Whether or not a container or a Kubernetes pod is allowed to gain more privileges than its parent process.
        public var allowPrivilegeEscalation: Swift.Bool?
        /// Whether the container is privileged.
        public var privileged: Swift.Bool?

        public init(
            allowPrivilegeEscalation: Swift.Bool? = nil,
            privileged: Swift.Bool? = nil
        )
        {
            self.allowPrivilegeEscalation = allowPrivilegeEscalation
            self.privileged = privileged
        }
    }

}

extension GuardDutyClientTypes {
    /// Container volume mount.
    public struct VolumeMount {
        /// Volume mount path.
        public var mountPath: Swift.String?
        /// Volume mount name.
        public var name: Swift.String?

        public init(
            mountPath: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.mountPath = mountPath
            self.name = name
        }
    }

}

extension GuardDutyClientTypes {
    /// Details of a container.
    public struct Container {
        /// The container runtime (such as, Docker or containerd) used to run the container.
        public var containerRuntime: Swift.String?
        /// Container ID.
        public var id: Swift.String?
        /// Container image.
        public var image: Swift.String?
        /// Part of the image name before the last slash. For example, imagePrefix for public.ecr.aws/amazonlinux/amazonlinux:latest would be public.ecr.aws/amazonlinux. If the image name is relative and does not have a slash, this field is empty.
        public var imagePrefix: Swift.String?
        /// Container name.
        public var name: Swift.String?
        /// Container security context.
        public var securityContext: GuardDutyClientTypes.SecurityContext?
        /// Container volume mounts.
        public var volumeMounts: [GuardDutyClientTypes.VolumeMount]?

        public init(
            containerRuntime: Swift.String? = nil,
            id: Swift.String? = nil,
            image: Swift.String? = nil,
            imagePrefix: Swift.String? = nil,
            name: Swift.String? = nil,
            securityContext: GuardDutyClientTypes.SecurityContext? = nil,
            volumeMounts: [GuardDutyClientTypes.VolumeMount]? = nil
        )
        {
            self.containerRuntime = containerRuntime
            self.id = id
            self.image = image
            self.imagePrefix = imagePrefix
            self.name = name
            self.securityContext = securityContext
            self.volumeMounts = volumeMounts
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about the Amazon EC2 instance that is running the Amazon ECS container.
    public struct ContainerInstanceDetails {
        /// Represents total number of nodes in the Amazon ECS cluster.
        public var compatibleContainerInstances: Swift.Int?
        /// Represents the nodes in the Amazon ECS cluster that has a HEALTHY coverage status.
        public var coveredContainerInstances: Swift.Int?

        public init(
            compatibleContainerInstances: Swift.Int? = nil,
            coveredContainerInstances: Swift.Int? = nil
        )
        {
            self.compatibleContainerInstances = compatibleContainerInstances
            self.coveredContainerInstances = coveredContainerInstances
        }
    }

}

extension GuardDutyClientTypes {

    public enum CoverageStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case healthy
        case unhealthy
        case sdkUnknown(Swift.String)

        public static var allCases: [CoverageStatus] {
            return [
                .healthy,
                .unhealthy
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .healthy: return "HEALTHY"
            case .unhealthy: return "UNHEALTHY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GuardDutyClientTypes {

    public enum ResourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ec2
        case ecs
        case eks
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceType] {
            return [
                .ec2,
                .ecs,
                .eks
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ec2: return "EC2"
            case .ecs: return "ECS"
            case .eks: return "EKS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GuardDutyClientTypes {

    public enum ManagementType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case autoManaged
        case disabled
        case manual
        case sdkUnknown(Swift.String)

        public static var allCases: [ManagementType] {
            return [
                .autoManaged,
                .disabled,
                .manual
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .autoManaged: return "AUTO_MANAGED"
            case .disabled: return "DISABLED"
            case .manual: return "MANUAL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GuardDutyClientTypes {
    /// Contains information about the Amazon EC2 instance runtime coverage details.
    public struct CoverageEc2InstanceDetails {
        /// Information about the installed security agent.
        public var agentDetails: GuardDutyClientTypes.AgentDetails?
        /// The cluster ARN of the Amazon ECS cluster running on the Amazon EC2 instance.
        public var clusterArn: Swift.String?
        /// The Amazon EC2 instance ID.
        public var instanceId: Swift.String?
        /// The instance type of the Amazon EC2 instance.
        public var instanceType: Swift.String?
        /// Indicates how the GuardDuty security agent is managed for this resource.
        ///
        /// * AUTO_MANAGED indicates that GuardDuty deploys and manages updates for this resource.
        ///
        /// * MANUAL indicates that you are responsible to deploy, update, and manage the GuardDuty security agent updates for this resource.
        ///
        ///
        /// The DISABLED status doesn't apply to Amazon EC2 instances and Amazon EKS clusters.
        public var managementType: GuardDutyClientTypes.ManagementType?

        public init(
            agentDetails: GuardDutyClientTypes.AgentDetails? = nil,
            clusterArn: Swift.String? = nil,
            instanceId: Swift.String? = nil,
            instanceType: Swift.String? = nil,
            managementType: GuardDutyClientTypes.ManagementType? = nil
        )
        {
            self.agentDetails = agentDetails
            self.clusterArn = clusterArn
            self.instanceId = instanceId
            self.instanceType = instanceType
            self.managementType = managementType
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about Amazon Web Services Fargate details associated with an Amazon ECS cluster.
    public struct FargateDetails {
        /// Runtime coverage issues identified for the resource running on Amazon Web Services Fargate.
        public var issues: [Swift.String]?
        /// Indicates how the GuardDuty security agent is managed for this resource.
        ///
        /// * AUTO_MANAGED indicates that GuardDuty deploys and manages updates for this resource.
        ///
        /// * DISABLED indicates that the deployment of the GuardDuty security agent is disabled for this resource.
        ///
        ///
        /// The MANUAL status doesn't apply to the Amazon Web Services Fargate (Amazon ECS only) woprkloads.
        public var managementType: GuardDutyClientTypes.ManagementType?

        public init(
            issues: [Swift.String]? = nil,
            managementType: GuardDutyClientTypes.ManagementType? = nil
        )
        {
            self.issues = issues
            self.managementType = managementType
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about Amazon ECS cluster runtime coverage details.
    public struct CoverageEcsClusterDetails {
        /// The name of the Amazon ECS cluster.
        public var clusterName: Swift.String?
        /// Information about the Amazon ECS container running on Amazon EC2 instance.
        public var containerInstanceDetails: GuardDutyClientTypes.ContainerInstanceDetails?
        /// Information about the Fargate details associated with the Amazon ECS cluster.
        public var fargateDetails: GuardDutyClientTypes.FargateDetails?

        public init(
            clusterName: Swift.String? = nil,
            containerInstanceDetails: GuardDutyClientTypes.ContainerInstanceDetails? = nil,
            fargateDetails: GuardDutyClientTypes.FargateDetails? = nil
        )
        {
            self.clusterName = clusterName
            self.containerInstanceDetails = containerInstanceDetails
            self.fargateDetails = fargateDetails
        }
    }

}

extension GuardDutyClientTypes {
    /// Information about the EKS cluster that has a coverage status.
    public struct CoverageEksClusterDetails {
        /// Information about the installed EKS add-on.
        public var addonDetails: GuardDutyClientTypes.AddonDetails?
        /// Name of the EKS cluster.
        public var clusterName: Swift.String?
        /// Represents all the nodes within the EKS cluster in your account.
        public var compatibleNodes: Swift.Int?
        /// Represents the nodes within the EKS cluster that have a HEALTHY coverage status.
        public var coveredNodes: Swift.Int?
        /// Indicates how the Amazon EKS add-on GuardDuty agent is managed for this EKS cluster. AUTO_MANAGED indicates GuardDuty deploys and manages updates for this resource. MANUAL indicates that you are responsible to deploy, update, and manage the Amazon EKS add-on GuardDuty agent for this resource.
        public var managementType: GuardDutyClientTypes.ManagementType?

        public init(
            addonDetails: GuardDutyClientTypes.AddonDetails? = nil,
            clusterName: Swift.String? = nil,
            compatibleNodes: Swift.Int? = nil,
            coveredNodes: Swift.Int? = nil,
            managementType: GuardDutyClientTypes.ManagementType? = nil
        )
        {
            self.addonDetails = addonDetails
            self.clusterName = clusterName
            self.compatibleNodes = compatibleNodes
            self.coveredNodes = coveredNodes
            self.managementType = managementType
        }
    }

}

extension GuardDutyClientTypes {
    /// Represents a condition that when matched will be added to the response of the operation.
    public struct CoverageFilterCondition {
        /// Represents an equal condition that is applied to a single field while retrieving the coverage details.
        public var equals: [Swift.String]?
        /// Represents a not equal condition that is applied to a single field while retrieving the coverage details.
        public var notEquals: [Swift.String]?

        public init(
            equals: [Swift.String]? = nil,
            notEquals: [Swift.String]? = nil
        )
        {
            self.equals = equals
            self.notEquals = notEquals
        }
    }

}

extension GuardDutyClientTypes {

    public enum CoverageFilterCriterionKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accountId
        case addonVersion
        case agentVersion
        case clusterArn
        case clusterName
        case coverageStatus
        case ecsClusterName
        case eksClusterName
        case instanceId
        case managementType
        case resourceType
        case sdkUnknown(Swift.String)

        public static var allCases: [CoverageFilterCriterionKey] {
            return [
                .accountId,
                .addonVersion,
                .agentVersion,
                .clusterArn,
                .clusterName,
                .coverageStatus,
                .ecsClusterName,
                .eksClusterName,
                .instanceId,
                .managementType,
                .resourceType
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accountId: return "ACCOUNT_ID"
            case .addonVersion: return "ADDON_VERSION"
            case .agentVersion: return "AGENT_VERSION"
            case .clusterArn: return "CLUSTER_ARN"
            case .clusterName: return "CLUSTER_NAME"
            case .coverageStatus: return "COVERAGE_STATUS"
            case .ecsClusterName: return "ECS_CLUSTER_NAME"
            case .eksClusterName: return "EKS_CLUSTER_NAME"
            case .instanceId: return "INSTANCE_ID"
            case .managementType: return "MANAGEMENT_TYPE"
            case .resourceType: return "RESOURCE_TYPE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GuardDutyClientTypes {
    /// Represents a condition that when matched will be added to the response of the operation.
    public struct CoverageFilterCriterion {
        /// An enum value representing possible filter fields. Replace the enum value CLUSTER_NAME with EKS_CLUSTER_NAME. CLUSTER_NAME has been deprecated.
        public var criterionKey: GuardDutyClientTypes.CoverageFilterCriterionKey?
        /// Contains information about the condition.
        public var filterCondition: GuardDutyClientTypes.CoverageFilterCondition?

        public init(
            criterionKey: GuardDutyClientTypes.CoverageFilterCriterionKey? = nil,
            filterCondition: GuardDutyClientTypes.CoverageFilterCondition? = nil
        )
        {
            self.criterionKey = criterionKey
            self.filterCondition = filterCondition
        }
    }

}

extension GuardDutyClientTypes {
    /// Represents the criteria used in the filter.
    public struct CoverageFilterCriteria {
        /// Represents a condition that when matched will be added to the response of the operation.
        public var filterCriterion: [GuardDutyClientTypes.CoverageFilterCriterion]?

        public init(
            filterCriterion: [GuardDutyClientTypes.CoverageFilterCriterion]? = nil
        )
        {
            self.filterCriterion = filterCriterion
        }
    }

}

extension GuardDutyClientTypes {
    /// Information about the resource for each individual EKS cluster.
    public struct CoverageResourceDetails {
        /// Information about the Amazon EC2 instance assessed for runtime coverage.
        public var ec2InstanceDetails: GuardDutyClientTypes.CoverageEc2InstanceDetails?
        /// Information about the Amazon ECS cluster that is assessed for runtime coverage.
        public var ecsClusterDetails: GuardDutyClientTypes.CoverageEcsClusterDetails?
        /// EKS cluster details involved in the coverage statistics.
        public var eksClusterDetails: GuardDutyClientTypes.CoverageEksClusterDetails?
        /// The type of Amazon Web Services resource.
        public var resourceType: GuardDutyClientTypes.ResourceType?

        public init(
            ec2InstanceDetails: GuardDutyClientTypes.CoverageEc2InstanceDetails? = nil,
            ecsClusterDetails: GuardDutyClientTypes.CoverageEcsClusterDetails? = nil,
            eksClusterDetails: GuardDutyClientTypes.CoverageEksClusterDetails? = nil,
            resourceType: GuardDutyClientTypes.ResourceType? = nil
        )
        {
            self.ec2InstanceDetails = ec2InstanceDetails
            self.ecsClusterDetails = ecsClusterDetails
            self.eksClusterDetails = eksClusterDetails
            self.resourceType = resourceType
        }
    }

}

extension GuardDutyClientTypes {
    /// Information about the resource of the GuardDuty account.
    public struct CoverageResource {
        /// The unique ID of the Amazon Web Services account.
        public var accountId: Swift.String?
        /// Represents the status of the EKS cluster coverage.
        public var coverageStatus: GuardDutyClientTypes.CoverageStatus?
        /// The unique ID of the GuardDuty detector associated with the resource.
        public var detectorId: Swift.String?
        /// Represents the reason why a coverage status was UNHEALTHY for the EKS cluster.
        public var issue: Swift.String?
        /// Information about the resource for which the coverage statistics are retrieved.
        public var resourceDetails: GuardDutyClientTypes.CoverageResourceDetails?
        /// The unique ID of the resource.
        public var resourceId: Swift.String?
        /// The timestamp at which the coverage details for the resource were last updated. This is in UTC format.
        public var updatedAt: Foundation.Date?

        public init(
            accountId: Swift.String? = nil,
            coverageStatus: GuardDutyClientTypes.CoverageStatus? = nil,
            detectorId: Swift.String? = nil,
            issue: Swift.String? = nil,
            resourceDetails: GuardDutyClientTypes.CoverageResourceDetails? = nil,
            resourceId: Swift.String? = nil,
            updatedAt: Foundation.Date? = nil
        )
        {
            self.accountId = accountId
            self.coverageStatus = coverageStatus
            self.detectorId = detectorId
            self.issue = issue
            self.resourceDetails = resourceDetails
            self.resourceId = resourceId
            self.updatedAt = updatedAt
        }
    }

}

extension GuardDutyClientTypes {

    public enum CoverageSortKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accountId
        case addonVersion
        case clusterName
        case coverageStatus
        case ecsClusterName
        case eksClusterName
        case instanceId
        case issue
        case updatedAt
        case sdkUnknown(Swift.String)

        public static var allCases: [CoverageSortKey] {
            return [
                .accountId,
                .addonVersion,
                .clusterName,
                .coverageStatus,
                .ecsClusterName,
                .eksClusterName,
                .instanceId,
                .issue,
                .updatedAt
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accountId: return "ACCOUNT_ID"
            case .addonVersion: return "ADDON_VERSION"
            case .clusterName: return "CLUSTER_NAME"
            case .coverageStatus: return "COVERAGE_STATUS"
            case .ecsClusterName: return "ECS_CLUSTER_NAME"
            case .eksClusterName: return "EKS_CLUSTER_NAME"
            case .instanceId: return "INSTANCE_ID"
            case .issue: return "ISSUE"
            case .updatedAt: return "UPDATED_AT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GuardDutyClientTypes {

    public enum OrderBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case asc
        case desc
        case sdkUnknown(Swift.String)

        public static var allCases: [OrderBy] {
            return [
                .asc,
                .desc
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .asc: return "ASC"
            case .desc: return "DESC"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GuardDutyClientTypes {
    /// Information about the sorting criteria used in the coverage statistics.
    public struct CoverageSortCriteria {
        /// Represents the field name used to sort the coverage details. Replace the enum value CLUSTER_NAME with EKS_CLUSTER_NAME. CLUSTER_NAME has been deprecated.
        public var attributeName: GuardDutyClientTypes.CoverageSortKey?
        /// The order in which the sorted findings are to be displayed.
        public var orderBy: GuardDutyClientTypes.OrderBy?

        public init(
            attributeName: GuardDutyClientTypes.CoverageSortKey? = nil,
            orderBy: GuardDutyClientTypes.OrderBy? = nil
        )
        {
            self.attributeName = attributeName
            self.orderBy = orderBy
        }
    }

}

extension GuardDutyClientTypes {
    /// Information about the coverage statistics for a resource.
    public struct CoverageStatistics {
        /// Represents coverage statistics for EKS clusters aggregated by coverage status.
        public var countByCoverageStatus: [Swift.String: Swift.Int]?
        /// Represents coverage statistics for EKS clusters aggregated by resource type.
        public var countByResourceType: [Swift.String: Swift.Int]?

        public init(
            countByCoverageStatus: [Swift.String: Swift.Int]? = nil,
            countByResourceType: [Swift.String: Swift.Int]? = nil
        )
        {
            self.countByCoverageStatus = countByCoverageStatus
            self.countByResourceType = countByResourceType
        }
    }

}

extension GuardDutyClientTypes {

    public enum CoverageStatisticsType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case countByCoverageStatus
        case countByResourceType
        case sdkUnknown(Swift.String)

        public static var allCases: [CoverageStatisticsType] {
            return [
                .countByCoverageStatus,
                .countByResourceType
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .countByCoverageStatus: return "COUNT_BY_COVERAGE_STATUS"
            case .countByResourceType: return "COUNT_BY_RESOURCE_TYPE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GuardDutyClientTypes {
    /// Describes whether Kubernetes audit logs are enabled as a data source.
    public struct KubernetesAuditLogsConfiguration {
        /// The status of Kubernetes audit logs as a data source.
        /// This member is required.
        public var enable: Swift.Bool?

        public init(
            enable: Swift.Bool? = nil
        )
        {
            self.enable = enable
        }
    }

}

extension GuardDutyClientTypes {
    /// Describes whether any Kubernetes data sources are enabled.
    public struct KubernetesConfiguration {
        /// The status of Kubernetes audit logs as a data source.
        /// This member is required.
        public var auditLogs: GuardDutyClientTypes.KubernetesAuditLogsConfiguration?

        public init(
            auditLogs: GuardDutyClientTypes.KubernetesAuditLogsConfiguration? = nil
        )
        {
            self.auditLogs = auditLogs
        }
    }

}

extension GuardDutyClientTypes {
    /// Describes whether Malware Protection for EC2 instances with findings will be enabled as a data source.
    public struct ScanEc2InstanceWithFindings {
        /// Describes the configuration for scanning EBS volumes as data source.
        public var ebsVolumes: Swift.Bool?

        public init(
            ebsVolumes: Swift.Bool? = nil
        )
        {
            self.ebsVolumes = ebsVolumes
        }
    }

}

extension GuardDutyClientTypes {
    /// Describes whether Malware Protection will be enabled as a data source.
    public struct MalwareProtectionConfiguration {
        /// Describes the configuration of Malware Protection for EC2 instances with findings.
        public var scanEc2InstanceWithFindings: GuardDutyClientTypes.ScanEc2InstanceWithFindings?

        public init(
            scanEc2InstanceWithFindings: GuardDutyClientTypes.ScanEc2InstanceWithFindings? = nil
        )
        {
            self.scanEc2InstanceWithFindings = scanEc2InstanceWithFindings
        }
    }

}

extension GuardDutyClientTypes {
    /// Describes whether S3 data event logs will be enabled as a data source.
    public struct S3LogsConfiguration {
        /// The status of S3 data event logs as a data source.
        /// This member is required.
        public var enable: Swift.Bool?

        public init(
            enable: Swift.Bool? = nil
        )
        {
            self.enable = enable
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about which data sources are enabled.
    public struct DataSourceConfigurations {
        /// Describes whether any Kubernetes logs are enabled as data sources.
        public var kubernetes: GuardDutyClientTypes.KubernetesConfiguration?
        /// Describes whether Malware Protection is enabled as a data source.
        public var malwareProtection: GuardDutyClientTypes.MalwareProtectionConfiguration?
        /// Describes whether S3 data event logs are enabled as a data source.
        public var s3Logs: GuardDutyClientTypes.S3LogsConfiguration?

        public init(
            kubernetes: GuardDutyClientTypes.KubernetesConfiguration? = nil,
            malwareProtection: GuardDutyClientTypes.MalwareProtectionConfiguration? = nil,
            s3Logs: GuardDutyClientTypes.S3LogsConfiguration? = nil
        )
        {
            self.kubernetes = kubernetes
            self.malwareProtection = malwareProtection
            self.s3Logs = s3Logs
        }
    }

}

extension GuardDutyClientTypes {

    public enum FeatureAdditionalConfiguration: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ec2AgentManagement
        case ecsFargateAgentManagement
        case eksAddonManagement
        case sdkUnknown(Swift.String)

        public static var allCases: [FeatureAdditionalConfiguration] {
            return [
                .ec2AgentManagement,
                .ecsFargateAgentManagement,
                .eksAddonManagement
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ec2AgentManagement: return "EC2_AGENT_MANAGEMENT"
            case .ecsFargateAgentManagement: return "ECS_FARGATE_AGENT_MANAGEMENT"
            case .eksAddonManagement: return "EKS_ADDON_MANAGEMENT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GuardDutyClientTypes {

    public enum FeatureStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [FeatureStatus] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GuardDutyClientTypes {
    /// Information about the additional configuration for a feature in your GuardDuty account.
    public struct DetectorAdditionalConfiguration {
        /// Name of the additional configuration.
        public var name: GuardDutyClientTypes.FeatureAdditionalConfiguration?
        /// Status of the additional configuration.
        public var status: GuardDutyClientTypes.FeatureStatus?

        public init(
            name: GuardDutyClientTypes.FeatureAdditionalConfiguration? = nil,
            status: GuardDutyClientTypes.FeatureStatus? = nil
        )
        {
            self.name = name
            self.status = status
        }
    }

}

extension GuardDutyClientTypes {

    public enum DetectorFeature: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ebsMalwareProtection
        case eksAuditLogs
        case eksRuntimeMonitoring
        case lambdaNetworkLogs
        case rdsLoginEvents
        case runtimeMonitoring
        case s3DataEvents
        case sdkUnknown(Swift.String)

        public static var allCases: [DetectorFeature] {
            return [
                .ebsMalwareProtection,
                .eksAuditLogs,
                .eksRuntimeMonitoring,
                .lambdaNetworkLogs,
                .rdsLoginEvents,
                .runtimeMonitoring,
                .s3DataEvents
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ebsMalwareProtection: return "EBS_MALWARE_PROTECTION"
            case .eksAuditLogs: return "EKS_AUDIT_LOGS"
            case .eksRuntimeMonitoring: return "EKS_RUNTIME_MONITORING"
            case .lambdaNetworkLogs: return "LAMBDA_NETWORK_LOGS"
            case .rdsLoginEvents: return "RDS_LOGIN_EVENTS"
            case .runtimeMonitoring: return "RUNTIME_MONITORING"
            case .s3DataEvents: return "S3_DATA_EVENTS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GuardDutyClientTypes {
    /// Contains information about a GuardDuty feature. Specifying both EKS Runtime Monitoring (EKS_RUNTIME_MONITORING) and Runtime Monitoring (RUNTIME_MONITORING) will cause an error. You can add only one of these two features because Runtime Monitoring already includes the threat detection for Amazon EKS resources. For more information, see [Runtime Monitoring](https://docs.aws.amazon.com/guardduty/latest/ug/runtime-monitoring.html).
    public struct DetectorFeatureConfiguration {
        /// Additional configuration for a resource.
        public var additionalConfiguration: [GuardDutyClientTypes.DetectorAdditionalConfiguration]?
        /// The name of the feature.
        public var name: GuardDutyClientTypes.DetectorFeature?
        /// The status of the feature.
        public var status: GuardDutyClientTypes.FeatureStatus?

        public init(
            additionalConfiguration: [GuardDutyClientTypes.DetectorAdditionalConfiguration]? = nil,
            name: GuardDutyClientTypes.DetectorFeature? = nil,
            status: GuardDutyClientTypes.FeatureStatus? = nil
        )
        {
            self.additionalConfiguration = additionalConfiguration
            self.name = name
            self.status = status
        }
    }

}

extension GuardDutyClientTypes {

    public enum FindingPublishingFrequency: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case fifteenMinutes
        case oneHour
        case sixHours
        case sdkUnknown(Swift.String)

        public static var allCases: [FindingPublishingFrequency] {
            return [
                .fifteenMinutes,
                .oneHour,
                .sixHours
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .fifteenMinutes: return "FIFTEEN_MINUTES"
            case .oneHour: return "ONE_HOUR"
            case .sixHours: return "SIX_HOURS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateDetectorInput {
    /// The idempotency token for the create request.
    public var clientToken: Swift.String?
    /// Describes which data sources will be enabled for the detector. There might be regional differences because some data sources might not be available in all the Amazon Web Services Regions where GuardDuty is presently supported. For more information, see [Regions and endpoints](https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_regions.html).
    @available(*, deprecated, message: "This parameter is deprecated, use Features instead")
    public var dataSources: GuardDutyClientTypes.DataSourceConfigurations?
    /// A Boolean value that specifies whether the detector is to be enabled.
    /// This member is required.
    public var enable: Swift.Bool?
    /// A list of features that will be configured for the detector.
    public var features: [GuardDutyClientTypes.DetectorFeatureConfiguration]?
    /// A value that specifies how frequently updated findings are exported.
    public var findingPublishingFrequency: GuardDutyClientTypes.FindingPublishingFrequency?
    /// The tags to be added to a new detector resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        clientToken: Swift.String? = nil,
        dataSources: GuardDutyClientTypes.DataSourceConfigurations? = nil,
        enable: Swift.Bool? = nil,
        features: [GuardDutyClientTypes.DetectorFeatureConfiguration]? = nil,
        findingPublishingFrequency: GuardDutyClientTypes.FindingPublishingFrequency? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.clientToken = clientToken
        self.dataSources = dataSources
        self.enable = enable
        self.features = features
        self.findingPublishingFrequency = findingPublishingFrequency
        self.tags = tags
    }
}

extension GuardDutyClientTypes {
    /// Describes the configuration of scanning EBS volumes as a data source.
    public struct EbsVolumesResult {
        /// Specifies the reason why scanning EBS volumes (Malware Protection) was not enabled as a data source.
        public var reason: Swift.String?
        /// Describes whether scanning EBS volumes is enabled as a data source.
        public var status: GuardDutyClientTypes.DataSourceStatus?

        public init(
            reason: Swift.String? = nil,
            status: GuardDutyClientTypes.DataSourceStatus? = nil
        )
        {
            self.reason = reason
            self.status = status
        }
    }

}

extension GuardDutyClientTypes {
    /// An object that contains information on the status of whether Malware Protection for EC2 instances with findings will be enabled as a data source.
    public struct ScanEc2InstanceWithFindingsResult {
        /// Describes the configuration of scanning EBS volumes as a data source.
        public var ebsVolumes: GuardDutyClientTypes.EbsVolumesResult?

        public init(
            ebsVolumes: GuardDutyClientTypes.EbsVolumesResult? = nil
        )
        {
            self.ebsVolumes = ebsVolumes
        }
    }

}

extension GuardDutyClientTypes {
    /// An object that contains information on the status of all Malware Protection data sources.
    public struct MalwareProtectionConfigurationResult {
        /// Describes the configuration of Malware Protection for EC2 instances with findings.
        public var scanEc2InstanceWithFindings: GuardDutyClientTypes.ScanEc2InstanceWithFindingsResult?
        /// The GuardDuty Malware Protection service role.
        public var serviceRole: Swift.String?

        public init(
            scanEc2InstanceWithFindings: GuardDutyClientTypes.ScanEc2InstanceWithFindingsResult? = nil,
            serviceRole: Swift.String? = nil
        )
        {
            self.scanEc2InstanceWithFindings = scanEc2InstanceWithFindings
            self.serviceRole = serviceRole
        }
    }

}

extension GuardDutyClientTypes {
    /// Specifies the names of the data sources that couldn't be enabled.
    public struct UnprocessedDataSourcesResult {
        /// An object that contains information on the status of all Malware Protection data sources.
        public var malwareProtection: GuardDutyClientTypes.MalwareProtectionConfigurationResult?

        public init(
            malwareProtection: GuardDutyClientTypes.MalwareProtectionConfigurationResult? = nil
        )
        {
            self.malwareProtection = malwareProtection
        }
    }

}

public struct CreateDetectorOutput {
    /// The unique ID of the created detector.
    public var detectorId: Swift.String?
    /// Specifies the data sources that couldn't be enabled when GuardDuty was enabled for the first time.
    public var unprocessedDataSources: GuardDutyClientTypes.UnprocessedDataSourcesResult?

    public init(
        detectorId: Swift.String? = nil,
        unprocessedDataSources: GuardDutyClientTypes.UnprocessedDataSourcesResult? = nil
    )
    {
        self.detectorId = detectorId
        self.unprocessedDataSources = unprocessedDataSources
    }
}

extension GuardDutyClientTypes {

    public enum FilterAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case archive
        case noop
        case sdkUnknown(Swift.String)

        public static var allCases: [FilterAction] {
            return [
                .archive,
                .noop
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .archive: return "ARCHIVE"
            case .noop: return "NOOP"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GuardDutyClientTypes {
    /// Contains information about the criteria used for querying findings.
    public struct FindingCriteria {
        /// Represents a map of finding properties that match specified conditions and values when querying findings.
        public var criterion: [Swift.String: GuardDutyClientTypes.Condition]?

        public init(
            criterion: [Swift.String: GuardDutyClientTypes.Condition]? = nil
        )
        {
            self.criterion = criterion
        }
    }

}

public struct CreateFilterInput {
    /// Specifies the action that is to be applied to the findings that match the filter.
    public var action: GuardDutyClientTypes.FilterAction?
    /// The idempotency token for the create request.
    public var clientToken: Swift.String?
    /// The description of the filter. Valid characters include alphanumeric characters, and special characters such as hyphen, period, colon, underscore, parentheses ({ }, [ ], and ( )), forward slash, horizontal tab, vertical tab, newline, form feed, return, and whitespace.
    public var description: Swift.String?
    /// The detector ID associated with the GuardDuty account for which you want to create a filter.
    /// This member is required.
    public var detectorId: Swift.String?
    /// Represents the criteria to be used in the filter for querying findings. You can only use the following attributes to query findings:
    ///
    /// * accountId
    ///
    /// * id
    ///
    /// * region
    ///
    /// * severity To filter on the basis of severity, the API and CLI use the following input list for the [FindingCriteria](https://docs.aws.amazon.com/guardduty/latest/APIReference/API_FindingCriteria.html) condition:
    ///
    /// * Low: ["1", "2", "3"]
    ///
    /// * Medium: ["4", "5", "6"]
    ///
    /// * High: ["7", "8", "9"]
    ///
    ///
    /// For more information, see [Severity levels for GuardDuty findings](https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_findings.html#guardduty_findings-severity).
    ///
    /// * type
    ///
    /// * updatedAt Type: ISO 8601 string format: YYYY-MM-DDTHH:MM:SS.SSSZ or YYYY-MM-DDTHH:MM:SSZ depending on whether the value contains milliseconds.
    ///
    /// * resource.accessKeyDetails.accessKeyId
    ///
    /// * resource.accessKeyDetails.principalId
    ///
    /// * resource.accessKeyDetails.userName
    ///
    /// * resource.accessKeyDetails.userType
    ///
    /// * resource.instanceDetails.iamInstanceProfile.id
    ///
    /// * resource.instanceDetails.imageId
    ///
    /// * resource.instanceDetails.instanceId
    ///
    /// * resource.instanceDetails.tags.key
    ///
    /// * resource.instanceDetails.tags.value
    ///
    /// * resource.instanceDetails.networkInterfaces.ipv6Addresses
    ///
    /// * resource.instanceDetails.networkInterfaces.privateIpAddresses.privateIpAddress
    ///
    /// * resource.instanceDetails.networkInterfaces.publicDnsName
    ///
    /// * resource.instanceDetails.networkInterfaces.publicIp
    ///
    /// * resource.instanceDetails.networkInterfaces.securityGroups.groupId
    ///
    /// * resource.instanceDetails.networkInterfaces.securityGroups.groupName
    ///
    /// * resource.instanceDetails.networkInterfaces.subnetId
    ///
    /// * resource.instanceDetails.networkInterfaces.vpcId
    ///
    /// * resource.instanceDetails.outpostArn
    ///
    /// * resource.resourceType
    ///
    /// * resource.s3BucketDetails.publicAccess.effectivePermissions
    ///
    /// * resource.s3BucketDetails.name
    ///
    /// * resource.s3BucketDetails.tags.key
    ///
    /// * resource.s3BucketDetails.tags.value
    ///
    /// * resource.s3BucketDetails.type
    ///
    /// * service.action.actionType
    ///
    /// * service.action.awsApiCallAction.api
    ///
    /// * service.action.awsApiCallAction.callerType
    ///
    /// * service.action.awsApiCallAction.errorCode
    ///
    /// * service.action.awsApiCallAction.remoteIpDetails.city.cityName
    ///
    /// * service.action.awsApiCallAction.remoteIpDetails.country.countryName
    ///
    /// * service.action.awsApiCallAction.remoteIpDetails.ipAddressV4
    ///
    /// * service.action.awsApiCallAction.remoteIpDetails.ipAddressV6
    ///
    /// * service.action.awsApiCallAction.remoteIpDetails.organization.asn
    ///
    /// * service.action.awsApiCallAction.remoteIpDetails.organization.asnOrg
    ///
    /// * service.action.awsApiCallAction.serviceName
    ///
    /// * service.action.dnsRequestAction.domain
    ///
    /// * service.action.dnsRequestAction.domainWithSuffix
    ///
    /// * service.action.networkConnectionAction.blocked
    ///
    /// * service.action.networkConnectionAction.connectionDirection
    ///
    /// * service.action.networkConnectionAction.localPortDetails.port
    ///
    /// * service.action.networkConnectionAction.protocol
    ///
    /// * service.action.networkConnectionAction.remoteIpDetails.city.cityName
    ///
    /// * service.action.networkConnectionAction.remoteIpDetails.country.countryName
    ///
    /// * service.action.networkConnectionAction.remoteIpDetails.ipAddressV4
    ///
    /// * service.action.networkConnectionAction.remoteIpDetails.ipAddressV6
    ///
    /// * service.action.networkConnectionAction.remoteIpDetails.organization.asn
    ///
    /// * service.action.networkConnectionAction.remoteIpDetails.organization.asnOrg
    ///
    /// * service.action.networkConnectionAction.remotePortDetails.port
    ///
    /// * service.action.awsApiCallAction.remoteAccountDetails.affiliated
    ///
    /// * service.action.kubernetesApiCallAction.remoteIpDetails.ipAddressV4
    ///
    /// * service.action.kubernetesApiCallAction.remoteIpDetails.ipAddressV6
    ///
    /// * service.action.kubernetesApiCallAction.namespace
    ///
    /// * service.action.kubernetesApiCallAction.remoteIpDetails.organization.asn
    ///
    /// * service.action.kubernetesApiCallAction.requestUri
    ///
    /// * service.action.kubernetesApiCallAction.statusCode
    ///
    /// * service.action.networkConnectionAction.localIpDetails.ipAddressV4
    ///
    /// * service.action.networkConnectionAction.localIpDetails.ipAddressV6
    ///
    /// * service.action.networkConnectionAction.protocol
    ///
    /// * service.action.awsApiCallAction.serviceName
    ///
    /// * service.action.awsApiCallAction.remoteAccountDetails.accountId
    ///
    /// * service.additionalInfo.threatListName
    ///
    /// * service.resourceRole
    ///
    /// * resource.eksClusterDetails.name
    ///
    /// * resource.kubernetesDetails.kubernetesWorkloadDetails.name
    ///
    /// * resource.kubernetesDetails.kubernetesWorkloadDetails.namespace
    ///
    /// * resource.kubernetesDetails.kubernetesUserDetails.username
    ///
    /// * resource.kubernetesDetails.kubernetesWorkloadDetails.containers.image
    ///
    /// * resource.kubernetesDetails.kubernetesWorkloadDetails.containers.imagePrefix
    ///
    /// * service.ebsVolumeScanDetails.scanId
    ///
    /// * service.ebsVolumeScanDetails.scanDetections.threatDetectedByName.threatNames.name
    ///
    /// * service.ebsVolumeScanDetails.scanDetections.threatDetectedByName.threatNames.severity
    ///
    /// * service.ebsVolumeScanDetails.scanDetections.threatDetectedByName.threatNames.filePaths.hash
    ///
    /// * resource.ecsClusterDetails.name
    ///
    /// * resource.ecsClusterDetails.taskDetails.containers.image
    ///
    /// * resource.ecsClusterDetails.taskDetails.definitionArn
    ///
    /// * resource.containerDetails.image
    ///
    /// * resource.rdsDbInstanceDetails.dbInstanceIdentifier
    ///
    /// * resource.rdsDbInstanceDetails.dbClusterIdentifier
    ///
    /// * resource.rdsDbInstanceDetails.engine
    ///
    /// * resource.rdsDbUserDetails.user
    ///
    /// * resource.rdsDbInstanceDetails.tags.key
    ///
    /// * resource.rdsDbInstanceDetails.tags.value
    ///
    /// * service.runtimeDetails.process.executableSha256
    ///
    /// * service.runtimeDetails.process.name
    ///
    /// * service.runtimeDetails.process.name
    ///
    /// * resource.lambdaDetails.functionName
    ///
    /// * resource.lambdaDetails.functionArn
    ///
    /// * resource.lambdaDetails.tags.key
    ///
    /// * resource.lambdaDetails.tags.value
    /// This member is required.
    public var findingCriteria: GuardDutyClientTypes.FindingCriteria?
    /// The name of the filter. Valid characters include period (.), underscore (_), dash (-), and alphanumeric characters. A whitespace is considered to be an invalid character.
    /// This member is required.
    public var name: Swift.String?
    /// Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.
    public var rank: Swift.Int?
    /// The tags to be added to a new filter resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        action: GuardDutyClientTypes.FilterAction? = nil,
        clientToken: Swift.String? = nil,
        description: Swift.String? = nil,
        detectorId: Swift.String? = nil,
        findingCriteria: GuardDutyClientTypes.FindingCriteria? = nil,
        name: Swift.String? = nil,
        rank: Swift.Int? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.action = action
        self.clientToken = clientToken
        self.description = description
        self.detectorId = detectorId
        self.findingCriteria = findingCriteria
        self.name = name
        self.rank = rank
        self.tags = tags
    }
}

public struct CreateFilterOutput {
    /// The name of the successfully created filter.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

extension GuardDutyClientTypes {

    public enum IpSetFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case alienVault
        case fireEye
        case otxCsv
        case proofPoint
        case stix
        case txt
        case sdkUnknown(Swift.String)

        public static var allCases: [IpSetFormat] {
            return [
                .alienVault,
                .fireEye,
                .otxCsv,
                .proofPoint,
                .stix,
                .txt
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .alienVault: return "ALIEN_VAULT"
            case .fireEye: return "FIRE_EYE"
            case .otxCsv: return "OTX_CSV"
            case .proofPoint: return "PROOF_POINT"
            case .stix: return "STIX"
            case .txt: return "TXT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateIPSetInput {
    /// A Boolean value that indicates whether GuardDuty is to start using the uploaded IPSet.
    /// This member is required.
    public var activate: Swift.Bool?
    /// The idempotency token for the create request.
    public var clientToken: Swift.String?
    /// The unique ID of the detector of the GuardDuty account for which you want to create an IPSet.
    /// This member is required.
    public var detectorId: Swift.String?
    /// The format of the file that contains the IPSet.
    /// This member is required.
    public var format: GuardDutyClientTypes.IpSetFormat?
    /// The URI of the file that contains the IPSet.
    /// This member is required.
    public var location: Swift.String?
    /// The user-friendly name to identify the IPSet. Allowed characters are alphanumeric, whitespace, dash (-), and underscores (_).
    /// This member is required.
    public var name: Swift.String?
    /// The tags to be added to a new IP set resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        activate: Swift.Bool? = nil,
        clientToken: Swift.String? = nil,
        detectorId: Swift.String? = nil,
        format: GuardDutyClientTypes.IpSetFormat? = nil,
        location: Swift.String? = nil,
        name: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.activate = activate
        self.clientToken = clientToken
        self.detectorId = detectorId
        self.format = format
        self.location = location
        self.name = name
        self.tags = tags
    }
}

public struct CreateIPSetOutput {
    /// The ID of the IPSet resource.
    /// This member is required.
    public var ipSetId: Swift.String?

    public init(
        ipSetId: Swift.String? = nil
    )
    {
        self.ipSetId = ipSetId
    }
}

extension GuardDutyClientTypes {

    public enum MalwareProtectionPlanTaggingActionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [MalwareProtectionPlanTaggingActionStatus] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GuardDutyClientTypes {
    /// Information about adding tags to the scanned S3 object after the scan result.
    public struct MalwareProtectionPlanTaggingAction {
        /// Indicates whether or not the tags will added.
        public var status: GuardDutyClientTypes.MalwareProtectionPlanTaggingActionStatus?

        public init(
            status: GuardDutyClientTypes.MalwareProtectionPlanTaggingActionStatus? = nil
        )
        {
            self.status = status
        }
    }

}

extension GuardDutyClientTypes {
    /// Information about whether the tags will be added to the S3 object after scanning.
    public struct MalwareProtectionPlanActions {
        /// Indicates whether the scanned S3 object will have tags about the scan result.
        public var tagging: GuardDutyClientTypes.MalwareProtectionPlanTaggingAction?

        public init(
            tagging: GuardDutyClientTypes.MalwareProtectionPlanTaggingAction? = nil
        )
        {
            self.tagging = tagging
        }
    }

}

extension GuardDutyClientTypes {
    /// Information about the protected S3 bucket resource.
    public struct CreateS3BucketResource {
        /// Name of the S3 bucket.
        public var bucketName: Swift.String?
        /// Information about the specified object prefixes. The S3 object will be scanned only if it belongs to any of the specified object prefixes.
        public var objectPrefixes: [Swift.String]?

        public init(
            bucketName: Swift.String? = nil,
            objectPrefixes: [Swift.String]? = nil
        )
        {
            self.bucketName = bucketName
            self.objectPrefixes = objectPrefixes
        }
    }

}

extension GuardDutyClientTypes {
    /// Information about the protected resource that is associated with the created Malware Protection plan. Presently, S3Bucket is the only supported protected resource.
    public struct CreateProtectedResource {
        /// Information about the protected S3 bucket resource.
        public var s3Bucket: GuardDutyClientTypes.CreateS3BucketResource?

        public init(
            s3Bucket: GuardDutyClientTypes.CreateS3BucketResource? = nil
        )
        {
            self.s3Bucket = s3Bucket
        }
    }

}

public struct CreateMalwareProtectionPlanInput {
    /// Information about whether the tags will be added to the S3 object after scanning.
    public var actions: GuardDutyClientTypes.MalwareProtectionPlanActions?
    /// The idempotency token for the create request.
    public var clientToken: Swift.String?
    /// Information about the protected resource that is associated with the created Malware Protection plan. Presently, S3Bucket is the only supported protected resource.
    /// This member is required.
    public var protectedResource: GuardDutyClientTypes.CreateProtectedResource?
    /// Amazon Resource Name (ARN) of the IAM role that has the permissions to scan and add tags to the associated protected resource.
    /// This member is required.
    public var role: Swift.String?
    /// Tags added to the Malware Protection plan resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        actions: GuardDutyClientTypes.MalwareProtectionPlanActions? = nil,
        clientToken: Swift.String? = nil,
        protectedResource: GuardDutyClientTypes.CreateProtectedResource? = nil,
        role: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.actions = actions
        self.clientToken = clientToken
        self.protectedResource = protectedResource
        self.role = role
        self.tags = tags
    }
}

public struct CreateMalwareProtectionPlanOutput {
    /// A unique identifier associated with the Malware Protection plan resource.
    public var malwareProtectionPlanId: Swift.String?

    public init(
        malwareProtectionPlanId: Swift.String? = nil
    )
    {
        self.malwareProtectionPlanId = malwareProtectionPlanId
    }
}

public struct CreateMembersInput {
    /// A list of account ID and email address pairs of the accounts that you want to associate with the GuardDuty administrator account.
    /// This member is required.
    public var accountDetails: [GuardDutyClientTypes.AccountDetail]?
    /// The unique ID of the detector of the GuardDuty account for which you want to associate member accounts.
    /// This member is required.
    public var detectorId: Swift.String?

    public init(
        accountDetails: [GuardDutyClientTypes.AccountDetail]? = nil,
        detectorId: Swift.String? = nil
    )
    {
        self.accountDetails = accountDetails
        self.detectorId = detectorId
    }
}

extension GuardDutyClientTypes {
    /// Contains information about the accounts that weren't processed.
    public struct UnprocessedAccount {
        /// The Amazon Web Services account ID.
        /// This member is required.
        public var accountId: Swift.String?
        /// A reason why the account hasn't been processed.
        /// This member is required.
        public var result: Swift.String?

        public init(
            accountId: Swift.String? = nil,
            result: Swift.String? = nil
        )
        {
            self.accountId = accountId
            self.result = result
        }
    }

}

public struct CreateMembersOutput {
    /// A list of objects that include the accountIds of the unprocessed accounts and a result string that explains why each was unprocessed.
    /// This member is required.
    public var unprocessedAccounts: [GuardDutyClientTypes.UnprocessedAccount]?

    public init(
        unprocessedAccounts: [GuardDutyClientTypes.UnprocessedAccount]? = nil
    )
    {
        self.unprocessedAccounts = unprocessedAccounts
    }
}

extension GuardDutyClientTypes {
    /// Contains the Amazon Resource Name (ARN) of the resource to publish to, such as an S3 bucket, and the ARN of the KMS key to use to encrypt published findings.
    public struct DestinationProperties {
        /// The ARN of the resource to publish to. To specify an S3 bucket folder use the following format: arn:aws:s3:::DOC-EXAMPLE-BUCKET/myFolder/
        public var destinationArn: Swift.String?
        /// The ARN of the KMS key to use for encryption.
        public var kmsKeyArn: Swift.String?

        public init(
            destinationArn: Swift.String? = nil,
            kmsKeyArn: Swift.String? = nil
        )
        {
            self.destinationArn = destinationArn
            self.kmsKeyArn = kmsKeyArn
        }
    }

}

extension GuardDutyClientTypes {

    public enum DestinationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case s3
        case sdkUnknown(Swift.String)

        public static var allCases: [DestinationType] {
            return [
                .s3
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .s3: return "S3"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreatePublishingDestinationInput {
    /// The idempotency token for the request.
    public var clientToken: Swift.String?
    /// The properties of the publishing destination, including the ARNs for the destination and the KMS key used for encryption.
    /// This member is required.
    public var destinationProperties: GuardDutyClientTypes.DestinationProperties?
    /// The type of resource for the publishing destination. Currently only Amazon S3 buckets are supported.
    /// This member is required.
    public var destinationType: GuardDutyClientTypes.DestinationType?
    /// The ID of the GuardDuty detector associated with the publishing destination.
    /// This member is required.
    public var detectorId: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        destinationProperties: GuardDutyClientTypes.DestinationProperties? = nil,
        destinationType: GuardDutyClientTypes.DestinationType? = nil,
        detectorId: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.destinationProperties = destinationProperties
        self.destinationType = destinationType
        self.detectorId = detectorId
    }
}

public struct CreatePublishingDestinationOutput {
    /// The ID of the publishing destination that is created.
    /// This member is required.
    public var destinationId: Swift.String?

    public init(
        destinationId: Swift.String? = nil
    )
    {
        self.destinationId = destinationId
    }
}

public struct CreateSampleFindingsInput {
    /// The ID of the detector for which you need to create sample findings.
    /// This member is required.
    public var detectorId: Swift.String?
    /// The types of sample findings to generate.
    public var findingTypes: [Swift.String]?

    public init(
        detectorId: Swift.String? = nil,
        findingTypes: [Swift.String]? = nil
    )
    {
        self.detectorId = detectorId
        self.findingTypes = findingTypes
    }
}

public struct CreateSampleFindingsOutput {

    public init() { }
}

extension GuardDutyClientTypes {

    public enum ThreatIntelSetFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case alienVault
        case fireEye
        case otxCsv
        case proofPoint
        case stix
        case txt
        case sdkUnknown(Swift.String)

        public static var allCases: [ThreatIntelSetFormat] {
            return [
                .alienVault,
                .fireEye,
                .otxCsv,
                .proofPoint,
                .stix,
                .txt
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .alienVault: return "ALIEN_VAULT"
            case .fireEye: return "FIRE_EYE"
            case .otxCsv: return "OTX_CSV"
            case .proofPoint: return "PROOF_POINT"
            case .stix: return "STIX"
            case .txt: return "TXT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateThreatIntelSetInput {
    /// A Boolean value that indicates whether GuardDuty is to start using the uploaded ThreatIntelSet.
    /// This member is required.
    public var activate: Swift.Bool?
    /// The idempotency token for the create request.
    public var clientToken: Swift.String?
    /// The unique ID of the detector of the GuardDuty account for which you want to create a ThreatIntelSet.
    /// This member is required.
    public var detectorId: Swift.String?
    /// The format of the file that contains the ThreatIntelSet.
    /// This member is required.
    public var format: GuardDutyClientTypes.ThreatIntelSetFormat?
    /// The URI of the file that contains the ThreatIntelSet.
    /// This member is required.
    public var location: Swift.String?
    /// A user-friendly ThreatIntelSet name displayed in all findings that are generated by activity that involves IP addresses included in this ThreatIntelSet.
    /// This member is required.
    public var name: Swift.String?
    /// The tags to be added to a new threat list resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        activate: Swift.Bool? = nil,
        clientToken: Swift.String? = nil,
        detectorId: Swift.String? = nil,
        format: GuardDutyClientTypes.ThreatIntelSetFormat? = nil,
        location: Swift.String? = nil,
        name: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.activate = activate
        self.clientToken = clientToken
        self.detectorId = detectorId
        self.format = format
        self.location = location
        self.name = name
        self.tags = tags
    }
}

public struct CreateThreatIntelSetOutput {
    /// The ID of the ThreatIntelSet resource.
    /// This member is required.
    public var threatIntelSetId: Swift.String?

    public init(
        threatIntelSetId: Swift.String? = nil
    )
    {
        self.threatIntelSetId = threatIntelSetId
    }
}

extension GuardDutyClientTypes {

    public enum CriterionKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accountId
        case ec2InstanceArn
        case guarddutyFindingId
        case scanId
        case scanStartTime
        case scanStatus
        case scanType
        case sdkUnknown(Swift.String)

        public static var allCases: [CriterionKey] {
            return [
                .accountId,
                .ec2InstanceArn,
                .guarddutyFindingId,
                .scanId,
                .scanStartTime,
                .scanStatus,
                .scanType
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accountId: return "ACCOUNT_ID"
            case .ec2InstanceArn: return "EC2_INSTANCE_ARN"
            case .guarddutyFindingId: return "GUARDDUTY_FINDING_ID"
            case .scanId: return "SCAN_ID"
            case .scanStartTime: return "SCAN_START_TIME"
            case .scanStatus: return "SCAN_STATUS"
            case .scanType: return "SCAN_TYPE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GuardDutyClientTypes {

    public enum DataSource: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cloudTrail
        case dnsLogs
        case ec2MalwareScan
        case flowLogs
        case kubernetesAuditLogs
        case s3Logs
        case sdkUnknown(Swift.String)

        public static var allCases: [DataSource] {
            return [
                .cloudTrail,
                .dnsLogs,
                .ec2MalwareScan,
                .flowLogs,
                .kubernetesAuditLogs,
                .s3Logs
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cloudTrail: return "CLOUD_TRAIL"
            case .dnsLogs: return "DNS_LOGS"
            case .ec2MalwareScan: return "EC2_MALWARE_SCAN"
            case .flowLogs: return "FLOW_LOGS"
            case .kubernetesAuditLogs: return "KUBERNETES_AUDIT_LOGS"
            case .s3Logs: return "S3_LOGS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GuardDutyClientTypes {
    /// Contains information on the status of DNS logs as a data source.
    public struct DNSLogsConfigurationResult {
        /// Denotes whether DNS logs is enabled as a data source.
        /// This member is required.
        public var status: GuardDutyClientTypes.DataSourceStatus?

        public init(
            status: GuardDutyClientTypes.DataSourceStatus? = nil
        )
        {
            self.status = status
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information on the status of VPC flow logs as a data source.
    public struct FlowLogsConfigurationResult {
        /// Denotes whether VPC flow logs is enabled as a data source.
        /// This member is required.
        public var status: GuardDutyClientTypes.DataSourceStatus?

        public init(
            status: GuardDutyClientTypes.DataSourceStatus? = nil
        )
        {
            self.status = status
        }
    }

}

extension GuardDutyClientTypes {
    /// Describes whether Kubernetes audit logs are enabled as a data source.
    public struct KubernetesAuditLogsConfigurationResult {
        /// A value that describes whether Kubernetes audit logs are enabled as a data source.
        /// This member is required.
        public var status: GuardDutyClientTypes.DataSourceStatus?

        public init(
            status: GuardDutyClientTypes.DataSourceStatus? = nil
        )
        {
            self.status = status
        }
    }

}

extension GuardDutyClientTypes {
    /// Describes whether any Kubernetes logs will be enabled as a data source.
    public struct KubernetesConfigurationResult {
        /// Describes whether Kubernetes audit logs are enabled as a data source.
        /// This member is required.
        public var auditLogs: GuardDutyClientTypes.KubernetesAuditLogsConfigurationResult?

        public init(
            auditLogs: GuardDutyClientTypes.KubernetesAuditLogsConfigurationResult? = nil
        )
        {
            self.auditLogs = auditLogs
        }
    }

}

extension GuardDutyClientTypes {
    /// Describes whether S3 data event logs will be enabled as a data source.
    public struct S3LogsConfigurationResult {
        /// A value that describes whether S3 data event logs are automatically enabled for new members of the organization.
        /// This member is required.
        public var status: GuardDutyClientTypes.DataSourceStatus?

        public init(
            status: GuardDutyClientTypes.DataSourceStatus? = nil
        )
        {
            self.status = status
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information on the status of data sources for the detector.
    public struct DataSourceConfigurationsResult {
        /// An object that contains information on the status of CloudTrail as a data source.
        /// This member is required.
        public var cloudTrail: GuardDutyClientTypes.CloudTrailConfigurationResult?
        /// An object that contains information on the status of DNS logs as a data source.
        /// This member is required.
        public var dnsLogs: GuardDutyClientTypes.DNSLogsConfigurationResult?
        /// An object that contains information on the status of VPC flow logs as a data source.
        /// This member is required.
        public var flowLogs: GuardDutyClientTypes.FlowLogsConfigurationResult?
        /// An object that contains information on the status of all Kubernetes data sources.
        public var kubernetes: GuardDutyClientTypes.KubernetesConfigurationResult?
        /// Describes the configuration of Malware Protection data sources.
        public var malwareProtection: GuardDutyClientTypes.MalwareProtectionConfigurationResult?
        /// An object that contains information on the status of S3 Data event logs as a data source.
        /// This member is required.
        public var s3Logs: GuardDutyClientTypes.S3LogsConfigurationResult?

        public init(
            cloudTrail: GuardDutyClientTypes.CloudTrailConfigurationResult? = nil,
            dnsLogs: GuardDutyClientTypes.DNSLogsConfigurationResult? = nil,
            flowLogs: GuardDutyClientTypes.FlowLogsConfigurationResult? = nil,
            kubernetes: GuardDutyClientTypes.KubernetesConfigurationResult? = nil,
            malwareProtection: GuardDutyClientTypes.MalwareProtectionConfigurationResult? = nil,
            s3Logs: GuardDutyClientTypes.S3LogsConfigurationResult? = nil
        )
        {
            self.cloudTrail = cloudTrail
            self.dnsLogs = dnsLogs
            self.flowLogs = flowLogs
            self.kubernetes = kubernetes
            self.malwareProtection = malwareProtection
            self.s3Logs = s3Logs
        }
    }

}

extension GuardDutyClientTypes {
    /// Represents list a map of dates with a count of total findings generated on each date.
    public struct DateStatistics {
        /// The timestamp when the total findings count is observed. For example, Date would look like "2024-09-05T17:00:00-07:00" whereas LastGeneratedAt would look like 2024-09-05T17:12:29-07:00".
        public var date: Foundation.Date?
        /// The timestamp at which the last finding in the findings count, was generated.
        public var lastGeneratedAt: Foundation.Date?
        /// The severity of the findings generated on each date.
        public var severity: Swift.Double?
        /// The total number of findings that were generated per severity level on each date.
        public var totalFindings: Swift.Int?

        public init(
            date: Foundation.Date? = nil,
            lastGeneratedAt: Foundation.Date? = nil,
            severity: Swift.Double? = nil,
            totalFindings: Swift.Int? = nil
        )
        {
            self.date = date
            self.lastGeneratedAt = lastGeneratedAt
            self.severity = severity
            self.totalFindings = totalFindings
        }
    }

}

public struct DeclineInvitationsInput {
    /// A list of account IDs of the Amazon Web Services accounts that sent invitations to the current member account that you want to decline invitations from.
    /// This member is required.
    public var accountIds: [Swift.String]?

    public init(
        accountIds: [Swift.String]? = nil
    )
    {
        self.accountIds = accountIds
    }
}

public struct DeclineInvitationsOutput {
    /// A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.
    /// This member is required.
    public var unprocessedAccounts: [GuardDutyClientTypes.UnprocessedAccount]?

    public init(
        unprocessedAccounts: [GuardDutyClientTypes.UnprocessedAccount]? = nil
    )
    {
        self.unprocessedAccounts = unprocessedAccounts
    }
}

extension GuardDutyClientTypes {
    /// Contains information on the server side encryption method used in the S3 bucket. See [S3 Server-Side Encryption](https://docs.aws.amazon.com/AmazonS3/latest/dev/serv-side-encryption.html) for more information.
    public struct DefaultServerSideEncryption {
        /// The type of encryption used for objects within the S3 bucket.
        public var encryptionType: Swift.String?
        /// The Amazon Resource Name (ARN) of the KMS encryption key. Only available if the bucket EncryptionType is aws:kms.
        public var kmsMasterKeyArn: Swift.String?

        public init(
            encryptionType: Swift.String? = nil,
            kmsMasterKeyArn: Swift.String? = nil
        )
        {
            self.encryptionType = encryptionType
            self.kmsMasterKeyArn = kmsMasterKeyArn
        }
    }

}

public struct DeleteDetectorInput {
    /// The unique ID of the detector that you want to delete.
    /// This member is required.
    public var detectorId: Swift.String?

    public init(
        detectorId: Swift.String? = nil
    )
    {
        self.detectorId = detectorId
    }
}

public struct DeleteDetectorOutput {

    public init() { }
}

public struct DeleteFilterInput {
    /// The unique ID of the detector that is associated with the filter.
    /// This member is required.
    public var detectorId: Swift.String?
    /// The name of the filter that you want to delete.
    /// This member is required.
    public var filterName: Swift.String?

    public init(
        detectorId: Swift.String? = nil,
        filterName: Swift.String? = nil
    )
    {
        self.detectorId = detectorId
        self.filterName = filterName
    }
}

public struct DeleteFilterOutput {

    public init() { }
}

public struct DeleteInvitationsInput {
    /// A list of account IDs of the Amazon Web Services accounts that sent invitations to the current member account that you want to delete invitations from.
    /// This member is required.
    public var accountIds: [Swift.String]?

    public init(
        accountIds: [Swift.String]? = nil
    )
    {
        self.accountIds = accountIds
    }
}

public struct DeleteInvitationsOutput {
    /// A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.
    /// This member is required.
    public var unprocessedAccounts: [GuardDutyClientTypes.UnprocessedAccount]?

    public init(
        unprocessedAccounts: [GuardDutyClientTypes.UnprocessedAccount]? = nil
    )
    {
        self.unprocessedAccounts = unprocessedAccounts
    }
}

public struct DeleteIPSetInput {
    /// The unique ID of the detector associated with the IPSet.
    /// This member is required.
    public var detectorId: Swift.String?
    /// The unique ID of the IPSet to delete.
    /// This member is required.
    public var ipSetId: Swift.String?

    public init(
        detectorId: Swift.String? = nil,
        ipSetId: Swift.String? = nil
    )
    {
        self.detectorId = detectorId
        self.ipSetId = ipSetId
    }
}

public struct DeleteIPSetOutput {

    public init() { }
}

/// The requested resource can't be found.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The error message.
        public internal(set) var message: Swift.String? = nil
        /// The error type.
        public internal(set) var type: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        type: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.type = type
    }
}

public struct DeleteMalwareProtectionPlanInput {
    /// A unique identifier associated with Malware Protection plan resource.
    /// This member is required.
    public var malwareProtectionPlanId: Swift.String?

    public init(
        malwareProtectionPlanId: Swift.String? = nil
    )
    {
        self.malwareProtectionPlanId = malwareProtectionPlanId
    }
}

public struct DeleteMembersInput {
    /// A list of account IDs of the GuardDuty member accounts that you want to delete.
    /// This member is required.
    public var accountIds: [Swift.String]?
    /// The unique ID of the detector of the GuardDuty account whose members you want to delete.
    /// This member is required.
    public var detectorId: Swift.String?

    public init(
        accountIds: [Swift.String]? = nil,
        detectorId: Swift.String? = nil
    )
    {
        self.accountIds = accountIds
        self.detectorId = detectorId
    }
}

public struct DeleteMembersOutput {
    /// The accounts that could not be processed.
    /// This member is required.
    public var unprocessedAccounts: [GuardDutyClientTypes.UnprocessedAccount]?

    public init(
        unprocessedAccounts: [GuardDutyClientTypes.UnprocessedAccount]? = nil
    )
    {
        self.unprocessedAccounts = unprocessedAccounts
    }
}

public struct DeletePublishingDestinationInput {
    /// The ID of the publishing destination to delete.
    /// This member is required.
    public var destinationId: Swift.String?
    /// The unique ID of the detector associated with the publishing destination to delete.
    /// This member is required.
    public var detectorId: Swift.String?

    public init(
        destinationId: Swift.String? = nil,
        detectorId: Swift.String? = nil
    )
    {
        self.destinationId = destinationId
        self.detectorId = detectorId
    }
}

public struct DeletePublishingDestinationOutput {

    public init() { }
}

public struct DeleteThreatIntelSetInput {
    /// The unique ID of the detector that is associated with the threatIntelSet.
    /// This member is required.
    public var detectorId: Swift.String?
    /// The unique ID of the threatIntelSet that you want to delete.
    /// This member is required.
    public var threatIntelSetId: Swift.String?

    public init(
        detectorId: Swift.String? = nil,
        threatIntelSetId: Swift.String? = nil
    )
    {
        self.detectorId = detectorId
        self.threatIntelSetId = threatIntelSetId
    }
}

public struct DeleteThreatIntelSetOutput {

    public init() { }
}

extension GuardDutyClientTypes {
    /// Contains information about the condition.
    public struct FilterCondition {
        /// Represents an equal condition to be applied to a single field when querying for scan entries.
        public var equalsValue: Swift.String?
        /// Represents a greater than condition to be applied to a single field when querying for scan entries.
        public var greaterThan: Swift.Int?
        /// Represents a less than condition to be applied to a single field when querying for scan entries.
        public var lessThan: Swift.Int?

        public init(
            equalsValue: Swift.String? = nil,
            greaterThan: Swift.Int? = nil,
            lessThan: Swift.Int? = nil
        )
        {
            self.equalsValue = equalsValue
            self.greaterThan = greaterThan
            self.lessThan = lessThan
        }
    }

}

extension GuardDutyClientTypes {
    /// Represents a condition that when matched will be added to the response of the operation. Irrespective of using any filter criteria, an administrator account can view the scan entries for all of its member accounts. However, each member account can view the scan entries only for their own account.
    public struct FilterCriterion {
        /// An enum value representing possible scan properties to match with given scan entries. Replace the enum value CLUSTER_NAME with EKS_CLUSTER_NAME. CLUSTER_NAME has been deprecated.
        public var criterionKey: GuardDutyClientTypes.CriterionKey?
        /// Contains information about the condition.
        public var filterCondition: GuardDutyClientTypes.FilterCondition?

        public init(
            criterionKey: GuardDutyClientTypes.CriterionKey? = nil,
            filterCondition: GuardDutyClientTypes.FilterCondition? = nil
        )
        {
            self.criterionKey = criterionKey
            self.filterCondition = filterCondition
        }
    }

}

extension GuardDutyClientTypes {
    /// Represents the criteria to be used in the filter for describing scan entries.
    public struct FilterCriteria {
        /// Represents a condition that when matched will be added to the response of the operation.
        public var filterCriterion: [GuardDutyClientTypes.FilterCriterion]?

        public init(
            filterCriterion: [GuardDutyClientTypes.FilterCriterion]? = nil
        )
        {
            self.filterCriterion = filterCriterion
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about the criteria used for sorting findings.
    public struct SortCriteria {
        /// Represents the finding attribute, such as accountId, that sorts the findings.
        public var attributeName: Swift.String?
        /// The order by which the sorted findings are to be displayed.
        public var orderBy: GuardDutyClientTypes.OrderBy?

        public init(
            attributeName: Swift.String? = nil,
            orderBy: GuardDutyClientTypes.OrderBy? = nil
        )
        {
            self.attributeName = attributeName
            self.orderBy = orderBy
        }
    }

}

public struct DescribeMalwareScansInput {
    /// The unique ID of the detector that the request is associated with.
    /// This member is required.
    public var detectorId: Swift.String?
    /// Represents the criteria to be used in the filter for describing scan entries.
    public var filterCriteria: GuardDutyClientTypes.FilterCriteria?
    /// You can use this parameter to indicate the maximum number of items that you want in the response. The default value is 50. The maximum value is 50.
    public var maxResults: Swift.Int?
    /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
    public var nextToken: Swift.String?
    /// Represents the criteria used for sorting scan entries. The [attributeName](https://docs.aws.amazon.com/guardduty/latest/APIReference/API_SortCriteria.html#guardduty-Type-SortCriteria-attributeName) is required and it must be scanStartTime.
    public var sortCriteria: GuardDutyClientTypes.SortCriteria?

    public init(
        detectorId: Swift.String? = nil,
        filterCriteria: GuardDutyClientTypes.FilterCriteria? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortCriteria: GuardDutyClientTypes.SortCriteria? = nil
    )
    {
        self.detectorId = detectorId
        self.filterCriteria = filterCriteria
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortCriteria = sortCriteria
    }
}

extension GuardDutyClientTypes {
    /// Contains EBS volume details.
    public struct VolumeDetail {
        /// The device name for the EBS volume.
        public var deviceName: Swift.String?
        /// EBS volume encryption type.
        public var encryptionType: Swift.String?
        /// KMS key ARN used to encrypt the EBS volume.
        public var kmsKeyArn: Swift.String?
        /// Snapshot ARN of the EBS volume.
        public var snapshotArn: Swift.String?
        /// EBS volume ARN information.
        public var volumeArn: Swift.String?
        /// EBS volume size in GB.
        public var volumeSizeInGB: Swift.Int?
        /// The EBS volume type.
        public var volumeType: Swift.String?

        public init(
            deviceName: Swift.String? = nil,
            encryptionType: Swift.String? = nil,
            kmsKeyArn: Swift.String? = nil,
            snapshotArn: Swift.String? = nil,
            volumeArn: Swift.String? = nil,
            volumeSizeInGB: Swift.Int? = nil,
            volumeType: Swift.String? = nil
        )
        {
            self.deviceName = deviceName
            self.encryptionType = encryptionType
            self.kmsKeyArn = kmsKeyArn
            self.snapshotArn = snapshotArn
            self.volumeArn = volumeArn
            self.volumeSizeInGB = volumeSizeInGB
            self.volumeType = volumeType
        }
    }

}

extension GuardDutyClientTypes {
    /// Represents the resources that were scanned in the scan entry.
    public struct ResourceDetails {
        /// Instance ARN that was scanned in the scan entry.
        public var instanceArn: Swift.String?

        public init(
            instanceArn: Swift.String? = nil
        )
        {
            self.instanceArn = instanceArn
        }
    }

}

extension GuardDutyClientTypes {

    public enum ScanResult: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case clean
        case infected
        case sdkUnknown(Swift.String)

        public static var allCases: [ScanResult] {
            return [
                .clean,
                .infected
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .clean: return "CLEAN"
            case .infected: return "INFECTED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GuardDutyClientTypes {
    /// Represents the result of the scan.
    public struct ScanResultDetails {
        /// An enum value representing possible scan results.
        public var scanResult: GuardDutyClientTypes.ScanResult?

        public init(
            scanResult: GuardDutyClientTypes.ScanResult? = nil
        )
        {
            self.scanResult = scanResult
        }
    }

}

extension GuardDutyClientTypes {

    public enum ScanStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case failed
        case running
        case skipped
        case sdkUnknown(Swift.String)

        public static var allCases: [ScanStatus] {
            return [
                .completed,
                .failed,
                .running,
                .skipped
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .running: return "RUNNING"
            case .skipped: return "SKIPPED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GuardDutyClientTypes {

    public enum ScanType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case guarddutyInitiated
        case onDemand
        case sdkUnknown(Swift.String)

        public static var allCases: [ScanType] {
            return [
                .guarddutyInitiated,
                .onDemand
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .guarddutyInitiated: return "GUARDDUTY_INITIATED"
            case .onDemand: return "ON_DEMAND"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GuardDutyClientTypes {
    /// Represents the reason the scan was triggered.
    public struct TriggerDetails {
        /// The description of the scan trigger.
        public var description: Swift.String?
        /// The ID of the GuardDuty finding that triggered the malware scan.
        public var guardDutyFindingId: Swift.String?

        public init(
            description: Swift.String? = nil,
            guardDutyFindingId: Swift.String? = nil
        )
        {
            self.description = description
            self.guardDutyFindingId = guardDutyFindingId
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about a malware scan.
    public struct Scan {
        /// The ID for the account that belongs to the scan.
        public var accountId: Swift.String?
        /// The unique detector ID of the administrator account that the request is associated with. If the account is an administrator, the AdminDetectorId will be the same as the one used for DetectorId.
        public var adminDetectorId: Swift.String?
        /// List of volumes that were attached to the original instance to be scanned.
        public var attachedVolumes: [GuardDutyClientTypes.VolumeDetail]?
        /// The unique ID of the detector that the request is associated with.
        public var detectorId: Swift.String?
        /// Represents the reason for FAILED scan status.
        public var failureReason: Swift.String?
        /// Represents the number of files that were scanned.
        public var fileCount: Swift.Int?
        /// Represents the resources that were scanned in the scan entry.
        public var resourceDetails: GuardDutyClientTypes.ResourceDetails?
        /// The timestamp of when the scan was finished.
        public var scanEndTime: Foundation.Date?
        /// The unique scan ID associated with a scan entry.
        public var scanId: Swift.String?
        /// Represents the result of the scan.
        public var scanResultDetails: GuardDutyClientTypes.ScanResultDetails?
        /// The timestamp of when the scan was triggered.
        public var scanStartTime: Foundation.Date?
        /// An enum value representing possible scan statuses.
        public var scanStatus: GuardDutyClientTypes.ScanStatus?
        /// Specifies the scan type that invoked the malware scan.
        public var scanType: GuardDutyClientTypes.ScanType?
        /// Represents total bytes that were scanned.
        public var totalBytes: Swift.Int?
        /// Specifies the reason why the scan was initiated.
        public var triggerDetails: GuardDutyClientTypes.TriggerDetails?

        public init(
            accountId: Swift.String? = nil,
            adminDetectorId: Swift.String? = nil,
            attachedVolumes: [GuardDutyClientTypes.VolumeDetail]? = nil,
            detectorId: Swift.String? = nil,
            failureReason: Swift.String? = nil,
            fileCount: Swift.Int? = nil,
            resourceDetails: GuardDutyClientTypes.ResourceDetails? = nil,
            scanEndTime: Foundation.Date? = nil,
            scanId: Swift.String? = nil,
            scanResultDetails: GuardDutyClientTypes.ScanResultDetails? = nil,
            scanStartTime: Foundation.Date? = nil,
            scanStatus: GuardDutyClientTypes.ScanStatus? = nil,
            scanType: GuardDutyClientTypes.ScanType? = nil,
            totalBytes: Swift.Int? = nil,
            triggerDetails: GuardDutyClientTypes.TriggerDetails? = nil
        )
        {
            self.accountId = accountId
            self.adminDetectorId = adminDetectorId
            self.attachedVolumes = attachedVolumes
            self.detectorId = detectorId
            self.failureReason = failureReason
            self.fileCount = fileCount
            self.resourceDetails = resourceDetails
            self.scanEndTime = scanEndTime
            self.scanId = scanId
            self.scanResultDetails = scanResultDetails
            self.scanStartTime = scanStartTime
            self.scanStatus = scanStatus
            self.scanType = scanType
            self.totalBytes = totalBytes
            self.triggerDetails = triggerDetails
        }
    }

}

public struct DescribeMalwareScansOutput {
    /// The pagination parameter to be used on the next list operation to retrieve more items.
    public var nextToken: Swift.String?
    /// Contains information about malware scans.
    /// This member is required.
    public var scans: [GuardDutyClientTypes.Scan]?

    public init(
        nextToken: Swift.String? = nil,
        scans: [GuardDutyClientTypes.Scan]? = nil
    )
    {
        self.nextToken = nextToken
        self.scans = scans
    }
}

public struct DescribeOrganizationConfigurationInput {
    /// The detector ID of the delegated administrator for which you need to retrieve the information.
    /// This member is required.
    public var detectorId: Swift.String?
    /// You can use this parameter to indicate the maximum number of items that you want in the response.
    public var maxResults: Swift.Int?
    /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
    public var nextToken: Swift.String?

    public init(
        detectorId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.detectorId = detectorId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension GuardDutyClientTypes {
    /// The current configuration of Kubernetes audit logs as a data source for the organization.
    public struct OrganizationKubernetesAuditLogsConfigurationResult {
        /// Whether Kubernetes audit logs data source should be auto-enabled for new members joining the organization.
        /// This member is required.
        public var autoEnable: Swift.Bool?

        public init(
            autoEnable: Swift.Bool? = nil
        )
        {
            self.autoEnable = autoEnable
        }
    }

}

extension GuardDutyClientTypes {
    /// The current configuration of all Kubernetes data sources for the organization.
    public struct OrganizationKubernetesConfigurationResult {
        /// The current configuration of Kubernetes audit logs as a data source for the organization.
        /// This member is required.
        public var auditLogs: GuardDutyClientTypes.OrganizationKubernetesAuditLogsConfigurationResult?

        public init(
            auditLogs: GuardDutyClientTypes.OrganizationKubernetesAuditLogsConfigurationResult? = nil
        )
        {
            self.auditLogs = auditLogs
        }
    }

}

extension GuardDutyClientTypes {
    /// An object that contains information on the status of whether EBS volumes scanning will be enabled as a data source for an organization.
    public struct OrganizationEbsVolumesResult {
        /// An object that contains the status of whether scanning EBS volumes should be auto-enabled for new members joining the organization.
        public var autoEnable: Swift.Bool?

        public init(
            autoEnable: Swift.Bool? = nil
        )
        {
            self.autoEnable = autoEnable
        }
    }

}

extension GuardDutyClientTypes {
    /// An object that contains information on the status of scanning EC2 instances with findings for an organization.
    public struct OrganizationScanEc2InstanceWithFindingsResult {
        /// Describes the configuration for scanning EBS volumes for an organization.
        public var ebsVolumes: GuardDutyClientTypes.OrganizationEbsVolumesResult?

        public init(
            ebsVolumes: GuardDutyClientTypes.OrganizationEbsVolumesResult? = nil
        )
        {
            self.ebsVolumes = ebsVolumes
        }
    }

}

extension GuardDutyClientTypes {
    /// An object that contains information on the status of all Malware Protection data source for an organization.
    public struct OrganizationMalwareProtectionConfigurationResult {
        /// Describes the configuration for scanning EC2 instances with findings for an organization.
        public var scanEc2InstanceWithFindings: GuardDutyClientTypes.OrganizationScanEc2InstanceWithFindingsResult?

        public init(
            scanEc2InstanceWithFindings: GuardDutyClientTypes.OrganizationScanEc2InstanceWithFindingsResult? = nil
        )
        {
            self.scanEc2InstanceWithFindings = scanEc2InstanceWithFindings
        }
    }

}

extension GuardDutyClientTypes {
    /// The current configuration of S3 data event logs as a data source for the organization.
    public struct OrganizationS3LogsConfigurationResult {
        /// A value that describes whether S3 data event logs are automatically enabled for new members of the organization.
        /// This member is required.
        public var autoEnable: Swift.Bool?

        public init(
            autoEnable: Swift.Bool? = nil
        )
        {
            self.autoEnable = autoEnable
        }
    }

}

extension GuardDutyClientTypes {
    /// An object that contains information on which data sources are automatically enabled for new members within the organization.
    public struct OrganizationDataSourceConfigurationsResult {
        /// Describes the configuration of Kubernetes data sources.
        public var kubernetes: GuardDutyClientTypes.OrganizationKubernetesConfigurationResult?
        /// Describes the configuration of Malware Protection data source for an organization.
        public var malwareProtection: GuardDutyClientTypes.OrganizationMalwareProtectionConfigurationResult?
        /// Describes whether S3 data event logs are enabled as a data source.
        /// This member is required.
        public var s3Logs: GuardDutyClientTypes.OrganizationS3LogsConfigurationResult?

        public init(
            kubernetes: GuardDutyClientTypes.OrganizationKubernetesConfigurationResult? = nil,
            malwareProtection: GuardDutyClientTypes.OrganizationMalwareProtectionConfigurationResult? = nil,
            s3Logs: GuardDutyClientTypes.OrganizationS3LogsConfigurationResult? = nil
        )
        {
            self.kubernetes = kubernetes
            self.malwareProtection = malwareProtection
            self.s3Logs = s3Logs
        }
    }

}

extension GuardDutyClientTypes {

    public enum OrgFeatureStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case all
        case new
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [OrgFeatureStatus] {
            return [
                .all,
                .new,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case .new: return "NEW"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GuardDutyClientTypes {

    public enum OrgFeatureAdditionalConfiguration: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ec2AgentManagement
        case ecsFargateAgentManagement
        case eksAddonManagement
        case sdkUnknown(Swift.String)

        public static var allCases: [OrgFeatureAdditionalConfiguration] {
            return [
                .ec2AgentManagement,
                .ecsFargateAgentManagement,
                .eksAddonManagement
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ec2AgentManagement: return "EC2_AGENT_MANAGEMENT"
            case .ecsFargateAgentManagement: return "ECS_FARGATE_AGENT_MANAGEMENT"
            case .eksAddonManagement: return "EKS_ADDON_MANAGEMENT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GuardDutyClientTypes {
    /// A list of additional configuration which will be configured for the organization.
    public struct OrganizationAdditionalConfigurationResult {
        /// Describes the status of the additional configuration that is configured for the member accounts within the organization. One of the following values is the status for the entire organization:
        ///
        /// * NEW: Indicates that when a new account joins the organization, they will have the additional configuration enabled automatically.
        ///
        /// * ALL: Indicates that all accounts in the organization have the additional configuration enabled automatically. This includes NEW accounts that join the organization and accounts that may have been suspended or removed from the organization in GuardDuty. It may take up to 24 hours to update the configuration for all the member accounts.
        ///
        /// * NONE: Indicates that the additional configuration will not be automatically enabled for any account in the organization. The administrator must manage the additional configuration for each account individually.
        public var autoEnable: GuardDutyClientTypes.OrgFeatureStatus?
        /// The name of the additional configuration that is configured for the member accounts within the organization.
        public var name: GuardDutyClientTypes.OrgFeatureAdditionalConfiguration?

        public init(
            autoEnable: GuardDutyClientTypes.OrgFeatureStatus? = nil,
            name: GuardDutyClientTypes.OrgFeatureAdditionalConfiguration? = nil
        )
        {
            self.autoEnable = autoEnable
            self.name = name
        }
    }

}

extension GuardDutyClientTypes {

    public enum OrgFeature: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ebsMalwareProtection
        case eksAuditLogs
        case eksRuntimeMonitoring
        case lambdaNetworkLogs
        case rdsLoginEvents
        case runtimeMonitoring
        case s3DataEvents
        case sdkUnknown(Swift.String)

        public static var allCases: [OrgFeature] {
            return [
                .ebsMalwareProtection,
                .eksAuditLogs,
                .eksRuntimeMonitoring,
                .lambdaNetworkLogs,
                .rdsLoginEvents,
                .runtimeMonitoring,
                .s3DataEvents
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ebsMalwareProtection: return "EBS_MALWARE_PROTECTION"
            case .eksAuditLogs: return "EKS_AUDIT_LOGS"
            case .eksRuntimeMonitoring: return "EKS_RUNTIME_MONITORING"
            case .lambdaNetworkLogs: return "LAMBDA_NETWORK_LOGS"
            case .rdsLoginEvents: return "RDS_LOGIN_EVENTS"
            case .runtimeMonitoring: return "RUNTIME_MONITORING"
            case .s3DataEvents: return "S3_DATA_EVENTS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GuardDutyClientTypes {
    /// A list of features which will be configured for the organization.
    public struct OrganizationFeatureConfigurationResult {
        /// The additional configuration that is configured for the member accounts within the organization.
        public var additionalConfiguration: [GuardDutyClientTypes.OrganizationAdditionalConfigurationResult]?
        /// Describes the status of the feature that is configured for the member accounts within the organization.
        ///
        /// * NEW: Indicates that when a new account joins the organization, they will have the feature enabled automatically.
        ///
        /// * ALL: Indicates that all accounts in the organization have the feature enabled automatically. This includes NEW accounts that join the organization and accounts that may have been suspended or removed from the organization in GuardDuty.
        ///
        /// * NONE: Indicates that the feature will not be automatically enabled for any account in the organization. In this case, each account will be managed individually by the administrator.
        public var autoEnable: GuardDutyClientTypes.OrgFeatureStatus?
        /// The name of the feature that is configured for the member accounts within the organization.
        public var name: GuardDutyClientTypes.OrgFeature?

        public init(
            additionalConfiguration: [GuardDutyClientTypes.OrganizationAdditionalConfigurationResult]? = nil,
            autoEnable: GuardDutyClientTypes.OrgFeatureStatus? = nil,
            name: GuardDutyClientTypes.OrgFeature? = nil
        )
        {
            self.additionalConfiguration = additionalConfiguration
            self.autoEnable = autoEnable
            self.name = name
        }
    }

}

public struct DescribeOrganizationConfigurationOutput {
    /// Indicates whether GuardDuty is automatically enabled for accounts added to the organization. Even though this is still supported, we recommend using AutoEnableOrganizationMembers to achieve the similar results.
    @available(*, deprecated, message: "This field is deprecated, use AutoEnableOrganizationMembers instead")
    public var autoEnable: Swift.Bool?
    /// Indicates the auto-enablement configuration of GuardDuty or any of the corresponding protection plans for the member accounts in the organization.
    ///
    /// * NEW: Indicates that when a new account joins the organization, they will have GuardDuty or any of the corresponding protection plans enabled automatically.
    ///
    /// * ALL: Indicates that all accounts in the organization have GuardDuty and any of the corresponding protection plans enabled automatically. This includes NEW accounts that join the organization and accounts that may have been suspended or removed from the organization in GuardDuty.
    ///
    /// * NONE: Indicates that GuardDuty or any of the corresponding protection plans will not be automatically enabled for any account in the organization. The administrator must manage GuardDuty for each account in the organization individually. When you update the auto-enable setting from ALL or NEW to NONE, this action doesn't disable the corresponding option for your existing accounts. This configuration will apply to the new accounts that join the organization. After you update the auto-enable settings, no new account will have the corresponding option as enabled.
    public var autoEnableOrganizationMembers: GuardDutyClientTypes.AutoEnableMembers?
    /// Describes which data sources are enabled automatically for member accounts.
    @available(*, deprecated, message: "This parameter is deprecated, use Features instead")
    public var dataSources: GuardDutyClientTypes.OrganizationDataSourceConfigurationsResult?
    /// A list of features that are configured for this organization.
    public var features: [GuardDutyClientTypes.OrganizationFeatureConfigurationResult]?
    /// Indicates whether the maximum number of allowed member accounts are already associated with the delegated administrator account for your organization.
    /// This member is required.
    public var memberAccountLimitReached: Swift.Bool?
    /// The pagination parameter to be used on the next list operation to retrieve more items.
    public var nextToken: Swift.String?

    public init(
        autoEnable: Swift.Bool? = nil,
        autoEnableOrganizationMembers: GuardDutyClientTypes.AutoEnableMembers? = nil,
        dataSources: GuardDutyClientTypes.OrganizationDataSourceConfigurationsResult? = nil,
        features: [GuardDutyClientTypes.OrganizationFeatureConfigurationResult]? = nil,
        memberAccountLimitReached: Swift.Bool? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.autoEnable = autoEnable
        self.autoEnableOrganizationMembers = autoEnableOrganizationMembers
        self.dataSources = dataSources
        self.features = features
        self.memberAccountLimitReached = memberAccountLimitReached
        self.nextToken = nextToken
    }
}

public struct DescribePublishingDestinationInput {
    /// The ID of the publishing destination to retrieve.
    /// This member is required.
    public var destinationId: Swift.String?
    /// The unique ID of the detector associated with the publishing destination to retrieve.
    /// This member is required.
    public var detectorId: Swift.String?

    public init(
        destinationId: Swift.String? = nil,
        detectorId: Swift.String? = nil
    )
    {
        self.destinationId = destinationId
        self.detectorId = detectorId
    }
}

extension GuardDutyClientTypes {

    public enum PublishingStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case pendingVerification
        case publishing
        case stopped
        case unableToPublishFixDestinationProperty
        case sdkUnknown(Swift.String)

        public static var allCases: [PublishingStatus] {
            return [
                .pendingVerification,
                .publishing,
                .stopped,
                .unableToPublishFixDestinationProperty
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .pendingVerification: return "PENDING_VERIFICATION"
            case .publishing: return "PUBLISHING"
            case .stopped: return "STOPPED"
            case .unableToPublishFixDestinationProperty: return "UNABLE_TO_PUBLISH_FIX_DESTINATION_PROPERTY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribePublishingDestinationOutput {
    /// The ID of the publishing destination.
    /// This member is required.
    public var destinationId: Swift.String?
    /// A DestinationProperties object that includes the DestinationArn and KmsKeyArn of the publishing destination.
    /// This member is required.
    public var destinationProperties: GuardDutyClientTypes.DestinationProperties?
    /// The type of publishing destination. Currently, only Amazon S3 buckets are supported.
    /// This member is required.
    public var destinationType: GuardDutyClientTypes.DestinationType?
    /// The time, in epoch millisecond format, at which GuardDuty was first unable to publish findings to the destination.
    /// This member is required.
    public var publishingFailureStartTimestamp: Swift.Int?
    /// The status of the publishing destination.
    /// This member is required.
    public var status: GuardDutyClientTypes.PublishingStatus?

    public init(
        destinationId: Swift.String? = nil,
        destinationProperties: GuardDutyClientTypes.DestinationProperties? = nil,
        destinationType: GuardDutyClientTypes.DestinationType? = nil,
        publishingFailureStartTimestamp: Swift.Int? = nil,
        status: GuardDutyClientTypes.PublishingStatus? = nil
    )
    {
        self.destinationId = destinationId
        self.destinationProperties = destinationProperties
        self.destinationType = destinationType
        self.publishingFailureStartTimestamp = publishingFailureStartTimestamp
        self.status = status
    }
}

extension GuardDutyClientTypes {
    /// Contains information about the publishing destination, including the ID, type, and status.
    public struct Destination {
        /// The unique ID of the publishing destination.
        /// This member is required.
        public var destinationId: Swift.String?
        /// The type of resource used for the publishing destination. Currently, only Amazon S3 buckets are supported.
        /// This member is required.
        public var destinationType: GuardDutyClientTypes.DestinationType?
        /// The status of the publishing destination.
        /// This member is required.
        public var status: GuardDutyClientTypes.PublishingStatus?

        public init(
            destinationId: Swift.String? = nil,
            destinationType: GuardDutyClientTypes.DestinationType? = nil,
            status: GuardDutyClientTypes.PublishingStatus? = nil
        )
        {
            self.destinationId = destinationId
            self.destinationType = destinationType
            self.status = status
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about the detected behavior.
    public struct Detection {
        /// The details about the anomalous activity that caused GuardDuty to generate the finding.
        public var anomaly: GuardDutyClientTypes.Anomaly?

        public init(
            anomaly: GuardDutyClientTypes.Anomaly? = nil
        )
        {
            self.anomaly = anomaly
        }
    }

}

extension GuardDutyClientTypes {
    /// Information about the additional configuration.
    public struct DetectorAdditionalConfigurationResult {
        /// Name of the additional configuration.
        public var name: GuardDutyClientTypes.FeatureAdditionalConfiguration?
        /// Status of the additional configuration.
        public var status: GuardDutyClientTypes.FeatureStatus?
        /// The timestamp at which the additional configuration was last updated. This is in UTC format.
        public var updatedAt: Foundation.Date?

        public init(
            name: GuardDutyClientTypes.FeatureAdditionalConfiguration? = nil,
            status: GuardDutyClientTypes.FeatureStatus? = nil,
            updatedAt: Foundation.Date? = nil
        )
        {
            self.name = name
            self.status = status
            self.updatedAt = updatedAt
        }
    }

}

extension GuardDutyClientTypes {

    public enum DetectorFeatureResult: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cloudTrail
        case dnsLogs
        case ebsMalwareProtection
        case eksAuditLogs
        case eksRuntimeMonitoring
        case flowLogs
        case lambdaNetworkLogs
        case rdsLoginEvents
        case runtimeMonitoring
        case s3DataEvents
        case sdkUnknown(Swift.String)

        public static var allCases: [DetectorFeatureResult] {
            return [
                .cloudTrail,
                .dnsLogs,
                .ebsMalwareProtection,
                .eksAuditLogs,
                .eksRuntimeMonitoring,
                .flowLogs,
                .lambdaNetworkLogs,
                .rdsLoginEvents,
                .runtimeMonitoring,
                .s3DataEvents
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cloudTrail: return "CLOUD_TRAIL"
            case .dnsLogs: return "DNS_LOGS"
            case .ebsMalwareProtection: return "EBS_MALWARE_PROTECTION"
            case .eksAuditLogs: return "EKS_AUDIT_LOGS"
            case .eksRuntimeMonitoring: return "EKS_RUNTIME_MONITORING"
            case .flowLogs: return "FLOW_LOGS"
            case .lambdaNetworkLogs: return "LAMBDA_NETWORK_LOGS"
            case .rdsLoginEvents: return "RDS_LOGIN_EVENTS"
            case .runtimeMonitoring: return "RUNTIME_MONITORING"
            case .s3DataEvents: return "S3_DATA_EVENTS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GuardDutyClientTypes {
    /// Contains information about a GuardDuty feature. Specifying both EKS Runtime Monitoring (EKS_RUNTIME_MONITORING) and Runtime Monitoring (RUNTIME_MONITORING) will cause an error. You can add only one of these two features because Runtime Monitoring already includes the threat detection for Amazon EKS resources. For more information, see [Runtime Monitoring](https://docs.aws.amazon.com/guardduty/latest/ug/runtime-monitoring.html).
    public struct DetectorFeatureConfigurationResult {
        /// Additional configuration for a resource.
        public var additionalConfiguration: [GuardDutyClientTypes.DetectorAdditionalConfigurationResult]?
        /// Indicates the name of the feature that can be enabled for the detector.
        public var name: GuardDutyClientTypes.DetectorFeatureResult?
        /// Indicates the status of the feature that is enabled for the detector.
        public var status: GuardDutyClientTypes.FeatureStatus?
        /// The timestamp at which the feature object was updated.
        public var updatedAt: Foundation.Date?

        public init(
            additionalConfiguration: [GuardDutyClientTypes.DetectorAdditionalConfigurationResult]? = nil,
            name: GuardDutyClientTypes.DetectorFeatureResult? = nil,
            status: GuardDutyClientTypes.FeatureStatus? = nil,
            updatedAt: Foundation.Date? = nil
        )
        {
            self.additionalConfiguration = additionalConfiguration
            self.name = name
            self.status = status
            self.updatedAt = updatedAt
        }
    }

}

extension GuardDutyClientTypes {

    public enum DetectorStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [DetectorStatus] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DisableOrganizationAdminAccountInput {
    /// The Amazon Web Services Account ID for the organizations account to be disabled as a GuardDuty delegated administrator.
    /// This member is required.
    public var adminAccountId: Swift.String?

    public init(
        adminAccountId: Swift.String? = nil
    )
    {
        self.adminAccountId = adminAccountId
    }
}

public struct DisableOrganizationAdminAccountOutput {

    public init() { }
}

public struct DisassociateFromAdministratorAccountInput {
    /// The unique ID of the detector of the GuardDuty member account.
    /// This member is required.
    public var detectorId: Swift.String?

    public init(
        detectorId: Swift.String? = nil
    )
    {
        self.detectorId = detectorId
    }
}

public struct DisassociateFromAdministratorAccountOutput {

    public init() { }
}

@available(*, deprecated, message: "This input is deprecated, use DisassociateFromAdministratorAccountRequest instead")
public struct DisassociateFromMasterAccountInput {
    /// The unique ID of the detector of the GuardDuty member account.
    /// This member is required.
    public var detectorId: Swift.String?

    public init(
        detectorId: Swift.String? = nil
    )
    {
        self.detectorId = detectorId
    }
}

@available(*, deprecated, message: "This output is deprecated, use DisassociateFromAdministratorAccountResponse instead")
public struct DisassociateFromMasterAccountOutput {

    public init() { }
}

public struct DisassociateMembersInput {
    /// A list of account IDs of the GuardDuty member accounts that you want to disassociate from the administrator account.
    /// This member is required.
    public var accountIds: [Swift.String]?
    /// The unique ID of the detector of the GuardDuty account whose members you want to disassociate from the administrator account.
    /// This member is required.
    public var detectorId: Swift.String?

    public init(
        accountIds: [Swift.String]? = nil,
        detectorId: Swift.String? = nil
    )
    {
        self.accountIds = accountIds
        self.detectorId = detectorId
    }
}

public struct DisassociateMembersOutput {
    /// A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.
    /// This member is required.
    public var unprocessedAccounts: [GuardDutyClientTypes.UnprocessedAccount]?

    public init(
        unprocessedAccounts: [GuardDutyClientTypes.UnprocessedAccount]? = nil
    )
    {
        self.unprocessedAccounts = unprocessedAccounts
    }
}

extension GuardDutyClientTypes {

    public enum EbsSnapshotPreservation: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case noRetention
        case retentionWithFinding
        case sdkUnknown(Swift.String)

        public static var allCases: [EbsSnapshotPreservation] {
            return [
                .noRetention,
                .retentionWithFinding
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .noRetention: return "NO_RETENTION"
            case .retentionWithFinding: return "RETENTION_WITH_FINDING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GuardDutyClientTypes {
    /// Contains list of scanned and skipped EBS volumes with details.
    public struct EbsVolumeDetails {
        /// List of EBS volumes that were scanned.
        public var scannedVolumeDetails: [GuardDutyClientTypes.VolumeDetail]?
        /// List of EBS volumes that were skipped from the malware scan.
        public var skippedVolumeDetails: [GuardDutyClientTypes.VolumeDetail]?

        public init(
            scannedVolumeDetails: [GuardDutyClientTypes.VolumeDetail]? = nil,
            skippedVolumeDetails: [GuardDutyClientTypes.VolumeDetail]? = nil
        )
        {
            self.scannedVolumeDetails = scannedVolumeDetails
            self.skippedVolumeDetails = skippedVolumeDetails
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains details of the highest severity threat detected during scan and number of infected files.
    public struct HighestSeverityThreatDetails {
        /// Total number of infected files with the highest severity threat detected.
        public var count: Swift.Int?
        /// Severity level of the highest severity threat detected.
        public var severity: Swift.String?
        /// Threat name of the highest severity threat detected as part of the malware scan.
        public var threatName: Swift.String?

        public init(
            count: Swift.Int? = nil,
            severity: Swift.String? = nil,
            threatName: Swift.String? = nil
        )
        {
            self.count = count
            self.severity = severity
            self.threatName = threatName
        }
    }

}

extension GuardDutyClientTypes {
    /// Total number of scanned files.
    public struct ScannedItemCount {
        /// Number of files scanned.
        public var files: Swift.Int?
        /// Total GB of files scanned for malware.
        public var totalGb: Swift.Int?
        /// Total number of scanned volumes.
        public var volumes: Swift.Int?

        public init(
            files: Swift.Int? = nil,
            totalGb: Swift.Int? = nil,
            volumes: Swift.Int? = nil
        )
        {
            self.files = files
            self.totalGb = totalGb
            self.volumes = volumes
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains details of infected file including name, file path and hash.
    public struct ScanFilePath {
        /// File name of the infected file.
        public var fileName: Swift.String?
        /// The file path of the infected file.
        public var filePath: Swift.String?
        /// The hash value of the infected file.
        public var hash: Swift.String?
        /// EBS volume ARN details of the infected file.
        public var volumeArn: Swift.String?

        public init(
            fileName: Swift.String? = nil,
            filePath: Swift.String? = nil,
            hash: Swift.String? = nil,
            volumeArn: Swift.String? = nil
        )
        {
            self.fileName = fileName
            self.filePath = filePath
            self.hash = hash
            self.volumeArn = volumeArn
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains files infected with the given threat providing details of malware name and severity.
    public struct ScanThreatName {
        /// List of infected files in EBS volume with details.
        public var filePaths: [GuardDutyClientTypes.ScanFilePath]?
        /// Total number of files infected with given threat.
        public var itemCount: Swift.Int?
        /// The name of the identified threat.
        public var name: Swift.String?
        /// Severity of threat identified as part of the malware scan.
        public var severity: Swift.String?

        public init(
            filePaths: [GuardDutyClientTypes.ScanFilePath]? = nil,
            itemCount: Swift.Int? = nil,
            name: Swift.String? = nil,
            severity: Swift.String? = nil
        )
        {
            self.filePaths = filePaths
            self.itemCount = itemCount
            self.name = name
            self.severity = severity
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains details about identified threats organized by threat name.
    public struct ThreatDetectedByName {
        /// Total number of infected files identified.
        public var itemCount: Swift.Int?
        /// Flag to determine if the finding contains every single infected file-path and/or every threat.
        public var shortened: Swift.Bool?
        /// List of identified threats with details, organized by threat name.
        public var threatNames: [GuardDutyClientTypes.ScanThreatName]?
        /// Total number of unique threats by name identified, as part of the malware scan.
        public var uniqueThreatNameCount: Swift.Int?

        public init(
            itemCount: Swift.Int? = nil,
            shortened: Swift.Bool? = nil,
            threatNames: [GuardDutyClientTypes.ScanThreatName]? = nil,
            uniqueThreatNameCount: Swift.Int? = nil
        )
        {
            self.itemCount = itemCount
            self.shortened = shortened
            self.threatNames = threatNames
            self.uniqueThreatNameCount = uniqueThreatNameCount
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains total number of infected files.
    public struct ThreatsDetectedItemCount {
        /// Total number of infected files.
        public var files: Swift.Int?

        public init(
            files: Swift.Int? = nil
        )
        {
            self.files = files
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains a complete view providing malware scan result details.
    public struct ScanDetections {
        /// Details of the highest severity threat detected during malware scan and number of infected files.
        public var highestSeverityThreatDetails: GuardDutyClientTypes.HighestSeverityThreatDetails?
        /// Total number of scanned files.
        public var scannedItemCount: GuardDutyClientTypes.ScannedItemCount?
        /// Contains details about identified threats organized by threat name.
        public var threatDetectedByName: GuardDutyClientTypes.ThreatDetectedByName?
        /// Total number of infected files.
        public var threatsDetectedItemCount: GuardDutyClientTypes.ThreatsDetectedItemCount?

        public init(
            highestSeverityThreatDetails: GuardDutyClientTypes.HighestSeverityThreatDetails? = nil,
            scannedItemCount: GuardDutyClientTypes.ScannedItemCount? = nil,
            threatDetectedByName: GuardDutyClientTypes.ThreatDetectedByName? = nil,
            threatsDetectedItemCount: GuardDutyClientTypes.ThreatsDetectedItemCount? = nil
        )
        {
            self.highestSeverityThreatDetails = highestSeverityThreatDetails
            self.scannedItemCount = scannedItemCount
            self.threatDetectedByName = threatDetectedByName
            self.threatsDetectedItemCount = threatsDetectedItemCount
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains details from the malware scan that created a finding.
    public struct EbsVolumeScanDetails {
        /// Returns the completion date and time of the malware scan.
        public var scanCompletedAt: Foundation.Date?
        /// Contains a complete view providing malware scan result details.
        public var scanDetections: GuardDutyClientTypes.ScanDetections?
        /// Unique Id of the malware scan that generated the finding.
        public var scanId: Swift.String?
        /// Returns the start date and time of the malware scan.
        public var scanStartedAt: Foundation.Date?
        /// Specifies the scan type that invoked the malware scan.
        public var scanType: GuardDutyClientTypes.ScanType?
        /// Contains list of threat intelligence sources used to detect threats.
        public var sources: [Swift.String]?
        /// GuardDuty finding ID that triggered a malware scan.
        public var triggerFindingId: Swift.String?

        public init(
            scanCompletedAt: Foundation.Date? = nil,
            scanDetections: GuardDutyClientTypes.ScanDetections? = nil,
            scanId: Swift.String? = nil,
            scanStartedAt: Foundation.Date? = nil,
            scanType: GuardDutyClientTypes.ScanType? = nil,
            sources: [Swift.String]? = nil,
            triggerFindingId: Swift.String? = nil
        )
        {
            self.scanCompletedAt = scanCompletedAt
            self.scanDetections = scanDetections
            self.scanId = scanId
            self.scanStartedAt = scanStartedAt
            self.scanType = scanType
            self.sources = sources
            self.triggerFindingId = triggerFindingId
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about a tag associated with the EC2 instance.
    public struct Tag {
        /// The EC2 instance tag key.
        public var key: Swift.String?
        /// The EC2 instance tag value.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension GuardDutyClientTypes {
    /// Represents a pre-existing file or directory on the host machine that the volume maps to.
    public struct HostPath {
        /// Path of the file or directory on the host that the volume maps to.
        public var path: Swift.String?

        public init(
            path: Swift.String? = nil
        )
        {
            self.path = path
        }
    }

}

extension GuardDutyClientTypes {
    /// Volume used by the Kubernetes workload.
    public struct Volume {
        /// Represents a pre-existing file or directory on the host machine that the volume maps to.
        public var hostPath: GuardDutyClientTypes.HostPath?
        /// Volume name.
        public var name: Swift.String?

        public init(
            hostPath: GuardDutyClientTypes.HostPath? = nil,
            name: Swift.String? = nil
        )
        {
            self.hostPath = hostPath
            self.name = name
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about the task in an ECS cluster.
    public struct EcsTaskDetails {
        /// The Amazon Resource Name (ARN) of the task.
        public var arn: Swift.String?
        /// The containers that's associated with the task.
        public var containers: [GuardDutyClientTypes.Container]?
        /// The ARN of the task definition that creates the task.
        public var definitionArn: Swift.String?
        /// The name of the task group that's associated with the task.
        public var group: Swift.String?
        /// A capacity on which the task is running. For example, Fargate and EC2.
        public var launchType: Swift.String?
        /// The Unix timestamp for the time when the task started.
        public var startedAt: Foundation.Date?
        /// Contains the tag specified when a task is started.
        public var startedBy: Swift.String?
        /// The tags of the ECS Task.
        public var tags: [GuardDutyClientTypes.Tag]?
        /// The Unix timestamp for the time when the task was created.
        public var taskCreatedAt: Foundation.Date?
        /// The version counter for the task.
        public var version: Swift.String?
        /// The list of data volume definitions for the task.
        public var volumes: [GuardDutyClientTypes.Volume]?

        public init(
            arn: Swift.String? = nil,
            containers: [GuardDutyClientTypes.Container]? = nil,
            definitionArn: Swift.String? = nil,
            group: Swift.String? = nil,
            launchType: Swift.String? = nil,
            startedAt: Foundation.Date? = nil,
            startedBy: Swift.String? = nil,
            tags: [GuardDutyClientTypes.Tag]? = nil,
            taskCreatedAt: Foundation.Date? = nil,
            version: Swift.String? = nil,
            volumes: [GuardDutyClientTypes.Volume]? = nil
        )
        {
            self.arn = arn
            self.containers = containers
            self.definitionArn = definitionArn
            self.group = group
            self.launchType = launchType
            self.startedAt = startedAt
            self.startedBy = startedBy
            self.tags = tags
            self.taskCreatedAt = taskCreatedAt
            self.version = version
            self.volumes = volumes
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about the details of the ECS Cluster.
    public struct EcsClusterDetails {
        /// The number of services that are running on the cluster in an ACTIVE state.
        public var activeServicesCount: Swift.Int?
        /// The Amazon Resource Name (ARN) that identifies the cluster.
        public var arn: Swift.String?
        /// The name of the ECS Cluster.
        public var name: Swift.String?
        /// The number of container instances registered into the cluster.
        public var registeredContainerInstancesCount: Swift.Int?
        /// The number of tasks in the cluster that are in the RUNNING state.
        public var runningTasksCount: Swift.Int?
        /// The status of the ECS cluster.
        public var status: Swift.String?
        /// The tags of the ECS Cluster.
        public var tags: [GuardDutyClientTypes.Tag]?
        /// Contains information about the details of the ECS Task.
        public var taskDetails: GuardDutyClientTypes.EcsTaskDetails?

        public init(
            activeServicesCount: Swift.Int? = nil,
            arn: Swift.String? = nil,
            name: Swift.String? = nil,
            registeredContainerInstancesCount: Swift.Int? = nil,
            runningTasksCount: Swift.Int? = nil,
            status: Swift.String? = nil,
            tags: [GuardDutyClientTypes.Tag]? = nil,
            taskDetails: GuardDutyClientTypes.EcsTaskDetails? = nil
        )
        {
            self.activeServicesCount = activeServicesCount
            self.arn = arn
            self.name = name
            self.registeredContainerInstancesCount = registeredContainerInstancesCount
            self.runningTasksCount = runningTasksCount
            self.status = status
            self.tags = tags
            self.taskDetails = taskDetails
        }
    }

}

extension GuardDutyClientTypes {
    /// Details about the EKS cluster involved in a Kubernetes finding.
    public struct EksClusterDetails {
        /// EKS cluster ARN.
        public var arn: Swift.String?
        /// The timestamp when the EKS cluster was created.
        public var createdAt: Foundation.Date?
        /// EKS cluster name.
        public var name: Swift.String?
        /// The EKS cluster status.
        public var status: Swift.String?
        /// The EKS cluster tags.
        public var tags: [GuardDutyClientTypes.Tag]?
        /// The VPC ID to which the EKS cluster is attached.
        public var vpcId: Swift.String?

        public init(
            arn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            name: Swift.String? = nil,
            status: Swift.String? = nil,
            tags: [GuardDutyClientTypes.Tag]? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.name = name
            self.status = status
            self.tags = tags
            self.vpcId = vpcId
        }
    }

}

public struct EnableOrganizationAdminAccountInput {
    /// The Amazon Web Services account ID for the organization account to be enabled as a GuardDuty delegated administrator.
    /// This member is required.
    public var adminAccountId: Swift.String?

    public init(
        adminAccountId: Swift.String? = nil
    )
    {
        self.adminAccountId = adminAccountId
    }
}

public struct EnableOrganizationAdminAccountOutput {

    public init() { }
}

extension GuardDutyClientTypes {
    /// An instance of a threat intelligence detail that constitutes evidence for the finding.
    public struct ThreatIntelligenceDetail {
        /// SHA256 of the file that generated the finding.
        public var threatFileSha256: Swift.String?
        /// The name of the threat intelligence list that triggered the finding.
        public var threatListName: Swift.String?
        /// A list of names of the threats in the threat intelligence list that triggered the finding.
        public var threatNames: [Swift.String]?

        public init(
            threatFileSha256: Swift.String? = nil,
            threatListName: Swift.String? = nil,
            threatNames: [Swift.String]? = nil
        )
        {
            self.threatFileSha256 = threatFileSha256
            self.threatListName = threatListName
            self.threatNames = threatNames
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about the reason that the finding was generated.
    public struct Evidence {
        /// A list of threat intelligence details related to the evidence.
        public var threatIntelligenceDetails: [GuardDutyClientTypes.ThreatIntelligenceDetail]?

        public init(
            threatIntelligenceDetails: [GuardDutyClientTypes.ThreatIntelligenceDetail]? = nil
        )
        {
            self.threatIntelligenceDetails = threatIntelligenceDetails
        }
    }

}

extension GuardDutyClientTypes {

    public enum Feedback: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case notUseful
        case useful
        case sdkUnknown(Swift.String)

        public static var allCases: [Feedback] {
            return [
                .notUseful,
                .useful
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .notUseful: return "NOT_USEFUL"
            case .useful: return "USEFUL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GuardDutyClientTypes {
    /// Contains information about the EC2 instance profile.
    public struct IamInstanceProfile {
        /// The profile ARN of the EC2 instance.
        public var arn: Swift.String?
        /// The profile ID of the EC2 instance.
        public var id: Swift.String?

        public init(
            arn: Swift.String? = nil,
            id: Swift.String? = nil
        )
        {
            self.arn = arn
            self.id = id
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains other private IP address information of the EC2 instance.
    public struct PrivateIpAddressDetails {
        /// The private DNS name of the EC2 instance.
        public var privateDnsName: Swift.String?
        /// The private IP address of the EC2 instance.
        public var privateIpAddress: Swift.String?

        public init(
            privateDnsName: Swift.String? = nil,
            privateIpAddress: Swift.String? = nil
        )
        {
            self.privateDnsName = privateDnsName
            self.privateIpAddress = privateIpAddress
        }
    }

}

extension GuardDutyClientTypes.PrivateIpAddressDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PrivateIpAddressDetails(privateDnsName: \(Swift.String(describing: privateDnsName)), privateIpAddress: \"CONTENT_REDACTED\")"}
}

extension GuardDutyClientTypes {
    /// Contains information about the security groups associated with the EC2 instance.
    public struct SecurityGroup {
        /// The security group ID of the EC2 instance.
        public var groupId: Swift.String?
        /// The security group name of the EC2 instance.
        public var groupName: Swift.String?

        public init(
            groupId: Swift.String? = nil,
            groupName: Swift.String? = nil
        )
        {
            self.groupId = groupId
            self.groupName = groupName
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about the elastic network interface of the EC2 instance.
    public struct NetworkInterface {
        /// A list of IPv6 addresses for the EC2 instance.
        public var ipv6Addresses: [Swift.String]?
        /// The ID of the network interface.
        public var networkInterfaceId: Swift.String?
        /// The private DNS name of the EC2 instance.
        public var privateDnsName: Swift.String?
        /// The private IP address of the EC2 instance.
        public var privateIpAddress: Swift.String?
        /// Other private IP address information of the EC2 instance.
        public var privateIpAddresses: [GuardDutyClientTypes.PrivateIpAddressDetails]?
        /// The public DNS name of the EC2 instance.
        public var publicDnsName: Swift.String?
        /// The public IP address of the EC2 instance.
        public var publicIp: Swift.String?
        /// The security groups associated with the EC2 instance.
        public var securityGroups: [GuardDutyClientTypes.SecurityGroup]?
        /// The subnet ID of the EC2 instance.
        public var subnetId: Swift.String?
        /// The VPC ID of the EC2 instance.
        public var vpcId: Swift.String?

        public init(
            ipv6Addresses: [Swift.String]? = nil,
            networkInterfaceId: Swift.String? = nil,
            privateDnsName: Swift.String? = nil,
            privateIpAddress: Swift.String? = nil,
            privateIpAddresses: [GuardDutyClientTypes.PrivateIpAddressDetails]? = nil,
            publicDnsName: Swift.String? = nil,
            publicIp: Swift.String? = nil,
            securityGroups: [GuardDutyClientTypes.SecurityGroup]? = nil,
            subnetId: Swift.String? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.ipv6Addresses = ipv6Addresses
            self.networkInterfaceId = networkInterfaceId
            self.privateDnsName = privateDnsName
            self.privateIpAddress = privateIpAddress
            self.privateIpAddresses = privateIpAddresses
            self.publicDnsName = publicDnsName
            self.publicIp = publicIp
            self.securityGroups = securityGroups
            self.subnetId = subnetId
            self.vpcId = vpcId
        }
    }

}

extension GuardDutyClientTypes.NetworkInterface: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NetworkInterface(ipv6Addresses: \(Swift.String(describing: ipv6Addresses)), networkInterfaceId: \(Swift.String(describing: networkInterfaceId)), privateDnsName: \(Swift.String(describing: privateDnsName)), privateIpAddresses: \(Swift.String(describing: privateIpAddresses)), publicDnsName: \(Swift.String(describing: publicDnsName)), publicIp: \(Swift.String(describing: publicIp)), securityGroups: \(Swift.String(describing: securityGroups)), subnetId: \(Swift.String(describing: subnetId)), vpcId: \(Swift.String(describing: vpcId)), privateIpAddress: \"CONTENT_REDACTED\")"}
}

extension GuardDutyClientTypes {
    /// Contains information about the product code for the EC2 instance.
    public struct ProductCode {
        /// The product code information.
        public var code: Swift.String?
        /// The product code type.
        public var productType: Swift.String?

        public init(
            code: Swift.String? = nil,
            productType: Swift.String? = nil
        )
        {
            self.code = code
            self.productType = productType
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about the details of an instance.
    public struct InstanceDetails {
        /// The Availability Zone of the EC2 instance.
        public var availabilityZone: Swift.String?
        /// The profile information of the EC2 instance.
        public var iamInstanceProfile: GuardDutyClientTypes.IamInstanceProfile?
        /// The image description of the EC2 instance.
        public var imageDescription: Swift.String?
        /// The image ID of the EC2 instance.
        public var imageId: Swift.String?
        /// The ID of the EC2 instance.
        public var instanceId: Swift.String?
        /// The state of the EC2 instance.
        public var instanceState: Swift.String?
        /// The type of the EC2 instance.
        public var instanceType: Swift.String?
        /// The launch time of the EC2 instance.
        public var launchTime: Swift.String?
        /// The elastic network interface information of the EC2 instance.
        public var networkInterfaces: [GuardDutyClientTypes.NetworkInterface]?
        /// The Amazon Resource Name (ARN) of the Amazon Web Services Outpost. Only applicable to Amazon Web Services Outposts instances.
        public var outpostArn: Swift.String?
        /// The platform of the EC2 instance.
        public var platform: Swift.String?
        /// The product code of the EC2 instance.
        public var productCodes: [GuardDutyClientTypes.ProductCode]?
        /// The tags of the EC2 instance.
        public var tags: [GuardDutyClientTypes.Tag]?

        public init(
            availabilityZone: Swift.String? = nil,
            iamInstanceProfile: GuardDutyClientTypes.IamInstanceProfile? = nil,
            imageDescription: Swift.String? = nil,
            imageId: Swift.String? = nil,
            instanceId: Swift.String? = nil,
            instanceState: Swift.String? = nil,
            instanceType: Swift.String? = nil,
            launchTime: Swift.String? = nil,
            networkInterfaces: [GuardDutyClientTypes.NetworkInterface]? = nil,
            outpostArn: Swift.String? = nil,
            platform: Swift.String? = nil,
            productCodes: [GuardDutyClientTypes.ProductCode]? = nil,
            tags: [GuardDutyClientTypes.Tag]? = nil
        )
        {
            self.availabilityZone = availabilityZone
            self.iamInstanceProfile = iamInstanceProfile
            self.imageDescription = imageDescription
            self.imageId = imageId
            self.instanceId = instanceId
            self.instanceState = instanceState
            self.instanceType = instanceType
            self.launchTime = launchTime
            self.networkInterfaces = networkInterfaces
            self.outpostArn = outpostArn
            self.platform = platform
            self.productCodes = productCodes
            self.tags = tags
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about the impersonated user.
    public struct ImpersonatedUser {
        /// The group to which the user name belongs.
        public var groups: [Swift.String]?
        /// Information about the username that was being impersonated.
        public var username: Swift.String?

        public init(
            groups: [Swift.String]? = nil,
            username: Swift.String? = nil
        )
        {
            self.groups = groups
            self.username = username
        }
    }

}

extension GuardDutyClientTypes {
    /// Details about the Kubernetes user involved in a Kubernetes finding.
    public struct KubernetesUserDetails {
        /// The groups that include the user who called the Kubernetes API.
        public var groups: [Swift.String]?
        /// Information about the impersonated user.
        public var impersonatedUser: GuardDutyClientTypes.ImpersonatedUser?
        /// Entity that assumes the IAM role when Kubernetes RBAC permissions are assigned to that role.
        public var sessionName: [Swift.String]?
        /// The user ID of the user who called the Kubernetes API.
        public var uid: Swift.String?
        /// The username of the user who called the Kubernetes API.
        public var username: Swift.String?

        public init(
            groups: [Swift.String]? = nil,
            impersonatedUser: GuardDutyClientTypes.ImpersonatedUser? = nil,
            sessionName: [Swift.String]? = nil,
            uid: Swift.String? = nil,
            username: Swift.String? = nil
        )
        {
            self.groups = groups
            self.impersonatedUser = impersonatedUser
            self.sessionName = sessionName
            self.uid = uid
            self.username = username
        }
    }

}

extension GuardDutyClientTypes {
    /// Details about the Kubernetes workload involved in a Kubernetes finding.
    public struct KubernetesWorkloadDetails {
        /// Containers running as part of the Kubernetes workload.
        public var containers: [GuardDutyClientTypes.Container]?
        /// Whether the host IPC flag is enabled for the pods in the workload.
        public var hostIPC: Swift.Bool?
        /// Whether the hostNetwork flag is enabled for the pods included in the workload.
        public var hostNetwork: Swift.Bool?
        /// Whether the host PID flag is enabled for the pods in the workload.
        public var hostPID: Swift.Bool?
        /// Kubernetes workload name.
        public var name: Swift.String?
        /// Kubernetes namespace that the workload is part of.
        public var namespace: Swift.String?
        /// The service account name that is associated with a Kubernetes workload.
        public var serviceAccountName: Swift.String?
        /// Kubernetes workload type (e.g. Pod, Deployment, etc.).
        public var type: Swift.String?
        /// Kubernetes workload ID.
        public var uid: Swift.String?
        /// Volumes used by the Kubernetes workload.
        public var volumes: [GuardDutyClientTypes.Volume]?

        public init(
            containers: [GuardDutyClientTypes.Container]? = nil,
            hostIPC: Swift.Bool? = nil,
            hostNetwork: Swift.Bool? = nil,
            hostPID: Swift.Bool? = nil,
            name: Swift.String? = nil,
            namespace: Swift.String? = nil,
            serviceAccountName: Swift.String? = nil,
            type: Swift.String? = nil,
            uid: Swift.String? = nil,
            volumes: [GuardDutyClientTypes.Volume]? = nil
        )
        {
            self.containers = containers
            self.hostIPC = hostIPC
            self.hostNetwork = hostNetwork
            self.hostPID = hostPID
            self.name = name
            self.namespace = namespace
            self.serviceAccountName = serviceAccountName
            self.type = type
            self.uid = uid
            self.volumes = volumes
        }
    }

}

extension GuardDutyClientTypes {
    /// Details about Kubernetes resources such as a Kubernetes user or workload resource involved in a Kubernetes finding.
    public struct KubernetesDetails {
        /// Details about the Kubernetes user involved in a Kubernetes finding.
        public var kubernetesUserDetails: GuardDutyClientTypes.KubernetesUserDetails?
        /// Details about the Kubernetes workload involved in a Kubernetes finding.
        public var kubernetesWorkloadDetails: GuardDutyClientTypes.KubernetesWorkloadDetails?

        public init(
            kubernetesUserDetails: GuardDutyClientTypes.KubernetesUserDetails? = nil,
            kubernetesWorkloadDetails: GuardDutyClientTypes.KubernetesWorkloadDetails? = nil
        )
        {
            self.kubernetesUserDetails = kubernetesUserDetails
            self.kubernetesWorkloadDetails = kubernetesWorkloadDetails
        }
    }

}

extension GuardDutyClientTypes {
    /// Amazon Virtual Private Cloud configuration details associated with your Lambda function.
    public struct VpcConfig {
        /// The identifier of the security group attached to the Lambda function.
        public var securityGroups: [GuardDutyClientTypes.SecurityGroup]?
        /// The identifiers of the subnets that are associated with your Lambda function.
        public var subnetIds: [Swift.String]?
        /// The identifier of the Amazon Virtual Private Cloud.
        public var vpcId: Swift.String?

        public init(
            securityGroups: [GuardDutyClientTypes.SecurityGroup]? = nil,
            subnetIds: [Swift.String]? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.securityGroups = securityGroups
            self.subnetIds = subnetIds
            self.vpcId = vpcId
        }
    }

}

extension GuardDutyClientTypes {
    /// Information about the Lambda function involved in the finding.
    public struct LambdaDetails {
        /// Description of the Lambda function.
        public var description: Swift.String?
        /// Amazon Resource Name (ARN) of the Lambda function.
        public var functionArn: Swift.String?
        /// Name of the Lambda function.
        public var functionName: Swift.String?
        /// The version of the Lambda function.
        public var functionVersion: Swift.String?
        /// The timestamp when the Lambda function was last modified. This field is in the UTC date string format (2023-03-22T19:37:20.168Z).
        public var lastModifiedAt: Foundation.Date?
        /// The revision ID of the Lambda function version.
        public var revisionId: Swift.String?
        /// The execution role of the Lambda function.
        public var role: Swift.String?
        /// A list of tags attached to this resource, listed in the format of key:value pair.
        public var tags: [GuardDutyClientTypes.Tag]?
        /// Amazon Virtual Private Cloud configuration details associated with your Lambda function.
        public var vpcConfig: GuardDutyClientTypes.VpcConfig?

        public init(
            description: Swift.String? = nil,
            functionArn: Swift.String? = nil,
            functionName: Swift.String? = nil,
            functionVersion: Swift.String? = nil,
            lastModifiedAt: Foundation.Date? = nil,
            revisionId: Swift.String? = nil,
            role: Swift.String? = nil,
            tags: [GuardDutyClientTypes.Tag]? = nil,
            vpcConfig: GuardDutyClientTypes.VpcConfig? = nil
        )
        {
            self.description = description
            self.functionArn = functionArn
            self.functionName = functionName
            self.functionVersion = functionVersion
            self.lastModifiedAt = lastModifiedAt
            self.revisionId = revisionId
            self.role = role
            self.tags = tags
            self.vpcConfig = vpcConfig
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about the resource type RDSDBInstance involved in a GuardDuty finding.
    public struct RdsDbInstanceDetails {
        /// The identifier of the database cluster that contains the database instance ID involved in the finding.
        public var dbClusterIdentifier: Swift.String?
        /// The Amazon Resource Name (ARN) that identifies the database instance involved in the finding.
        public var dbInstanceArn: Swift.String?
        /// The identifier associated to the database instance that was involved in the finding.
        public var dbInstanceIdentifier: Swift.String?
        /// The database engine of the database instance involved in the finding.
        public var engine: Swift.String?
        /// The version of the database engine that was involved in the finding.
        public var engineVersion: Swift.String?
        /// Instance tag key-value pairs associated with the database instance ID.
        public var tags: [GuardDutyClientTypes.Tag]?

        public init(
            dbClusterIdentifier: Swift.String? = nil,
            dbInstanceArn: Swift.String? = nil,
            dbInstanceIdentifier: Swift.String? = nil,
            engine: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            tags: [GuardDutyClientTypes.Tag]? = nil
        )
        {
            self.dbClusterIdentifier = dbClusterIdentifier
            self.dbInstanceArn = dbInstanceArn
            self.dbInstanceIdentifier = dbInstanceIdentifier
            self.engine = engine
            self.engineVersion = engineVersion
            self.tags = tags
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about the user and authentication details for a database instance involved in the finding.
    public struct RdsDbUserDetails {
        /// The application name used in the anomalous login attempt.
        public var application: Swift.String?
        /// The authentication method used by the user involved in the finding.
        public var authMethod: Swift.String?
        /// The name of the database instance involved in the anomalous login attempt.
        public var database: Swift.String?
        /// The version of the Secure Socket Layer (SSL) used for the network.
        public var ssl: Swift.String?
        /// The user name used in the anomalous login attempt.
        public var user: Swift.String?

        public init(
            application: Swift.String? = nil,
            authMethod: Swift.String? = nil,
            database: Swift.String? = nil,
            ssl: Swift.String? = nil,
            user: Swift.String? = nil
        )
        {
            self.application = application
            self.authMethod = authMethod
            self.database = database
            self.ssl = ssl
            self.user = user
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information on the owner of the bucket.
    public struct Owner {
        /// The canonical user ID of the bucket owner. For information about locating your canonical user ID see [Finding Your Account Canonical User ID.](https://docs.aws.amazon.com/general/latest/gr/acct-identifiers.html#FindingCanonicalId)
        public var id: Swift.String?

        public init(
            id: Swift.String? = nil
        )
        {
            self.id = id
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about how permissions are configured for the S3 bucket.
    public struct PermissionConfiguration {
        /// Contains information about the account level permissions on the S3 bucket.
        public var accountLevelPermissions: GuardDutyClientTypes.AccountLevelPermissions?
        /// Contains information about the bucket level permissions for the S3 bucket.
        public var bucketLevelPermissions: GuardDutyClientTypes.BucketLevelPermissions?

        public init(
            accountLevelPermissions: GuardDutyClientTypes.AccountLevelPermissions? = nil,
            bucketLevelPermissions: GuardDutyClientTypes.BucketLevelPermissions? = nil
        )
        {
            self.accountLevelPermissions = accountLevelPermissions
            self.bucketLevelPermissions = bucketLevelPermissions
        }
    }

}

extension GuardDutyClientTypes {
    /// Describes the public access policies that apply to the S3 bucket.
    public struct PublicAccess {
        /// Describes the effective permission on this bucket after factoring all attached policies.
        public var effectivePermission: Swift.String?
        /// Contains information about how permissions are configured for the S3 bucket.
        public var permissionConfiguration: GuardDutyClientTypes.PermissionConfiguration?

        public init(
            effectivePermission: Swift.String? = nil,
            permissionConfiguration: GuardDutyClientTypes.PermissionConfiguration? = nil
        )
        {
            self.effectivePermission = effectivePermission
            self.permissionConfiguration = permissionConfiguration
        }
    }

}

extension GuardDutyClientTypes {
    /// Information about the S3 object that was scanned
    public struct S3ObjectDetail {
        /// The entity tag is a hash of the S3 object. The ETag reflects changes only to the contents of an object, and not its metadata.
        public var eTag: Swift.String?
        /// Hash of the threat detected in this finding.
        public var hash: Swift.String?
        /// Key of the S3 object.
        public var key: Swift.String?
        /// Amazon Resource Name (ARN) of the S3 object.
        public var objectArn: Swift.String?
        /// Version ID of the object.
        public var versionId: Swift.String?

        public init(
            eTag: Swift.String? = nil,
            hash: Swift.String? = nil,
            key: Swift.String? = nil,
            objectArn: Swift.String? = nil,
            versionId: Swift.String? = nil
        )
        {
            self.eTag = eTag
            self.hash = hash
            self.key = key
            self.objectArn = objectArn
            self.versionId = versionId
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information on the S3 bucket.
    public struct S3BucketDetail {
        /// The Amazon Resource Name (ARN) of the S3 bucket.
        public var arn: Swift.String?
        /// The date and time the bucket was created at.
        public var createdAt: Foundation.Date?
        /// Describes the server side encryption method used in the S3 bucket.
        public var defaultServerSideEncryption: GuardDutyClientTypes.DefaultServerSideEncryption?
        /// The name of the S3 bucket.
        public var name: Swift.String?
        /// The owner of the S3 bucket.
        public var owner: GuardDutyClientTypes.Owner?
        /// Describes the public access policies that apply to the S3 bucket.
        public var publicAccess: GuardDutyClientTypes.PublicAccess?
        /// Information about the S3 object that was scanned.
        public var s3ObjectDetails: [GuardDutyClientTypes.S3ObjectDetail]?
        /// All tags attached to the S3 bucket
        public var tags: [GuardDutyClientTypes.Tag]?
        /// Describes whether the bucket is a source or destination bucket.
        public var type: Swift.String?

        public init(
            arn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            defaultServerSideEncryption: GuardDutyClientTypes.DefaultServerSideEncryption? = nil,
            name: Swift.String? = nil,
            owner: GuardDutyClientTypes.Owner? = nil,
            publicAccess: GuardDutyClientTypes.PublicAccess? = nil,
            s3ObjectDetails: [GuardDutyClientTypes.S3ObjectDetail]? = nil,
            tags: [GuardDutyClientTypes.Tag]? = nil,
            type: Swift.String? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.defaultServerSideEncryption = defaultServerSideEncryption
            self.name = name
            self.owner = owner
            self.publicAccess = publicAccess
            self.s3ObjectDetails = s3ObjectDetails
            self.tags = tags
            self.type = type
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about the Amazon Web Services resource associated with the activity that prompted GuardDuty to generate a finding.
    public struct Resource {
        /// The IAM access key details (user information) of a user that engaged in the activity that prompted GuardDuty to generate a finding.
        public var accessKeyDetails: GuardDutyClientTypes.AccessKeyDetails?
        /// Details of a container.
        public var containerDetails: GuardDutyClientTypes.Container?
        /// Contains list of scanned and skipped EBS volumes with details.
        public var ebsVolumeDetails: GuardDutyClientTypes.EbsVolumeDetails?
        /// Contains information about the details of the ECS Cluster.
        public var ecsClusterDetails: GuardDutyClientTypes.EcsClusterDetails?
        /// Details about the EKS cluster involved in a Kubernetes finding.
        public var eksClusterDetails: GuardDutyClientTypes.EksClusterDetails?
        /// The information about the EC2 instance associated with the activity that prompted GuardDuty to generate a finding.
        public var instanceDetails: GuardDutyClientTypes.InstanceDetails?
        /// Details about the Kubernetes user and workload involved in a Kubernetes finding.
        public var kubernetesDetails: GuardDutyClientTypes.KubernetesDetails?
        /// Contains information about the Lambda function that was involved in a finding.
        public var lambdaDetails: GuardDutyClientTypes.LambdaDetails?
        /// Contains information about the database instance to which an anomalous login attempt was made.
        public var rdsDbInstanceDetails: GuardDutyClientTypes.RdsDbInstanceDetails?
        /// Contains information about the user details through which anomalous login attempt was made.
        public var rdsDbUserDetails: GuardDutyClientTypes.RdsDbUserDetails?
        /// The type of Amazon Web Services resource.
        public var resourceType: Swift.String?
        /// Contains information on the S3 bucket.
        public var s3BucketDetails: [GuardDutyClientTypes.S3BucketDetail]?

        public init(
            accessKeyDetails: GuardDutyClientTypes.AccessKeyDetails? = nil,
            containerDetails: GuardDutyClientTypes.Container? = nil,
            ebsVolumeDetails: GuardDutyClientTypes.EbsVolumeDetails? = nil,
            ecsClusterDetails: GuardDutyClientTypes.EcsClusterDetails? = nil,
            eksClusterDetails: GuardDutyClientTypes.EksClusterDetails? = nil,
            instanceDetails: GuardDutyClientTypes.InstanceDetails? = nil,
            kubernetesDetails: GuardDutyClientTypes.KubernetesDetails? = nil,
            lambdaDetails: GuardDutyClientTypes.LambdaDetails? = nil,
            rdsDbInstanceDetails: GuardDutyClientTypes.RdsDbInstanceDetails? = nil,
            rdsDbUserDetails: GuardDutyClientTypes.RdsDbUserDetails? = nil,
            resourceType: Swift.String? = nil,
            s3BucketDetails: [GuardDutyClientTypes.S3BucketDetail]? = nil
        )
        {
            self.accessKeyDetails = accessKeyDetails
            self.containerDetails = containerDetails
            self.ebsVolumeDetails = ebsVolumeDetails
            self.ecsClusterDetails = ecsClusterDetails
            self.eksClusterDetails = eksClusterDetails
            self.instanceDetails = instanceDetails
            self.kubernetesDetails = kubernetesDetails
            self.lambdaDetails = lambdaDetails
            self.rdsDbInstanceDetails = rdsDbInstanceDetails
            self.rdsDbUserDetails = rdsDbUserDetails
            self.resourceType = resourceType
            self.s3BucketDetails = s3BucketDetails
        }
    }

}

extension GuardDutyClientTypes {
    /// Additional information about the generated finding.
    public struct ServiceAdditionalInfo {
        /// Describes the type of the additional information.
        public var type: Swift.String?
        /// This field specifies the value of the additional information.
        public var value: Swift.String?

        public init(
            type: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.type = type
            self.value = value
        }
    }

}

extension GuardDutyClientTypes {
    /// Information about the nested item path and hash of the protected resource.
    public struct ItemPath {
        /// The hash value of the infected resource.
        public var hash: Swift.String?
        /// The nested item path where the infected file was found.
        public var nestedItemPath: Swift.String?

        public init(
            hash: Swift.String? = nil,
            nestedItemPath: Swift.String? = nil
        )
        {
            self.hash = hash
            self.nestedItemPath = nestedItemPath
        }
    }

}

extension GuardDutyClientTypes {
    /// Information about the detected threats associated with the generated finding.
    public struct Threat {
        /// Information about the nested item path and hash of the protected resource.
        public var itemPaths: [GuardDutyClientTypes.ItemPath]?
        /// Name of the detected threat that caused GuardDuty to generate this finding.
        public var name: Swift.String?
        /// Source of the threat that generated this finding.
        public var source: Swift.String?

        public init(
            itemPaths: [GuardDutyClientTypes.ItemPath]? = nil,
            name: Swift.String? = nil,
            source: Swift.String? = nil
        )
        {
            self.itemPaths = itemPaths
            self.name = name
            self.source = source
        }
    }

}

extension GuardDutyClientTypes {
    /// Information about the malware scan that generated a GuardDuty finding.
    public struct MalwareScanDetails {
        /// Information about the detected threats associated with the generated GuardDuty finding.
        public var threats: [GuardDutyClientTypes.Threat]?

        public init(
            threats: [GuardDutyClientTypes.Threat]? = nil
        )
        {
            self.threats = threats
        }
    }

}

extension GuardDutyClientTypes {
    /// Information about the runtime process details.
    public struct LineageObject {
        /// The effective user ID that was used to execute the process.
        public var euid: Swift.Int?
        /// The absolute path of the process executable file.
        public var executablePath: Swift.String?
        /// The name of the process.
        public var name: Swift.String?
        /// The process ID of the child process.
        public var namespacePid: Swift.Int?
        /// The unique ID of the parent process. This ID is assigned to the parent process by GuardDuty.
        public var parentUuid: Swift.String?
        /// The ID of the process.
        public var pid: Swift.Int?
        /// The time when the process started. This is in UTC format.
        public var startTime: Foundation.Date?
        /// The user ID of the user that executed the process.
        public var userId: Swift.Int?
        /// The unique ID assigned to the process by GuardDuty.
        public var uuid: Swift.String?

        public init(
            euid: Swift.Int? = nil,
            executablePath: Swift.String? = nil,
            name: Swift.String? = nil,
            namespacePid: Swift.Int? = nil,
            parentUuid: Swift.String? = nil,
            pid: Swift.Int? = nil,
            startTime: Foundation.Date? = nil,
            userId: Swift.Int? = nil,
            uuid: Swift.String? = nil
        )
        {
            self.euid = euid
            self.executablePath = executablePath
            self.name = name
            self.namespacePid = namespacePid
            self.parentUuid = parentUuid
            self.pid = pid
            self.startTime = startTime
            self.userId = userId
            self.uuid = uuid
        }
    }

}

extension GuardDutyClientTypes {
    /// Information about the observed process.
    public struct ProcessDetails {
        /// The effective user ID of the user that executed the process.
        public var euid: Swift.Int?
        /// The absolute path of the process executable file.
        public var executablePath: Swift.String?
        /// The SHA256 hash of the process executable.
        public var executableSha256: Swift.String?
        /// Information about the process's lineage.
        public var lineage: [GuardDutyClientTypes.LineageObject]?
        /// The name of the process.
        public var name: Swift.String?
        /// The ID of the child process.
        public var namespacePid: Swift.Int?
        /// The unique ID of the parent process. This ID is assigned to the parent process by GuardDuty.
        public var parentUuid: Swift.String?
        /// The ID of the process.
        public var pid: Swift.Int?
        /// The present working directory of the process.
        public var pwd: Swift.String?
        /// The time when the process started. This is in UTC format.
        public var startTime: Foundation.Date?
        /// The user that executed the process.
        public var user: Swift.String?
        /// The unique ID of the user that executed the process.
        public var userId: Swift.Int?
        /// The unique ID assigned to the process by GuardDuty.
        public var uuid: Swift.String?

        public init(
            euid: Swift.Int? = nil,
            executablePath: Swift.String? = nil,
            executableSha256: Swift.String? = nil,
            lineage: [GuardDutyClientTypes.LineageObject]? = nil,
            name: Swift.String? = nil,
            namespacePid: Swift.Int? = nil,
            parentUuid: Swift.String? = nil,
            pid: Swift.Int? = nil,
            pwd: Swift.String? = nil,
            startTime: Foundation.Date? = nil,
            user: Swift.String? = nil,
            userId: Swift.Int? = nil,
            uuid: Swift.String? = nil
        )
        {
            self.euid = euid
            self.executablePath = executablePath
            self.executableSha256 = executableSha256
            self.lineage = lineage
            self.name = name
            self.namespacePid = namespacePid
            self.parentUuid = parentUuid
            self.pid = pid
            self.pwd = pwd
            self.startTime = startTime
            self.user = user
            self.userId = userId
            self.uuid = uuid
        }
    }

}

extension GuardDutyClientTypes {
    /// Additional information about the suspicious activity.
    public struct RuntimeContext {
        /// Represents the communication protocol associated with the address. For example, the address family AF_INET is used for IP version of 4 protocol.
        public var addressFamily: Swift.String?
        /// Example of the command line involved in the suspicious activity.
        public var commandLineExample: Swift.String?
        /// Represents the type of mounted fileSystem.
        public var fileSystemType: Swift.String?
        /// Represents options that control the behavior of a runtime operation or action. For example, a filesystem mount operation may contain a read-only flag.
        public var flags: [Swift.String]?
        /// Specifies a particular protocol within the address family. Usually there is a single protocol in address families. For example, the address family AF_INET only has the IP protocol.
        public var ianaProtocolNumber: Swift.Int?
        /// The value of the LD_PRELOAD environment variable.
        public var ldPreloadValue: Swift.String?
        /// The path to the new library that was loaded.
        public var libraryPath: Swift.String?
        /// Specifies the Region of a process's address space such as stack and heap.
        public var memoryRegions: [Swift.String]?
        /// The timestamp at which the process modified the current process. The timestamp is in UTC date string format.
        public var modifiedAt: Foundation.Date?
        /// Information about the process that modified the current process. This is available for multiple finding types.
        public var modifyingProcess: GuardDutyClientTypes.ProcessDetails?
        /// The path to the module loaded into the kernel.
        public var moduleFilePath: Swift.String?
        /// The name of the module loaded into the kernel.
        public var moduleName: Swift.String?
        /// The SHA256 hash of the module.
        public var moduleSha256: Swift.String?
        /// The path on the host that is mounted by the container.
        public var mountSource: Swift.String?
        /// The path in the container that is mapped to the host directory.
        public var mountTarget: Swift.String?
        /// The path in the container that modified the release agent file.
        public var releaseAgentPath: Swift.String?
        /// The path to the leveraged runc implementation.
        public var runcBinaryPath: Swift.String?
        /// The path to the script that was executed.
        public var scriptPath: Swift.String?
        /// Name of the security service that has been potentially disabled.
        public var serviceName: Swift.String?
        /// The path to the modified shell history file.
        public var shellHistoryFilePath: Swift.String?
        /// The path to the docket socket that was accessed.
        public var socketPath: Swift.String?
        /// Information about the process that had its memory overwritten by the current process.
        public var targetProcess: GuardDutyClientTypes.ProcessDetails?
        /// The suspicious file path for which the threat intelligence details were found.
        public var threatFilePath: Swift.String?
        /// Category that the tool belongs to. Some of the examples are Backdoor Tool, Pentest Tool, Network Scanner, and Network Sniffer.
        public var toolCategory: Swift.String?
        /// Name of the potentially suspicious tool.
        public var toolName: Swift.String?

        public init(
            addressFamily: Swift.String? = nil,
            commandLineExample: Swift.String? = nil,
            fileSystemType: Swift.String? = nil,
            flags: [Swift.String]? = nil,
            ianaProtocolNumber: Swift.Int? = nil,
            ldPreloadValue: Swift.String? = nil,
            libraryPath: Swift.String? = nil,
            memoryRegions: [Swift.String]? = nil,
            modifiedAt: Foundation.Date? = nil,
            modifyingProcess: GuardDutyClientTypes.ProcessDetails? = nil,
            moduleFilePath: Swift.String? = nil,
            moduleName: Swift.String? = nil,
            moduleSha256: Swift.String? = nil,
            mountSource: Swift.String? = nil,
            mountTarget: Swift.String? = nil,
            releaseAgentPath: Swift.String? = nil,
            runcBinaryPath: Swift.String? = nil,
            scriptPath: Swift.String? = nil,
            serviceName: Swift.String? = nil,
            shellHistoryFilePath: Swift.String? = nil,
            socketPath: Swift.String? = nil,
            targetProcess: GuardDutyClientTypes.ProcessDetails? = nil,
            threatFilePath: Swift.String? = nil,
            toolCategory: Swift.String? = nil,
            toolName: Swift.String? = nil
        )
        {
            self.addressFamily = addressFamily
            self.commandLineExample = commandLineExample
            self.fileSystemType = fileSystemType
            self.flags = flags
            self.ianaProtocolNumber = ianaProtocolNumber
            self.ldPreloadValue = ldPreloadValue
            self.libraryPath = libraryPath
            self.memoryRegions = memoryRegions
            self.modifiedAt = modifiedAt
            self.modifyingProcess = modifyingProcess
            self.moduleFilePath = moduleFilePath
            self.moduleName = moduleName
            self.moduleSha256 = moduleSha256
            self.mountSource = mountSource
            self.mountTarget = mountTarget
            self.releaseAgentPath = releaseAgentPath
            self.runcBinaryPath = runcBinaryPath
            self.scriptPath = scriptPath
            self.serviceName = serviceName
            self.shellHistoryFilePath = shellHistoryFilePath
            self.socketPath = socketPath
            self.targetProcess = targetProcess
            self.threatFilePath = threatFilePath
            self.toolCategory = toolCategory
            self.toolName = toolName
        }
    }

}

extension GuardDutyClientTypes {
    /// Information about the process and any required context values for a specific finding.
    public struct RuntimeDetails {
        /// Additional information about the suspicious activity.
        public var context: GuardDutyClientTypes.RuntimeContext?
        /// Information about the observed process.
        public var process: GuardDutyClientTypes.ProcessDetails?

        public init(
            context: GuardDutyClientTypes.RuntimeContext? = nil,
            process: GuardDutyClientTypes.ProcessDetails? = nil
        )
        {
            self.context = context
            self.process = process
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains additional information about the generated finding.
    public struct Service {
        /// Information about the activity that is described in a finding.
        public var action: GuardDutyClientTypes.Action?
        /// Contains additional information about the generated finding.
        public var additionalInfo: GuardDutyClientTypes.ServiceAdditionalInfo?
        /// Indicates whether this finding is archived.
        public var archived: Swift.Bool?
        /// The total count of the occurrences of this finding type.
        public var count: Swift.Int?
        /// Contains information about the detected unusual behavior.
        public var detection: GuardDutyClientTypes.Detection?
        /// The detector ID for the GuardDuty service.
        public var detectorId: Swift.String?
        /// Returns details from the malware scan that created a finding.
        public var ebsVolumeScanDetails: GuardDutyClientTypes.EbsVolumeScanDetails?
        /// The first-seen timestamp of the activity that prompted GuardDuty to generate this finding.
        public var eventFirstSeen: Swift.String?
        /// The last-seen timestamp of the activity that prompted GuardDuty to generate this finding.
        public var eventLastSeen: Swift.String?
        /// An evidence object associated with the service.
        public var evidence: GuardDutyClientTypes.Evidence?
        /// The name of the feature that generated a finding.
        public var featureName: Swift.String?
        /// Returns details from the malware scan that generated a GuardDuty finding.
        public var malwareScanDetails: GuardDutyClientTypes.MalwareScanDetails?
        /// The resource role information for this finding.
        public var resourceRole: Swift.String?
        /// Information about the process and any required context values for a specific finding
        public var runtimeDetails: GuardDutyClientTypes.RuntimeDetails?
        /// The name of the Amazon Web Services service (GuardDuty) that generated a finding.
        public var serviceName: Swift.String?
        /// Feedback that was submitted about the finding.
        public var userFeedback: Swift.String?

        public init(
            action: GuardDutyClientTypes.Action? = nil,
            additionalInfo: GuardDutyClientTypes.ServiceAdditionalInfo? = nil,
            archived: Swift.Bool? = nil,
            count: Swift.Int? = nil,
            detection: GuardDutyClientTypes.Detection? = nil,
            detectorId: Swift.String? = nil,
            ebsVolumeScanDetails: GuardDutyClientTypes.EbsVolumeScanDetails? = nil,
            eventFirstSeen: Swift.String? = nil,
            eventLastSeen: Swift.String? = nil,
            evidence: GuardDutyClientTypes.Evidence? = nil,
            featureName: Swift.String? = nil,
            malwareScanDetails: GuardDutyClientTypes.MalwareScanDetails? = nil,
            resourceRole: Swift.String? = nil,
            runtimeDetails: GuardDutyClientTypes.RuntimeDetails? = nil,
            serviceName: Swift.String? = nil,
            userFeedback: Swift.String? = nil
        )
        {
            self.action = action
            self.additionalInfo = additionalInfo
            self.archived = archived
            self.count = count
            self.detection = detection
            self.detectorId = detectorId
            self.ebsVolumeScanDetails = ebsVolumeScanDetails
            self.eventFirstSeen = eventFirstSeen
            self.eventLastSeen = eventLastSeen
            self.evidence = evidence
            self.featureName = featureName
            self.malwareScanDetails = malwareScanDetails
            self.resourceRole = resourceRole
            self.runtimeDetails = runtimeDetails
            self.serviceName = serviceName
            self.userFeedback = userFeedback
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about the finding that is generated when abnormal or suspicious activity is detected.
    public struct Finding {
        /// The ID of the account in which the finding was generated.
        /// This member is required.
        public var accountId: Swift.String?
        /// The ARN of the finding.
        /// This member is required.
        public var arn: Swift.String?
        /// The confidence score for the finding.
        public var confidence: Swift.Double?
        /// The time and date when the finding was created.
        /// This member is required.
        public var createdAt: Swift.String?
        /// The description of the finding.
        public var description: Swift.String?
        /// The ID of the finding.
        /// This member is required.
        public var id: Swift.String?
        /// The partition associated with the finding.
        public var partition: Swift.String?
        /// The Region where the finding was generated.
        /// This member is required.
        public var region: Swift.String?
        /// Contains information about the Amazon Web Services resource associated with the activity that prompted GuardDuty to generate a finding.
        /// This member is required.
        public var resource: GuardDutyClientTypes.Resource?
        /// The version of the schema used for the finding.
        /// This member is required.
        public var schemaVersion: Swift.String?
        /// Contains additional information about the generated finding.
        public var service: GuardDutyClientTypes.Service?
        /// The severity of the finding.
        /// This member is required.
        public var severity: Swift.Double?
        /// The title of the finding.
        public var title: Swift.String?
        /// The type of finding.
        /// This member is required.
        public var type: Swift.String?
        /// The time and date when the finding was last updated.
        /// This member is required.
        public var updatedAt: Swift.String?

        public init(
            accountId: Swift.String? = nil,
            arn: Swift.String? = nil,
            confidence: Swift.Double? = nil,
            createdAt: Swift.String? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            partition: Swift.String? = nil,
            region: Swift.String? = nil,
            resource: GuardDutyClientTypes.Resource? = nil,
            schemaVersion: Swift.String? = nil,
            service: GuardDutyClientTypes.Service? = nil,
            severity: Swift.Double? = nil,
            title: Swift.String? = nil,
            type: Swift.String? = nil,
            updatedAt: Swift.String? = nil
        )
        {
            self.accountId = accountId
            self.arn = arn
            self.confidence = confidence
            self.createdAt = createdAt
            self.description = description
            self.id = id
            self.partition = partition
            self.region = region
            self.resource = resource
            self.schemaVersion = schemaVersion
            self.service = service
            self.severity = severity
            self.title = title
            self.type = type
            self.updatedAt = updatedAt
        }
    }

}

extension GuardDutyClientTypes {
    /// Information about each finding type associated with the groupedByFindingType statistics.
    public struct FindingTypeStatistics {
        /// Name of the finding type.
        public var findingType: Swift.String?
        /// The timestamp at which this finding type was last generated in your environment.
        public var lastGeneratedAt: Foundation.Date?
        /// The total number of findings associated with generated for each distinct finding type.
        public var totalFindings: Swift.Int?

        public init(
            findingType: Swift.String? = nil,
            lastGeneratedAt: Foundation.Date? = nil,
            totalFindings: Swift.Int? = nil
        )
        {
            self.findingType = findingType
            self.lastGeneratedAt = lastGeneratedAt
            self.totalFindings = totalFindings
        }
    }

}

extension GuardDutyClientTypes {
    /// Information about each resource type associated with the groupedByResource statistics.
    public struct ResourceStatistics {
        /// The ID of the Amazon Web Services account.
        public var accountId: Swift.String?
        /// The timestamp at which the statistics for this resource was last generated.
        public var lastGeneratedAt: Foundation.Date?
        /// ID associated with each resource. The following list provides the mapping of the resource type and resource ID. Mapping of resource and resource ID
        ///
        /// * AccessKey - resource.accessKeyDetails.accessKeyId
        ///
        /// * Container - resource.containerDetails.id
        ///
        /// * ECSCluster - resource.ecsClusterDetails.name
        ///
        /// * EKSCluster - resource.eksClusterDetails.name
        ///
        /// * Instance - resource.instanceDetails.instanceId
        ///
        /// * KubernetesCluster - resource.kubernetesDetails.kubernetesWorkloadDetails.name
        ///
        /// * Lambda - resource.lambdaDetails.functionName
        ///
        /// * RDSDBInstance - resource.rdsDbInstanceDetails.dbInstanceIdentifier
        ///
        /// * S3Bucket - resource.s3BucketDetails.name
        ///
        /// * S3Object - resource.s3BucketDetails.name
        public var resourceId: Swift.String?
        /// The type of resource.
        public var resourceType: Swift.String?
        /// The total number of findings associated with this resource.
        public var totalFindings: Swift.Int?

        public init(
            accountId: Swift.String? = nil,
            lastGeneratedAt: Foundation.Date? = nil,
            resourceId: Swift.String? = nil,
            resourceType: Swift.String? = nil,
            totalFindings: Swift.Int? = nil
        )
        {
            self.accountId = accountId
            self.lastGeneratedAt = lastGeneratedAt
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.totalFindings = totalFindings
        }
    }

}

extension GuardDutyClientTypes {
    /// Information about severity level for each finding type.
    public struct SeverityStatistics {
        /// The timestamp at which a finding type for a specific severity was last generated.
        public var lastGeneratedAt: Foundation.Date?
        /// The severity level associated with each finding type.
        public var severity: Swift.Double?
        /// The total number of findings associated with this severity.
        public var totalFindings: Swift.Int?

        public init(
            lastGeneratedAt: Foundation.Date? = nil,
            severity: Swift.Double? = nil,
            totalFindings: Swift.Int? = nil
        )
        {
            self.lastGeneratedAt = lastGeneratedAt
            self.severity = severity
            self.totalFindings = totalFindings
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about finding statistics.
    public struct FindingStatistics {
        /// Represents a list of map of severity to count statistics for a set of findings.
        @available(*, deprecated, message: "This parameter is deprecated. Please set GroupBy to 'SEVERITY' to return GroupedBySeverity instead.")
        public var countBySeverity: [Swift.String: Swift.Int]?
        /// Represents a list of map of accounts with a findings count associated with each account.
        public var groupedByAccount: [GuardDutyClientTypes.AccountStatistics]?
        /// Represents a list of map of dates with a count of total findings generated on each date per severity level.
        public var groupedByDate: [GuardDutyClientTypes.DateStatistics]?
        /// Represents a list of map of finding types with a count of total findings generated for each type. Based on the orderBy parameter, this request returns either the most occurring finding types or the least occurring finding types. If the orderBy parameter is ASC, this will represent the least occurring finding types in your account; otherwise, this will represent the most occurring finding types. The default value of orderBy is DESC.
        public var groupedByFindingType: [GuardDutyClientTypes.FindingTypeStatistics]?
        /// Represents a list of map of top resources with a count of total findings.
        public var groupedByResource: [GuardDutyClientTypes.ResourceStatistics]?
        /// Represents a list of map of total findings for each severity level.
        public var groupedBySeverity: [GuardDutyClientTypes.SeverityStatistics]?

        public init(
            countBySeverity: [Swift.String: Swift.Int]? = nil,
            groupedByAccount: [GuardDutyClientTypes.AccountStatistics]? = nil,
            groupedByDate: [GuardDutyClientTypes.DateStatistics]? = nil,
            groupedByFindingType: [GuardDutyClientTypes.FindingTypeStatistics]? = nil,
            groupedByResource: [GuardDutyClientTypes.ResourceStatistics]? = nil,
            groupedBySeverity: [GuardDutyClientTypes.SeverityStatistics]? = nil
        )
        {
            self.countBySeverity = countBySeverity
            self.groupedByAccount = groupedByAccount
            self.groupedByDate = groupedByDate
            self.groupedByFindingType = groupedByFindingType
            self.groupedByResource = groupedByResource
            self.groupedBySeverity = groupedBySeverity
        }
    }

}

extension GuardDutyClientTypes {

    public enum FindingStatisticType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case countBySeverity
        case sdkUnknown(Swift.String)

        public static var allCases: [FindingStatisticType] {
            return [
                .countBySeverity
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .countBySeverity: return "COUNT_BY_SEVERITY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetAdministratorAccountInput {
    /// The unique ID of the detector of the GuardDuty member account.
    /// This member is required.
    public var detectorId: Swift.String?

    public init(
        detectorId: Swift.String? = nil
    )
    {
        self.detectorId = detectorId
    }
}

public struct GetAdministratorAccountOutput {
    /// The administrator account details.
    /// This member is required.
    public var administrator: GuardDutyClientTypes.Administrator?

    public init(
        administrator: GuardDutyClientTypes.Administrator? = nil
    )
    {
        self.administrator = administrator
    }
}

public struct GetCoverageStatisticsInput {
    /// The unique ID of the GuardDuty detector.
    /// This member is required.
    public var detectorId: Swift.String?
    /// Represents the criteria used to filter the coverage statistics.
    public var filterCriteria: GuardDutyClientTypes.CoverageFilterCriteria?
    /// Represents the statistics type used to aggregate the coverage details.
    /// This member is required.
    public var statisticsType: [GuardDutyClientTypes.CoverageStatisticsType]?

    public init(
        detectorId: Swift.String? = nil,
        filterCriteria: GuardDutyClientTypes.CoverageFilterCriteria? = nil,
        statisticsType: [GuardDutyClientTypes.CoverageStatisticsType]? = nil
    )
    {
        self.detectorId = detectorId
        self.filterCriteria = filterCriteria
        self.statisticsType = statisticsType
    }
}

public struct GetCoverageStatisticsOutput {
    /// Represents the count aggregated by the statusCode and resourceType.
    public var coverageStatistics: GuardDutyClientTypes.CoverageStatistics?

    public init(
        coverageStatistics: GuardDutyClientTypes.CoverageStatistics? = nil
    )
    {
        self.coverageStatistics = coverageStatistics
    }
}

public struct GetDetectorInput {
    /// The unique ID of the detector that you want to get.
    /// This member is required.
    public var detectorId: Swift.String?

    public init(
        detectorId: Swift.String? = nil
    )
    {
        self.detectorId = detectorId
    }
}

public struct GetDetectorOutput {
    /// The timestamp of when the detector was created.
    public var createdAt: Swift.String?
    /// Describes which data sources are enabled for the detector.
    @available(*, deprecated, message: "This parameter is deprecated, use Features instead")
    public var dataSources: GuardDutyClientTypes.DataSourceConfigurationsResult?
    /// Describes the features that have been enabled for the detector.
    public var features: [GuardDutyClientTypes.DetectorFeatureConfigurationResult]?
    /// The publishing frequency of the finding.
    public var findingPublishingFrequency: GuardDutyClientTypes.FindingPublishingFrequency?
    /// The GuardDuty service role.
    /// This member is required.
    public var serviceRole: Swift.String?
    /// The detector status.
    /// This member is required.
    public var status: GuardDutyClientTypes.DetectorStatus?
    /// The tags of the detector resource.
    public var tags: [Swift.String: Swift.String]?
    /// The last-updated timestamp for the detector.
    public var updatedAt: Swift.String?

    public init(
        createdAt: Swift.String? = nil,
        dataSources: GuardDutyClientTypes.DataSourceConfigurationsResult? = nil,
        features: [GuardDutyClientTypes.DetectorFeatureConfigurationResult]? = nil,
        findingPublishingFrequency: GuardDutyClientTypes.FindingPublishingFrequency? = nil,
        serviceRole: Swift.String? = nil,
        status: GuardDutyClientTypes.DetectorStatus? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        updatedAt: Swift.String? = nil
    )
    {
        self.createdAt = createdAt
        self.dataSources = dataSources
        self.features = features
        self.findingPublishingFrequency = findingPublishingFrequency
        self.serviceRole = serviceRole
        self.status = status
        self.tags = tags
        self.updatedAt = updatedAt
    }
}

public struct GetFilterInput {
    /// The unique ID of the detector that is associated with this filter.
    /// This member is required.
    public var detectorId: Swift.String?
    /// The name of the filter you want to get.
    /// This member is required.
    public var filterName: Swift.String?

    public init(
        detectorId: Swift.String? = nil,
        filterName: Swift.String? = nil
    )
    {
        self.detectorId = detectorId
        self.filterName = filterName
    }
}

public struct GetFilterOutput {
    /// Specifies the action that is to be applied to the findings that match the filter.
    /// This member is required.
    public var action: GuardDutyClientTypes.FilterAction?
    /// The description of the filter.
    public var description: Swift.String?
    /// Represents the criteria to be used in the filter for querying findings.
    /// This member is required.
    public var findingCriteria: GuardDutyClientTypes.FindingCriteria?
    /// The name of the filter.
    /// This member is required.
    public var name: Swift.String?
    /// Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.
    public var rank: Swift.Int?
    /// The tags of the filter resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        action: GuardDutyClientTypes.FilterAction? = nil,
        description: Swift.String? = nil,
        findingCriteria: GuardDutyClientTypes.FindingCriteria? = nil,
        name: Swift.String? = nil,
        rank: Swift.Int? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.action = action
        self.description = description
        self.findingCriteria = findingCriteria
        self.name = name
        self.rank = rank
        self.tags = tags
    }
}

public struct GetFindingsInput {
    /// The ID of the detector that specifies the GuardDuty service whose findings you want to retrieve.
    /// This member is required.
    public var detectorId: Swift.String?
    /// The IDs of the findings that you want to retrieve.
    /// This member is required.
    public var findingIds: [Swift.String]?
    /// Represents the criteria used for sorting findings.
    public var sortCriteria: GuardDutyClientTypes.SortCriteria?

    public init(
        detectorId: Swift.String? = nil,
        findingIds: [Swift.String]? = nil,
        sortCriteria: GuardDutyClientTypes.SortCriteria? = nil
    )
    {
        self.detectorId = detectorId
        self.findingIds = findingIds
        self.sortCriteria = sortCriteria
    }
}

public struct GetFindingsOutput {
    /// A list of findings.
    /// This member is required.
    public var findings: [GuardDutyClientTypes.Finding]?

    public init(
        findings: [GuardDutyClientTypes.Finding]? = nil
    )
    {
        self.findings = findings
    }
}

extension GuardDutyClientTypes {

    public enum GroupByType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case account
        case date
        case findingType
        case resource
        case severity
        case sdkUnknown(Swift.String)

        public static var allCases: [GroupByType] {
            return [
                .account,
                .date,
                .findingType,
                .resource,
                .severity
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .account: return "ACCOUNT"
            case .date: return "DATE"
            case .findingType: return "FINDING_TYPE"
            case .resource: return "RESOURCE"
            case .severity: return "SEVERITY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetFindingsStatisticsInput {
    /// The ID of the detector whose findings statistics you want to retrieve.
    /// This member is required.
    public var detectorId: Swift.String?
    /// Represents the criteria that is used for querying findings.
    public var findingCriteria: GuardDutyClientTypes.FindingCriteria?
    /// The types of finding statistics to retrieve.
    @available(*, deprecated, message: "This parameter is deprecated, please use GroupBy instead")
    public var findingStatisticTypes: [GuardDutyClientTypes.FindingStatisticType]?
    /// Displays the findings statistics grouped by one of the listed valid values.
    public var groupBy: GuardDutyClientTypes.GroupByType?
    /// The maximum number of results to be returned in the response. The default value is 25. You can use this parameter only with the groupBy parameter.
    public var maxResults: Swift.Int?
    /// Displays the sorted findings in the requested order. The default value of orderBy is DESC. You can use this parameter only with the groupBy parameter.
    public var orderBy: GuardDutyClientTypes.OrderBy?

    public init(
        detectorId: Swift.String? = nil,
        findingCriteria: GuardDutyClientTypes.FindingCriteria? = nil,
        findingStatisticTypes: [GuardDutyClientTypes.FindingStatisticType]? = nil,
        groupBy: GuardDutyClientTypes.GroupByType? = nil,
        maxResults: Swift.Int? = nil,
        orderBy: GuardDutyClientTypes.OrderBy? = nil
    )
    {
        self.detectorId = detectorId
        self.findingCriteria = findingCriteria
        self.findingStatisticTypes = findingStatisticTypes
        self.groupBy = groupBy
        self.maxResults = maxResults
        self.orderBy = orderBy
    }
}

public struct GetFindingsStatisticsOutput {
    /// The finding statistics object.
    /// This member is required.
    public var findingStatistics: GuardDutyClientTypes.FindingStatistics?
    /// The pagination parameter to be used on the next list operation to retrieve more items. This parameter is currently not supported.
    public var nextToken: Swift.String?

    public init(
        findingStatistics: GuardDutyClientTypes.FindingStatistics? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.findingStatistics = findingStatistics
        self.nextToken = nextToken
    }
}

public struct GetInvitationsCountInput {

    public init() { }
}

public struct GetInvitationsCountOutput {
    /// The number of received invitations.
    public var invitationsCount: Swift.Int?

    public init(
        invitationsCount: Swift.Int? = nil
    )
    {
        self.invitationsCount = invitationsCount
    }
}

public struct GetIPSetInput {
    /// The unique ID of the detector that is associated with the IPSet.
    /// This member is required.
    public var detectorId: Swift.String?
    /// The unique ID of the IPSet to retrieve.
    /// This member is required.
    public var ipSetId: Swift.String?

    public init(
        detectorId: Swift.String? = nil,
        ipSetId: Swift.String? = nil
    )
    {
        self.detectorId = detectorId
        self.ipSetId = ipSetId
    }
}

extension GuardDutyClientTypes {

    public enum IpSetStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case activating
        case active
        case deactivating
        case deleted
        case deletePending
        case error
        case inactive
        case sdkUnknown(Swift.String)

        public static var allCases: [IpSetStatus] {
            return [
                .activating,
                .active,
                .deactivating,
                .deleted,
                .deletePending,
                .error,
                .inactive
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .activating: return "ACTIVATING"
            case .active: return "ACTIVE"
            case .deactivating: return "DEACTIVATING"
            case .deleted: return "DELETED"
            case .deletePending: return "DELETE_PENDING"
            case .error: return "ERROR"
            case .inactive: return "INACTIVE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetIPSetOutput {
    /// The format of the file that contains the IPSet.
    /// This member is required.
    public var format: GuardDutyClientTypes.IpSetFormat?
    /// The URI of the file that contains the IPSet.
    /// This member is required.
    public var location: Swift.String?
    /// The user-friendly name for the IPSet.
    /// This member is required.
    public var name: Swift.String?
    /// The status of IPSet file that was uploaded.
    /// This member is required.
    public var status: GuardDutyClientTypes.IpSetStatus?
    /// The tags of the IPSet resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        format: GuardDutyClientTypes.IpSetFormat? = nil,
        location: Swift.String? = nil,
        name: Swift.String? = nil,
        status: GuardDutyClientTypes.IpSetStatus? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.format = format
        self.location = location
        self.name = name
        self.status = status
        self.tags = tags
    }
}

public struct GetMalwareProtectionPlanInput {
    /// A unique identifier associated with Malware Protection plan resource.
    /// This member is required.
    public var malwareProtectionPlanId: Swift.String?

    public init(
        malwareProtectionPlanId: Swift.String? = nil
    )
    {
        self.malwareProtectionPlanId = malwareProtectionPlanId
    }
}

extension GuardDutyClientTypes {

    public enum MalwareProtectionPlanStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case error
        case warning
        case sdkUnknown(Swift.String)

        public static var allCases: [MalwareProtectionPlanStatus] {
            return [
                .active,
                .error,
                .warning
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .error: return "ERROR"
            case .warning: return "WARNING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GuardDutyClientTypes {
    /// Information about the issue code and message associated to the status of your Malware Protection plan.
    public struct MalwareProtectionPlanStatusReason {
        /// Issue code.
        public var code: Swift.String?
        /// Issue message that specifies the reason. For information about potential troubleshooting steps, see [Troubleshooting Malware Protection for S3 status issues](https://docs.aws.amazon.com/guardduty/latest/ug/troubleshoot-s3-malware-protection-status-errors.html) in the GuardDuty User Guide.
        public var message: Swift.String?

        public init(
            code: Swift.String? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
        }
    }

}

public struct GetMalwareProtectionPlanOutput {
    /// Information about whether the tags will be added to the S3 object after scanning.
    public var actions: GuardDutyClientTypes.MalwareProtectionPlanActions?
    /// Amazon Resource Name (ARN) of the protected resource.
    public var arn: Swift.String?
    /// The timestamp when the Malware Protection plan resource was created.
    public var createdAt: Foundation.Date?
    /// Information about the protected resource that is associated with the created Malware Protection plan. Presently, S3Bucket is the only supported protected resource.
    public var protectedResource: GuardDutyClientTypes.CreateProtectedResource?
    /// Amazon Resource Name (ARN) of the IAM role that includes the permissions to scan and add tags to the associated protected resource.
    public var role: Swift.String?
    /// Malware Protection plan status.
    public var status: GuardDutyClientTypes.MalwareProtectionPlanStatus?
    /// Information about the issue code and message associated to the status of your Malware Protection plan.
    public var statusReasons: [GuardDutyClientTypes.MalwareProtectionPlanStatusReason]?
    /// Tags added to the Malware Protection plan resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        actions: GuardDutyClientTypes.MalwareProtectionPlanActions? = nil,
        arn: Swift.String? = nil,
        createdAt: Foundation.Date? = nil,
        protectedResource: GuardDutyClientTypes.CreateProtectedResource? = nil,
        role: Swift.String? = nil,
        status: GuardDutyClientTypes.MalwareProtectionPlanStatus? = nil,
        statusReasons: [GuardDutyClientTypes.MalwareProtectionPlanStatusReason]? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.actions = actions
        self.arn = arn
        self.createdAt = createdAt
        self.protectedResource = protectedResource
        self.role = role
        self.status = status
        self.statusReasons = statusReasons
        self.tags = tags
    }
}

public struct GetMalwareScanSettingsInput {
    /// The unique ID of the detector that is associated with this scan.
    /// This member is required.
    public var detectorId: Swift.String?

    public init(
        detectorId: Swift.String? = nil
    )
    {
        self.detectorId = detectorId
    }
}

extension GuardDutyClientTypes {

    /// An enum value representing possible resource properties to match with given scan condition.
    public enum ScanCriterionKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ec2InstanceTag
        case sdkUnknown(Swift.String)

        public static var allCases: [ScanCriterionKey] {
            return [
                .ec2InstanceTag
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ec2InstanceTag: return "EC2_INSTANCE_TAG"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GuardDutyClientTypes {
    /// Represents the key:value pair to be matched against given resource property.
    public struct ScanConditionPair {
        /// Represents the key in the map condition.
        /// This member is required.
        public var key: Swift.String?
        /// Represents optional value in the map condition. If not specified, only the key will be matched.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about the condition.
    public struct ScanCondition {
        /// Represents an mapEqual condition to be applied to a single field when triggering for malware scan.
        /// This member is required.
        public var mapEquals: [GuardDutyClientTypes.ScanConditionPair]?

        public init(
            mapEquals: [GuardDutyClientTypes.ScanConditionPair]? = nil
        )
        {
            self.mapEquals = mapEquals
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about criteria used to filter resources before triggering malware scan.
    public struct ScanResourceCriteria {
        /// Represents condition that when matched will prevent a malware scan for a certain resource.
        public var exclude: [Swift.String: GuardDutyClientTypes.ScanCondition]?
        /// Represents condition that when matched will allow a malware scan for a certain resource.
        public var include: [Swift.String: GuardDutyClientTypes.ScanCondition]?

        public init(
            exclude: [Swift.String: GuardDutyClientTypes.ScanCondition]? = nil,
            include: [Swift.String: GuardDutyClientTypes.ScanCondition]? = nil
        )
        {
            self.exclude = exclude
            self.include = include
        }
    }

}

public struct GetMalwareScanSettingsOutput {
    /// An enum value representing possible snapshot preservation settings.
    public var ebsSnapshotPreservation: GuardDutyClientTypes.EbsSnapshotPreservation?
    /// Represents the criteria to be used in the filter for scanning resources.
    public var scanResourceCriteria: GuardDutyClientTypes.ScanResourceCriteria?

    public init(
        ebsSnapshotPreservation: GuardDutyClientTypes.EbsSnapshotPreservation? = nil,
        scanResourceCriteria: GuardDutyClientTypes.ScanResourceCriteria? = nil
    )
    {
        self.ebsSnapshotPreservation = ebsSnapshotPreservation
        self.scanResourceCriteria = scanResourceCriteria
    }
}

@available(*, deprecated, message: "This input is deprecated, use GetAdministratorAccountRequest instead")
public struct GetMasterAccountInput {
    /// The unique ID of the detector of the GuardDuty member account.
    /// This member is required.
    public var detectorId: Swift.String?

    public init(
        detectorId: Swift.String? = nil
    )
    {
        self.detectorId = detectorId
    }
}

extension GuardDutyClientTypes {
    /// Contains information about the administrator account and invitation.
    public struct Master {
        /// The ID of the account used as the administrator account.
        public var accountId: Swift.String?
        /// The value used to validate the administrator account to the member account.
        public var invitationId: Swift.String?
        /// The timestamp when the invitation was sent.
        public var invitedAt: Swift.String?
        /// The status of the relationship between the administrator and member accounts.
        public var relationshipStatus: Swift.String?

        public init(
            accountId: Swift.String? = nil,
            invitationId: Swift.String? = nil,
            invitedAt: Swift.String? = nil,
            relationshipStatus: Swift.String? = nil
        )
        {
            self.accountId = accountId
            self.invitationId = invitationId
            self.invitedAt = invitedAt
            self.relationshipStatus = relationshipStatus
        }
    }

}

@available(*, deprecated, message: "This output is deprecated, use GetAdministratorAccountResponse instead")
public struct GetMasterAccountOutput {
    /// The administrator account details.
    /// This member is required.
    public var master: GuardDutyClientTypes.Master?

    public init(
        master: GuardDutyClientTypes.Master? = nil
    )
    {
        self.master = master
    }
}

public struct GetMemberDetectorsInput {
    /// A list of member account IDs.
    /// This member is required.
    public var accountIds: [Swift.String]?
    /// The detector ID for the administrator account.
    /// This member is required.
    public var detectorId: Swift.String?

    public init(
        accountIds: [Swift.String]? = nil,
        detectorId: Swift.String? = nil
    )
    {
        self.accountIds = accountIds
        self.detectorId = detectorId
    }
}

extension GuardDutyClientTypes {
    /// Information about the additional configuration for the member account.
    public struct MemberAdditionalConfigurationResult {
        /// Indicates the name of the additional configuration that is set for the member account.
        public var name: GuardDutyClientTypes.OrgFeatureAdditionalConfiguration?
        /// Indicates the status of the additional configuration that is set for the member account.
        public var status: GuardDutyClientTypes.FeatureStatus?
        /// The timestamp at which the additional configuration was set for the member account. This is in UTC format.
        public var updatedAt: Foundation.Date?

        public init(
            name: GuardDutyClientTypes.OrgFeatureAdditionalConfiguration? = nil,
            status: GuardDutyClientTypes.FeatureStatus? = nil,
            updatedAt: Foundation.Date? = nil
        )
        {
            self.name = name
            self.status = status
            self.updatedAt = updatedAt
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about the features for the member account.
    public struct MemberFeaturesConfigurationResult {
        /// Indicates the additional configuration of the feature that is configured for the member account.
        public var additionalConfiguration: [GuardDutyClientTypes.MemberAdditionalConfigurationResult]?
        /// Indicates the name of the feature that is enabled for the detector.
        public var name: GuardDutyClientTypes.OrgFeature?
        /// Indicates the status of the feature that is enabled for the detector.
        public var status: GuardDutyClientTypes.FeatureStatus?
        /// The timestamp at which the feature object was updated.
        public var updatedAt: Foundation.Date?

        public init(
            additionalConfiguration: [GuardDutyClientTypes.MemberAdditionalConfigurationResult]? = nil,
            name: GuardDutyClientTypes.OrgFeature? = nil,
            status: GuardDutyClientTypes.FeatureStatus? = nil,
            updatedAt: Foundation.Date? = nil
        )
        {
            self.additionalConfiguration = additionalConfiguration
            self.name = name
            self.status = status
            self.updatedAt = updatedAt
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information on which data sources are enabled for a member account.
    public struct MemberDataSourceConfiguration {
        /// The account ID for the member account.
        /// This member is required.
        public var accountId: Swift.String?
        /// Contains information on the status of data sources for the account.
        @available(*, deprecated, message: "This parameter is deprecated, use Features instead")
        public var dataSources: GuardDutyClientTypes.DataSourceConfigurationsResult?
        /// Contains information about the status of the features for the member account.
        public var features: [GuardDutyClientTypes.MemberFeaturesConfigurationResult]?

        public init(
            accountId: Swift.String? = nil,
            dataSources: GuardDutyClientTypes.DataSourceConfigurationsResult? = nil,
            features: [GuardDutyClientTypes.MemberFeaturesConfigurationResult]? = nil
        )
        {
            self.accountId = accountId
            self.dataSources = dataSources
            self.features = features
        }
    }

}

public struct GetMemberDetectorsOutput {
    /// An object that describes which data sources are enabled for a member account.
    /// This member is required.
    public var memberDataSourceConfigurations: [GuardDutyClientTypes.MemberDataSourceConfiguration]?
    /// A list of member account IDs that were unable to be processed along with an explanation for why they were not processed.
    /// This member is required.
    public var unprocessedAccounts: [GuardDutyClientTypes.UnprocessedAccount]?

    public init(
        memberDataSourceConfigurations: [GuardDutyClientTypes.MemberDataSourceConfiguration]? = nil,
        unprocessedAccounts: [GuardDutyClientTypes.UnprocessedAccount]? = nil
    )
    {
        self.memberDataSourceConfigurations = memberDataSourceConfigurations
        self.unprocessedAccounts = unprocessedAccounts
    }
}

public struct GetMembersInput {
    /// A list of account IDs of the GuardDuty member accounts that you want to describe.
    /// This member is required.
    public var accountIds: [Swift.String]?
    /// The unique ID of the detector of the GuardDuty account whose members you want to retrieve.
    /// This member is required.
    public var detectorId: Swift.String?

    public init(
        accountIds: [Swift.String]? = nil,
        detectorId: Swift.String? = nil
    )
    {
        self.accountIds = accountIds
        self.detectorId = detectorId
    }
}

extension GuardDutyClientTypes {
    /// Contains information about the member account.
    public struct Member {
        /// The ID of the member account.
        /// This member is required.
        public var accountId: Swift.String?
        /// The administrator account ID.
        public var administratorId: Swift.String?
        /// The detector ID of the member account.
        public var detectorId: Swift.String?
        /// The email address of the member account.
        /// This member is required.
        public var email: Swift.String?
        /// The timestamp when the invitation was sent.
        public var invitedAt: Swift.String?
        /// The administrator account ID.
        /// This member is required.
        public var masterId: Swift.String?
        /// The status of the relationship between the member and the administrator.
        /// This member is required.
        public var relationshipStatus: Swift.String?
        /// The last-updated timestamp of the member.
        /// This member is required.
        public var updatedAt: Swift.String?

        public init(
            accountId: Swift.String? = nil,
            administratorId: Swift.String? = nil,
            detectorId: Swift.String? = nil,
            email: Swift.String? = nil,
            invitedAt: Swift.String? = nil,
            masterId: Swift.String? = nil,
            relationshipStatus: Swift.String? = nil,
            updatedAt: Swift.String? = nil
        )
        {
            self.accountId = accountId
            self.administratorId = administratorId
            self.detectorId = detectorId
            self.email = email
            self.invitedAt = invitedAt
            self.masterId = masterId
            self.relationshipStatus = relationshipStatus
            self.updatedAt = updatedAt
        }
    }

}

extension GuardDutyClientTypes.Member: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Member(accountId: \(Swift.String(describing: accountId)), administratorId: \(Swift.String(describing: administratorId)), detectorId: \(Swift.String(describing: detectorId)), invitedAt: \(Swift.String(describing: invitedAt)), masterId: \(Swift.String(describing: masterId)), relationshipStatus: \(Swift.String(describing: relationshipStatus)), updatedAt: \(Swift.String(describing: updatedAt)), email: \"CONTENT_REDACTED\")"}
}

public struct GetMembersOutput {
    /// A list of members.
    /// This member is required.
    public var members: [GuardDutyClientTypes.Member]?
    /// A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.
    /// This member is required.
    public var unprocessedAccounts: [GuardDutyClientTypes.UnprocessedAccount]?

    public init(
        members: [GuardDutyClientTypes.Member]? = nil,
        unprocessedAccounts: [GuardDutyClientTypes.UnprocessedAccount]? = nil
    )
    {
        self.members = members
        self.unprocessedAccounts = unprocessedAccounts
    }
}

extension GuardDutyClientTypes {
    /// Information about the coverage statistic for the additional configuration of the feature.
    public struct OrganizationFeatureStatisticsAdditionalConfiguration {
        /// Total number of accounts that have enabled the additional configuration.
        public var enabledAccountsCount: Swift.Int?
        /// Name of the additional configuration within a feature.
        public var name: GuardDutyClientTypes.OrgFeatureAdditionalConfiguration?

        public init(
            enabledAccountsCount: Swift.Int? = nil,
            name: GuardDutyClientTypes.OrgFeatureAdditionalConfiguration? = nil
        )
        {
            self.enabledAccountsCount = enabledAccountsCount
            self.name = name
        }
    }

}

extension GuardDutyClientTypes {
    /// Information about the number of accounts that have enabled a specific feature.
    public struct OrganizationFeatureStatistics {
        /// Name of the additional configuration.
        public var additionalConfiguration: [GuardDutyClientTypes.OrganizationFeatureStatisticsAdditionalConfiguration]?
        /// Total number of accounts that have enabled a specific feature.
        public var enabledAccountsCount: Swift.Int?
        /// Name of the feature.
        public var name: GuardDutyClientTypes.OrgFeature?

        public init(
            additionalConfiguration: [GuardDutyClientTypes.OrganizationFeatureStatisticsAdditionalConfiguration]? = nil,
            enabledAccountsCount: Swift.Int? = nil,
            name: GuardDutyClientTypes.OrgFeature? = nil
        )
        {
            self.additionalConfiguration = additionalConfiguration
            self.enabledAccountsCount = enabledAccountsCount
            self.name = name
        }
    }

}

extension GuardDutyClientTypes {
    /// Information about the coverage statistics of the features for the entire Amazon Web Services organization. When you create a new Amazon Web Services organization, it might take up to 24 hours to generate the statistics summary for this organization.
    public struct OrganizationStatistics {
        /// Total number of active accounts in your Amazon Web Services organization that are associated with GuardDuty.
        public var activeAccountsCount: Swift.Int?
        /// Retrieves the coverage statistics for each feature.
        public var countByFeature: [GuardDutyClientTypes.OrganizationFeatureStatistics]?
        /// Total number of accounts that have enabled GuardDuty.
        public var enabledAccountsCount: Swift.Int?
        /// Total number of accounts in your Amazon Web Services organization that are associated with GuardDuty.
        public var memberAccountsCount: Swift.Int?
        /// Total number of accounts in your Amazon Web Services organization.
        public var totalAccountsCount: Swift.Int?

        public init(
            activeAccountsCount: Swift.Int? = nil,
            countByFeature: [GuardDutyClientTypes.OrganizationFeatureStatistics]? = nil,
            enabledAccountsCount: Swift.Int? = nil,
            memberAccountsCount: Swift.Int? = nil,
            totalAccountsCount: Swift.Int? = nil
        )
        {
            self.activeAccountsCount = activeAccountsCount
            self.countByFeature = countByFeature
            self.enabledAccountsCount = enabledAccountsCount
            self.memberAccountsCount = memberAccountsCount
            self.totalAccountsCount = totalAccountsCount
        }
    }

}

extension GuardDutyClientTypes {
    /// Information about GuardDuty coverage statistics for members in your Amazon Web Services organization.
    public struct OrganizationDetails {
        /// Information about the GuardDuty coverage statistics for members in your Amazon Web Services organization.
        public var organizationStatistics: GuardDutyClientTypes.OrganizationStatistics?
        /// The timestamp at which the organization statistics was last updated. This is in UTC format.
        public var updatedAt: Foundation.Date?

        public init(
            organizationStatistics: GuardDutyClientTypes.OrganizationStatistics? = nil,
            updatedAt: Foundation.Date? = nil
        )
        {
            self.organizationStatistics = organizationStatistics
            self.updatedAt = updatedAt
        }
    }

}

public struct GetOrganizationStatisticsOutput {
    /// Information about the statistics report for your organization.
    public var organizationDetails: GuardDutyClientTypes.OrganizationDetails?

    public init(
        organizationDetails: GuardDutyClientTypes.OrganizationDetails? = nil
    )
    {
        self.organizationDetails = organizationDetails
    }
}

public struct GetRemainingFreeTrialDaysInput {
    /// A list of account identifiers of the GuardDuty member account.
    public var accountIds: [Swift.String]?
    /// The unique ID of the detector of the GuardDuty member account.
    /// This member is required.
    public var detectorId: Swift.String?

    public init(
        accountIds: [Swift.String]? = nil,
        detectorId: Swift.String? = nil
    )
    {
        self.accountIds = accountIds
        self.detectorId = detectorId
    }
}

public struct GetRemainingFreeTrialDaysOutput {
    /// The member accounts which were included in a request and were processed successfully.
    public var accounts: [GuardDutyClientTypes.AccountFreeTrialInfo]?
    /// The member account that was included in a request but for which the request could not be processed.
    public var unprocessedAccounts: [GuardDutyClientTypes.UnprocessedAccount]?

    public init(
        accounts: [GuardDutyClientTypes.AccountFreeTrialInfo]? = nil,
        unprocessedAccounts: [GuardDutyClientTypes.UnprocessedAccount]? = nil
    )
    {
        self.accounts = accounts
        self.unprocessedAccounts = unprocessedAccounts
    }
}

public struct GetThreatIntelSetInput {
    /// The unique ID of the detector that is associated with the threatIntelSet.
    /// This member is required.
    public var detectorId: Swift.String?
    /// The unique ID of the threatIntelSet that you want to get.
    /// This member is required.
    public var threatIntelSetId: Swift.String?

    public init(
        detectorId: Swift.String? = nil,
        threatIntelSetId: Swift.String? = nil
    )
    {
        self.detectorId = detectorId
        self.threatIntelSetId = threatIntelSetId
    }
}

extension GuardDutyClientTypes {

    public enum ThreatIntelSetStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case activating
        case active
        case deactivating
        case deleted
        case deletePending
        case error
        case inactive
        case sdkUnknown(Swift.String)

        public static var allCases: [ThreatIntelSetStatus] {
            return [
                .activating,
                .active,
                .deactivating,
                .deleted,
                .deletePending,
                .error,
                .inactive
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .activating: return "ACTIVATING"
            case .active: return "ACTIVE"
            case .deactivating: return "DEACTIVATING"
            case .deleted: return "DELETED"
            case .deletePending: return "DELETE_PENDING"
            case .error: return "ERROR"
            case .inactive: return "INACTIVE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetThreatIntelSetOutput {
    /// The format of the threatIntelSet.
    /// This member is required.
    public var format: GuardDutyClientTypes.ThreatIntelSetFormat?
    /// The URI of the file that contains the ThreatIntelSet.
    /// This member is required.
    public var location: Swift.String?
    /// A user-friendly ThreatIntelSet name displayed in all findings that are generated by activity that involves IP addresses included in this ThreatIntelSet.
    /// This member is required.
    public var name: Swift.String?
    /// The status of threatIntelSet file uploaded.
    /// This member is required.
    public var status: GuardDutyClientTypes.ThreatIntelSetStatus?
    /// The tags of the threat list resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        format: GuardDutyClientTypes.ThreatIntelSetFormat? = nil,
        location: Swift.String? = nil,
        name: Swift.String? = nil,
        status: GuardDutyClientTypes.ThreatIntelSetStatus? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.format = format
        self.location = location
        self.name = name
        self.status = status
        self.tags = tags
    }
}

extension GuardDutyClientTypes {

    public enum UsageFeature: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cloudTrail
        case dnsLogs
        case ebsMalwareProtection
        case ec2RuntimeMonitoring
        case eksAuditLogs
        case eksRuntimeMonitoring
        case fargateRuntimeMonitoring
        case flowLogs
        case lambdaNetworkLogs
        case rdsDbiProtectionProvisioned
        case rdsDbiProtectionServerless
        case rdsLoginEvents
        case s3DataEvents
        case sdkUnknown(Swift.String)

        public static var allCases: [UsageFeature] {
            return [
                .cloudTrail,
                .dnsLogs,
                .ebsMalwareProtection,
                .ec2RuntimeMonitoring,
                .eksAuditLogs,
                .eksRuntimeMonitoring,
                .fargateRuntimeMonitoring,
                .flowLogs,
                .lambdaNetworkLogs,
                .rdsDbiProtectionProvisioned,
                .rdsDbiProtectionServerless,
                .rdsLoginEvents,
                .s3DataEvents
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cloudTrail: return "CLOUD_TRAIL"
            case .dnsLogs: return "DNS_LOGS"
            case .ebsMalwareProtection: return "EBS_MALWARE_PROTECTION"
            case .ec2RuntimeMonitoring: return "EC2_RUNTIME_MONITORING"
            case .eksAuditLogs: return "EKS_AUDIT_LOGS"
            case .eksRuntimeMonitoring: return "EKS_RUNTIME_MONITORING"
            case .fargateRuntimeMonitoring: return "FARGATE_RUNTIME_MONITORING"
            case .flowLogs: return "FLOW_LOGS"
            case .lambdaNetworkLogs: return "LAMBDA_NETWORK_LOGS"
            case .rdsDbiProtectionProvisioned: return "RDS_DBI_PROTECTION_PROVISIONED"
            case .rdsDbiProtectionServerless: return "RDS_DBI_PROTECTION_SERVERLESS"
            case .rdsLoginEvents: return "RDS_LOGIN_EVENTS"
            case .s3DataEvents: return "S3_DATA_EVENTS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GuardDutyClientTypes {
    /// Contains information about the criteria used to query usage statistics.
    public struct UsageCriteria {
        /// The account IDs to aggregate usage statistics from.
        public var accountIds: [Swift.String]?
        /// The data sources to aggregate usage statistics from.
        @available(*, deprecated, message: "This parameter is deprecated, use Features instead")
        public var dataSources: [GuardDutyClientTypes.DataSource]?
        /// The features to aggregate usage statistics from.
        public var features: [GuardDutyClientTypes.UsageFeature]?
        /// The resources to aggregate usage statistics from. Only accepts exact resource names.
        public var resources: [Swift.String]?

        public init(
            accountIds: [Swift.String]? = nil,
            dataSources: [GuardDutyClientTypes.DataSource]? = nil,
            features: [GuardDutyClientTypes.UsageFeature]? = nil,
            resources: [Swift.String]? = nil
        )
        {
            self.accountIds = accountIds
            self.dataSources = dataSources
            self.features = features
            self.resources = resources
        }
    }

}

extension GuardDutyClientTypes {

    public enum UsageStatisticType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case sumByAccount
        case sumByDataSource
        case sumByFeatures
        case sumByResource
        case topAccountsByFeature
        case topResources
        case sdkUnknown(Swift.String)

        public static var allCases: [UsageStatisticType] {
            return [
                .sumByAccount,
                .sumByDataSource,
                .sumByFeatures,
                .sumByResource,
                .topAccountsByFeature,
                .topResources
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .sumByAccount: return "SUM_BY_ACCOUNT"
            case .sumByDataSource: return "SUM_BY_DATA_SOURCE"
            case .sumByFeatures: return "SUM_BY_FEATURES"
            case .sumByResource: return "SUM_BY_RESOURCE"
            case .topAccountsByFeature: return "TOP_ACCOUNTS_BY_FEATURE"
            case .topResources: return "TOP_RESOURCES"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetUsageStatisticsInput {
    /// The ID of the detector that specifies the GuardDuty service whose usage statistics you want to retrieve.
    /// This member is required.
    public var detectorId: Swift.String?
    /// The maximum number of results to return in the response.
    public var maxResults: Swift.Int?
    /// A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the NextToken value returned from the previous request to continue listing results after the first page.
    public var nextToken: Swift.String?
    /// The currency unit you would like to view your usage statistics in. Current valid values are USD.
    public var unit: Swift.String?
    /// Represents the criteria used for querying usage.
    /// This member is required.
    public var usageCriteria: GuardDutyClientTypes.UsageCriteria?
    /// The type of usage statistics to retrieve.
    /// This member is required.
    public var usageStatisticType: GuardDutyClientTypes.UsageStatisticType?

    public init(
        detectorId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        unit: Swift.String? = nil,
        usageCriteria: GuardDutyClientTypes.UsageCriteria? = nil,
        usageStatisticType: GuardDutyClientTypes.UsageStatisticType? = nil
    )
    {
        self.detectorId = detectorId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.unit = unit
        self.usageCriteria = usageCriteria
        self.usageStatisticType = usageStatisticType
    }
}

extension GuardDutyClientTypes {
    /// Contains the total usage with the corresponding currency unit for that value.
    public struct Total {
        /// The total usage.
        public var amount: Swift.String?
        /// The currency unit that the amount is given in.
        public var unit: Swift.String?

        public init(
            amount: Swift.String? = nil,
            unit: Swift.String? = nil
        )
        {
            self.amount = amount
            self.unit = unit
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information on the total of usage based on account IDs.
    public struct UsageAccountResult {
        /// The Account ID that generated usage.
        public var accountId: Swift.String?
        /// Represents the total of usage for the Account ID.
        public var total: GuardDutyClientTypes.Total?

        public init(
            accountId: Swift.String? = nil,
            total: GuardDutyClientTypes.Total? = nil
        )
        {
            self.accountId = accountId
            self.total = total
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information on the result of usage based on data source type.
    public struct UsageDataSourceResult {
        /// The data source type that generated usage.
        public var dataSource: GuardDutyClientTypes.DataSource?
        /// Represents the total of usage for the specified data source.
        public var total: GuardDutyClientTypes.Total?

        public init(
            dataSource: GuardDutyClientTypes.DataSource? = nil,
            total: GuardDutyClientTypes.Total? = nil
        )
        {
            self.dataSource = dataSource
            self.total = total
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about the result of the total usage based on the feature.
    public struct UsageFeatureResult {
        /// The feature that generated the usage cost.
        public var feature: GuardDutyClientTypes.UsageFeature?
        /// Contains the total usage with the corresponding currency unit for that value.
        public var total: GuardDutyClientTypes.Total?

        public init(
            feature: GuardDutyClientTypes.UsageFeature? = nil,
            total: GuardDutyClientTypes.Total? = nil
        )
        {
            self.feature = feature
            self.total = total
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information on the sum of usage based on an Amazon Web Services resource.
    public struct UsageResourceResult {
        /// The Amazon Web Services resource that generated usage.
        public var resource: Swift.String?
        /// Represents the sum total of usage for the specified resource type.
        public var total: GuardDutyClientTypes.Total?

        public init(
            resource: Swift.String? = nil,
            total: GuardDutyClientTypes.Total? = nil
        )
        {
            self.resource = resource
            self.total = total
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information on the total of usage based on the topmost 50 account IDs.
    public struct UsageTopAccountResult {
        /// The unique account ID.
        public var accountId: Swift.String?
        /// Contains the total usage with the corresponding currency unit for that value.
        public var total: GuardDutyClientTypes.Total?

        public init(
            accountId: Swift.String? = nil,
            total: GuardDutyClientTypes.Total? = nil
        )
        {
            self.accountId = accountId
            self.total = total
        }
    }

}

extension GuardDutyClientTypes {
    /// Information about the usage statistics, calculated by top accounts by feature.
    public struct UsageTopAccountsResult {
        /// The accounts that contributed to the total usage cost.
        public var accounts: [GuardDutyClientTypes.UsageTopAccountResult]?
        /// Features by which you can generate the usage statistics. RDS_LOGIN_EVENTS is currently not supported with topAccountsByFeature.
        public var feature: GuardDutyClientTypes.UsageFeature?

        public init(
            accounts: [GuardDutyClientTypes.UsageTopAccountResult]? = nil,
            feature: GuardDutyClientTypes.UsageFeature? = nil
        )
        {
            self.accounts = accounts
            self.feature = feature
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains the result of GuardDuty usage. If a UsageStatisticType is provided the result for other types will be null.
    public struct UsageStatistics {
        /// The usage statistic sum organized by account ID.
        public var sumByAccount: [GuardDutyClientTypes.UsageAccountResult]?
        /// The usage statistic sum organized by on data source.
        public var sumByDataSource: [GuardDutyClientTypes.UsageDataSourceResult]?
        /// The usage statistic sum organized by feature.
        public var sumByFeature: [GuardDutyClientTypes.UsageFeatureResult]?
        /// The usage statistic sum organized by resource.
        public var sumByResource: [GuardDutyClientTypes.UsageResourceResult]?
        /// Lists the top 50 accounts by feature that have generated the most GuardDuty usage, in the order from most to least expensive. Currently, this doesn't support RDS_LOGIN_EVENTS.
        public var topAccountsByFeature: [GuardDutyClientTypes.UsageTopAccountsResult]?
        /// Lists the top 50 resources that have generated the most GuardDuty usage, in order from most to least expensive.
        public var topResources: [GuardDutyClientTypes.UsageResourceResult]?

        public init(
            sumByAccount: [GuardDutyClientTypes.UsageAccountResult]? = nil,
            sumByDataSource: [GuardDutyClientTypes.UsageDataSourceResult]? = nil,
            sumByFeature: [GuardDutyClientTypes.UsageFeatureResult]? = nil,
            sumByResource: [GuardDutyClientTypes.UsageResourceResult]? = nil,
            topAccountsByFeature: [GuardDutyClientTypes.UsageTopAccountsResult]? = nil,
            topResources: [GuardDutyClientTypes.UsageResourceResult]? = nil
        )
        {
            self.sumByAccount = sumByAccount
            self.sumByDataSource = sumByDataSource
            self.sumByFeature = sumByFeature
            self.sumByResource = sumByResource
            self.topAccountsByFeature = topAccountsByFeature
            self.topResources = topResources
        }
    }

}

public struct GetUsageStatisticsOutput {
    /// The pagination parameter to be used on the next list operation to retrieve more items.
    public var nextToken: Swift.String?
    /// The usage statistics object. If a UsageStatisticType was provided, the objects representing other types will be null.
    public var usageStatistics: GuardDutyClientTypes.UsageStatistics?

    public init(
        nextToken: Swift.String? = nil,
        usageStatistics: GuardDutyClientTypes.UsageStatistics? = nil
    )
    {
        self.nextToken = nextToken
        self.usageStatistics = usageStatistics
    }
}

public struct InviteMembersInput {
    /// A list of account IDs of the accounts that you want to invite to GuardDuty as members.
    /// This member is required.
    public var accountIds: [Swift.String]?
    /// The unique ID of the detector of the GuardDuty account with which you want to invite members.
    /// This member is required.
    public var detectorId: Swift.String?
    /// A Boolean value that specifies whether you want to disable email notification to the accounts that you are inviting to GuardDuty as members.
    public var disableEmailNotification: Swift.Bool?
    /// The invitation message that you want to send to the accounts that you're inviting to GuardDuty as members.
    public var message: Swift.String?

    public init(
        accountIds: [Swift.String]? = nil,
        detectorId: Swift.String? = nil,
        disableEmailNotification: Swift.Bool? = nil,
        message: Swift.String? = nil
    )
    {
        self.accountIds = accountIds
        self.detectorId = detectorId
        self.disableEmailNotification = disableEmailNotification
        self.message = message
    }
}

public struct InviteMembersOutput {
    /// A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.
    /// This member is required.
    public var unprocessedAccounts: [GuardDutyClientTypes.UnprocessedAccount]?

    public init(
        unprocessedAccounts: [GuardDutyClientTypes.UnprocessedAccount]? = nil
    )
    {
        self.unprocessedAccounts = unprocessedAccounts
    }
}

public struct ListCoverageInput {
    /// The unique ID of the detector whose coverage details you want to retrieve.
    /// This member is required.
    public var detectorId: Swift.String?
    /// Represents the criteria used to filter the coverage details.
    public var filterCriteria: GuardDutyClientTypes.CoverageFilterCriteria?
    /// The maximum number of results to return in the response.
    public var maxResults: Swift.Int?
    /// A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the NextToken value returned from the previous request to continue listing results after the first page.
    public var nextToken: Swift.String?
    /// Represents the criteria used to sort the coverage details.
    public var sortCriteria: GuardDutyClientTypes.CoverageSortCriteria?

    public init(
        detectorId: Swift.String? = nil,
        filterCriteria: GuardDutyClientTypes.CoverageFilterCriteria? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortCriteria: GuardDutyClientTypes.CoverageSortCriteria? = nil
    )
    {
        self.detectorId = detectorId
        self.filterCriteria = filterCriteria
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortCriteria = sortCriteria
    }
}

public struct ListCoverageOutput {
    /// The pagination parameter to be used on the next list operation to retrieve more items.
    public var nextToken: Swift.String?
    /// A list of resources and their attributes providing cluster details.
    /// This member is required.
    public var resources: [GuardDutyClientTypes.CoverageResource]?

    public init(
        nextToken: Swift.String? = nil,
        resources: [GuardDutyClientTypes.CoverageResource]? = nil
    )
    {
        self.nextToken = nextToken
        self.resources = resources
    }
}

public struct ListDetectorsInput {
    /// You can use this parameter to indicate the maximum number of items that you want in the response. The default value is 50. The maximum value is 50.
    public var maxResults: Swift.Int?
    /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListDetectorsOutput {
    /// A list of detector IDs.
    /// This member is required.
    public var detectorIds: [Swift.String]?
    /// The pagination parameter to be used on the next list operation to retrieve more items.
    public var nextToken: Swift.String?

    public init(
        detectorIds: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.detectorIds = detectorIds
        self.nextToken = nextToken
    }
}

public struct ListFiltersInput {
    /// The unique ID of the detector that is associated with the filter.
    /// This member is required.
    public var detectorId: Swift.String?
    /// You can use this parameter to indicate the maximum number of items that you want in the response. The default value is 50. The maximum value is 50.
    public var maxResults: Swift.Int?
    /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
    public var nextToken: Swift.String?

    public init(
        detectorId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.detectorId = detectorId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListFiltersOutput {
    /// A list of filter names.
    /// This member is required.
    public var filterNames: [Swift.String]?
    /// The pagination parameter to be used on the next list operation to retrieve more items.
    public var nextToken: Swift.String?

    public init(
        filterNames: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filterNames = filterNames
        self.nextToken = nextToken
    }
}

public struct ListFindingsInput {
    /// The ID of the detector that specifies the GuardDuty service whose findings you want to list.
    /// This member is required.
    public var detectorId: Swift.String?
    /// Represents the criteria used for querying findings. Valid values include:
    ///
    /// * JSON field name
    ///
    /// * accountId
    ///
    /// * region
    ///
    /// * confidence
    ///
    /// * id
    ///
    /// * resource.accessKeyDetails.accessKeyId
    ///
    /// * resource.accessKeyDetails.principalId
    ///
    /// * resource.accessKeyDetails.userName
    ///
    /// * resource.accessKeyDetails.userType
    ///
    /// * resource.instanceDetails.iamInstanceProfile.id
    ///
    /// * resource.instanceDetails.imageId
    ///
    /// * resource.instanceDetails.instanceId
    ///
    /// * resource.instanceDetails.networkInterfaces.ipv6Addresses
    ///
    /// * resource.instanceDetails.networkInterfaces.privateIpAddresses.privateIpAddress
    ///
    /// * resource.instanceDetails.networkInterfaces.publicDnsName
    ///
    /// * resource.instanceDetails.networkInterfaces.publicIp
    ///
    /// * resource.instanceDetails.networkInterfaces.securityGroups.groupId
    ///
    /// * resource.instanceDetails.networkInterfaces.securityGroups.groupName
    ///
    /// * resource.instanceDetails.networkInterfaces.subnetId
    ///
    /// * resource.instanceDetails.networkInterfaces.vpcId
    ///
    /// * resource.instanceDetails.tags.key
    ///
    /// * resource.instanceDetails.tags.value
    ///
    /// * resource.resourceType
    ///
    /// * service.action.actionType
    ///
    /// * service.action.awsApiCallAction.api
    ///
    /// * service.action.awsApiCallAction.callerType
    ///
    /// * service.action.awsApiCallAction.remoteIpDetails.city.cityName
    ///
    /// * service.action.awsApiCallAction.remoteIpDetails.country.countryName
    ///
    /// * service.action.awsApiCallAction.remoteIpDetails.ipAddressV4
    ///
    /// * service.action.awsApiCallAction.remoteIpDetails.organization.asn
    ///
    /// * service.action.awsApiCallAction.remoteIpDetails.organization.asnOrg
    ///
    /// * service.action.awsApiCallAction.serviceName
    ///
    /// * service.action.dnsRequestAction.domain
    ///
    /// * service.action.dnsRequestAction.domainWithSuffix
    ///
    /// * service.action.networkConnectionAction.blocked
    ///
    /// * service.action.networkConnectionAction.connectionDirection
    ///
    /// * service.action.networkConnectionAction.localPortDetails.port
    ///
    /// * service.action.networkConnectionAction.protocol
    ///
    /// * service.action.networkConnectionAction.remoteIpDetails.country.countryName
    ///
    /// * service.action.networkConnectionAction.remoteIpDetails.ipAddressV4
    ///
    /// * service.action.networkConnectionAction.remoteIpDetails.organization.asn
    ///
    /// * service.action.networkConnectionAction.remoteIpDetails.organization.asnOrg
    ///
    /// * service.action.networkConnectionAction.remotePortDetails.port
    ///
    /// * service.additionalInfo.threatListName
    ///
    /// * service.archived When this attribute is set to 'true', only archived findings are listed. When it's set to 'false', only unarchived findings are listed. When this attribute is not set, all existing findings are listed.
    ///
    /// * service.ebsVolumeScanDetails.scanId
    ///
    /// * service.resourceRole
    ///
    /// * severity
    ///
    /// * type
    ///
    /// * updatedAt Type: Timestamp in Unix Epoch millisecond format: 1486685375000
    public var findingCriteria: GuardDutyClientTypes.FindingCriteria?
    /// You can use this parameter to indicate the maximum number of items you want in the response. The default value is 50. The maximum value is 50.
    public var maxResults: Swift.Int?
    /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
    public var nextToken: Swift.String?
    /// Represents the criteria used for sorting findings.
    public var sortCriteria: GuardDutyClientTypes.SortCriteria?

    public init(
        detectorId: Swift.String? = nil,
        findingCriteria: GuardDutyClientTypes.FindingCriteria? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortCriteria: GuardDutyClientTypes.SortCriteria? = nil
    )
    {
        self.detectorId = detectorId
        self.findingCriteria = findingCriteria
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortCriteria = sortCriteria
    }
}

public struct ListFindingsOutput {
    /// The IDs of the findings that you're listing.
    /// This member is required.
    public var findingIds: [Swift.String]?
    /// The pagination parameter to be used on the next list operation to retrieve more items.
    public var nextToken: Swift.String?

    public init(
        findingIds: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.findingIds = findingIds
        self.nextToken = nextToken
    }
}

public struct ListInvitationsInput {
    /// You can use this parameter to indicate the maximum number of items that you want in the response. The default value is 50. The maximum value is 50.
    public var maxResults: Swift.Int?
    /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension GuardDutyClientTypes {
    /// Contains information about the invitation to become a member account.
    public struct Invitation {
        /// The ID of the account that the invitation was sent from.
        public var accountId: Swift.String?
        /// The ID of the invitation. This value is used to validate the inviter account to the member account.
        public var invitationId: Swift.String?
        /// The timestamp when the invitation was sent.
        public var invitedAt: Swift.String?
        /// The status of the relationship between the inviter and invitee accounts.
        public var relationshipStatus: Swift.String?

        public init(
            accountId: Swift.String? = nil,
            invitationId: Swift.String? = nil,
            invitedAt: Swift.String? = nil,
            relationshipStatus: Swift.String? = nil
        )
        {
            self.accountId = accountId
            self.invitationId = invitationId
            self.invitedAt = invitedAt
            self.relationshipStatus = relationshipStatus
        }
    }

}

public struct ListInvitationsOutput {
    /// A list of invitation descriptions.
    public var invitations: [GuardDutyClientTypes.Invitation]?
    /// The pagination parameter to be used on the next list operation to retrieve more items.
    public var nextToken: Swift.String?

    public init(
        invitations: [GuardDutyClientTypes.Invitation]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.invitations = invitations
        self.nextToken = nextToken
    }
}

public struct ListIPSetsInput {
    /// The unique ID of the detector that is associated with IPSet.
    /// This member is required.
    public var detectorId: Swift.String?
    /// You can use this parameter to indicate the maximum number of items you want in the response. The default value is 50. The maximum value is 50.
    public var maxResults: Swift.Int?
    /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
    public var nextToken: Swift.String?

    public init(
        detectorId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.detectorId = detectorId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListIPSetsOutput {
    /// The IDs of the IPSet resources.
    /// This member is required.
    public var ipSetIds: [Swift.String]?
    /// The pagination parameter to be used on the next list operation to retrieve more items.
    public var nextToken: Swift.String?

    public init(
        ipSetIds: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.ipSetIds = ipSetIds
        self.nextToken = nextToken
    }
}

public struct ListMalwareProtectionPlansInput {
    /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
    public var nextToken: Swift.String?

    public init(
        nextToken: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
    }
}

extension GuardDutyClientTypes {
    /// Information about the Malware Protection plan resource.
    public struct MalwareProtectionPlanSummary {
        /// A unique identifier associated with Malware Protection plan.
        public var malwareProtectionPlanId: Swift.String?

        public init(
            malwareProtectionPlanId: Swift.String? = nil
        )
        {
            self.malwareProtectionPlanId = malwareProtectionPlanId
        }
    }

}

public struct ListMalwareProtectionPlansOutput {
    /// A list of unique identifiers associated with each Malware Protection plan.
    public var malwareProtectionPlans: [GuardDutyClientTypes.MalwareProtectionPlanSummary]?
    /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
    public var nextToken: Swift.String?

    public init(
        malwareProtectionPlans: [GuardDutyClientTypes.MalwareProtectionPlanSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.malwareProtectionPlans = malwareProtectionPlans
        self.nextToken = nextToken
    }
}

public struct ListMembersInput {
    /// The unique ID of the detector that is associated with the member.
    /// This member is required.
    public var detectorId: Swift.String?
    /// You can use this parameter to indicate the maximum number of items you want in the response. The default value is 50. The maximum value is 50.
    public var maxResults: Swift.Int?
    /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
    public var nextToken: Swift.String?
    /// Specifies whether to only return associated members or to return all members (including members who haven't been invited yet or have been disassociated). Member accounts must have been previously associated with the GuardDuty administrator account using [Create Members](https://docs.aws.amazon.com/guardduty/latest/APIReference/API_CreateMembers.html).
    public var onlyAssociated: Swift.String?

    public init(
        detectorId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        onlyAssociated: Swift.String? = nil
    )
    {
        self.detectorId = detectorId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.onlyAssociated = onlyAssociated
    }
}

public struct ListMembersOutput {
    /// A list of members. The values for email and invitedAt are available only if the member accounts are added by invitation.
    public var members: [GuardDutyClientTypes.Member]?
    /// The pagination parameter to be used on the next list operation to retrieve more items.
    public var nextToken: Swift.String?

    public init(
        members: [GuardDutyClientTypes.Member]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.members = members
        self.nextToken = nextToken
    }
}

public struct ListOrganizationAdminAccountsInput {
    /// The maximum number of results to return in the response.
    public var maxResults: Swift.Int?
    /// A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the NextToken value returned from the previous request to continue listing results after the first page.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListOrganizationAdminAccountsOutput {
    /// A list of accounts configured as GuardDuty delegated administrators.
    public var adminAccounts: [GuardDutyClientTypes.AdminAccount]?
    /// The pagination parameter to be used on the next list operation to retrieve more items.
    public var nextToken: Swift.String?

    public init(
        adminAccounts: [GuardDutyClientTypes.AdminAccount]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.adminAccounts = adminAccounts
        self.nextToken = nextToken
    }
}

public struct ListPublishingDestinationsInput {
    /// The detector ID for which you want to retrieve the publishing destination.
    /// This member is required.
    public var detectorId: Swift.String?
    /// The maximum number of results to return in the response.
    public var maxResults: Swift.Int?
    /// A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the NextToken value returned from the previous request to continue listing results after the first page.
    public var nextToken: Swift.String?

    public init(
        detectorId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.detectorId = detectorId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListPublishingDestinationsOutput {
    /// A Destinations object that includes information about each publishing destination returned.
    /// This member is required.
    public var destinations: [GuardDutyClientTypes.Destination]?
    /// A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the NextToken value returned from the previous request to continue listing results after the first page.
    public var nextToken: Swift.String?

    public init(
        destinations: [GuardDutyClientTypes.Destination]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.destinations = destinations
        self.nextToken = nextToken
    }
}

public struct ListTagsForResourceInput {
    /// The Amazon Resource Name (ARN) for the given GuardDuty resource.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct ListTagsForResourceOutput {
    /// The tags associated with the resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

public struct ListThreatIntelSetsInput {
    /// The unique ID of the detector that is associated with the threatIntelSet.
    /// This member is required.
    public var detectorId: Swift.String?
    /// You can use this parameter to indicate the maximum number of items that you want in the response. The default value is 50. The maximum value is 50.
    public var maxResults: Swift.Int?
    /// You can use this parameter to paginate results in the response. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
    public var nextToken: Swift.String?

    public init(
        detectorId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.detectorId = detectorId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListThreatIntelSetsOutput {
    /// The pagination parameter to be used on the next list operation to retrieve more items.
    public var nextToken: Swift.String?
    /// The IDs of the ThreatIntelSet resources.
    /// This member is required.
    public var threatIntelSetIds: [Swift.String]?

    public init(
        nextToken: Swift.String? = nil,
        threatIntelSetIds: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.threatIntelSetIds = threatIntelSetIds
    }
}

public struct StartMalwareScanInput {
    /// Amazon Resource Name (ARN) of the resource for which you invoked the API.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct StartMalwareScanOutput {
    /// A unique identifier that gets generated when you invoke the API without any error. Each malware scan has a corresponding scan ID. Using this scan ID, you can monitor the status of your malware scan.
    public var scanId: Swift.String?

    public init(
        scanId: Swift.String? = nil
    )
    {
        self.scanId = scanId
    }
}

public struct StartMonitoringMembersInput {
    /// A list of account IDs of the GuardDuty member accounts to start monitoring.
    /// This member is required.
    public var accountIds: [Swift.String]?
    /// The unique ID of the detector of the GuardDuty administrator account associated with the member accounts to monitor.
    /// This member is required.
    public var detectorId: Swift.String?

    public init(
        accountIds: [Swift.String]? = nil,
        detectorId: Swift.String? = nil
    )
    {
        self.accountIds = accountIds
        self.detectorId = detectorId
    }
}

public struct StartMonitoringMembersOutput {
    /// A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.
    /// This member is required.
    public var unprocessedAccounts: [GuardDutyClientTypes.UnprocessedAccount]?

    public init(
        unprocessedAccounts: [GuardDutyClientTypes.UnprocessedAccount]? = nil
    )
    {
        self.unprocessedAccounts = unprocessedAccounts
    }
}

public struct StopMonitoringMembersInput {
    /// A list of account IDs for the member accounts to stop monitoring.
    /// This member is required.
    public var accountIds: [Swift.String]?
    /// The unique ID of the detector associated with the GuardDuty administrator account that is monitoring member accounts.
    /// This member is required.
    public var detectorId: Swift.String?

    public init(
        accountIds: [Swift.String]? = nil,
        detectorId: Swift.String? = nil
    )
    {
        self.accountIds = accountIds
        self.detectorId = detectorId
    }
}

public struct StopMonitoringMembersOutput {
    /// A list of objects that contain an accountId for each account that could not be processed, and a result string that indicates why the account was not processed.
    /// This member is required.
    public var unprocessedAccounts: [GuardDutyClientTypes.UnprocessedAccount]?

    public init(
        unprocessedAccounts: [GuardDutyClientTypes.UnprocessedAccount]? = nil
    )
    {
        self.unprocessedAccounts = unprocessedAccounts
    }
}

public struct TagResourceInput {
    /// The Amazon Resource Name (ARN) for the GuardDuty resource to apply a tag to.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The tags to be added to a resource.
    /// This member is required.
    public var tags: [Swift.String: Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

public struct TagResourceOutput {

    public init() { }
}

public struct UnarchiveFindingsInput {
    /// The ID of the detector associated with the findings to unarchive.
    /// This member is required.
    public var detectorId: Swift.String?
    /// The IDs of the findings to unarchive.
    /// This member is required.
    public var findingIds: [Swift.String]?

    public init(
        detectorId: Swift.String? = nil,
        findingIds: [Swift.String]? = nil
    )
    {
        self.detectorId = detectorId
        self.findingIds = findingIds
    }
}

public struct UnarchiveFindingsOutput {

    public init() { }
}

public struct UntagResourceInput {
    /// The Amazon Resource Name (ARN) for the resource to remove tags from.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The tag keys to remove from the resource.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

public struct UntagResourceOutput {

    public init() { }
}

public struct UpdateDetectorInput {
    /// Describes which data sources will be updated. There might be regional differences because some data sources might not be available in all the Amazon Web Services Regions where GuardDuty is presently supported. For more information, see [Regions and endpoints](https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_regions.html).
    @available(*, deprecated, message: "This parameter is deprecated, use Features instead")
    public var dataSources: GuardDutyClientTypes.DataSourceConfigurations?
    /// The unique ID of the detector to update.
    /// This member is required.
    public var detectorId: Swift.String?
    /// Specifies whether the detector is enabled or not enabled.
    public var enable: Swift.Bool?
    /// Provides the features that will be updated for the detector.
    public var features: [GuardDutyClientTypes.DetectorFeatureConfiguration]?
    /// An enum value that specifies how frequently findings are exported, such as to CloudWatch Events.
    public var findingPublishingFrequency: GuardDutyClientTypes.FindingPublishingFrequency?

    public init(
        dataSources: GuardDutyClientTypes.DataSourceConfigurations? = nil,
        detectorId: Swift.String? = nil,
        enable: Swift.Bool? = nil,
        features: [GuardDutyClientTypes.DetectorFeatureConfiguration]? = nil,
        findingPublishingFrequency: GuardDutyClientTypes.FindingPublishingFrequency? = nil
    )
    {
        self.dataSources = dataSources
        self.detectorId = detectorId
        self.enable = enable
        self.features = features
        self.findingPublishingFrequency = findingPublishingFrequency
    }
}

public struct UpdateDetectorOutput {

    public init() { }
}

public struct UpdateFilterInput {
    /// Specifies the action that is to be applied to the findings that match the filter.
    public var action: GuardDutyClientTypes.FilterAction?
    /// The description of the filter. Valid characters include alphanumeric characters, and special characters such as hyphen, period, colon, underscore, parentheses ({ }, [ ], and ( )), forward slash, horizontal tab, vertical tab, newline, form feed, return, and whitespace.
    public var description: Swift.String?
    /// The unique ID of the detector that specifies the GuardDuty service where you want to update a filter.
    /// This member is required.
    public var detectorId: Swift.String?
    /// The name of the filter.
    /// This member is required.
    public var filterName: Swift.String?
    /// Represents the criteria to be used in the filter for querying findings.
    public var findingCriteria: GuardDutyClientTypes.FindingCriteria?
    /// Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.
    public var rank: Swift.Int?

    public init(
        action: GuardDutyClientTypes.FilterAction? = nil,
        description: Swift.String? = nil,
        detectorId: Swift.String? = nil,
        filterName: Swift.String? = nil,
        findingCriteria: GuardDutyClientTypes.FindingCriteria? = nil,
        rank: Swift.Int? = nil
    )
    {
        self.action = action
        self.description = description
        self.detectorId = detectorId
        self.filterName = filterName
        self.findingCriteria = findingCriteria
        self.rank = rank
    }
}

public struct UpdateFilterOutput {
    /// The name of the filter.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct UpdateFindingsFeedbackInput {
    /// Additional feedback about the GuardDuty findings.
    public var comments: Swift.String?
    /// The ID of the detector that is associated with the findings for which you want to update the feedback.
    /// This member is required.
    public var detectorId: Swift.String?
    /// The feedback for the finding.
    /// This member is required.
    public var feedback: GuardDutyClientTypes.Feedback?
    /// The IDs of the findings that you want to mark as useful or not useful.
    /// This member is required.
    public var findingIds: [Swift.String]?

    public init(
        comments: Swift.String? = nil,
        detectorId: Swift.String? = nil,
        feedback: GuardDutyClientTypes.Feedback? = nil,
        findingIds: [Swift.String]? = nil
    )
    {
        self.comments = comments
        self.detectorId = detectorId
        self.feedback = feedback
        self.findingIds = findingIds
    }
}

public struct UpdateFindingsFeedbackOutput {

    public init() { }
}

public struct UpdateIPSetInput {
    /// The updated Boolean value that specifies whether the IPSet is active or not.
    public var activate: Swift.Bool?
    /// The detectorID that specifies the GuardDuty service whose IPSet you want to update.
    /// This member is required.
    public var detectorId: Swift.String?
    /// The unique ID that specifies the IPSet that you want to update.
    /// This member is required.
    public var ipSetId: Swift.String?
    /// The updated URI of the file that contains the IPSet.
    public var location: Swift.String?
    /// The unique ID that specifies the IPSet that you want to update.
    public var name: Swift.String?

    public init(
        activate: Swift.Bool? = nil,
        detectorId: Swift.String? = nil,
        ipSetId: Swift.String? = nil,
        location: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.activate = activate
        self.detectorId = detectorId
        self.ipSetId = ipSetId
        self.location = location
        self.name = name
    }
}

public struct UpdateIPSetOutput {

    public init() { }
}

extension GuardDutyClientTypes {
    /// Information about the protected S3 bucket resource.
    public struct UpdateS3BucketResource {
        /// Information about the specified object prefixes. The S3 object will be scanned only if it belongs to any of the specified object prefixes.
        public var objectPrefixes: [Swift.String]?

        public init(
            objectPrefixes: [Swift.String]? = nil
        )
        {
            self.objectPrefixes = objectPrefixes
        }
    }

}

extension GuardDutyClientTypes {
    /// Information about the protected resource that is associated with the created Malware Protection plan. Presently, S3Bucket is the only supported protected resource.
    public struct UpdateProtectedResource {
        /// Information about the protected S3 bucket resource.
        public var s3Bucket: GuardDutyClientTypes.UpdateS3BucketResource?

        public init(
            s3Bucket: GuardDutyClientTypes.UpdateS3BucketResource? = nil
        )
        {
            self.s3Bucket = s3Bucket
        }
    }

}

public struct UpdateMalwareProtectionPlanInput {
    /// Information about whether the tags will be added to the S3 object after scanning.
    public var actions: GuardDutyClientTypes.MalwareProtectionPlanActions?
    /// A unique identifier associated with the Malware Protection plan.
    /// This member is required.
    public var malwareProtectionPlanId: Swift.String?
    /// Information about the protected resource that is associated with the created Malware Protection plan. Presently, S3Bucket is the only supported protected resource.
    public var protectedResource: GuardDutyClientTypes.UpdateProtectedResource?
    /// Amazon Resource Name (ARN) of the IAM role with permissions to scan and add tags to the associated protected resource.
    public var role: Swift.String?

    public init(
        actions: GuardDutyClientTypes.MalwareProtectionPlanActions? = nil,
        malwareProtectionPlanId: Swift.String? = nil,
        protectedResource: GuardDutyClientTypes.UpdateProtectedResource? = nil,
        role: Swift.String? = nil
    )
    {
        self.actions = actions
        self.malwareProtectionPlanId = malwareProtectionPlanId
        self.protectedResource = protectedResource
        self.role = role
    }
}

public struct UpdateMalwareScanSettingsInput {
    /// The unique ID of the detector that specifies the GuardDuty service where you want to update scan settings.
    /// This member is required.
    public var detectorId: Swift.String?
    /// An enum value representing possible snapshot preservation settings.
    public var ebsSnapshotPreservation: GuardDutyClientTypes.EbsSnapshotPreservation?
    /// Represents the criteria to be used in the filter for selecting resources to scan.
    public var scanResourceCriteria: GuardDutyClientTypes.ScanResourceCriteria?

    public init(
        detectorId: Swift.String? = nil,
        ebsSnapshotPreservation: GuardDutyClientTypes.EbsSnapshotPreservation? = nil,
        scanResourceCriteria: GuardDutyClientTypes.ScanResourceCriteria? = nil
    )
    {
        self.detectorId = detectorId
        self.ebsSnapshotPreservation = ebsSnapshotPreservation
        self.scanResourceCriteria = scanResourceCriteria
    }
}

public struct UpdateMalwareScanSettingsOutput {

    public init() { }
}

extension GuardDutyClientTypes {
    /// Information about the additional configuration for the member account.
    public struct MemberAdditionalConfiguration {
        /// Name of the additional configuration.
        public var name: GuardDutyClientTypes.OrgFeatureAdditionalConfiguration?
        /// Status of the additional configuration.
        public var status: GuardDutyClientTypes.FeatureStatus?

        public init(
            name: GuardDutyClientTypes.OrgFeatureAdditionalConfiguration? = nil,
            status: GuardDutyClientTypes.FeatureStatus? = nil
        )
        {
            self.name = name
            self.status = status
        }
    }

}

extension GuardDutyClientTypes {
    /// Contains information about the features for the member account.
    public struct MemberFeaturesConfiguration {
        /// Additional configuration of the feature for the member account.
        public var additionalConfiguration: [GuardDutyClientTypes.MemberAdditionalConfiguration]?
        /// The name of the feature.
        public var name: GuardDutyClientTypes.OrgFeature?
        /// The status of the feature.
        public var status: GuardDutyClientTypes.FeatureStatus?

        public init(
            additionalConfiguration: [GuardDutyClientTypes.MemberAdditionalConfiguration]? = nil,
            name: GuardDutyClientTypes.OrgFeature? = nil,
            status: GuardDutyClientTypes.FeatureStatus? = nil
        )
        {
            self.additionalConfiguration = additionalConfiguration
            self.name = name
            self.status = status
        }
    }

}

public struct UpdateMemberDetectorsInput {
    /// A list of member account IDs to be updated.
    /// This member is required.
    public var accountIds: [Swift.String]?
    /// Describes which data sources will be updated.
    @available(*, deprecated, message: "This parameter is deprecated, use Features instead")
    public var dataSources: GuardDutyClientTypes.DataSourceConfigurations?
    /// The detector ID of the administrator account.
    /// This member is required.
    public var detectorId: Swift.String?
    /// A list of features that will be updated for the specified member accounts.
    public var features: [GuardDutyClientTypes.MemberFeaturesConfiguration]?

    public init(
        accountIds: [Swift.String]? = nil,
        dataSources: GuardDutyClientTypes.DataSourceConfigurations? = nil,
        detectorId: Swift.String? = nil,
        features: [GuardDutyClientTypes.MemberFeaturesConfiguration]? = nil
    )
    {
        self.accountIds = accountIds
        self.dataSources = dataSources
        self.detectorId = detectorId
        self.features = features
    }
}

public struct UpdateMemberDetectorsOutput {
    /// A list of member account IDs that were unable to be processed along with an explanation for why they were not processed.
    /// This member is required.
    public var unprocessedAccounts: [GuardDutyClientTypes.UnprocessedAccount]?

    public init(
        unprocessedAccounts: [GuardDutyClientTypes.UnprocessedAccount]? = nil
    )
    {
        self.unprocessedAccounts = unprocessedAccounts
    }
}

extension GuardDutyClientTypes {
    /// Organization-wide Kubernetes audit logs configuration.
    public struct OrganizationKubernetesAuditLogsConfiguration {
        /// A value that contains information on whether Kubernetes audit logs should be enabled automatically as a data source for the organization.
        /// This member is required.
        public var autoEnable: Swift.Bool?

        public init(
            autoEnable: Swift.Bool? = nil
        )
        {
            self.autoEnable = autoEnable
        }
    }

}

extension GuardDutyClientTypes {
    /// Organization-wide Kubernetes data sources configurations.
    public struct OrganizationKubernetesConfiguration {
        /// Whether Kubernetes audit logs data source should be auto-enabled for new members joining the organization.
        /// This member is required.
        public var auditLogs: GuardDutyClientTypes.OrganizationKubernetesAuditLogsConfiguration?

        public init(
            auditLogs: GuardDutyClientTypes.OrganizationKubernetesAuditLogsConfiguration? = nil
        )
        {
            self.auditLogs = auditLogs
        }
    }

}

extension GuardDutyClientTypes {
    /// Organization-wide EBS volumes scan configuration.
    public struct OrganizationEbsVolumes {
        /// Whether scanning EBS volumes should be auto-enabled for new members joining the organization.
        public var autoEnable: Swift.Bool?

        public init(
            autoEnable: Swift.Bool? = nil
        )
        {
            self.autoEnable = autoEnable
        }
    }

}

extension GuardDutyClientTypes {
    /// Organization-wide EC2 instances with findings scan configuration.
    public struct OrganizationScanEc2InstanceWithFindings {
        /// Whether scanning EBS volumes should be auto-enabled for new members joining the organization.
        public var ebsVolumes: GuardDutyClientTypes.OrganizationEbsVolumes?

        public init(
            ebsVolumes: GuardDutyClientTypes.OrganizationEbsVolumes? = nil
        )
        {
            self.ebsVolumes = ebsVolumes
        }
    }

}

extension GuardDutyClientTypes {
    /// Organization-wide Malware Protection configurations.
    public struct OrganizationMalwareProtectionConfiguration {
        /// Whether Malware Protection for EC2 instances with findings should be auto-enabled for new members joining the organization.
        public var scanEc2InstanceWithFindings: GuardDutyClientTypes.OrganizationScanEc2InstanceWithFindings?

        public init(
            scanEc2InstanceWithFindings: GuardDutyClientTypes.OrganizationScanEc2InstanceWithFindings? = nil
        )
        {
            self.scanEc2InstanceWithFindings = scanEc2InstanceWithFindings
        }
    }

}

extension GuardDutyClientTypes {
    /// Describes whether S3 data event logs will be automatically enabled for new members of the organization.
    public struct OrganizationS3LogsConfiguration {
        /// A value that contains information on whether S3 data event logs will be enabled automatically as a data source for the organization.
        /// This member is required.
        public var autoEnable: Swift.Bool?

        public init(
            autoEnable: Swift.Bool? = nil
        )
        {
            self.autoEnable = autoEnable
        }
    }

}

extension GuardDutyClientTypes {
    /// An object that contains information on which data sources will be configured to be automatically enabled for new members within the organization.
    public struct OrganizationDataSourceConfigurations {
        /// Describes the configuration of Kubernetes data sources for new members of the organization.
        public var kubernetes: GuardDutyClientTypes.OrganizationKubernetesConfiguration?
        /// Describes the configuration of Malware Protection for new members of the organization.
        public var malwareProtection: GuardDutyClientTypes.OrganizationMalwareProtectionConfiguration?
        /// Describes whether S3 data event logs are enabled for new members of the organization.
        public var s3Logs: GuardDutyClientTypes.OrganizationS3LogsConfiguration?

        public init(
            kubernetes: GuardDutyClientTypes.OrganizationKubernetesConfiguration? = nil,
            malwareProtection: GuardDutyClientTypes.OrganizationMalwareProtectionConfiguration? = nil,
            s3Logs: GuardDutyClientTypes.OrganizationS3LogsConfiguration? = nil
        )
        {
            self.kubernetes = kubernetes
            self.malwareProtection = malwareProtection
            self.s3Logs = s3Logs
        }
    }

}

extension GuardDutyClientTypes {
    /// A list of additional configurations which will be configured for the organization.
    public struct OrganizationAdditionalConfiguration {
        /// The status of the additional configuration that will be configured for the organization. Use one of the following values to configure the feature status for the entire organization:
        ///
        /// * NEW: Indicates that when a new account joins the organization, they will have the additional configuration enabled automatically.
        ///
        /// * ALL: Indicates that all accounts in the organization have the additional configuration enabled automatically. This includes NEW accounts that join the organization and accounts that may have been suspended or removed from the organization in GuardDuty. It may take up to 24 hours to update the configuration for all the member accounts.
        ///
        /// * NONE: Indicates that the additional configuration will not be automatically enabled for any account in the organization. The administrator must manage the additional configuration for each account individually.
        public var autoEnable: GuardDutyClientTypes.OrgFeatureStatus?
        /// The name of the additional configuration that will be configured for the organization.
        public var name: GuardDutyClientTypes.OrgFeatureAdditionalConfiguration?

        public init(
            autoEnable: GuardDutyClientTypes.OrgFeatureStatus? = nil,
            name: GuardDutyClientTypes.OrgFeatureAdditionalConfiguration? = nil
        )
        {
            self.autoEnable = autoEnable
            self.name = name
        }
    }

}

extension GuardDutyClientTypes {
    /// A list of features which will be configured for the organization.
    public struct OrganizationFeatureConfiguration {
        /// The additional information that will be configured for the organization.
        public var additionalConfiguration: [GuardDutyClientTypes.OrganizationAdditionalConfiguration]?
        /// Describes the status of the feature that is configured for the member accounts within the organization. One of the following values is the status for the entire organization:
        ///
        /// * NEW: Indicates that when a new account joins the organization, they will have the feature enabled automatically.
        ///
        /// * ALL: Indicates that all accounts in the organization have the feature enabled automatically. This includes NEW accounts that join the organization and accounts that may have been suspended or removed from the organization in GuardDuty. It may take up to 24 hours to update the configuration for all the member accounts.
        ///
        /// * NONE: Indicates that the feature will not be automatically enabled for any account in the organization. The administrator must manage the feature for each account individually.
        public var autoEnable: GuardDutyClientTypes.OrgFeatureStatus?
        /// The name of the feature that will be configured for the organization.
        public var name: GuardDutyClientTypes.OrgFeature?

        public init(
            additionalConfiguration: [GuardDutyClientTypes.OrganizationAdditionalConfiguration]? = nil,
            autoEnable: GuardDutyClientTypes.OrgFeatureStatus? = nil,
            name: GuardDutyClientTypes.OrgFeature? = nil
        )
        {
            self.additionalConfiguration = additionalConfiguration
            self.autoEnable = autoEnable
            self.name = name
        }
    }

}

public struct UpdateOrganizationConfigurationInput {
    /// Represents whether or not to automatically enable member accounts in the organization. Even though this is still supported, we recommend using AutoEnableOrganizationMembers to achieve the similar results. You must provide a value for either autoEnableOrganizationMembers or autoEnable.
    @available(*, deprecated, message: "This field is deprecated, use AutoEnableOrganizationMembers instead")
    public var autoEnable: Swift.Bool?
    /// Indicates the auto-enablement configuration of GuardDuty for the member accounts in the organization. You must provide a value for either autoEnableOrganizationMembers or autoEnable. Use one of the following configuration values for autoEnableOrganizationMembers:
    ///
    /// * NEW: Indicates that when a new account joins the organization, they will have GuardDuty enabled automatically.
    ///
    /// * ALL: Indicates that all accounts in the organization have GuardDuty enabled automatically. This includes NEW accounts that join the organization and accounts that may have been suspended or removed from the organization in GuardDuty. It may take up to 24 hours to update the configuration for all the member accounts.
    ///
    /// * NONE: Indicates that GuardDuty will not be automatically enabled for any account in the organization. The administrator must manage GuardDuty for each account in the organization individually. When you update the auto-enable setting from ALL or NEW to NONE, this action doesn't disable the corresponding option for your existing accounts. This configuration will apply to the new accounts that join the organization. After you update the auto-enable settings, no new account will have the corresponding option as enabled.
    public var autoEnableOrganizationMembers: GuardDutyClientTypes.AutoEnableMembers?
    /// Describes which data sources will be updated.
    @available(*, deprecated, message: "This parameter is deprecated, use Features instead")
    public var dataSources: GuardDutyClientTypes.OrganizationDataSourceConfigurations?
    /// The ID of the detector that configures the delegated administrator.
    /// This member is required.
    public var detectorId: Swift.String?
    /// A list of features that will be configured for the organization.
    public var features: [GuardDutyClientTypes.OrganizationFeatureConfiguration]?

    public init(
        autoEnable: Swift.Bool? = nil,
        autoEnableOrganizationMembers: GuardDutyClientTypes.AutoEnableMembers? = nil,
        dataSources: GuardDutyClientTypes.OrganizationDataSourceConfigurations? = nil,
        detectorId: Swift.String? = nil,
        features: [GuardDutyClientTypes.OrganizationFeatureConfiguration]? = nil
    )
    {
        self.autoEnable = autoEnable
        self.autoEnableOrganizationMembers = autoEnableOrganizationMembers
        self.dataSources = dataSources
        self.detectorId = detectorId
        self.features = features
    }
}

public struct UpdateOrganizationConfigurationOutput {

    public init() { }
}

public struct UpdatePublishingDestinationInput {
    /// The ID of the publishing destination to update.
    /// This member is required.
    public var destinationId: Swift.String?
    /// A DestinationProperties object that includes the DestinationArn and KmsKeyArn of the publishing destination.
    public var destinationProperties: GuardDutyClientTypes.DestinationProperties?
    /// The ID of the detector associated with the publishing destinations to update.
    /// This member is required.
    public var detectorId: Swift.String?

    public init(
        destinationId: Swift.String? = nil,
        destinationProperties: GuardDutyClientTypes.DestinationProperties? = nil,
        detectorId: Swift.String? = nil
    )
    {
        self.destinationId = destinationId
        self.destinationProperties = destinationProperties
        self.detectorId = detectorId
    }
}

public struct UpdatePublishingDestinationOutput {

    public init() { }
}

public struct UpdateThreatIntelSetInput {
    /// The updated Boolean value that specifies whether the ThreateIntelSet is active or not.
    public var activate: Swift.Bool?
    /// The detectorID that specifies the GuardDuty service whose ThreatIntelSet you want to update.
    /// This member is required.
    public var detectorId: Swift.String?
    /// The updated URI of the file that contains the ThreateIntelSet.
    public var location: Swift.String?
    /// The unique ID that specifies the ThreatIntelSet that you want to update.
    public var name: Swift.String?
    /// The unique ID that specifies the ThreatIntelSet that you want to update.
    /// This member is required.
    public var threatIntelSetId: Swift.String?

    public init(
        activate: Swift.Bool? = nil,
        detectorId: Swift.String? = nil,
        location: Swift.String? = nil,
        name: Swift.String? = nil,
        threatIntelSetId: Swift.String? = nil
    )
    {
        self.activate = activate
        self.detectorId = detectorId
        self.location = location
        self.name = name
        self.threatIntelSetId = threatIntelSetId
    }
}

public struct UpdateThreatIntelSetOutput {

    public init() { }
}

extension AcceptAdministratorInvitationInput {

    static func urlPathProvider(_ value: AcceptAdministratorInvitationInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/administrator"
    }
}

extension AcceptInvitationInput {

    static func urlPathProvider(_ value: AcceptInvitationInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/master"
    }
}

extension ArchiveFindingsInput {

    static func urlPathProvider(_ value: ArchiveFindingsInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/findings/archive"
    }
}

extension CreateDetectorInput {

    static func urlPathProvider(_ value: CreateDetectorInput) -> Swift.String? {
        return "/detector"
    }
}

extension CreateFilterInput {

    static func urlPathProvider(_ value: CreateFilterInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/filter"
    }
}

extension CreateIPSetInput {

    static func urlPathProvider(_ value: CreateIPSetInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/ipset"
    }
}

extension CreateMalwareProtectionPlanInput {

    static func urlPathProvider(_ value: CreateMalwareProtectionPlanInput) -> Swift.String? {
        return "/malware-protection-plan"
    }
}

extension CreateMembersInput {

    static func urlPathProvider(_ value: CreateMembersInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/member"
    }
}

extension CreatePublishingDestinationInput {

    static func urlPathProvider(_ value: CreatePublishingDestinationInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/publishingDestination"
    }
}

extension CreateSampleFindingsInput {

    static func urlPathProvider(_ value: CreateSampleFindingsInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/findings/create"
    }
}

extension CreateThreatIntelSetInput {

    static func urlPathProvider(_ value: CreateThreatIntelSetInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/threatintelset"
    }
}

extension DeclineInvitationsInput {

    static func urlPathProvider(_ value: DeclineInvitationsInput) -> Swift.String? {
        return "/invitation/decline"
    }
}

extension DeleteDetectorInput {

    static func urlPathProvider(_ value: DeleteDetectorInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())"
    }
}

extension DeleteFilterInput {

    static func urlPathProvider(_ value: DeleteFilterInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        guard let filterName = value.filterName else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/filter/\(filterName.urlPercentEncoding())"
    }
}

extension DeleteInvitationsInput {

    static func urlPathProvider(_ value: DeleteInvitationsInput) -> Swift.String? {
        return "/invitation/delete"
    }
}

extension DeleteIPSetInput {

    static func urlPathProvider(_ value: DeleteIPSetInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        guard let ipSetId = value.ipSetId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/ipset/\(ipSetId.urlPercentEncoding())"
    }
}

extension DeleteMalwareProtectionPlanInput {

    static func urlPathProvider(_ value: DeleteMalwareProtectionPlanInput) -> Swift.String? {
        guard let malwareProtectionPlanId = value.malwareProtectionPlanId else {
            return nil
        }
        return "/malware-protection-plan/\(malwareProtectionPlanId.urlPercentEncoding())"
    }
}

extension DeleteMembersInput {

    static func urlPathProvider(_ value: DeleteMembersInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/member/delete"
    }
}

extension DeletePublishingDestinationInput {

    static func urlPathProvider(_ value: DeletePublishingDestinationInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        guard let destinationId = value.destinationId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/publishingDestination/\(destinationId.urlPercentEncoding())"
    }
}

extension DeleteThreatIntelSetInput {

    static func urlPathProvider(_ value: DeleteThreatIntelSetInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        guard let threatIntelSetId = value.threatIntelSetId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/threatintelset/\(threatIntelSetId.urlPercentEncoding())"
    }
}

extension DescribeMalwareScansInput {

    static func urlPathProvider(_ value: DescribeMalwareScansInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/malware-scans"
    }
}

extension DescribeOrganizationConfigurationInput {

    static func urlPathProvider(_ value: DescribeOrganizationConfigurationInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/admin"
    }
}

extension DescribeOrganizationConfigurationInput {

    static func queryItemProvider(_ value: DescribeOrganizationConfigurationInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension DescribePublishingDestinationInput {

    static func urlPathProvider(_ value: DescribePublishingDestinationInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        guard let destinationId = value.destinationId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/publishingDestination/\(destinationId.urlPercentEncoding())"
    }
}

extension DisableOrganizationAdminAccountInput {

    static func urlPathProvider(_ value: DisableOrganizationAdminAccountInput) -> Swift.String? {
        return "/admin/disable"
    }
}

extension DisassociateFromAdministratorAccountInput {

    static func urlPathProvider(_ value: DisassociateFromAdministratorAccountInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/administrator/disassociate"
    }
}

extension DisassociateFromMasterAccountInput {

    static func urlPathProvider(_ value: DisassociateFromMasterAccountInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/master/disassociate"
    }
}

extension DisassociateMembersInput {

    static func urlPathProvider(_ value: DisassociateMembersInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/member/disassociate"
    }
}

extension EnableOrganizationAdminAccountInput {

    static func urlPathProvider(_ value: EnableOrganizationAdminAccountInput) -> Swift.String? {
        return "/admin/enable"
    }
}

extension GetAdministratorAccountInput {

    static func urlPathProvider(_ value: GetAdministratorAccountInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/administrator"
    }
}

extension GetCoverageStatisticsInput {

    static func urlPathProvider(_ value: GetCoverageStatisticsInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/coverage/statistics"
    }
}

extension GetDetectorInput {

    static func urlPathProvider(_ value: GetDetectorInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())"
    }
}

extension GetFilterInput {

    static func urlPathProvider(_ value: GetFilterInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        guard let filterName = value.filterName else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/filter/\(filterName.urlPercentEncoding())"
    }
}

extension GetFindingsInput {

    static func urlPathProvider(_ value: GetFindingsInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/findings/get"
    }
}

extension GetFindingsStatisticsInput {

    static func urlPathProvider(_ value: GetFindingsStatisticsInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/findings/statistics"
    }
}

extension GetInvitationsCountInput {

    static func urlPathProvider(_ value: GetInvitationsCountInput) -> Swift.String? {
        return "/invitation/count"
    }
}

extension GetIPSetInput {

    static func urlPathProvider(_ value: GetIPSetInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        guard let ipSetId = value.ipSetId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/ipset/\(ipSetId.urlPercentEncoding())"
    }
}

extension GetMalwareProtectionPlanInput {

    static func urlPathProvider(_ value: GetMalwareProtectionPlanInput) -> Swift.String? {
        guard let malwareProtectionPlanId = value.malwareProtectionPlanId else {
            return nil
        }
        return "/malware-protection-plan/\(malwareProtectionPlanId.urlPercentEncoding())"
    }
}

extension GetMalwareScanSettingsInput {

    static func urlPathProvider(_ value: GetMalwareScanSettingsInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/malware-scan-settings"
    }
}

extension GetMasterAccountInput {

    static func urlPathProvider(_ value: GetMasterAccountInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/master"
    }
}

extension GetMemberDetectorsInput {

    static func urlPathProvider(_ value: GetMemberDetectorsInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/member/detector/get"
    }
}

extension GetMembersInput {

    static func urlPathProvider(_ value: GetMembersInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/member/get"
    }
}

extension GetOrganizationStatisticsInput {

    static func urlPathProvider(_ value: GetOrganizationStatisticsInput) -> Swift.String? {
        return "/organization/statistics"
    }
}

extension GetRemainingFreeTrialDaysInput {

    static func urlPathProvider(_ value: GetRemainingFreeTrialDaysInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/freeTrial/daysRemaining"
    }
}

extension GetThreatIntelSetInput {

    static func urlPathProvider(_ value: GetThreatIntelSetInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        guard let threatIntelSetId = value.threatIntelSetId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/threatintelset/\(threatIntelSetId.urlPercentEncoding())"
    }
}

extension GetUsageStatisticsInput {

    static func urlPathProvider(_ value: GetUsageStatisticsInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/usage/statistics"
    }
}

extension InviteMembersInput {

    static func urlPathProvider(_ value: InviteMembersInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/member/invite"
    }
}

extension ListCoverageInput {

    static func urlPathProvider(_ value: ListCoverageInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/coverage"
    }
}

extension ListDetectorsInput {

    static func urlPathProvider(_ value: ListDetectorsInput) -> Swift.String? {
        return "/detector"
    }
}

extension ListDetectorsInput {

    static func queryItemProvider(_ value: ListDetectorsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListFiltersInput {

    static func urlPathProvider(_ value: ListFiltersInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/filter"
    }
}

extension ListFiltersInput {

    static func queryItemProvider(_ value: ListFiltersInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListFindingsInput {

    static func urlPathProvider(_ value: ListFindingsInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/findings"
    }
}

extension ListInvitationsInput {

    static func urlPathProvider(_ value: ListInvitationsInput) -> Swift.String? {
        return "/invitation"
    }
}

extension ListInvitationsInput {

    static func queryItemProvider(_ value: ListInvitationsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListIPSetsInput {

    static func urlPathProvider(_ value: ListIPSetsInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/ipset"
    }
}

extension ListIPSetsInput {

    static func queryItemProvider(_ value: ListIPSetsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListMalwareProtectionPlansInput {

    static func urlPathProvider(_ value: ListMalwareProtectionPlansInput) -> Swift.String? {
        return "/malware-protection-plan"
    }
}

extension ListMalwareProtectionPlansInput {

    static func queryItemProvider(_ value: ListMalwareProtectionPlansInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        return items
    }
}

extension ListMembersInput {

    static func urlPathProvider(_ value: ListMembersInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/member"
    }
}

extension ListMembersInput {

    static func queryItemProvider(_ value: ListMembersInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let onlyAssociated = value.onlyAssociated {
            let onlyAssociatedQueryItem = Smithy.URIQueryItem(name: "onlyAssociated".urlPercentEncoding(), value: Swift.String(onlyAssociated).urlPercentEncoding())
            items.append(onlyAssociatedQueryItem)
        }
        return items
    }
}

extension ListOrganizationAdminAccountsInput {

    static func urlPathProvider(_ value: ListOrganizationAdminAccountsInput) -> Swift.String? {
        return "/admin"
    }
}

extension ListOrganizationAdminAccountsInput {

    static func queryItemProvider(_ value: ListOrganizationAdminAccountsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListPublishingDestinationsInput {

    static func urlPathProvider(_ value: ListPublishingDestinationsInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/publishingDestination"
    }
}

extension ListPublishingDestinationsInput {

    static func queryItemProvider(_ value: ListPublishingDestinationsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension ListThreatIntelSetsInput {

    static func urlPathProvider(_ value: ListThreatIntelSetsInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/threatintelset"
    }
}

extension ListThreatIntelSetsInput {

    static func queryItemProvider(_ value: ListThreatIntelSetsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension StartMalwareScanInput {

    static func urlPathProvider(_ value: StartMalwareScanInput) -> Swift.String? {
        return "/malware-scan/start"
    }
}

extension StartMonitoringMembersInput {

    static func urlPathProvider(_ value: StartMonitoringMembersInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/member/start"
    }
}

extension StopMonitoringMembersInput {

    static func urlPathProvider(_ value: StopMonitoringMembersInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/member/stop"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension UnarchiveFindingsInput {

    static func urlPathProvider(_ value: UnarchiveFindingsInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/findings/unarchive"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func queryItemProvider(_ value: UntagResourceInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let tagKeys = value.tagKeys else {
            let message = "Creating a URL Query Item failed. tagKeys is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        tagKeys.forEach { queryItemValue in
            let queryItem = Smithy.URIQueryItem(name: "tagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
            items.append(queryItem)
        }
        return items
    }
}

extension UpdateDetectorInput {

    static func urlPathProvider(_ value: UpdateDetectorInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())"
    }
}

extension UpdateFilterInput {

    static func urlPathProvider(_ value: UpdateFilterInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        guard let filterName = value.filterName else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/filter/\(filterName.urlPercentEncoding())"
    }
}

extension UpdateFindingsFeedbackInput {

    static func urlPathProvider(_ value: UpdateFindingsFeedbackInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/findings/feedback"
    }
}

extension UpdateIPSetInput {

    static func urlPathProvider(_ value: UpdateIPSetInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        guard let ipSetId = value.ipSetId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/ipset/\(ipSetId.urlPercentEncoding())"
    }
}

extension UpdateMalwareProtectionPlanInput {

    static func urlPathProvider(_ value: UpdateMalwareProtectionPlanInput) -> Swift.String? {
        guard let malwareProtectionPlanId = value.malwareProtectionPlanId else {
            return nil
        }
        return "/malware-protection-plan/\(malwareProtectionPlanId.urlPercentEncoding())"
    }
}

extension UpdateMalwareScanSettingsInput {

    static func urlPathProvider(_ value: UpdateMalwareScanSettingsInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/malware-scan-settings"
    }
}

extension UpdateMemberDetectorsInput {

    static func urlPathProvider(_ value: UpdateMemberDetectorsInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/member/detector/update"
    }
}

extension UpdateOrganizationConfigurationInput {

    static func urlPathProvider(_ value: UpdateOrganizationConfigurationInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/admin"
    }
}

extension UpdatePublishingDestinationInput {

    static func urlPathProvider(_ value: UpdatePublishingDestinationInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        guard let destinationId = value.destinationId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/publishingDestination/\(destinationId.urlPercentEncoding())"
    }
}

extension UpdateThreatIntelSetInput {

    static func urlPathProvider(_ value: UpdateThreatIntelSetInput) -> Swift.String? {
        guard let detectorId = value.detectorId else {
            return nil
        }
        guard let threatIntelSetId = value.threatIntelSetId else {
            return nil
        }
        return "/detector/\(detectorId.urlPercentEncoding())/threatintelset/\(threatIntelSetId.urlPercentEncoding())"
    }
}

extension AcceptAdministratorInvitationInput {

    static func write(value: AcceptAdministratorInvitationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["administratorId"].write(value.administratorId)
        try writer["invitationId"].write(value.invitationId)
    }
}

extension AcceptInvitationInput {

    static func write(value: AcceptInvitationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["invitationId"].write(value.invitationId)
        try writer["masterId"].write(value.masterId)
    }
}

extension ArchiveFindingsInput {

    static func write(value: ArchiveFindingsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["findingIds"].writeList(value.findingIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateDetectorInput {

    static func write(value: CreateDetectorInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
        try writer["dataSources"].write(value.dataSources, with: GuardDutyClientTypes.DataSourceConfigurations.write(value:to:))
        try writer["enable"].write(value.enable)
        try writer["features"].writeList(value.features, memberWritingClosure: GuardDutyClientTypes.DetectorFeatureConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["findingPublishingFrequency"].write(value.findingPublishingFrequency)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateFilterInput {

    static func write(value: CreateFilterInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["action"].write(value.action)
        try writer["clientToken"].write(value.clientToken)
        try writer["description"].write(value.description)
        try writer["findingCriteria"].write(value.findingCriteria, with: GuardDutyClientTypes.FindingCriteria.write(value:to:))
        try writer["name"].write(value.name)
        try writer["rank"].write(value.rank)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateIPSetInput {

    static func write(value: CreateIPSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["activate"].write(value.activate)
        try writer["clientToken"].write(value.clientToken)
        try writer["format"].write(value.format)
        try writer["location"].write(value.location)
        try writer["name"].write(value.name)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateMalwareProtectionPlanInput {

    static func write(value: CreateMalwareProtectionPlanInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["actions"].write(value.actions, with: GuardDutyClientTypes.MalwareProtectionPlanActions.write(value:to:))
        try writer["clientToken"].write(value.clientToken)
        try writer["protectedResource"].write(value.protectedResource, with: GuardDutyClientTypes.CreateProtectedResource.write(value:to:))
        try writer["role"].write(value.role)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateMembersInput {

    static func write(value: CreateMembersInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accountDetails"].writeList(value.accountDetails, memberWritingClosure: GuardDutyClientTypes.AccountDetail.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreatePublishingDestinationInput {

    static func write(value: CreatePublishingDestinationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
        try writer["destinationProperties"].write(value.destinationProperties, with: GuardDutyClientTypes.DestinationProperties.write(value:to:))
        try writer["destinationType"].write(value.destinationType)
    }
}

extension CreateSampleFindingsInput {

    static func write(value: CreateSampleFindingsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["findingTypes"].writeList(value.findingTypes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateThreatIntelSetInput {

    static func write(value: CreateThreatIntelSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["activate"].write(value.activate)
        try writer["clientToken"].write(value.clientToken)
        try writer["format"].write(value.format)
        try writer["location"].write(value.location)
        try writer["name"].write(value.name)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension DeclineInvitationsInput {

    static func write(value: DeclineInvitationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accountIds"].writeList(value.accountIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DeleteInvitationsInput {

    static func write(value: DeleteInvitationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accountIds"].writeList(value.accountIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DeleteMembersInput {

    static func write(value: DeleteMembersInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accountIds"].writeList(value.accountIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DescribeMalwareScansInput {

    static func write(value: DescribeMalwareScansInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["filterCriteria"].write(value.filterCriteria, with: GuardDutyClientTypes.FilterCriteria.write(value:to:))
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["sortCriteria"].write(value.sortCriteria, with: GuardDutyClientTypes.SortCriteria.write(value:to:))
    }
}

extension DisableOrganizationAdminAccountInput {

    static func write(value: DisableOrganizationAdminAccountInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["adminAccountId"].write(value.adminAccountId)
    }
}

extension DisassociateMembersInput {

    static func write(value: DisassociateMembersInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accountIds"].writeList(value.accountIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension EnableOrganizationAdminAccountInput {

    static func write(value: EnableOrganizationAdminAccountInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["adminAccountId"].write(value.adminAccountId)
    }
}

extension GetCoverageStatisticsInput {

    static func write(value: GetCoverageStatisticsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["filterCriteria"].write(value.filterCriteria, with: GuardDutyClientTypes.CoverageFilterCriteria.write(value:to:))
        try writer["statisticsType"].writeList(value.statisticsType, memberWritingClosure: SmithyReadWrite.WritingClosureBox<GuardDutyClientTypes.CoverageStatisticsType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension GetFindingsInput {

    static func write(value: GetFindingsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["findingIds"].writeList(value.findingIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["sortCriteria"].write(value.sortCriteria, with: GuardDutyClientTypes.SortCriteria.write(value:to:))
    }
}

extension GetFindingsStatisticsInput {

    static func write(value: GetFindingsStatisticsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["findingCriteria"].write(value.findingCriteria, with: GuardDutyClientTypes.FindingCriteria.write(value:to:))
        try writer["findingStatisticTypes"].writeList(value.findingStatisticTypes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<GuardDutyClientTypes.FindingStatisticType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["groupBy"].write(value.groupBy)
        try writer["maxResults"].write(value.maxResults)
        try writer["orderBy"].write(value.orderBy)
    }
}

extension GetMemberDetectorsInput {

    static func write(value: GetMemberDetectorsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accountIds"].writeList(value.accountIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension GetMembersInput {

    static func write(value: GetMembersInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accountIds"].writeList(value.accountIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension GetRemainingFreeTrialDaysInput {

    static func write(value: GetRemainingFreeTrialDaysInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accountIds"].writeList(value.accountIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension GetUsageStatisticsInput {

    static func write(value: GetUsageStatisticsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["unit"].write(value.unit)
        try writer["usageCriteria"].write(value.usageCriteria, with: GuardDutyClientTypes.UsageCriteria.write(value:to:))
        try writer["usageStatisticsType"].write(value.usageStatisticType)
    }
}

extension InviteMembersInput {

    static func write(value: InviteMembersInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accountIds"].writeList(value.accountIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["disableEmailNotification"].write(value.disableEmailNotification)
        try writer["message"].write(value.message)
    }
}

extension ListCoverageInput {

    static func write(value: ListCoverageInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["filterCriteria"].write(value.filterCriteria, with: GuardDutyClientTypes.CoverageFilterCriteria.write(value:to:))
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["sortCriteria"].write(value.sortCriteria, with: GuardDutyClientTypes.CoverageSortCriteria.write(value:to:))
    }
}

extension ListFindingsInput {

    static func write(value: ListFindingsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["findingCriteria"].write(value.findingCriteria, with: GuardDutyClientTypes.FindingCriteria.write(value:to:))
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["sortCriteria"].write(value.sortCriteria, with: GuardDutyClientTypes.SortCriteria.write(value:to:))
    }
}

extension StartMalwareScanInput {

    static func write(value: StartMalwareScanInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resourceArn"].write(value.resourceArn)
    }
}

extension StartMonitoringMembersInput {

    static func write(value: StartMonitoringMembersInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accountIds"].writeList(value.accountIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension StopMonitoringMembersInput {

    static func write(value: StopMonitoringMembersInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accountIds"].writeList(value.accountIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension UnarchiveFindingsInput {

    static func write(value: UnarchiveFindingsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["findingIds"].writeList(value.findingIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateDetectorInput {

    static func write(value: UpdateDetectorInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["dataSources"].write(value.dataSources, with: GuardDutyClientTypes.DataSourceConfigurations.write(value:to:))
        try writer["enable"].write(value.enable)
        try writer["features"].writeList(value.features, memberWritingClosure: GuardDutyClientTypes.DetectorFeatureConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["findingPublishingFrequency"].write(value.findingPublishingFrequency)
    }
}

extension UpdateFilterInput {

    static func write(value: UpdateFilterInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["action"].write(value.action)
        try writer["description"].write(value.description)
        try writer["findingCriteria"].write(value.findingCriteria, with: GuardDutyClientTypes.FindingCriteria.write(value:to:))
        try writer["rank"].write(value.rank)
    }
}

extension UpdateFindingsFeedbackInput {

    static func write(value: UpdateFindingsFeedbackInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["comments"].write(value.comments)
        try writer["feedback"].write(value.feedback)
        try writer["findingIds"].writeList(value.findingIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateIPSetInput {

    static func write(value: UpdateIPSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["activate"].write(value.activate)
        try writer["location"].write(value.location)
        try writer["name"].write(value.name)
    }
}

extension UpdateMalwareProtectionPlanInput {

    static func write(value: UpdateMalwareProtectionPlanInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["actions"].write(value.actions, with: GuardDutyClientTypes.MalwareProtectionPlanActions.write(value:to:))
        try writer["protectedResource"].write(value.protectedResource, with: GuardDutyClientTypes.UpdateProtectedResource.write(value:to:))
        try writer["role"].write(value.role)
    }
}

extension UpdateMalwareScanSettingsInput {

    static func write(value: UpdateMalwareScanSettingsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ebsSnapshotPreservation"].write(value.ebsSnapshotPreservation)
        try writer["scanResourceCriteria"].write(value.scanResourceCriteria, with: GuardDutyClientTypes.ScanResourceCriteria.write(value:to:))
    }
}

extension UpdateMemberDetectorsInput {

    static func write(value: UpdateMemberDetectorsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accountIds"].writeList(value.accountIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["dataSources"].write(value.dataSources, with: GuardDutyClientTypes.DataSourceConfigurations.write(value:to:))
        try writer["features"].writeList(value.features, memberWritingClosure: GuardDutyClientTypes.MemberFeaturesConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateOrganizationConfigurationInput {

    static func write(value: UpdateOrganizationConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["autoEnable"].write(value.autoEnable)
        try writer["autoEnableOrganizationMembers"].write(value.autoEnableOrganizationMembers)
        try writer["dataSources"].write(value.dataSources, with: GuardDutyClientTypes.OrganizationDataSourceConfigurations.write(value:to:))
        try writer["features"].writeList(value.features, memberWritingClosure: GuardDutyClientTypes.OrganizationFeatureConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdatePublishingDestinationInput {

    static func write(value: UpdatePublishingDestinationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["destinationProperties"].write(value.destinationProperties, with: GuardDutyClientTypes.DestinationProperties.write(value:to:))
    }
}

extension UpdateThreatIntelSetInput {

    static func write(value: UpdateThreatIntelSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["activate"].write(value.activate)
        try writer["location"].write(value.location)
        try writer["name"].write(value.name)
    }
}

extension AcceptAdministratorInvitationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AcceptAdministratorInvitationOutput {
        return AcceptAdministratorInvitationOutput()
    }
}

extension AcceptInvitationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AcceptInvitationOutput {
        return AcceptInvitationOutput()
    }
}

extension ArchiveFindingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ArchiveFindingsOutput {
        return ArchiveFindingsOutput()
    }
}

extension CreateDetectorOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDetectorOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateDetectorOutput()
        value.detectorId = try reader["detectorId"].readIfPresent()
        value.unprocessedDataSources = try reader["unprocessedDataSources"].readIfPresent(with: GuardDutyClientTypes.UnprocessedDataSourcesResult.read(from:))
        return value
    }
}

extension CreateFilterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateFilterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateFilterOutput()
        value.name = try reader["name"].readIfPresent() ?? ""
        return value
    }
}

extension CreateIPSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateIPSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateIPSetOutput()
        value.ipSetId = try reader["ipSetId"].readIfPresent() ?? ""
        return value
    }
}

extension CreateMalwareProtectionPlanOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateMalwareProtectionPlanOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateMalwareProtectionPlanOutput()
        value.malwareProtectionPlanId = try reader["malwareProtectionPlanId"].readIfPresent()
        return value
    }
}

extension CreateMembersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateMembersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateMembersOutput()
        value.unprocessedAccounts = try reader["unprocessedAccounts"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.UnprocessedAccount.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension CreatePublishingDestinationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreatePublishingDestinationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreatePublishingDestinationOutput()
        value.destinationId = try reader["destinationId"].readIfPresent() ?? ""
        return value
    }
}

extension CreateSampleFindingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateSampleFindingsOutput {
        return CreateSampleFindingsOutput()
    }
}

extension CreateThreatIntelSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateThreatIntelSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateThreatIntelSetOutput()
        value.threatIntelSetId = try reader["threatIntelSetId"].readIfPresent() ?? ""
        return value
    }
}

extension DeclineInvitationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeclineInvitationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeclineInvitationsOutput()
        value.unprocessedAccounts = try reader["unprocessedAccounts"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.UnprocessedAccount.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension DeleteDetectorOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteDetectorOutput {
        return DeleteDetectorOutput()
    }
}

extension DeleteFilterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteFilterOutput {
        return DeleteFilterOutput()
    }
}

extension DeleteInvitationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteInvitationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteInvitationsOutput()
        value.unprocessedAccounts = try reader["unprocessedAccounts"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.UnprocessedAccount.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension DeleteIPSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteIPSetOutput {
        return DeleteIPSetOutput()
    }
}

extension DeleteMalwareProtectionPlanOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteMalwareProtectionPlanOutput {
        return DeleteMalwareProtectionPlanOutput()
    }
}

extension DeleteMembersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteMembersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteMembersOutput()
        value.unprocessedAccounts = try reader["unprocessedAccounts"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.UnprocessedAccount.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension DeletePublishingDestinationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeletePublishingDestinationOutput {
        return DeletePublishingDestinationOutput()
    }
}

extension DeleteThreatIntelSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteThreatIntelSetOutput {
        return DeleteThreatIntelSetOutput()
    }
}

extension DescribeMalwareScansOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeMalwareScansOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeMalwareScansOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.scans = try reader["scans"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.Scan.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension DescribeOrganizationConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeOrganizationConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeOrganizationConfigurationOutput()
        value.autoEnable = try reader["autoEnable"].readIfPresent()
        value.autoEnableOrganizationMembers = try reader["autoEnableOrganizationMembers"].readIfPresent()
        value.dataSources = try reader["dataSources"].readIfPresent(with: GuardDutyClientTypes.OrganizationDataSourceConfigurationsResult.read(from:))
        value.features = try reader["features"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.OrganizationFeatureConfigurationResult.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.memberAccountLimitReached = try reader["memberAccountLimitReached"].readIfPresent() ?? false
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension DescribePublishingDestinationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribePublishingDestinationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribePublishingDestinationOutput()
        value.destinationId = try reader["destinationId"].readIfPresent() ?? ""
        value.destinationProperties = try reader["destinationProperties"].readIfPresent(with: GuardDutyClientTypes.DestinationProperties.read(from:))
        value.destinationType = try reader["destinationType"].readIfPresent() ?? .sdkUnknown("")
        value.publishingFailureStartTimestamp = try reader["publishingFailureStartTimestamp"].readIfPresent() ?? 0
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension DisableOrganizationAdminAccountOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisableOrganizationAdminAccountOutput {
        return DisableOrganizationAdminAccountOutput()
    }
}

extension DisassociateFromAdministratorAccountOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisassociateFromAdministratorAccountOutput {
        return DisassociateFromAdministratorAccountOutput()
    }
}

extension DisassociateFromMasterAccountOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisassociateFromMasterAccountOutput {
        return DisassociateFromMasterAccountOutput()
    }
}

extension DisassociateMembersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisassociateMembersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DisassociateMembersOutput()
        value.unprocessedAccounts = try reader["unprocessedAccounts"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.UnprocessedAccount.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension EnableOrganizationAdminAccountOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> EnableOrganizationAdminAccountOutput {
        return EnableOrganizationAdminAccountOutput()
    }
}

extension GetAdministratorAccountOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetAdministratorAccountOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetAdministratorAccountOutput()
        value.administrator = try reader["administrator"].readIfPresent(with: GuardDutyClientTypes.Administrator.read(from:))
        return value
    }
}

extension GetCoverageStatisticsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetCoverageStatisticsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetCoverageStatisticsOutput()
        value.coverageStatistics = try reader["coverageStatistics"].readIfPresent(with: GuardDutyClientTypes.CoverageStatistics.read(from:))
        return value
    }
}

extension GetDetectorOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDetectorOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDetectorOutput()
        value.createdAt = try reader["createdAt"].readIfPresent()
        value.dataSources = try reader["dataSources"].readIfPresent(with: GuardDutyClientTypes.DataSourceConfigurationsResult.read(from:))
        value.features = try reader["features"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.DetectorFeatureConfigurationResult.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.findingPublishingFrequency = try reader["findingPublishingFrequency"].readIfPresent()
        value.serviceRole = try reader["serviceRole"].readIfPresent() ?? ""
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.updatedAt = try reader["updatedAt"].readIfPresent()
        return value
    }
}

extension GetFilterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetFilterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetFilterOutput()
        value.action = try reader["action"].readIfPresent() ?? .sdkUnknown("")
        value.description = try reader["description"].readIfPresent()
        value.findingCriteria = try reader["findingCriteria"].readIfPresent(with: GuardDutyClientTypes.FindingCriteria.read(from:))
        value.name = try reader["name"].readIfPresent() ?? ""
        value.rank = try reader["rank"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension GetFindingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetFindingsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetFindingsOutput()
        value.findings = try reader["findings"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.Finding.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension GetFindingsStatisticsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetFindingsStatisticsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetFindingsStatisticsOutput()
        value.findingStatistics = try reader["findingStatistics"].readIfPresent(with: GuardDutyClientTypes.FindingStatistics.read(from:))
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension GetInvitationsCountOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetInvitationsCountOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetInvitationsCountOutput()
        value.invitationsCount = try reader["invitationsCount"].readIfPresent()
        return value
    }
}

extension GetIPSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetIPSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetIPSetOutput()
        value.format = try reader["format"].readIfPresent() ?? .sdkUnknown("")
        value.location = try reader["location"].readIfPresent() ?? ""
        value.name = try reader["name"].readIfPresent() ?? ""
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension GetMalwareProtectionPlanOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetMalwareProtectionPlanOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetMalwareProtectionPlanOutput()
        value.actions = try reader["actions"].readIfPresent(with: GuardDutyClientTypes.MalwareProtectionPlanActions.read(from:))
        value.arn = try reader["arn"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.protectedResource = try reader["protectedResource"].readIfPresent(with: GuardDutyClientTypes.CreateProtectedResource.read(from:))
        value.role = try reader["role"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.statusReasons = try reader["statusReasons"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.MalwareProtectionPlanStatusReason.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension GetMalwareScanSettingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetMalwareScanSettingsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetMalwareScanSettingsOutput()
        value.ebsSnapshotPreservation = try reader["ebsSnapshotPreservation"].readIfPresent()
        value.scanResourceCriteria = try reader["scanResourceCriteria"].readIfPresent(with: GuardDutyClientTypes.ScanResourceCriteria.read(from:))
        return value
    }
}

extension GetMasterAccountOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetMasterAccountOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetMasterAccountOutput()
        value.master = try reader["master"].readIfPresent(with: GuardDutyClientTypes.Master.read(from:))
        return value
    }
}

extension GetMemberDetectorsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetMemberDetectorsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetMemberDetectorsOutput()
        value.memberDataSourceConfigurations = try reader["members"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.MemberDataSourceConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.unprocessedAccounts = try reader["unprocessedAccounts"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.UnprocessedAccount.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension GetMembersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetMembersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetMembersOutput()
        value.members = try reader["members"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.Member.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.unprocessedAccounts = try reader["unprocessedAccounts"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.UnprocessedAccount.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension GetOrganizationStatisticsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetOrganizationStatisticsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetOrganizationStatisticsOutput()
        value.organizationDetails = try reader["organizationDetails"].readIfPresent(with: GuardDutyClientTypes.OrganizationDetails.read(from:))
        return value
    }
}

extension GetRemainingFreeTrialDaysOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetRemainingFreeTrialDaysOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetRemainingFreeTrialDaysOutput()
        value.accounts = try reader["accounts"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.AccountFreeTrialInfo.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.unprocessedAccounts = try reader["unprocessedAccounts"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.UnprocessedAccount.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetThreatIntelSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetThreatIntelSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetThreatIntelSetOutput()
        value.format = try reader["format"].readIfPresent() ?? .sdkUnknown("")
        value.location = try reader["location"].readIfPresent() ?? ""
        value.name = try reader["name"].readIfPresent() ?? ""
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension GetUsageStatisticsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetUsageStatisticsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetUsageStatisticsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.usageStatistics = try reader["usageStatistics"].readIfPresent(with: GuardDutyClientTypes.UsageStatistics.read(from:))
        return value
    }
}

extension InviteMembersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> InviteMembersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = InviteMembersOutput()
        value.unprocessedAccounts = try reader["unprocessedAccounts"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.UnprocessedAccount.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListCoverageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListCoverageOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListCoverageOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.resources = try reader["resources"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.CoverageResource.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListDetectorsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDetectorsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDetectorsOutput()
        value.detectorIds = try reader["detectorIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListFiltersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListFiltersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListFiltersOutput()
        value.filterNames = try reader["filterNames"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListFindingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListFindingsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListFindingsOutput()
        value.findingIds = try reader["findingIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListInvitationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListInvitationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListInvitationsOutput()
        value.invitations = try reader["invitations"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.Invitation.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListIPSetsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListIPSetsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListIPSetsOutput()
        value.ipSetIds = try reader["ipSetIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListMalwareProtectionPlansOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListMalwareProtectionPlansOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListMalwareProtectionPlansOutput()
        value.malwareProtectionPlans = try reader["malwareProtectionPlans"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.MalwareProtectionPlanSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListMembersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListMembersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListMembersOutput()
        value.members = try reader["members"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.Member.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListOrganizationAdminAccountsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListOrganizationAdminAccountsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListOrganizationAdminAccountsOutput()
        value.adminAccounts = try reader["adminAccounts"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.AdminAccount.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListPublishingDestinationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListPublishingDestinationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListPublishingDestinationsOutput()
        value.destinations = try reader["destinations"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.Destination.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension ListThreatIntelSetsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListThreatIntelSetsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListThreatIntelSetsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.threatIntelSetIds = try reader["threatIntelSetIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension StartMalwareScanOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartMalwareScanOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartMalwareScanOutput()
        value.scanId = try reader["scanId"].readIfPresent()
        return value
    }
}

extension StartMonitoringMembersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartMonitoringMembersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartMonitoringMembersOutput()
        value.unprocessedAccounts = try reader["unprocessedAccounts"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.UnprocessedAccount.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension StopMonitoringMembersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopMonitoringMembersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StopMonitoringMembersOutput()
        value.unprocessedAccounts = try reader["unprocessedAccounts"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.UnprocessedAccount.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UnarchiveFindingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UnarchiveFindingsOutput {
        return UnarchiveFindingsOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateDetectorOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateDetectorOutput {
        return UpdateDetectorOutput()
    }
}

extension UpdateFilterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateFilterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateFilterOutput()
        value.name = try reader["name"].readIfPresent() ?? ""
        return value
    }
}

extension UpdateFindingsFeedbackOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateFindingsFeedbackOutput {
        return UpdateFindingsFeedbackOutput()
    }
}

extension UpdateIPSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateIPSetOutput {
        return UpdateIPSetOutput()
    }
}

extension UpdateMalwareProtectionPlanOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateMalwareProtectionPlanOutput {
        return UpdateMalwareProtectionPlanOutput()
    }
}

extension UpdateMalwareScanSettingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateMalwareScanSettingsOutput {
        return UpdateMalwareScanSettingsOutput()
    }
}

extension UpdateMemberDetectorsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateMemberDetectorsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateMemberDetectorsOutput()
        value.unprocessedAccounts = try reader["unprocessedAccounts"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.UnprocessedAccount.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension UpdateOrganizationConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateOrganizationConfigurationOutput {
        return UpdateOrganizationConfigurationOutput()
    }
}

extension UpdatePublishingDestinationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdatePublishingDestinationOutput {
        return UpdatePublishingDestinationOutput()
    }
}

extension UpdateThreatIntelSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateThreatIntelSetOutput {
        return UpdateThreatIntelSetOutput()
    }
}

enum AcceptAdministratorInvitationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AcceptInvitationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ArchiveFindingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateDetectorOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateFilterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateIPSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateMalwareProtectionPlanOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateMembersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreatePublishingDestinationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateSampleFindingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateThreatIntelSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeclineInvitationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteDetectorOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteFilterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteInvitationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteIPSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteMalwareProtectionPlanOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteMembersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeletePublishingDestinationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteThreatIntelSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeMalwareScansOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeOrganizationConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribePublishingDestinationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisableOrganizationAdminAccountOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisassociateFromAdministratorAccountOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisassociateFromMasterAccountOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisassociateMembersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum EnableOrganizationAdminAccountOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetAdministratorAccountOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetCoverageStatisticsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDetectorOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetFilterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetFindingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetFindingsStatisticsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetInvitationsCountOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetIPSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetMalwareProtectionPlanOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetMalwareScanSettingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetMasterAccountOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetMemberDetectorsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetMembersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetOrganizationStatisticsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetRemainingFreeTrialDaysOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetThreatIntelSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetUsageStatisticsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum InviteMembersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListCoverageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDetectorsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListFiltersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListFindingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListInvitationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListIPSetsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListMalwareProtectionPlansOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListMembersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListOrganizationAdminAccountsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListPublishingDestinationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListThreatIntelSetsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartMalwareScanOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartMonitoringMembersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopMonitoringMembersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UnarchiveFindingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateDetectorOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateFilterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateFindingsFeedbackOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateIPSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateMalwareProtectionPlanOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateMalwareScanSettingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateMemberDetectorsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateOrganizationConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdatePublishingDestinationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateThreatIntelSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension BadRequestException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> BadRequestException {
        let reader = baseError.errorBodyReader
        var value = BadRequestException()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.type = try reader["__type"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServerErrorException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalServerErrorException {
        let reader = baseError.errorBodyReader
        var value = InternalServerErrorException()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.type = try reader["__type"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.type = try reader["__type"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.type = try reader["__type"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.type = try reader["__type"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension GuardDutyClientTypes.UnprocessedDataSourcesResult {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.UnprocessedDataSourcesResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.UnprocessedDataSourcesResult()
        value.malwareProtection = try reader["malwareProtection"].readIfPresent(with: GuardDutyClientTypes.MalwareProtectionConfigurationResult.read(from:))
        return value
    }
}

extension GuardDutyClientTypes.MalwareProtectionConfigurationResult {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.MalwareProtectionConfigurationResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.MalwareProtectionConfigurationResult()
        value.scanEc2InstanceWithFindings = try reader["scanEc2InstanceWithFindings"].readIfPresent(with: GuardDutyClientTypes.ScanEc2InstanceWithFindingsResult.read(from:))
        value.serviceRole = try reader["serviceRole"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.ScanEc2InstanceWithFindingsResult {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.ScanEc2InstanceWithFindingsResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.ScanEc2InstanceWithFindingsResult()
        value.ebsVolumes = try reader["ebsVolumes"].readIfPresent(with: GuardDutyClientTypes.EbsVolumesResult.read(from:))
        return value
    }
}

extension GuardDutyClientTypes.EbsVolumesResult {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.EbsVolumesResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.EbsVolumesResult()
        value.status = try reader["status"].readIfPresent()
        value.reason = try reader["reason"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.UnprocessedAccount {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.UnprocessedAccount {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.UnprocessedAccount()
        value.accountId = try reader["accountId"].readIfPresent() ?? ""
        value.result = try reader["result"].readIfPresent() ?? ""
        return value
    }
}

extension GuardDutyClientTypes.Scan {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.Scan {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.Scan()
        value.detectorId = try reader["detectorId"].readIfPresent()
        value.adminDetectorId = try reader["adminDetectorId"].readIfPresent()
        value.scanId = try reader["scanId"].readIfPresent()
        value.scanStatus = try reader["scanStatus"].readIfPresent()
        value.failureReason = try reader["failureReason"].readIfPresent()
        value.scanStartTime = try reader["scanStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.scanEndTime = try reader["scanEndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.triggerDetails = try reader["triggerDetails"].readIfPresent(with: GuardDutyClientTypes.TriggerDetails.read(from:))
        value.resourceDetails = try reader["resourceDetails"].readIfPresent(with: GuardDutyClientTypes.ResourceDetails.read(from:))
        value.scanResultDetails = try reader["scanResultDetails"].readIfPresent(with: GuardDutyClientTypes.ScanResultDetails.read(from:))
        value.accountId = try reader["accountId"].readIfPresent()
        value.totalBytes = try reader["totalBytes"].readIfPresent()
        value.fileCount = try reader["fileCount"].readIfPresent()
        value.attachedVolumes = try reader["attachedVolumes"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.VolumeDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.scanType = try reader["scanType"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.VolumeDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.VolumeDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.VolumeDetail()
        value.volumeArn = try reader["volumeArn"].readIfPresent()
        value.volumeType = try reader["volumeType"].readIfPresent()
        value.deviceName = try reader["deviceName"].readIfPresent()
        value.volumeSizeInGB = try reader["volumeSizeInGB"].readIfPresent()
        value.encryptionType = try reader["encryptionType"].readIfPresent()
        value.snapshotArn = try reader["snapshotArn"].readIfPresent()
        value.kmsKeyArn = try reader["kmsKeyArn"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.ScanResultDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.ScanResultDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.ScanResultDetails()
        value.scanResult = try reader["scanResult"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.ResourceDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.ResourceDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.ResourceDetails()
        value.instanceArn = try reader["instanceArn"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.TriggerDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.TriggerDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.TriggerDetails()
        value.guardDutyFindingId = try reader["guardDutyFindingId"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.OrganizationDataSourceConfigurationsResult {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.OrganizationDataSourceConfigurationsResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.OrganizationDataSourceConfigurationsResult()
        value.s3Logs = try reader["s3Logs"].readIfPresent(with: GuardDutyClientTypes.OrganizationS3LogsConfigurationResult.read(from:))
        value.kubernetes = try reader["kubernetes"].readIfPresent(with: GuardDutyClientTypes.OrganizationKubernetesConfigurationResult.read(from:))
        value.malwareProtection = try reader["malwareProtection"].readIfPresent(with: GuardDutyClientTypes.OrganizationMalwareProtectionConfigurationResult.read(from:))
        return value
    }
}

extension GuardDutyClientTypes.OrganizationMalwareProtectionConfigurationResult {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.OrganizationMalwareProtectionConfigurationResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.OrganizationMalwareProtectionConfigurationResult()
        value.scanEc2InstanceWithFindings = try reader["scanEc2InstanceWithFindings"].readIfPresent(with: GuardDutyClientTypes.OrganizationScanEc2InstanceWithFindingsResult.read(from:))
        return value
    }
}

extension GuardDutyClientTypes.OrganizationScanEc2InstanceWithFindingsResult {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.OrganizationScanEc2InstanceWithFindingsResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.OrganizationScanEc2InstanceWithFindingsResult()
        value.ebsVolumes = try reader["ebsVolumes"].readIfPresent(with: GuardDutyClientTypes.OrganizationEbsVolumesResult.read(from:))
        return value
    }
}

extension GuardDutyClientTypes.OrganizationEbsVolumesResult {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.OrganizationEbsVolumesResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.OrganizationEbsVolumesResult()
        value.autoEnable = try reader["autoEnable"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.OrganizationKubernetesConfigurationResult {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.OrganizationKubernetesConfigurationResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.OrganizationKubernetesConfigurationResult()
        value.auditLogs = try reader["auditLogs"].readIfPresent(with: GuardDutyClientTypes.OrganizationKubernetesAuditLogsConfigurationResult.read(from:))
        return value
    }
}

extension GuardDutyClientTypes.OrganizationKubernetesAuditLogsConfigurationResult {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.OrganizationKubernetesAuditLogsConfigurationResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.OrganizationKubernetesAuditLogsConfigurationResult()
        value.autoEnable = try reader["autoEnable"].readIfPresent() ?? false
        return value
    }
}

extension GuardDutyClientTypes.OrganizationS3LogsConfigurationResult {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.OrganizationS3LogsConfigurationResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.OrganizationS3LogsConfigurationResult()
        value.autoEnable = try reader["autoEnable"].readIfPresent() ?? false
        return value
    }
}

extension GuardDutyClientTypes.OrganizationFeatureConfigurationResult {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.OrganizationFeatureConfigurationResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.OrganizationFeatureConfigurationResult()
        value.name = try reader["name"].readIfPresent()
        value.autoEnable = try reader["autoEnable"].readIfPresent()
        value.additionalConfiguration = try reader["additionalConfiguration"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.OrganizationAdditionalConfigurationResult.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GuardDutyClientTypes.OrganizationAdditionalConfigurationResult {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.OrganizationAdditionalConfigurationResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.OrganizationAdditionalConfigurationResult()
        value.name = try reader["name"].readIfPresent()
        value.autoEnable = try reader["autoEnable"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.DestinationProperties {

    static func write(value: GuardDutyClientTypes.DestinationProperties?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["destinationArn"].write(value.destinationArn)
        try writer["kmsKeyArn"].write(value.kmsKeyArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.DestinationProperties {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.DestinationProperties()
        value.destinationArn = try reader["destinationArn"].readIfPresent()
        value.kmsKeyArn = try reader["kmsKeyArn"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.Administrator {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.Administrator {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.Administrator()
        value.accountId = try reader["accountId"].readIfPresent()
        value.invitationId = try reader["invitationId"].readIfPresent()
        value.relationshipStatus = try reader["relationshipStatus"].readIfPresent()
        value.invitedAt = try reader["invitedAt"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.CoverageStatistics {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.CoverageStatistics {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.CoverageStatistics()
        value.countByResourceType = try reader["countByResourceType"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readInt(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.countByCoverageStatus = try reader["countByCoverageStatus"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readInt(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension GuardDutyClientTypes.DataSourceConfigurationsResult {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.DataSourceConfigurationsResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.DataSourceConfigurationsResult()
        value.cloudTrail = try reader["cloudTrail"].readIfPresent(with: GuardDutyClientTypes.CloudTrailConfigurationResult.read(from:))
        value.dnsLogs = try reader["dnsLogs"].readIfPresent(with: GuardDutyClientTypes.DNSLogsConfigurationResult.read(from:))
        value.flowLogs = try reader["flowLogs"].readIfPresent(with: GuardDutyClientTypes.FlowLogsConfigurationResult.read(from:))
        value.s3Logs = try reader["s3Logs"].readIfPresent(with: GuardDutyClientTypes.S3LogsConfigurationResult.read(from:))
        value.kubernetes = try reader["kubernetes"].readIfPresent(with: GuardDutyClientTypes.KubernetesConfigurationResult.read(from:))
        value.malwareProtection = try reader["malwareProtection"].readIfPresent(with: GuardDutyClientTypes.MalwareProtectionConfigurationResult.read(from:))
        return value
    }
}

extension GuardDutyClientTypes.KubernetesConfigurationResult {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.KubernetesConfigurationResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.KubernetesConfigurationResult()
        value.auditLogs = try reader["auditLogs"].readIfPresent(with: GuardDutyClientTypes.KubernetesAuditLogsConfigurationResult.read(from:))
        return value
    }
}

extension GuardDutyClientTypes.KubernetesAuditLogsConfigurationResult {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.KubernetesAuditLogsConfigurationResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.KubernetesAuditLogsConfigurationResult()
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension GuardDutyClientTypes.S3LogsConfigurationResult {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.S3LogsConfigurationResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.S3LogsConfigurationResult()
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension GuardDutyClientTypes.FlowLogsConfigurationResult {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.FlowLogsConfigurationResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.FlowLogsConfigurationResult()
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension GuardDutyClientTypes.DNSLogsConfigurationResult {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.DNSLogsConfigurationResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.DNSLogsConfigurationResult()
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension GuardDutyClientTypes.CloudTrailConfigurationResult {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.CloudTrailConfigurationResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.CloudTrailConfigurationResult()
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension GuardDutyClientTypes.DetectorFeatureConfigurationResult {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.DetectorFeatureConfigurationResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.DetectorFeatureConfigurationResult()
        value.name = try reader["name"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.updatedAt = try reader["updatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.additionalConfiguration = try reader["additionalConfiguration"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.DetectorAdditionalConfigurationResult.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GuardDutyClientTypes.DetectorAdditionalConfigurationResult {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.DetectorAdditionalConfigurationResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.DetectorAdditionalConfigurationResult()
        value.name = try reader["name"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.updatedAt = try reader["updatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension GuardDutyClientTypes.FindingCriteria {

    static func write(value: GuardDutyClientTypes.FindingCriteria?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["criterion"].writeMap(value.criterion, valueWritingClosure: GuardDutyClientTypes.Condition.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.FindingCriteria {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.FindingCriteria()
        value.criterion = try reader["criterion"].readMapIfPresent(valueReadingClosure: GuardDutyClientTypes.Condition.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension GuardDutyClientTypes.Condition {

    static func write(value: GuardDutyClientTypes.Condition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["eq"].writeList(value.eq, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["equals"].writeList(value.equals, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["greaterThan"].write(value.greaterThan)
        try writer["greaterThanOrEqual"].write(value.greaterThanOrEqual)
        try writer["gt"].write(value.gt)
        try writer["gte"].write(value.gte)
        try writer["lessThan"].write(value.lessThan)
        try writer["lessThanOrEqual"].write(value.lessThanOrEqual)
        try writer["lt"].write(value.lt)
        try writer["lte"].write(value.lte)
        try writer["neq"].writeList(value.neq, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["notEquals"].writeList(value.notEquals, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.Condition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.Condition()
        value.eq = try reader["eq"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.neq = try reader["neq"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.gt = try reader["gt"].readIfPresent()
        value.gte = try reader["gte"].readIfPresent()
        value.lt = try reader["lt"].readIfPresent()
        value.lte = try reader["lte"].readIfPresent()
        value.equals = try reader["equals"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.notEquals = try reader["notEquals"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.greaterThan = try reader["greaterThan"].readIfPresent()
        value.greaterThanOrEqual = try reader["greaterThanOrEqual"].readIfPresent()
        value.lessThan = try reader["lessThan"].readIfPresent()
        value.lessThanOrEqual = try reader["lessThanOrEqual"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.Finding {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.Finding {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.Finding()
        value.accountId = try reader["accountId"].readIfPresent() ?? ""
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.confidence = try reader["confidence"].readIfPresent()
        value.createdAt = try reader["createdAt"].readIfPresent() ?? ""
        value.description = try reader["description"].readIfPresent()
        value.id = try reader["id"].readIfPresent() ?? ""
        value.partition = try reader["partition"].readIfPresent()
        value.region = try reader["region"].readIfPresent() ?? ""
        value.resource = try reader["resource"].readIfPresent(with: GuardDutyClientTypes.Resource.read(from:))
        value.schemaVersion = try reader["schemaVersion"].readIfPresent() ?? ""
        value.service = try reader["service"].readIfPresent(with: GuardDutyClientTypes.Service.read(from:))
        value.severity = try reader["severity"].readIfPresent() ?? 0.0
        value.title = try reader["title"].readIfPresent()
        value.type = try reader["type"].readIfPresent() ?? ""
        value.updatedAt = try reader["updatedAt"].readIfPresent() ?? ""
        return value
    }
}

extension GuardDutyClientTypes.Service {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.Service {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.Service()
        value.action = try reader["action"].readIfPresent(with: GuardDutyClientTypes.Action.read(from:))
        value.evidence = try reader["evidence"].readIfPresent(with: GuardDutyClientTypes.Evidence.read(from:))
        value.archived = try reader["archived"].readIfPresent()
        value.count = try reader["count"].readIfPresent()
        value.detectorId = try reader["detectorId"].readIfPresent()
        value.eventFirstSeen = try reader["eventFirstSeen"].readIfPresent()
        value.eventLastSeen = try reader["eventLastSeen"].readIfPresent()
        value.resourceRole = try reader["resourceRole"].readIfPresent()
        value.serviceName = try reader["serviceName"].readIfPresent()
        value.userFeedback = try reader["userFeedback"].readIfPresent()
        value.additionalInfo = try reader["additionalInfo"].readIfPresent(with: GuardDutyClientTypes.ServiceAdditionalInfo.read(from:))
        value.featureName = try reader["featureName"].readIfPresent()
        value.ebsVolumeScanDetails = try reader["ebsVolumeScanDetails"].readIfPresent(with: GuardDutyClientTypes.EbsVolumeScanDetails.read(from:))
        value.runtimeDetails = try reader["runtimeDetails"].readIfPresent(with: GuardDutyClientTypes.RuntimeDetails.read(from:))
        value.detection = try reader["detection"].readIfPresent(with: GuardDutyClientTypes.Detection.read(from:))
        value.malwareScanDetails = try reader["malwareScanDetails"].readIfPresent(with: GuardDutyClientTypes.MalwareScanDetails.read(from:))
        return value
    }
}

extension GuardDutyClientTypes.MalwareScanDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.MalwareScanDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.MalwareScanDetails()
        value.threats = try reader["threats"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.Threat.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GuardDutyClientTypes.Threat {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.Threat {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.Threat()
        value.name = try reader["name"].readIfPresent()
        value.source = try reader["source"].readIfPresent()
        value.itemPaths = try reader["itemPaths"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.ItemPath.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GuardDutyClientTypes.ItemPath {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.ItemPath {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.ItemPath()
        value.nestedItemPath = try reader["nestedItemPath"].readIfPresent()
        value.hash = try reader["hash"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.Detection {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.Detection {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.Detection()
        value.anomaly = try reader["anomaly"].readIfPresent(with: GuardDutyClientTypes.Anomaly.read(from:))
        return value
    }
}

extension GuardDutyClientTypes.Anomaly {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.Anomaly {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.Anomaly()
        value.profiles = try reader["profiles"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.mapReadingClosure(valueReadingClosure: SmithyReadWrite.listReadingClosure(memberReadingClosure: GuardDutyClientTypes.AnomalyObject.read(from:), memberNodeInfo: "member", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.unusual = try reader["unusual"].readIfPresent(with: GuardDutyClientTypes.AnomalyUnusual.read(from:))
        return value
    }
}

extension GuardDutyClientTypes.AnomalyUnusual {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.AnomalyUnusual {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.AnomalyUnusual()
        value.behavior = try reader["behavior"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.mapReadingClosure(valueReadingClosure: GuardDutyClientTypes.AnomalyObject.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension GuardDutyClientTypes.AnomalyObject {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.AnomalyObject {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.AnomalyObject()
        value.profileType = try reader["profileType"].readIfPresent()
        value.profileSubtype = try reader["profileSubtype"].readIfPresent()
        value.observations = try reader["observations"].readIfPresent(with: GuardDutyClientTypes.Observations.read(from:))
        return value
    }
}

extension GuardDutyClientTypes.Observations {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.Observations {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.Observations()
        value.text = try reader["text"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GuardDutyClientTypes.RuntimeDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.RuntimeDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.RuntimeDetails()
        value.process = try reader["process"].readIfPresent(with: GuardDutyClientTypes.ProcessDetails.read(from:))
        value.context = try reader["context"].readIfPresent(with: GuardDutyClientTypes.RuntimeContext.read(from:))
        return value
    }
}

extension GuardDutyClientTypes.RuntimeContext {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.RuntimeContext {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.RuntimeContext()
        value.modifyingProcess = try reader["modifyingProcess"].readIfPresent(with: GuardDutyClientTypes.ProcessDetails.read(from:))
        value.modifiedAt = try reader["modifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.scriptPath = try reader["scriptPath"].readIfPresent()
        value.libraryPath = try reader["libraryPath"].readIfPresent()
        value.ldPreloadValue = try reader["ldPreloadValue"].readIfPresent()
        value.socketPath = try reader["socketPath"].readIfPresent()
        value.runcBinaryPath = try reader["runcBinaryPath"].readIfPresent()
        value.releaseAgentPath = try reader["releaseAgentPath"].readIfPresent()
        value.mountSource = try reader["mountSource"].readIfPresent()
        value.mountTarget = try reader["mountTarget"].readIfPresent()
        value.fileSystemType = try reader["fileSystemType"].readIfPresent()
        value.flags = try reader["flags"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.moduleName = try reader["moduleName"].readIfPresent()
        value.moduleFilePath = try reader["moduleFilePath"].readIfPresent()
        value.moduleSha256 = try reader["moduleSha256"].readIfPresent()
        value.shellHistoryFilePath = try reader["shellHistoryFilePath"].readIfPresent()
        value.targetProcess = try reader["targetProcess"].readIfPresent(with: GuardDutyClientTypes.ProcessDetails.read(from:))
        value.addressFamily = try reader["addressFamily"].readIfPresent()
        value.ianaProtocolNumber = try reader["ianaProtocolNumber"].readIfPresent()
        value.memoryRegions = try reader["memoryRegions"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.toolName = try reader["toolName"].readIfPresent()
        value.toolCategory = try reader["toolCategory"].readIfPresent()
        value.serviceName = try reader["serviceName"].readIfPresent()
        value.commandLineExample = try reader["commandLineExample"].readIfPresent()
        value.threatFilePath = try reader["threatFilePath"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.ProcessDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.ProcessDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.ProcessDetails()
        value.name = try reader["name"].readIfPresent()
        value.executablePath = try reader["executablePath"].readIfPresent()
        value.executableSha256 = try reader["executableSha256"].readIfPresent()
        value.namespacePid = try reader["namespacePid"].readIfPresent()
        value.pwd = try reader["pwd"].readIfPresent()
        value.pid = try reader["pid"].readIfPresent()
        value.startTime = try reader["startTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.uuid = try reader["uuid"].readIfPresent()
        value.parentUuid = try reader["parentUuid"].readIfPresent()
        value.user = try reader["user"].readIfPresent()
        value.userId = try reader["userId"].readIfPresent()
        value.euid = try reader["euid"].readIfPresent()
        value.lineage = try reader["lineage"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.LineageObject.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GuardDutyClientTypes.LineageObject {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.LineageObject {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.LineageObject()
        value.startTime = try reader["startTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.namespacePid = try reader["namespacePid"].readIfPresent()
        value.userId = try reader["userId"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.pid = try reader["pid"].readIfPresent()
        value.uuid = try reader["uuid"].readIfPresent()
        value.executablePath = try reader["executablePath"].readIfPresent()
        value.euid = try reader["euid"].readIfPresent()
        value.parentUuid = try reader["parentUuid"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.EbsVolumeScanDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.EbsVolumeScanDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.EbsVolumeScanDetails()
        value.scanId = try reader["scanId"].readIfPresent()
        value.scanStartedAt = try reader["scanStartedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.scanCompletedAt = try reader["scanCompletedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.triggerFindingId = try reader["triggerFindingId"].readIfPresent()
        value.sources = try reader["sources"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.scanDetections = try reader["scanDetections"].readIfPresent(with: GuardDutyClientTypes.ScanDetections.read(from:))
        value.scanType = try reader["scanType"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.ScanDetections {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.ScanDetections {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.ScanDetections()
        value.scannedItemCount = try reader["scannedItemCount"].readIfPresent(with: GuardDutyClientTypes.ScannedItemCount.read(from:))
        value.threatsDetectedItemCount = try reader["threatsDetectedItemCount"].readIfPresent(with: GuardDutyClientTypes.ThreatsDetectedItemCount.read(from:))
        value.highestSeverityThreatDetails = try reader["highestSeverityThreatDetails"].readIfPresent(with: GuardDutyClientTypes.HighestSeverityThreatDetails.read(from:))
        value.threatDetectedByName = try reader["threatDetectedByName"].readIfPresent(with: GuardDutyClientTypes.ThreatDetectedByName.read(from:))
        return value
    }
}

extension GuardDutyClientTypes.ThreatDetectedByName {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.ThreatDetectedByName {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.ThreatDetectedByName()
        value.itemCount = try reader["itemCount"].readIfPresent()
        value.uniqueThreatNameCount = try reader["uniqueThreatNameCount"].readIfPresent()
        value.shortened = try reader["shortened"].readIfPresent()
        value.threatNames = try reader["threatNames"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.ScanThreatName.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GuardDutyClientTypes.ScanThreatName {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.ScanThreatName {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.ScanThreatName()
        value.name = try reader["name"].readIfPresent()
        value.severity = try reader["severity"].readIfPresent()
        value.itemCount = try reader["itemCount"].readIfPresent()
        value.filePaths = try reader["filePaths"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.ScanFilePath.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GuardDutyClientTypes.ScanFilePath {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.ScanFilePath {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.ScanFilePath()
        value.filePath = try reader["filePath"].readIfPresent()
        value.volumeArn = try reader["volumeArn"].readIfPresent()
        value.hash = try reader["hash"].readIfPresent()
        value.fileName = try reader["fileName"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.HighestSeverityThreatDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.HighestSeverityThreatDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.HighestSeverityThreatDetails()
        value.severity = try reader["severity"].readIfPresent()
        value.threatName = try reader["threatName"].readIfPresent()
        value.count = try reader["count"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.ThreatsDetectedItemCount {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.ThreatsDetectedItemCount {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.ThreatsDetectedItemCount()
        value.files = try reader["files"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.ScannedItemCount {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.ScannedItemCount {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.ScannedItemCount()
        value.totalGb = try reader["totalGb"].readIfPresent()
        value.files = try reader["files"].readIfPresent()
        value.volumes = try reader["volumes"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.ServiceAdditionalInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.ServiceAdditionalInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.ServiceAdditionalInfo()
        value.value = try reader["value"].readIfPresent()
        value.type = try reader["type"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.Evidence {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.Evidence {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.Evidence()
        value.threatIntelligenceDetails = try reader["threatIntelligenceDetails"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.ThreatIntelligenceDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GuardDutyClientTypes.ThreatIntelligenceDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.ThreatIntelligenceDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.ThreatIntelligenceDetail()
        value.threatListName = try reader["threatListName"].readIfPresent()
        value.threatNames = try reader["threatNames"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.threatFileSha256 = try reader["threatFileSha256"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.Action {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.Action {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.Action()
        value.actionType = try reader["actionType"].readIfPresent()
        value.awsApiCallAction = try reader["awsApiCallAction"].readIfPresent(with: GuardDutyClientTypes.AwsApiCallAction.read(from:))
        value.dnsRequestAction = try reader["dnsRequestAction"].readIfPresent(with: GuardDutyClientTypes.DnsRequestAction.read(from:))
        value.networkConnectionAction = try reader["networkConnectionAction"].readIfPresent(with: GuardDutyClientTypes.NetworkConnectionAction.read(from:))
        value.portProbeAction = try reader["portProbeAction"].readIfPresent(with: GuardDutyClientTypes.PortProbeAction.read(from:))
        value.kubernetesApiCallAction = try reader["kubernetesApiCallAction"].readIfPresent(with: GuardDutyClientTypes.KubernetesApiCallAction.read(from:))
        value.rdsLoginAttemptAction = try reader["rdsLoginAttemptAction"].readIfPresent(with: GuardDutyClientTypes.RdsLoginAttemptAction.read(from:))
        value.kubernetesPermissionCheckedDetails = try reader["kubernetesPermissionCheckedDetails"].readIfPresent(with: GuardDutyClientTypes.KubernetesPermissionCheckedDetails.read(from:))
        value.kubernetesRoleBindingDetails = try reader["kubernetesRoleBindingDetails"].readIfPresent(with: GuardDutyClientTypes.KubernetesRoleBindingDetails.read(from:))
        value.kubernetesRoleDetails = try reader["kubernetesRoleDetails"].readIfPresent(with: GuardDutyClientTypes.KubernetesRoleDetails.read(from:))
        return value
    }
}

extension GuardDutyClientTypes.KubernetesRoleDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.KubernetesRoleDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.KubernetesRoleDetails()
        value.kind = try reader["kind"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.uid = try reader["uid"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.KubernetesRoleBindingDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.KubernetesRoleBindingDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.KubernetesRoleBindingDetails()
        value.kind = try reader["kind"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.uid = try reader["uid"].readIfPresent()
        value.roleRefName = try reader["roleRefName"].readIfPresent()
        value.roleRefKind = try reader["roleRefKind"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.KubernetesPermissionCheckedDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.KubernetesPermissionCheckedDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.KubernetesPermissionCheckedDetails()
        value.verb = try reader["verb"].readIfPresent()
        value.resource = try reader["resource"].readIfPresent()
        value.namespace = try reader["namespace"].readIfPresent()
        value.allowed = try reader["allowed"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.RdsLoginAttemptAction {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.RdsLoginAttemptAction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.RdsLoginAttemptAction()
        value.remoteIpDetails = try reader["remoteIpDetails"].readIfPresent(with: GuardDutyClientTypes.RemoteIpDetails.read(from:))
        value.loginAttributes = try reader["LoginAttributes"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.LoginAttribute.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GuardDutyClientTypes.LoginAttribute {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.LoginAttribute {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.LoginAttribute()
        value.user = try reader["user"].readIfPresent()
        value.application = try reader["application"].readIfPresent()
        value.failedLoginAttempts = try reader["failedLoginAttempts"].readIfPresent()
        value.successfulLoginAttempts = try reader["successfulLoginAttempts"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.RemoteIpDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.RemoteIpDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.RemoteIpDetails()
        value.city = try reader["city"].readIfPresent(with: GuardDutyClientTypes.City.read(from:))
        value.country = try reader["country"].readIfPresent(with: GuardDutyClientTypes.Country.read(from:))
        value.geoLocation = try reader["geoLocation"].readIfPresent(with: GuardDutyClientTypes.GeoLocation.read(from:))
        value.ipAddressV4 = try reader["ipAddressV4"].readIfPresent()
        value.ipAddressV6 = try reader["ipAddressV6"].readIfPresent()
        value.organization = try reader["organization"].readIfPresent(with: GuardDutyClientTypes.Organization.read(from:))
        return value
    }
}

extension GuardDutyClientTypes.Organization {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.Organization {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.Organization()
        value.asn = try reader["asn"].readIfPresent()
        value.asnOrg = try reader["asnOrg"].readIfPresent()
        value.isp = try reader["isp"].readIfPresent()
        value.org = try reader["org"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.GeoLocation {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.GeoLocation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.GeoLocation()
        value.lat = try reader["lat"].readIfPresent()
        value.lon = try reader["lon"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.Country {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.Country {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.Country()
        value.countryCode = try reader["countryCode"].readIfPresent()
        value.countryName = try reader["countryName"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.City {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.City {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.City()
        value.cityName = try reader["cityName"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.KubernetesApiCallAction {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.KubernetesApiCallAction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.KubernetesApiCallAction()
        value.requestUri = try reader["requestUri"].readIfPresent()
        value.verb = try reader["verb"].readIfPresent()
        value.sourceIps = try reader["sourceIPs"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.userAgent = try reader["userAgent"].readIfPresent()
        value.remoteIpDetails = try reader["remoteIpDetails"].readIfPresent(with: GuardDutyClientTypes.RemoteIpDetails.read(from:))
        value.statusCode = try reader["statusCode"].readIfPresent()
        value.parameters = try reader["parameters"].readIfPresent()
        value.resource = try reader["resource"].readIfPresent()
        value.subresource = try reader["subresource"].readIfPresent()
        value.namespace = try reader["namespace"].readIfPresent()
        value.resourceName = try reader["resourceName"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.PortProbeAction {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.PortProbeAction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.PortProbeAction()
        value.blocked = try reader["blocked"].readIfPresent()
        value.portProbeDetails = try reader["portProbeDetails"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.PortProbeDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GuardDutyClientTypes.PortProbeDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.PortProbeDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.PortProbeDetail()
        value.localPortDetails = try reader["localPortDetails"].readIfPresent(with: GuardDutyClientTypes.LocalPortDetails.read(from:))
        value.localIpDetails = try reader["localIpDetails"].readIfPresent(with: GuardDutyClientTypes.LocalIpDetails.read(from:))
        value.remoteIpDetails = try reader["remoteIpDetails"].readIfPresent(with: GuardDutyClientTypes.RemoteIpDetails.read(from:))
        return value
    }
}

extension GuardDutyClientTypes.LocalIpDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.LocalIpDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.LocalIpDetails()
        value.ipAddressV4 = try reader["ipAddressV4"].readIfPresent()
        value.ipAddressV6 = try reader["ipAddressV6"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.LocalPortDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.LocalPortDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.LocalPortDetails()
        value.port = try reader["port"].readIfPresent()
        value.portName = try reader["portName"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.NetworkConnectionAction {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.NetworkConnectionAction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.NetworkConnectionAction()
        value.blocked = try reader["blocked"].readIfPresent()
        value.connectionDirection = try reader["connectionDirection"].readIfPresent()
        value.localPortDetails = try reader["localPortDetails"].readIfPresent(with: GuardDutyClientTypes.LocalPortDetails.read(from:))
        value.`protocol` = try reader["protocol"].readIfPresent()
        value.localIpDetails = try reader["localIpDetails"].readIfPresent(with: GuardDutyClientTypes.LocalIpDetails.read(from:))
        value.remoteIpDetails = try reader["remoteIpDetails"].readIfPresent(with: GuardDutyClientTypes.RemoteIpDetails.read(from:))
        value.remotePortDetails = try reader["remotePortDetails"].readIfPresent(with: GuardDutyClientTypes.RemotePortDetails.read(from:))
        return value
    }
}

extension GuardDutyClientTypes.RemotePortDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.RemotePortDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.RemotePortDetails()
        value.port = try reader["port"].readIfPresent()
        value.portName = try reader["portName"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.DnsRequestAction {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.DnsRequestAction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.DnsRequestAction()
        value.domain = try reader["domain"].readIfPresent()
        value.`protocol` = try reader["protocol"].readIfPresent()
        value.blocked = try reader["blocked"].readIfPresent()
        value.domainWithSuffix = try reader["domainWithSuffix"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.AwsApiCallAction {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.AwsApiCallAction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.AwsApiCallAction()
        value.api = try reader["api"].readIfPresent()
        value.callerType = try reader["callerType"].readIfPresent()
        value.domainDetails = try reader["domainDetails"].readIfPresent(with: GuardDutyClientTypes.DomainDetails.read(from:))
        value.errorCode = try reader["errorCode"].readIfPresent()
        value.userAgent = try reader["userAgent"].readIfPresent()
        value.remoteIpDetails = try reader["remoteIpDetails"].readIfPresent(with: GuardDutyClientTypes.RemoteIpDetails.read(from:))
        value.serviceName = try reader["serviceName"].readIfPresent()
        value.remoteAccountDetails = try reader["remoteAccountDetails"].readIfPresent(with: GuardDutyClientTypes.RemoteAccountDetails.read(from:))
        value.affectedResources = try reader["affectedResources"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension GuardDutyClientTypes.RemoteAccountDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.RemoteAccountDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.RemoteAccountDetails()
        value.accountId = try reader["accountId"].readIfPresent()
        value.affiliated = try reader["affiliated"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.DomainDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.DomainDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.DomainDetails()
        value.domain = try reader["domain"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.Resource {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.Resource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.Resource()
        value.accessKeyDetails = try reader["accessKeyDetails"].readIfPresent(with: GuardDutyClientTypes.AccessKeyDetails.read(from:))
        value.s3BucketDetails = try reader["s3BucketDetails"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.S3BucketDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.instanceDetails = try reader["instanceDetails"].readIfPresent(with: GuardDutyClientTypes.InstanceDetails.read(from:))
        value.eksClusterDetails = try reader["eksClusterDetails"].readIfPresent(with: GuardDutyClientTypes.EksClusterDetails.read(from:))
        value.kubernetesDetails = try reader["kubernetesDetails"].readIfPresent(with: GuardDutyClientTypes.KubernetesDetails.read(from:))
        value.resourceType = try reader["resourceType"].readIfPresent()
        value.ebsVolumeDetails = try reader["ebsVolumeDetails"].readIfPresent(with: GuardDutyClientTypes.EbsVolumeDetails.read(from:))
        value.ecsClusterDetails = try reader["ecsClusterDetails"].readIfPresent(with: GuardDutyClientTypes.EcsClusterDetails.read(from:))
        value.containerDetails = try reader["containerDetails"].readIfPresent(with: GuardDutyClientTypes.Container.read(from:))
        value.rdsDbInstanceDetails = try reader["rdsDbInstanceDetails"].readIfPresent(with: GuardDutyClientTypes.RdsDbInstanceDetails.read(from:))
        value.rdsDbUserDetails = try reader["rdsDbUserDetails"].readIfPresent(with: GuardDutyClientTypes.RdsDbUserDetails.read(from:))
        value.lambdaDetails = try reader["lambdaDetails"].readIfPresent(with: GuardDutyClientTypes.LambdaDetails.read(from:))
        return value
    }
}

extension GuardDutyClientTypes.LambdaDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.LambdaDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.LambdaDetails()
        value.functionArn = try reader["functionArn"].readIfPresent()
        value.functionName = try reader["functionName"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.lastModifiedAt = try reader["lastModifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.revisionId = try reader["revisionId"].readIfPresent()
        value.functionVersion = try reader["functionVersion"].readIfPresent()
        value.role = try reader["role"].readIfPresent()
        value.vpcConfig = try reader["vpcConfig"].readIfPresent(with: GuardDutyClientTypes.VpcConfig.read(from:))
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GuardDutyClientTypes.Tag {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.Tag()
        value.key = try reader["key"].readIfPresent()
        value.value = try reader["value"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.VpcConfig {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.VpcConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.VpcConfig()
        value.subnetIds = try reader["subnetIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.vpcId = try reader["vpcId"].readIfPresent()
        value.securityGroups = try reader["securityGroups"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.SecurityGroup.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GuardDutyClientTypes.SecurityGroup {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.SecurityGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.SecurityGroup()
        value.groupId = try reader["groupId"].readIfPresent()
        value.groupName = try reader["groupName"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.RdsDbUserDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.RdsDbUserDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.RdsDbUserDetails()
        value.user = try reader["user"].readIfPresent()
        value.application = try reader["application"].readIfPresent()
        value.database = try reader["database"].readIfPresent()
        value.ssl = try reader["ssl"].readIfPresent()
        value.authMethod = try reader["authMethod"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.RdsDbInstanceDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.RdsDbInstanceDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.RdsDbInstanceDetails()
        value.dbInstanceIdentifier = try reader["dbInstanceIdentifier"].readIfPresent()
        value.engine = try reader["engine"].readIfPresent()
        value.engineVersion = try reader["engineVersion"].readIfPresent()
        value.dbClusterIdentifier = try reader["dbClusterIdentifier"].readIfPresent()
        value.dbInstanceArn = try reader["dbInstanceArn"].readIfPresent()
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GuardDutyClientTypes.Container {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.Container {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.Container()
        value.containerRuntime = try reader["containerRuntime"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.image = try reader["image"].readIfPresent()
        value.imagePrefix = try reader["imagePrefix"].readIfPresent()
        value.volumeMounts = try reader["volumeMounts"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.VolumeMount.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.securityContext = try reader["securityContext"].readIfPresent(with: GuardDutyClientTypes.SecurityContext.read(from:))
        return value
    }
}

extension GuardDutyClientTypes.SecurityContext {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.SecurityContext {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.SecurityContext()
        value.privileged = try reader["privileged"].readIfPresent()
        value.allowPrivilegeEscalation = try reader["allowPrivilegeEscalation"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.VolumeMount {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.VolumeMount {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.VolumeMount()
        value.name = try reader["name"].readIfPresent()
        value.mountPath = try reader["mountPath"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.EcsClusterDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.EcsClusterDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.EcsClusterDetails()
        value.name = try reader["name"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.activeServicesCount = try reader["activeServicesCount"].readIfPresent()
        value.registeredContainerInstancesCount = try reader["registeredContainerInstancesCount"].readIfPresent()
        value.runningTasksCount = try reader["runningTasksCount"].readIfPresent()
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.taskDetails = try reader["taskDetails"].readIfPresent(with: GuardDutyClientTypes.EcsTaskDetails.read(from:))
        return value
    }
}

extension GuardDutyClientTypes.EcsTaskDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.EcsTaskDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.EcsTaskDetails()
        value.arn = try reader["arn"].readIfPresent()
        value.definitionArn = try reader["definitionArn"].readIfPresent()
        value.version = try reader["version"].readIfPresent()
        value.taskCreatedAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.startedAt = try reader["startedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.startedBy = try reader["startedBy"].readIfPresent()
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.volumes = try reader["volumes"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.Volume.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.containers = try reader["containers"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.Container.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.group = try reader["group"].readIfPresent()
        value.launchType = try reader["launchType"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.Volume {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.Volume {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.Volume()
        value.name = try reader["name"].readIfPresent()
        value.hostPath = try reader["hostPath"].readIfPresent(with: GuardDutyClientTypes.HostPath.read(from:))
        return value
    }
}

extension GuardDutyClientTypes.HostPath {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.HostPath {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.HostPath()
        value.path = try reader["path"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.EbsVolumeDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.EbsVolumeDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.EbsVolumeDetails()
        value.scannedVolumeDetails = try reader["scannedVolumeDetails"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.VolumeDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.skippedVolumeDetails = try reader["skippedVolumeDetails"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.VolumeDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GuardDutyClientTypes.KubernetesDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.KubernetesDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.KubernetesDetails()
        value.kubernetesUserDetails = try reader["kubernetesUserDetails"].readIfPresent(with: GuardDutyClientTypes.KubernetesUserDetails.read(from:))
        value.kubernetesWorkloadDetails = try reader["kubernetesWorkloadDetails"].readIfPresent(with: GuardDutyClientTypes.KubernetesWorkloadDetails.read(from:))
        return value
    }
}

extension GuardDutyClientTypes.KubernetesWorkloadDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.KubernetesWorkloadDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.KubernetesWorkloadDetails()
        value.name = try reader["name"].readIfPresent()
        value.type = try reader["type"].readIfPresent()
        value.uid = try reader["uid"].readIfPresent()
        value.namespace = try reader["namespace"].readIfPresent()
        value.hostNetwork = try reader["hostNetwork"].readIfPresent()
        value.containers = try reader["containers"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.Container.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.volumes = try reader["volumes"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.Volume.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.serviceAccountName = try reader["serviceAccountName"].readIfPresent()
        value.hostIPC = try reader["hostIPC"].readIfPresent()
        value.hostPID = try reader["hostPID"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.KubernetesUserDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.KubernetesUserDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.KubernetesUserDetails()
        value.username = try reader["username"].readIfPresent()
        value.uid = try reader["uid"].readIfPresent()
        value.groups = try reader["groups"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.sessionName = try reader["sessionName"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.impersonatedUser = try reader["impersonatedUser"].readIfPresent(with: GuardDutyClientTypes.ImpersonatedUser.read(from:))
        return value
    }
}

extension GuardDutyClientTypes.ImpersonatedUser {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.ImpersonatedUser {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.ImpersonatedUser()
        value.username = try reader["username"].readIfPresent()
        value.groups = try reader["groups"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GuardDutyClientTypes.EksClusterDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.EksClusterDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.EksClusterDetails()
        value.name = try reader["name"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.vpcId = try reader["vpcId"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension GuardDutyClientTypes.InstanceDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.InstanceDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.InstanceDetails()
        value.availabilityZone = try reader["availabilityZone"].readIfPresent()
        value.iamInstanceProfile = try reader["iamInstanceProfile"].readIfPresent(with: GuardDutyClientTypes.IamInstanceProfile.read(from:))
        value.imageDescription = try reader["imageDescription"].readIfPresent()
        value.imageId = try reader["imageId"].readIfPresent()
        value.instanceId = try reader["instanceId"].readIfPresent()
        value.instanceState = try reader["instanceState"].readIfPresent()
        value.instanceType = try reader["instanceType"].readIfPresent()
        value.outpostArn = try reader["outpostArn"].readIfPresent()
        value.launchTime = try reader["launchTime"].readIfPresent()
        value.networkInterfaces = try reader["networkInterfaces"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.NetworkInterface.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.platform = try reader["platform"].readIfPresent()
        value.productCodes = try reader["productCodes"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.ProductCode.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GuardDutyClientTypes.ProductCode {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.ProductCode {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.ProductCode()
        value.code = try reader["productCodeId"].readIfPresent()
        value.productType = try reader["productCodeType"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.NetworkInterface {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.NetworkInterface {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.NetworkInterface()
        value.ipv6Addresses = try reader["ipv6Addresses"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.networkInterfaceId = try reader["networkInterfaceId"].readIfPresent()
        value.privateDnsName = try reader["privateDnsName"].readIfPresent()
        value.privateIpAddress = try reader["privateIpAddress"].readIfPresent()
        value.privateIpAddresses = try reader["privateIpAddresses"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.PrivateIpAddressDetails.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.publicDnsName = try reader["publicDnsName"].readIfPresent()
        value.publicIp = try reader["publicIp"].readIfPresent()
        value.securityGroups = try reader["securityGroups"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.SecurityGroup.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.subnetId = try reader["subnetId"].readIfPresent()
        value.vpcId = try reader["vpcId"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.PrivateIpAddressDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.PrivateIpAddressDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.PrivateIpAddressDetails()
        value.privateDnsName = try reader["privateDnsName"].readIfPresent()
        value.privateIpAddress = try reader["privateIpAddress"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.IamInstanceProfile {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.IamInstanceProfile {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.IamInstanceProfile()
        value.arn = try reader["arn"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.S3BucketDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.S3BucketDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.S3BucketDetail()
        value.arn = try reader["arn"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.type = try reader["type"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.owner = try reader["owner"].readIfPresent(with: GuardDutyClientTypes.Owner.read(from:))
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.defaultServerSideEncryption = try reader["defaultServerSideEncryption"].readIfPresent(with: GuardDutyClientTypes.DefaultServerSideEncryption.read(from:))
        value.publicAccess = try reader["publicAccess"].readIfPresent(with: GuardDutyClientTypes.PublicAccess.read(from:))
        value.s3ObjectDetails = try reader["s3ObjectDetails"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.S3ObjectDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GuardDutyClientTypes.S3ObjectDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.S3ObjectDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.S3ObjectDetail()
        value.objectArn = try reader["objectArn"].readIfPresent()
        value.key = try reader["key"].readIfPresent()
        value.eTag = try reader["eTag"].readIfPresent()
        value.hash = try reader["hash"].readIfPresent()
        value.versionId = try reader["versionId"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.PublicAccess {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.PublicAccess {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.PublicAccess()
        value.permissionConfiguration = try reader["permissionConfiguration"].readIfPresent(with: GuardDutyClientTypes.PermissionConfiguration.read(from:))
        value.effectivePermission = try reader["effectivePermission"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.PermissionConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.PermissionConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.PermissionConfiguration()
        value.bucketLevelPermissions = try reader["bucketLevelPermissions"].readIfPresent(with: GuardDutyClientTypes.BucketLevelPermissions.read(from:))
        value.accountLevelPermissions = try reader["accountLevelPermissions"].readIfPresent(with: GuardDutyClientTypes.AccountLevelPermissions.read(from:))
        return value
    }
}

extension GuardDutyClientTypes.AccountLevelPermissions {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.AccountLevelPermissions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.AccountLevelPermissions()
        value.blockPublicAccess = try reader["blockPublicAccess"].readIfPresent(with: GuardDutyClientTypes.BlockPublicAccess.read(from:))
        return value
    }
}

extension GuardDutyClientTypes.BlockPublicAccess {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.BlockPublicAccess {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.BlockPublicAccess()
        value.ignorePublicAcls = try reader["ignorePublicAcls"].readIfPresent()
        value.restrictPublicBuckets = try reader["restrictPublicBuckets"].readIfPresent()
        value.blockPublicAcls = try reader["blockPublicAcls"].readIfPresent()
        value.blockPublicPolicy = try reader["blockPublicPolicy"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.BucketLevelPermissions {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.BucketLevelPermissions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.BucketLevelPermissions()
        value.accessControlList = try reader["accessControlList"].readIfPresent(with: GuardDutyClientTypes.AccessControlList.read(from:))
        value.bucketPolicy = try reader["bucketPolicy"].readIfPresent(with: GuardDutyClientTypes.BucketPolicy.read(from:))
        value.blockPublicAccess = try reader["blockPublicAccess"].readIfPresent(with: GuardDutyClientTypes.BlockPublicAccess.read(from:))
        return value
    }
}

extension GuardDutyClientTypes.BucketPolicy {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.BucketPolicy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.BucketPolicy()
        value.allowsPublicReadAccess = try reader["allowsPublicReadAccess"].readIfPresent()
        value.allowsPublicWriteAccess = try reader["allowsPublicWriteAccess"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.AccessControlList {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.AccessControlList {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.AccessControlList()
        value.allowsPublicReadAccess = try reader["allowsPublicReadAccess"].readIfPresent()
        value.allowsPublicWriteAccess = try reader["allowsPublicWriteAccess"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.DefaultServerSideEncryption {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.DefaultServerSideEncryption {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.DefaultServerSideEncryption()
        value.encryptionType = try reader["encryptionType"].readIfPresent()
        value.kmsMasterKeyArn = try reader["kmsMasterKeyArn"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.Owner {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.Owner {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.Owner()
        value.id = try reader["id"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.AccessKeyDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.AccessKeyDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.AccessKeyDetails()
        value.accessKeyId = try reader["accessKeyId"].readIfPresent()
        value.principalId = try reader["principalId"].readIfPresent()
        value.userName = try reader["userName"].readIfPresent()
        value.userType = try reader["userType"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.FindingStatistics {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.FindingStatistics {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.FindingStatistics()
        value.countBySeverity = try reader["countBySeverity"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readInt(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.groupedByAccount = try reader["groupedByAccount"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.AccountStatistics.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.groupedByDate = try reader["groupedByDate"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.DateStatistics.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.groupedByFindingType = try reader["groupedByFindingType"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.FindingTypeStatistics.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.groupedByResource = try reader["groupedByResource"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.ResourceStatistics.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.groupedBySeverity = try reader["groupedBySeverity"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.SeverityStatistics.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GuardDutyClientTypes.SeverityStatistics {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.SeverityStatistics {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.SeverityStatistics()
        value.lastGeneratedAt = try reader["lastGeneratedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.severity = try reader["severity"].readIfPresent()
        value.totalFindings = try reader["totalFindings"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.ResourceStatistics {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.ResourceStatistics {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.ResourceStatistics()
        value.accountId = try reader["accountId"].readIfPresent()
        value.lastGeneratedAt = try reader["lastGeneratedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.resourceId = try reader["resourceId"].readIfPresent()
        value.resourceType = try reader["resourceType"].readIfPresent()
        value.totalFindings = try reader["totalFindings"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.FindingTypeStatistics {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.FindingTypeStatistics {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.FindingTypeStatistics()
        value.findingType = try reader["findingType"].readIfPresent()
        value.lastGeneratedAt = try reader["lastGeneratedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.totalFindings = try reader["totalFindings"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.DateStatistics {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.DateStatistics {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.DateStatistics()
        value.date = try reader["date"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastGeneratedAt = try reader["lastGeneratedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.severity = try reader["severity"].readIfPresent()
        value.totalFindings = try reader["totalFindings"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.AccountStatistics {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.AccountStatistics {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.AccountStatistics()
        value.accountId = try reader["accountId"].readIfPresent()
        value.lastGeneratedAt = try reader["lastGeneratedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.totalFindings = try reader["totalFindings"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.CreateProtectedResource {

    static func write(value: GuardDutyClientTypes.CreateProtectedResource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["s3Bucket"].write(value.s3Bucket, with: GuardDutyClientTypes.CreateS3BucketResource.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.CreateProtectedResource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.CreateProtectedResource()
        value.s3Bucket = try reader["s3Bucket"].readIfPresent(with: GuardDutyClientTypes.CreateS3BucketResource.read(from:))
        return value
    }
}

extension GuardDutyClientTypes.CreateS3BucketResource {

    static func write(value: GuardDutyClientTypes.CreateS3BucketResource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bucketName"].write(value.bucketName)
        try writer["objectPrefixes"].writeList(value.objectPrefixes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.CreateS3BucketResource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.CreateS3BucketResource()
        value.bucketName = try reader["bucketName"].readIfPresent()
        value.objectPrefixes = try reader["objectPrefixes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GuardDutyClientTypes.MalwareProtectionPlanActions {

    static func write(value: GuardDutyClientTypes.MalwareProtectionPlanActions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["tagging"].write(value.tagging, with: GuardDutyClientTypes.MalwareProtectionPlanTaggingAction.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.MalwareProtectionPlanActions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.MalwareProtectionPlanActions()
        value.tagging = try reader["tagging"].readIfPresent(with: GuardDutyClientTypes.MalwareProtectionPlanTaggingAction.read(from:))
        return value
    }
}

extension GuardDutyClientTypes.MalwareProtectionPlanTaggingAction {

    static func write(value: GuardDutyClientTypes.MalwareProtectionPlanTaggingAction?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["status"].write(value.status)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.MalwareProtectionPlanTaggingAction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.MalwareProtectionPlanTaggingAction()
        value.status = try reader["status"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.MalwareProtectionPlanStatusReason {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.MalwareProtectionPlanStatusReason {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.MalwareProtectionPlanStatusReason()
        value.code = try reader["code"].readIfPresent()
        value.message = try reader["message"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.ScanResourceCriteria {

    static func write(value: GuardDutyClientTypes.ScanResourceCriteria?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["exclude"].writeMap(value.exclude, valueWritingClosure: GuardDutyClientTypes.ScanCondition.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["include"].writeMap(value.include, valueWritingClosure: GuardDutyClientTypes.ScanCondition.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.ScanResourceCriteria {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.ScanResourceCriteria()
        value.include = try reader["include"].readMapIfPresent(valueReadingClosure: GuardDutyClientTypes.ScanCondition.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.exclude = try reader["exclude"].readMapIfPresent(valueReadingClosure: GuardDutyClientTypes.ScanCondition.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension GuardDutyClientTypes.ScanCondition {

    static func write(value: GuardDutyClientTypes.ScanCondition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["mapEquals"].writeList(value.mapEquals, memberWritingClosure: GuardDutyClientTypes.ScanConditionPair.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.ScanCondition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.ScanCondition()
        value.mapEquals = try reader["mapEquals"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.ScanConditionPair.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension GuardDutyClientTypes.ScanConditionPair {

    static func write(value: GuardDutyClientTypes.ScanConditionPair?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["key"].write(value.key)
        try writer["value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.ScanConditionPair {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.ScanConditionPair()
        value.key = try reader["key"].readIfPresent() ?? ""
        value.value = try reader["value"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.Master {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.Master {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.Master()
        value.accountId = try reader["accountId"].readIfPresent()
        value.invitationId = try reader["invitationId"].readIfPresent()
        value.relationshipStatus = try reader["relationshipStatus"].readIfPresent()
        value.invitedAt = try reader["invitedAt"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.MemberDataSourceConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.MemberDataSourceConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.MemberDataSourceConfiguration()
        value.accountId = try reader["accountId"].readIfPresent() ?? ""
        value.dataSources = try reader["dataSources"].readIfPresent(with: GuardDutyClientTypes.DataSourceConfigurationsResult.read(from:))
        value.features = try reader["features"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.MemberFeaturesConfigurationResult.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GuardDutyClientTypes.MemberFeaturesConfigurationResult {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.MemberFeaturesConfigurationResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.MemberFeaturesConfigurationResult()
        value.name = try reader["name"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.updatedAt = try reader["updatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.additionalConfiguration = try reader["additionalConfiguration"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.MemberAdditionalConfigurationResult.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GuardDutyClientTypes.MemberAdditionalConfigurationResult {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.MemberAdditionalConfigurationResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.MemberAdditionalConfigurationResult()
        value.name = try reader["name"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.updatedAt = try reader["updatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension GuardDutyClientTypes.Member {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.Member {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.Member()
        value.accountId = try reader["accountId"].readIfPresent() ?? ""
        value.detectorId = try reader["detectorId"].readIfPresent()
        value.masterId = try reader["masterId"].readIfPresent() ?? ""
        value.email = try reader["email"].readIfPresent() ?? ""
        value.relationshipStatus = try reader["relationshipStatus"].readIfPresent() ?? ""
        value.invitedAt = try reader["invitedAt"].readIfPresent()
        value.updatedAt = try reader["updatedAt"].readIfPresent() ?? ""
        value.administratorId = try reader["administratorId"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.OrganizationDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.OrganizationDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.OrganizationDetails()
        value.updatedAt = try reader["updatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.organizationStatistics = try reader["organizationStatistics"].readIfPresent(with: GuardDutyClientTypes.OrganizationStatistics.read(from:))
        return value
    }
}

extension GuardDutyClientTypes.OrganizationStatistics {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.OrganizationStatistics {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.OrganizationStatistics()
        value.totalAccountsCount = try reader["totalAccountsCount"].readIfPresent()
        value.memberAccountsCount = try reader["memberAccountsCount"].readIfPresent()
        value.activeAccountsCount = try reader["activeAccountsCount"].readIfPresent()
        value.enabledAccountsCount = try reader["enabledAccountsCount"].readIfPresent()
        value.countByFeature = try reader["countByFeature"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.OrganizationFeatureStatistics.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GuardDutyClientTypes.OrganizationFeatureStatistics {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.OrganizationFeatureStatistics {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.OrganizationFeatureStatistics()
        value.name = try reader["name"].readIfPresent()
        value.enabledAccountsCount = try reader["enabledAccountsCount"].readIfPresent()
        value.additionalConfiguration = try reader["additionalConfiguration"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.OrganizationFeatureStatisticsAdditionalConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GuardDutyClientTypes.OrganizationFeatureStatisticsAdditionalConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.OrganizationFeatureStatisticsAdditionalConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.OrganizationFeatureStatisticsAdditionalConfiguration()
        value.name = try reader["name"].readIfPresent()
        value.enabledAccountsCount = try reader["enabledAccountsCount"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.AccountFreeTrialInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.AccountFreeTrialInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.AccountFreeTrialInfo()
        value.accountId = try reader["accountId"].readIfPresent()
        value.dataSources = try reader["dataSources"].readIfPresent(with: GuardDutyClientTypes.DataSourcesFreeTrial.read(from:))
        value.features = try reader["features"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.FreeTrialFeatureConfigurationResult.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GuardDutyClientTypes.FreeTrialFeatureConfigurationResult {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.FreeTrialFeatureConfigurationResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.FreeTrialFeatureConfigurationResult()
        value.name = try reader["name"].readIfPresent()
        value.freeTrialDaysRemaining = try reader["freeTrialDaysRemaining"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.DataSourcesFreeTrial {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.DataSourcesFreeTrial {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.DataSourcesFreeTrial()
        value.cloudTrail = try reader["cloudTrail"].readIfPresent(with: GuardDutyClientTypes.DataSourceFreeTrial.read(from:))
        value.dnsLogs = try reader["dnsLogs"].readIfPresent(with: GuardDutyClientTypes.DataSourceFreeTrial.read(from:))
        value.flowLogs = try reader["flowLogs"].readIfPresent(with: GuardDutyClientTypes.DataSourceFreeTrial.read(from:))
        value.s3Logs = try reader["s3Logs"].readIfPresent(with: GuardDutyClientTypes.DataSourceFreeTrial.read(from:))
        value.kubernetes = try reader["kubernetes"].readIfPresent(with: GuardDutyClientTypes.KubernetesDataSourceFreeTrial.read(from:))
        value.malwareProtection = try reader["malwareProtection"].readIfPresent(with: GuardDutyClientTypes.MalwareProtectionDataSourceFreeTrial.read(from:))
        return value
    }
}

extension GuardDutyClientTypes.MalwareProtectionDataSourceFreeTrial {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.MalwareProtectionDataSourceFreeTrial {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.MalwareProtectionDataSourceFreeTrial()
        value.scanEc2InstanceWithFindings = try reader["scanEc2InstanceWithFindings"].readIfPresent(with: GuardDutyClientTypes.DataSourceFreeTrial.read(from:))
        return value
    }
}

extension GuardDutyClientTypes.DataSourceFreeTrial {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.DataSourceFreeTrial {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.DataSourceFreeTrial()
        value.freeTrialDaysRemaining = try reader["freeTrialDaysRemaining"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.KubernetesDataSourceFreeTrial {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.KubernetesDataSourceFreeTrial {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.KubernetesDataSourceFreeTrial()
        value.auditLogs = try reader["auditLogs"].readIfPresent(with: GuardDutyClientTypes.DataSourceFreeTrial.read(from:))
        return value
    }
}

extension GuardDutyClientTypes.UsageStatistics {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.UsageStatistics {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.UsageStatistics()
        value.sumByAccount = try reader["sumByAccount"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.UsageAccountResult.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.topAccountsByFeature = try reader["topAccountsByFeature"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.UsageTopAccountsResult.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.sumByDataSource = try reader["sumByDataSource"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.UsageDataSourceResult.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.sumByResource = try reader["sumByResource"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.UsageResourceResult.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.topResources = try reader["topResources"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.UsageResourceResult.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.sumByFeature = try reader["sumByFeature"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.UsageFeatureResult.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GuardDutyClientTypes.UsageFeatureResult {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.UsageFeatureResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.UsageFeatureResult()
        value.feature = try reader["feature"].readIfPresent()
        value.total = try reader["total"].readIfPresent(with: GuardDutyClientTypes.Total.read(from:))
        return value
    }
}

extension GuardDutyClientTypes.Total {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.Total {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.Total()
        value.amount = try reader["amount"].readIfPresent()
        value.unit = try reader["unit"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.UsageResourceResult {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.UsageResourceResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.UsageResourceResult()
        value.resource = try reader["resource"].readIfPresent()
        value.total = try reader["total"].readIfPresent(with: GuardDutyClientTypes.Total.read(from:))
        return value
    }
}

extension GuardDutyClientTypes.UsageDataSourceResult {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.UsageDataSourceResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.UsageDataSourceResult()
        value.dataSource = try reader["dataSource"].readIfPresent()
        value.total = try reader["total"].readIfPresent(with: GuardDutyClientTypes.Total.read(from:))
        return value
    }
}

extension GuardDutyClientTypes.UsageTopAccountsResult {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.UsageTopAccountsResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.UsageTopAccountsResult()
        value.feature = try reader["feature"].readIfPresent()
        value.accounts = try reader["accounts"].readListIfPresent(memberReadingClosure: GuardDutyClientTypes.UsageTopAccountResult.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GuardDutyClientTypes.UsageTopAccountResult {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.UsageTopAccountResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.UsageTopAccountResult()
        value.accountId = try reader["accountId"].readIfPresent()
        value.total = try reader["total"].readIfPresent(with: GuardDutyClientTypes.Total.read(from:))
        return value
    }
}

extension GuardDutyClientTypes.UsageAccountResult {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.UsageAccountResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.UsageAccountResult()
        value.accountId = try reader["accountId"].readIfPresent()
        value.total = try reader["total"].readIfPresent(with: GuardDutyClientTypes.Total.read(from:))
        return value
    }
}

extension GuardDutyClientTypes.CoverageResource {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.CoverageResource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.CoverageResource()
        value.resourceId = try reader["resourceId"].readIfPresent()
        value.detectorId = try reader["detectorId"].readIfPresent()
        value.accountId = try reader["accountId"].readIfPresent()
        value.resourceDetails = try reader["resourceDetails"].readIfPresent(with: GuardDutyClientTypes.CoverageResourceDetails.read(from:))
        value.coverageStatus = try reader["coverageStatus"].readIfPresent()
        value.issue = try reader["issue"].readIfPresent()
        value.updatedAt = try reader["updatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension GuardDutyClientTypes.CoverageResourceDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.CoverageResourceDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.CoverageResourceDetails()
        value.eksClusterDetails = try reader["eksClusterDetails"].readIfPresent(with: GuardDutyClientTypes.CoverageEksClusterDetails.read(from:))
        value.resourceType = try reader["resourceType"].readIfPresent()
        value.ecsClusterDetails = try reader["ecsClusterDetails"].readIfPresent(with: GuardDutyClientTypes.CoverageEcsClusterDetails.read(from:))
        value.ec2InstanceDetails = try reader["ec2InstanceDetails"].readIfPresent(with: GuardDutyClientTypes.CoverageEc2InstanceDetails.read(from:))
        return value
    }
}

extension GuardDutyClientTypes.CoverageEc2InstanceDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.CoverageEc2InstanceDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.CoverageEc2InstanceDetails()
        value.instanceId = try reader["instanceId"].readIfPresent()
        value.instanceType = try reader["instanceType"].readIfPresent()
        value.clusterArn = try reader["clusterArn"].readIfPresent()
        value.agentDetails = try reader["agentDetails"].readIfPresent(with: GuardDutyClientTypes.AgentDetails.read(from:))
        value.managementType = try reader["managementType"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.AgentDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.AgentDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.AgentDetails()
        value.version = try reader["version"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.CoverageEcsClusterDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.CoverageEcsClusterDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.CoverageEcsClusterDetails()
        value.clusterName = try reader["clusterName"].readIfPresent()
        value.fargateDetails = try reader["fargateDetails"].readIfPresent(with: GuardDutyClientTypes.FargateDetails.read(from:))
        value.containerInstanceDetails = try reader["containerInstanceDetails"].readIfPresent(with: GuardDutyClientTypes.ContainerInstanceDetails.read(from:))
        return value
    }
}

extension GuardDutyClientTypes.ContainerInstanceDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.ContainerInstanceDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.ContainerInstanceDetails()
        value.coveredContainerInstances = try reader["coveredContainerInstances"].readIfPresent()
        value.compatibleContainerInstances = try reader["compatibleContainerInstances"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.FargateDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.FargateDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.FargateDetails()
        value.issues = try reader["issues"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.managementType = try reader["managementType"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.CoverageEksClusterDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.CoverageEksClusterDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.CoverageEksClusterDetails()
        value.clusterName = try reader["clusterName"].readIfPresent()
        value.coveredNodes = try reader["coveredNodes"].readIfPresent()
        value.compatibleNodes = try reader["compatibleNodes"].readIfPresent()
        value.addonDetails = try reader["addonDetails"].readIfPresent(with: GuardDutyClientTypes.AddonDetails.read(from:))
        value.managementType = try reader["managementType"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.AddonDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.AddonDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.AddonDetails()
        value.addonVersion = try reader["addonVersion"].readIfPresent()
        value.addonStatus = try reader["addonStatus"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.Invitation {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.Invitation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.Invitation()
        value.accountId = try reader["accountId"].readIfPresent()
        value.invitationId = try reader["invitationId"].readIfPresent()
        value.relationshipStatus = try reader["relationshipStatus"].readIfPresent()
        value.invitedAt = try reader["invitedAt"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.MalwareProtectionPlanSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.MalwareProtectionPlanSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.MalwareProtectionPlanSummary()
        value.malwareProtectionPlanId = try reader["malwareProtectionPlanId"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.AdminAccount {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.AdminAccount {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.AdminAccount()
        value.adminAccountId = try reader["adminAccountId"].readIfPresent()
        value.adminStatus = try reader["adminStatus"].readIfPresent()
        return value
    }
}

extension GuardDutyClientTypes.Destination {

    static func read(from reader: SmithyJSON.Reader) throws -> GuardDutyClientTypes.Destination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GuardDutyClientTypes.Destination()
        value.destinationId = try reader["destinationId"].readIfPresent() ?? ""
        value.destinationType = try reader["destinationType"].readIfPresent() ?? .sdkUnknown("")
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension GuardDutyClientTypes.DataSourceConfigurations {

    static func write(value: GuardDutyClientTypes.DataSourceConfigurations?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["kubernetes"].write(value.kubernetes, with: GuardDutyClientTypes.KubernetesConfiguration.write(value:to:))
        try writer["malwareProtection"].write(value.malwareProtection, with: GuardDutyClientTypes.MalwareProtectionConfiguration.write(value:to:))
        try writer["s3Logs"].write(value.s3Logs, with: GuardDutyClientTypes.S3LogsConfiguration.write(value:to:))
    }
}

extension GuardDutyClientTypes.MalwareProtectionConfiguration {

    static func write(value: GuardDutyClientTypes.MalwareProtectionConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["scanEc2InstanceWithFindings"].write(value.scanEc2InstanceWithFindings, with: GuardDutyClientTypes.ScanEc2InstanceWithFindings.write(value:to:))
    }
}

extension GuardDutyClientTypes.ScanEc2InstanceWithFindings {

    static func write(value: GuardDutyClientTypes.ScanEc2InstanceWithFindings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ebsVolumes"].write(value.ebsVolumes)
    }
}

extension GuardDutyClientTypes.KubernetesConfiguration {

    static func write(value: GuardDutyClientTypes.KubernetesConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["auditLogs"].write(value.auditLogs, with: GuardDutyClientTypes.KubernetesAuditLogsConfiguration.write(value:to:))
    }
}

extension GuardDutyClientTypes.KubernetesAuditLogsConfiguration {

    static func write(value: GuardDutyClientTypes.KubernetesAuditLogsConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["enable"].write(value.enable)
    }
}

extension GuardDutyClientTypes.S3LogsConfiguration {

    static func write(value: GuardDutyClientTypes.S3LogsConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["enable"].write(value.enable)
    }
}

extension GuardDutyClientTypes.DetectorFeatureConfiguration {

    static func write(value: GuardDutyClientTypes.DetectorFeatureConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["additionalConfiguration"].writeList(value.additionalConfiguration, memberWritingClosure: GuardDutyClientTypes.DetectorAdditionalConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["name"].write(value.name)
        try writer["status"].write(value.status)
    }
}

extension GuardDutyClientTypes.DetectorAdditionalConfiguration {

    static func write(value: GuardDutyClientTypes.DetectorAdditionalConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["status"].write(value.status)
    }
}

extension GuardDutyClientTypes.AccountDetail {

    static func write(value: GuardDutyClientTypes.AccountDetail?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accountId"].write(value.accountId)
        try writer["email"].write(value.email)
    }
}

extension GuardDutyClientTypes.FilterCriteria {

    static func write(value: GuardDutyClientTypes.FilterCriteria?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["filterCriterion"].writeList(value.filterCriterion, memberWritingClosure: GuardDutyClientTypes.FilterCriterion.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension GuardDutyClientTypes.FilterCriterion {

    static func write(value: GuardDutyClientTypes.FilterCriterion?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["criterionKey"].write(value.criterionKey)
        try writer["filterCondition"].write(value.filterCondition, with: GuardDutyClientTypes.FilterCondition.write(value:to:))
    }
}

extension GuardDutyClientTypes.FilterCondition {

    static func write(value: GuardDutyClientTypes.FilterCondition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["equalsValue"].write(value.equalsValue)
        try writer["greaterThan"].write(value.greaterThan)
        try writer["lessThan"].write(value.lessThan)
    }
}

extension GuardDutyClientTypes.SortCriteria {

    static func write(value: GuardDutyClientTypes.SortCriteria?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attributeName"].write(value.attributeName)
        try writer["orderBy"].write(value.orderBy)
    }
}

extension GuardDutyClientTypes.CoverageFilterCriteria {

    static func write(value: GuardDutyClientTypes.CoverageFilterCriteria?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["filterCriterion"].writeList(value.filterCriterion, memberWritingClosure: GuardDutyClientTypes.CoverageFilterCriterion.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension GuardDutyClientTypes.CoverageFilterCriterion {

    static func write(value: GuardDutyClientTypes.CoverageFilterCriterion?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["criterionKey"].write(value.criterionKey)
        try writer["filterCondition"].write(value.filterCondition, with: GuardDutyClientTypes.CoverageFilterCondition.write(value:to:))
    }
}

extension GuardDutyClientTypes.CoverageFilterCondition {

    static func write(value: GuardDutyClientTypes.CoverageFilterCondition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["equals"].writeList(value.equals, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["notEquals"].writeList(value.notEquals, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension GuardDutyClientTypes.UsageCriteria {

    static func write(value: GuardDutyClientTypes.UsageCriteria?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accountIds"].writeList(value.accountIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["dataSources"].writeList(value.dataSources, memberWritingClosure: SmithyReadWrite.WritingClosureBox<GuardDutyClientTypes.DataSource>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["features"].writeList(value.features, memberWritingClosure: SmithyReadWrite.WritingClosureBox<GuardDutyClientTypes.UsageFeature>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["resources"].writeList(value.resources, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension GuardDutyClientTypes.CoverageSortCriteria {

    static func write(value: GuardDutyClientTypes.CoverageSortCriteria?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attributeName"].write(value.attributeName)
        try writer["orderBy"].write(value.orderBy)
    }
}

extension GuardDutyClientTypes.UpdateProtectedResource {

    static func write(value: GuardDutyClientTypes.UpdateProtectedResource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["s3Bucket"].write(value.s3Bucket, with: GuardDutyClientTypes.UpdateS3BucketResource.write(value:to:))
    }
}

extension GuardDutyClientTypes.UpdateS3BucketResource {

    static func write(value: GuardDutyClientTypes.UpdateS3BucketResource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["objectPrefixes"].writeList(value.objectPrefixes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension GuardDutyClientTypes.MemberFeaturesConfiguration {

    static func write(value: GuardDutyClientTypes.MemberFeaturesConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["additionalConfiguration"].writeList(value.additionalConfiguration, memberWritingClosure: GuardDutyClientTypes.MemberAdditionalConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["name"].write(value.name)
        try writer["status"].write(value.status)
    }
}

extension GuardDutyClientTypes.MemberAdditionalConfiguration {

    static func write(value: GuardDutyClientTypes.MemberAdditionalConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["status"].write(value.status)
    }
}

extension GuardDutyClientTypes.OrganizationDataSourceConfigurations {

    static func write(value: GuardDutyClientTypes.OrganizationDataSourceConfigurations?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["kubernetes"].write(value.kubernetes, with: GuardDutyClientTypes.OrganizationKubernetesConfiguration.write(value:to:))
        try writer["malwareProtection"].write(value.malwareProtection, with: GuardDutyClientTypes.OrganizationMalwareProtectionConfiguration.write(value:to:))
        try writer["s3Logs"].write(value.s3Logs, with: GuardDutyClientTypes.OrganizationS3LogsConfiguration.write(value:to:))
    }
}

extension GuardDutyClientTypes.OrganizationMalwareProtectionConfiguration {

    static func write(value: GuardDutyClientTypes.OrganizationMalwareProtectionConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["scanEc2InstanceWithFindings"].write(value.scanEc2InstanceWithFindings, with: GuardDutyClientTypes.OrganizationScanEc2InstanceWithFindings.write(value:to:))
    }
}

extension GuardDutyClientTypes.OrganizationScanEc2InstanceWithFindings {

    static func write(value: GuardDutyClientTypes.OrganizationScanEc2InstanceWithFindings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ebsVolumes"].write(value.ebsVolumes, with: GuardDutyClientTypes.OrganizationEbsVolumes.write(value:to:))
    }
}

extension GuardDutyClientTypes.OrganizationEbsVolumes {

    static func write(value: GuardDutyClientTypes.OrganizationEbsVolumes?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["autoEnable"].write(value.autoEnable)
    }
}

extension GuardDutyClientTypes.OrganizationKubernetesConfiguration {

    static func write(value: GuardDutyClientTypes.OrganizationKubernetesConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["auditLogs"].write(value.auditLogs, with: GuardDutyClientTypes.OrganizationKubernetesAuditLogsConfiguration.write(value:to:))
    }
}

extension GuardDutyClientTypes.OrganizationKubernetesAuditLogsConfiguration {

    static func write(value: GuardDutyClientTypes.OrganizationKubernetesAuditLogsConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["autoEnable"].write(value.autoEnable)
    }
}

extension GuardDutyClientTypes.OrganizationS3LogsConfiguration {

    static func write(value: GuardDutyClientTypes.OrganizationS3LogsConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["autoEnable"].write(value.autoEnable)
    }
}

extension GuardDutyClientTypes.OrganizationFeatureConfiguration {

    static func write(value: GuardDutyClientTypes.OrganizationFeatureConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["additionalConfiguration"].writeList(value.additionalConfiguration, memberWritingClosure: GuardDutyClientTypes.OrganizationAdditionalConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["autoEnable"].write(value.autoEnable)
        try writer["name"].write(value.name)
    }
}

extension GuardDutyClientTypes.OrganizationAdditionalConfiguration {

    static func write(value: GuardDutyClientTypes.OrganizationAdditionalConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["autoEnable"].write(value.autoEnable)
        try writer["name"].write(value.name)
    }
}

public enum GuardDutyClientTypes {}
