// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// An AWS Elemental MediaStore container is a namespace that holds folders and objects. You use a container endpoint to create, read, and delete objects.
public protocol MediaStoreClientProtocol {
    /// Creates a storage container to hold objects. A container is similar to a bucket in the Amazon S3 service.
    ///
    /// - Parameter CreateContainerInput : [no documentation found]
    ///
    /// - Returns: `CreateContainerOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ContainerInUseException` : The container that you specified in the request already exists or is being updated.
    /// - `InternalServerError` : The service is temporarily unavailable.
    /// - `LimitExceededException` : A service limit has been exceeded.
    func createContainer(input: CreateContainerInput) async throws -> CreateContainerOutput
    /// Deletes the specified container. Before you make a DeleteContainer request, delete any objects in the container or in any folders in the container. You can delete only empty containers.
    ///
    /// - Parameter DeleteContainerInput : [no documentation found]
    ///
    /// - Returns: `DeleteContainerOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ContainerInUseException` : The container that you specified in the request already exists or is being updated.
    /// - `ContainerNotFoundException` : The container that you specified in the request does not exist.
    /// - `InternalServerError` : The service is temporarily unavailable.
    func deleteContainer(input: DeleteContainerInput) async throws -> DeleteContainerOutput
    /// Deletes the access policy that is associated with the specified container.
    ///
    /// - Parameter DeleteContainerPolicyInput : [no documentation found]
    ///
    /// - Returns: `DeleteContainerPolicyOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ContainerInUseException` : The container that you specified in the request already exists or is being updated.
    /// - `ContainerNotFoundException` : The container that you specified in the request does not exist.
    /// - `InternalServerError` : The service is temporarily unavailable.
    /// - `PolicyNotFoundException` : The policy that you specified in the request does not exist.
    func deleteContainerPolicy(input: DeleteContainerPolicyInput) async throws -> DeleteContainerPolicyOutput
    /// Deletes the cross-origin resource sharing (CORS) configuration information that is set for the container. To use this operation, you must have permission to perform the MediaStore:DeleteCorsPolicy action. The container owner has this permission by default and can grant this permission to others.
    ///
    /// - Parameter DeleteCorsPolicyInput : [no documentation found]
    ///
    /// - Returns: `DeleteCorsPolicyOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ContainerInUseException` : The container that you specified in the request already exists or is being updated.
    /// - `ContainerNotFoundException` : The container that you specified in the request does not exist.
    /// - `CorsPolicyNotFoundException` : The CORS policy that you specified in the request does not exist.
    /// - `InternalServerError` : The service is temporarily unavailable.
    func deleteCorsPolicy(input: DeleteCorsPolicyInput) async throws -> DeleteCorsPolicyOutput
    /// Removes an object lifecycle policy from a container. It takes up to 20 minutes for the change to take effect.
    ///
    /// - Parameter DeleteLifecyclePolicyInput : [no documentation found]
    ///
    /// - Returns: `DeleteLifecyclePolicyOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ContainerInUseException` : The container that you specified in the request already exists or is being updated.
    /// - `ContainerNotFoundException` : The container that you specified in the request does not exist.
    /// - `InternalServerError` : The service is temporarily unavailable.
    /// - `PolicyNotFoundException` : The policy that you specified in the request does not exist.
    func deleteLifecyclePolicy(input: DeleteLifecyclePolicyInput) async throws -> DeleteLifecyclePolicyOutput
    /// Deletes the metric policy that is associated with the specified container. If there is no metric policy associated with the container, MediaStore doesn't send metrics to CloudWatch.
    ///
    /// - Parameter DeleteMetricPolicyInput : [no documentation found]
    ///
    /// - Returns: `DeleteMetricPolicyOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ContainerInUseException` : The container that you specified in the request already exists or is being updated.
    /// - `ContainerNotFoundException` : The container that you specified in the request does not exist.
    /// - `InternalServerError` : The service is temporarily unavailable.
    /// - `PolicyNotFoundException` : The policy that you specified in the request does not exist.
    func deleteMetricPolicy(input: DeleteMetricPolicyInput) async throws -> DeleteMetricPolicyOutput
    /// Retrieves the properties of the requested container. This request is commonly used to retrieve the endpoint of a container. An endpoint is a value assigned by the service when a new container is created. A container's endpoint does not change after it has been assigned. The DescribeContainer request returns a single Container object based on ContainerName. To return all Container objects that are associated with a specified AWS account, use [ListContainers].
    ///
    /// - Parameter DescribeContainerInput : [no documentation found]
    ///
    /// - Returns: `DescribeContainerOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ContainerNotFoundException` : The container that you specified in the request does not exist.
    /// - `InternalServerError` : The service is temporarily unavailable.
    func describeContainer(input: DescribeContainerInput) async throws -> DescribeContainerOutput
    /// Retrieves the access policy for the specified container. For information about the data that is included in an access policy, see the [AWS Identity and Access Management User Guide](https://aws.amazon.com/documentation/iam/).
    ///
    /// - Parameter GetContainerPolicyInput : [no documentation found]
    ///
    /// - Returns: `GetContainerPolicyOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ContainerInUseException` : The container that you specified in the request already exists or is being updated.
    /// - `ContainerNotFoundException` : The container that you specified in the request does not exist.
    /// - `InternalServerError` : The service is temporarily unavailable.
    /// - `PolicyNotFoundException` : The policy that you specified in the request does not exist.
    func getContainerPolicy(input: GetContainerPolicyInput) async throws -> GetContainerPolicyOutput
    /// Returns the cross-origin resource sharing (CORS) configuration information that is set for the container. To use this operation, you must have permission to perform the MediaStore:GetCorsPolicy action. By default, the container owner has this permission and can grant it to others.
    ///
    /// - Parameter GetCorsPolicyInput : [no documentation found]
    ///
    /// - Returns: `GetCorsPolicyOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ContainerInUseException` : The container that you specified in the request already exists or is being updated.
    /// - `ContainerNotFoundException` : The container that you specified in the request does not exist.
    /// - `CorsPolicyNotFoundException` : The CORS policy that you specified in the request does not exist.
    /// - `InternalServerError` : The service is temporarily unavailable.
    func getCorsPolicy(input: GetCorsPolicyInput) async throws -> GetCorsPolicyOutput
    /// Retrieves the object lifecycle policy that is assigned to a container.
    ///
    /// - Parameter GetLifecyclePolicyInput : [no documentation found]
    ///
    /// - Returns: `GetLifecyclePolicyOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ContainerInUseException` : The container that you specified in the request already exists or is being updated.
    /// - `ContainerNotFoundException` : The container that you specified in the request does not exist.
    /// - `InternalServerError` : The service is temporarily unavailable.
    /// - `PolicyNotFoundException` : The policy that you specified in the request does not exist.
    func getLifecyclePolicy(input: GetLifecyclePolicyInput) async throws -> GetLifecyclePolicyOutput
    /// Returns the metric policy for the specified container.
    ///
    /// - Parameter GetMetricPolicyInput : [no documentation found]
    ///
    /// - Returns: `GetMetricPolicyOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ContainerInUseException` : The container that you specified in the request already exists or is being updated.
    /// - `ContainerNotFoundException` : The container that you specified in the request does not exist.
    /// - `InternalServerError` : The service is temporarily unavailable.
    /// - `PolicyNotFoundException` : The policy that you specified in the request does not exist.
    func getMetricPolicy(input: GetMetricPolicyInput) async throws -> GetMetricPolicyOutput
    /// Lists the properties of all containers in AWS Elemental MediaStore. You can query to receive all the containers in one response. Or you can include the MaxResults parameter to receive a limited number of containers in each response. In this case, the response includes a token. To get the next set of containers, send the command again, this time with the NextToken parameter (with the returned token as its value). The next set of responses appears, with a token if there are still more containers to receive. See also [DescribeContainer], which gets the properties of one container.
    ///
    /// - Parameter ListContainersInput : [no documentation found]
    ///
    /// - Returns: `ListContainersOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InternalServerError` : The service is temporarily unavailable.
    func listContainers(input: ListContainersInput) async throws -> ListContainersOutput
    /// Returns a list of the tags assigned to the specified container.
    ///
    /// - Parameter ListTagsForResourceInput : [no documentation found]
    ///
    /// - Returns: `ListTagsForResourceOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ContainerInUseException` : The container that you specified in the request already exists or is being updated.
    /// - `ContainerNotFoundException` : The container that you specified in the request does not exist.
    /// - `InternalServerError` : The service is temporarily unavailable.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutput
    /// Creates an access policy for the specified container to restrict the users and clients that can access it. For information about the data that is included in an access policy, see the [AWS Identity and Access Management User Guide](https://aws.amazon.com/documentation/iam/). For this release of the REST API, you can create only one policy for a container. If you enter PutContainerPolicy twice, the second command modifies the existing policy.
    ///
    /// - Parameter PutContainerPolicyInput : [no documentation found]
    ///
    /// - Returns: `PutContainerPolicyOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ContainerInUseException` : The container that you specified in the request already exists or is being updated.
    /// - `ContainerNotFoundException` : The container that you specified in the request does not exist.
    /// - `InternalServerError` : The service is temporarily unavailable.
    func putContainerPolicy(input: PutContainerPolicyInput) async throws -> PutContainerPolicyOutput
    /// Sets the cross-origin resource sharing (CORS) configuration on a container so that the container can service cross-origin requests. For example, you might want to enable a request whose origin is http://www.example.com to access your AWS Elemental MediaStore container at my.example.container.com by using the browser's XMLHttpRequest capability. To enable CORS on a container, you attach a CORS policy to the container. In the CORS policy, you configure rules that identify origins and the HTTP methods that can be executed on your container. The policy can contain up to 398,000 characters. You can add up to 100 rules to a CORS policy. If more than one rule applies, the service uses the first applicable rule listed. To learn more about CORS, see [Cross-Origin Resource Sharing (CORS) in AWS Elemental MediaStore](https://docs.aws.amazon.com/mediastore/latest/ug/cors-policy.html).
    ///
    /// - Parameter PutCorsPolicyInput : [no documentation found]
    ///
    /// - Returns: `PutCorsPolicyOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ContainerInUseException` : The container that you specified in the request already exists or is being updated.
    /// - `ContainerNotFoundException` : The container that you specified in the request does not exist.
    /// - `InternalServerError` : The service is temporarily unavailable.
    func putCorsPolicy(input: PutCorsPolicyInput) async throws -> PutCorsPolicyOutput
    /// Writes an object lifecycle policy to a container. If the container already has an object lifecycle policy, the service replaces the existing policy with the new policy. It takes up to 20 minutes for the change to take effect. For information about how to construct an object lifecycle policy, see [Components of an Object Lifecycle Policy](https://docs.aws.amazon.com/mediastore/latest/ug/policies-object-lifecycle-components.html).
    ///
    /// - Parameter PutLifecyclePolicyInput : [no documentation found]
    ///
    /// - Returns: `PutLifecyclePolicyOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ContainerInUseException` : The container that you specified in the request already exists or is being updated.
    /// - `ContainerNotFoundException` : The container that you specified in the request does not exist.
    /// - `InternalServerError` : The service is temporarily unavailable.
    func putLifecyclePolicy(input: PutLifecyclePolicyInput) async throws -> PutLifecyclePolicyOutput
    /// The metric policy that you want to add to the container. A metric policy allows AWS Elemental MediaStore to send metrics to Amazon CloudWatch. It takes up to 20 minutes for the new policy to take effect.
    ///
    /// - Parameter PutMetricPolicyInput : [no documentation found]
    ///
    /// - Returns: `PutMetricPolicyOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ContainerInUseException` : The container that you specified in the request already exists or is being updated.
    /// - `ContainerNotFoundException` : The container that you specified in the request does not exist.
    /// - `InternalServerError` : The service is temporarily unavailable.
    func putMetricPolicy(input: PutMetricPolicyInput) async throws -> PutMetricPolicyOutput
    /// Starts access logging on the specified container. When you enable access logging on a container, MediaStore delivers access logs for objects stored in that container to Amazon CloudWatch Logs.
    ///
    /// - Parameter StartAccessLoggingInput : [no documentation found]
    ///
    /// - Returns: `StartAccessLoggingOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ContainerInUseException` : The container that you specified in the request already exists or is being updated.
    /// - `ContainerNotFoundException` : The container that you specified in the request does not exist.
    /// - `InternalServerError` : The service is temporarily unavailable.
    func startAccessLogging(input: StartAccessLoggingInput) async throws -> StartAccessLoggingOutput
    /// Stops access logging on the specified container. When you stop access logging on a container, MediaStore stops sending access logs to Amazon CloudWatch Logs. These access logs are not saved and are not retrievable.
    ///
    /// - Parameter StopAccessLoggingInput : [no documentation found]
    ///
    /// - Returns: `StopAccessLoggingOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ContainerInUseException` : The container that you specified in the request already exists or is being updated.
    /// - `ContainerNotFoundException` : The container that you specified in the request does not exist.
    /// - `InternalServerError` : The service is temporarily unavailable.
    func stopAccessLogging(input: StopAccessLoggingInput) async throws -> StopAccessLoggingOutput
    /// Adds tags to the specified AWS Elemental MediaStore container. Tags are key:value pairs that you can associate with AWS resources. For example, the tag key might be "customer" and the tag value might be "companyA." You can specify one or more tags to add to each container. You can add up to 50 tags to each container. For more information about tagging, including naming and usage conventions, see [Tagging Resources in MediaStore](https://docs.aws.amazon.com/mediastore/latest/ug/tagging.html).
    ///
    /// - Parameter TagResourceInput : [no documentation found]
    ///
    /// - Returns: `TagResourceOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ContainerInUseException` : The container that you specified in the request already exists or is being updated.
    /// - `ContainerNotFoundException` : The container that you specified in the request does not exist.
    /// - `InternalServerError` : The service is temporarily unavailable.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutput
    /// Removes tags from the specified container. You can specify one or more tags to remove.
    ///
    /// - Parameter UntagResourceInput : [no documentation found]
    ///
    /// - Returns: `UntagResourceOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ContainerInUseException` : The container that you specified in the request already exists or is being updated.
    /// - `ContainerNotFoundException` : The container that you specified in the request does not exist.
    /// - `InternalServerError` : The service is temporarily unavailable.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutput
}

public enum MediaStoreClientTypes {}
