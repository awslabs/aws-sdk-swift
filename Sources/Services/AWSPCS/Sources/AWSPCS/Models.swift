//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
@_spi(SmithyTimestamps) import struct SmithyTimestamps.TimestampFormatter


public struct TagResourceOutput: Swift.Sendable {

    public init() { }
}

public struct UntagResourceOutput: Swift.Sendable {

    public init() { }
}

/// You don't have permission to perform the action. Examples
///
/// * The launch template instance profile doesn't pass iam:PassRole verification.
///
/// * There is a mismatch between the account ID and cluster ID.
///
/// * The cluster ID doesn't exist.
///
/// * The EC2 instance isn't present.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Your request has conflicting operations. This can occur if you're trying to perform more than 1 operation on the same resource at the same time. Examples
///
/// * A cluster with the same name already exists.
///
/// * A cluster isn't in ACTIVE status.
///
/// * A cluster to delete is in an unstable state. For example, because it still has ACTIVE node groups or queues.
///
/// * A queue already exists in a cluster.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
        /// The unique identifier of the resource that caused the conflict exception.
        /// This member is required.
        public internal(set) var resourceId: Swift.String? = nil
        /// The type or category of the resource that caused the conflict exception."
        /// This member is required.
        public internal(set) var resourceType: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        resourceId: Swift.String? = nil,
        resourceType: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.resourceId = resourceId
        self.properties.resourceType = resourceType
    }
}

/// Amazon Web Services PCS can't process your request right now. Try again later.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { true }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The requested resource can't be found. The cluster, node group, or queue you're attempting to get, update, list, or delete doesn't exist. Examples
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
        /// The unique identifier of the resource that was not found.
        /// This member is required.
        public internal(set) var resourceId: Swift.String? = nil
        /// The type or category of the resource that was not found.
        /// This member is required.
        public internal(set) var resourceType: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        resourceId: Swift.String? = nil,
        resourceType: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.resourceId = resourceId
        self.properties.resourceType = resourceType
    }
}

/// You exceeded your service quota. Service quotas, also referred to as limits, are the maximum number of service resources or operations for your Amazon Web Services account. To learn how to increase your service quota, see [Requesting a quota increase](https://docs.aws.amazon.com/servicequotas/latest/userguide/request-quota-increase.html) in the Service Quotas User Guide Examples
///
/// * The max number of clusters or queues has been reached for the account.
///
/// * The max number of compute node groups has been reached for the associated cluster.
///
/// * The total of maxInstances across all compute node groups has been reached for associated cluster.
public struct ServiceQuotaExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
        /// The quota code of the service quota that was exceeded.
        public internal(set) var quotaCode: Swift.String? = nil
        /// The unique identifier of the resource that caused the quota to be exceeded.
        public internal(set) var resourceId: Swift.String? = nil
        /// The type or category of the resource that caused the quota to be exceeded.
        public internal(set) var resourceType: Swift.String? = nil
        /// The service code associated with the quota that was exceeded.
        /// This member is required.
        public internal(set) var serviceCode: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceQuotaExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        quotaCode: Swift.String? = nil,
        resourceId: Swift.String? = nil,
        resourceType: Swift.String? = nil,
        serviceCode: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.quotaCode = quotaCode
        self.properties.resourceId = resourceId
        self.properties.resourceType = resourceType
        self.properties.serviceCode = serviceCode
    }
}

/// Your request exceeded a request rate quota. Check the resource's request rate quota and try again.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
        /// The number of seconds to wait before retrying the request.
        public internal(set) var retryAfterSeconds: Swift.Int? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { true }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        retryAfterSeconds: Swift.Int? = nil
    )
    {
        self.properties.message = message
        self.properties.retryAfterSeconds = retryAfterSeconds
    }
}

extension PCSClientTypes {

    /// Stores information about a field in a request that caused an exception.
    public struct ValidationExceptionField: Swift.Sendable {
        /// The message body of the exception.
        /// This member is required.
        public var message: Swift.String?
        /// The name of the exception.
        /// This member is required.
        public var name: Swift.String?

        public init(
            message: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.message = message
            self.name = name
        }
    }
}

extension PCSClientTypes {

    public enum ValidationExceptionReason: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cannotParse
        case fieldValidationFailed
        case other
        case unknownOperation
        case sdkUnknown(Swift.String)

        public static var allCases: [ValidationExceptionReason] {
            return [
                .cannotParse,
                .fieldValidationFailed,
                .other,
                .unknownOperation
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cannotParse: return "cannotParse"
            case .fieldValidationFailed: return "fieldValidationFailed"
            case .other: return "other"
            case .unknownOperation: return "unknownOperation"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// The request isn't valid. Examples
///
/// * Your request contains malformed JSON or unsupported characters.
///
/// * The scheduler version isn't supported.
///
/// * There are networking related errors, such as network validation failure.
///
/// * AMI type is CUSTOM and the launch template doesn't define the AMI ID, or the AMI type is AL2 and the launch template defines the AMI.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A list of fields or properties that failed validation.
        public internal(set) var fieldList: [PCSClientTypes.ValidationExceptionField]? = nil
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
        /// The specific reason or cause of the validation error.
        /// This member is required.
        public internal(set) var reason: PCSClientTypes.ValidationExceptionReason? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        fieldList: [PCSClientTypes.ValidationExceptionField]? = nil,
        message: Swift.String? = nil,
        reason: PCSClientTypes.ValidationExceptionReason? = nil
    )
    {
        self.properties.fieldList = fieldList
        self.properties.message = message
        self.properties.reason = reason
    }
}

extension PCSClientTypes {

    /// An Amazon EC2 launch template Amazon Web Services PCS uses to launch compute nodes.
    public struct CustomLaunchTemplate: Swift.Sendable {
        /// The ID of the EC2 launch template to use to provision instances. Example: lt-xxxx
        /// This member is required.
        public var id: Swift.String?
        /// The version of the EC2 launch template to use to provision instances.
        /// This member is required.
        public var version: Swift.String?

        public init(
            id: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.id = id
            self.version = version
        }
    }
}

extension PCSClientTypes {

    /// An EC2 instance configuration Amazon Web Services PCS uses to launch compute nodes.
    public struct InstanceConfig: Swift.Sendable {
        /// The EC2 instance type that Amazon Web Services PCS can provision in the compute node group. Example: t2.xlarge
        public var instanceType: Swift.String?

        public init(
            instanceType: Swift.String? = nil
        )
        {
            self.instanceType = instanceType
        }
    }
}

extension PCSClientTypes {

    public enum PurchaseOption: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ondemand
        case spot
        case sdkUnknown(Swift.String)

        public static var allCases: [PurchaseOption] {
            return [
                .ondemand,
                .spot
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ondemand: return "ONDEMAND"
            case .spot: return "SPOT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension PCSClientTypes {

    /// Specifies the boundaries of the compute node group auto scaling.
    public struct ScalingConfigurationRequest: Swift.Sendable {
        /// The upper bound of the number of instances allowed in the compute fleet.
        /// This member is required.
        public var maxInstanceCount: Swift.Int
        /// The lower bound of the number of instances allowed in the compute fleet.
        /// This member is required.
        public var minInstanceCount: Swift.Int

        public init(
            maxInstanceCount: Swift.Int = 0,
            minInstanceCount: Swift.Int = 0
        )
        {
            self.maxInstanceCount = maxInstanceCount
            self.minInstanceCount = minInstanceCount
        }
    }
}

extension PCSClientTypes {

    /// Additional settings that directly map to Slurm settings.
    public struct SlurmCustomSetting: Swift.Sendable {
        /// Amazon Web Services PCS supports configuration of the following Slurm parameters:
        ///
        /// * For clusters
        ///
        /// * [Prolog](https://slurm.schedmd.com/slurm.conf.html#OPT_Prolog_1)
        ///
        /// * [Epilog](https://slurm.schedmd.com/slurm.conf.html#OPT_Epilog_1)
        ///
        /// * [SelectTypeParameters](https://slurm.schedmd.com/slurm.conf.html#OPT_SelectTypeParameters)
        ///
        ///
        ///
        ///
        /// * For compute node groups
        ///
        /// * [Weight](https://slurm.schedmd.com/slurm.conf.html#OPT_Weight)
        ///
        /// * [RealMemory](https://slurm.schedmd.com/slurm.conf.html#OPT_Weight)
        /// This member is required.
        public var parameterName: Swift.String?
        /// The values for the configured Slurm settings.
        /// This member is required.
        public var parameterValue: Swift.String?

        public init(
            parameterName: Swift.String? = nil,
            parameterValue: Swift.String? = nil
        )
        {
            self.parameterName = parameterName
            self.parameterValue = parameterValue
        }
    }
}

extension PCSClientTypes {

    /// Additional options related to the Slurm scheduler.
    public struct ComputeNodeGroupSlurmConfigurationRequest: Swift.Sendable {
        /// Additional Slurm-specific configuration that directly maps to Slurm settings.
        public var slurmCustomSettings: [PCSClientTypes.SlurmCustomSetting]?

        public init(
            slurmCustomSettings: [PCSClientTypes.SlurmCustomSetting]? = nil
        )
        {
            self.slurmCustomSettings = slurmCustomSettings
        }
    }
}

extension PCSClientTypes {

    public enum SpotAllocationStrategy: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case capacityOptimized
        case lowestPrice
        case priceCapacityOptimized
        case sdkUnknown(Swift.String)

        public static var allCases: [SpotAllocationStrategy] {
            return [
                .capacityOptimized,
                .lowestPrice,
                .priceCapacityOptimized
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .capacityOptimized: return "capacity-optimized"
            case .lowestPrice: return "lowest-price"
            case .priceCapacityOptimized: return "price-capacity-optimized"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension PCSClientTypes {

    /// Additional configuration when you specify SPOT as the purchaseOption for the CreateComputeNodeGroup API action.
    public struct SpotOptions: Swift.Sendable {
        /// The Amazon EC2 allocation strategy Amazon Web Services PCS uses to provision EC2 instances. Amazon Web Services PCS supports lowest price, capacity optimized, and price capacity optimized. For more information, see [Use allocation strategies to determine how EC2 Fleet or Spot Fleet fulfills Spot and On-Demand capacity](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-allocation-strategy.html) in the Amazon Elastic Compute Cloud User Guide. If you don't provide this option, it defaults to price capacity optimized.
        public var allocationStrategy: PCSClientTypes.SpotAllocationStrategy?

        public init(
            allocationStrategy: PCSClientTypes.SpotAllocationStrategy? = nil
        )
        {
            self.allocationStrategy = allocationStrategy
        }
    }
}

public struct CreateComputeNodeGroupInput: Swift.Sendable {
    /// The ID of the Amazon Machine Image (AMI) that Amazon Web Services PCS uses to launch compute nodes (Amazon EC2 instances). If you don't provide this value, Amazon Web Services PCS uses the AMI ID specified in the custom launch template.
    public var amiId: Swift.String?
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, the subsequent retries with the same client token return the result from the original successful request and they have no additional effect. If you don't specify a client token, the CLI and SDK automatically generate 1 for you.
    public var clientToken: Swift.String?
    /// The name or ID of the cluster to create a compute node group in.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// A name to identify the cluster. Example: MyCluster
    /// This member is required.
    public var computeNodeGroupName: Swift.String?
    /// An Amazon EC2 launch template Amazon Web Services PCS uses to launch compute nodes.
    /// This member is required.
    public var customLaunchTemplate: PCSClientTypes.CustomLaunchTemplate?
    /// The Amazon Resource Name (ARN) of the IAM instance profile used to pass an IAM role when launching EC2 instances. The role contained in your instance profile must have the pcs:RegisterComputeNodeGroupInstance permission. The resource identifier of the ARN must start with AWSPCS or it must have /aws-pcs/ in its path. Examples
    ///
    /// * arn:aws:iam::111122223333:instance-profile/AWSPCS-example-role-1
    ///
    /// * arn:aws:iam::111122223333:instance-profile/aws-pcs/example-role-2
    /// This member is required.
    public var iamInstanceProfileArn: Swift.String?
    /// A list of EC2 instance configurations that Amazon Web Services PCS can provision in the compute node group.
    /// This member is required.
    public var instanceConfigs: [PCSClientTypes.InstanceConfig]?
    /// Specifies how EC2 instances are purchased on your behalf. Amazon Web Services PCS supports On-Demand and Spot instances. For more information, see [Instance purchasing options](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-purchasing-options.html) in the Amazon Elastic Compute Cloud User Guide. If you don't provide this option, it defaults to On-Demand.
    public var purchaseOption: PCSClientTypes.PurchaseOption?
    /// Specifies the boundaries of the compute node group auto scaling.
    /// This member is required.
    public var scalingConfiguration: PCSClientTypes.ScalingConfigurationRequest?
    /// Additional options related to the Slurm scheduler.
    public var slurmConfiguration: PCSClientTypes.ComputeNodeGroupSlurmConfigurationRequest?
    /// Additional configuration when you specify SPOT as the purchaseOption for the CreateComputeNodeGroup API action.
    public var spotOptions: PCSClientTypes.SpotOptions?
    /// The list of subnet IDs where the compute node group launches instances. Subnets must be in the same VPC as the cluster.
    /// This member is required.
    public var subnetIds: [Swift.String]?
    /// 1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.
    public var tags: [Swift.String: Swift.String]?

    public init(
        amiId: Swift.String? = nil,
        clientToken: Swift.String? = nil,
        clusterIdentifier: Swift.String? = nil,
        computeNodeGroupName: Swift.String? = nil,
        customLaunchTemplate: PCSClientTypes.CustomLaunchTemplate? = nil,
        iamInstanceProfileArn: Swift.String? = nil,
        instanceConfigs: [PCSClientTypes.InstanceConfig]? = nil,
        purchaseOption: PCSClientTypes.PurchaseOption? = nil,
        scalingConfiguration: PCSClientTypes.ScalingConfigurationRequest? = nil,
        slurmConfiguration: PCSClientTypes.ComputeNodeGroupSlurmConfigurationRequest? = nil,
        spotOptions: PCSClientTypes.SpotOptions? = nil,
        subnetIds: [Swift.String]? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.amiId = amiId
        self.clientToken = clientToken
        self.clusterIdentifier = clusterIdentifier
        self.computeNodeGroupName = computeNodeGroupName
        self.customLaunchTemplate = customLaunchTemplate
        self.iamInstanceProfileArn = iamInstanceProfileArn
        self.instanceConfigs = instanceConfigs
        self.purchaseOption = purchaseOption
        self.scalingConfiguration = scalingConfiguration
        self.slurmConfiguration = slurmConfiguration
        self.spotOptions = spotOptions
        self.subnetIds = subnetIds
        self.tags = tags
    }
}

extension PCSClientTypes {

    /// An error that occurred during resource creation.
    public struct ErrorInfo: Swift.Sendable {
        /// The short-form error code.
        public var code: Swift.String?
        /// The detailed error information.
        public var message: Swift.String?

        public init(
            code: Swift.String? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
        }
    }
}

extension PCSClientTypes {

    /// Specifies the boundaries of the compute node group auto scaling.
    public struct ScalingConfiguration: Swift.Sendable {
        /// The upper bound of the number of instances allowed in the compute fleet.
        /// This member is required.
        public var maxInstanceCount: Swift.Int
        /// The lower bound of the number of instances allowed in the compute fleet.
        /// This member is required.
        public var minInstanceCount: Swift.Int

        public init(
            maxInstanceCount: Swift.Int = 0,
            minInstanceCount: Swift.Int = 0
        )
        {
            self.maxInstanceCount = maxInstanceCount
            self.minInstanceCount = minInstanceCount
        }
    }
}

extension PCSClientTypes {

    /// Additional options related to the Slurm scheduler.
    public struct ComputeNodeGroupSlurmConfiguration: Swift.Sendable {
        /// Additional Slurm-specific configuration that directly maps to Slurm settings.
        public var slurmCustomSettings: [PCSClientTypes.SlurmCustomSetting]?

        public init(
            slurmCustomSettings: [PCSClientTypes.SlurmCustomSetting]? = nil
        )
        {
            self.slurmCustomSettings = slurmCustomSettings
        }
    }
}

extension PCSClientTypes {

    public enum ComputeNodeGroupStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case createFailed
        case creating
        case deleted
        case deleteFailed
        case deleting
        case updateFailed
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [ComputeNodeGroupStatus] {
            return [
                .active,
                .createFailed,
                .creating,
                .deleted,
                .deleteFailed,
                .deleting,
                .updateFailed,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .createFailed: return "CREATE_FAILED"
            case .creating: return "CREATING"
            case .deleted: return "DELETED"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleting: return "DELETING"
            case .updateFailed: return "UPDATE_FAILED"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension PCSClientTypes {

    /// A compute node group associated with a cluster.
    public struct ComputeNodeGroup: Swift.Sendable {
        /// The ID of the Amazon Machine Image (AMI) that Amazon Web Services PCS uses to launch instances. If not provided, Amazon Web Services PCS uses the AMI ID specified in the custom launch template.
        public var amiId: Swift.String?
        /// The unique Amazon Resource Name (ARN) of the compute node group.
        /// This member is required.
        public var arn: Swift.String?
        /// The ID of the cluster of the compute node group.
        /// This member is required.
        public var clusterId: Swift.String?
        /// The date and time the resource was created.
        /// This member is required.
        public var createdAt: Foundation.Date?
        /// An Amazon EC2 launch template Amazon Web Services PCS uses to launch compute nodes.
        /// This member is required.
        public var customLaunchTemplate: PCSClientTypes.CustomLaunchTemplate?
        /// The list of errors that occurred during compute node group provisioning.
        public var errorInfo: [PCSClientTypes.ErrorInfo]?
        /// The Amazon Resource Name (ARN) of the IAM instance profile used to pass an IAM role when launching EC2 instances. The role contained in your instance profile must have the pcs:RegisterComputeNodeGroupInstance permission. The resource identifier of the ARN must start with AWSPCS or it must have /aws-pcs/ in its path. Examples
        ///
        /// * arn:aws:iam::111122223333:instance-profile/AWSPCS-example-role-1
        ///
        /// * arn:aws:iam::111122223333:instance-profile/aws-pcs/example-role-2
        /// This member is required.
        public var iamInstanceProfileArn: Swift.String?
        /// The generated unique ID of the compute node group.
        /// This member is required.
        public var id: Swift.String?
        /// A list of EC2 instance configurations that Amazon Web Services PCS can provision in the compute node group.
        /// This member is required.
        public var instanceConfigs: [PCSClientTypes.InstanceConfig]?
        /// The date and time the resource was modified.
        /// This member is required.
        public var modifiedAt: Foundation.Date?
        /// The name that identifies the compute node group.
        /// This member is required.
        public var name: Swift.String?
        /// Specifies how EC2 instances are purchased on your behalf. Amazon Web Services PCS supports On-Demand and Spot instances. For more information, see [Instance purchasing options](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-purchasing-options.html) in the Amazon Elastic Compute Cloud User Guide. If you don't provide this option, it defaults to On-Demand.
        public var purchaseOption: PCSClientTypes.PurchaseOption?
        /// Specifies the boundaries of the compute node group auto scaling.
        /// This member is required.
        public var scalingConfiguration: PCSClientTypes.ScalingConfiguration?
        /// Additional options related to the Slurm scheduler.
        public var slurmConfiguration: PCSClientTypes.ComputeNodeGroupSlurmConfiguration?
        /// Additional configuration when you specify SPOT as the purchaseOption for the CreateComputeNodeGroup API action.
        public var spotOptions: PCSClientTypes.SpotOptions?
        /// The provisioning status of the compute node group. The provisioning status doesn't indicate the overall health of the compute node group.
        /// This member is required.
        public var status: PCSClientTypes.ComputeNodeGroupStatus?
        /// The list of subnet IDs where instances are provisioned by the compute node group. The subnets must be in the same VPC as the cluster.
        /// This member is required.
        public var subnetIds: [Swift.String]?

        public init(
            amiId: Swift.String? = nil,
            arn: Swift.String? = nil,
            clusterId: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            customLaunchTemplate: PCSClientTypes.CustomLaunchTemplate? = nil,
            errorInfo: [PCSClientTypes.ErrorInfo]? = nil,
            iamInstanceProfileArn: Swift.String? = nil,
            id: Swift.String? = nil,
            instanceConfigs: [PCSClientTypes.InstanceConfig]? = nil,
            modifiedAt: Foundation.Date? = nil,
            name: Swift.String? = nil,
            purchaseOption: PCSClientTypes.PurchaseOption? = nil,
            scalingConfiguration: PCSClientTypes.ScalingConfiguration? = nil,
            slurmConfiguration: PCSClientTypes.ComputeNodeGroupSlurmConfiguration? = nil,
            spotOptions: PCSClientTypes.SpotOptions? = nil,
            status: PCSClientTypes.ComputeNodeGroupStatus? = nil,
            subnetIds: [Swift.String]? = nil
        )
        {
            self.amiId = amiId
            self.arn = arn
            self.clusterId = clusterId
            self.createdAt = createdAt
            self.customLaunchTemplate = customLaunchTemplate
            self.errorInfo = errorInfo
            self.iamInstanceProfileArn = iamInstanceProfileArn
            self.id = id
            self.instanceConfigs = instanceConfigs
            self.modifiedAt = modifiedAt
            self.name = name
            self.purchaseOption = purchaseOption
            self.scalingConfiguration = scalingConfiguration
            self.slurmConfiguration = slurmConfiguration
            self.spotOptions = spotOptions
            self.status = status
            self.subnetIds = subnetIds
        }
    }
}

public struct CreateComputeNodeGroupOutput: Swift.Sendable {
    /// A compute node group associated with a cluster.
    public var computeNodeGroup: PCSClientTypes.ComputeNodeGroup?

    public init(
        computeNodeGroup: PCSClientTypes.ComputeNodeGroup? = nil
    )
    {
        self.computeNodeGroup = computeNodeGroup
    }
}

public struct DeleteComputeNodeGroupInput: Swift.Sendable {
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, the subsequent retries with the same client token return the result from the original successful request and they have no additional effect. If you don't specify a client token, the CLI and SDK automatically generate 1 for you.
    public var clientToken: Swift.String?
    /// The name or ID of the cluster of the compute node group.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The name or ID of the compute node group to delete.
    /// This member is required.
    public var computeNodeGroupIdentifier: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        clusterIdentifier: Swift.String? = nil,
        computeNodeGroupIdentifier: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.clusterIdentifier = clusterIdentifier
        self.computeNodeGroupIdentifier = computeNodeGroupIdentifier
    }
}

public struct DeleteComputeNodeGroupOutput: Swift.Sendable {

    public init() { }
}

public struct GetComputeNodeGroupInput: Swift.Sendable {
    /// The name or ID of the cluster.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The name or ID of the compute node group.
    /// This member is required.
    public var computeNodeGroupIdentifier: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil,
        computeNodeGroupIdentifier: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.computeNodeGroupIdentifier = computeNodeGroupIdentifier
    }
}

public struct GetComputeNodeGroupOutput: Swift.Sendable {
    /// A compute node group associated with a cluster.
    public var computeNodeGroup: PCSClientTypes.ComputeNodeGroup?

    public init(
        computeNodeGroup: PCSClientTypes.ComputeNodeGroup? = nil
    )
    {
        self.computeNodeGroup = computeNodeGroup
    }
}

public struct ListComputeNodeGroupsInput: Swift.Sendable {
    /// The name or ID of the cluster to list compute node groups for.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The maximum number of results that are returned per call. You can use nextToken to obtain further pages of results. The default is 10 results, and the maximum allowed page size is 100 results. A value of 0 uses the default.
    public var maxResults: Swift.Int?
    /// The value of nextToken is a unique pagination token for each page of results returned. If nextToken is returned, there are more results available. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token returns an HTTP 400 InvalidToken error.
    public var nextToken: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil,
        maxResults: Swift.Int? = 10,
        nextToken: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension PCSClientTypes {

    /// The object returned by the ListComputeNodeGroups API action.
    public struct ComputeNodeGroupSummary: Swift.Sendable {
        /// The unique Amazon Resource Name (ARN) of the compute node group.
        /// This member is required.
        public var arn: Swift.String?
        /// The ID of the cluster of the compute node group.
        /// This member is required.
        public var clusterId: Swift.String?
        /// The date and time the resource was created.
        /// This member is required.
        public var createdAt: Foundation.Date?
        /// The generated unique ID of the compute node group.
        /// This member is required.
        public var id: Swift.String?
        /// The date and time the resource was modified.
        /// This member is required.
        public var modifiedAt: Foundation.Date?
        /// The name that identifies the compute node group.
        /// This member is required.
        public var name: Swift.String?
        /// The provisioning status of the compute node group. The provisioning status doesn't indicate the overall health of the compute node group.
        /// This member is required.
        public var status: PCSClientTypes.ComputeNodeGroupStatus?

        public init(
            arn: Swift.String? = nil,
            clusterId: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            id: Swift.String? = nil,
            modifiedAt: Foundation.Date? = nil,
            name: Swift.String? = nil,
            status: PCSClientTypes.ComputeNodeGroupStatus? = nil
        )
        {
            self.arn = arn
            self.clusterId = clusterId
            self.createdAt = createdAt
            self.id = id
            self.modifiedAt = modifiedAt
            self.name = name
            self.status = status
        }
    }
}

public struct ListComputeNodeGroupsOutput: Swift.Sendable {
    /// The list of compute node groups for the cluster.
    /// This member is required.
    public var computeNodeGroups: [PCSClientTypes.ComputeNodeGroupSummary]?
    /// The value of nextToken is a unique pagination token for each page of results returned. If nextToken is returned, there are more results available. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token returns an HTTP 400 InvalidToken error.
    public var nextToken: Swift.String?

    public init(
        computeNodeGroups: [PCSClientTypes.ComputeNodeGroupSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.computeNodeGroups = computeNodeGroups
        self.nextToken = nextToken
    }
}

extension PCSClientTypes {

    /// Additional options related to the Slurm scheduler.
    public struct UpdateComputeNodeGroupSlurmConfigurationRequest: Swift.Sendable {
        /// Additional Slurm-specific configuration that directly maps to Slurm settings.
        public var slurmCustomSettings: [PCSClientTypes.SlurmCustomSetting]?

        public init(
            slurmCustomSettings: [PCSClientTypes.SlurmCustomSetting]? = nil
        )
        {
            self.slurmCustomSettings = slurmCustomSettings
        }
    }
}

public struct UpdateComputeNodeGroupInput: Swift.Sendable {
    /// The ID of the Amazon Machine Image (AMI) that Amazon Web Services PCS uses to launch instances. If not provided, Amazon Web Services PCS uses the AMI ID specified in the custom launch template.
    public var amiId: Swift.String?
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, the subsequent retries with the same client token return the result from the original successful request and they have no additional effect. If you don't specify a client token, the CLI and SDK automatically generate 1 for you.
    public var clientToken: Swift.String?
    /// The name or ID of the cluster of the compute node group.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The name or ID of the compute node group.
    /// This member is required.
    public var computeNodeGroupIdentifier: Swift.String?
    /// An Amazon EC2 launch template Amazon Web Services PCS uses to launch compute nodes.
    public var customLaunchTemplate: PCSClientTypes.CustomLaunchTemplate?
    /// The Amazon Resource Name (ARN) of the IAM instance profile used to pass an IAM role when launching EC2 instances. The role contained in your instance profile must have the pcs:RegisterComputeNodeGroupInstance permission. The resource identifier of the ARN must start with AWSPCS or it must have /aws-pcs/ in its path. Examples
    ///
    /// * arn:aws:iam::111122223333:instance-profile/AWSPCS-example-role-1
    ///
    /// * arn:aws:iam::111122223333:instance-profile/aws-pcs/example-role-2
    public var iamInstanceProfileArn: Swift.String?
    /// Specifies how EC2 instances are purchased on your behalf. Amazon Web Services PCS supports On-Demand and Spot instances. For more information, see [Instance purchasing options](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-purchasing-options.html) in the Amazon Elastic Compute Cloud User Guide. If you don't provide this option, it defaults to On-Demand.
    public var purchaseOption: PCSClientTypes.PurchaseOption?
    /// Specifies the boundaries of the compute node group auto scaling.
    public var scalingConfiguration: PCSClientTypes.ScalingConfigurationRequest?
    /// Additional options related to the Slurm scheduler.
    public var slurmConfiguration: PCSClientTypes.UpdateComputeNodeGroupSlurmConfigurationRequest?
    /// Additional configuration when you specify SPOT as the purchaseOption for the CreateComputeNodeGroup API action.
    public var spotOptions: PCSClientTypes.SpotOptions?
    /// The list of subnet IDs where the compute node group provisions instances. The subnets must be in the same VPC as the cluster.
    public var subnetIds: [Swift.String]?

    public init(
        amiId: Swift.String? = nil,
        clientToken: Swift.String? = nil,
        clusterIdentifier: Swift.String? = nil,
        computeNodeGroupIdentifier: Swift.String? = nil,
        customLaunchTemplate: PCSClientTypes.CustomLaunchTemplate? = nil,
        iamInstanceProfileArn: Swift.String? = nil,
        purchaseOption: PCSClientTypes.PurchaseOption? = nil,
        scalingConfiguration: PCSClientTypes.ScalingConfigurationRequest? = nil,
        slurmConfiguration: PCSClientTypes.UpdateComputeNodeGroupSlurmConfigurationRequest? = nil,
        spotOptions: PCSClientTypes.SpotOptions? = nil,
        subnetIds: [Swift.String]? = nil
    )
    {
        self.amiId = amiId
        self.clientToken = clientToken
        self.clusterIdentifier = clusterIdentifier
        self.computeNodeGroupIdentifier = computeNodeGroupIdentifier
        self.customLaunchTemplate = customLaunchTemplate
        self.iamInstanceProfileArn = iamInstanceProfileArn
        self.purchaseOption = purchaseOption
        self.scalingConfiguration = scalingConfiguration
        self.slurmConfiguration = slurmConfiguration
        self.spotOptions = spotOptions
        self.subnetIds = subnetIds
    }
}

public struct UpdateComputeNodeGroupOutput: Swift.Sendable {
    /// A compute node group associated with a cluster.
    public var computeNodeGroup: PCSClientTypes.ComputeNodeGroup?

    public init(
        computeNodeGroup: PCSClientTypes.ComputeNodeGroup? = nil
    )
    {
        self.computeNodeGroup = computeNodeGroup
    }
}

extension PCSClientTypes {

    /// The networking configuration for the cluster's control plane.
    public struct NetworkingRequest: Swift.Sendable {
        /// A list of security group IDs associated with the Elastic Network Interface (ENI) created in subnets.
        public var securityGroupIds: [Swift.String]?
        /// The list of subnet IDs where Amazon Web Services PCS creates an Elastic Network Interface (ENI) to enable communication between managed controllers and Amazon Web Services PCS resources. Subnet IDs have the form subnet-0123456789abcdef0. Subnets can't be in Outposts, Wavelength or an Amazon Web Services Local Zone. Amazon Web Services PCS currently supports only 1 subnet in this list.
        public var subnetIds: [Swift.String]?

        public init(
            securityGroupIds: [Swift.String]? = nil,
            subnetIds: [Swift.String]? = nil
        )
        {
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
        }
    }
}

extension PCSClientTypes {

    public enum SchedulerType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case slurm
        case sdkUnknown(Swift.String)

        public static var allCases: [SchedulerType] {
            return [
                .slurm
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .slurm: return "SLURM"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension PCSClientTypes {

    /// The cluster management and job scheduling software associated with the cluster.
    public struct SchedulerRequest: Swift.Sendable {
        /// The software Amazon Web Services PCS uses to manage cluster scaling and job scheduling.
        /// This member is required.
        public var type: PCSClientTypes.SchedulerType?
        /// The version of the specified scheduling software that Amazon Web Services PCS uses to manage cluster scaling and job scheduling.
        /// This member is required.
        public var version: Swift.String?

        public init(
            type: PCSClientTypes.SchedulerType? = nil,
            version: Swift.String? = nil
        )
        {
            self.type = type
            self.version = version
        }
    }
}

extension PCSClientTypes {

    public enum Size: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case large
        case medium
        case small
        case sdkUnknown(Swift.String)

        public static var allCases: [Size] {
            return [
                .large,
                .medium,
                .small
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .large: return "LARGE"
            case .medium: return "MEDIUM"
            case .small: return "SMALL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension PCSClientTypes {

    /// Additional options related to the Slurm scheduler.
    public struct ClusterSlurmConfigurationRequest: Swift.Sendable {
        /// The time (in seconds) before an idle node is scaled down. Default: 600
        public var scaleDownIdleTimeInSeconds: Swift.Int?
        /// Additional Slurm-specific configuration that directly maps to Slurm settings.
        public var slurmCustomSettings: [PCSClientTypes.SlurmCustomSetting]?

        public init(
            scaleDownIdleTimeInSeconds: Swift.Int? = nil,
            slurmCustomSettings: [PCSClientTypes.SlurmCustomSetting]? = nil
        )
        {
            self.scaleDownIdleTimeInSeconds = scaleDownIdleTimeInSeconds
            self.slurmCustomSettings = slurmCustomSettings
        }
    }
}

public struct CreateClusterInput: Swift.Sendable {
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, the subsequent retries with the same client token return the result from the original successful request and they have no additional effect. If you don't specify a client token, the CLI and SDK automatically generate 1 for you.
    public var clientToken: Swift.String?
    /// A name to identify the cluster. Example: MyCluster
    /// This member is required.
    public var clusterName: Swift.String?
    /// The networking configuration used to set up the cluster's control plane.
    /// This member is required.
    public var networking: PCSClientTypes.NetworkingRequest?
    /// The cluster management and job scheduling software associated with the cluster.
    /// This member is required.
    public var scheduler: PCSClientTypes.SchedulerRequest?
    /// A value that determines the maximum number of compute nodes in the cluster and the maximum number of jobs (active and queued).
    ///
    /// * SMALL: 32 compute nodes and 256 jobs
    ///
    /// * MEDIUM: 512 compute nodes and 8192 jobs
    ///
    /// * LARGE: 2048 compute nodes and 16,384 jobs
    /// This member is required.
    public var size: PCSClientTypes.Size?
    /// Additional options related to the Slurm scheduler.
    public var slurmConfiguration: PCSClientTypes.ClusterSlurmConfigurationRequest?
    /// 1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.
    public var tags: [Swift.String: Swift.String]?

    public init(
        clientToken: Swift.String? = nil,
        clusterName: Swift.String? = nil,
        networking: PCSClientTypes.NetworkingRequest? = nil,
        scheduler: PCSClientTypes.SchedulerRequest? = nil,
        size: PCSClientTypes.Size? = nil,
        slurmConfiguration: PCSClientTypes.ClusterSlurmConfigurationRequest? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.clientToken = clientToken
        self.clusterName = clusterName
        self.networking = networking
        self.scheduler = scheduler
        self.size = size
        self.slurmConfiguration = slurmConfiguration
        self.tags = tags
    }
}

extension PCSClientTypes {

    public enum EndpointType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case slurmctld
        case slurmdbd
        case sdkUnknown(Swift.String)

        public static var allCases: [EndpointType] {
            return [
                .slurmctld,
                .slurmdbd
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .slurmctld: return "SLURMCTLD"
            case .slurmdbd: return "SLURMDBD"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension PCSClientTypes {

    /// An endpoint available for interaction with the scheduler.
    public struct Endpoint: Swift.Sendable {
        /// The endpoint's connection port number. Example: 1234
        /// This member is required.
        public var port: Swift.String?
        /// The endpoint's private IP address. Example: 2.2.2.2
        /// This member is required.
        public var privateIpAddress: Swift.String?
        /// The endpoint's public IP address. Example: 1.1.1.1
        public var publicIpAddress: Swift.String?
        /// Indicates the type of endpoint running at the specific IP address.
        /// This member is required.
        public var type: PCSClientTypes.EndpointType?

        public init(
            port: Swift.String? = nil,
            privateIpAddress: Swift.String? = nil,
            publicIpAddress: Swift.String? = nil,
            type: PCSClientTypes.EndpointType? = nil
        )
        {
            self.port = port
            self.privateIpAddress = privateIpAddress
            self.publicIpAddress = publicIpAddress
            self.type = type
        }
    }
}

extension PCSClientTypes {

    /// The networking configuration for the cluster's control plane.
    public struct Networking: Swift.Sendable {
        /// The list of security group IDs associated with the Elastic Network Interface (ENI) created in subnets. The following rules are required:
        ///
        /// * Inbound rule 1
        ///
        /// * Protocol: All
        ///
        /// * Ports: All
        ///
        /// * Source: Self
        ///
        ///
        ///
        ///
        /// * Outbound rule 1
        ///
        /// * Protocol: All
        ///
        /// * Ports: All
        ///
        /// * Destination: 0.0.0.0/0 (IPv4)
        ///
        ///
        ///
        ///
        /// * Outbound rule 2
        ///
        /// * Protocol: All
        ///
        /// * Ports: All
        ///
        /// * Destination: Self
        public var securityGroupIds: [Swift.String]?
        /// The ID of the subnet where Amazon Web Services PCS creates an Elastic Network Interface (ENI) to enable communication between managed controllers and Amazon Web Services PCS resources. The subnet must have an available IP address, cannot reside in AWS Outposts, AWS Wavelength, or an AWS Local Zone. Example: subnet-abcd1234
        public var subnetIds: [Swift.String]?

        public init(
            securityGroupIds: [Swift.String]? = nil,
            subnetIds: [Swift.String]? = nil
        )
        {
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
        }
    }
}

extension PCSClientTypes {

    /// The cluster management and job scheduling software associated with the cluster.
    public struct Scheduler: Swift.Sendable {
        /// The software Amazon Web Services PCS uses to manage cluster scaling and job scheduling.
        /// This member is required.
        public var type: PCSClientTypes.SchedulerType?
        /// The version of the specified scheduling software that Amazon Web Services PCS uses to manage cluster scaling and job scheduling.
        /// This member is required.
        public var version: Swift.String?

        public init(
            type: PCSClientTypes.SchedulerType? = nil,
            version: Swift.String? = nil
        )
        {
            self.type = type
            self.version = version
        }
    }
}

extension PCSClientTypes {

    /// The shared Slurm key for authentication, also known as the cluster secret.
    public struct SlurmAuthKey: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the the shared Slurm key.
        /// This member is required.
        public var secretArn: Swift.String?
        /// The version of the shared Slurm key.
        /// This member is required.
        public var secretVersion: Swift.String?

        public init(
            secretArn: Swift.String? = nil,
            secretVersion: Swift.String? = nil
        )
        {
            self.secretArn = secretArn
            self.secretVersion = secretVersion
        }
    }
}

extension PCSClientTypes {

    /// Additional options related to the Slurm scheduler.
    public struct ClusterSlurmConfiguration: Swift.Sendable {
        /// The shared Slurm key for authentication, also known as the cluster secret.
        public var authKey: PCSClientTypes.SlurmAuthKey?
        /// The time (in seconds) before an idle node is scaled down. Default: 600
        public var scaleDownIdleTimeInSeconds: Swift.Int?
        /// Additional Slurm-specific configuration that directly maps to Slurm settings.
        public var slurmCustomSettings: [PCSClientTypes.SlurmCustomSetting]?

        public init(
            authKey: PCSClientTypes.SlurmAuthKey? = nil,
            scaleDownIdleTimeInSeconds: Swift.Int? = nil,
            slurmCustomSettings: [PCSClientTypes.SlurmCustomSetting]? = nil
        )
        {
            self.authKey = authKey
            self.scaleDownIdleTimeInSeconds = scaleDownIdleTimeInSeconds
            self.slurmCustomSettings = slurmCustomSettings
        }
    }
}

extension PCSClientTypes {

    public enum ClusterStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case createFailed
        case creating
        case deleteFailed
        case deleting
        case updateFailed
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [ClusterStatus] {
            return [
                .active,
                .createFailed,
                .creating,
                .deleteFailed,
                .deleting,
                .updateFailed,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .createFailed: return "CREATE_FAILED"
            case .creating: return "CREATING"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleting: return "DELETING"
            case .updateFailed: return "UPDATE_FAILED"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension PCSClientTypes {

    /// The cluster resource and configuration.
    public struct Cluster: Swift.Sendable {
        /// The unique Amazon Resource Name (ARN) of the cluster.
        /// This member is required.
        public var arn: Swift.String?
        /// The date and time the resource was created.
        /// This member is required.
        public var createdAt: Foundation.Date?
        /// The list of endpoints available for interaction with the scheduler.
        public var endpoints: [PCSClientTypes.Endpoint]?
        /// The list of errors that occurred during cluster provisioning.
        public var errorInfo: [PCSClientTypes.ErrorInfo]?
        /// The generated unique ID of the cluster.
        /// This member is required.
        public var id: Swift.String?
        /// The date and time the resource was modified.
        /// This member is required.
        public var modifiedAt: Foundation.Date?
        /// The name that identifies the cluster.
        /// This member is required.
        public var name: Swift.String?
        /// The networking configuration for the cluster's control plane.
        /// This member is required.
        public var networking: PCSClientTypes.Networking?
        /// The cluster management and job scheduling software associated with the cluster.
        /// This member is required.
        public var scheduler: PCSClientTypes.Scheduler?
        /// The size of the cluster.
        ///
        /// * SMALL: 32 compute nodes and 256 jobs
        ///
        /// * MEDIUM: 512 compute nodes and 8192 jobs
        ///
        /// * LARGE: 2048 compute nodes and 16,384 jobs
        /// This member is required.
        public var size: PCSClientTypes.Size?
        /// Additional options related to the Slurm scheduler.
        public var slurmConfiguration: PCSClientTypes.ClusterSlurmConfiguration?
        /// The provisioning status of the cluster. The provisioning status doesn't indicate the overall health of the cluster.
        /// This member is required.
        public var status: PCSClientTypes.ClusterStatus?

        public init(
            arn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            endpoints: [PCSClientTypes.Endpoint]? = nil,
            errorInfo: [PCSClientTypes.ErrorInfo]? = nil,
            id: Swift.String? = nil,
            modifiedAt: Foundation.Date? = nil,
            name: Swift.String? = nil,
            networking: PCSClientTypes.Networking? = nil,
            scheduler: PCSClientTypes.Scheduler? = nil,
            size: PCSClientTypes.Size? = nil,
            slurmConfiguration: PCSClientTypes.ClusterSlurmConfiguration? = nil,
            status: PCSClientTypes.ClusterStatus? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.endpoints = endpoints
            self.errorInfo = errorInfo
            self.id = id
            self.modifiedAt = modifiedAt
            self.name = name
            self.networking = networking
            self.scheduler = scheduler
            self.size = size
            self.slurmConfiguration = slurmConfiguration
            self.status = status
        }
    }
}

public struct CreateClusterOutput: Swift.Sendable {
    /// The cluster resource.
    public var cluster: PCSClientTypes.Cluster?

    public init(
        cluster: PCSClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

public struct DeleteClusterInput: Swift.Sendable {
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, the subsequent retries with the same client token return the result from the original successful request and they have no additional effect. If you don't specify a client token, the CLI and SDK automatically generate 1 for you.
    public var clientToken: Swift.String?
    /// The name or ID of the cluster to delete.
    /// This member is required.
    public var clusterIdentifier: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        clusterIdentifier: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.clusterIdentifier = clusterIdentifier
    }
}

public struct DeleteClusterOutput: Swift.Sendable {

    public init() { }
}

public struct GetClusterInput: Swift.Sendable {
    /// The name or ID of the cluster of the queue.
    /// This member is required.
    public var clusterIdentifier: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
    }
}

public struct GetClusterOutput: Swift.Sendable {
    /// The cluster resource.
    public var cluster: PCSClientTypes.Cluster?

    public init(
        cluster: PCSClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

public struct ListClustersInput: Swift.Sendable {
    /// The maximum number of results that are returned per call. You can use nextToken to obtain further pages of results. The default is 10 results, and the maximum allowed page size is 100 results. A value of 0 uses the default.
    public var maxResults: Swift.Int?
    /// The value of nextToken is a unique pagination token for each page of results returned. If nextToken is returned, there are more results available. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token returns an HTTP 400 InvalidToken error.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = 10,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension PCSClientTypes {

    /// The object returned by the ListClusters API action.
    public struct ClusterSummary: Swift.Sendable {
        /// The unique Amazon Resource Name (ARN) of the cluster.
        /// This member is required.
        public var arn: Swift.String?
        /// The date and time the resource was created.
        /// This member is required.
        public var createdAt: Foundation.Date?
        /// The generated unique ID of the cluster.
        /// This member is required.
        public var id: Swift.String?
        /// The date and time the resource was modified.
        /// This member is required.
        public var modifiedAt: Foundation.Date?
        /// The name that identifies the cluster.
        /// This member is required.
        public var name: Swift.String?
        /// The provisioning status of the cluster. The provisioning status doesn't indicate the overall health of the cluster.
        /// This member is required.
        public var status: PCSClientTypes.ClusterStatus?

        public init(
            arn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            id: Swift.String? = nil,
            modifiedAt: Foundation.Date? = nil,
            name: Swift.String? = nil,
            status: PCSClientTypes.ClusterStatus? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.id = id
            self.modifiedAt = modifiedAt
            self.name = name
            self.status = status
        }
    }
}

public struct ListClustersOutput: Swift.Sendable {
    /// The list of clusters.
    /// This member is required.
    public var clusters: [PCSClientTypes.ClusterSummary]?
    /// The value of nextToken is a unique pagination token for each page of results returned. If nextToken is returned, there are more results available. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token returns an HTTP 400 InvalidToken error.
    public var nextToken: Swift.String?

    public init(
        clusters: [PCSClientTypes.ClusterSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.clusters = clusters
        self.nextToken = nextToken
    }
}

extension PCSClientTypes {

    /// The compute node group configuration for a queue.
    public struct ComputeNodeGroupConfiguration: Swift.Sendable {
        /// The compute node group ID for the compute node group configuration.
        public var computeNodeGroupId: Swift.String?

        public init(
            computeNodeGroupId: Swift.String? = nil
        )
        {
            self.computeNodeGroupId = computeNodeGroupId
        }
    }
}

public struct CreateQueueInput: Swift.Sendable {
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, the subsequent retries with the same client token return the result from the original successful request and they have no additional effect. If you don't specify a client token, the CLI and SDK automatically generate 1 for you.
    public var clientToken: Swift.String?
    /// The name or ID of the cluster for which to create a queue.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The list of compute node group configurations to associate with the queue. Queues assign jobs to associated compute node groups.
    public var computeNodeGroupConfigurations: [PCSClientTypes.ComputeNodeGroupConfiguration]?
    /// A name to identify the queue.
    /// This member is required.
    public var queueName: Swift.String?
    /// 1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.
    public var tags: [Swift.String: Swift.String]?

    public init(
        clientToken: Swift.String? = nil,
        clusterIdentifier: Swift.String? = nil,
        computeNodeGroupConfigurations: [PCSClientTypes.ComputeNodeGroupConfiguration]? = nil,
        queueName: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.clientToken = clientToken
        self.clusterIdentifier = clusterIdentifier
        self.computeNodeGroupConfigurations = computeNodeGroupConfigurations
        self.queueName = queueName
        self.tags = tags
    }
}

extension PCSClientTypes {

    public enum QueueStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case createFailed
        case creating
        case deleteFailed
        case deleting
        case updateFailed
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [QueueStatus] {
            return [
                .active,
                .createFailed,
                .creating,
                .deleteFailed,
                .deleting,
                .updateFailed,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .createFailed: return "CREATE_FAILED"
            case .creating: return "CREATING"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleting: return "DELETING"
            case .updateFailed: return "UPDATE_FAILED"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension PCSClientTypes {

    /// A queue resource.
    public struct Queue: Swift.Sendable {
        /// The unique Amazon Resource Name (ARN) of the queue.
        /// This member is required.
        public var arn: Swift.String?
        /// The ID of the cluster of the queue.
        /// This member is required.
        public var clusterId: Swift.String?
        /// The list of compute node group configurations associated with the queue. Queues assign jobs to associated compute node groups.
        /// This member is required.
        public var computeNodeGroupConfigurations: [PCSClientTypes.ComputeNodeGroupConfiguration]?
        /// The date and time the resource was created.
        /// This member is required.
        public var createdAt: Foundation.Date?
        /// The list of errors that occurred during queue provisioning.
        public var errorInfo: [PCSClientTypes.ErrorInfo]?
        /// The generated unique ID of the queue.
        /// This member is required.
        public var id: Swift.String?
        /// The date and time the resource was modified.
        /// This member is required.
        public var modifiedAt: Foundation.Date?
        /// The name that identifies the queue.
        /// This member is required.
        public var name: Swift.String?
        /// The provisioning status of the queue. The provisioning status doesn't indicate the overall health of the queue.
        /// This member is required.
        public var status: PCSClientTypes.QueueStatus?

        public init(
            arn: Swift.String? = nil,
            clusterId: Swift.String? = nil,
            computeNodeGroupConfigurations: [PCSClientTypes.ComputeNodeGroupConfiguration]? = nil,
            createdAt: Foundation.Date? = nil,
            errorInfo: [PCSClientTypes.ErrorInfo]? = nil,
            id: Swift.String? = nil,
            modifiedAt: Foundation.Date? = nil,
            name: Swift.String? = nil,
            status: PCSClientTypes.QueueStatus? = nil
        )
        {
            self.arn = arn
            self.clusterId = clusterId
            self.computeNodeGroupConfigurations = computeNodeGroupConfigurations
            self.createdAt = createdAt
            self.errorInfo = errorInfo
            self.id = id
            self.modifiedAt = modifiedAt
            self.name = name
            self.status = status
        }
    }
}

public struct CreateQueueOutput: Swift.Sendable {
    /// A queue resource.
    public var queue: PCSClientTypes.Queue?

    public init(
        queue: PCSClientTypes.Queue? = nil
    )
    {
        self.queue = queue
    }
}

public struct DeleteQueueInput: Swift.Sendable {
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, the subsequent retries with the same client token return the result from the original successful request and they have no additional effect. If you don't specify a client token, the CLI and SDK automatically generate 1 for you.
    public var clientToken: Swift.String?
    /// The name or ID of the cluster of the queue.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The name or ID of the queue to delete.
    /// This member is required.
    public var queueIdentifier: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        clusterIdentifier: Swift.String? = nil,
        queueIdentifier: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.clusterIdentifier = clusterIdentifier
        self.queueIdentifier = queueIdentifier
    }
}

public struct DeleteQueueOutput: Swift.Sendable {

    public init() { }
}

public struct GetQueueInput: Swift.Sendable {
    /// The name or ID of the cluster of the queue.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The name or ID of the queue.
    /// This member is required.
    public var queueIdentifier: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil,
        queueIdentifier: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.queueIdentifier = queueIdentifier
    }
}

public struct GetQueueOutput: Swift.Sendable {
    /// A queue resource.
    public var queue: PCSClientTypes.Queue?

    public init(
        queue: PCSClientTypes.Queue? = nil
    )
    {
        self.queue = queue
    }
}

public struct ListQueuesInput: Swift.Sendable {
    /// The name or ID of the cluster to list queues for.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The maximum number of results that are returned per call. You can use nextToken to obtain further pages of results. The default is 10 results, and the maximum allowed page size is 100 results. A value of 0 uses the default.
    public var maxResults: Swift.Int?
    /// The value of nextToken is a unique pagination token for each page of results returned. If nextToken is returned, there are more results available. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token returns an HTTP 400 InvalidToken error.
    public var nextToken: Swift.String?

    public init(
        clusterIdentifier: Swift.String? = nil,
        maxResults: Swift.Int? = 10,
        nextToken: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension PCSClientTypes {

    /// The object returned by the ListQueues API action.
    public struct QueueSummary: Swift.Sendable {
        /// The unique Amazon Resource Name (ARN) of the queue.
        /// This member is required.
        public var arn: Swift.String?
        /// The ID of the cluster of the queue.
        /// This member is required.
        public var clusterId: Swift.String?
        /// The date and time the resource was created.
        /// This member is required.
        public var createdAt: Foundation.Date?
        /// The generated unique ID of the queue.
        /// This member is required.
        public var id: Swift.String?
        /// The date and time the resource was modified.
        /// This member is required.
        public var modifiedAt: Foundation.Date?
        /// The name that identifies the queue.
        /// This member is required.
        public var name: Swift.String?
        /// The provisioning status of the queue. The provisioning status doesn't indicate the overall health of the queue.
        /// This member is required.
        public var status: PCSClientTypes.QueueStatus?

        public init(
            arn: Swift.String? = nil,
            clusterId: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            id: Swift.String? = nil,
            modifiedAt: Foundation.Date? = nil,
            name: Swift.String? = nil,
            status: PCSClientTypes.QueueStatus? = nil
        )
        {
            self.arn = arn
            self.clusterId = clusterId
            self.createdAt = createdAt
            self.id = id
            self.modifiedAt = modifiedAt
            self.name = name
            self.status = status
        }
    }
}

public struct ListQueuesOutput: Swift.Sendable {
    /// The value of nextToken is a unique pagination token for each page of results returned. If nextToken is returned, there are more results available. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token returns an HTTP 400 InvalidToken error.
    public var nextToken: Swift.String?
    /// The list of queues associated with the cluster.
    /// This member is required.
    public var queues: [PCSClientTypes.QueueSummary]?

    public init(
        nextToken: Swift.String? = nil,
        queues: [PCSClientTypes.QueueSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.queues = queues
    }
}

public struct UpdateQueueInput: Swift.Sendable {
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, the subsequent retries with the same client token return the result from the original successful request and they have no additional effect. If you don't specify a client token, the CLI and SDK automatically generate 1 for you.
    public var clientToken: Swift.String?
    /// The name or ID of the cluster of the queue.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The list of compute node group configurations to associate with the queue. Queues assign jobs to associated compute node groups.
    public var computeNodeGroupConfigurations: [PCSClientTypes.ComputeNodeGroupConfiguration]?
    /// The name or ID of the queue.
    /// This member is required.
    public var queueIdentifier: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        clusterIdentifier: Swift.String? = nil,
        computeNodeGroupConfigurations: [PCSClientTypes.ComputeNodeGroupConfiguration]? = nil,
        queueIdentifier: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.clusterIdentifier = clusterIdentifier
        self.computeNodeGroupConfigurations = computeNodeGroupConfigurations
        self.queueIdentifier = queueIdentifier
    }
}

public struct UpdateQueueOutput: Swift.Sendable {
    /// A queue resource.
    public var queue: PCSClientTypes.Queue?

    public init(
        queue: PCSClientTypes.Queue? = nil
    )
    {
        self.queue = queue
    }
}

public struct RegisterComputeNodeGroupInstanceInput: Swift.Sendable {
    /// The client-generated token to allow for retries.
    /// This member is required.
    public var bootstrapId: Swift.String?
    /// The name or ID of the cluster to register the compute node group instance in.
    /// This member is required.
    public var clusterIdentifier: Swift.String?

    public init(
        bootstrapId: Swift.String? = nil,
        clusterIdentifier: Swift.String? = nil
    )
    {
        self.bootstrapId = bootstrapId
        self.clusterIdentifier = clusterIdentifier
    }
}

public struct RegisterComputeNodeGroupInstanceOutput: Swift.Sendable {
    /// The list of endpoints available for interaction with the scheduler.
    /// This member is required.
    public var endpoints: [PCSClientTypes.Endpoint]?
    /// The scheduler node ID for this instance.
    /// This member is required.
    public var nodeID: Swift.String?
    /// For the Slurm scheduler, this is the shared Munge key the scheduler uses to authenticate compute node group instances.
    /// This member is required.
    public var sharedSecret: Swift.String?

    public init(
        endpoints: [PCSClientTypes.Endpoint]? = nil,
        nodeID: Swift.String? = nil,
        sharedSecret: Swift.String? = nil
    )
    {
        self.endpoints = endpoints
        self.nodeID = nodeID
        self.sharedSecret = sharedSecret
    }
}

extension RegisterComputeNodeGroupInstanceOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RegisterComputeNodeGroupInstanceOutput(endpoints: \(Swift.String(describing: endpoints)), nodeID: \(Swift.String(describing: nodeID)), sharedSecret: \"CONTENT_REDACTED\")"}
}

public struct ListTagsForResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the resource for which to list tags.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct ListTagsForResourceOutput: Swift.Sendable {
    /// 1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.
    public var tags: [Swift.String: Swift.String]?

    public init(
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

public struct TagResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the resource.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// 1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.
    /// This member is required.
    public var tags: [Swift.String: Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

public struct UntagResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the resource.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// 1 or more tag keys to remove from the resource. Specify only tag keys and not tag values.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

extension CreateClusterInput {

    static func urlPathProvider(_ value: CreateClusterInput) -> Swift.String? {
        return "/"
    }
}

extension CreateComputeNodeGroupInput {

    static func urlPathProvider(_ value: CreateComputeNodeGroupInput) -> Swift.String? {
        return "/"
    }
}

extension CreateQueueInput {

    static func urlPathProvider(_ value: CreateQueueInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteClusterInput {

    static func urlPathProvider(_ value: DeleteClusterInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteComputeNodeGroupInput {

    static func urlPathProvider(_ value: DeleteComputeNodeGroupInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteQueueInput {

    static func urlPathProvider(_ value: DeleteQueueInput) -> Swift.String? {
        return "/"
    }
}

extension GetClusterInput {

    static func urlPathProvider(_ value: GetClusterInput) -> Swift.String? {
        return "/"
    }
}

extension GetComputeNodeGroupInput {

    static func urlPathProvider(_ value: GetComputeNodeGroupInput) -> Swift.String? {
        return "/"
    }
}

extension GetQueueInput {

    static func urlPathProvider(_ value: GetQueueInput) -> Swift.String? {
        return "/"
    }
}

extension ListClustersInput {

    static func urlPathProvider(_ value: ListClustersInput) -> Swift.String? {
        return "/"
    }
}

extension ListComputeNodeGroupsInput {

    static func urlPathProvider(_ value: ListComputeNodeGroupsInput) -> Swift.String? {
        return "/"
    }
}

extension ListQueuesInput {

    static func urlPathProvider(_ value: ListQueuesInput) -> Swift.String? {
        return "/"
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        return "/"
    }
}

extension RegisterComputeNodeGroupInstanceInput {

    static func urlPathProvider(_ value: RegisterComputeNodeGroupInstanceInput) -> Swift.String? {
        return "/"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateComputeNodeGroupInput {

    static func urlPathProvider(_ value: UpdateComputeNodeGroupInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateQueueInput {

    static func urlPathProvider(_ value: UpdateQueueInput) -> Swift.String? {
        return "/"
    }
}

extension CreateClusterInput {

    static func write(value: CreateClusterInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
        try writer["clusterName"].write(value.clusterName)
        try writer["networking"].write(value.networking, with: PCSClientTypes.NetworkingRequest.write(value:to:))
        try writer["scheduler"].write(value.scheduler, with: PCSClientTypes.SchedulerRequest.write(value:to:))
        try writer["size"].write(value.size)
        try writer["slurmConfiguration"].write(value.slurmConfiguration, with: PCSClientTypes.ClusterSlurmConfigurationRequest.write(value:to:))
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateComputeNodeGroupInput {

    static func write(value: CreateComputeNodeGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["amiId"].write(value.amiId)
        try writer["clientToken"].write(value.clientToken)
        try writer["clusterIdentifier"].write(value.clusterIdentifier)
        try writer["computeNodeGroupName"].write(value.computeNodeGroupName)
        try writer["customLaunchTemplate"].write(value.customLaunchTemplate, with: PCSClientTypes.CustomLaunchTemplate.write(value:to:))
        try writer["iamInstanceProfileArn"].write(value.iamInstanceProfileArn)
        try writer["instanceConfigs"].writeList(value.instanceConfigs, memberWritingClosure: PCSClientTypes.InstanceConfig.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["purchaseOption"].write(value.purchaseOption)
        try writer["scalingConfiguration"].write(value.scalingConfiguration, with: PCSClientTypes.ScalingConfigurationRequest.write(value:to:))
        try writer["slurmConfiguration"].write(value.slurmConfiguration, with: PCSClientTypes.ComputeNodeGroupSlurmConfigurationRequest.write(value:to:))
        try writer["spotOptions"].write(value.spotOptions, with: PCSClientTypes.SpotOptions.write(value:to:))
        try writer["subnetIds"].writeList(value.subnetIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateQueueInput {

    static func write(value: CreateQueueInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
        try writer["clusterIdentifier"].write(value.clusterIdentifier)
        try writer["computeNodeGroupConfigurations"].writeList(value.computeNodeGroupConfigurations, memberWritingClosure: PCSClientTypes.ComputeNodeGroupConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["queueName"].write(value.queueName)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension DeleteClusterInput {

    static func write(value: DeleteClusterInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
        try writer["clusterIdentifier"].write(value.clusterIdentifier)
    }
}

extension DeleteComputeNodeGroupInput {

    static func write(value: DeleteComputeNodeGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
        try writer["clusterIdentifier"].write(value.clusterIdentifier)
        try writer["computeNodeGroupIdentifier"].write(value.computeNodeGroupIdentifier)
    }
}

extension DeleteQueueInput {

    static func write(value: DeleteQueueInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
        try writer["clusterIdentifier"].write(value.clusterIdentifier)
        try writer["queueIdentifier"].write(value.queueIdentifier)
    }
}

extension GetClusterInput {

    static func write(value: GetClusterInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clusterIdentifier"].write(value.clusterIdentifier)
    }
}

extension GetComputeNodeGroupInput {

    static func write(value: GetComputeNodeGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clusterIdentifier"].write(value.clusterIdentifier)
        try writer["computeNodeGroupIdentifier"].write(value.computeNodeGroupIdentifier)
    }
}

extension GetQueueInput {

    static func write(value: GetQueueInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clusterIdentifier"].write(value.clusterIdentifier)
        try writer["queueIdentifier"].write(value.queueIdentifier)
    }
}

extension ListClustersInput {

    static func write(value: ListClustersInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension ListComputeNodeGroupsInput {

    static func write(value: ListComputeNodeGroupsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clusterIdentifier"].write(value.clusterIdentifier)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension ListQueuesInput {

    static func write(value: ListQueuesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clusterIdentifier"].write(value.clusterIdentifier)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension ListTagsForResourceInput {

    static func write(value: ListTagsForResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resourceArn"].write(value.resourceArn)
    }
}

extension RegisterComputeNodeGroupInstanceInput {

    static func write(value: RegisterComputeNodeGroupInstanceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bootstrapId"].write(value.bootstrapId)
        try writer["clusterIdentifier"].write(value.clusterIdentifier)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resourceArn"].write(value.resourceArn)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension UntagResourceInput {

    static func write(value: UntagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["tagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateComputeNodeGroupInput {

    static func write(value: UpdateComputeNodeGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["amiId"].write(value.amiId)
        try writer["clientToken"].write(value.clientToken)
        try writer["clusterIdentifier"].write(value.clusterIdentifier)
        try writer["computeNodeGroupIdentifier"].write(value.computeNodeGroupIdentifier)
        try writer["customLaunchTemplate"].write(value.customLaunchTemplate, with: PCSClientTypes.CustomLaunchTemplate.write(value:to:))
        try writer["iamInstanceProfileArn"].write(value.iamInstanceProfileArn)
        try writer["purchaseOption"].write(value.purchaseOption)
        try writer["scalingConfiguration"].write(value.scalingConfiguration, with: PCSClientTypes.ScalingConfigurationRequest.write(value:to:))
        try writer["slurmConfiguration"].write(value.slurmConfiguration, with: PCSClientTypes.UpdateComputeNodeGroupSlurmConfigurationRequest.write(value:to:))
        try writer["spotOptions"].write(value.spotOptions, with: PCSClientTypes.SpotOptions.write(value:to:))
        try writer["subnetIds"].writeList(value.subnetIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateQueueInput {

    static func write(value: UpdateQueueInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
        try writer["clusterIdentifier"].write(value.clusterIdentifier)
        try writer["computeNodeGroupConfigurations"].writeList(value.computeNodeGroupConfigurations, memberWritingClosure: PCSClientTypes.ComputeNodeGroupConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["queueIdentifier"].write(value.queueIdentifier)
    }
}

extension CreateClusterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateClusterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateClusterOutput()
        value.cluster = try reader["cluster"].readIfPresent(with: PCSClientTypes.Cluster.read(from:))
        return value
    }
}

extension CreateComputeNodeGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateComputeNodeGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateComputeNodeGroupOutput()
        value.computeNodeGroup = try reader["computeNodeGroup"].readIfPresent(with: PCSClientTypes.ComputeNodeGroup.read(from:))
        return value
    }
}

extension CreateQueueOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateQueueOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateQueueOutput()
        value.queue = try reader["queue"].readIfPresent(with: PCSClientTypes.Queue.read(from:))
        return value
    }
}

extension DeleteClusterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteClusterOutput {
        return DeleteClusterOutput()
    }
}

extension DeleteComputeNodeGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteComputeNodeGroupOutput {
        return DeleteComputeNodeGroupOutput()
    }
}

extension DeleteQueueOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteQueueOutput {
        return DeleteQueueOutput()
    }
}

extension GetClusterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetClusterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetClusterOutput()
        value.cluster = try reader["cluster"].readIfPresent(with: PCSClientTypes.Cluster.read(from:))
        return value
    }
}

extension GetComputeNodeGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetComputeNodeGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetComputeNodeGroupOutput()
        value.computeNodeGroup = try reader["computeNodeGroup"].readIfPresent(with: PCSClientTypes.ComputeNodeGroup.read(from:))
        return value
    }
}

extension GetQueueOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetQueueOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetQueueOutput()
        value.queue = try reader["queue"].readIfPresent(with: PCSClientTypes.Queue.read(from:))
        return value
    }
}

extension ListClustersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListClustersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListClustersOutput()
        value.clusters = try reader["clusters"].readListIfPresent(memberReadingClosure: PCSClientTypes.ClusterSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListComputeNodeGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListComputeNodeGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListComputeNodeGroupsOutput()
        value.computeNodeGroups = try reader["computeNodeGroups"].readListIfPresent(memberReadingClosure: PCSClientTypes.ComputeNodeGroupSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListQueuesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListQueuesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListQueuesOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.queues = try reader["queues"].readListIfPresent(memberReadingClosure: PCSClientTypes.QueueSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension RegisterComputeNodeGroupInstanceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RegisterComputeNodeGroupInstanceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RegisterComputeNodeGroupInstanceOutput()
        value.endpoints = try reader["endpoints"].readListIfPresent(memberReadingClosure: PCSClientTypes.Endpoint.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nodeID = try reader["nodeID"].readIfPresent() ?? ""
        value.sharedSecret = try reader["sharedSecret"].readIfPresent() ?? ""
        return value
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateComputeNodeGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateComputeNodeGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateComputeNodeGroupOutput()
        value.computeNodeGroup = try reader["computeNodeGroup"].readIfPresent(with: PCSClientTypes.ComputeNodeGroup.read(from:))
        return value
    }
}

extension UpdateQueueOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateQueueOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateQueueOutput()
        value.queue = try reader["queue"].readIfPresent(with: PCSClientTypes.Queue.read(from:))
        return value
    }
}

enum CreateClusterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateComputeNodeGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateQueueOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteClusterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteComputeNodeGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteQueueOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetClusterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetComputeNodeGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetQueueOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListClustersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListComputeNodeGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListQueuesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RegisterComputeNodeGroupInstanceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateComputeNodeGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateQueueOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension InternalServerException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InternalServerException {
        let reader = baseError.errorBodyReader
        var value = InternalServerException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceQuotaExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ServiceQuotaExceededException {
        let reader = baseError.errorBodyReader
        var value = ServiceQuotaExceededException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.properties.quotaCode = try reader["quotaCode"].readIfPresent()
        value.properties.resourceId = try reader["resourceId"].readIfPresent()
        value.properties.resourceType = try reader["resourceType"].readIfPresent()
        value.properties.serviceCode = try reader["serviceCode"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ThrottlingException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ThrottlingException {
        let reader = baseError.errorBodyReader
        let httpResponse = baseError.httpResponse
        var value = ThrottlingException()
        if let retryAfterSecondsHeaderValue = httpResponse.headers.value(for: "Retry-After") {
            value.properties.retryAfterSeconds = Swift.Int(retryAfterSecondsHeaderValue) ?? 0
        }
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.properties.resourceId = try reader["resourceId"].readIfPresent() ?? ""
        value.properties.resourceType = try reader["resourceType"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.fieldList = try reader["fieldList"].readListIfPresent(memberReadingClosure: PCSClientTypes.ValidationExceptionField.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.properties.reason = try reader["reason"].readIfPresent() ?? .sdkUnknown("")
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.properties.resourceId = try reader["resourceId"].readIfPresent() ?? ""
        value.properties.resourceType = try reader["resourceType"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension PCSClientTypes.Cluster {

    static func read(from reader: SmithyJSON.Reader) throws -> PCSClientTypes.Cluster {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PCSClientTypes.Cluster()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.id = try reader["id"].readIfPresent() ?? ""
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.modifiedAt = try reader["modifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.scheduler = try reader["scheduler"].readIfPresent(with: PCSClientTypes.Scheduler.read(from:))
        value.size = try reader["size"].readIfPresent() ?? .sdkUnknown("")
        value.slurmConfiguration = try reader["slurmConfiguration"].readIfPresent(with: PCSClientTypes.ClusterSlurmConfiguration.read(from:))
        value.networking = try reader["networking"].readIfPresent(with: PCSClientTypes.Networking.read(from:))
        value.endpoints = try reader["endpoints"].readListIfPresent(memberReadingClosure: PCSClientTypes.Endpoint.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.errorInfo = try reader["errorInfo"].readListIfPresent(memberReadingClosure: PCSClientTypes.ErrorInfo.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PCSClientTypes.ErrorInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> PCSClientTypes.ErrorInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PCSClientTypes.ErrorInfo()
        value.code = try reader["code"].readIfPresent()
        value.message = try reader["message"].readIfPresent()
        return value
    }
}

extension PCSClientTypes.Endpoint {

    static func read(from reader: SmithyJSON.Reader) throws -> PCSClientTypes.Endpoint {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PCSClientTypes.Endpoint()
        value.type = try reader["type"].readIfPresent() ?? .sdkUnknown("")
        value.privateIpAddress = try reader["privateIpAddress"].readIfPresent() ?? ""
        value.publicIpAddress = try reader["publicIpAddress"].readIfPresent()
        value.port = try reader["port"].readIfPresent() ?? ""
        return value
    }
}

extension PCSClientTypes.Networking {

    static func read(from reader: SmithyJSON.Reader) throws -> PCSClientTypes.Networking {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PCSClientTypes.Networking()
        value.subnetIds = try reader["subnetIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.securityGroupIds = try reader["securityGroupIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PCSClientTypes.ClusterSlurmConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> PCSClientTypes.ClusterSlurmConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PCSClientTypes.ClusterSlurmConfiguration()
        value.scaleDownIdleTimeInSeconds = try reader["scaleDownIdleTimeInSeconds"].readIfPresent()
        value.slurmCustomSettings = try reader["slurmCustomSettings"].readListIfPresent(memberReadingClosure: PCSClientTypes.SlurmCustomSetting.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.authKey = try reader["authKey"].readIfPresent(with: PCSClientTypes.SlurmAuthKey.read(from:))
        return value
    }
}

extension PCSClientTypes.SlurmAuthKey {

    static func read(from reader: SmithyJSON.Reader) throws -> PCSClientTypes.SlurmAuthKey {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PCSClientTypes.SlurmAuthKey()
        value.secretArn = try reader["secretArn"].readIfPresent() ?? ""
        value.secretVersion = try reader["secretVersion"].readIfPresent() ?? ""
        return value
    }
}

extension PCSClientTypes.SlurmCustomSetting {

    static func write(value: PCSClientTypes.SlurmCustomSetting?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["parameterName"].write(value.parameterName)
        try writer["parameterValue"].write(value.parameterValue)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PCSClientTypes.SlurmCustomSetting {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PCSClientTypes.SlurmCustomSetting()
        value.parameterName = try reader["parameterName"].readIfPresent() ?? ""
        value.parameterValue = try reader["parameterValue"].readIfPresent() ?? ""
        return value
    }
}

extension PCSClientTypes.Scheduler {

    static func read(from reader: SmithyJSON.Reader) throws -> PCSClientTypes.Scheduler {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PCSClientTypes.Scheduler()
        value.type = try reader["type"].readIfPresent() ?? .sdkUnknown("")
        value.version = try reader["version"].readIfPresent() ?? ""
        return value
    }
}

extension PCSClientTypes.ComputeNodeGroup {

    static func read(from reader: SmithyJSON.Reader) throws -> PCSClientTypes.ComputeNodeGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PCSClientTypes.ComputeNodeGroup()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.id = try reader["id"].readIfPresent() ?? ""
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.clusterId = try reader["clusterId"].readIfPresent() ?? ""
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.modifiedAt = try reader["modifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        value.amiId = try reader["amiId"].readIfPresent()
        value.subnetIds = try reader["subnetIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.purchaseOption = try reader["purchaseOption"].readIfPresent()
        value.customLaunchTemplate = try reader["customLaunchTemplate"].readIfPresent(with: PCSClientTypes.CustomLaunchTemplate.read(from:))
        value.iamInstanceProfileArn = try reader["iamInstanceProfileArn"].readIfPresent() ?? ""
        value.scalingConfiguration = try reader["scalingConfiguration"].readIfPresent(with: PCSClientTypes.ScalingConfiguration.read(from:))
        value.instanceConfigs = try reader["instanceConfigs"].readListIfPresent(memberReadingClosure: PCSClientTypes.InstanceConfig.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.spotOptions = try reader["spotOptions"].readIfPresent(with: PCSClientTypes.SpotOptions.read(from:))
        value.slurmConfiguration = try reader["slurmConfiguration"].readIfPresent(with: PCSClientTypes.ComputeNodeGroupSlurmConfiguration.read(from:))
        value.errorInfo = try reader["errorInfo"].readListIfPresent(memberReadingClosure: PCSClientTypes.ErrorInfo.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PCSClientTypes.ComputeNodeGroupSlurmConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> PCSClientTypes.ComputeNodeGroupSlurmConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PCSClientTypes.ComputeNodeGroupSlurmConfiguration()
        value.slurmCustomSettings = try reader["slurmCustomSettings"].readListIfPresent(memberReadingClosure: PCSClientTypes.SlurmCustomSetting.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PCSClientTypes.SpotOptions {

    static func write(value: PCSClientTypes.SpotOptions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["allocationStrategy"].write(value.allocationStrategy)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PCSClientTypes.SpotOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PCSClientTypes.SpotOptions()
        value.allocationStrategy = try reader["allocationStrategy"].readIfPresent()
        return value
    }
}

extension PCSClientTypes.InstanceConfig {

    static func write(value: PCSClientTypes.InstanceConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["instanceType"].write(value.instanceType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PCSClientTypes.InstanceConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PCSClientTypes.InstanceConfig()
        value.instanceType = try reader["instanceType"].readIfPresent()
        return value
    }
}

extension PCSClientTypes.ScalingConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> PCSClientTypes.ScalingConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PCSClientTypes.ScalingConfiguration()
        value.minInstanceCount = try reader["minInstanceCount"].readIfPresent() ?? 0
        value.maxInstanceCount = try reader["maxInstanceCount"].readIfPresent() ?? 0
        return value
    }
}

extension PCSClientTypes.CustomLaunchTemplate {

    static func write(value: PCSClientTypes.CustomLaunchTemplate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["id"].write(value.id)
        try writer["version"].write(value.version)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PCSClientTypes.CustomLaunchTemplate {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PCSClientTypes.CustomLaunchTemplate()
        value.id = try reader["id"].readIfPresent() ?? ""
        value.version = try reader["version"].readIfPresent() ?? ""
        return value
    }
}

extension PCSClientTypes.Queue {

    static func read(from reader: SmithyJSON.Reader) throws -> PCSClientTypes.Queue {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PCSClientTypes.Queue()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.id = try reader["id"].readIfPresent() ?? ""
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.clusterId = try reader["clusterId"].readIfPresent() ?? ""
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.modifiedAt = try reader["modifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        value.computeNodeGroupConfigurations = try reader["computeNodeGroupConfigurations"].readListIfPresent(memberReadingClosure: PCSClientTypes.ComputeNodeGroupConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.errorInfo = try reader["errorInfo"].readListIfPresent(memberReadingClosure: PCSClientTypes.ErrorInfo.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PCSClientTypes.ComputeNodeGroupConfiguration {

    static func write(value: PCSClientTypes.ComputeNodeGroupConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["computeNodeGroupId"].write(value.computeNodeGroupId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PCSClientTypes.ComputeNodeGroupConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PCSClientTypes.ComputeNodeGroupConfiguration()
        value.computeNodeGroupId = try reader["computeNodeGroupId"].readIfPresent()
        return value
    }
}

extension PCSClientTypes.ClusterSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> PCSClientTypes.ClusterSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PCSClientTypes.ClusterSummary()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.id = try reader["id"].readIfPresent() ?? ""
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.modifiedAt = try reader["modifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension PCSClientTypes.ComputeNodeGroupSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> PCSClientTypes.ComputeNodeGroupSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PCSClientTypes.ComputeNodeGroupSummary()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.id = try reader["id"].readIfPresent() ?? ""
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.clusterId = try reader["clusterId"].readIfPresent() ?? ""
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.modifiedAt = try reader["modifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension PCSClientTypes.QueueSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> PCSClientTypes.QueueSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PCSClientTypes.QueueSummary()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.id = try reader["id"].readIfPresent() ?? ""
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.clusterId = try reader["clusterId"].readIfPresent() ?? ""
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.modifiedAt = try reader["modifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension PCSClientTypes.ValidationExceptionField {

    static func read(from reader: SmithyJSON.Reader) throws -> PCSClientTypes.ValidationExceptionField {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PCSClientTypes.ValidationExceptionField()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.message = try reader["message"].readIfPresent() ?? ""
        return value
    }
}

extension PCSClientTypes.SchedulerRequest {

    static func write(value: PCSClientTypes.SchedulerRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["type"].write(value.type)
        try writer["version"].write(value.version)
    }
}

extension PCSClientTypes.NetworkingRequest {

    static func write(value: PCSClientTypes.NetworkingRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["securityGroupIds"].writeList(value.securityGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["subnetIds"].writeList(value.subnetIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension PCSClientTypes.ClusterSlurmConfigurationRequest {

    static func write(value: PCSClientTypes.ClusterSlurmConfigurationRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["scaleDownIdleTimeInSeconds"].write(value.scaleDownIdleTimeInSeconds)
        try writer["slurmCustomSettings"].writeList(value.slurmCustomSettings, memberWritingClosure: PCSClientTypes.SlurmCustomSetting.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension PCSClientTypes.ScalingConfigurationRequest {

    static func write(value: PCSClientTypes.ScalingConfigurationRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxInstanceCount"].write(value.maxInstanceCount)
        try writer["minInstanceCount"].write(value.minInstanceCount)
    }
}

extension PCSClientTypes.ComputeNodeGroupSlurmConfigurationRequest {

    static func write(value: PCSClientTypes.ComputeNodeGroupSlurmConfigurationRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["slurmCustomSettings"].writeList(value.slurmCustomSettings, memberWritingClosure: PCSClientTypes.SlurmCustomSetting.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension PCSClientTypes.UpdateComputeNodeGroupSlurmConfigurationRequest {

    static func write(value: PCSClientTypes.UpdateComputeNodeGroupSlurmConfigurationRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["slurmCustomSettings"].writeList(value.slurmCustomSettings, memberWritingClosure: PCSClientTypes.SlurmCustomSetting.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

public enum PCSClientTypes {}
