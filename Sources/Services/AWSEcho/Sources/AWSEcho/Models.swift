//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class ClientRuntime.Indirect
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError

extension EchoClientTypes {

    public struct ComplexStructure: Swift.Sendable {
        public var blobMember: Foundation.Data?
        public var booleanMember: Swift.Bool?
        @Indirect public var complexStructMember: EchoClientTypes.ComplexStructure?
        public var doubleMember: Swift.Double?
        public var floatMember: Swift.Float?
        public var integerMember: Swift.Int?
        public var listOfComplexObjectMember: [EchoClientTypes.ComplexStructure]?
        public var listOfStringsMember: [Swift.String]?
        public var longMember: Swift.Int?
        public var mapOfStringToStringMember: [Swift.String: Swift.String]?
        public var stringMember: Swift.String?
        public var timestampMember: Foundation.Date?

        public init(
            blobMember: Foundation.Data? = nil,
            booleanMember: Swift.Bool? = nil,
            complexStructMember: EchoClientTypes.ComplexStructure? = nil,
            doubleMember: Swift.Double? = nil,
            floatMember: Swift.Float? = nil,
            integerMember: Swift.Int? = nil,
            listOfComplexObjectMember: [EchoClientTypes.ComplexStructure]? = nil,
            listOfStringsMember: [Swift.String]? = nil,
            longMember: Swift.Int? = nil,
            mapOfStringToStringMember: [Swift.String: Swift.String]? = nil,
            stringMember: Swift.String? = nil,
            timestampMember: Foundation.Date? = nil
        ) {
            self.blobMember = blobMember
            self.booleanMember = booleanMember
            self.complexStructMember = complexStructMember
            self.doubleMember = doubleMember
            self.floatMember = floatMember
            self.integerMember = integerMember
            self.listOfComplexObjectMember = listOfComplexObjectMember
            self.listOfStringsMember = listOfStringsMember
            self.longMember = longMember
            self.mapOfStringToStringMember = mapOfStringToStringMember
            self.stringMember = stringMember
            self.timestampMember = timestampMember
        }
    }
}

public struct EchoOperationInput: Swift.Sendable {
    public var blobMember: Foundation.Data?
    public var booleanMember: Swift.Bool?
    public var complexStructMember: EchoClientTypes.ComplexStructure?
    public var doubleMember: Swift.Double?
    public var floatMember: Swift.Float?
    public var integerMember: Swift.Int?
    public var listOfComplexObjectMember: [EchoClientTypes.ComplexStructure]?
    public var listOfStringsMember: [Swift.String]?
    public var longMember: Swift.Int?
    public var mapOfStringToStringMember: [Swift.String: Swift.String]?
    public var stringMember: Swift.String?
    public var timestampMember: Foundation.Date?

    public init(
        blobMember: Foundation.Data? = nil,
        booleanMember: Swift.Bool? = nil,
        complexStructMember: EchoClientTypes.ComplexStructure? = nil,
        doubleMember: Swift.Double? = nil,
        floatMember: Swift.Float? = nil,
        integerMember: Swift.Int? = nil,
        listOfComplexObjectMember: [EchoClientTypes.ComplexStructure]? = nil,
        listOfStringsMember: [Swift.String]? = nil,
        longMember: Swift.Int? = nil,
        mapOfStringToStringMember: [Swift.String: Swift.String]? = nil,
        stringMember: Swift.String? = nil,
        timestampMember: Foundation.Date? = nil
    ) {
        self.blobMember = blobMember
        self.booleanMember = booleanMember
        self.complexStructMember = complexStructMember
        self.doubleMember = doubleMember
        self.floatMember = floatMember
        self.integerMember = integerMember
        self.listOfComplexObjectMember = listOfComplexObjectMember
        self.listOfStringsMember = listOfStringsMember
        self.longMember = longMember
        self.mapOfStringToStringMember = mapOfStringToStringMember
        self.stringMember = stringMember
        self.timestampMember = timestampMember
    }
}

public struct EchoOperationOutput: Swift.Sendable {
    public var blobMember: Foundation.Data?
    public var booleanMember: Swift.Bool?
    public var complexStructMember: EchoClientTypes.ComplexStructure?
    public var doubleMember: Swift.Double?
    public var floatMember: Swift.Float?
    public var integerMember: Swift.Int?
    public var listOfComplexObjectMember: [EchoClientTypes.ComplexStructure]?
    public var listOfStringsMember: [Swift.String]?
    public var longMember: Swift.Int?
    public var mapOfStringToStringMember: [Swift.String: Swift.String]?
    public var stringMember: Swift.String?
    public var timestampMember: Foundation.Date?

    public init(
        blobMember: Foundation.Data? = nil,
        booleanMember: Swift.Bool? = nil,
        complexStructMember: EchoClientTypes.ComplexStructure? = nil,
        doubleMember: Swift.Double? = nil,
        floatMember: Swift.Float? = nil,
        integerMember: Swift.Int? = nil,
        listOfComplexObjectMember: [EchoClientTypes.ComplexStructure]? = nil,
        listOfStringsMember: [Swift.String]? = nil,
        longMember: Swift.Int? = nil,
        mapOfStringToStringMember: [Swift.String: Swift.String]? = nil,
        stringMember: Swift.String? = nil,
        timestampMember: Foundation.Date? = nil
    ) {
        self.blobMember = blobMember
        self.booleanMember = booleanMember
        self.complexStructMember = complexStructMember
        self.doubleMember = doubleMember
        self.floatMember = floatMember
        self.integerMember = integerMember
        self.listOfComplexObjectMember = listOfComplexObjectMember
        self.listOfStringsMember = listOfStringsMember
        self.longMember = longMember
        self.mapOfStringToStringMember = mapOfStringToStringMember
        self.stringMember = stringMember
        self.timestampMember = timestampMember
    }
}

extension EchoOperationInput {

    static func urlPathProvider(_ value: EchoOperationInput) -> Swift.String? {
        return "/"
    }
}

extension EchoOperationInput {

    static func write(value: EchoOperationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["blobMember"].write(value.blobMember)
        try writer["booleanMember"].write(value.booleanMember)
        try writer["complexStructMember"].write(value.complexStructMember, with: EchoClientTypes.ComplexStructure.write(value:to:))
        try writer["doubleMember"].write(value.doubleMember)
        try writer["floatMember"].write(value.floatMember)
        try writer["integerMember"].write(value.integerMember)
        try writer["listOfComplexObjectMember"].writeList(value.listOfComplexObjectMember, memberWritingClosure: EchoClientTypes.ComplexStructure.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["listOfStringsMember"].writeList(value.listOfStringsMember, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["longMember"].write(value.longMember)
        try writer["mapOfStringToStringMember"].writeMap(value.mapOfStringToStringMember, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["stringMember"].write(value.stringMember)
        try writer["timestampMember"].writeTimestamp(value.timestampMember, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

extension EchoOperationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> EchoOperationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = EchoOperationOutput()
        value.blobMember = try reader["blobMember"].readIfPresent()
        value.booleanMember = try reader["booleanMember"].readIfPresent()
        value.complexStructMember = try reader["complexStructMember"].readIfPresent(with: EchoClientTypes.ComplexStructure.read(from:))
        value.doubleMember = try reader["doubleMember"].readIfPresent()
        value.floatMember = try reader["floatMember"].readIfPresent()
        value.integerMember = try reader["integerMember"].readIfPresent()
        value.listOfComplexObjectMember = try reader["listOfComplexObjectMember"].readListIfPresent(memberReadingClosure: EchoClientTypes.ComplexStructure.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.listOfStringsMember = try reader["listOfStringsMember"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.longMember = try reader["longMember"].readIfPresent()
        value.mapOfStringToStringMember = try reader["mapOfStringToStringMember"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.stringMember = try reader["stringMember"].readIfPresent()
        value.timestampMember = try reader["timestampMember"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

enum EchoOperationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension EchoClientTypes.ComplexStructure {

    static func write(value: EchoClientTypes.ComplexStructure?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["blobMember"].write(value.blobMember)
        try writer["booleanMember"].write(value.booleanMember)
        try writer["complexStructMember"].write(value.complexStructMember, with: EchoClientTypes.ComplexStructure.write(value:to:))
        try writer["doubleMember"].write(value.doubleMember)
        try writer["floatMember"].write(value.floatMember)
        try writer["integerMember"].write(value.integerMember)
        try writer["listOfComplexObjectMember"].writeList(value.listOfComplexObjectMember, memberWritingClosure: EchoClientTypes.ComplexStructure.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["listOfStringsMember"].writeList(value.listOfStringsMember, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["longMember"].write(value.longMember)
        try writer["mapOfStringToStringMember"].writeMap(value.mapOfStringToStringMember, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["stringMember"].write(value.stringMember)
        try writer["timestampMember"].writeTimestamp(value.timestampMember, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> EchoClientTypes.ComplexStructure {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = EchoClientTypes.ComplexStructure()
        value.booleanMember = try reader["booleanMember"].readIfPresent()
        value.stringMember = try reader["stringMember"].readIfPresent()
        value.integerMember = try reader["integerMember"].readIfPresent()
        value.longMember = try reader["longMember"].readIfPresent()
        value.floatMember = try reader["floatMember"].readIfPresent()
        value.doubleMember = try reader["doubleMember"].readIfPresent()
        value.timestampMember = try reader["timestampMember"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.blobMember = try reader["blobMember"].readIfPresent()
        value.listOfStringsMember = try reader["listOfStringsMember"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.listOfComplexObjectMember = try reader["listOfComplexObjectMember"].readListIfPresent(memberReadingClosure: EchoClientTypes.ComplexStructure.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.mapOfStringToStringMember = try reader["mapOfStringToStringMember"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.complexStructMember = try reader["complexStructMember"].readIfPresent(with: EchoClientTypes.ComplexStructure.read(from:))
        return value
    }
}

public enum EchoClientTypes {}
