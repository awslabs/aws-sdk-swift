//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum Smithy.ClientError
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.URIQueryItem
@_spi(SmithyTimestamps) import struct SmithyTimestamps.TimestampFormatter

public struct DeleteConfigurationManagerOutput {

    public init() { }
}

public struct GetServiceSettingsInput {

    public init() { }
}

public struct ListQuickSetupTypesInput {

    public init() { }
}

public struct TagResourceOutput {

    public init() { }
}

public struct UntagResourceOutput {

    public init() { }
}

public struct UpdateConfigurationDefinitionOutput {

    public init() { }
}

public struct UpdateConfigurationManagerOutput {

    public init() { }
}

public struct UpdateServiceSettingsOutput {

    public init() { }
}

/// The requester has insufficient permissions to perform the operation.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SSMQuickSetupClientTypes {
    /// The definition of a Quick Setup configuration.
    public struct ConfigurationDefinition {
        /// The ID of the configuration definition.
        public var id: Swift.String?
        /// The ARN of the IAM role used to administrate local configuration deployments.
        public var localDeploymentAdministrationRoleArn: Swift.String?
        /// The name of the IAM role used to deploy local configurations.
        public var localDeploymentExecutionRoleName: Swift.String?
        /// A list of key-value pairs containing the required parameters for the configuration type.
        /// This member is required.
        public var parameters: [Swift.String: Swift.String]?
        /// The type of the Quick Setup configuration.
        /// This member is required.
        public var type: Swift.String?
        /// The version of the Quick Setup type used.
        public var typeVersion: Swift.String?

        public init(
            id: Swift.String? = nil,
            localDeploymentAdministrationRoleArn: Swift.String? = nil,
            localDeploymentExecutionRoleName: Swift.String? = nil,
            parameters: [Swift.String: Swift.String]? = nil,
            type: Swift.String? = nil,
            typeVersion: Swift.String? = nil
        )
        {
            self.id = id
            self.localDeploymentAdministrationRoleArn = localDeploymentAdministrationRoleArn
            self.localDeploymentExecutionRoleName = localDeploymentExecutionRoleName
            self.parameters = parameters
            self.type = type
            self.typeVersion = typeVersion
        }
    }

}

extension SSMQuickSetupClientTypes {
    /// Defines the preferences and options for a configuration definition.
    public struct ConfigurationDefinitionInput {
        /// The ARN of the IAM role used to administrate local configuration deployments.
        public var localDeploymentAdministrationRoleArn: Swift.String?
        /// The name of the IAM role used to deploy local configurations.
        public var localDeploymentExecutionRoleName: Swift.String?
        /// The parameters for the configuration definition type. Parameters for configuration definitions vary based the configuration type. The following tables outline the parameters for each configuration type. OpsCenter (Type: Amazon Web ServicesQuickSetupType-SSMOpsCenter)
        ///
        /// * DelegatedAccountId
        ///
        /// * Description: (Required) The ID of the delegated administrator account.
        ///
        ///
        ///
        ///
        /// * TargetOrganizationalUnits
        ///
        /// * Description: (Required) A comma separated list of organizational units (OUs) you want to deploy the configuration to.
        ///
        ///
        ///
        ///
        /// * TargetRegions
        ///
        /// * Description: (Required) A comma separated list of Amazon Web Services Regions you want to deploy the configuration to.
        ///
        ///
        ///
        ///
        ///
        /// Resource Scheduler (Type: Amazon Web ServicesQuickSetupType-Scheduler)
        ///
        /// * TargetTagKey
        ///
        /// * Description: (Required) The tag key assigned to the instances you want to target.
        ///
        ///
        ///
        ///
        /// * TargetTagValue
        ///
        /// * Description: (Required) The value of the tag key assigned to the instances you want to target.
        ///
        ///
        ///
        ///
        /// * ICalendarString
        ///
        /// * Description: (Required) An iCalendar formatted string containing the schedule you want Change Manager to use.
        ///
        ///
        ///
        ///
        /// * TargetAccounts
        ///
        /// * Description: (Optional) The ID of the Amazon Web Services account initiating the configuration deployment. You only need to provide a value for this parameter if you want to deploy the configuration locally. A value must be provided for either TargetAccounts or TargetOrganizationalUnits.
        ///
        ///
        ///
        ///
        /// * TargetOrganizationalUnits
        ///
        /// * Description: (Optional) A comma separated list of organizational units (OUs) you want to deploy the configuration to.
        ///
        ///
        ///
        ///
        /// * TargetRegions
        ///
        /// * Description: (Required) A comma separated list of Amazon Web Services Regions you want to deploy the configuration to.
        ///
        ///
        ///
        ///
        ///
        /// Default Host Management Configuration (Type: Amazon Web ServicesQuickSetupType-DHMC)
        ///
        /// * UpdateSSMAgent
        ///
        /// * Description: (Optional) A boolean value that determines whether the SSM Agent is updated on the target instances every 2 weeks. The default value is "true".
        ///
        ///
        ///
        ///
        /// * TargetOrganizationalUnits
        ///
        /// * Description: (Required) A comma separated list of organizational units (OUs) you want to deploy the configuration to.
        ///
        ///
        ///
        ///
        /// * TargetRegions
        ///
        /// * Description: (Required) A comma separated list of Amazon Web Services Regions you want to deploy the configuration to.
        ///
        ///
        ///
        ///
        ///
        /// Resource Explorer (Type: Amazon Web ServicesQuickSetupType-ResourceExplorer)
        ///
        /// * SelectedAggregatorRegion
        ///
        /// * Description: (Required) The Amazon Web Services Region where you want to create the aggregator index.
        ///
        ///
        ///
        ///
        /// * ReplaceExistingAggregator
        ///
        /// * Description: (Required) A boolean value that determines whether to demote an existing aggregator if it is in a Region that differs from the value you specify for the SelectedAggregatorRegion.
        ///
        ///
        ///
        ///
        /// * TargetOrganizationalUnits
        ///
        /// * Description: (Required) A comma separated list of organizational units (OUs) you want to deploy the configuration to.
        ///
        ///
        ///
        ///
        /// * TargetRegions
        ///
        /// * Description: (Required) A comma separated list of Amazon Web Services Regions you want to deploy the configuration to.
        ///
        ///
        ///
        ///
        ///
        /// Change Manager (Type: Amazon Web ServicesQuickSetupType-SSMChangeMgr)
        ///
        /// * DelegatedAccountId
        ///
        /// * Description: (Required) The ID of the delegated administrator account.
        ///
        ///
        ///
        ///
        /// * JobFunction
        ///
        /// * Description: (Required) The name for the Change Manager job function.
        ///
        ///
        ///
        ///
        /// * PermissionType
        ///
        /// * Description: (Optional) Specifies whether you want to use default administrator permissions for the job function role, or provide a custom IAM policy. The valid values are CustomPermissions and AdminPermissions. The default value for the parameter is CustomerPermissions.
        ///
        ///
        ///
        ///
        /// * CustomPermissions
        ///
        /// * Description: (Optional) A JSON string containing the IAM policy you want your job function to use. You must provide a value for this parameter if you specify CustomPermissions for the PermissionType parameter.
        ///
        ///
        ///
        ///
        /// * TargetOrganizationalUnits
        ///
        /// * Description: (Required) A comma separated list of organizational units (OUs) you want to deploy the configuration to.
        ///
        ///
        ///
        ///
        /// * TargetRegions
        ///
        /// * Description: (Required) A comma separated list of Amazon Web Services Regions you want to deploy the configuration to.
        ///
        ///
        ///
        ///
        ///
        /// DevOps Guru (Type: Amazon Web ServicesQuickSetupType-DevOpsGuru)
        ///
        /// * AnalyseAllResources
        ///
        /// * Description: (Optional) A boolean value that determines whether DevOps Guru analyzes all CloudFormation stacks in the account. The default value is "false".
        ///
        ///
        ///
        ///
        /// * EnableSnsNotifications
        ///
        /// * Description: (Optional) A boolean value that determines whether DevOps Guru sends notifications when an insight is created. The default value is "true".
        ///
        ///
        ///
        ///
        /// * EnableSsmOpsItems
        ///
        /// * Description: (Optional) A boolean value that determines whether DevOps Guru creates an OpsCenter OpsItem when an insight is created. The default value is "true".
        ///
        ///
        ///
        ///
        /// * EnableDriftRemediation
        ///
        /// * Description: (Optional) A boolean value that determines whether a drift remediation schedule is used. The default value is "false".
        ///
        ///
        ///
        ///
        /// * RemediationSchedule
        ///
        /// * Description: (Optional) A rate expression that defines the schedule for drift remediation. The valid values are rate(30 days), rate(14 days), rate(1 days), and none. The default value is "none".
        ///
        ///
        ///
        ///
        /// * TargetAccounts
        ///
        /// * Description: (Optional) The ID of the Amazon Web Services account initiating the configuration deployment. You only need to provide a value for this parameter if you want to deploy the configuration locally. A value must be provided for either TargetAccounts or TargetOrganizationalUnits.
        ///
        ///
        ///
        ///
        /// * TargetOrganizationalUnits
        ///
        /// * Description: (Optional) A comma separated list of organizational units (OUs) you want to deploy the configuration to.
        ///
        ///
        ///
        ///
        /// * TargetRegions
        ///
        /// * Description: (Required) A comma separated list of Amazon Web Services Regions you want to deploy the configuration to.
        ///
        ///
        ///
        ///
        ///
        /// Conformance Packs (Type: Amazon Web ServicesQuickSetupType-CFGCPacks)
        ///
        /// * DelegatedAccountId
        ///
        /// * Description: (Optional) The ID of the delegated administrator account. This parameter is required for Organization deployments.
        ///
        ///
        ///
        ///
        /// * RemediationSchedule
        ///
        /// * Description: (Optional) A rate expression that defines the schedule for drift remediation. The valid values are rate(30 days), rate(14 days), rate(2 days), and none. The default value is "none".
        ///
        ///
        ///
        ///
        /// * CPackNames
        ///
        /// * Description: (Required) A comma separated list of Config conformance packs.
        ///
        ///
        ///
        ///
        /// * TargetAccounts
        ///
        /// * Description: (Optional) The ID of the Amazon Web Services account initiating the configuration deployment. You only need to provide a value for this parameter if you want to deploy the configuration locally. A value must be provided for either TargetAccounts or TargetOrganizationalUnits.
        ///
        ///
        ///
        ///
        /// * TargetOrganizationalUnits
        ///
        /// * Description: (Optional) The ID of the root of your Organization. This configuration type doesn't currently support choosing specific OUs. The configuration will be deployed to all the OUs in the Organization.
        ///
        ///
        ///
        ///
        /// * TargetRegions
        ///
        /// * Description: (Required) A comma separated list of Amazon Web Services Regions you want to deploy the configuration to.
        ///
        ///
        ///
        ///
        ///
        /// Config Recording (Type: Amazon Web ServicesQuickSetupType-CFGRecording)
        ///
        /// * RecordAllResources
        ///
        /// * Description: (Optional) A boolean value that determines whether all supported resources are recorded. The default value is "true".
        ///
        ///
        ///
        ///
        /// * ResourceTypesToRecord
        ///
        /// * Description: (Optional) A comma separated list of resource types you want to record.
        ///
        ///
        ///
        ///
        /// * RecordGlobalResourceTypes
        ///
        /// * Description: (Optional) A boolean value that determines whether global resources are recorded with all resource configurations. The default value is "false".
        ///
        ///
        ///
        ///
        /// * GlobalResourceTypesRegion
        ///
        /// * Description: (Optional) Determines the Amazon Web Services Region where global resources are recorded.
        ///
        ///
        ///
        ///
        /// * UseCustomBucket
        ///
        /// * Description: (Optional) A boolean value that determines whether a custom Amazon S3 bucket is used for delivery. The default value is "false".
        ///
        ///
        ///
        ///
        /// * DeliveryBucketName
        ///
        /// * Description: (Optional) The name of the Amazon S3 bucket you want Config to deliver configuration snapshots and configuration history files to.
        ///
        ///
        ///
        ///
        /// * DeliveryBucketPrefix
        ///
        /// * Description: (Optional) The key prefix you want to use in the custom Amazon S3 bucket.
        ///
        ///
        ///
        ///
        /// * NotificationOptions
        ///
        /// * Description: (Optional) Determines the notification configuration for the recorder. The valid values are NoStreaming, UseExistingTopic, and CreateTopic. The default value is NoStreaming.
        ///
        ///
        ///
        ///
        /// * CustomDeliveryTopicAccountId
        ///
        /// * Description: (Optional) The ID of the Amazon Web Services account where the Amazon SNS topic you want to use for notifications resides. You must specify a value for this parameter if you use the UseExistingTopic notification option.
        ///
        ///
        ///
        ///
        /// * CustomDeliveryTopicName
        ///
        /// * Description: (Optional) The name of the Amazon SNS topic you want to use for notifications. You must specify a value for this parameter if you use the UseExistingTopic notification option.
        ///
        ///
        ///
        ///
        /// * RemediationSchedule
        ///
        /// * Description: (Optional) A rate expression that defines the schedule for drift remediation. The valid values are rate(30 days), rate(7 days), rate(1 days), and none. The default value is "none".
        ///
        ///
        ///
        ///
        /// * TargetAccounts
        ///
        /// * Description: (Optional) The ID of the Amazon Web Services account initiating the configuration deployment. You only need to provide a value for this parameter if you want to deploy the configuration locally. A value must be provided for either TargetAccounts or TargetOrganizationalUnits.
        ///
        ///
        ///
        ///
        /// * TargetOrganizationalUnits
        ///
        /// * Description: (Optional) The ID of the root of your Organization. This configuration type doesn't currently support choosing specific OUs. The configuration will be deployed to all the OUs in the Organization.
        ///
        ///
        ///
        ///
        /// * TargetRegions
        ///
        /// * Description: (Required) A comma separated list of Amazon Web Services Regions you want to deploy the configuration to.
        ///
        ///
        ///
        ///
        ///
        /// Host Management (Type: Amazon Web ServicesQuickSetupType-SSMHostMgmt)
        ///
        /// * UpdateSSMAgent
        ///
        /// * Description: (Optional) A boolean value that determines whether the SSM Agent is updated on the target instances every 2 weeks. The default value is "true".
        ///
        ///
        ///
        ///
        /// * UpdateEc2LaunchAgent
        ///
        /// * Description: (Optional) A boolean value that determines whether the EC2 Launch agent is updated on the target instances every month. The default value is "false".
        ///
        ///
        ///
        ///
        /// * CollectInventory
        ///
        /// * Description: (Optional) A boolean value that determines whether the EC2 Launch agent is updated on the target instances every month. The default value is "true".
        ///
        ///
        ///
        ///
        /// * ScanInstances
        ///
        /// * Description: (Optional) A boolean value that determines whether the target instances are scanned daily for available patches. The default value is "true".
        ///
        ///
        ///
        ///
        /// * InstallCloudWatchAgent
        ///
        /// * Description: (Optional) A boolean value that determines whether the Amazon CloudWatch agent is installed on the target instances. The default value is "false".
        ///
        ///
        ///
        ///
        /// * UpdateCloudWatchAgent
        ///
        /// * Description: (Optional) A boolean value that determines whether the Amazon CloudWatch agent is updated on the target instances every month. The default value is "false".
        ///
        ///
        ///
        ///
        /// * IsPolicyAttachAllowed
        ///
        /// * Description: (Optional) A boolean value that determines whether Quick Setup attaches policies to instances profiles already associated with the target instances. The default value is "false".
        ///
        ///
        ///
        ///
        /// * TargetType
        ///
        /// * Description: (Optional) Determines how instances are targeted for local account deployments. Don't specify a value for this parameter if you're deploying to OUs. The valid values are *, InstanceIds, ResourceGroups, and Tags. Use * to target all instances in the account.
        ///
        ///
        ///
        ///
        /// * TargetInstances
        ///
        /// * Description: (Optional) A comma separated list of instance IDs. You must provide a value for this parameter if you specify InstanceIds for the TargetType parameter.
        ///
        ///
        ///
        ///
        /// * TargetTagKey
        ///
        /// * Description: (Optional) The tag key assigned to the instances you want to target. You must provide a value for this parameter if you specify Tags for the TargetType parameter.
        ///
        ///
        ///
        ///
        /// * TargetTagValue
        ///
        /// * Description: (Optional) The value of the tag key assigned to the instances you want to target. You must provide a value for this parameter if you specify Tags for the TargetType parameter.
        ///
        ///
        ///
        ///
        /// * ResourceGroupName
        ///
        /// * Description: (Optional) The name of the resource group associated with the instances you want to target. You must provide a value for this parameter if you specify ResourceGroups for the TargetType parameter.
        ///
        ///
        ///
        ///
        /// * TargetAccounts
        ///
        /// * Description: (Optional) The ID of the Amazon Web Services account initiating the configuration deployment. You only need to provide a value for this parameter if you want to deploy the configuration locally. A value must be provided for either TargetAccounts or TargetOrganizationalUnits.
        ///
        ///
        ///
        ///
        /// * TargetOrganizationalUnits
        ///
        /// * Description: (Optional) A comma separated list of organizational units (OUs) you want to deploy the configuration to.
        ///
        ///
        ///
        ///
        /// * TargetRegions
        ///
        /// * Description: (Required) A comma separated list of Amazon Web Services Regions you want to deploy the configuration to.
        ///
        ///
        ///
        ///
        ///
        /// Distributor (Type: Amazon Web ServicesQuickSetupType-Distributor)
        ///
        /// * PackagesToInstall
        ///
        /// * Description: (Required) A comma separated list of packages you want to install on the target instances. The valid values are AWSEFSTools, AWSCWAgent, and AWSEC2LaunchAgent.
        ///
        ///
        ///
        ///
        /// * RemediationSchedule
        ///
        /// * Description: (Optional) A rate expression that defines the schedule for drift remediation. The valid values are rate(30 days), rate(14 days), rate(2 days), and none. The default value is "rate(30 days)".
        ///
        ///
        ///
        ///
        /// * IsPolicyAttachAllowed
        ///
        /// * Description: (Optional) A boolean value that determines whether Quick Setup attaches policies to instances profiles already associated with the target instances. The default value is "false".
        ///
        ///
        ///
        ///
        /// * TargetType
        ///
        /// * Description: (Optional) Determines how instances are targeted for local account deployments. Don't specify a value for this parameter if you're deploying to OUs. The valid values are *, InstanceIds, ResourceGroups, and Tags. Use * to target all instances in the account.
        ///
        ///
        ///
        ///
        /// * TargetInstances
        ///
        /// * Description: (Optional) A comma separated list of instance IDs. You must provide a value for this parameter if you specify InstanceIds for the TargetType parameter.
        ///
        ///
        ///
        ///
        /// * TargetTagKey
        ///
        /// * Description: (Required) The tag key assigned to the instances you want to target. You must provide a value for this parameter if you specify Tags for the TargetType parameter.
        ///
        ///
        ///
        ///
        /// * TargetTagValue
        ///
        /// * Description: (Required) The value of the tag key assigned to the instances you want to target. You must provide a value for this parameter if you specify Tags for the TargetType parameter.
        ///
        ///
        ///
        ///
        /// * ResourceGroupName
        ///
        /// * Description: (Required) The name of the resource group associated with the instances you want to target. You must provide a value for this parameter if you specify ResourceGroups for the TargetType parameter.
        ///
        ///
        ///
        ///
        /// * TargetAccounts
        ///
        /// * Description: (Optional) The ID of the Amazon Web Services account initiating the configuration deployment. You only need to provide a value for this parameter if you want to deploy the configuration locally. A value must be provided for either TargetAccounts or TargetOrganizationalUnits.
        ///
        ///
        ///
        ///
        /// * TargetOrganizationalUnits
        ///
        /// * Description: (Optional) A comma separated list of organizational units (OUs) you want to deploy the configuration to.
        ///
        ///
        ///
        ///
        /// * TargetRegions
        ///
        /// * Description: (Required) A comma separated list of Amazon Web Services Regions you want to deploy the configuration to.
        ///
        ///
        ///
        ///
        ///
        /// Patch Policy (Type: Amazon Web ServicesQuickSetupType-PatchPolicy)
        ///
        /// * PatchPolicyName
        ///
        /// * Description: (Required) A name for the patch policy. The value you provide is applied to target Amazon EC2 instances as a tag.
        ///
        ///
        ///
        ///
        /// * SelectedPatchBaselines
        ///
        /// * Description: (Required) An array of JSON objects containing the information for the patch baselines to include in your patch policy.
        ///
        ///
        ///
        ///
        /// * PatchBaselineUseDefault
        ///
        /// * Description: (Optional) A boolean value that determines whether the selected patch baselines are all Amazon Web Services provided.
        ///
        ///
        ///
        ///
        /// * ConfigurationOptionsPatchOperation
        ///
        /// * Description: (Optional) Determines whether target instances scan for available patches, or scan and install available patches. The valid values are Scan and ScanAndInstall. The default value for the parameter is Scan.
        ///
        ///
        ///
        ///
        /// * ConfigurationOptionsScanValue
        ///
        /// * Description: (Optional) A cron expression that is used as the schedule for when instances scan for available patches.
        ///
        ///
        ///
        ///
        /// * ConfigurationOptionsInstallValue
        ///
        /// * Description: (Optional) A cron expression that is used as the schedule for when instances install available patches.
        ///
        ///
        ///
        ///
        /// * ConfigurationOptionsScanNextInterval
        ///
        /// * Description: (Optional) A boolean value that determines whether instances should scan for available patches at the next cron interval. The default value is "false".
        ///
        ///
        ///
        ///
        /// * ConfigurationOptionsInstallNextInterval
        ///
        /// * Description: (Optional) A boolean value that determines whether instances should scan for available patches at the next cron interval. The default value is "false".
        ///
        ///
        ///
        ///
        /// * RebootOption
        ///
        /// * Description: (Optional) A boolean value that determines whether instances are rebooted after patches are installed. The default value is "false".
        ///
        ///
        ///
        ///
        /// * IsPolicyAttachAllowed
        ///
        /// * Description: (Optional) A boolean value that determines whether Quick Setup attaches policies to instances profiles already associated with the target instances. The default value is "false".
        ///
        ///
        ///
        ///
        /// * OutputLogEnableS3
        ///
        /// * Description: (Optional) A boolean value that determines whether command output logs are sent to Amazon S3.
        ///
        ///
        ///
        ///
        /// * OutputS3Location
        ///
        /// * Description: (Optional) A JSON string containing information about the Amazon S3 bucket where you want to store the output details of the request.
        ///
        /// * OutputS3BucketRegion
        ///
        /// * Description: (Optional) The Amazon Web Services Region where the Amazon S3 bucket you want Config to deliver command output to is located.
        ///
        ///
        ///
        ///
        /// * OutputS3BucketName
        ///
        /// * Description: (Optional) The name of the Amazon S3 bucket you want Config to deliver command output to.
        ///
        ///
        ///
        ///
        /// * OutputS3KeyPrefix
        ///
        /// * Description: (Optional) The key prefix you want to use in the custom Amazon S3 bucket.
        ///
        ///
        ///
        ///
        ///
        ///
        ///
        ///
        ///
        ///
        /// * TargetType
        ///
        /// * Description: (Optional) Determines how instances are targeted for local account deployments. Don't specify a value for this parameter if you're deploying to OUs. The valid values are *, InstanceIds, ResourceGroups, and Tags. Use * to target all instances in the account.
        ///
        ///
        ///
        ///
        /// * TargetInstances
        ///
        /// * Description: (Optional) A comma separated list of instance IDs. You must provide a value for this parameter if you specify InstanceIds for the TargetType parameter.
        ///
        ///
        ///
        ///
        /// * TargetTagKey
        ///
        /// * Description: (Required) The tag key assigned to the instances you want to target. You must provide a value for this parameter if you specify Tags for the TargetType parameter.
        ///
        ///
        ///
        ///
        /// * TargetTagValue
        ///
        /// * Description: (Required) The value of the tag key assigned to the instances you want to target. You must provide a value for this parameter if you specify Tags for the TargetType parameter.
        ///
        ///
        ///
        ///
        /// * ResourceGroupName
        ///
        /// * Description: (Required) The name of the resource group associated with the instances you want to target. You must provide a value for this parameter if you specify ResourceGroups for the TargetType parameter.
        ///
        ///
        ///
        ///
        /// * TargetAccounts
        ///
        /// * Description: (Optional) The ID of the Amazon Web Services account initiating the configuration deployment. You only need to provide a value for this parameter if you want to deploy the configuration locally. A value must be provided for either TargetAccounts or TargetOrganizationalUnits.
        ///
        ///
        ///
        ///
        /// * TargetOrganizationalUnits
        ///
        /// * Description: (Optional) A comma separated list of organizational units (OUs) you want to deploy the configuration to.
        ///
        ///
        ///
        ///
        /// * TargetRegions
        ///
        /// * Description: (Required) A comma separated list of Amazon Web Services Regions you want to deploy the configuration to.
        /// This member is required.
        public var parameters: [Swift.String: Swift.String]?
        /// The type of the Quick Setup configuration.
        /// This member is required.
        public var type: Swift.String?
        /// The version of the Quick Setup type to use.
        public var typeVersion: Swift.String?

        public init(
            localDeploymentAdministrationRoleArn: Swift.String? = nil,
            localDeploymentExecutionRoleName: Swift.String? = nil,
            parameters: [Swift.String: Swift.String]? = nil,
            type: Swift.String? = nil,
            typeVersion: Swift.String? = nil
        )
        {
            self.localDeploymentAdministrationRoleArn = localDeploymentAdministrationRoleArn
            self.localDeploymentExecutionRoleName = localDeploymentExecutionRoleName
            self.parameters = parameters
            self.type = type
            self.typeVersion = typeVersion
        }
    }

}

extension SSMQuickSetupClientTypes {
    /// A summarized definition of a Quick Setup configuration definition.
    public struct ConfigurationDefinitionSummary {
        /// The common parameters and values for the configuration definition.
        public var firstClassParameters: [Swift.String: Swift.String]?
        /// The ID of the configuration definition.
        public var id: Swift.String?
        /// The type of the Quick Setup configuration used by the configuration definition.
        public var type: Swift.String?
        /// The version of the Quick Setup type used by the configuration definition.
        public var typeVersion: Swift.String?

        public init(
            firstClassParameters: [Swift.String: Swift.String]? = nil,
            id: Swift.String? = nil,
            type: Swift.String? = nil,
            typeVersion: Swift.String? = nil
        )
        {
            self.firstClassParameters = firstClassParameters
            self.id = id
            self.type = type
            self.typeVersion = typeVersion
        }
    }

}

extension SSMQuickSetupClientTypes {

    public enum Status: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case deleteFailed
        case deleting
        case deploying
        case failed
        case initializing
        case `none`
        case stopped
        case stopping
        case stopFailed
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [Status] {
            return [
                .deleteFailed,
                .deleting,
                .deploying,
                .failed,
                .initializing,
                .none,
                .stopped,
                .stopping,
                .stopFailed,
                .succeeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .deleteFailed: return "DELETE_FAILED"
            case .deleting: return "DELETING"
            case .deploying: return "DEPLOYING"
            case .failed: return "FAILED"
            case .initializing: return "INITIALIZING"
            case .none: return "NONE"
            case .stopped: return "STOPPED"
            case .stopping: return "STOPPING"
            case .stopFailed: return "STOP_FAILED"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SSMQuickSetupClientTypes {

    public enum StatusType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case asyncExecutions
        case deployment
        case sdkUnknown(Swift.String)

        public static var allCases: [StatusType] {
            return [
                .asyncExecutions,
                .deployment
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .asyncExecutions: return "AsyncExecutions"
            case .deployment: return "Deployment"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SSMQuickSetupClientTypes {
    /// A summarized description of the status.
    public struct StatusSummary {
        /// The datetime stamp when the status was last updated.
        /// This member is required.
        public var lastUpdatedAt: Foundation.Date?
        /// The current status.
        public var status: SSMQuickSetupClientTypes.Status?
        /// Details about the status.
        public var statusDetails: [Swift.String: Swift.String]?
        /// When applicable, returns an informational message relevant to the current status and status type of the status summary object. We don't recommend implementing parsing logic around this value since the messages returned can vary in format.
        public var statusMessage: Swift.String?
        /// The type of a status summary.
        /// This member is required.
        public var statusType: SSMQuickSetupClientTypes.StatusType?

        public init(
            lastUpdatedAt: Foundation.Date? = nil,
            status: SSMQuickSetupClientTypes.Status? = nil,
            statusDetails: [Swift.String: Swift.String]? = nil,
            statusMessage: Swift.String? = nil,
            statusType: SSMQuickSetupClientTypes.StatusType? = nil
        )
        {
            self.lastUpdatedAt = lastUpdatedAt
            self.status = status
            self.statusDetails = statusDetails
            self.statusMessage = statusMessage
            self.statusType = statusType
        }
    }

}

extension SSMQuickSetupClientTypes {
    /// A summary of a Quick Setup configuration manager.
    public struct ConfigurationManagerSummary {
        /// A summary of the Quick Setup configuration definition.
        public var configurationDefinitionSummaries: [SSMQuickSetupClientTypes.ConfigurationDefinitionSummary]?
        /// The description of the configuration.
        public var description: Swift.String?
        /// The ARN of the Quick Setup configuration.
        /// This member is required.
        public var managerArn: Swift.String?
        /// The name of the configuration
        public var name: Swift.String?
        /// Summaries of the state of the configuration manager. These summaries include an aggregate of the statuses from the configuration definition associated with the configuration manager. This includes deployment statuses, association statuses, drift statuses, health checks, and more.
        public var statusSummaries: [SSMQuickSetupClientTypes.StatusSummary]?

        public init(
            configurationDefinitionSummaries: [SSMQuickSetupClientTypes.ConfigurationDefinitionSummary]? = nil,
            description: Swift.String? = nil,
            managerArn: Swift.String? = nil,
            name: Swift.String? = nil,
            statusSummaries: [SSMQuickSetupClientTypes.StatusSummary]? = nil
        )
        {
            self.configurationDefinitionSummaries = configurationDefinitionSummaries
            self.description = description
            self.managerArn = managerArn
            self.name = name
            self.statusSummaries = statusSummaries
        }
    }

}

/// Another request is being processed. Wait a few minutes and try again.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// An error occurred on the server side.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { true }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request or operation exceeds the maximum allowed request rate per Amazon Web Services account and Amazon Web Services Region.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { true }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request is invalid. Verify the values provided for the request parameters are accurate.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CreateConfigurationManagerInput {
    /// The definition of the Quick Setup configuration that the configuration manager deploys.
    /// This member is required.
    public var configurationDefinitions: [SSMQuickSetupClientTypes.ConfigurationDefinitionInput]?
    /// A description of the configuration manager.
    public var description: Swift.String?
    /// A name for the configuration manager.
    public var name: Swift.String?
    /// Key-value pairs of metadata to assign to the configuration manager.
    public var tags: [Swift.String: Swift.String]?

    public init(
        configurationDefinitions: [SSMQuickSetupClientTypes.ConfigurationDefinitionInput]? = nil,
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.configurationDefinitions = configurationDefinitions
        self.description = description
        self.name = name
        self.tags = tags
    }
}

extension CreateConfigurationManagerInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateConfigurationManagerInput(configurationDefinitions: \(Swift.String(describing: configurationDefinitions)), description: \(Swift.String(describing: description)), name: \(Swift.String(describing: name)), tags: \"CONTENT_REDACTED\")"}
}

public struct CreateConfigurationManagerOutput {
    /// The ARN for the newly created configuration manager.
    /// This member is required.
    public var managerArn: Swift.String?

    public init(
        managerArn: Swift.String? = nil
    )
    {
        self.managerArn = managerArn
    }
}

/// The resource couldn't be found. Check the ID or name and try again.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteConfigurationManagerInput {
    /// The ID of the configuration manager.
    /// This member is required.
    public var managerArn: Swift.String?

    public init(
        managerArn: Swift.String? = nil
    )
    {
        self.managerArn = managerArn
    }
}

extension SSMQuickSetupClientTypes {
    /// A key-value pair to filter results.
    public struct Filter {
        /// The key for the filter.
        /// This member is required.
        public var key: Swift.String?
        /// The values for the filter keys.
        /// This member is required.
        public var values: [Swift.String]?

        public init(
            key: Swift.String? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.key = key
            self.values = values
        }
    }

}

public struct GetConfigurationManagerInput {
    /// The ARN of the configuration manager.
    /// This member is required.
    public var managerArn: Swift.String?

    public init(
        managerArn: Swift.String? = nil
    )
    {
        self.managerArn = managerArn
    }
}

public struct GetConfigurationManagerOutput {
    /// The configuration definitions association with the configuration manager.
    public var configurationDefinitions: [SSMQuickSetupClientTypes.ConfigurationDefinition]?
    /// The datetime stamp when the configuration manager was created.
    public var createdAt: Foundation.Date?
    /// The description of the configuration manager.
    public var description: Swift.String?
    /// The datetime stamp when the configuration manager was last updated.
    public var lastModifiedAt: Foundation.Date?
    /// The ARN of the configuration manager.
    /// This member is required.
    public var managerArn: Swift.String?
    /// The name of the configuration manager.
    public var name: Swift.String?
    /// A summary of the state of the configuration manager. This includes deployment statuses, association statuses, drift statuses, health checks, and more.
    public var statusSummaries: [SSMQuickSetupClientTypes.StatusSummary]?
    /// Key-value pairs of metadata to assign to the configuration manager.
    public var tags: [Swift.String: Swift.String]?

    public init(
        configurationDefinitions: [SSMQuickSetupClientTypes.ConfigurationDefinition]? = nil,
        createdAt: Foundation.Date? = nil,
        description: Swift.String? = nil,
        lastModifiedAt: Foundation.Date? = nil,
        managerArn: Swift.String? = nil,
        name: Swift.String? = nil,
        statusSummaries: [SSMQuickSetupClientTypes.StatusSummary]? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.configurationDefinitions = configurationDefinitions
        self.createdAt = createdAt
        self.description = description
        self.lastModifiedAt = lastModifiedAt
        self.managerArn = managerArn
        self.name = name
        self.statusSummaries = statusSummaries
        self.tags = tags
    }
}

extension GetConfigurationManagerOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetConfigurationManagerOutput(configurationDefinitions: \(Swift.String(describing: configurationDefinitions)), createdAt: \(Swift.String(describing: createdAt)), description: \(Swift.String(describing: description)), lastModifiedAt: \(Swift.String(describing: lastModifiedAt)), managerArn: \(Swift.String(describing: managerArn)), name: \(Swift.String(describing: name)), statusSummaries: \(Swift.String(describing: statusSummaries)), tags: \"CONTENT_REDACTED\")"}
}

extension SSMQuickSetupClientTypes {
    /// Settings configured for Quick Setup.
    public struct ServiceSettings {
        /// The IAM role used to enable Explorer.
        public var explorerEnablingRoleArn: Swift.String?

        public init(
            explorerEnablingRoleArn: Swift.String? = nil
        )
        {
            self.explorerEnablingRoleArn = explorerEnablingRoleArn
        }
    }

}

public struct GetServiceSettingsOutput {
    /// Returns details about the settings for Quick Setup in the requesting Amazon Web Services account and Amazon Web Services Region.
    public var serviceSettings: SSMQuickSetupClientTypes.ServiceSettings?

    public init(
        serviceSettings: SSMQuickSetupClientTypes.ServiceSettings? = nil
    )
    {
        self.serviceSettings = serviceSettings
    }
}

public struct ListConfigurationManagersInput {
    /// Filters the results returned by the request.
    public var filters: [SSMQuickSetupClientTypes.Filter]?
    /// Specifies the maximum number of configuration managers that are returned by the request.
    public var maxItems: Swift.Int?
    /// The token to use when requesting a specific set of items from a list.
    public var startingToken: Swift.String?

    public init(
        filters: [SSMQuickSetupClientTypes.Filter]? = nil,
        maxItems: Swift.Int? = nil,
        startingToken: Swift.String? = nil
    )
    {
        self.filters = filters
        self.maxItems = maxItems
        self.startingToken = startingToken
    }
}

public struct ListConfigurationManagersOutput {
    /// The configuration managers returned by the request.
    public var configurationManagersList: [SSMQuickSetupClientTypes.ConfigurationManagerSummary]?
    /// The token to use when requesting the next set of configuration managers. If there are no additional operations to return, the string is empty.
    public var nextToken: Swift.String?

    public init(
        configurationManagersList: [SSMQuickSetupClientTypes.ConfigurationManagerSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.configurationManagersList = configurationManagersList
        self.nextToken = nextToken
    }
}

extension SSMQuickSetupClientTypes {
    /// Information about the Quick Setup type.
    public struct QuickSetupTypeOutput {
        /// The latest version number of the configuration.
        public var latestVersion: Swift.String?
        /// The type of the Quick Setup configuration.
        public var type: Swift.String?

        public init(
            latestVersion: Swift.String? = nil,
            type: Swift.String? = nil
        )
        {
            self.latestVersion = latestVersion
            self.type = type
        }
    }

}

public struct ListQuickSetupTypesOutput {
    /// An array of Quick Setup types.
    public var quickSetupTypeList: [SSMQuickSetupClientTypes.QuickSetupTypeOutput]?

    public init(
        quickSetupTypeList: [SSMQuickSetupClientTypes.QuickSetupTypeOutput]? = nil
    )
    {
        self.quickSetupTypeList = quickSetupTypeList
    }
}

public struct ListTagsForResourceInput {
    /// The ARN of the resource the tag is assigned to.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

extension SSMQuickSetupClientTypes {
    /// Key-value pairs of metadata.
    public struct TagEntry {
        /// The key for the tag.
        public var key: Swift.String?
        /// The value for the tag.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension SSMQuickSetupClientTypes.TagEntry: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

public struct ListTagsForResourceOutput {
    /// Key-value pairs of metadata assigned to the resource.
    public var tags: [SSMQuickSetupClientTypes.TagEntry]?

    public init(
        tags: [SSMQuickSetupClientTypes.TagEntry]? = nil
    )
    {
        self.tags = tags
    }
}

extension ListTagsForResourceOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTagsForResourceOutput(tags: \"CONTENT_REDACTED\")"}
}

public struct TagResourceInput {
    /// The ARN of the resource to tag.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// Key-value pairs of metadata to assign to the resource.
    /// This member is required.
    public var tags: [Swift.String: Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

extension TagResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagResourceInput(resourceArn: \(Swift.String(describing: resourceArn)), tags: \"CONTENT_REDACTED\")"}
}

public struct UntagResourceInput {
    /// The ARN of the resource to remove tags from.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The keys of the tags to remove from the resource.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

public struct UpdateConfigurationDefinitionInput {
    /// The ID of the configuration definition you want to update.
    /// This member is required.
    public var id: Swift.String?
    /// The ARN of the IAM role used to administrate local configuration deployments.
    public var localDeploymentAdministrationRoleArn: Swift.String?
    /// The name of the IAM role used to deploy local configurations.
    public var localDeploymentExecutionRoleName: Swift.String?
    /// The ARN of the configuration manager associated with the definition to update.
    /// This member is required.
    public var managerArn: Swift.String?
    /// The parameters for the configuration definition type.
    public var parameters: [Swift.String: Swift.String]?
    /// The version of the Quick Setup type to use.
    public var typeVersion: Swift.String?

    public init(
        id: Swift.String? = nil,
        localDeploymentAdministrationRoleArn: Swift.String? = nil,
        localDeploymentExecutionRoleName: Swift.String? = nil,
        managerArn: Swift.String? = nil,
        parameters: [Swift.String: Swift.String]? = nil,
        typeVersion: Swift.String? = nil
    )
    {
        self.id = id
        self.localDeploymentAdministrationRoleArn = localDeploymentAdministrationRoleArn
        self.localDeploymentExecutionRoleName = localDeploymentExecutionRoleName
        self.managerArn = managerArn
        self.parameters = parameters
        self.typeVersion = typeVersion
    }
}

public struct UpdateConfigurationManagerInput {
    /// A description of the configuration manager.
    public var description: Swift.String?
    /// The ARN of the configuration manager.
    /// This member is required.
    public var managerArn: Swift.String?
    /// A name for the configuration manager.
    public var name: Swift.String?

    public init(
        description: Swift.String? = nil,
        managerArn: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.description = description
        self.managerArn = managerArn
        self.name = name
    }
}

public struct UpdateServiceSettingsInput {
    /// The IAM role used to enable Explorer.
    public var explorerEnablingRoleArn: Swift.String?

    public init(
        explorerEnablingRoleArn: Swift.String? = nil
    )
    {
        self.explorerEnablingRoleArn = explorerEnablingRoleArn
    }
}

extension CreateConfigurationManagerInput {

    static func urlPathProvider(_ value: CreateConfigurationManagerInput) -> Swift.String? {
        return "/configurationManager"
    }
}

extension DeleteConfigurationManagerInput {

    static func urlPathProvider(_ value: DeleteConfigurationManagerInput) -> Swift.String? {
        guard let managerArn = value.managerArn else {
            return nil
        }
        return "/configurationManager/\(managerArn.urlPercentEncoding())"
    }
}

extension GetConfigurationManagerInput {

    static func urlPathProvider(_ value: GetConfigurationManagerInput) -> Swift.String? {
        guard let managerArn = value.managerArn else {
            return nil
        }
        return "/configurationManager/\(managerArn.urlPercentEncoding())"
    }
}

extension GetServiceSettingsInput {

    static func urlPathProvider(_ value: GetServiceSettingsInput) -> Swift.String? {
        return "/serviceSettings"
    }
}

extension ListConfigurationManagersInput {

    static func urlPathProvider(_ value: ListConfigurationManagersInput) -> Swift.String? {
        return "/listConfigurationManagers"
    }
}

extension ListQuickSetupTypesInput {

    static func urlPathProvider(_ value: ListQuickSetupTypesInput) -> Swift.String? {
        return "/listQuickSetupTypes"
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func queryItemProvider(_ value: UntagResourceInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let tagKeys = value.tagKeys else {
            let message = "Creating a URL Query Item failed. tagKeys is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        tagKeys.forEach { queryItemValue in
            let queryItem = Smithy.URIQueryItem(name: "tagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
            items.append(queryItem)
        }
        return items
    }
}

extension UpdateConfigurationDefinitionInput {

    static func urlPathProvider(_ value: UpdateConfigurationDefinitionInput) -> Swift.String? {
        guard let managerArn = value.managerArn else {
            return nil
        }
        guard let id = value.id else {
            return nil
        }
        return "/configurationDefinition/\(managerArn.urlPercentEncoding())/\(id.urlPercentEncoding())"
    }
}

extension UpdateConfigurationManagerInput {

    static func urlPathProvider(_ value: UpdateConfigurationManagerInput) -> Swift.String? {
        guard let managerArn = value.managerArn else {
            return nil
        }
        return "/configurationManager/\(managerArn.urlPercentEncoding())"
    }
}

extension UpdateServiceSettingsInput {

    static func urlPathProvider(_ value: UpdateServiceSettingsInput) -> Swift.String? {
        return "/serviceSettings"
    }
}

extension CreateConfigurationManagerInput {

    static func write(value: CreateConfigurationManagerInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConfigurationDefinitions"].writeList(value.configurationDefinitions, memberWritingClosure: SSMQuickSetupClientTypes.ConfigurationDefinitionInput.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Description"].write(value.description)
        try writer["Name"].write(value.name)
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension ListConfigurationManagersInput {

    static func write(value: ListConfigurationManagersInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Filters"].writeList(value.filters, memberWritingClosure: SSMQuickSetupClientTypes.Filter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MaxItems"].write(value.maxItems)
        try writer["StartingToken"].write(value.startingToken)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension UpdateConfigurationDefinitionInput {

    static func write(value: UpdateConfigurationDefinitionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LocalDeploymentAdministrationRoleArn"].write(value.localDeploymentAdministrationRoleArn)
        try writer["LocalDeploymentExecutionRoleName"].write(value.localDeploymentExecutionRoleName)
        try writer["Parameters"].writeMap(value.parameters, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["TypeVersion"].write(value.typeVersion)
    }
}

extension UpdateConfigurationManagerInput {

    static func write(value: UpdateConfigurationManagerInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["Name"].write(value.name)
    }
}

extension UpdateServiceSettingsInput {

    static func write(value: UpdateServiceSettingsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ExplorerEnablingRoleArn"].write(value.explorerEnablingRoleArn)
    }
}

extension CreateConfigurationManagerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateConfigurationManagerOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateConfigurationManagerOutput()
        value.managerArn = try reader["ManagerArn"].readIfPresent() ?? ""
        return value
    }
}

extension DeleteConfigurationManagerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteConfigurationManagerOutput {
        return DeleteConfigurationManagerOutput()
    }
}

extension GetConfigurationManagerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetConfigurationManagerOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetConfigurationManagerOutput()
        value.configurationDefinitions = try reader["ConfigurationDefinitions"].readListIfPresent(memberReadingClosure: SSMQuickSetupClientTypes.ConfigurationDefinition.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.description = try reader["Description"].readIfPresent()
        value.lastModifiedAt = try reader["LastModifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.managerArn = try reader["ManagerArn"].readIfPresent() ?? ""
        value.name = try reader["Name"].readIfPresent()
        value.statusSummaries = try reader["StatusSummaries"].readListIfPresent(memberReadingClosure: SSMQuickSetupClientTypes.StatusSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension GetServiceSettingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetServiceSettingsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetServiceSettingsOutput()
        value.serviceSettings = try reader["ServiceSettings"].readIfPresent(with: SSMQuickSetupClientTypes.ServiceSettings.read(from:))
        return value
    }
}

extension ListConfigurationManagersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListConfigurationManagersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListConfigurationManagersOutput()
        value.configurationManagersList = try reader["ConfigurationManagersList"].readListIfPresent(memberReadingClosure: SSMQuickSetupClientTypes.ConfigurationManagerSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListQuickSetupTypesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListQuickSetupTypesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListQuickSetupTypesOutput()
        value.quickSetupTypeList = try reader["QuickSetupTypeList"].readListIfPresent(memberReadingClosure: SSMQuickSetupClientTypes.QuickSetupTypeOutput.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: SSMQuickSetupClientTypes.TagEntry.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateConfigurationDefinitionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateConfigurationDefinitionOutput {
        return UpdateConfigurationDefinitionOutput()
    }
}

extension UpdateConfigurationManagerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateConfigurationManagerOutput {
        return UpdateConfigurationManagerOutput()
    }
}

extension UpdateServiceSettingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateServiceSettingsOutput {
        return UpdateServiceSettingsOutput()
    }
}

enum CreateConfigurationManagerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteConfigurationManagerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetConfigurationManagerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetServiceSettingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListConfigurationManagersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListQuickSetupTypesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateConfigurationDefinitionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateConfigurationManagerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateServiceSettingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension InternalServerException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalServerException {
        let reader = baseError.errorBodyReader
        var value = InternalServerException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ThrottlingException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ThrottlingException {
        let reader = baseError.errorBodyReader
        var value = ThrottlingException()
        value.properties.message = try reader["Message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SSMQuickSetupClientTypes.StatusSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SSMQuickSetupClientTypes.StatusSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SSMQuickSetupClientTypes.StatusSummary()
        value.statusType = try reader["StatusType"].readIfPresent() ?? .sdkUnknown("")
        value.status = try reader["Status"].readIfPresent()
        value.statusMessage = try reader["StatusMessage"].readIfPresent()
        value.lastUpdatedAt = try reader["LastUpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.statusDetails = try reader["StatusDetails"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension SSMQuickSetupClientTypes.ConfigurationDefinition {

    static func read(from reader: SmithyJSON.Reader) throws -> SSMQuickSetupClientTypes.ConfigurationDefinition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SSMQuickSetupClientTypes.ConfigurationDefinition()
        value.type = try reader["Type"].readIfPresent() ?? ""
        value.parameters = try reader["Parameters"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false) ?? [:]
        value.typeVersion = try reader["TypeVersion"].readIfPresent()
        value.localDeploymentExecutionRoleName = try reader["LocalDeploymentExecutionRoleName"].readIfPresent()
        value.localDeploymentAdministrationRoleArn = try reader["LocalDeploymentAdministrationRoleArn"].readIfPresent()
        value.id = try reader["Id"].readIfPresent()
        return value
    }
}

extension SSMQuickSetupClientTypes.ServiceSettings {

    static func read(from reader: SmithyJSON.Reader) throws -> SSMQuickSetupClientTypes.ServiceSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SSMQuickSetupClientTypes.ServiceSettings()
        value.explorerEnablingRoleArn = try reader["ExplorerEnablingRoleArn"].readIfPresent()
        return value
    }
}

extension SSMQuickSetupClientTypes.ConfigurationManagerSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SSMQuickSetupClientTypes.ConfigurationManagerSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SSMQuickSetupClientTypes.ConfigurationManagerSummary()
        value.managerArn = try reader["ManagerArn"].readIfPresent() ?? ""
        value.description = try reader["Description"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.statusSummaries = try reader["StatusSummaries"].readListIfPresent(memberReadingClosure: SSMQuickSetupClientTypes.StatusSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.configurationDefinitionSummaries = try reader["ConfigurationDefinitionSummaries"].readListIfPresent(memberReadingClosure: SSMQuickSetupClientTypes.ConfigurationDefinitionSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SSMQuickSetupClientTypes.ConfigurationDefinitionSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SSMQuickSetupClientTypes.ConfigurationDefinitionSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SSMQuickSetupClientTypes.ConfigurationDefinitionSummary()
        value.id = try reader["Id"].readIfPresent()
        value.type = try reader["Type"].readIfPresent()
        value.typeVersion = try reader["TypeVersion"].readIfPresent()
        value.firstClassParameters = try reader["FirstClassParameters"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension SSMQuickSetupClientTypes.QuickSetupTypeOutput {

    static func read(from reader: SmithyJSON.Reader) throws -> SSMQuickSetupClientTypes.QuickSetupTypeOutput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SSMQuickSetupClientTypes.QuickSetupTypeOutput()
        value.type = try reader["Type"].readIfPresent()
        value.latestVersion = try reader["LatestVersion"].readIfPresent()
        return value
    }
}

extension SSMQuickSetupClientTypes.TagEntry {

    static func read(from reader: SmithyJSON.Reader) throws -> SSMQuickSetupClientTypes.TagEntry {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SSMQuickSetupClientTypes.TagEntry()
        value.key = try reader["Key"].readIfPresent()
        value.value = try reader["Value"].readIfPresent()
        return value
    }
}

extension SSMQuickSetupClientTypes.ConfigurationDefinitionInput {

    static func write(value: SSMQuickSetupClientTypes.ConfigurationDefinitionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LocalDeploymentAdministrationRoleArn"].write(value.localDeploymentAdministrationRoleArn)
        try writer["LocalDeploymentExecutionRoleName"].write(value.localDeploymentExecutionRoleName)
        try writer["Parameters"].writeMap(value.parameters, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["Type"].write(value.type)
        try writer["TypeVersion"].write(value.typeVersion)
    }
}

extension SSMQuickSetupClientTypes.Filter {

    static func write(value: SSMQuickSetupClientTypes.Filter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

public enum SSMQuickSetupClientTypes {}
