// Code generated by smithy-swift-codegen. DO NOT EDIT!

import class ClientRuntime.Waiter
import enum ClientRuntime.JMESUtils
import protocol ClientRuntime.ServiceError
import struct ClientRuntime.WaiterConfiguration
import struct ClientRuntime.WaiterOptions
import struct ClientRuntime.WaiterOutcome

extension MediaConnectClient {

    static func flowActiveWaiterConfig() throws -> ClientRuntime.WaiterConfiguration<DescribeFlowInput, DescribeFlowOutput> {
        let acceptors: [ClientRuntime.WaiterConfiguration<DescribeFlowInput, DescribeFlowOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeFlowInput, result: Swift.Result<DescribeFlowOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Flow.Status"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "ACTIVE"
                guard case .success(let output) = result else { return false }
                let flow = output.flow
                let status = flow?.status
                return ClientRuntime.JMESUtils.compare(status, ==, "ACTIVE")
            }),
            .init(state: .retry, matcher: { (input: DescribeFlowInput, result: Swift.Result<DescribeFlowOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Flow.Status"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "STARTING"
                guard case .success(let output) = result else { return false }
                let flow = output.flow
                let status = flow?.status
                return ClientRuntime.JMESUtils.compare(status, ==, "STARTING")
            }),
            .init(state: .retry, matcher: { (input: DescribeFlowInput, result: Swift.Result<DescribeFlowOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Flow.Status"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "UPDATING"
                guard case .success(let output) = result else { return false }
                let flow = output.flow
                let status = flow?.status
                return ClientRuntime.JMESUtils.compare(status, ==, "UPDATING")
            }),
            .init(state: .retry, matcher: { (input: DescribeFlowInput, result: Swift.Result<DescribeFlowOutput, Swift.Error>) -> Bool in
                guard case .failure(let error) = result else { return false }
                return (error as? ClientRuntime.ServiceError)?.typeName == "InternalServerErrorException"
            }),
            .init(state: .retry, matcher: { (input: DescribeFlowInput, result: Swift.Result<DescribeFlowOutput, Swift.Error>) -> Bool in
                guard case .failure(let error) = result else { return false }
                return (error as? ClientRuntime.ServiceError)?.typeName == "ServiceUnavailableException"
            }),
            .init(state: .failure, matcher: { (input: DescribeFlowInput, result: Swift.Result<DescribeFlowOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Flow.Status"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "ERROR"
                guard case .success(let output) = result else { return false }
                let flow = output.flow
                let status = flow?.status
                return ClientRuntime.JMESUtils.compare(status, ==, "ERROR")
            }),
        ]
        return try ClientRuntime.WaiterConfiguration<DescribeFlowInput, DescribeFlowOutput>(acceptors: acceptors, minDelay: 3.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the FlowActive event on the describeFlow operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeFlowInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilFlowActive(options: ClientRuntime.WaiterOptions, input: DescribeFlowInput) async throws -> ClientRuntime.WaiterOutcome<DescribeFlowOutput> {
        let waiter = ClientRuntime.Waiter(config: try Self.flowActiveWaiterConfig(), operation: self.describeFlow(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func flowDeletedWaiterConfig() throws -> ClientRuntime.WaiterConfiguration<DescribeFlowInput, DescribeFlowOutput> {
        let acceptors: [ClientRuntime.WaiterConfiguration<DescribeFlowInput, DescribeFlowOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeFlowInput, result: Swift.Result<DescribeFlowOutput, Swift.Error>) -> Bool in
                guard case .failure(let error) = result else { return false }
                return (error as? ClientRuntime.ServiceError)?.typeName == "NotFoundException"
            }),
            .init(state: .retry, matcher: { (input: DescribeFlowInput, result: Swift.Result<DescribeFlowOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Flow.Status"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "DELETING"
                guard case .success(let output) = result else { return false }
                let flow = output.flow
                let status = flow?.status
                return ClientRuntime.JMESUtils.compare(status, ==, "DELETING")
            }),
            .init(state: .retry, matcher: { (input: DescribeFlowInput, result: Swift.Result<DescribeFlowOutput, Swift.Error>) -> Bool in
                guard case .failure(let error) = result else { return false }
                return (error as? ClientRuntime.ServiceError)?.typeName == "InternalServerErrorException"
            }),
            .init(state: .retry, matcher: { (input: DescribeFlowInput, result: Swift.Result<DescribeFlowOutput, Swift.Error>) -> Bool in
                guard case .failure(let error) = result else { return false }
                return (error as? ClientRuntime.ServiceError)?.typeName == "ServiceUnavailableException"
            }),
            .init(state: .failure, matcher: { (input: DescribeFlowInput, result: Swift.Result<DescribeFlowOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Flow.Status"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "ERROR"
                guard case .success(let output) = result else { return false }
                let flow = output.flow
                let status = flow?.status
                return ClientRuntime.JMESUtils.compare(status, ==, "ERROR")
            }),
        ]
        return try ClientRuntime.WaiterConfiguration<DescribeFlowInput, DescribeFlowOutput>(acceptors: acceptors, minDelay: 3.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the FlowDeleted event on the describeFlow operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeFlowInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilFlowDeleted(options: ClientRuntime.WaiterOptions, input: DescribeFlowInput) async throws -> ClientRuntime.WaiterOutcome<DescribeFlowOutput> {
        let waiter = ClientRuntime.Waiter(config: try Self.flowDeletedWaiterConfig(), operation: self.describeFlow(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func flowStandbyWaiterConfig() throws -> ClientRuntime.WaiterConfiguration<DescribeFlowInput, DescribeFlowOutput> {
        let acceptors: [ClientRuntime.WaiterConfiguration<DescribeFlowInput, DescribeFlowOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeFlowInput, result: Swift.Result<DescribeFlowOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Flow.Status"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "STANDBY"
                guard case .success(let output) = result else { return false }
                let flow = output.flow
                let status = flow?.status
                return ClientRuntime.JMESUtils.compare(status, ==, "STANDBY")
            }),
            .init(state: .retry, matcher: { (input: DescribeFlowInput, result: Swift.Result<DescribeFlowOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Flow.Status"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "STOPPING"
                guard case .success(let output) = result else { return false }
                let flow = output.flow
                let status = flow?.status
                return ClientRuntime.JMESUtils.compare(status, ==, "STOPPING")
            }),
            .init(state: .retry, matcher: { (input: DescribeFlowInput, result: Swift.Result<DescribeFlowOutput, Swift.Error>) -> Bool in
                guard case .failure(let error) = result else { return false }
                return (error as? ClientRuntime.ServiceError)?.typeName == "InternalServerErrorException"
            }),
            .init(state: .retry, matcher: { (input: DescribeFlowInput, result: Swift.Result<DescribeFlowOutput, Swift.Error>) -> Bool in
                guard case .failure(let error) = result else { return false }
                return (error as? ClientRuntime.ServiceError)?.typeName == "ServiceUnavailableException"
            }),
            .init(state: .failure, matcher: { (input: DescribeFlowInput, result: Swift.Result<DescribeFlowOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Flow.Status"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "ERROR"
                guard case .success(let output) = result else { return false }
                let flow = output.flow
                let status = flow?.status
                return ClientRuntime.JMESUtils.compare(status, ==, "ERROR")
            }),
        ]
        return try ClientRuntime.WaiterConfiguration<DescribeFlowInput, DescribeFlowOutput>(acceptors: acceptors, minDelay: 3.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the FlowStandby event on the describeFlow operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeFlowInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilFlowStandby(options: ClientRuntime.WaiterOptions, input: DescribeFlowInput) async throws -> ClientRuntime.WaiterOutcome<DescribeFlowOutput> {
        let waiter = ClientRuntime.Waiter(config: try Self.flowStandbyWaiterConfig(), operation: self.describeFlow(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }
}
