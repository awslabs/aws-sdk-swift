//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
@_spi(SmithyReadWrite) import class SmithyFormURL.Writer
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyXML.Reader
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
@_spi(SmithyReadWrite) import func SmithyReadWrite.timestampReadingClosure
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSQueryError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox
@_spi(SmithyTimestamps) import struct SmithyTimestamps.TimestampFormatter

public struct DeleteAlarmsOutput {

    public init() { }
}

public struct DisableAlarmActionsOutput {

    public init() { }
}

public struct EnableAlarmActionsOutput {

    public init() { }
}

public struct PutCompositeAlarmOutput {

    public init() { }
}

public struct PutMetricAlarmOutput {

    public init() { }
}

public struct PutMetricDataOutput {

    public init() { }
}

public struct SetAlarmStateOutput {

    public init() { }
}

extension CloudWatchClientTypes {

    public enum ActionsSuppressedBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case alarm
        case extensionperiod
        case waitperiod
        case sdkUnknown(Swift.String)

        public static var allCases: [ActionsSuppressedBy] {
            return [
                .alarm,
                .extensionperiod,
                .waitperiod
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .alarm: return "Alarm"
            case .extensionperiod: return "ExtensionPeriod"
            case .waitperiod: return "WaitPeriod"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CloudWatchClientTypes {

    public enum AlarmType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case compositealarm
        case metricalarm
        case sdkUnknown(Swift.String)

        public static var allCases: [AlarmType] {
            return [
                .compositealarm,
                .metricalarm
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .compositealarm: return "CompositeAlarm"
            case .metricalarm: return "MetricAlarm"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CloudWatchClientTypes {

    public enum HistoryItemType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case action
        case configurationupdate
        case stateupdate
        case sdkUnknown(Swift.String)

        public static var allCases: [HistoryItemType] {
            return [
                .action,
                .configurationupdate,
                .stateupdate
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .action: return "Action"
            case .configurationupdate: return "ConfigurationUpdate"
            case .stateupdate: return "StateUpdate"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CloudWatchClientTypes {
    /// Represents the history of a specific alarm.
    public struct AlarmHistoryItem {
        /// The descriptive name for the alarm.
        public var alarmName: Swift.String?
        /// The type of alarm, either metric alarm or composite alarm.
        public var alarmType: CloudWatchClientTypes.AlarmType?
        /// Data about the alarm, in JSON format.
        public var historyData: Swift.String?
        /// The type of alarm history item.
        public var historyItemType: CloudWatchClientTypes.HistoryItemType?
        /// A summary of the alarm history, in text format.
        public var historySummary: Swift.String?
        /// The time stamp for the alarm history item.
        public var timestamp: Foundation.Date?

        public init(
            alarmName: Swift.String? = nil,
            alarmType: CloudWatchClientTypes.AlarmType? = nil,
            historyData: Swift.String? = nil,
            historyItemType: CloudWatchClientTypes.HistoryItemType? = nil,
            historySummary: Swift.String? = nil,
            timestamp: Foundation.Date? = nil
        )
        {
            self.alarmName = alarmName
            self.alarmType = alarmType
            self.historyData = historyData
            self.historyItemType = historyItemType
            self.historySummary = historySummary
            self.timestamp = timestamp
        }
    }

}

extension CloudWatchClientTypes {
    /// Specifies one range of days or times to exclude from use for training an anomaly detection model.
    public struct Range {
        /// The end time of the range to exclude. The format is yyyy-MM-dd'T'HH:mm:ss. For example, 2019-07-01T23:59:59.
        /// This member is required.
        public var endTime: Foundation.Date?
        /// The start time of the range to exclude. The format is yyyy-MM-dd'T'HH:mm:ss. For example, 2019-07-01T23:59:59.
        /// This member is required.
        public var startTime: Foundation.Date?

        public init(
            endTime: Foundation.Date? = nil,
            startTime: Foundation.Date? = nil
        )
        {
            self.endTime = endTime
            self.startTime = startTime
        }
    }

}

extension CloudWatchClientTypes {
    /// The configuration specifies details about how the anomaly detection model is to be trained, including time ranges to exclude from use for training the model and the time zone to use for the metric.
    public struct AnomalyDetectorConfiguration {
        /// An array of time ranges to exclude from use when the anomaly detection model is trained. Use this to make sure that events that could cause unusual values for the metric, such as deployments, aren't used when CloudWatch creates the model.
        public var excludedTimeRanges: [CloudWatchClientTypes.Range]?
        /// The time zone to use for the metric. This is useful to enable the model to automatically account for daylight savings time changes if the metric is sensitive to such time changes. To specify a time zone, use the name of the time zone as specified in the standard tz database. For more information, see [tz database](https://en.wikipedia.org/wiki/Tz_database).
        public var metricTimezone: Swift.String?

        public init(
            excludedTimeRanges: [CloudWatchClientTypes.Range]? = nil,
            metricTimezone: Swift.String? = nil
        )
        {
            self.excludedTimeRanges = excludedTimeRanges
            self.metricTimezone = metricTimezone
        }
    }

}

extension CloudWatchClientTypes {
    /// A dimension is a name/value pair that is part of the identity of a metric. Because dimensions are part of the unique identifier for a metric, whenever you add a unique name/value pair to one of your metrics, you are creating a new variation of that metric. For example, many Amazon EC2 metrics publish InstanceId as a dimension name, and the actual instance ID as the value for that dimension. You can assign up to 30 dimensions to a metric.
    public struct Dimension {
        /// The name of the dimension. Dimension names must contain only ASCII characters, must include at least one non-whitespace character, and cannot start with a colon (:). ASCII control characters are not supported as part of dimension names.
        /// This member is required.
        public var name: Swift.String?
        /// The value of the dimension. Dimension values must contain only ASCII characters and must include at least one non-whitespace character. ASCII control characters are not supported as part of dimension values.
        /// This member is required.
        public var value: Swift.String?

        public init(
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension CloudWatchClientTypes {
    /// This object includes parameters that you can use to provide information to CloudWatch to help it build more accurate anomaly detection models.
    public struct MetricCharacteristics {
        /// Set this parameter to true if values for this metric consistently include spikes that should not be considered to be anomalies. With this set to true, CloudWatch will expect to see spikes that occurred consistently during the model training period, and won't flag future similar spikes as anomalies.
        public var periodicSpikes: Swift.Bool?

        public init(
            periodicSpikes: Swift.Bool? = nil
        )
        {
            self.periodicSpikes = periodicSpikes
        }
    }

}

extension CloudWatchClientTypes {
    /// Represents a specific metric.
    public struct Metric {
        /// The dimensions for the metric.
        public var dimensions: [CloudWatchClientTypes.Dimension]?
        /// The name of the metric. This is a required field.
        public var metricName: Swift.String?
        /// The namespace of the metric.
        public var namespace: Swift.String?

        public init(
            dimensions: [CloudWatchClientTypes.Dimension]? = nil,
            metricName: Swift.String? = nil,
            namespace: Swift.String? = nil
        )
        {
            self.dimensions = dimensions
            self.metricName = metricName
            self.namespace = namespace
        }
    }

}

extension CloudWatchClientTypes {

    public enum StandardUnit: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bits
        case bitsSecond
        case bytes
        case bytesSecond
        case count
        case countSecond
        case gigabits
        case gigabitsSecond
        case gigabytes
        case gigabytesSecond
        case kilobits
        case kilobitsSecond
        case kilobytes
        case kilobytesSecond
        case megabits
        case megabitsSecond
        case megabytes
        case megabytesSecond
        case microseconds
        case milliseconds
        case `none`
        case percent
        case seconds
        case terabits
        case terabitsSecond
        case terabytes
        case terabytesSecond
        case sdkUnknown(Swift.String)

        public static var allCases: [StandardUnit] {
            return [
                .bits,
                .bitsSecond,
                .bytes,
                .bytesSecond,
                .count,
                .countSecond,
                .gigabits,
                .gigabitsSecond,
                .gigabytes,
                .gigabytesSecond,
                .kilobits,
                .kilobitsSecond,
                .kilobytes,
                .kilobytesSecond,
                .megabits,
                .megabitsSecond,
                .megabytes,
                .megabytesSecond,
                .microseconds,
                .milliseconds,
                .none,
                .percent,
                .seconds,
                .terabits,
                .terabitsSecond,
                .terabytes,
                .terabytesSecond
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bits: return "Bits"
            case .bitsSecond: return "Bits/Second"
            case .bytes: return "Bytes"
            case .bytesSecond: return "Bytes/Second"
            case .count: return "Count"
            case .countSecond: return "Count/Second"
            case .gigabits: return "Gigabits"
            case .gigabitsSecond: return "Gigabits/Second"
            case .gigabytes: return "Gigabytes"
            case .gigabytesSecond: return "Gigabytes/Second"
            case .kilobits: return "Kilobits"
            case .kilobitsSecond: return "Kilobits/Second"
            case .kilobytes: return "Kilobytes"
            case .kilobytesSecond: return "Kilobytes/Second"
            case .megabits: return "Megabits"
            case .megabitsSecond: return "Megabits/Second"
            case .megabytes: return "Megabytes"
            case .megabytesSecond: return "Megabytes/Second"
            case .microseconds: return "Microseconds"
            case .milliseconds: return "Milliseconds"
            case .none: return "None"
            case .percent: return "Percent"
            case .seconds: return "Seconds"
            case .terabits: return "Terabits"
            case .terabitsSecond: return "Terabits/Second"
            case .terabytes: return "Terabytes"
            case .terabytesSecond: return "Terabytes/Second"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CloudWatchClientTypes {
    /// This structure defines the metric to be returned, along with the statistics, period, and units.
    public struct MetricStat {
        /// The metric to return, including the metric name, namespace, and dimensions.
        /// This member is required.
        public var metric: CloudWatchClientTypes.Metric?
        /// The granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics stored by a PutMetricData call that includes a StorageResolution of 1 second. If the StartTime parameter specifies a time stamp that is greater than 3 hours ago, you must specify the period as follows or no data points in that time range is returned:
        ///
        /// * Start time between 3 hours and 15 days ago - Use a multiple of 60 seconds (1 minute).
        ///
        /// * Start time between 15 and 63 days ago - Use a multiple of 300 seconds (5 minutes).
        ///
        /// * Start time greater than 63 days ago - Use a multiple of 3600 seconds (1 hour).
        /// This member is required.
        public var period: Swift.Int?
        /// The statistic to return. It can include any CloudWatch statistic or extended statistic.
        /// This member is required.
        public var stat: Swift.String?
        /// When you are using a Put operation, this defines what unit you want to use when storing the metric. In a Get operation, if you omit Unit then all data that was collected with any unit is returned, along with the corresponding units that were specified when the data was reported to CloudWatch. If you specify a unit, the operation returns only data that was collected with that unit specified. If you specify a unit that does not match the data collected, the results of the operation are null. CloudWatch does not perform unit conversions.
        public var unit: CloudWatchClientTypes.StandardUnit?

        public init(
            metric: CloudWatchClientTypes.Metric? = nil,
            period: Swift.Int? = nil,
            stat: Swift.String? = nil,
            unit: CloudWatchClientTypes.StandardUnit? = nil
        )
        {
            self.metric = metric
            self.period = period
            self.stat = stat
            self.unit = unit
        }
    }

}

extension CloudWatchClientTypes {
    /// This structure is used in both GetMetricData and PutMetricAlarm. The supported use of this structure is different for those two operations. When used in GetMetricData, it indicates the metric data to return, and whether this call is just retrieving a batch set of data for one metric, or is performing a Metrics Insights query or a math expression. A single GetMetricData call can include up to 500 MetricDataQuery structures. When used in PutMetricAlarm, it enables you to create an alarm based on a metric math expression. Each MetricDataQuery in the array specifies either a metric to retrieve, or a math expression to be performed on retrieved metrics. A single PutMetricAlarm call can include up to 20 MetricDataQuery structures in the array. The 20 structures can include as many as 10 structures that contain a MetricStat parameter to retrieve a metric, and as many as 10 structures that contain the Expression parameter to perform a math expression. Of those Expression structures, one must have true as the value for ReturnData. The result of this expression is the value the alarm watches. Any expression used in a PutMetricAlarm operation must return a single time series. For more information, see [Metric Math Syntax and Functions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax) in the Amazon CloudWatch User Guide. Some of the parameters of this structure also have different uses whether you are using this structure in a GetMetricData operation or a PutMetricAlarm operation. These differences are explained in the following parameter list.
    public struct MetricDataQuery {
        /// The ID of the account where the metrics are located. If you are performing a GetMetricData operation in a monitoring account, use this to specify which account to retrieve this metric from. If you are performing a PutMetricAlarm operation, use this to specify which account contains the metric that the alarm is watching.
        public var accountId: Swift.String?
        /// This field can contain either a Metrics Insights query, or a metric math expression to be performed on the returned data. For more information about Metrics Insights queries, see [Metrics Insights query components and syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch-metrics-insights-querylanguage) in the Amazon CloudWatch User Guide. A math expression can use the Id of the other metrics or queries to refer to those metrics, and can also use the Id of other expressions to use the result of those expressions. For more information about metric math expressions, see [Metric Math Syntax and Functions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax) in the Amazon CloudWatch User Guide. Within each MetricDataQuery object, you must specify either Expression or MetricStat but not both.
        public var expression: Swift.String?
        /// A short name used to tie this object to the results in the response. This name must be unique within a single call to GetMetricData. If you are performing math expressions on this set of data, this name represents that data and can serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscore. The first character must be a lowercase letter.
        /// This member is required.
        public var id: Swift.String?
        /// A human-readable label for this metric or expression. This is especially useful if this is an expression, so that you know what the value represents. If the metric or expression is shown in a CloudWatch dashboard widget, the label is shown. If Label is omitted, CloudWatch generates a default. You can put dynamic expressions into a label, so that it is more descriptive. For more information, see [Using Dynamic Labels](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html).
        public var label: Swift.String?
        /// The metric to be returned, along with statistics, period, and units. Use this parameter only if this object is retrieving a metric and not performing a math expression on returned data. Within one MetricDataQuery object, you must specify either Expression or MetricStat but not both.
        public var metricStat: CloudWatchClientTypes.MetricStat?
        /// The granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics stored by a PutMetricData operation that includes a StorageResolution of 1 second.
        public var period: Swift.Int?
        /// When used in GetMetricData, this option indicates whether to return the timestamps and raw data values of this metric. If you are performing this call just to do math expressions and do not also need the raw data returned, you can specify false. If you omit this, the default of true is used. When used in PutMetricAlarm, specify true for the one expression result to use as the alarm. For all other metrics and expressions in the same PutMetricAlarm operation, specify ReturnData as False.
        public var returnData: Swift.Bool?

        public init(
            accountId: Swift.String? = nil,
            expression: Swift.String? = nil,
            id: Swift.String? = nil,
            label: Swift.String? = nil,
            metricStat: CloudWatchClientTypes.MetricStat? = nil,
            period: Swift.Int? = nil,
            returnData: Swift.Bool? = nil
        )
        {
            self.accountId = accountId
            self.expression = expression
            self.id = id
            self.label = label
            self.metricStat = metricStat
            self.period = period
            self.returnData = returnData
        }
    }

}

extension CloudWatchClientTypes {
    /// Indicates the CloudWatch math expression that provides the time series the anomaly detector uses as input. The designated math expression must return a single time series.
    public struct MetricMathAnomalyDetector {
        /// An array of metric data query structures that enables you to create an anomaly detector based on the result of a metric math expression. Each item in MetricDataQueries gets a metric or performs a math expression. One item in MetricDataQueries is the expression that provides the time series that the anomaly detector uses as input. Designate the expression by setting ReturnData to true for this object in the array. For all other expressions and metrics, set ReturnData to false. The designated expression must return a single time series.
        public var metricDataQueries: [CloudWatchClientTypes.MetricDataQuery]?

        public init(
            metricDataQueries: [CloudWatchClientTypes.MetricDataQuery]? = nil
        )
        {
            self.metricDataQueries = metricDataQueries
        }
    }

}

extension CloudWatchClientTypes {
    /// Designates the CloudWatch metric and statistic that provides the time series the anomaly detector uses as input. If you have enabled unified cross-account observability, and this account is a monitoring account, the metric can be in the same account or a source account.
    public struct SingleMetricAnomalyDetector {
        /// If the CloudWatch metric that provides the time series that the anomaly detector uses as input is in another account, specify that account ID here. If you omit this parameter, the current account is used.
        public var accountId: Swift.String?
        /// The metric dimensions to create the anomaly detection model for.
        public var dimensions: [CloudWatchClientTypes.Dimension]?
        /// The name of the metric to create the anomaly detection model for.
        public var metricName: Swift.String?
        /// The namespace of the metric to create the anomaly detection model for.
        public var namespace: Swift.String?
        /// The statistic to use for the metric and anomaly detection model.
        public var stat: Swift.String?

        public init(
            accountId: Swift.String? = nil,
            dimensions: [CloudWatchClientTypes.Dimension]? = nil,
            metricName: Swift.String? = nil,
            namespace: Swift.String? = nil,
            stat: Swift.String? = nil
        )
        {
            self.accountId = accountId
            self.dimensions = dimensions
            self.metricName = metricName
            self.namespace = namespace
            self.stat = stat
        }
    }

}

extension CloudWatchClientTypes {

    public enum AnomalyDetectorStateValue: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case pendingTraining
        case trained
        case trainedInsufficientData
        case sdkUnknown(Swift.String)

        public static var allCases: [AnomalyDetectorStateValue] {
            return [
                .pendingTraining,
                .trained,
                .trainedInsufficientData
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .pendingTraining: return "PENDING_TRAINING"
            case .trained: return "TRAINED"
            case .trainedInsufficientData: return "TRAINED_INSUFFICIENT_DATA"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CloudWatchClientTypes {
    /// An anomaly detection model associated with a particular CloudWatch metric, statistic, or metric math expression. You can use the model to display a band of expected, normal values when the metric is graphed. If you have enabled unified cross-account observability, and this account is a monitoring account, the metric can be in the same account or a source account.
    public struct AnomalyDetector {
        /// The configuration specifies details about how the anomaly detection model is to be trained, including time ranges to exclude from use for training the model, and the time zone to use for the metric.
        public var configuration: CloudWatchClientTypes.AnomalyDetectorConfiguration?
        /// The metric dimensions associated with the anomaly detection model.
        @available(*, deprecated, message: "Use SingleMetricAnomalyDetector.Dimensions property.")
        public var dimensions: [CloudWatchClientTypes.Dimension]?
        /// This object includes parameters that you can use to provide information about your metric to CloudWatch to help it build more accurate anomaly detection models. Currently, it includes the PeriodicSpikes parameter.
        public var metricCharacteristics: CloudWatchClientTypes.MetricCharacteristics?
        /// The CloudWatch metric math expression for this anomaly detector.
        public var metricMathAnomalyDetector: CloudWatchClientTypes.MetricMathAnomalyDetector?
        /// The name of the metric associated with the anomaly detection model.
        @available(*, deprecated, message: "Use SingleMetricAnomalyDetector.MetricName property.")
        public var metricName: Swift.String?
        /// The namespace of the metric associated with the anomaly detection model.
        @available(*, deprecated, message: "Use SingleMetricAnomalyDetector.Namespace property.")
        public var namespace: Swift.String?
        /// The CloudWatch metric and statistic for this anomaly detector.
        public var singleMetricAnomalyDetector: CloudWatchClientTypes.SingleMetricAnomalyDetector?
        /// The statistic associated with the anomaly detection model.
        @available(*, deprecated, message: "Use SingleMetricAnomalyDetector.Stat property.")
        public var stat: Swift.String?
        /// The current status of the anomaly detector's training.
        public var stateValue: CloudWatchClientTypes.AnomalyDetectorStateValue?

        public init(
            configuration: CloudWatchClientTypes.AnomalyDetectorConfiguration? = nil,
            dimensions: [CloudWatchClientTypes.Dimension]? = nil,
            metricCharacteristics: CloudWatchClientTypes.MetricCharacteristics? = nil,
            metricMathAnomalyDetector: CloudWatchClientTypes.MetricMathAnomalyDetector? = nil,
            metricName: Swift.String? = nil,
            namespace: Swift.String? = nil,
            singleMetricAnomalyDetector: CloudWatchClientTypes.SingleMetricAnomalyDetector? = nil,
            stat: Swift.String? = nil,
            stateValue: CloudWatchClientTypes.AnomalyDetectorStateValue? = nil
        )
        {
            self.configuration = configuration
            self.dimensions = dimensions
            self.metricCharacteristics = metricCharacteristics
            self.metricMathAnomalyDetector = metricMathAnomalyDetector
            self.metricName = metricName
            self.namespace = namespace
            self.singleMetricAnomalyDetector = singleMetricAnomalyDetector
            self.stat = stat
            self.stateValue = stateValue
        }
    }

}

extension CloudWatchClientTypes {

    public enum AnomalyDetectorType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case metricMath
        case singleMetric
        case sdkUnknown(Swift.String)

        public static var allCases: [AnomalyDetectorType] {
            return [
                .metricMath,
                .singleMetric
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .metricMath: return "METRIC_MATH"
            case .singleMetric: return "SINGLE_METRIC"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CloudWatchClientTypes {
    /// This array is empty if the API operation was successful for all the rules specified in the request. If the operation could not process one of the rules, the following data is returned for each of those rules.
    public struct PartialFailure {
        /// The type of error.
        public var exceptionType: Swift.String?
        /// The code of the error.
        public var failureCode: Swift.String?
        /// A description of the error.
        public var failureDescription: Swift.String?
        /// The specified rule that could not be deleted.
        public var failureResource: Swift.String?

        public init(
            exceptionType: Swift.String? = nil,
            failureCode: Swift.String? = nil,
            failureDescription: Swift.String? = nil,
            failureResource: Swift.String? = nil
        )
        {
            self.exceptionType = exceptionType
            self.failureCode = failureCode
            self.failureDescription = failureDescription
            self.failureResource = failureResource
        }
    }

}

extension CloudWatchClientTypes {

    public enum ComparisonOperator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case greaterthanorequaltothreshold
        case greaterthanthreshold
        case greaterthanupperthreshold
        case lessthanlowerorgreaterthanupperthreshold
        case lessthanlowerthreshold
        case lessthanorequaltothreshold
        case lessthanthreshold
        case sdkUnknown(Swift.String)

        public static var allCases: [ComparisonOperator] {
            return [
                .greaterthanorequaltothreshold,
                .greaterthanthreshold,
                .greaterthanupperthreshold,
                .lessthanlowerorgreaterthanupperthreshold,
                .lessthanlowerthreshold,
                .lessthanorequaltothreshold,
                .lessthanthreshold
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .greaterthanorequaltothreshold: return "GreaterThanOrEqualToThreshold"
            case .greaterthanthreshold: return "GreaterThanThreshold"
            case .greaterthanupperthreshold: return "GreaterThanUpperThreshold"
            case .lessthanlowerorgreaterthanupperthreshold: return "LessThanLowerOrGreaterThanUpperThreshold"
            case .lessthanlowerthreshold: return "LessThanLowerThreshold"
            case .lessthanorequaltothreshold: return "LessThanOrEqualToThreshold"
            case .lessthanthreshold: return "LessThanThreshold"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CloudWatchClientTypes {

    public enum StateValue: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case alarm
        case insufficientData
        case ok
        case sdkUnknown(Swift.String)

        public static var allCases: [StateValue] {
            return [
                .alarm,
                .insufficientData,
                .ok
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .alarm: return "ALARM"
            case .insufficientData: return "INSUFFICIENT_DATA"
            case .ok: return "OK"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CloudWatchClientTypes {
    /// The details about a composite alarm.
    public struct CompositeAlarm {
        /// Indicates whether actions should be executed during any changes to the alarm state.
        public var actionsEnabled: Swift.Bool?
        /// When the value is ALARM, it means that the actions are suppressed because the suppressor alarm is in ALARM When the value is WaitPeriod, it means that the actions are suppressed because the composite alarm is waiting for the suppressor alarm to go into into the ALARM state. The maximum waiting time is as specified in ActionsSuppressorWaitPeriod. After this time, the composite alarm performs its actions. When the value is ExtensionPeriod, it means that the actions are suppressed because the composite alarm is waiting after the suppressor alarm went out of the ALARM state. The maximum waiting time is as specified in ActionsSuppressorExtensionPeriod. After this time, the composite alarm performs its actions.
        public var actionsSuppressedBy: CloudWatchClientTypes.ActionsSuppressedBy?
        /// Captures the reason for action suppression.
        public var actionsSuppressedReason: Swift.String?
        /// Actions will be suppressed if the suppressor alarm is in the ALARM state. ActionsSuppressor can be an AlarmName or an Amazon Resource Name (ARN) from an existing alarm.
        public var actionsSuppressor: Swift.String?
        /// The maximum time in seconds that the composite alarm waits after suppressor alarm goes out of the ALARM state. After this time, the composite alarm performs its actions. ExtensionPeriod is required only when ActionsSuppressor is specified.
        public var actionsSuppressorExtensionPeriod: Swift.Int?
        /// The maximum time in seconds that the composite alarm waits for the suppressor alarm to go into the ALARM state. After this time, the composite alarm performs its actions. WaitPeriod is required only when ActionsSuppressor is specified.
        public var actionsSuppressorWaitPeriod: Swift.Int?
        /// The actions to execute when this alarm transitions to the ALARM state from any other state. Each action is specified as an Amazon Resource Name (ARN).
        public var alarmActions: [Swift.String]?
        /// The Amazon Resource Name (ARN) of the alarm.
        public var alarmArn: Swift.String?
        /// The time stamp of the last update to the alarm configuration.
        public var alarmConfigurationUpdatedTimestamp: Foundation.Date?
        /// The description of the alarm.
        public var alarmDescription: Swift.String?
        /// The name of the alarm.
        public var alarmName: Swift.String?
        /// The rule that this alarm uses to evaluate its alarm state.
        public var alarmRule: Swift.String?
        /// The actions to execute when this alarm transitions to the INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Name (ARN).
        public var insufficientDataActions: [Swift.String]?
        /// The actions to execute when this alarm transitions to the OK state from any other state. Each action is specified as an Amazon Resource Name (ARN).
        public var okActions: [Swift.String]?
        /// An explanation for the alarm state, in text format.
        public var stateReason: Swift.String?
        /// An explanation for the alarm state, in JSON format.
        public var stateReasonData: Swift.String?
        /// The timestamp of the last change to the alarm's StateValue.
        public var stateTransitionedTimestamp: Foundation.Date?
        /// Tracks the timestamp of any state update, even if StateValue doesn't change.
        public var stateUpdatedTimestamp: Foundation.Date?
        /// The state value for the alarm.
        public var stateValue: CloudWatchClientTypes.StateValue?

        public init(
            actionsEnabled: Swift.Bool? = nil,
            actionsSuppressedBy: CloudWatchClientTypes.ActionsSuppressedBy? = nil,
            actionsSuppressedReason: Swift.String? = nil,
            actionsSuppressor: Swift.String? = nil,
            actionsSuppressorExtensionPeriod: Swift.Int? = nil,
            actionsSuppressorWaitPeriod: Swift.Int? = nil,
            alarmActions: [Swift.String]? = nil,
            alarmArn: Swift.String? = nil,
            alarmConfigurationUpdatedTimestamp: Foundation.Date? = nil,
            alarmDescription: Swift.String? = nil,
            alarmName: Swift.String? = nil,
            alarmRule: Swift.String? = nil,
            insufficientDataActions: [Swift.String]? = nil,
            okActions: [Swift.String]? = nil,
            stateReason: Swift.String? = nil,
            stateReasonData: Swift.String? = nil,
            stateTransitionedTimestamp: Foundation.Date? = nil,
            stateUpdatedTimestamp: Foundation.Date? = nil,
            stateValue: CloudWatchClientTypes.StateValue? = nil
        )
        {
            self.actionsEnabled = actionsEnabled
            self.actionsSuppressedBy = actionsSuppressedBy
            self.actionsSuppressedReason = actionsSuppressedReason
            self.actionsSuppressor = actionsSuppressor
            self.actionsSuppressorExtensionPeriod = actionsSuppressorExtensionPeriod
            self.actionsSuppressorWaitPeriod = actionsSuppressorWaitPeriod
            self.alarmActions = alarmActions
            self.alarmArn = alarmArn
            self.alarmConfigurationUpdatedTimestamp = alarmConfigurationUpdatedTimestamp
            self.alarmDescription = alarmDescription
            self.alarmName = alarmName
            self.alarmRule = alarmRule
            self.insufficientDataActions = insufficientDataActions
            self.okActions = okActions
            self.stateReason = stateReason
            self.stateReasonData = stateReasonData
            self.stateTransitionedTimestamp = stateTransitionedTimestamp
            self.stateUpdatedTimestamp = stateUpdatedTimestamp
            self.stateValue = stateValue
        }
    }

}

/// More than one process tried to modify a resource at the same time.
public struct ConcurrentModificationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConcurrentModificationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudWatchClientTypes {
    /// Represents a specific dashboard.
    public struct DashboardEntry {
        /// The Amazon Resource Name (ARN) of the dashboard.
        public var dashboardArn: Swift.String?
        /// The name of the dashboard.
        public var dashboardName: Swift.String?
        /// The time stamp of when the dashboard was last modified, either by an API call or through the console. This number is expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC.
        public var lastModified: Foundation.Date?
        /// The size of the dashboard, in bytes.
        public var size: Swift.Int?

        public init(
            dashboardArn: Swift.String? = nil,
            dashboardName: Swift.String? = nil,
            lastModified: Foundation.Date? = nil,
            size: Swift.Int? = nil
        )
        {
            self.dashboardArn = dashboardArn
            self.dashboardName = dashboardName
            self.lastModified = lastModified
            self.size = size
        }
    }

}

extension CloudWatchClientTypes {
    /// An error or warning for the operation.
    public struct DashboardValidationMessage {
        /// The data path related to the message.
        public var dataPath: Swift.String?
        /// A message describing the error or warning.
        public var message: Swift.String?

        public init(
            dataPath: Swift.String? = nil,
            message: Swift.String? = nil
        )
        {
            self.dataPath = dataPath
            self.message = message
        }
    }

}

/// Some part of the dashboard data is invalid.
public struct DashboardInvalidInputError: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var dashboardValidationMessages: [CloudWatchClientTypes.DashboardValidationMessage]? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidParameterInput" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        dashboardValidationMessages: [CloudWatchClientTypes.DashboardValidationMessage]? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.dashboardValidationMessages = dashboardValidationMessages
        self.properties.message = message
    }
}

/// The specified dashboard does not exist.
public struct DashboardNotFoundError: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudWatchClientTypes {
    /// Encapsulates the statistical data that CloudWatch computes from metric data.
    public struct Datapoint {
        /// The average of the metric values that correspond to the data point.
        public var average: Swift.Double?
        /// The percentile statistic for the data point.
        public var extendedStatistics: [Swift.String: Swift.Double]?
        /// The maximum metric value for the data point.
        public var maximum: Swift.Double?
        /// The minimum metric value for the data point.
        public var minimum: Swift.Double?
        /// The number of metric values that contributed to the aggregate value of this data point.
        public var sampleCount: Swift.Double?
        /// The sum of the metric values for the data point.
        public var sum: Swift.Double?
        /// The time stamp used for the data point.
        public var timestamp: Foundation.Date?
        /// The standard unit for the data point.
        public var unit: CloudWatchClientTypes.StandardUnit?

        public init(
            average: Swift.Double? = nil,
            extendedStatistics: [Swift.String: Swift.Double]? = nil,
            maximum: Swift.Double? = nil,
            minimum: Swift.Double? = nil,
            sampleCount: Swift.Double? = nil,
            sum: Swift.Double? = nil,
            timestamp: Foundation.Date? = nil,
            unit: CloudWatchClientTypes.StandardUnit? = nil
        )
        {
            self.average = average
            self.extendedStatistics = extendedStatistics
            self.maximum = maximum
            self.minimum = minimum
            self.sampleCount = sampleCount
            self.sum = sum
            self.timestamp = timestamp
            self.unit = unit
        }
    }

}

/// The named resource does not exist.
public struct ResourceNotFound: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        ///
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteAlarmsInput {
    /// The alarms to be deleted. Do not enclose the alarm names in quote marks.
    /// This member is required.
    public var alarmNames: [Swift.String]?

    public init(
        alarmNames: [Swift.String]? = nil
    )
    {
        self.alarmNames = alarmNames
    }
}

/// Request processing has failed due to some unknown error, exception, or failure.
public struct InternalServiceFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        ///
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServiceError" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Parameters were used together that cannot be used together.
public struct InvalidParameterCombinationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        ///
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidParameterCombination" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The value of an input parameter is bad or out-of-range.
public struct InvalidParameterValueException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        ///
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidParameterValue" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// An input parameter that is required is missing.
public struct MissingRequiredParameterException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        ///
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "MissingParameter" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The named resource does not exist.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        public internal(set) var resourceId: Swift.String? = nil
        public internal(set) var resourceType: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        resourceId: Swift.String? = nil,
        resourceType: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.resourceId = resourceId
        self.properties.resourceType = resourceType
    }
}

public struct DeleteAnomalyDetectorInput {
    /// The metric dimensions associated with the anomaly detection model to delete.
    @available(*, deprecated, message: "Use SingleMetricAnomalyDetector.")
    public var dimensions: [CloudWatchClientTypes.Dimension]?
    /// The metric math anomaly detector to be deleted. When using MetricMathAnomalyDetector, you cannot include following parameters in the same operation:
    ///
    /// * Dimensions,
    ///
    /// * MetricName
    ///
    /// * Namespace
    ///
    /// * Stat
    ///
    /// * the SingleMetricAnomalyDetector parameters of DeleteAnomalyDetectorInput
    ///
    ///
    /// Instead, specify the metric math anomaly detector attributes as part of the MetricMathAnomalyDetector property.
    public var metricMathAnomalyDetector: CloudWatchClientTypes.MetricMathAnomalyDetector?
    /// The metric name associated with the anomaly detection model to delete.
    @available(*, deprecated, message: "Use SingleMetricAnomalyDetector.")
    public var metricName: Swift.String?
    /// The namespace associated with the anomaly detection model to delete.
    @available(*, deprecated, message: "Use SingleMetricAnomalyDetector.")
    public var namespace: Swift.String?
    /// A single metric anomaly detector to be deleted. When using SingleMetricAnomalyDetector, you cannot include the following parameters in the same operation:
    ///
    /// * Dimensions,
    ///
    /// * MetricName
    ///
    /// * Namespace
    ///
    /// * Stat
    ///
    /// * the MetricMathAnomalyDetector parameters of DeleteAnomalyDetectorInput
    ///
    ///
    /// Instead, specify the single metric anomaly detector attributes as part of the SingleMetricAnomalyDetector property.
    public var singleMetricAnomalyDetector: CloudWatchClientTypes.SingleMetricAnomalyDetector?
    /// The statistic associated with the anomaly detection model to delete.
    @available(*, deprecated, message: "Use SingleMetricAnomalyDetector.")
    public var stat: Swift.String?

    public init(
        dimensions: [CloudWatchClientTypes.Dimension]? = nil,
        metricMathAnomalyDetector: CloudWatchClientTypes.MetricMathAnomalyDetector? = nil,
        metricName: Swift.String? = nil,
        namespace: Swift.String? = nil,
        singleMetricAnomalyDetector: CloudWatchClientTypes.SingleMetricAnomalyDetector? = nil,
        stat: Swift.String? = nil
    )
    {
        self.dimensions = dimensions
        self.metricMathAnomalyDetector = metricMathAnomalyDetector
        self.metricName = metricName
        self.namespace = namespace
        self.singleMetricAnomalyDetector = singleMetricAnomalyDetector
        self.stat = stat
    }
}

public struct DeleteAnomalyDetectorOutput {

    public init() { }
}

public struct DeleteDashboardsInput {
    /// The dashboards to be deleted. This parameter is required.
    /// This member is required.
    public var dashboardNames: [Swift.String]?

    public init(
        dashboardNames: [Swift.String]? = nil
    )
    {
        self.dashboardNames = dashboardNames
    }
}

public struct DeleteDashboardsOutput {

    public init() { }
}

public struct DeleteInsightRulesInput {
    /// An array of the rule names to delete. If you need to find out the names of your rules, use [DescribeInsightRules](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeInsightRules.html).
    /// This member is required.
    public var ruleNames: [Swift.String]?

    public init(
        ruleNames: [Swift.String]? = nil
    )
    {
        self.ruleNames = ruleNames
    }
}

public struct DeleteInsightRulesOutput {
    /// An array listing the rules that could not be deleted. You cannot delete built-in rules.
    public var failures: [CloudWatchClientTypes.PartialFailure]?

    public init(
        failures: [CloudWatchClientTypes.PartialFailure]? = nil
    )
    {
        self.failures = failures
    }
}

public struct DeleteMetricStreamInput {
    /// The name of the metric stream to delete.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct DeleteMetricStreamOutput {

    public init() { }
}

/// The next token specified is invalid.
public struct InvalidNextToken: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        ///
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidNextToken" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudWatchClientTypes {

    public enum ScanBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case timestampAscending
        case timestampDescending
        case sdkUnknown(Swift.String)

        public static var allCases: [ScanBy] {
            return [
                .timestampAscending,
                .timestampDescending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .timestampAscending: return "TimestampAscending"
            case .timestampDescending: return "TimestampDescending"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeAlarmHistoryInput {
    /// The name of the alarm.
    public var alarmName: Swift.String?
    /// Use this parameter to specify whether you want the operation to return metric alarms or composite alarms. If you omit this parameter, only metric alarms are returned.
    public var alarmTypes: [CloudWatchClientTypes.AlarmType]?
    /// The ending date to retrieve alarm history.
    public var endDate: Foundation.Date?
    /// The type of alarm histories to retrieve.
    public var historyItemType: CloudWatchClientTypes.HistoryItemType?
    /// The maximum number of alarm history records to retrieve.
    public var maxRecords: Swift.Int?
    /// The token returned by a previous call to indicate that there is more data available.
    public var nextToken: Swift.String?
    /// Specified whether to return the newest or oldest alarm history first. Specify TimestampDescending to have the newest event history returned first, and specify TimestampAscending to have the oldest history returned first.
    public var scanBy: CloudWatchClientTypes.ScanBy?
    /// The starting date to retrieve alarm history.
    public var startDate: Foundation.Date?

    public init(
        alarmName: Swift.String? = nil,
        alarmTypes: [CloudWatchClientTypes.AlarmType]? = nil,
        endDate: Foundation.Date? = nil,
        historyItemType: CloudWatchClientTypes.HistoryItemType? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        scanBy: CloudWatchClientTypes.ScanBy? = nil,
        startDate: Foundation.Date? = nil
    )
    {
        self.alarmName = alarmName
        self.alarmTypes = alarmTypes
        self.endDate = endDate
        self.historyItemType = historyItemType
        self.maxRecords = maxRecords
        self.nextToken = nextToken
        self.scanBy = scanBy
        self.startDate = startDate
    }
}

public struct DescribeAlarmHistoryOutput {
    /// The alarm histories, in JSON format.
    public var alarmHistoryItems: [CloudWatchClientTypes.AlarmHistoryItem]?
    /// The token that marks the start of the next batch of returned results.
    public var nextToken: Swift.String?

    public init(
        alarmHistoryItems: [CloudWatchClientTypes.AlarmHistoryItem]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.alarmHistoryItems = alarmHistoryItems
        self.nextToken = nextToken
    }
}

public struct DescribeAlarmsInput {
    /// Use this parameter to filter the results of the operation to only those alarms that use a certain alarm action. For example, you could specify the ARN of an SNS topic to find all alarms that send notifications to that topic.
    public var actionPrefix: Swift.String?
    /// An alarm name prefix. If you specify this parameter, you receive information about all alarms that have names that start with this prefix. If this parameter is specified, you cannot specify AlarmNames.
    public var alarmNamePrefix: Swift.String?
    /// The names of the alarms to retrieve information about.
    public var alarmNames: [Swift.String]?
    /// Use this parameter to specify whether you want the operation to return metric alarms or composite alarms. If you omit this parameter, only metric alarms are returned, even if composite alarms exist in the account. For example, if you omit this parameter or specify MetricAlarms, the operation returns only a list of metric alarms. It does not return any composite alarms, even if composite alarms exist in the account. If you specify CompositeAlarms, the operation returns only a list of composite alarms, and does not return any metric alarms.
    public var alarmTypes: [CloudWatchClientTypes.AlarmType]?
    /// If you use this parameter and specify the name of a composite alarm, the operation returns information about the "children" alarms of the alarm you specify. These are the metric alarms and composite alarms referenced in the AlarmRule field of the composite alarm that you specify in ChildrenOfAlarmName. Information about the composite alarm that you name in ChildrenOfAlarmName is not returned. If you specify ChildrenOfAlarmName, you cannot specify any other parameters in the request except for MaxRecords and NextToken. If you do so, you receive a validation error. Only the Alarm Name, ARN, StateValue (OK/ALARM/INSUFFICIENT_DATA), and StateUpdatedTimestamp information are returned by this operation when you use this parameter. To get complete information about these alarms, perform another DescribeAlarms operation and specify the parent alarm names in the AlarmNames parameter.
    public var childrenOfAlarmName: Swift.String?
    /// The maximum number of alarm descriptions to retrieve.
    public var maxRecords: Swift.Int?
    /// The token returned by a previous call to indicate that there is more data available.
    public var nextToken: Swift.String?
    /// If you use this parameter and specify the name of a metric or composite alarm, the operation returns information about the "parent" alarms of the alarm you specify. These are the composite alarms that have AlarmRule parameters that reference the alarm named in ParentsOfAlarmName. Information about the alarm that you specify in ParentsOfAlarmName is not returned. If you specify ParentsOfAlarmName, you cannot specify any other parameters in the request except for MaxRecords and NextToken. If you do so, you receive a validation error. Only the Alarm Name and ARN are returned by this operation when you use this parameter. To get complete information about these alarms, perform another DescribeAlarms operation and specify the parent alarm names in the AlarmNames parameter.
    public var parentsOfAlarmName: Swift.String?
    /// Specify this parameter to receive information only about alarms that are currently in the state that you specify.
    public var stateValue: CloudWatchClientTypes.StateValue?

    public init(
        actionPrefix: Swift.String? = nil,
        alarmNamePrefix: Swift.String? = nil,
        alarmNames: [Swift.String]? = nil,
        alarmTypes: [CloudWatchClientTypes.AlarmType]? = nil,
        childrenOfAlarmName: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        parentsOfAlarmName: Swift.String? = nil,
        stateValue: CloudWatchClientTypes.StateValue? = nil
    )
    {
        self.actionPrefix = actionPrefix
        self.alarmNamePrefix = alarmNamePrefix
        self.alarmNames = alarmNames
        self.alarmTypes = alarmTypes
        self.childrenOfAlarmName = childrenOfAlarmName
        self.maxRecords = maxRecords
        self.nextToken = nextToken
        self.parentsOfAlarmName = parentsOfAlarmName
        self.stateValue = stateValue
    }
}

extension CloudWatchClientTypes {

    public enum EvaluationState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case partialData
        case sdkUnknown(Swift.String)

        public static var allCases: [EvaluationState] {
            return [
                .partialData
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .partialData: return "PARTIAL_DATA"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CloudWatchClientTypes {

    public enum Statistic: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case average
        case maximum
        case minimum
        case samplecount
        case sum
        case sdkUnknown(Swift.String)

        public static var allCases: [Statistic] {
            return [
                .average,
                .maximum,
                .minimum,
                .samplecount,
                .sum
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .average: return "Average"
            case .maximum: return "Maximum"
            case .minimum: return "Minimum"
            case .samplecount: return "SampleCount"
            case .sum: return "Sum"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CloudWatchClientTypes {
    /// The details about a metric alarm.
    public struct MetricAlarm {
        /// Indicates whether actions should be executed during any changes to the alarm state.
        public var actionsEnabled: Swift.Bool?
        /// The actions to execute when this alarm transitions to the ALARM state from any other state. Each action is specified as an Amazon Resource Name (ARN).
        public var alarmActions: [Swift.String]?
        /// The Amazon Resource Name (ARN) of the alarm.
        public var alarmArn: Swift.String?
        /// The time stamp of the last update to the alarm configuration.
        public var alarmConfigurationUpdatedTimestamp: Foundation.Date?
        /// The description of the alarm.
        public var alarmDescription: Swift.String?
        /// The name of the alarm.
        public var alarmName: Swift.String?
        /// The arithmetic operation to use when comparing the specified statistic and threshold. The specified statistic value is used as the first operand.
        public var comparisonOperator: CloudWatchClientTypes.ComparisonOperator?
        /// The number of data points that must be breaching to trigger the alarm.
        public var datapointsToAlarm: Swift.Int?
        /// The dimensions for the metric associated with the alarm.
        public var dimensions: [CloudWatchClientTypes.Dimension]?
        /// Used only for alarms based on percentiles. If ignore, the alarm state does not change during periods with too few data points to be statistically significant. If evaluate or this parameter is not used, the alarm is always evaluated and possibly changes state no matter how many data points are available.
        public var evaluateLowSampleCountPercentile: Swift.String?
        /// The number of periods over which data is compared to the specified threshold.
        public var evaluationPeriods: Swift.Int?
        /// If the value of this field is PARTIAL_DATA, the alarm is being evaluated based on only partial data. This happens if the query used for the alarm returns more than 10,000 metrics. For more information, see [Create alarms on Metrics Insights queries](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Create_Metrics_Insights_Alarm.html).
        public var evaluationState: CloudWatchClientTypes.EvaluationState?
        /// The percentile statistic for the metric associated with the alarm. Specify a value between p0.0 and p100.
        public var extendedStatistic: Swift.String?
        /// The actions to execute when this alarm transitions to the INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Name (ARN).
        public var insufficientDataActions: [Swift.String]?
        /// The name of the metric associated with the alarm, if this is an alarm based on a single metric.
        public var metricName: Swift.String?
        /// An array of MetricDataQuery structures, used in an alarm based on a metric math expression. Each structure either retrieves a metric or performs a math expression. One item in the Metrics array is the math expression that the alarm watches. This expression by designated by having ReturnData set to true.
        public var metrics: [CloudWatchClientTypes.MetricDataQuery]?
        /// The namespace of the metric associated with the alarm.
        public var namespace: Swift.String?
        /// The actions to execute when this alarm transitions to the OK state from any other state. Each action is specified as an Amazon Resource Name (ARN).
        public var okActions: [Swift.String]?
        /// The period, in seconds, over which the statistic is applied.
        public var period: Swift.Int?
        /// An explanation for the alarm state, in text format.
        public var stateReason: Swift.String?
        /// An explanation for the alarm state, in JSON format.
        public var stateReasonData: Swift.String?
        /// The date and time that the alarm's StateValue most recently changed.
        public var stateTransitionedTimestamp: Foundation.Date?
        /// The time stamp of the last update to the value of either the StateValue or EvaluationState parameters.
        public var stateUpdatedTimestamp: Foundation.Date?
        /// The state value for the alarm.
        public var stateValue: CloudWatchClientTypes.StateValue?
        /// The statistic for the metric associated with the alarm, other than percentile. For percentile statistics, use ExtendedStatistic.
        public var statistic: CloudWatchClientTypes.Statistic?
        /// The value to compare with the specified statistic.
        public var threshold: Swift.Double?
        /// In an alarm based on an anomaly detection model, this is the ID of the ANOMALY_DETECTION_BAND function used as the threshold for the alarm.
        public var thresholdMetricId: Swift.String?
        /// Sets how this alarm is to handle missing data points. The valid values are breaching, notBreaching, ignore, and missing. For more information, see [Configuring how CloudWatch alarms treat missing data](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarms-and-missing-data). If this parameter is omitted, the default behavior of missing is used.
        public var treatMissingData: Swift.String?
        /// The unit of the metric associated with the alarm.
        public var unit: CloudWatchClientTypes.StandardUnit?

        public init(
            actionsEnabled: Swift.Bool? = nil,
            alarmActions: [Swift.String]? = nil,
            alarmArn: Swift.String? = nil,
            alarmConfigurationUpdatedTimestamp: Foundation.Date? = nil,
            alarmDescription: Swift.String? = nil,
            alarmName: Swift.String? = nil,
            comparisonOperator: CloudWatchClientTypes.ComparisonOperator? = nil,
            datapointsToAlarm: Swift.Int? = nil,
            dimensions: [CloudWatchClientTypes.Dimension]? = nil,
            evaluateLowSampleCountPercentile: Swift.String? = nil,
            evaluationPeriods: Swift.Int? = nil,
            evaluationState: CloudWatchClientTypes.EvaluationState? = nil,
            extendedStatistic: Swift.String? = nil,
            insufficientDataActions: [Swift.String]? = nil,
            metricName: Swift.String? = nil,
            metrics: [CloudWatchClientTypes.MetricDataQuery]? = nil,
            namespace: Swift.String? = nil,
            okActions: [Swift.String]? = nil,
            period: Swift.Int? = nil,
            stateReason: Swift.String? = nil,
            stateReasonData: Swift.String? = nil,
            stateTransitionedTimestamp: Foundation.Date? = nil,
            stateUpdatedTimestamp: Foundation.Date? = nil,
            stateValue: CloudWatchClientTypes.StateValue? = nil,
            statistic: CloudWatchClientTypes.Statistic? = nil,
            threshold: Swift.Double? = nil,
            thresholdMetricId: Swift.String? = nil,
            treatMissingData: Swift.String? = nil,
            unit: CloudWatchClientTypes.StandardUnit? = nil
        )
        {
            self.actionsEnabled = actionsEnabled
            self.alarmActions = alarmActions
            self.alarmArn = alarmArn
            self.alarmConfigurationUpdatedTimestamp = alarmConfigurationUpdatedTimestamp
            self.alarmDescription = alarmDescription
            self.alarmName = alarmName
            self.comparisonOperator = comparisonOperator
            self.datapointsToAlarm = datapointsToAlarm
            self.dimensions = dimensions
            self.evaluateLowSampleCountPercentile = evaluateLowSampleCountPercentile
            self.evaluationPeriods = evaluationPeriods
            self.evaluationState = evaluationState
            self.extendedStatistic = extendedStatistic
            self.insufficientDataActions = insufficientDataActions
            self.metricName = metricName
            self.metrics = metrics
            self.namespace = namespace
            self.okActions = okActions
            self.period = period
            self.stateReason = stateReason
            self.stateReasonData = stateReasonData
            self.stateTransitionedTimestamp = stateTransitionedTimestamp
            self.stateUpdatedTimestamp = stateUpdatedTimestamp
            self.stateValue = stateValue
            self.statistic = statistic
            self.threshold = threshold
            self.thresholdMetricId = thresholdMetricId
            self.treatMissingData = treatMissingData
            self.unit = unit
        }
    }

}

public struct DescribeAlarmsOutput {
    /// The information about any composite alarms returned by the operation.
    public var compositeAlarms: [CloudWatchClientTypes.CompositeAlarm]?
    /// The information about any metric alarms returned by the operation.
    public var metricAlarms: [CloudWatchClientTypes.MetricAlarm]?
    /// The token that marks the start of the next batch of returned results.
    public var nextToken: Swift.String?

    public init(
        compositeAlarms: [CloudWatchClientTypes.CompositeAlarm]? = nil,
        metricAlarms: [CloudWatchClientTypes.MetricAlarm]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.compositeAlarms = compositeAlarms
        self.metricAlarms = metricAlarms
        self.nextToken = nextToken
    }
}

public struct DescribeAlarmsForMetricInput {
    /// The dimensions associated with the metric. If the metric has any associated dimensions, you must specify them in order for the call to succeed.
    public var dimensions: [CloudWatchClientTypes.Dimension]?
    /// The percentile statistic for the metric. Specify a value between p0.0 and p100.
    public var extendedStatistic: Swift.String?
    /// The name of the metric.
    /// This member is required.
    public var metricName: Swift.String?
    /// The namespace of the metric.
    /// This member is required.
    public var namespace: Swift.String?
    /// The period, in seconds, over which the statistic is applied.
    public var period: Swift.Int?
    /// The statistic for the metric, other than percentiles. For percentile statistics, use ExtendedStatistics.
    public var statistic: CloudWatchClientTypes.Statistic?
    /// The unit for the metric.
    public var unit: CloudWatchClientTypes.StandardUnit?

    public init(
        dimensions: [CloudWatchClientTypes.Dimension]? = nil,
        extendedStatistic: Swift.String? = nil,
        metricName: Swift.String? = nil,
        namespace: Swift.String? = nil,
        period: Swift.Int? = nil,
        statistic: CloudWatchClientTypes.Statistic? = nil,
        unit: CloudWatchClientTypes.StandardUnit? = nil
    )
    {
        self.dimensions = dimensions
        self.extendedStatistic = extendedStatistic
        self.metricName = metricName
        self.namespace = namespace
        self.period = period
        self.statistic = statistic
        self.unit = unit
    }
}

public struct DescribeAlarmsForMetricOutput {
    /// The information for each alarm with the specified metric.
    public var metricAlarms: [CloudWatchClientTypes.MetricAlarm]?

    public init(
        metricAlarms: [CloudWatchClientTypes.MetricAlarm]? = nil
    )
    {
        self.metricAlarms = metricAlarms
    }
}

public struct DescribeAnomalyDetectorsInput {
    /// The anomaly detector types to request when using DescribeAnomalyDetectorsInput. If empty, defaults to SINGLE_METRIC.
    public var anomalyDetectorTypes: [CloudWatchClientTypes.AnomalyDetectorType]?
    /// Limits the results to only the anomaly detection models that are associated with the specified metric dimensions. If there are multiple metrics that have these dimensions and have anomaly detection models associated, they're all returned.
    public var dimensions: [CloudWatchClientTypes.Dimension]?
    /// The maximum number of results to return in one operation. The maximum value that you can specify is 100. To retrieve the remaining results, make another call with the returned NextToken value.
    public var maxResults: Swift.Int?
    /// Limits the results to only the anomaly detection models that are associated with the specified metric name. If there are multiple metrics with this name in different namespaces that have anomaly detection models, they're all returned.
    public var metricName: Swift.String?
    /// Limits the results to only the anomaly detection models that are associated with the specified namespace.
    public var namespace: Swift.String?
    /// Use the token returned by the previous operation to request the next page of results.
    public var nextToken: Swift.String?

    public init(
        anomalyDetectorTypes: [CloudWatchClientTypes.AnomalyDetectorType]? = nil,
        dimensions: [CloudWatchClientTypes.Dimension]? = nil,
        maxResults: Swift.Int? = nil,
        metricName: Swift.String? = nil,
        namespace: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.anomalyDetectorTypes = anomalyDetectorTypes
        self.dimensions = dimensions
        self.maxResults = maxResults
        self.metricName = metricName
        self.namespace = namespace
        self.nextToken = nextToken
    }
}

public struct DescribeAnomalyDetectorsOutput {
    /// The list of anomaly detection models returned by the operation.
    public var anomalyDetectors: [CloudWatchClientTypes.AnomalyDetector]?
    /// A token that you can use in a subsequent operation to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init(
        anomalyDetectors: [CloudWatchClientTypes.AnomalyDetector]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.anomalyDetectors = anomalyDetectors
        self.nextToken = nextToken
    }
}

public struct DescribeInsightRulesInput {
    /// The maximum number of results to return in one operation. If you omit this parameter, the default of 500 is used.
    public var maxResults: Swift.Int?
    /// Include this value, if it was returned by the previous operation, to get the next set of rules.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension CloudWatchClientTypes {
    /// This structure contains the definition for a Contributor Insights rule. For more information about this rule, see[ Using Constributor Insights to analyze high-cardinality data](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContributorInsights.html) in the Amazon CloudWatch User Guide.
    public struct InsightRule {
        /// The definition of the rule, as a JSON object. The definition contains the keywords used to define contributors, the value to aggregate on if this rule returns a sum instead of a count, and the filters. For details on the valid syntax, see [Contributor Insights Rule Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContributorInsights-RuleSyntax.html).
        /// This member is required.
        public var definition: Swift.String?
        /// An optional built-in rule that Amazon Web Services manages.
        public var managedRule: Swift.Bool?
        /// The name of the rule.
        /// This member is required.
        public var name: Swift.String?
        /// For rules that you create, this is always {"Name": "CloudWatchLogRule", "Version": 1}. For managed rules, this is {"Name": "ServiceLogRule", "Version": 1}
        /// This member is required.
        public var schema: Swift.String?
        /// Indicates whether the rule is enabled or disabled.
        /// This member is required.
        public var state: Swift.String?

        public init(
            definition: Swift.String? = nil,
            managedRule: Swift.Bool? = nil,
            name: Swift.String? = nil,
            schema: Swift.String? = nil,
            state: Swift.String? = nil
        )
        {
            self.definition = definition
            self.managedRule = managedRule
            self.name = name
            self.schema = schema
            self.state = state
        }
    }

}

public struct DescribeInsightRulesOutput {
    /// The rules returned by the operation.
    public var insightRules: [CloudWatchClientTypes.InsightRule]?
    /// If this parameter is present, it is a token that marks the start of the next batch of returned results.
    public var nextToken: Swift.String?

    public init(
        insightRules: [CloudWatchClientTypes.InsightRule]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.insightRules = insightRules
        self.nextToken = nextToken
    }
}

extension CloudWatchClientTypes {
    /// Represents filters for a dimension.
    public struct DimensionFilter {
        /// The dimension name to be matched.
        /// This member is required.
        public var name: Swift.String?
        /// The value of the dimension to be matched.
        public var value: Swift.String?

        public init(
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

public struct DisableAlarmActionsInput {
    /// The names of the alarms.
    /// This member is required.
    public var alarmNames: [Swift.String]?

    public init(
        alarmNames: [Swift.String]? = nil
    )
    {
        self.alarmNames = alarmNames
    }
}

public struct DisableInsightRulesInput {
    /// An array of the rule names to disable. If you need to find out the names of your rules, use [DescribeInsightRules](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeInsightRules.html).
    /// This member is required.
    public var ruleNames: [Swift.String]?

    public init(
        ruleNames: [Swift.String]? = nil
    )
    {
        self.ruleNames = ruleNames
    }
}

public struct DisableInsightRulesOutput {
    /// An array listing the rules that could not be disabled. You cannot disable built-in rules.
    public var failures: [CloudWatchClientTypes.PartialFailure]?

    public init(
        failures: [CloudWatchClientTypes.PartialFailure]? = nil
    )
    {
        self.failures = failures
    }
}

public struct EnableAlarmActionsInput {
    /// The names of the alarms.
    /// This member is required.
    public var alarmNames: [Swift.String]?

    public init(
        alarmNames: [Swift.String]? = nil
    )
    {
        self.alarmNames = alarmNames
    }
}

/// The operation exceeded one or more limits.
public struct LimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct EnableInsightRulesInput {
    /// An array of the rule names to enable. If you need to find out the names of your rules, use [DescribeInsightRules](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeInsightRules.html).
    /// This member is required.
    public var ruleNames: [Swift.String]?

    public init(
        ruleNames: [Swift.String]? = nil
    )
    {
        self.ruleNames = ruleNames
    }
}

public struct EnableInsightRulesOutput {
    /// An array listing the rules that could not be enabled. You cannot disable or enable built-in rules.
    public var failures: [CloudWatchClientTypes.PartialFailure]?

    public init(
        failures: [CloudWatchClientTypes.PartialFailure]? = nil
    )
    {
        self.failures = failures
    }
}

public struct GetDashboardInput {
    /// The name of the dashboard to be described.
    /// This member is required.
    public var dashboardName: Swift.String?

    public init(
        dashboardName: Swift.String? = nil
    )
    {
        self.dashboardName = dashboardName
    }
}

public struct GetDashboardOutput {
    /// The Amazon Resource Name (ARN) of the dashboard.
    public var dashboardArn: Swift.String?
    /// The detailed information about the dashboard, including what widgets are included and their location on the dashboard. For more information about the DashboardBody syntax, see [Dashboard Body Structure and Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html).
    public var dashboardBody: Swift.String?
    /// The name of the dashboard.
    public var dashboardName: Swift.String?

    public init(
        dashboardArn: Swift.String? = nil,
        dashboardBody: Swift.String? = nil,
        dashboardName: Swift.String? = nil
    )
    {
        self.dashboardArn = dashboardArn
        self.dashboardBody = dashboardBody
        self.dashboardName = dashboardName
    }
}

public struct GetInsightRuleReportInput {
    /// The end time of the data to use in the report. When used in a raw HTTP Query API, it is formatted as yyyy-MM-dd'T'HH:mm:ss. For example, 2019-07-01T23:59:59.
    /// This member is required.
    public var endTime: Foundation.Date?
    /// The maximum number of contributors to include in the report. The range is 1 to 100. If you omit this, the default of 10 is used.
    public var maxContributorCount: Swift.Int?
    /// Specifies which metrics to use for aggregation of contributor values for the report. You can specify one or more of the following metrics:
    ///
    /// * UniqueContributors -- the number of unique contributors for each data point.
    ///
    /// * MaxContributorValue -- the value of the top contributor for each data point. The identity of the contributor might change for each data point in the graph. If this rule aggregates by COUNT, the top contributor for each data point is the contributor with the most occurrences in that period. If the rule aggregates by SUM, the top contributor is the contributor with the highest sum in the log field specified by the rule's Value, during that period.
    ///
    /// * SampleCount -- the number of data points matched by the rule.
    ///
    /// * Sum -- the sum of the values from all contributors during the time period represented by that data point.
    ///
    /// * Minimum -- the minimum value from a single observation during the time period represented by that data point.
    ///
    /// * Maximum -- the maximum value from a single observation during the time period represented by that data point.
    ///
    /// * Average -- the average value from all contributors during the time period represented by that data point.
    public var metrics: [Swift.String]?
    /// Determines what statistic to use to rank the contributors. Valid values are Sum and Maximum.
    public var orderBy: Swift.String?
    /// The period, in seconds, to use for the statistics in the InsightRuleMetricDatapoint results.
    /// This member is required.
    public var period: Swift.Int?
    /// The name of the rule that you want to see data from.
    /// This member is required.
    public var ruleName: Swift.String?
    /// The start time of the data to use in the report. When used in a raw HTTP Query API, it is formatted as yyyy-MM-dd'T'HH:mm:ss. For example, 2019-07-01T23:59:59.
    /// This member is required.
    public var startTime: Foundation.Date?

    public init(
        endTime: Foundation.Date? = nil,
        maxContributorCount: Swift.Int? = nil,
        metrics: [Swift.String]? = nil,
        orderBy: Swift.String? = nil,
        period: Swift.Int? = nil,
        ruleName: Swift.String? = nil,
        startTime: Foundation.Date? = nil
    )
    {
        self.endTime = endTime
        self.maxContributorCount = maxContributorCount
        self.metrics = metrics
        self.orderBy = orderBy
        self.period = period
        self.ruleName = ruleName
        self.startTime = startTime
    }
}

extension CloudWatchClientTypes {
    /// One data point related to one contributor. For more information, see [GetInsightRuleReport](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetInsightRuleReport.html) and [InsightRuleContributor](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_InsightRuleContributor.html).
    public struct InsightRuleContributorDatapoint {
        /// The approximate value that this contributor added during this timestamp.
        /// This member is required.
        public var approximateValue: Swift.Double?
        /// The timestamp of the data point.
        /// This member is required.
        public var timestamp: Foundation.Date?

        public init(
            approximateValue: Swift.Double? = nil,
            timestamp: Foundation.Date? = nil
        )
        {
            self.approximateValue = approximateValue
            self.timestamp = timestamp
        }
    }

}

extension CloudWatchClientTypes {
    /// One of the unique contributors found by a Contributor Insights rule. If the rule contains multiple keys, then a unique contributor is a unique combination of values from all the keys in the rule. If the rule contains a single key, then each unique contributor is each unique value for this key. For more information, see [GetInsightRuleReport](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetInsightRuleReport.html).
    public struct InsightRuleContributor {
        /// An approximation of the aggregate value that comes from this contributor.
        /// This member is required.
        public var approximateAggregateValue: Swift.Double?
        /// An array of the data points where this contributor is present. Only the data points when this contributor appeared are included in the array.
        /// This member is required.
        public var datapoints: [CloudWatchClientTypes.InsightRuleContributorDatapoint]?
        /// One of the log entry field keywords that is used to define contributors for this rule.
        /// This member is required.
        public var keys: [Swift.String]?

        public init(
            approximateAggregateValue: Swift.Double? = nil,
            datapoints: [CloudWatchClientTypes.InsightRuleContributorDatapoint]? = nil,
            keys: [Swift.String]? = nil
        )
        {
            self.approximateAggregateValue = approximateAggregateValue
            self.datapoints = datapoints
            self.keys = keys
        }
    }

}

extension CloudWatchClientTypes {
    /// One data point from the metric time series returned in a Contributor Insights rule report. For more information, see [GetInsightRuleReport](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetInsightRuleReport.html).
    public struct InsightRuleMetricDatapoint {
        /// The average value from all contributors during the time period represented by that data point. This statistic is returned only if you included it in the Metrics array in your request.
        public var average: Swift.Double?
        /// The maximum value provided by one contributor during this timestamp. Each timestamp is evaluated separately, so the identity of the max contributor could be different for each timestamp. This statistic is returned only if you included it in the Metrics array in your request.
        public var maxContributorValue: Swift.Double?
        /// The maximum value from a single occurence from a single contributor during the time period represented by that data point. This statistic is returned only if you included it in the Metrics array in your request.
        public var maximum: Swift.Double?
        /// The minimum value from a single contributor during the time period represented by that data point. This statistic is returned only if you included it in the Metrics array in your request.
        public var minimum: Swift.Double?
        /// The number of occurrences that matched the rule during this data point. This statistic is returned only if you included it in the Metrics array in your request.
        public var sampleCount: Swift.Double?
        /// The sum of the values from all contributors during the time period represented by that data point. This statistic is returned only if you included it in the Metrics array in your request.
        public var sum: Swift.Double?
        /// The timestamp of the data point.
        /// This member is required.
        public var timestamp: Foundation.Date?
        /// The number of unique contributors who published data during this timestamp. This statistic is returned only if you included it in the Metrics array in your request.
        public var uniqueContributors: Swift.Double?

        public init(
            average: Swift.Double? = nil,
            maxContributorValue: Swift.Double? = nil,
            maximum: Swift.Double? = nil,
            minimum: Swift.Double? = nil,
            sampleCount: Swift.Double? = nil,
            sum: Swift.Double? = nil,
            timestamp: Foundation.Date? = nil,
            uniqueContributors: Swift.Double? = nil
        )
        {
            self.average = average
            self.maxContributorValue = maxContributorValue
            self.maximum = maximum
            self.minimum = minimum
            self.sampleCount = sampleCount
            self.sum = sum
            self.timestamp = timestamp
            self.uniqueContributors = uniqueContributors
        }
    }

}

public struct GetInsightRuleReportOutput {
    /// The sum of the values from all individual contributors that match the rule.
    public var aggregateValue: Swift.Double?
    /// Specifies whether this rule aggregates contributor data by COUNT or SUM.
    public var aggregationStatistic: Swift.String?
    /// An approximate count of the unique contributors found by this rule in this time period.
    public var approximateUniqueCount: Swift.Int?
    /// An array of the unique contributors found by this rule in this time period. If the rule contains multiple keys, each combination of values for the keys counts as a unique contributor.
    public var contributors: [CloudWatchClientTypes.InsightRuleContributor]?
    /// An array of the strings used as the keys for this rule. The keys are the dimensions used to classify contributors. If the rule contains more than one key, then each unique combination of values for the keys is counted as a unique contributor.
    public var keyLabels: [Swift.String]?
    /// A time series of metric data points that matches the time period in the rule request.
    public var metricDatapoints: [CloudWatchClientTypes.InsightRuleMetricDatapoint]?

    public init(
        aggregateValue: Swift.Double? = nil,
        aggregationStatistic: Swift.String? = nil,
        approximateUniqueCount: Swift.Int? = nil,
        contributors: [CloudWatchClientTypes.InsightRuleContributor]? = nil,
        keyLabels: [Swift.String]? = nil,
        metricDatapoints: [CloudWatchClientTypes.InsightRuleMetricDatapoint]? = nil
    )
    {
        self.aggregateValue = aggregateValue
        self.aggregationStatistic = aggregationStatistic
        self.approximateUniqueCount = approximateUniqueCount
        self.contributors = contributors
        self.keyLabels = keyLabels
        self.metricDatapoints = metricDatapoints
    }
}

extension CloudWatchClientTypes {
    /// This structure includes the Timezone parameter, which you can use to specify your time zone so that the labels that are associated with returned metrics display the correct time for your time zone. The Timezone value affects a label only if you have a time-based dynamic expression in the label. For more information about dynamic expressions in labels, see [Using Dynamic Labels](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html).
    public struct LabelOptions {
        /// The time zone to use for metric data return in this operation. The format is + or - followed by four digits. The first two digits indicate the number of hours ahead or behind of UTC, and the final two digits are the number of minutes. For example, +0130 indicates a time zone that is 1 hour and 30 minutes ahead of UTC. The default is +0000.
        public var timezone: Swift.String?

        public init(
            timezone: Swift.String? = nil
        )
        {
            self.timezone = timezone
        }
    }

}

public struct GetMetricDataInput {
    /// The time stamp indicating the latest data to be returned. The value specified is exclusive; results include data points up to the specified time stamp. For better performance, specify StartTime and EndTime values that align with the value of the metric's Period and sync up with the beginning and end of an hour. For example, if the Period of a metric is 5 minutes, specifying 12:05 or 12:30 as EndTime can get a faster response from CloudWatch than setting 12:07 or 12:29 as the EndTime.
    /// This member is required.
    public var endTime: Foundation.Date?
    /// This structure includes the Timezone parameter, which you can use to specify your time zone so that the labels of returned data display the correct time for your time zone.
    public var labelOptions: CloudWatchClientTypes.LabelOptions?
    /// The maximum number of data points the request should return before paginating. If you omit this, the default of 100,800 is used.
    public var maxDatapoints: Swift.Int?
    /// The metric queries to be returned. A single GetMetricData call can include as many as 500 MetricDataQuery structures. Each of these structures can specify either a metric to retrieve, a Metrics Insights query, or a math expression to perform on retrieved data.
    /// This member is required.
    public var metricDataQueries: [CloudWatchClientTypes.MetricDataQuery]?
    /// Include this value, if it was returned by the previous GetMetricData operation, to get the next set of data points.
    public var nextToken: Swift.String?
    /// The order in which data points should be returned. TimestampDescending returns the newest data first and paginates when the MaxDatapoints limit is reached. TimestampAscending returns the oldest data first and paginates when the MaxDatapoints limit is reached. If you omit this parameter, the default of TimestampDescending is used.
    public var scanBy: CloudWatchClientTypes.ScanBy?
    /// The time stamp indicating the earliest data to be returned. The value specified is inclusive; results include data points with the specified time stamp. CloudWatch rounds the specified time stamp as follows:
    ///
    /// * Start time less than 15 days ago - Round down to the nearest whole minute. For example, 12:32:34 is rounded down to 12:32:00.
    ///
    /// * Start time between 15 and 63 days ago - Round down to the nearest 5-minute clock interval. For example, 12:32:34 is rounded down to 12:30:00.
    ///
    /// * Start time greater than 63 days ago - Round down to the nearest 1-hour clock interval. For example, 12:32:34 is rounded down to 12:00:00.
    ///
    ///
    /// If you set Period to 5, 10, or 30, the start time of your request is rounded down to the nearest time that corresponds to even 5-, 10-, or 30-second divisions of a minute. For example, if you make a query at (HH:mm:ss) 01:05:23 for the previous 10-second period, the start time of your request is rounded down and you receive data from 01:05:10 to 01:05:20. If you make a query at 15:07:17 for the previous 5 minutes of data, using a period of 5 seconds, you receive data timestamped between 15:02:15 and 15:07:15. For better performance, specify StartTime and EndTime values that align with the value of the metric's Period and sync up with the beginning and end of an hour. For example, if the Period of a metric is 5 minutes, specifying 12:05 or 12:30 as StartTime can get a faster response from CloudWatch than setting 12:07 or 12:29 as the StartTime.
    /// This member is required.
    public var startTime: Foundation.Date?

    public init(
        endTime: Foundation.Date? = nil,
        labelOptions: CloudWatchClientTypes.LabelOptions? = nil,
        maxDatapoints: Swift.Int? = nil,
        metricDataQueries: [CloudWatchClientTypes.MetricDataQuery]? = nil,
        nextToken: Swift.String? = nil,
        scanBy: CloudWatchClientTypes.ScanBy? = nil,
        startTime: Foundation.Date? = nil
    )
    {
        self.endTime = endTime
        self.labelOptions = labelOptions
        self.maxDatapoints = maxDatapoints
        self.metricDataQueries = metricDataQueries
        self.nextToken = nextToken
        self.scanBy = scanBy
        self.startTime = startTime
    }
}

extension CloudWatchClientTypes {
    /// A message returned by the GetMetricDataAPI, including a code and a description. If a cross-Region GetMetricData operation fails with a code of Forbidden and a value of Authentication too complex to retrieve cross region data, you can correct the problem by running the GetMetricData operation in the same Region where the metric data is.
    public struct MessageData {
        /// The error code or status code associated with the message.
        public var code: Swift.String?
        /// The message text.
        public var value: Swift.String?

        public init(
            code: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.code = code
            self.value = value
        }
    }

}

extension CloudWatchClientTypes {

    public enum StatusCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case complete
        case forbidden
        case internalError
        case partialData
        case sdkUnknown(Swift.String)

        public static var allCases: [StatusCode] {
            return [
                .complete,
                .forbidden,
                .internalError,
                .partialData
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .complete: return "Complete"
            case .forbidden: return "Forbidden"
            case .internalError: return "InternalError"
            case .partialData: return "PartialData"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CloudWatchClientTypes {
    /// A GetMetricData call returns an array of MetricDataResult structures. Each of these structures includes the data points for that metric, along with the timestamps of those data points and other identifying information.
    public struct MetricDataResult {
        /// The short name you specified to represent this metric.
        public var id: Swift.String?
        /// The human-readable label associated with the data.
        public var label: Swift.String?
        /// A list of messages with additional information about the data returned.
        public var messages: [CloudWatchClientTypes.MessageData]?
        /// The status of the returned data. Complete indicates that all data points in the requested time range were returned. PartialData means that an incomplete set of data points were returned. You can use the NextToken value that was returned and repeat your request to get more data points. NextToken is not returned if you are performing a math expression. InternalError indicates that an error occurred. Retry your request using NextToken, if present.
        public var statusCode: CloudWatchClientTypes.StatusCode?
        /// The timestamps for the data points, formatted in Unix timestamp format. The number of timestamps always matches the number of values and the value for Timestamps[x] is Values[x].
        public var timestamps: [Foundation.Date]?
        /// The data points for the metric corresponding to Timestamps. The number of values always matches the number of timestamps and the timestamp for Values[x] is Timestamps[x].
        public var values: [Swift.Double]?

        public init(
            id: Swift.String? = nil,
            label: Swift.String? = nil,
            messages: [CloudWatchClientTypes.MessageData]? = nil,
            statusCode: CloudWatchClientTypes.StatusCode? = nil,
            timestamps: [Foundation.Date]? = nil,
            values: [Swift.Double]? = nil
        )
        {
            self.id = id
            self.label = label
            self.messages = messages
            self.statusCode = statusCode
            self.timestamps = timestamps
            self.values = values
        }
    }

}

public struct GetMetricDataOutput {
    /// Contains a message about this GetMetricData operation, if the operation results in such a message. An example of a message that might be returned is Maximum number of allowed metrics exceeded. If there is a message, as much of the operation as possible is still executed. A message appears here only if it is related to the global GetMetricData operation. Any message about a specific metric returned by the operation appears in the MetricDataResult object returned for that metric.
    public var messages: [CloudWatchClientTypes.MessageData]?
    /// The metrics that are returned, including the metric name, namespace, and dimensions.
    public var metricDataResults: [CloudWatchClientTypes.MetricDataResult]?
    /// A token that marks the next batch of returned results.
    public var nextToken: Swift.String?

    public init(
        messages: [CloudWatchClientTypes.MessageData]? = nil,
        metricDataResults: [CloudWatchClientTypes.MetricDataResult]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.messages = messages
        self.metricDataResults = metricDataResults
        self.nextToken = nextToken
    }
}

public struct GetMetricStatisticsInput {
    /// The dimensions. If the metric contains multiple dimensions, you must include a value for each dimension. CloudWatch treats each unique combination of dimensions as a separate metric. If a specific combination of dimensions was not published, you can't retrieve statistics for it. You must specify the same dimensions that were used when the metrics were created. For an example, see [Dimension Combinations](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#dimension-combinations) in the Amazon CloudWatch User Guide. For more information about specifying dimensions, see [Publishing Metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html) in the Amazon CloudWatch User Guide.
    public var dimensions: [CloudWatchClientTypes.Dimension]?
    /// The time stamp that determines the last data point to return. The value specified is exclusive; results include data points up to the specified time stamp. In a raw HTTP query, the time stamp must be in ISO 8601 UTC format (for example, 2016-10-10T23:00:00Z).
    /// This member is required.
    public var endTime: Foundation.Date?
    /// The percentile statistics. Specify values between p0.0 and p100. When calling GetMetricStatistics, you must specify either Statistics or ExtendedStatistics, but not both. Percentile statistics are not available for metrics when any of the metric values are negative numbers.
    public var extendedStatistics: [Swift.String]?
    /// The name of the metric, with or without spaces.
    /// This member is required.
    public var metricName: Swift.String?
    /// The namespace of the metric, with or without spaces.
    /// This member is required.
    public var namespace: Swift.String?
    /// The granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics stored by a PutMetricData call that includes a StorageResolution of 1 second. If the StartTime parameter specifies a time stamp that is greater than 3 hours ago, you must specify the period as follows or no data points in that time range is returned:
    ///
    /// * Start time between 3 hours and 15 days ago - Use a multiple of 60 seconds (1 minute).
    ///
    /// * Start time between 15 and 63 days ago - Use a multiple of 300 seconds (5 minutes).
    ///
    /// * Start time greater than 63 days ago - Use a multiple of 3600 seconds (1 hour).
    /// This member is required.
    public var period: Swift.Int?
    /// The time stamp that determines the first data point to return. Start times are evaluated relative to the time that CloudWatch receives the request. The value specified is inclusive; results include data points with the specified time stamp. In a raw HTTP query, the time stamp must be in ISO 8601 UTC format (for example, 2016-10-03T23:00:00Z). CloudWatch rounds the specified time stamp as follows:
    ///
    /// * Start time less than 15 days ago - Round down to the nearest whole minute. For example, 12:32:34 is rounded down to 12:32:00.
    ///
    /// * Start time between 15 and 63 days ago - Round down to the nearest 5-minute clock interval. For example, 12:32:34 is rounded down to 12:30:00.
    ///
    /// * Start time greater than 63 days ago - Round down to the nearest 1-hour clock interval. For example, 12:32:34 is rounded down to 12:00:00.
    ///
    ///
    /// If you set Period to 5, 10, or 30, the start time of your request is rounded down to the nearest time that corresponds to even 5-, 10-, or 30-second divisions of a minute. For example, if you make a query at (HH:mm:ss) 01:05:23 for the previous 10-second period, the start time of your request is rounded down and you receive data from 01:05:10 to 01:05:20. If you make a query at 15:07:17 for the previous 5 minutes of data, using a period of 5 seconds, you receive data timestamped between 15:02:15 and 15:07:15.
    /// This member is required.
    public var startTime: Foundation.Date?
    /// The metric statistics, other than percentile. For percentile statistics, use ExtendedStatistics. When calling GetMetricStatistics, you must specify either Statistics or ExtendedStatistics, but not both.
    public var statistics: [CloudWatchClientTypes.Statistic]?
    /// The unit for a given metric. If you omit Unit, all data that was collected with any unit is returned, along with the corresponding units that were specified when the data was reported to CloudWatch. If you specify a unit, the operation returns only data that was collected with that unit specified. If you specify a unit that does not match the data collected, the results of the operation are null. CloudWatch does not perform unit conversions.
    public var unit: CloudWatchClientTypes.StandardUnit?

    public init(
        dimensions: [CloudWatchClientTypes.Dimension]? = nil,
        endTime: Foundation.Date? = nil,
        extendedStatistics: [Swift.String]? = nil,
        metricName: Swift.String? = nil,
        namespace: Swift.String? = nil,
        period: Swift.Int? = nil,
        startTime: Foundation.Date? = nil,
        statistics: [CloudWatchClientTypes.Statistic]? = nil,
        unit: CloudWatchClientTypes.StandardUnit? = nil
    )
    {
        self.dimensions = dimensions
        self.endTime = endTime
        self.extendedStatistics = extendedStatistics
        self.metricName = metricName
        self.namespace = namespace
        self.period = period
        self.startTime = startTime
        self.statistics = statistics
        self.unit = unit
    }
}

public struct GetMetricStatisticsOutput {
    /// The data points for the specified metric.
    public var datapoints: [CloudWatchClientTypes.Datapoint]?
    /// A label for the specified metric.
    public var label: Swift.String?

    public init(
        datapoints: [CloudWatchClientTypes.Datapoint]? = nil,
        label: Swift.String? = nil
    )
    {
        self.datapoints = datapoints
        self.label = label
    }
}

public struct GetMetricStreamInput {
    /// The name of the metric stream to retrieve information about.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

extension CloudWatchClientTypes {
    /// This structure contains a metric namespace and optionally, a list of metric names, to either include in a metric stream or exclude from a metric stream. A metric stream's filters can include up to 1000 total names. This limit applies to the sum of namespace names and metric names in the filters. For example, this could include 10 metric namespace filters with 99 metrics each, or 20 namespace filters with 49 metrics specified in each filter.
    public struct MetricStreamFilter {
        /// The names of the metrics to either include or exclude from the metric stream. If you omit this parameter, all metrics in the namespace are included or excluded, depending on whether this filter is specified as an exclude filter or an include filter. Each metric name can contain only ASCII printable characters (ASCII range 32 through 126). Each metric name must contain at least one non-whitespace character.
        public var metricNames: [Swift.String]?
        /// The name of the metric namespace for this filter. The namespace can contain only ASCII printable characters (ASCII range 32 through 126). It must contain at least one non-whitespace character.
        public var namespace: Swift.String?

        public init(
            metricNames: [Swift.String]? = nil,
            namespace: Swift.String? = nil
        )
        {
            self.metricNames = metricNames
            self.namespace = namespace
        }
    }

}

extension CloudWatchClientTypes {

    public enum MetricStreamOutputFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case json
        case openTelemetry07
        case openTelemetry10
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricStreamOutputFormat] {
            return [
                .json,
                .openTelemetry07,
                .openTelemetry10
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .json: return "json"
            case .openTelemetry07: return "opentelemetry0.7"
            case .openTelemetry10: return "opentelemetry1.0"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CloudWatchClientTypes {
    /// This object contains the information for one metric that is to be streamed with additional statistics.
    public struct MetricStreamStatisticsMetric {
        /// The name of the metric.
        /// This member is required.
        public var metricName: Swift.String?
        /// The namespace of the metric.
        /// This member is required.
        public var namespace: Swift.String?

        public init(
            metricName: Swift.String? = nil,
            namespace: Swift.String? = nil
        )
        {
            self.metricName = metricName
            self.namespace = namespace
        }
    }

}

extension CloudWatchClientTypes {
    /// By default, a metric stream always sends the MAX, MIN, SUM, and SAMPLECOUNT statistics for each metric that is streamed. This structure contains information for one metric that includes additional statistics in the stream. For more information about statistics, see CloudWatch, listed in [ CloudWatch statistics definitions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html.html).
    public struct MetricStreamStatisticsConfiguration {
        /// The list of additional statistics that are to be streamed for the metrics listed in the IncludeMetrics array in this structure. This list can include as many as 20 statistics. If the OutputFormat for the stream is opentelemetry1.0 or opentelemetry0.7, the only valid values are p??  percentile statistics such as p90, p99 and so on. If the OutputFormat for the stream is json, the valid values include the abbreviations for all of the statistics listed in [ CloudWatch statistics definitions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html.html). For example, this includes tm98, wm90, PR(:300), and so on.
        /// This member is required.
        public var additionalStatistics: [Swift.String]?
        /// An array of metric name and namespace pairs that stream the additional statistics listed in the value of the AdditionalStatistics parameter. There can be as many as 100 pairs in the array. All metrics that match the combination of metric name and namespace will be streamed with the additional statistics, no matter their dimensions.
        /// This member is required.
        public var includeMetrics: [CloudWatchClientTypes.MetricStreamStatisticsMetric]?

        public init(
            additionalStatistics: [Swift.String]? = nil,
            includeMetrics: [CloudWatchClientTypes.MetricStreamStatisticsMetric]? = nil
        )
        {
            self.additionalStatistics = additionalStatistics
            self.includeMetrics = includeMetrics
        }
    }

}

public struct GetMetricStreamOutput {
    /// The ARN of the metric stream.
    public var arn: Swift.String?
    /// The date that the metric stream was created.
    public var creationDate: Foundation.Date?
    /// If this array of metric namespaces is present, then these namespaces are the only metric namespaces that are not streamed by this metric stream. In this case, all other metric namespaces in the account are streamed by this metric stream.
    public var excludeFilters: [CloudWatchClientTypes.MetricStreamFilter]?
    /// The ARN of the Amazon Kinesis Data Firehose delivery stream that is used by this metric stream.
    public var firehoseArn: Swift.String?
    /// If this array of metric namespaces is present, then these namespaces are the only metric namespaces that are streamed by this metric stream.
    public var includeFilters: [CloudWatchClientTypes.MetricStreamFilter]?
    /// If this is true and this metric stream is in a monitoring account, then the stream includes metrics from source accounts that the monitoring account is linked to.
    public var includeLinkedAccountsMetrics: Swift.Bool?
    /// The date of the most recent update to the metric stream's configuration.
    public var lastUpdateDate: Foundation.Date?
    /// The name of the metric stream.
    public var name: Swift.String?
    /// The output format for the stream. Valid values are json, opentelemetry1.0, and opentelemetry0.7. For more information about metric stream output formats, see [Metric streams output formats](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-metric-streams-formats.html).
    public var outputFormat: CloudWatchClientTypes.MetricStreamOutputFormat?
    /// The ARN of the IAM role that is used by this metric stream.
    public var roleArn: Swift.String?
    /// The state of the metric stream. The possible values are running and stopped.
    public var state: Swift.String?
    /// Each entry in this array displays information about one or more metrics that include additional statistics in the metric stream. For more information about the additional statistics, see [ CloudWatch statistics definitions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html.html).
    public var statisticsConfigurations: [CloudWatchClientTypes.MetricStreamStatisticsConfiguration]?

    public init(
        arn: Swift.String? = nil,
        creationDate: Foundation.Date? = nil,
        excludeFilters: [CloudWatchClientTypes.MetricStreamFilter]? = nil,
        firehoseArn: Swift.String? = nil,
        includeFilters: [CloudWatchClientTypes.MetricStreamFilter]? = nil,
        includeLinkedAccountsMetrics: Swift.Bool? = nil,
        lastUpdateDate: Foundation.Date? = nil,
        name: Swift.String? = nil,
        outputFormat: CloudWatchClientTypes.MetricStreamOutputFormat? = nil,
        roleArn: Swift.String? = nil,
        state: Swift.String? = nil,
        statisticsConfigurations: [CloudWatchClientTypes.MetricStreamStatisticsConfiguration]? = nil
    )
    {
        self.arn = arn
        self.creationDate = creationDate
        self.excludeFilters = excludeFilters
        self.firehoseArn = firehoseArn
        self.includeFilters = includeFilters
        self.includeLinkedAccountsMetrics = includeLinkedAccountsMetrics
        self.lastUpdateDate = lastUpdateDate
        self.name = name
        self.outputFormat = outputFormat
        self.roleArn = roleArn
        self.state = state
        self.statisticsConfigurations = statisticsConfigurations
    }
}

public struct GetMetricWidgetImageInput {
    /// A JSON string that defines the bitmap graph to be retrieved. The string includes the metrics to include in the graph, statistics, annotations, title, axis limits, and so on. You can include only one MetricWidget parameter in each GetMetricWidgetImage call. For more information about the syntax of MetricWidget see [GetMetricWidgetImage: Metric Widget Structure and Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Metric-Widget-Structure.html). If any metric on the graph could not load all the requested data points, an orange triangle with an exclamation point appears next to the graph legend.
    /// This member is required.
    public var metricWidget: Swift.String?
    /// The format of the resulting image. Only PNG images are supported. The default is png. If you specify png, the API returns an HTTP response with the content-type set to text/xml. The image data is in a MetricWidgetImage field. For example:  >
    ///
    ///
    ///
    ///
    ///
    ///
    ///     iVBORw0KGgoAAAANSUhEUgAAAlgAAAGQEAYAAAAip...
    ///
    ///
    ///
    ///
    ///
    ///
    ///
    ///
    ///
    ///
    ///
    ///     6f0d4192-4d42-11e8-82c1-f539a07e0e3b
    ///
    ///
    ///
    ///
    /// The image/png setting is intended only for custom HTTP requests. For most use cases, and all actions using an Amazon Web Services SDK, you should use png. If you specify image/png, the HTTP response has a content-type set to image/png, and the body of the response is a PNG image.
    public var outputFormat: Swift.String?

    public init(
        metricWidget: Swift.String? = nil,
        outputFormat: Swift.String? = nil
    )
    {
        self.metricWidget = metricWidget
        self.outputFormat = outputFormat
    }
}

public struct GetMetricWidgetImageOutput {
    /// The image of the graph, in the output format specified. The output is base64-encoded.
    public var metricWidgetImage: Foundation.Data?

    public init(
        metricWidgetImage: Foundation.Data? = nil
    )
    {
        self.metricWidgetImage = metricWidgetImage
    }
}

public struct ListDashboardsInput {
    /// If you specify this parameter, only the dashboards with names starting with the specified string are listed. The maximum length is 255, and valid characters are A-Z, a-z, 0-9, ".", "-", and "_".
    public var dashboardNamePrefix: Swift.String?
    /// The token returned by a previous call to indicate that there is more data available.
    public var nextToken: Swift.String?

    public init(
        dashboardNamePrefix: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.dashboardNamePrefix = dashboardNamePrefix
        self.nextToken = nextToken
    }
}

public struct ListDashboardsOutput {
    /// The list of matching dashboards.
    public var dashboardEntries: [CloudWatchClientTypes.DashboardEntry]?
    /// The token that marks the start of the next batch of returned results.
    public var nextToken: Swift.String?

    public init(
        dashboardEntries: [CloudWatchClientTypes.DashboardEntry]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.dashboardEntries = dashboardEntries
        self.nextToken = nextToken
    }
}

public struct ListManagedInsightRulesInput {
    /// The maximum number of results to return in one operation. If you omit this parameter, the default number is used. The default number is 100.
    public var maxResults: Swift.Int?
    /// Include this value to get the next set of rules if the value was returned by the previous operation.
    public var nextToken: Swift.String?
    /// The ARN of an Amazon Web Services resource that has managed Contributor Insights rules.
    /// This member is required.
    public var resourceARN: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceARN: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceARN = resourceARN
    }
}

extension CloudWatchClientTypes {
    /// The status of a managed Contributor Insights rule.
    public struct ManagedRuleState {
        /// The name of the Contributor Insights rule that contains data for the specified Amazon Web Services resource.
        /// This member is required.
        public var ruleName: Swift.String?
        /// Indicates whether the rule is enabled or disabled.
        /// This member is required.
        public var state: Swift.String?

        public init(
            ruleName: Swift.String? = nil,
            state: Swift.String? = nil
        )
        {
            self.ruleName = ruleName
            self.state = state
        }
    }

}

extension CloudWatchClientTypes {
    /// Contains information about managed Contributor Insights rules, as returned by ListManagedInsightRules.
    public struct ManagedRuleDescription {
        /// If a managed rule is enabled, this is the ARN for the related Amazon Web Services resource.
        public var resourceARN: Swift.String?
        /// Describes the state of a managed rule. If present, it contains information about the Contributor Insights rule that contains information about the related Amazon Web Services resource.
        public var ruleState: CloudWatchClientTypes.ManagedRuleState?
        /// The template name for the managed rule. Used to enable managed rules using PutManagedInsightRules.
        public var templateName: Swift.String?

        public init(
            resourceARN: Swift.String? = nil,
            ruleState: CloudWatchClientTypes.ManagedRuleState? = nil,
            templateName: Swift.String? = nil
        )
        {
            self.resourceARN = resourceARN
            self.ruleState = ruleState
            self.templateName = templateName
        }
    }

}

public struct ListManagedInsightRulesOutput {
    /// The managed rules that are available for the specified Amazon Web Services resource.
    public var managedRules: [CloudWatchClientTypes.ManagedRuleDescription]?
    /// Include this value to get the next set of rules if the value was returned by the previous operation.
    public var nextToken: Swift.String?

    public init(
        managedRules: [CloudWatchClientTypes.ManagedRuleDescription]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.managedRules = managedRules
        self.nextToken = nextToken
    }
}

extension CloudWatchClientTypes {

    public enum RecentlyActive: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case pt3h
        case sdkUnknown(Swift.String)

        public static var allCases: [RecentlyActive] {
            return [
                .pt3h
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .pt3h: return "PT3H"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListMetricsInput {
    /// The dimensions to filter against. Only the dimensions that match exactly will be returned.
    public var dimensions: [CloudWatchClientTypes.DimensionFilter]?
    /// If you are using this operation in a monitoring account, specify true to include metrics from source accounts in the returned data. The default is false.
    public var includeLinkedAccounts: Swift.Bool?
    /// The name of the metric to filter against. Only the metrics with names that match exactly will be returned.
    public var metricName: Swift.String?
    /// The metric namespace to filter against. Only the namespace that matches exactly will be returned.
    public var namespace: Swift.String?
    /// The token returned by a previous call to indicate that there is more data available.
    public var nextToken: Swift.String?
    /// When you use this operation in a monitoring account, use this field to return metrics only from one source account. To do so, specify that source account ID in this field, and also specify true for IncludeLinkedAccounts.
    public var owningAccount: Swift.String?
    /// To filter the results to show only metrics that have had data points published in the past three hours, specify this parameter with a value of PT3H. This is the only valid value for this parameter. The results that are returned are an approximation of the value you specify. There is a low probability that the returned results include metrics with last published data as much as 40 minutes more than the specified time interval.
    public var recentlyActive: CloudWatchClientTypes.RecentlyActive?

    public init(
        dimensions: [CloudWatchClientTypes.DimensionFilter]? = nil,
        includeLinkedAccounts: Swift.Bool? = nil,
        metricName: Swift.String? = nil,
        namespace: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        owningAccount: Swift.String? = nil,
        recentlyActive: CloudWatchClientTypes.RecentlyActive? = nil
    )
    {
        self.dimensions = dimensions
        self.includeLinkedAccounts = includeLinkedAccounts
        self.metricName = metricName
        self.namespace = namespace
        self.nextToken = nextToken
        self.owningAccount = owningAccount
        self.recentlyActive = recentlyActive
    }
}

public struct ListMetricsOutput {
    /// The metrics that match your request.
    public var metrics: [CloudWatchClientTypes.Metric]?
    /// The token that marks the start of the next batch of returned results.
    public var nextToken: Swift.String?
    /// If you are using this operation in a monitoring account, this array contains the account IDs of the source accounts where the metrics in the returned data are from. This field is a 1:1 mapping between each metric that is returned and the ID of the owning account.
    public var owningAccounts: [Swift.String]?

    public init(
        metrics: [CloudWatchClientTypes.Metric]? = nil,
        nextToken: Swift.String? = nil,
        owningAccounts: [Swift.String]? = nil
    )
    {
        self.metrics = metrics
        self.nextToken = nextToken
        self.owningAccounts = owningAccounts
    }
}

public struct ListMetricStreamsInput {
    /// The maximum number of results to return in one operation.
    public var maxResults: Swift.Int?
    /// Include this value, if it was returned by the previous call, to get the next set of metric streams.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension CloudWatchClientTypes {
    /// This structure contains the configuration information about one metric stream.
    public struct MetricStreamEntry {
        /// The ARN of the metric stream.
        public var arn: Swift.String?
        /// The date that the metric stream was originally created.
        public var creationDate: Foundation.Date?
        /// The ARN of the Kinesis Firehose devlivery stream that is used for this metric stream.
        public var firehoseArn: Swift.String?
        /// The date that the configuration of this metric stream was most recently updated.
        public var lastUpdateDate: Foundation.Date?
        /// The name of the metric stream.
        public var name: Swift.String?
        /// The output format of this metric stream. Valid values are json, opentelemetry1.0, and opentelemetry0.7.
        public var outputFormat: CloudWatchClientTypes.MetricStreamOutputFormat?
        /// The current state of this stream. Valid values are running and stopped.
        public var state: Swift.String?

        public init(
            arn: Swift.String? = nil,
            creationDate: Foundation.Date? = nil,
            firehoseArn: Swift.String? = nil,
            lastUpdateDate: Foundation.Date? = nil,
            name: Swift.String? = nil,
            outputFormat: CloudWatchClientTypes.MetricStreamOutputFormat? = nil,
            state: Swift.String? = nil
        )
        {
            self.arn = arn
            self.creationDate = creationDate
            self.firehoseArn = firehoseArn
            self.lastUpdateDate = lastUpdateDate
            self.name = name
            self.outputFormat = outputFormat
            self.state = state
        }
    }

}

public struct ListMetricStreamsOutput {
    /// The array of metric stream information.
    public var entries: [CloudWatchClientTypes.MetricStreamEntry]?
    /// The token that marks the start of the next batch of returned results. You can use this token in a subsequent operation to get the next batch of results.
    public var nextToken: Swift.String?

    public init(
        entries: [CloudWatchClientTypes.MetricStreamEntry]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.entries = entries
        self.nextToken = nextToken
    }
}

public struct ListTagsForResourceInput {
    /// The ARN of the CloudWatch resource that you want to view tags for. The ARN format of an alarm is arn:aws:cloudwatch:Region:account-id:alarm:alarm-name  The ARN format of a Contributor Insights rule is arn:aws:cloudwatch:Region:account-id:insight-rule/insight-rule-name  For more information about ARN format, see [ Resource Types Defined by Amazon CloudWatch](https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazoncloudwatch.html#amazoncloudwatch-resources-for-iam-policies) in the Amazon Web Services General Reference.
    /// This member is required.
    public var resourceARN: Swift.String?

    public init(
        resourceARN: Swift.String? = nil
    )
    {
        self.resourceARN = resourceARN
    }
}

extension CloudWatchClientTypes {
    /// A key-value pair associated with a CloudWatch resource.
    public struct Tag {
        /// A string that you can use to assign a value. The combination of tag keys and values can help you organize and categorize your resources.
        /// This member is required.
        public var key: Swift.String?
        /// The value for the specified tag key.
        /// This member is required.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

public struct ListTagsForResourceOutput {
    /// The list of tag keys and values associated with the resource you specified.
    public var tags: [CloudWatchClientTypes.Tag]?

    public init(
        tags: [CloudWatchClientTypes.Tag]? = nil
    )
    {
        self.tags = tags
    }
}

public struct PutAnomalyDetectorInput {
    /// The configuration specifies details about how the anomaly detection model is to be trained, including time ranges to exclude when training and updating the model. You can specify as many as 10 time ranges. The configuration can also include the time zone to use for the metric.
    public var configuration: CloudWatchClientTypes.AnomalyDetectorConfiguration?
    /// The metric dimensions to create the anomaly detection model for.
    @available(*, deprecated, message: "Use SingleMetricAnomalyDetector.")
    public var dimensions: [CloudWatchClientTypes.Dimension]?
    /// Use this object to include parameters to provide information about your metric to CloudWatch to help it build more accurate anomaly detection models. Currently, it includes the PeriodicSpikes parameter.
    public var metricCharacteristics: CloudWatchClientTypes.MetricCharacteristics?
    /// The metric math anomaly detector to be created. When using MetricMathAnomalyDetector, you cannot include the following parameters in the same operation:
    ///
    /// * Dimensions
    ///
    /// * MetricName
    ///
    /// * Namespace
    ///
    /// * Stat
    ///
    /// * the SingleMetricAnomalyDetector parameters of PutAnomalyDetectorInput
    ///
    ///
    /// Instead, specify the metric math anomaly detector attributes as part of the property MetricMathAnomalyDetector.
    public var metricMathAnomalyDetector: CloudWatchClientTypes.MetricMathAnomalyDetector?
    /// The name of the metric to create the anomaly detection model for.
    @available(*, deprecated, message: "Use SingleMetricAnomalyDetector.")
    public var metricName: Swift.String?
    /// The namespace of the metric to create the anomaly detection model for.
    @available(*, deprecated, message: "Use SingleMetricAnomalyDetector.")
    public var namespace: Swift.String?
    /// A single metric anomaly detector to be created. When using SingleMetricAnomalyDetector, you cannot include the following parameters in the same operation:
    ///
    /// * Dimensions
    ///
    /// * MetricName
    ///
    /// * Namespace
    ///
    /// * Stat
    ///
    /// * the MetricMathAnomalyDetector parameters of PutAnomalyDetectorInput
    ///
    ///
    /// Instead, specify the single metric anomaly detector attributes as part of the property SingleMetricAnomalyDetector.
    public var singleMetricAnomalyDetector: CloudWatchClientTypes.SingleMetricAnomalyDetector?
    /// The statistic to use for the metric and the anomaly detection model.
    @available(*, deprecated, message: "Use SingleMetricAnomalyDetector.")
    public var stat: Swift.String?

    public init(
        configuration: CloudWatchClientTypes.AnomalyDetectorConfiguration? = nil,
        dimensions: [CloudWatchClientTypes.Dimension]? = nil,
        metricCharacteristics: CloudWatchClientTypes.MetricCharacteristics? = nil,
        metricMathAnomalyDetector: CloudWatchClientTypes.MetricMathAnomalyDetector? = nil,
        metricName: Swift.String? = nil,
        namespace: Swift.String? = nil,
        singleMetricAnomalyDetector: CloudWatchClientTypes.SingleMetricAnomalyDetector? = nil,
        stat: Swift.String? = nil
    )
    {
        self.configuration = configuration
        self.dimensions = dimensions
        self.metricCharacteristics = metricCharacteristics
        self.metricMathAnomalyDetector = metricMathAnomalyDetector
        self.metricName = metricName
        self.namespace = namespace
        self.singleMetricAnomalyDetector = singleMetricAnomalyDetector
        self.stat = stat
    }
}

public struct PutAnomalyDetectorOutput {

    public init() { }
}

/// The quota for alarms for this customer has already been reached.
public struct LimitExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        ///
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LimitExceeded" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct PutCompositeAlarmInput {
    /// Indicates whether actions should be executed during any changes to the alarm state of the composite alarm. The default is TRUE.
    public var actionsEnabled: Swift.Bool?
    /// Actions will be suppressed if the suppressor alarm is in the ALARM state. ActionsSuppressor can be an AlarmName or an Amazon Resource Name (ARN) from an existing alarm.
    public var actionsSuppressor: Swift.String?
    /// The maximum time in seconds that the composite alarm waits after suppressor alarm goes out of the ALARM state. After this time, the composite alarm performs its actions. ExtensionPeriod is required only when ActionsSuppressor is specified.
    public var actionsSuppressorExtensionPeriod: Swift.Int?
    /// The maximum time in seconds that the composite alarm waits for the suppressor alarm to go into the ALARM state. After this time, the composite alarm performs its actions. WaitPeriod is required only when ActionsSuppressor is specified.
    public var actionsSuppressorWaitPeriod: Swift.Int?
    /// The actions to execute when this alarm transitions to the ALARM state from any other state. Each action is specified as an Amazon Resource Name (ARN). Valid Values: ] Amazon SNS actions: arn:aws:sns:region:account-id:sns-topic-name  Lambda actions:
    ///
    /// * Invoke the latest version of a Lambda function: arn:aws:lambda:region:account-id:function:function-name
    ///
    /// * Invoke a specific version of a Lambda function: arn:aws:lambda:region:account-id:function:function-name:version-number
    ///
    /// * Invoke a function by using an alias Lambda function: arn:aws:lambda:region:account-id:function:function-name:alias-name
    ///
    ///
    /// Systems Manager actions: arn:aws:ssm:region:account-id:opsitem:severity
    public var alarmActions: [Swift.String]?
    /// The description for the composite alarm.
    public var alarmDescription: Swift.String?
    /// The name for the composite alarm. This name must be unique within the Region.
    /// This member is required.
    public var alarmName: Swift.String?
    /// An expression that specifies which other alarms are to be evaluated to determine this composite alarm's state. For each alarm that you reference, you designate a function that specifies whether that alarm needs to be in ALARM state, OK state, or INSUFFICIENT_DATA state. You can use operators (AND, OR and NOT) to combine multiple functions in a single expression. You can use parenthesis to logically group the functions in your expression. You can use either alarm names or ARNs to reference the other alarms that are to be evaluated. Functions can include the following:
    ///
    /// * ALARM("alarm-name or alarm-ARN") is TRUE if the named alarm is in ALARM state.
    ///
    /// * OK("alarm-name or alarm-ARN") is TRUE if the named alarm is in OK state.
    ///
    /// * INSUFFICIENT_DATA("alarm-name or alarm-ARN") is TRUE if the named alarm is in INSUFFICIENT_DATA state.
    ///
    /// * TRUE always evaluates to TRUE.
    ///
    /// * FALSE always evaluates to FALSE.
    ///
    ///
    /// TRUE and FALSE are useful for testing a complex AlarmRule structure, and for testing your alarm actions. Alarm names specified in AlarmRule can be surrounded with double-quotes ("), but do not have to be. The following are some examples of AlarmRule:
    ///
    /// * ALARM(CPUUtilizationTooHigh) AND ALARM(DiskReadOpsTooHigh) specifies that the composite alarm goes into ALARM state only if both CPUUtilizationTooHigh and DiskReadOpsTooHigh alarms are in ALARM state.
    ///
    /// * ALARM(CPUUtilizationTooHigh) AND NOT ALARM(DeploymentInProgress) specifies that the alarm goes to ALARM state if CPUUtilizationTooHigh is in ALARM state and DeploymentInProgress is not in ALARM state. This example reduces alarm noise during a known deployment window.
    ///
    /// * (ALARM(CPUUtilizationTooHigh) OR ALARM(DiskReadOpsTooHigh)) AND OK(NetworkOutTooHigh) goes into ALARM state if CPUUtilizationTooHigh OR DiskReadOpsTooHigh is in ALARM state, and if NetworkOutTooHigh is in OK state. This provides another example of using a composite alarm to prevent noise. This rule ensures that you are not notified with an alarm action on high CPU or disk usage if a known network problem is also occurring.
    ///
    ///
    /// The AlarmRule can specify as many as 100 "children" alarms. The AlarmRule expression can have as many as 500 elements. Elements are child alarms, TRUE or FALSE statements, and parentheses.
    /// This member is required.
    public var alarmRule: Swift.String?
    /// The actions to execute when this alarm transitions to the INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Name (ARN). Valid Values: ] Amazon SNS actions: arn:aws:sns:region:account-id:sns-topic-name  Lambda actions:
    ///
    /// * Invoke the latest version of a Lambda function: arn:aws:lambda:region:account-id:function:function-name
    ///
    /// * Invoke a specific version of a Lambda function: arn:aws:lambda:region:account-id:function:function-name:version-number
    ///
    /// * Invoke a function by using an alias Lambda function: arn:aws:lambda:region:account-id:function:function-name:alias-name
    public var insufficientDataActions: [Swift.String]?
    /// The actions to execute when this alarm transitions to an OK state from any other state. Each action is specified as an Amazon Resource Name (ARN). Valid Values: ] Amazon SNS actions: arn:aws:sns:region:account-id:sns-topic-name  Lambda actions:
    ///
    /// * Invoke the latest version of a Lambda function: arn:aws:lambda:region:account-id:function:function-name
    ///
    /// * Invoke a specific version of a Lambda function: arn:aws:lambda:region:account-id:function:function-name:version-number
    ///
    /// * Invoke a function by using an alias Lambda function: arn:aws:lambda:region:account-id:function:function-name:alias-name
    public var okActions: [Swift.String]?
    /// A list of key-value pairs to associate with the alarm. You can associate as many as 50 tags with an alarm. To be able to associate tags with the alarm when you create the alarm, you must have the cloudwatch:TagResource permission. Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values. If you are using this operation to update an existing alarm, any tags you specify in this parameter are ignored. To change the tags of an existing alarm, use [TagResource](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_TagResource.html) or [UntagResource](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_UntagResource.html).
    public var tags: [CloudWatchClientTypes.Tag]?

    public init(
        actionsEnabled: Swift.Bool? = nil,
        actionsSuppressor: Swift.String? = nil,
        actionsSuppressorExtensionPeriod: Swift.Int? = nil,
        actionsSuppressorWaitPeriod: Swift.Int? = nil,
        alarmActions: [Swift.String]? = nil,
        alarmDescription: Swift.String? = nil,
        alarmName: Swift.String? = nil,
        alarmRule: Swift.String? = nil,
        insufficientDataActions: [Swift.String]? = nil,
        okActions: [Swift.String]? = nil,
        tags: [CloudWatchClientTypes.Tag]? = nil
    )
    {
        self.actionsEnabled = actionsEnabled
        self.actionsSuppressor = actionsSuppressor
        self.actionsSuppressorExtensionPeriod = actionsSuppressorExtensionPeriod
        self.actionsSuppressorWaitPeriod = actionsSuppressorWaitPeriod
        self.alarmActions = alarmActions
        self.alarmDescription = alarmDescription
        self.alarmName = alarmName
        self.alarmRule = alarmRule
        self.insufficientDataActions = insufficientDataActions
        self.okActions = okActions
        self.tags = tags
    }
}

public struct PutDashboardInput {
    /// The detailed information about the dashboard in JSON format, including the widgets to include and their location on the dashboard. This parameter is required. For more information about the syntax, see [Dashboard Body Structure and Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html).
    /// This member is required.
    public var dashboardBody: Swift.String?
    /// The name of the dashboard. If a dashboard with this name already exists, this call modifies that dashboard, replacing its current contents. Otherwise, a new dashboard is created. The maximum length is 255, and valid characters are A-Z, a-z, 0-9, "-", and "_". This parameter is required.
    /// This member is required.
    public var dashboardName: Swift.String?

    public init(
        dashboardBody: Swift.String? = nil,
        dashboardName: Swift.String? = nil
    )
    {
        self.dashboardBody = dashboardBody
        self.dashboardName = dashboardName
    }
}

public struct PutDashboardOutput {
    /// If the input for PutDashboard was correct and the dashboard was successfully created or modified, this result is empty. If this result includes only warning messages, then the input was valid enough for the dashboard to be created or modified, but some elements of the dashboard might not render. If this result includes error messages, the input was not valid and the operation failed.
    public var dashboardValidationMessages: [CloudWatchClientTypes.DashboardValidationMessage]?

    public init(
        dashboardValidationMessages: [CloudWatchClientTypes.DashboardValidationMessage]? = nil
    )
    {
        self.dashboardValidationMessages = dashboardValidationMessages
    }
}

public struct PutInsightRuleInput {
    /// The definition of the rule, as a JSON object. For details on the valid syntax, see [Contributor Insights Rule Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContributorInsights-RuleSyntax.html).
    /// This member is required.
    public var ruleDefinition: Swift.String?
    /// A unique name for the rule.
    /// This member is required.
    public var ruleName: Swift.String?
    /// The state of the rule. Valid values are ENABLED and DISABLED.
    public var ruleState: Swift.String?
    /// A list of key-value pairs to associate with the Contributor Insights rule. You can associate as many as 50 tags with a rule. Tags can help you organize and categorize your resources. You can also use them to scope user permissions, by granting a user permission to access or change only the resources that have certain tag values. To be able to associate tags with a rule, you must have the cloudwatch:TagResource permission in addition to the cloudwatch:PutInsightRule permission. If you are using this operation to update an existing Contributor Insights rule, any tags you specify in this parameter are ignored. To change the tags of an existing rule, use [TagResource](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_TagResource.html).
    public var tags: [CloudWatchClientTypes.Tag]?

    public init(
        ruleDefinition: Swift.String? = nil,
        ruleName: Swift.String? = nil,
        ruleState: Swift.String? = nil,
        tags: [CloudWatchClientTypes.Tag]? = nil
    )
    {
        self.ruleDefinition = ruleDefinition
        self.ruleName = ruleName
        self.ruleState = ruleState
        self.tags = tags
    }
}

public struct PutInsightRuleOutput {

    public init() { }
}

extension CloudWatchClientTypes {
    /// Contains the information that's required to enable a managed Contributor Insights rule for an Amazon Web Services resource.
    public struct ManagedRule {
        /// The ARN of an Amazon Web Services resource that has managed Contributor Insights rules.
        /// This member is required.
        public var resourceARN: Swift.String?
        /// A list of key-value pairs that you can associate with a managed Contributor Insights rule. You can associate as many as 50 tags with a rule. Tags can help you organize and categorize your resources. You also can use them to scope user permissions by granting a user permission to access or change only the resources that have certain tag values. To associate tags with a rule, you must have the cloudwatch:TagResource permission in addition to the cloudwatch:PutInsightRule permission. If you are using this operation to update an existing Contributor Insights rule, any tags that you specify in this parameter are ignored. To change the tags of an existing rule, use TagResource.
        public var tags: [CloudWatchClientTypes.Tag]?
        /// The template name for the managed Contributor Insights rule, as returned by ListManagedInsightRules.
        /// This member is required.
        public var templateName: Swift.String?

        public init(
            resourceARN: Swift.String? = nil,
            tags: [CloudWatchClientTypes.Tag]? = nil,
            templateName: Swift.String? = nil
        )
        {
            self.resourceARN = resourceARN
            self.tags = tags
            self.templateName = templateName
        }
    }

}

public struct PutManagedInsightRulesInput {
    /// A list of ManagedRules to enable.
    /// This member is required.
    public var managedRules: [CloudWatchClientTypes.ManagedRule]?

    public init(
        managedRules: [CloudWatchClientTypes.ManagedRule]? = nil
    )
    {
        self.managedRules = managedRules
    }
}

public struct PutManagedInsightRulesOutput {
    /// An array that lists the rules that could not be enabled.
    public var failures: [CloudWatchClientTypes.PartialFailure]?

    public init(
        failures: [CloudWatchClientTypes.PartialFailure]? = nil
    )
    {
        self.failures = failures
    }
}

public struct PutMetricAlarmInput {
    /// Indicates whether actions should be executed during any changes to the alarm state. The default is TRUE.
    public var actionsEnabled: Swift.Bool?
    /// The actions to execute when this alarm transitions to the ALARM state from any other state. Each action is specified as an Amazon Resource Name (ARN). Valid values: EC2 actions:
    ///
    /// * arn:aws:automate:region:ec2:stop
    ///
    /// * arn:aws:automate:region:ec2:terminate
    ///
    /// * arn:aws:automate:region:ec2:reboot
    ///
    /// * arn:aws:automate:region:ec2:recover
    ///
    /// * arn:aws:swf:region:account-id:action/actions/AWS_EC2.InstanceId.Stop/1.0
    ///
    /// * arn:aws:swf:region:account-id:action/actions/AWS_EC2.InstanceId.Terminate/1.0
    ///
    /// * arn:aws:swf:region:account-id:action/actions/AWS_EC2.InstanceId.Reboot/1.0
    ///
    /// * arn:aws:swf:region:account-id:action/actions/AWS_EC2.InstanceId.Recover/1.0
    ///
    ///
    /// Autoscaling action:
    ///
    /// * arn:aws:autoscaling:region:account-id:scalingPolicy:policy-id:autoScalingGroupName/group-friendly-name:policyName/policy-friendly-name
    ///
    ///
    /// Lambda actions:
    ///
    /// * Invoke the latest version of a Lambda function: arn:aws:lambda:region:account-id:function:function-name
    ///
    /// * Invoke a specific version of a Lambda function: arn:aws:lambda:region:account-id:function:function-name:version-number
    ///
    /// * Invoke a function by using an alias Lambda function: arn:aws:lambda:region:account-id:function:function-name:alias-name
    ///
    ///
    /// SNS notification action:
    ///
    /// * arn:aws:sns:region:account-id:sns-topic-name
    ///
    ///
    /// SSM integration actions:
    ///
    /// * arn:aws:ssm:region:account-id:opsitem:severity#CATEGORY=category-name
    ///
    /// * arn:aws:ssm-incidents::account-id:responseplan/response-plan-name
    public var alarmActions: [Swift.String]?
    /// The description for the alarm.
    public var alarmDescription: Swift.String?
    /// The name for the alarm. This name must be unique within the Region. The name must contain only UTF-8 characters, and can't contain ASCII control characters
    /// This member is required.
    public var alarmName: Swift.String?
    /// The arithmetic operation to use when comparing the specified statistic and threshold. The specified statistic value is used as the first operand. The values LessThanLowerOrGreaterThanUpperThreshold, LessThanLowerThreshold, and GreaterThanUpperThreshold are used only for alarms based on anomaly detection models.
    /// This member is required.
    public var comparisonOperator: CloudWatchClientTypes.ComparisonOperator?
    /// The number of data points that must be breaching to trigger the alarm. This is used only if you are setting an "M out of N" alarm. In that case, this value is the M. For more information, see [Evaluating an Alarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarm-evaluation) in the Amazon CloudWatch User Guide.
    public var datapointsToAlarm: Swift.Int?
    /// The dimensions for the metric specified in MetricName.
    public var dimensions: [CloudWatchClientTypes.Dimension]?
    /// Used only for alarms based on percentiles. If you specify ignore, the alarm state does not change during periods with too few data points to be statistically significant. If you specify evaluate or omit this parameter, the alarm is always evaluated and possibly changes state no matter how many data points are available. For more information, see [Percentile-Based CloudWatch Alarms and Low Data Samples](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#percentiles-with-low-samples). Valid Values: evaluate | ignore
    public var evaluateLowSampleCountPercentile: Swift.String?
    /// The number of periods over which data is compared to the specified threshold. If you are setting an alarm that requires that a number of consecutive data points be breaching to trigger the alarm, this value specifies that number. If you are setting an "M out of N" alarm, this value is the N. An alarm's total current evaluation period can be no longer than one day, so this number multiplied by Period cannot be more than 86,400 seconds.
    /// This member is required.
    public var evaluationPeriods: Swift.Int?
    /// The extended statistic for the metric specified in MetricName. When you call PutMetricAlarm and specify a MetricName, you must specify either Statistic or ExtendedStatistic but not both. If you specify ExtendedStatistic, the following are valid values:
    ///
    /// * p90
    ///
    /// * tm90
    ///
    /// * tc90
    ///
    /// * ts90
    ///
    /// * wm90
    ///
    /// * IQM
    ///
    /// * PR(n:m) where n and m are values of the metric
    ///
    /// * TC(X%:X%) where X is between 10 and 90 inclusive.
    ///
    /// * TM(X%:X%) where X is between 10 and 90 inclusive.
    ///
    /// * TS(X%:X%) where X is between 10 and 90 inclusive.
    ///
    /// * WM(X%:X%) where X is between 10 and 90 inclusive.
    ///
    ///
    /// For more information about these extended statistics, see [CloudWatch statistics definitions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html).
    public var extendedStatistic: Swift.String?
    /// The actions to execute when this alarm transitions to the INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Name (ARN). Valid values: EC2 actions:
    ///
    /// * arn:aws:automate:region:ec2:stop
    ///
    /// * arn:aws:automate:region:ec2:terminate
    ///
    /// * arn:aws:automate:region:ec2:reboot
    ///
    /// * arn:aws:automate:region:ec2:recover
    ///
    /// * arn:aws:swf:region:account-id:action/actions/AWS_EC2.InstanceId.Stop/1.0
    ///
    /// * arn:aws:swf:region:account-id:action/actions/AWS_EC2.InstanceId.Terminate/1.0
    ///
    /// * arn:aws:swf:region:account-id:action/actions/AWS_EC2.InstanceId.Reboot/1.0
    ///
    /// * arn:aws:swf:region:account-id:action/actions/AWS_EC2.InstanceId.Recover/1.0
    ///
    ///
    /// Autoscaling action:
    ///
    /// * arn:aws:autoscaling:region:account-id:scalingPolicy:policy-id:autoScalingGroupName/group-friendly-name:policyName/policy-friendly-name
    ///
    ///
    /// Lambda actions:
    ///
    /// * Invoke the latest version of a Lambda function: arn:aws:lambda:region:account-id:function:function-name
    ///
    /// * Invoke a specific version of a Lambda function: arn:aws:lambda:region:account-id:function:function-name:version-number
    ///
    /// * Invoke a function by using an alias Lambda function: arn:aws:lambda:region:account-id:function:function-name:alias-name
    ///
    ///
    /// SNS notification action:
    ///
    /// * arn:aws:sns:region:account-id:sns-topic-name
    ///
    ///
    /// SSM integration actions:
    ///
    /// * arn:aws:ssm:region:account-id:opsitem:severity#CATEGORY=category-name
    ///
    /// * arn:aws:ssm-incidents::account-id:responseplan/response-plan-name
    public var insufficientDataActions: [Swift.String]?
    /// The name for the metric associated with the alarm. For each PutMetricAlarm operation, you must specify either MetricName or a Metrics array. If you are creating an alarm based on a math expression, you cannot specify this parameter, or any of the Namespace, Dimensions, Period, Unit, Statistic, or ExtendedStatistic parameters. Instead, you specify all this information in the Metrics array.
    public var metricName: Swift.String?
    /// An array of MetricDataQuery structures that enable you to create an alarm based on the result of a metric math expression. For each PutMetricAlarm operation, you must specify either MetricName or a Metrics array. Each item in the Metrics array either retrieves a metric or performs a math expression. One item in the Metrics array is the expression that the alarm watches. You designate this expression by setting ReturnData to true for this object in the array. For more information, see [MetricDataQuery](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_MetricDataQuery.html). If you use the Metrics parameter, you cannot include the Namespace, MetricName, Dimensions, Period, Unit, Statistic, or ExtendedStatistic parameters of PutMetricAlarm in the same operation. Instead, you retrieve the metrics you are using in your math expression as part of the Metrics array.
    public var metrics: [CloudWatchClientTypes.MetricDataQuery]?
    /// The namespace for the metric associated specified in MetricName.
    public var namespace: Swift.String?
    /// The actions to execute when this alarm transitions to an OK state from any other state. Each action is specified as an Amazon Resource Name (ARN). Valid values: EC2 actions:
    ///
    /// * arn:aws:automate:region:ec2:stop
    ///
    /// * arn:aws:automate:region:ec2:terminate
    ///
    /// * arn:aws:automate:region:ec2:reboot
    ///
    /// * arn:aws:automate:region:ec2:recover
    ///
    /// * arn:aws:swf:region:account-id:action/actions/AWS_EC2.InstanceId.Stop/1.0
    ///
    /// * arn:aws:swf:region:account-id:action/actions/AWS_EC2.InstanceId.Terminate/1.0
    ///
    /// * arn:aws:swf:region:account-id:action/actions/AWS_EC2.InstanceId.Reboot/1.0
    ///
    /// * arn:aws:swf:region:account-id:action/actions/AWS_EC2.InstanceId.Recover/1.0
    ///
    ///
    /// Autoscaling action:
    ///
    /// * arn:aws:autoscaling:region:account-id:scalingPolicy:policy-id:autoScalingGroupName/group-friendly-name:policyName/policy-friendly-name
    ///
    ///
    /// Lambda actions:
    ///
    /// * Invoke the latest version of a Lambda function: arn:aws:lambda:region:account-id:function:function-name
    ///
    /// * Invoke a specific version of a Lambda function: arn:aws:lambda:region:account-id:function:function-name:version-number
    ///
    /// * Invoke a function by using an alias Lambda function: arn:aws:lambda:region:account-id:function:function-name:alias-name
    ///
    ///
    /// SNS notification action:
    ///
    /// * arn:aws:sns:region:account-id:sns-topic-name
    ///
    ///
    /// SSM integration actions:
    ///
    /// * arn:aws:ssm:region:account-id:opsitem:severity#CATEGORY=category-name
    ///
    /// * arn:aws:ssm-incidents::account-id:responseplan/response-plan-name
    public var okActions: [Swift.String]?
    /// The length, in seconds, used each time the metric specified in MetricName is evaluated. Valid values are 10, 30, and any multiple of 60. Period is required for alarms based on static thresholds. If you are creating an alarm based on a metric math expression, you specify the period for each metric within the objects in the Metrics array. Be sure to specify 10 or 30 only for metrics that are stored by a PutMetricData call with a StorageResolution of 1. If you specify a period of 10 or 30 for a metric that does not have sub-minute resolution, the alarm still attempts to gather data at the period rate that you specify. In this case, it does not receive data for the attempts that do not correspond to a one-minute data resolution, and the alarm might often lapse into INSUFFICENT_DATA status. Specifying 10 or 30 also sets this alarm as a high-resolution alarm, which has a higher charge than other alarms. For more information about pricing, see [Amazon CloudWatch Pricing](https://aws.amazon.com/cloudwatch/pricing/). An alarm's total current evaluation period can be no longer than one day, so Period multiplied by EvaluationPeriods cannot be more than 86,400 seconds.
    public var period: Swift.Int?
    /// The statistic for the metric specified in MetricName, other than percentile. For percentile statistics, use ExtendedStatistic. When you call PutMetricAlarm and specify a MetricName, you must specify either Statistic or ExtendedStatistic, but not both.
    public var statistic: CloudWatchClientTypes.Statistic?
    /// A list of key-value pairs to associate with the alarm. You can associate as many as 50 tags with an alarm. To be able to associate tags with the alarm when you create the alarm, you must have the cloudwatch:TagResource permission. Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values. If you are using this operation to update an existing alarm, any tags you specify in this parameter are ignored. To change the tags of an existing alarm, use [TagResource](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_TagResource.html) or [UntagResource](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_UntagResource.html).
    public var tags: [CloudWatchClientTypes.Tag]?
    /// The value against which the specified statistic is compared. This parameter is required for alarms based on static thresholds, but should not be used for alarms based on anomaly detection models.
    public var threshold: Swift.Double?
    /// If this is an alarm based on an anomaly detection model, make this value match the ID of the ANOMALY_DETECTION_BAND function. For an example of how to use this parameter, see the Anomaly Detection Model Alarm example on this page. If your alarm uses this parameter, it cannot have Auto Scaling actions.
    public var thresholdMetricId: Swift.String?
    /// Sets how this alarm is to handle missing data points. If TreatMissingData is omitted, the default behavior of missing is used. For more information, see [Configuring How CloudWatch Alarms Treats Missing Data](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarms-and-missing-data). Valid Values: breaching | notBreaching | ignore | missing Alarms that evaluate metrics in the AWS/DynamoDB namespace always ignore missing data even if you choose a different option for TreatMissingData. When an AWS/DynamoDB metric has missing data, alarms that evaluate that metric remain in their current state.
    public var treatMissingData: Swift.String?
    /// The unit of measure for the statistic. For example, the units for the Amazon EC2 NetworkIn metric are Bytes because NetworkIn tracks the number of bytes that an instance receives on all network interfaces. You can also specify a unit when you create a custom metric. Units help provide conceptual meaning to your data. Metric data points that specify a unit of measure, such as Percent, are aggregated separately. If you are creating an alarm based on a metric math expression, you can specify the unit for each metric (if needed) within the objects in the Metrics array. If you don't specify Unit, CloudWatch retrieves all unit types that have been published for the metric and attempts to evaluate the alarm. Usually, metrics are published with only one unit, so the alarm works as intended. However, if the metric is published with multiple types of units and you don't specify a unit, the alarm's behavior is not defined and it behaves unpredictably. We recommend omitting Unit so that you don't inadvertently specify an incorrect unit that is not published for this metric. Doing so causes the alarm to be stuck in the INSUFFICIENT DATA state.
    public var unit: CloudWatchClientTypes.StandardUnit?

    public init(
        actionsEnabled: Swift.Bool? = nil,
        alarmActions: [Swift.String]? = nil,
        alarmDescription: Swift.String? = nil,
        alarmName: Swift.String? = nil,
        comparisonOperator: CloudWatchClientTypes.ComparisonOperator? = nil,
        datapointsToAlarm: Swift.Int? = nil,
        dimensions: [CloudWatchClientTypes.Dimension]? = nil,
        evaluateLowSampleCountPercentile: Swift.String? = nil,
        evaluationPeriods: Swift.Int? = nil,
        extendedStatistic: Swift.String? = nil,
        insufficientDataActions: [Swift.String]? = nil,
        metricName: Swift.String? = nil,
        metrics: [CloudWatchClientTypes.MetricDataQuery]? = nil,
        namespace: Swift.String? = nil,
        okActions: [Swift.String]? = nil,
        period: Swift.Int? = nil,
        statistic: CloudWatchClientTypes.Statistic? = nil,
        tags: [CloudWatchClientTypes.Tag]? = nil,
        threshold: Swift.Double? = nil,
        thresholdMetricId: Swift.String? = nil,
        treatMissingData: Swift.String? = nil,
        unit: CloudWatchClientTypes.StandardUnit? = nil
    )
    {
        self.actionsEnabled = actionsEnabled
        self.alarmActions = alarmActions
        self.alarmDescription = alarmDescription
        self.alarmName = alarmName
        self.comparisonOperator = comparisonOperator
        self.datapointsToAlarm = datapointsToAlarm
        self.dimensions = dimensions
        self.evaluateLowSampleCountPercentile = evaluateLowSampleCountPercentile
        self.evaluationPeriods = evaluationPeriods
        self.extendedStatistic = extendedStatistic
        self.insufficientDataActions = insufficientDataActions
        self.metricName = metricName
        self.metrics = metrics
        self.namespace = namespace
        self.okActions = okActions
        self.period = period
        self.statistic = statistic
        self.tags = tags
        self.threshold = threshold
        self.thresholdMetricId = thresholdMetricId
        self.treatMissingData = treatMissingData
        self.unit = unit
    }
}

extension CloudWatchClientTypes {
    /// Represents a set of statistics that describes a specific metric.
    public struct StatisticSet {
        /// The maximum value of the sample set.
        /// This member is required.
        public var maximum: Swift.Double?
        /// The minimum value of the sample set.
        /// This member is required.
        public var minimum: Swift.Double?
        /// The number of samples used for the statistic set.
        /// This member is required.
        public var sampleCount: Swift.Double?
        /// The sum of values for the sample set.
        /// This member is required.
        public var sum: Swift.Double?

        public init(
            maximum: Swift.Double? = nil,
            minimum: Swift.Double? = nil,
            sampleCount: Swift.Double? = nil,
            sum: Swift.Double? = nil
        )
        {
            self.maximum = maximum
            self.minimum = minimum
            self.sampleCount = sampleCount
            self.sum = sum
        }
    }

}

extension CloudWatchClientTypes {
    /// Encapsulates the information sent to either create a metric or add new values to be aggregated into an existing metric.
    public struct MetricDatum {
        /// Array of numbers that is used along with the Values array. Each number in the Count array is the number of times the corresponding value in the Values array occurred during the period. If you omit the Counts array, the default of 1 is used as the value for each count. If you include a Counts array, it must include the same amount of values as the Values array.
        public var counts: [Swift.Double]?
        /// The dimensions associated with the metric.
        public var dimensions: [CloudWatchClientTypes.Dimension]?
        /// The name of the metric.
        /// This member is required.
        public var metricName: Swift.String?
        /// The statistical values for the metric.
        public var statisticValues: CloudWatchClientTypes.StatisticSet?
        /// Valid values are 1 and 60. Setting this to 1 specifies this metric as a high-resolution metric, so that CloudWatch stores the metric with sub-minute resolution down to one second. Setting this to 60 specifies this metric as a regular-resolution metric, which CloudWatch stores at 1-minute resolution. Currently, high resolution is available only for custom metrics. For more information about high-resolution metrics, see [High-Resolution Metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html#high-resolution-metrics) in the Amazon CloudWatch User Guide. This field is optional, if you do not specify it the default of 60 is used.
        public var storageResolution: Swift.Int?
        /// The time the metric data was received, expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC.
        public var timestamp: Foundation.Date?
        /// When you are using a Put operation, this defines what unit you want to use when storing the metric. In a Get operation, this displays the unit that is used for the metric.
        public var unit: CloudWatchClientTypes.StandardUnit?
        /// The value for the metric. Although the parameter accepts numbers of type Double, CloudWatch rejects values that are either too small or too large. Values must be in the range of -2^360 to 2^360. In addition, special values (for example, NaN, +Infinity, -Infinity) are not supported.
        public var value: Swift.Double?
        /// Array of numbers representing the values for the metric during the period. Each unique value is listed just once in this array, and the corresponding number in the Counts array specifies the number of times that value occurred during the period. You can include up to 150 unique values in each PutMetricData action that specifies a Values array. Although the Values array accepts numbers of type Double, CloudWatch rejects values that are either too small or too large. Values must be in the range of -2^360 to 2^360. In addition, special values (for example, NaN, +Infinity, -Infinity) are not supported.
        public var values: [Swift.Double]?

        public init(
            counts: [Swift.Double]? = nil,
            dimensions: [CloudWatchClientTypes.Dimension]? = nil,
            metricName: Swift.String? = nil,
            statisticValues: CloudWatchClientTypes.StatisticSet? = nil,
            storageResolution: Swift.Int? = nil,
            timestamp: Foundation.Date? = nil,
            unit: CloudWatchClientTypes.StandardUnit? = nil,
            value: Swift.Double? = nil,
            values: [Swift.Double]? = nil
        )
        {
            self.counts = counts
            self.dimensions = dimensions
            self.metricName = metricName
            self.statisticValues = statisticValues
            self.storageResolution = storageResolution
            self.timestamp = timestamp
            self.unit = unit
            self.value = value
            self.values = values
        }
    }

}

public struct PutMetricDataInput {
    /// The data for the metric. The array can include no more than 1000 metrics per call.
    /// This member is required.
    public var metricData: [CloudWatchClientTypes.MetricDatum]?
    /// The namespace for the metric data. You can use ASCII characters for the namespace, except for control characters which are not supported. To avoid conflicts with Amazon Web Services service namespaces, you should not specify a namespace that begins with AWS/
    /// This member is required.
    public var namespace: Swift.String?

    public init(
        metricData: [CloudWatchClientTypes.MetricDatum]? = nil,
        namespace: Swift.String? = nil
    )
    {
        self.metricData = metricData
        self.namespace = namespace
    }
}

public struct PutMetricStreamInput {
    /// If you specify this parameter, the stream sends metrics from all metric namespaces except for the namespaces that you specify here. You cannot include ExcludeFilters and IncludeFilters in the same operation.
    public var excludeFilters: [CloudWatchClientTypes.MetricStreamFilter]?
    /// The ARN of the Amazon Kinesis Data Firehose delivery stream to use for this metric stream. This Amazon Kinesis Data Firehose delivery stream must already exist and must be in the same account as the metric stream.
    /// This member is required.
    public var firehoseArn: Swift.String?
    /// If you specify this parameter, the stream sends only the metrics from the metric namespaces that you specify here. You cannot include IncludeFilters and ExcludeFilters in the same operation.
    public var includeFilters: [CloudWatchClientTypes.MetricStreamFilter]?
    /// If you are creating a metric stream in a monitoring account, specify true to include metrics from source accounts in the metric stream.
    public var includeLinkedAccountsMetrics: Swift.Bool?
    /// If you are creating a new metric stream, this is the name for the new stream. The name must be different than the names of other metric streams in this account and Region. If you are updating a metric stream, specify the name of that stream here. Valid characters are A-Z, a-z, 0-9, "-" and "_".
    /// This member is required.
    public var name: Swift.String?
    /// The output format for the stream. Valid values are json, opentelemetry1.0, and opentelemetry0.7. For more information about metric stream output formats, see [ Metric streams output formats](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-metric-streams-formats.html).
    /// This member is required.
    public var outputFormat: CloudWatchClientTypes.MetricStreamOutputFormat?
    /// The ARN of an IAM role that this metric stream will use to access Amazon Kinesis Data Firehose resources. This IAM role must already exist and must be in the same account as the metric stream. This IAM role must include the following permissions:
    ///
    /// * firehose:PutRecord
    ///
    /// * firehose:PutRecordBatch
    /// This member is required.
    public var roleArn: Swift.String?
    /// By default, a metric stream always sends the MAX, MIN, SUM, and SAMPLECOUNT statistics for each metric that is streamed. You can use this parameter to have the metric stream also send additional statistics in the stream. This array can have up to 100 members. For each entry in this array, you specify one or more metrics and the list of additional statistics to stream for those metrics. The additional statistics that you can stream depend on the stream's OutputFormat. If the OutputFormat is json, you can stream any additional statistic that is supported by CloudWatch, listed in [ CloudWatch statistics definitions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html.html). If the OutputFormat is opentelemetry1.0 or opentelemetry0.7, you can stream percentile statistics such as p95, p99.9, and so on.
    public var statisticsConfigurations: [CloudWatchClientTypes.MetricStreamStatisticsConfiguration]?
    /// A list of key-value pairs to associate with the metric stream. You can associate as many as 50 tags with a metric stream. Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values. You can use this parameter only when you are creating a new metric stream. If you are using this operation to update an existing metric stream, any tags you specify in this parameter are ignored. To change the tags of an existing metric stream, use [TagResource](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_TagResource.html) or [UntagResource](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_UntagResource.html).
    public var tags: [CloudWatchClientTypes.Tag]?

    public init(
        excludeFilters: [CloudWatchClientTypes.MetricStreamFilter]? = nil,
        firehoseArn: Swift.String? = nil,
        includeFilters: [CloudWatchClientTypes.MetricStreamFilter]? = nil,
        includeLinkedAccountsMetrics: Swift.Bool? = nil,
        name: Swift.String? = nil,
        outputFormat: CloudWatchClientTypes.MetricStreamOutputFormat? = nil,
        roleArn: Swift.String? = nil,
        statisticsConfigurations: [CloudWatchClientTypes.MetricStreamStatisticsConfiguration]? = nil,
        tags: [CloudWatchClientTypes.Tag]? = nil
    )
    {
        self.excludeFilters = excludeFilters
        self.firehoseArn = firehoseArn
        self.includeFilters = includeFilters
        self.includeLinkedAccountsMetrics = includeLinkedAccountsMetrics
        self.name = name
        self.outputFormat = outputFormat
        self.roleArn = roleArn
        self.statisticsConfigurations = statisticsConfigurations
        self.tags = tags
    }
}

public struct PutMetricStreamOutput {
    /// The ARN of the metric stream.
    public var arn: Swift.String?

    public init(
        arn: Swift.String? = nil
    )
    {
        self.arn = arn
    }
}

/// Data was not syntactically valid JSON.
public struct InvalidFormatFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        ///
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidFormat" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct SetAlarmStateInput {
    /// The name of the alarm.
    /// This member is required.
    public var alarmName: Swift.String?
    /// The reason that this alarm is set to this specific state, in text format.
    /// This member is required.
    public var stateReason: Swift.String?
    /// The reason that this alarm is set to this specific state, in JSON format. For SNS or EC2 alarm actions, this is just informational. But for EC2 Auto Scaling or application Auto Scaling alarm actions, the Auto Scaling policy uses the information in this field to take the correct action.
    public var stateReasonData: Swift.String?
    /// The value of the state.
    /// This member is required.
    public var stateValue: CloudWatchClientTypes.StateValue?

    public init(
        alarmName: Swift.String? = nil,
        stateReason: Swift.String? = nil,
        stateReasonData: Swift.String? = nil,
        stateValue: CloudWatchClientTypes.StateValue? = nil
    )
    {
        self.alarmName = alarmName
        self.stateReason = stateReason
        self.stateReasonData = stateReasonData
        self.stateValue = stateValue
    }
}

public struct StartMetricStreamsInput {
    /// The array of the names of metric streams to start streaming. This is an "all or nothing" operation. If you do not have permission to access all of the metric streams that you list here, then none of the streams that you list in the operation will start streaming.
    /// This member is required.
    public var names: [Swift.String]?

    public init(
        names: [Swift.String]? = nil
    )
    {
        self.names = names
    }
}

public struct StartMetricStreamsOutput {

    public init() { }
}

public struct StopMetricStreamsInput {
    /// The array of the names of metric streams to stop streaming. This is an "all or nothing" operation. If you do not have permission to access all of the metric streams that you list here, then none of the streams that you list in the operation will stop streaming.
    /// This member is required.
    public var names: [Swift.String]?

    public init(
        names: [Swift.String]? = nil
    )
    {
        self.names = names
    }
}

public struct StopMetricStreamsOutput {

    public init() { }
}

public struct TagResourceInput {
    /// The ARN of the CloudWatch resource that you're adding tags to. The ARN format of an alarm is arn:aws:cloudwatch:Region:account-id:alarm:alarm-name  The ARN format of a Contributor Insights rule is arn:aws:cloudwatch:Region:account-id:insight-rule/insight-rule-name  For more information about ARN format, see [ Resource Types Defined by Amazon CloudWatch](https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazoncloudwatch.html#amazoncloudwatch-resources-for-iam-policies) in the Amazon Web Services General Reference.
    /// This member is required.
    public var resourceARN: Swift.String?
    /// The list of key-value pairs to associate with the alarm.
    /// This member is required.
    public var tags: [CloudWatchClientTypes.Tag]?

    public init(
        resourceARN: Swift.String? = nil,
        tags: [CloudWatchClientTypes.Tag]? = nil
    )
    {
        self.resourceARN = resourceARN
        self.tags = tags
    }
}

public struct TagResourceOutput {

    public init() { }
}

public struct UntagResourceInput {
    /// The ARN of the CloudWatch resource that you're removing tags from. The ARN format of an alarm is arn:aws:cloudwatch:Region:account-id:alarm:alarm-name  The ARN format of a Contributor Insights rule is arn:aws:cloudwatch:Region:account-id:insight-rule/insight-rule-name  For more information about ARN format, see [ Resource Types Defined by Amazon CloudWatch](https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazoncloudwatch.html#amazoncloudwatch-resources-for-iam-policies) in the Amazon Web Services General Reference.
    /// This member is required.
    public var resourceARN: Swift.String?
    /// The list of tag keys to remove from the resource.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceARN: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceARN = resourceARN
        self.tagKeys = tagKeys
    }
}

public struct UntagResourceOutput {

    public init() { }
}

extension DeleteAlarmsInput {

    static func urlPathProvider(_ value: DeleteAlarmsInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteAnomalyDetectorInput {

    static func urlPathProvider(_ value: DeleteAnomalyDetectorInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteDashboardsInput {

    static func urlPathProvider(_ value: DeleteDashboardsInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteInsightRulesInput {

    static func urlPathProvider(_ value: DeleteInsightRulesInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteMetricStreamInput {

    static func urlPathProvider(_ value: DeleteMetricStreamInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeAlarmHistoryInput {

    static func urlPathProvider(_ value: DescribeAlarmHistoryInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeAlarmsInput {

    static func urlPathProvider(_ value: DescribeAlarmsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeAlarmsForMetricInput {

    static func urlPathProvider(_ value: DescribeAlarmsForMetricInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeAnomalyDetectorsInput {

    static func urlPathProvider(_ value: DescribeAnomalyDetectorsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeInsightRulesInput {

    static func urlPathProvider(_ value: DescribeInsightRulesInput) -> Swift.String? {
        return "/"
    }
}

extension DisableAlarmActionsInput {

    static func urlPathProvider(_ value: DisableAlarmActionsInput) -> Swift.String? {
        return "/"
    }
}

extension DisableInsightRulesInput {

    static func urlPathProvider(_ value: DisableInsightRulesInput) -> Swift.String? {
        return "/"
    }
}

extension EnableAlarmActionsInput {

    static func urlPathProvider(_ value: EnableAlarmActionsInput) -> Swift.String? {
        return "/"
    }
}

extension EnableInsightRulesInput {

    static func urlPathProvider(_ value: EnableInsightRulesInput) -> Swift.String? {
        return "/"
    }
}

extension GetDashboardInput {

    static func urlPathProvider(_ value: GetDashboardInput) -> Swift.String? {
        return "/"
    }
}

extension GetInsightRuleReportInput {

    static func urlPathProvider(_ value: GetInsightRuleReportInput) -> Swift.String? {
        return "/"
    }
}

extension GetMetricDataInput {

    static func urlPathProvider(_ value: GetMetricDataInput) -> Swift.String? {
        return "/"
    }
}

extension GetMetricStatisticsInput {

    static func urlPathProvider(_ value: GetMetricStatisticsInput) -> Swift.String? {
        return "/"
    }
}

extension GetMetricStreamInput {

    static func urlPathProvider(_ value: GetMetricStreamInput) -> Swift.String? {
        return "/"
    }
}

extension GetMetricWidgetImageInput {

    static func urlPathProvider(_ value: GetMetricWidgetImageInput) -> Swift.String? {
        return "/"
    }
}

extension ListDashboardsInput {

    static func urlPathProvider(_ value: ListDashboardsInput) -> Swift.String? {
        return "/"
    }
}

extension ListManagedInsightRulesInput {

    static func urlPathProvider(_ value: ListManagedInsightRulesInput) -> Swift.String? {
        return "/"
    }
}

extension ListMetricsInput {

    static func urlPathProvider(_ value: ListMetricsInput) -> Swift.String? {
        return "/"
    }
}

extension ListMetricStreamsInput {

    static func urlPathProvider(_ value: ListMetricStreamsInput) -> Swift.String? {
        return "/"
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        return "/"
    }
}

extension PutAnomalyDetectorInput {

    static func urlPathProvider(_ value: PutAnomalyDetectorInput) -> Swift.String? {
        return "/"
    }
}

extension PutCompositeAlarmInput {

    static func urlPathProvider(_ value: PutCompositeAlarmInput) -> Swift.String? {
        return "/"
    }
}

extension PutDashboardInput {

    static func urlPathProvider(_ value: PutDashboardInput) -> Swift.String? {
        return "/"
    }
}

extension PutInsightRuleInput {

    static func urlPathProvider(_ value: PutInsightRuleInput) -> Swift.String? {
        return "/"
    }
}

extension PutManagedInsightRulesInput {

    static func urlPathProvider(_ value: PutManagedInsightRulesInput) -> Swift.String? {
        return "/"
    }
}

extension PutMetricAlarmInput {

    static func urlPathProvider(_ value: PutMetricAlarmInput) -> Swift.String? {
        return "/"
    }
}

extension PutMetricDataInput {

    static func urlPathProvider(_ value: PutMetricDataInput) -> Swift.String? {
        return "/"
    }
}

extension PutMetricStreamInput {

    static func urlPathProvider(_ value: PutMetricStreamInput) -> Swift.String? {
        return "/"
    }
}

extension SetAlarmStateInput {

    static func urlPathProvider(_ value: SetAlarmStateInput) -> Swift.String? {
        return "/"
    }
}

extension StartMetricStreamsInput {

    static func urlPathProvider(_ value: StartMetricStreamsInput) -> Swift.String? {
        return "/"
    }
}

extension StopMetricStreamsInput {

    static func urlPathProvider(_ value: StopMetricStreamsInput) -> Swift.String? {
        return "/"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteAlarmsInput {

    static func write(value: DeleteAlarmsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AlarmNames"].writeList(value.alarmNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("DeleteAlarms")
        try writer["Version"].write("2010-08-01")
    }
}

extension DeleteAnomalyDetectorInput {

    static func write(value: DeleteAnomalyDetectorInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Dimensions"].writeList(value.dimensions, memberWritingClosure: CloudWatchClientTypes.Dimension.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MetricMathAnomalyDetector"].write(value.metricMathAnomalyDetector, with: CloudWatchClientTypes.MetricMathAnomalyDetector.write(value:to:))
        try writer["MetricName"].write(value.metricName)
        try writer["Namespace"].write(value.namespace)
        try writer["SingleMetricAnomalyDetector"].write(value.singleMetricAnomalyDetector, with: CloudWatchClientTypes.SingleMetricAnomalyDetector.write(value:to:))
        try writer["Stat"].write(value.stat)
        try writer["Action"].write("DeleteAnomalyDetector")
        try writer["Version"].write("2010-08-01")
    }
}

extension DeleteDashboardsInput {

    static func write(value: DeleteDashboardsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DashboardNames"].writeList(value.dashboardNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("DeleteDashboards")
        try writer["Version"].write("2010-08-01")
    }
}

extension DeleteInsightRulesInput {

    static func write(value: DeleteInsightRulesInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["RuleNames"].writeList(value.ruleNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("DeleteInsightRules")
        try writer["Version"].write("2010-08-01")
    }
}

extension DeleteMetricStreamInput {

    static func write(value: DeleteMetricStreamInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Action"].write("DeleteMetricStream")
        try writer["Version"].write("2010-08-01")
    }
}

extension DescribeAlarmHistoryInput {

    static func write(value: DescribeAlarmHistoryInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AlarmName"].write(value.alarmName)
        try writer["AlarmTypes"].writeList(value.alarmTypes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<CloudWatchClientTypes.AlarmType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["EndDate"].writeTimestamp(value.endDate, format: SmithyTimestamps.TimestampFormat.dateTime)
        try writer["HistoryItemType"].write(value.historyItemType)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["NextToken"].write(value.nextToken)
        try writer["ScanBy"].write(value.scanBy)
        try writer["StartDate"].writeTimestamp(value.startDate, format: SmithyTimestamps.TimestampFormat.dateTime)
        try writer["Action"].write("DescribeAlarmHistory")
        try writer["Version"].write("2010-08-01")
    }
}

extension DescribeAlarmsInput {

    static func write(value: DescribeAlarmsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ActionPrefix"].write(value.actionPrefix)
        try writer["AlarmNamePrefix"].write(value.alarmNamePrefix)
        try writer["AlarmNames"].writeList(value.alarmNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["AlarmTypes"].writeList(value.alarmTypes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<CloudWatchClientTypes.AlarmType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ChildrenOfAlarmName"].write(value.childrenOfAlarmName)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["NextToken"].write(value.nextToken)
        try writer["ParentsOfAlarmName"].write(value.parentsOfAlarmName)
        try writer["StateValue"].write(value.stateValue)
        try writer["Action"].write("DescribeAlarms")
        try writer["Version"].write("2010-08-01")
    }
}

extension DescribeAlarmsForMetricInput {

    static func write(value: DescribeAlarmsForMetricInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Dimensions"].writeList(value.dimensions, memberWritingClosure: CloudWatchClientTypes.Dimension.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ExtendedStatistic"].write(value.extendedStatistic)
        try writer["MetricName"].write(value.metricName)
        try writer["Namespace"].write(value.namespace)
        try writer["Period"].write(value.period)
        try writer["Statistic"].write(value.statistic)
        try writer["Unit"].write(value.unit)
        try writer["Action"].write("DescribeAlarmsForMetric")
        try writer["Version"].write("2010-08-01")
    }
}

extension DescribeAnomalyDetectorsInput {

    static func write(value: DescribeAnomalyDetectorsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AnomalyDetectorTypes"].writeList(value.anomalyDetectorTypes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<CloudWatchClientTypes.AnomalyDetectorType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Dimensions"].writeList(value.dimensions, memberWritingClosure: CloudWatchClientTypes.Dimension.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MaxResults"].write(value.maxResults)
        try writer["MetricName"].write(value.metricName)
        try writer["Namespace"].write(value.namespace)
        try writer["NextToken"].write(value.nextToken)
        try writer["Action"].write("DescribeAnomalyDetectors")
        try writer["Version"].write("2010-08-01")
    }
}

extension DescribeInsightRulesInput {

    static func write(value: DescribeInsightRulesInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["Action"].write("DescribeInsightRules")
        try writer["Version"].write("2010-08-01")
    }
}

extension DisableAlarmActionsInput {

    static func write(value: DisableAlarmActionsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AlarmNames"].writeList(value.alarmNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("DisableAlarmActions")
        try writer["Version"].write("2010-08-01")
    }
}

extension DisableInsightRulesInput {

    static func write(value: DisableInsightRulesInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["RuleNames"].writeList(value.ruleNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("DisableInsightRules")
        try writer["Version"].write("2010-08-01")
    }
}

extension EnableAlarmActionsInput {

    static func write(value: EnableAlarmActionsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AlarmNames"].writeList(value.alarmNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("EnableAlarmActions")
        try writer["Version"].write("2010-08-01")
    }
}

extension EnableInsightRulesInput {

    static func write(value: EnableInsightRulesInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["RuleNames"].writeList(value.ruleNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("EnableInsightRules")
        try writer["Version"].write("2010-08-01")
    }
}

extension GetDashboardInput {

    static func write(value: GetDashboardInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DashboardName"].write(value.dashboardName)
        try writer["Action"].write("GetDashboard")
        try writer["Version"].write("2010-08-01")
    }
}

extension GetInsightRuleReportInput {

    static func write(value: GetInsightRuleReportInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["EndTime"].writeTimestamp(value.endTime, format: SmithyTimestamps.TimestampFormat.dateTime)
        try writer["MaxContributorCount"].write(value.maxContributorCount)
        try writer["Metrics"].writeList(value.metrics, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["OrderBy"].write(value.orderBy)
        try writer["Period"].write(value.period)
        try writer["RuleName"].write(value.ruleName)
        try writer["StartTime"].writeTimestamp(value.startTime, format: SmithyTimestamps.TimestampFormat.dateTime)
        try writer["Action"].write("GetInsightRuleReport")
        try writer["Version"].write("2010-08-01")
    }
}

extension GetMetricDataInput {

    static func write(value: GetMetricDataInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["EndTime"].writeTimestamp(value.endTime, format: SmithyTimestamps.TimestampFormat.dateTime)
        try writer["LabelOptions"].write(value.labelOptions, with: CloudWatchClientTypes.LabelOptions.write(value:to:))
        try writer["MaxDatapoints"].write(value.maxDatapoints)
        try writer["MetricDataQueries"].writeList(value.metricDataQueries, memberWritingClosure: CloudWatchClientTypes.MetricDataQuery.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["NextToken"].write(value.nextToken)
        try writer["ScanBy"].write(value.scanBy)
        try writer["StartTime"].writeTimestamp(value.startTime, format: SmithyTimestamps.TimestampFormat.dateTime)
        try writer["Action"].write("GetMetricData")
        try writer["Version"].write("2010-08-01")
    }
}

extension GetMetricStatisticsInput {

    static func write(value: GetMetricStatisticsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Dimensions"].writeList(value.dimensions, memberWritingClosure: CloudWatchClientTypes.Dimension.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["EndTime"].writeTimestamp(value.endTime, format: SmithyTimestamps.TimestampFormat.dateTime)
        try writer["ExtendedStatistics"].writeList(value.extendedStatistics, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MetricName"].write(value.metricName)
        try writer["Namespace"].write(value.namespace)
        try writer["Period"].write(value.period)
        try writer["StartTime"].writeTimestamp(value.startTime, format: SmithyTimestamps.TimestampFormat.dateTime)
        try writer["Statistics"].writeList(value.statistics, memberWritingClosure: SmithyReadWrite.WritingClosureBox<CloudWatchClientTypes.Statistic>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Unit"].write(value.unit)
        try writer["Action"].write("GetMetricStatistics")
        try writer["Version"].write("2010-08-01")
    }
}

extension GetMetricStreamInput {

    static func write(value: GetMetricStreamInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Action"].write("GetMetricStream")
        try writer["Version"].write("2010-08-01")
    }
}

extension GetMetricWidgetImageInput {

    static func write(value: GetMetricWidgetImageInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["MetricWidget"].write(value.metricWidget)
        try writer["OutputFormat"].write(value.outputFormat)
        try writer["Action"].write("GetMetricWidgetImage")
        try writer["Version"].write("2010-08-01")
    }
}

extension ListDashboardsInput {

    static func write(value: ListDashboardsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DashboardNamePrefix"].write(value.dashboardNamePrefix)
        try writer["NextToken"].write(value.nextToken)
        try writer["Action"].write("ListDashboards")
        try writer["Version"].write("2010-08-01")
    }
}

extension ListManagedInsightRulesInput {

    static func write(value: ListManagedInsightRulesInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["ResourceARN"].write(value.resourceARN)
        try writer["Action"].write("ListManagedInsightRules")
        try writer["Version"].write("2010-08-01")
    }
}

extension ListMetricsInput {

    static func write(value: ListMetricsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Dimensions"].writeList(value.dimensions, memberWritingClosure: CloudWatchClientTypes.DimensionFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["IncludeLinkedAccounts"].write(value.includeLinkedAccounts)
        try writer["MetricName"].write(value.metricName)
        try writer["Namespace"].write(value.namespace)
        try writer["NextToken"].write(value.nextToken)
        try writer["OwningAccount"].write(value.owningAccount)
        try writer["RecentlyActive"].write(value.recentlyActive)
        try writer["Action"].write("ListMetrics")
        try writer["Version"].write("2010-08-01")
    }
}

extension ListMetricStreamsInput {

    static func write(value: ListMetricStreamsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["Action"].write("ListMetricStreams")
        try writer["Version"].write("2010-08-01")
    }
}

extension ListTagsForResourceInput {

    static func write(value: ListTagsForResourceInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ResourceARN"].write(value.resourceARN)
        try writer["Action"].write("ListTagsForResource")
        try writer["Version"].write("2010-08-01")
    }
}

extension PutAnomalyDetectorInput {

    static func write(value: PutAnomalyDetectorInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Configuration"].write(value.configuration, with: CloudWatchClientTypes.AnomalyDetectorConfiguration.write(value:to:))
        try writer["Dimensions"].writeList(value.dimensions, memberWritingClosure: CloudWatchClientTypes.Dimension.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MetricCharacteristics"].write(value.metricCharacteristics, with: CloudWatchClientTypes.MetricCharacteristics.write(value:to:))
        try writer["MetricMathAnomalyDetector"].write(value.metricMathAnomalyDetector, with: CloudWatchClientTypes.MetricMathAnomalyDetector.write(value:to:))
        try writer["MetricName"].write(value.metricName)
        try writer["Namespace"].write(value.namespace)
        try writer["SingleMetricAnomalyDetector"].write(value.singleMetricAnomalyDetector, with: CloudWatchClientTypes.SingleMetricAnomalyDetector.write(value:to:))
        try writer["Stat"].write(value.stat)
        try writer["Action"].write("PutAnomalyDetector")
        try writer["Version"].write("2010-08-01")
    }
}

extension PutCompositeAlarmInput {

    static func write(value: PutCompositeAlarmInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ActionsEnabled"].write(value.actionsEnabled)
        try writer["ActionsSuppressor"].write(value.actionsSuppressor)
        try writer["ActionsSuppressorExtensionPeriod"].write(value.actionsSuppressorExtensionPeriod)
        try writer["ActionsSuppressorWaitPeriod"].write(value.actionsSuppressorWaitPeriod)
        try writer["AlarmActions"].writeList(value.alarmActions, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["AlarmDescription"].write(value.alarmDescription)
        try writer["AlarmName"].write(value.alarmName)
        try writer["AlarmRule"].write(value.alarmRule)
        try writer["InsufficientDataActions"].writeList(value.insufficientDataActions, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["OKActions"].writeList(value.okActions, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: CloudWatchClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("PutCompositeAlarm")
        try writer["Version"].write("2010-08-01")
    }
}

extension PutDashboardInput {

    static func write(value: PutDashboardInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DashboardBody"].write(value.dashboardBody)
        try writer["DashboardName"].write(value.dashboardName)
        try writer["Action"].write("PutDashboard")
        try writer["Version"].write("2010-08-01")
    }
}

extension PutInsightRuleInput {

    static func write(value: PutInsightRuleInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["RuleDefinition"].write(value.ruleDefinition)
        try writer["RuleName"].write(value.ruleName)
        try writer["RuleState"].write(value.ruleState)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: CloudWatchClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("PutInsightRule")
        try writer["Version"].write("2010-08-01")
    }
}

extension PutManagedInsightRulesInput {

    static func write(value: PutManagedInsightRulesInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ManagedRules"].writeList(value.managedRules, memberWritingClosure: CloudWatchClientTypes.ManagedRule.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("PutManagedInsightRules")
        try writer["Version"].write("2010-08-01")
    }
}

extension PutMetricAlarmInput {

    static func write(value: PutMetricAlarmInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ActionsEnabled"].write(value.actionsEnabled)
        try writer["AlarmActions"].writeList(value.alarmActions, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["AlarmDescription"].write(value.alarmDescription)
        try writer["AlarmName"].write(value.alarmName)
        try writer["ComparisonOperator"].write(value.comparisonOperator)
        try writer["DatapointsToAlarm"].write(value.datapointsToAlarm)
        try writer["Dimensions"].writeList(value.dimensions, memberWritingClosure: CloudWatchClientTypes.Dimension.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["EvaluateLowSampleCountPercentile"].write(value.evaluateLowSampleCountPercentile)
        try writer["EvaluationPeriods"].write(value.evaluationPeriods)
        try writer["ExtendedStatistic"].write(value.extendedStatistic)
        try writer["InsufficientDataActions"].writeList(value.insufficientDataActions, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MetricName"].write(value.metricName)
        try writer["Metrics"].writeList(value.metrics, memberWritingClosure: CloudWatchClientTypes.MetricDataQuery.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Namespace"].write(value.namespace)
        try writer["OKActions"].writeList(value.okActions, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Period"].write(value.period)
        try writer["Statistic"].write(value.statistic)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: CloudWatchClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Threshold"].write(value.threshold)
        try writer["ThresholdMetricId"].write(value.thresholdMetricId)
        try writer["TreatMissingData"].write(value.treatMissingData)
        try writer["Unit"].write(value.unit)
        try writer["Action"].write("PutMetricAlarm")
        try writer["Version"].write("2010-08-01")
    }
}

extension PutMetricDataInput {

    static func write(value: PutMetricDataInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["MetricData"].writeList(value.metricData, memberWritingClosure: CloudWatchClientTypes.MetricDatum.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Namespace"].write(value.namespace)
        try writer["Action"].write("PutMetricData")
        try writer["Version"].write("2010-08-01")
    }
}

extension PutMetricStreamInput {

    static func write(value: PutMetricStreamInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ExcludeFilters"].writeList(value.excludeFilters, memberWritingClosure: CloudWatchClientTypes.MetricStreamFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["FirehoseArn"].write(value.firehoseArn)
        try writer["IncludeFilters"].writeList(value.includeFilters, memberWritingClosure: CloudWatchClientTypes.MetricStreamFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["IncludeLinkedAccountsMetrics"].write(value.includeLinkedAccountsMetrics)
        try writer["Name"].write(value.name)
        try writer["OutputFormat"].write(value.outputFormat)
        try writer["RoleArn"].write(value.roleArn)
        try writer["StatisticsConfigurations"].writeList(value.statisticsConfigurations, memberWritingClosure: CloudWatchClientTypes.MetricStreamStatisticsConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: CloudWatchClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("PutMetricStream")
        try writer["Version"].write("2010-08-01")
    }
}

extension SetAlarmStateInput {

    static func write(value: SetAlarmStateInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AlarmName"].write(value.alarmName)
        try writer["StateReason"].write(value.stateReason)
        try writer["StateReasonData"].write(value.stateReasonData)
        try writer["StateValue"].write(value.stateValue)
        try writer["Action"].write("SetAlarmState")
        try writer["Version"].write("2010-08-01")
    }
}

extension StartMetricStreamsInput {

    static func write(value: StartMetricStreamsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Names"].writeList(value.names, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("StartMetricStreams")
        try writer["Version"].write("2010-08-01")
    }
}

extension StopMetricStreamsInput {

    static func write(value: StopMetricStreamsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Names"].writeList(value.names, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("StopMetricStreams")
        try writer["Version"].write("2010-08-01")
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ResourceARN"].write(value.resourceARN)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: CloudWatchClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("TagResource")
        try writer["Version"].write("2010-08-01")
    }
}

extension UntagResourceInput {

    static func write(value: UntagResourceInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ResourceARN"].write(value.resourceARN)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("UntagResource")
        try writer["Version"].write("2010-08-01")
    }
}

extension DeleteAlarmsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteAlarmsOutput {
        return DeleteAlarmsOutput()
    }
}

extension DeleteAnomalyDetectorOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteAnomalyDetectorOutput {
        return DeleteAnomalyDetectorOutput()
    }
}

extension DeleteDashboardsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteDashboardsOutput {
        return DeleteDashboardsOutput()
    }
}

extension DeleteInsightRulesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteInsightRulesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DeleteInsightRulesResult"]
        var value = DeleteInsightRulesOutput()
        value.failures = try reader["Failures"].readListIfPresent(memberReadingClosure: CloudWatchClientTypes.PartialFailure.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DeleteMetricStreamOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteMetricStreamOutput {
        return DeleteMetricStreamOutput()
    }
}

extension DescribeAlarmHistoryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeAlarmHistoryOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeAlarmHistoryResult"]
        var value = DescribeAlarmHistoryOutput()
        value.alarmHistoryItems = try reader["AlarmHistoryItems"].readListIfPresent(memberReadingClosure: CloudWatchClientTypes.AlarmHistoryItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension DescribeAlarmsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeAlarmsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeAlarmsResult"]
        var value = DescribeAlarmsOutput()
        value.compositeAlarms = try reader["CompositeAlarms"].readListIfPresent(memberReadingClosure: CloudWatchClientTypes.CompositeAlarm.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.metricAlarms = try reader["MetricAlarms"].readListIfPresent(memberReadingClosure: CloudWatchClientTypes.MetricAlarm.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension DescribeAlarmsForMetricOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeAlarmsForMetricOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeAlarmsForMetricResult"]
        var value = DescribeAlarmsForMetricOutput()
        value.metricAlarms = try reader["MetricAlarms"].readListIfPresent(memberReadingClosure: CloudWatchClientTypes.MetricAlarm.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeAnomalyDetectorsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeAnomalyDetectorsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeAnomalyDetectorsResult"]
        var value = DescribeAnomalyDetectorsOutput()
        value.anomalyDetectors = try reader["AnomalyDetectors"].readListIfPresent(memberReadingClosure: CloudWatchClientTypes.AnomalyDetector.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension DescribeInsightRulesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeInsightRulesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeInsightRulesResult"]
        var value = DescribeInsightRulesOutput()
        value.insightRules = try reader["InsightRules"].readListIfPresent(memberReadingClosure: CloudWatchClientTypes.InsightRule.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension DisableAlarmActionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisableAlarmActionsOutput {
        return DisableAlarmActionsOutput()
    }
}

extension DisableInsightRulesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisableInsightRulesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DisableInsightRulesResult"]
        var value = DisableInsightRulesOutput()
        value.failures = try reader["Failures"].readListIfPresent(memberReadingClosure: CloudWatchClientTypes.PartialFailure.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension EnableAlarmActionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> EnableAlarmActionsOutput {
        return EnableAlarmActionsOutput()
    }
}

extension EnableInsightRulesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> EnableInsightRulesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["EnableInsightRulesResult"]
        var value = EnableInsightRulesOutput()
        value.failures = try reader["Failures"].readListIfPresent(memberReadingClosure: CloudWatchClientTypes.PartialFailure.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetDashboardOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDashboardOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["GetDashboardResult"]
        var value = GetDashboardOutput()
        value.dashboardArn = try reader["DashboardArn"].readIfPresent()
        value.dashboardBody = try reader["DashboardBody"].readIfPresent()
        value.dashboardName = try reader["DashboardName"].readIfPresent()
        return value
    }
}

extension GetInsightRuleReportOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetInsightRuleReportOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["GetInsightRuleReportResult"]
        var value = GetInsightRuleReportOutput()
        value.aggregateValue = try reader["AggregateValue"].readIfPresent()
        value.aggregationStatistic = try reader["AggregationStatistic"].readIfPresent()
        value.approximateUniqueCount = try reader["ApproximateUniqueCount"].readIfPresent()
        value.contributors = try reader["Contributors"].readListIfPresent(memberReadingClosure: CloudWatchClientTypes.InsightRuleContributor.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.keyLabels = try reader["KeyLabels"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.metricDatapoints = try reader["MetricDatapoints"].readListIfPresent(memberReadingClosure: CloudWatchClientTypes.InsightRuleMetricDatapoint.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetMetricDataOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetMetricDataOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["GetMetricDataResult"]
        var value = GetMetricDataOutput()
        value.messages = try reader["Messages"].readListIfPresent(memberReadingClosure: CloudWatchClientTypes.MessageData.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.metricDataResults = try reader["MetricDataResults"].readListIfPresent(memberReadingClosure: CloudWatchClientTypes.MetricDataResult.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension GetMetricStatisticsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetMetricStatisticsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["GetMetricStatisticsResult"]
        var value = GetMetricStatisticsOutput()
        value.datapoints = try reader["Datapoints"].readListIfPresent(memberReadingClosure: CloudWatchClientTypes.Datapoint.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.label = try reader["Label"].readIfPresent()
        return value
    }
}

extension GetMetricStreamOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetMetricStreamOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["GetMetricStreamResult"]
        var value = GetMetricStreamOutput()
        value.arn = try reader["Arn"].readIfPresent()
        value.creationDate = try reader["CreationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.excludeFilters = try reader["ExcludeFilters"].readListIfPresent(memberReadingClosure: CloudWatchClientTypes.MetricStreamFilter.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.firehoseArn = try reader["FirehoseArn"].readIfPresent()
        value.includeFilters = try reader["IncludeFilters"].readListIfPresent(memberReadingClosure: CloudWatchClientTypes.MetricStreamFilter.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.includeLinkedAccountsMetrics = try reader["IncludeLinkedAccountsMetrics"].readIfPresent()
        value.lastUpdateDate = try reader["LastUpdateDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.name = try reader["Name"].readIfPresent()
        value.outputFormat = try reader["OutputFormat"].readIfPresent()
        value.roleArn = try reader["RoleArn"].readIfPresent()
        value.state = try reader["State"].readIfPresent()
        value.statisticsConfigurations = try reader["StatisticsConfigurations"].readListIfPresent(memberReadingClosure: CloudWatchClientTypes.MetricStreamStatisticsConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetMetricWidgetImageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetMetricWidgetImageOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["GetMetricWidgetImageResult"]
        var value = GetMetricWidgetImageOutput()
        value.metricWidgetImage = try reader["MetricWidgetImage"].readIfPresent()
        return value
    }
}

extension ListDashboardsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDashboardsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ListDashboardsResult"]
        var value = ListDashboardsOutput()
        value.dashboardEntries = try reader["DashboardEntries"].readListIfPresent(memberReadingClosure: CloudWatchClientTypes.DashboardEntry.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListManagedInsightRulesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListManagedInsightRulesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ListManagedInsightRulesResult"]
        var value = ListManagedInsightRulesOutput()
        value.managedRules = try reader["ManagedRules"].readListIfPresent(memberReadingClosure: CloudWatchClientTypes.ManagedRuleDescription.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListMetricsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListMetricsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ListMetricsResult"]
        var value = ListMetricsOutput()
        value.metrics = try reader["Metrics"].readListIfPresent(memberReadingClosure: CloudWatchClientTypes.Metric.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.owningAccounts = try reader["OwningAccounts"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListMetricStreamsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListMetricStreamsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ListMetricStreamsResult"]
        var value = ListMetricStreamsOutput()
        value.entries = try reader["Entries"].readListIfPresent(memberReadingClosure: CloudWatchClientTypes.MetricStreamEntry.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ListTagsForResourceResult"]
        var value = ListTagsForResourceOutput()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: CloudWatchClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PutAnomalyDetectorOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutAnomalyDetectorOutput {
        return PutAnomalyDetectorOutput()
    }
}

extension PutCompositeAlarmOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutCompositeAlarmOutput {
        return PutCompositeAlarmOutput()
    }
}

extension PutDashboardOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutDashboardOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["PutDashboardResult"]
        var value = PutDashboardOutput()
        value.dashboardValidationMessages = try reader["DashboardValidationMessages"].readListIfPresent(memberReadingClosure: CloudWatchClientTypes.DashboardValidationMessage.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PutInsightRuleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutInsightRuleOutput {
        return PutInsightRuleOutput()
    }
}

extension PutManagedInsightRulesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutManagedInsightRulesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["PutManagedInsightRulesResult"]
        var value = PutManagedInsightRulesOutput()
        value.failures = try reader["Failures"].readListIfPresent(memberReadingClosure: CloudWatchClientTypes.PartialFailure.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PutMetricAlarmOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutMetricAlarmOutput {
        return PutMetricAlarmOutput()
    }
}

extension PutMetricDataOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutMetricDataOutput {
        return PutMetricDataOutput()
    }
}

extension PutMetricStreamOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutMetricStreamOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["PutMetricStreamResult"]
        var value = PutMetricStreamOutput()
        value.arn = try reader["Arn"].readIfPresent()
        return value
    }
}

extension SetAlarmStateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SetAlarmStateOutput {
        return SetAlarmStateOutput()
    }
}

extension StartMetricStreamsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartMetricStreamsOutput {
        return StartMetricStreamsOutput()
    }
}

extension StopMetricStreamsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopMetricStreamsOutput {
        return StopMetricStreamsOutput()
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

enum DeleteAlarmsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteAnomalyDetectorOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceError": return try InternalServiceFault.makeError(baseError: baseError)
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingParameter": return try MissingRequiredParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteDashboardsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try DashboardNotFoundError.makeError(baseError: baseError)
            case "InternalServiceError": return try InternalServiceFault.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteInsightRulesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingParameter": return try MissingRequiredParameterException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteMetricStreamOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceError": return try InternalServiceFault.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingParameter": return try MissingRequiredParameterException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeAlarmHistoryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidNextToken": return try InvalidNextToken.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeAlarmsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidNextToken": return try InvalidNextToken.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeAlarmsForMetricOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeAnomalyDetectorsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceError": return try InternalServiceFault.makeError(baseError: baseError)
            case "InvalidNextToken": return try InvalidNextToken.makeError(baseError: baseError)
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeInsightRulesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidNextToken": return try InvalidNextToken.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisableAlarmActionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisableInsightRulesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingParameter": return try MissingRequiredParameterException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum EnableAlarmActionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum EnableInsightRulesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "MissingParameter": return try MissingRequiredParameterException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDashboardOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try DashboardNotFoundError.makeError(baseError: baseError)
            case "InternalServiceError": return try InternalServiceFault.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetInsightRuleReportOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingParameter": return try MissingRequiredParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetMetricDataOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidNextToken": return try InvalidNextToken.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetMetricStatisticsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceError": return try InternalServiceFault.makeError(baseError: baseError)
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingParameter": return try MissingRequiredParameterException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetMetricStreamOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceError": return try InternalServiceFault.makeError(baseError: baseError)
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingParameter": return try MissingRequiredParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetMetricWidgetImageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDashboardsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceError": return try InternalServiceFault.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListManagedInsightRulesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidNextToken": return try InvalidNextToken.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingParameter": return try MissingRequiredParameterException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListMetricsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceError": return try InternalServiceFault.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListMetricStreamsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceError": return try InternalServiceFault.makeError(baseError: baseError)
            case "InvalidNextToken": return try InvalidNextToken.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingParameter": return try MissingRequiredParameterException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceError": return try InternalServiceFault.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutAnomalyDetectorOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceError": return try InternalServiceFault.makeError(baseError: baseError)
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "MissingParameter": return try MissingRequiredParameterException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutCompositeAlarmOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "LimitExceeded": return try LimitExceededFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutDashboardOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterInput": return try DashboardInvalidInputError.makeError(baseError: baseError)
            case "InternalServiceError": return try InternalServiceFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutInsightRuleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "MissingParameter": return try MissingRequiredParameterException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutManagedInsightRulesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingParameter": return try MissingRequiredParameterException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutMetricAlarmOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "LimitExceeded": return try LimitExceededFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutMetricDataOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceError": return try InternalServiceFault.makeError(baseError: baseError)
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingParameter": return try MissingRequiredParameterException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutMetricStreamOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InternalServiceError": return try InternalServiceFault.makeError(baseError: baseError)
            case "InvalidParameterCombination": return try InvalidParameterCombinationException.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingParameter": return try MissingRequiredParameterException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SetAlarmStateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidFormat": return try InvalidFormatFault.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartMetricStreamsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceError": return try InternalServiceFault.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingParameter": return try MissingRequiredParameterException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopMetricStreamsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceError": return try InternalServiceFault.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "MissingParameter": return try MissingRequiredParameterException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InternalServiceError": return try InternalServiceFault.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InternalServiceError": return try InternalServiceFault.makeError(baseError: baseError)
            case "InvalidParameterValue": return try InvalidParameterValueException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ResourceNotFound {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ResourceNotFound {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFound()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.properties.resourceId = try reader["ResourceId"].readIfPresent()
        value.properties.resourceType = try reader["ResourceType"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidParameterCombinationException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidParameterCombinationException {
        let reader = baseError.errorBodyReader
        var value = InvalidParameterCombinationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidParameterValueException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidParameterValueException {
        let reader = baseError.errorBodyReader
        var value = InvalidParameterValueException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServiceFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InternalServiceFault {
        let reader = baseError.errorBodyReader
        var value = InternalServiceFault()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension MissingRequiredParameterException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> MissingRequiredParameterException {
        let reader = baseError.errorBodyReader
        var value = MissingRequiredParameterException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DashboardNotFoundError {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> DashboardNotFoundError {
        let reader = baseError.errorBodyReader
        var value = DashboardNotFoundError()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidNextToken {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidNextToken {
        let reader = baseError.errorBodyReader
        var value = InvalidNextToken()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension LimitExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> LimitExceededException {
        let reader = baseError.errorBodyReader
        var value = LimitExceededException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension LimitExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> LimitExceededFault {
        let reader = baseError.errorBodyReader
        var value = LimitExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DashboardInvalidInputError {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> DashboardInvalidInputError {
        let reader = baseError.errorBodyReader
        var value = DashboardInvalidInputError()
        value.properties.dashboardValidationMessages = try reader["dashboardValidationMessages"].readListIfPresent(memberReadingClosure: CloudWatchClientTypes.DashboardValidationMessage.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConcurrentModificationException {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ConcurrentModificationException {
        let reader = baseError.errorBodyReader
        var value = ConcurrentModificationException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidFormatFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidFormatFault {
        let reader = baseError.errorBodyReader
        var value = InvalidFormatFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension CloudWatchClientTypes.PartialFailure {

    static func read(from reader: SmithyXML.Reader) throws -> CloudWatchClientTypes.PartialFailure {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchClientTypes.PartialFailure()
        value.failureResource = try reader["FailureResource"].readIfPresent()
        value.exceptionType = try reader["ExceptionType"].readIfPresent()
        value.failureCode = try reader["FailureCode"].readIfPresent()
        value.failureDescription = try reader["FailureDescription"].readIfPresent()
        return value
    }
}

extension CloudWatchClientTypes.AlarmHistoryItem {

    static func read(from reader: SmithyXML.Reader) throws -> CloudWatchClientTypes.AlarmHistoryItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchClientTypes.AlarmHistoryItem()
        value.alarmName = try reader["AlarmName"].readIfPresent()
        value.alarmType = try reader["AlarmType"].readIfPresent()
        value.timestamp = try reader["Timestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.historyItemType = try reader["HistoryItemType"].readIfPresent()
        value.historySummary = try reader["HistorySummary"].readIfPresent()
        value.historyData = try reader["HistoryData"].readIfPresent()
        return value
    }
}

extension CloudWatchClientTypes.CompositeAlarm {

    static func read(from reader: SmithyXML.Reader) throws -> CloudWatchClientTypes.CompositeAlarm {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchClientTypes.CompositeAlarm()
        value.actionsEnabled = try reader["ActionsEnabled"].readIfPresent()
        value.alarmActions = try reader["AlarmActions"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.alarmArn = try reader["AlarmArn"].readIfPresent()
        value.alarmConfigurationUpdatedTimestamp = try reader["AlarmConfigurationUpdatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.alarmDescription = try reader["AlarmDescription"].readIfPresent()
        value.alarmName = try reader["AlarmName"].readIfPresent()
        value.alarmRule = try reader["AlarmRule"].readIfPresent()
        value.insufficientDataActions = try reader["InsufficientDataActions"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.okActions = try reader["OKActions"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.stateReason = try reader["StateReason"].readIfPresent()
        value.stateReasonData = try reader["StateReasonData"].readIfPresent()
        value.stateUpdatedTimestamp = try reader["StateUpdatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.stateValue = try reader["StateValue"].readIfPresent()
        value.stateTransitionedTimestamp = try reader["StateTransitionedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.actionsSuppressedBy = try reader["ActionsSuppressedBy"].readIfPresent()
        value.actionsSuppressedReason = try reader["ActionsSuppressedReason"].readIfPresent()
        value.actionsSuppressor = try reader["ActionsSuppressor"].readIfPresent()
        value.actionsSuppressorWaitPeriod = try reader["ActionsSuppressorWaitPeriod"].readIfPresent()
        value.actionsSuppressorExtensionPeriod = try reader["ActionsSuppressorExtensionPeriod"].readIfPresent()
        return value
    }
}

extension CloudWatchClientTypes.MetricAlarm {

    static func read(from reader: SmithyXML.Reader) throws -> CloudWatchClientTypes.MetricAlarm {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchClientTypes.MetricAlarm()
        value.alarmName = try reader["AlarmName"].readIfPresent()
        value.alarmArn = try reader["AlarmArn"].readIfPresent()
        value.alarmDescription = try reader["AlarmDescription"].readIfPresent()
        value.alarmConfigurationUpdatedTimestamp = try reader["AlarmConfigurationUpdatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.actionsEnabled = try reader["ActionsEnabled"].readIfPresent()
        value.okActions = try reader["OKActions"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.alarmActions = try reader["AlarmActions"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.insufficientDataActions = try reader["InsufficientDataActions"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.stateValue = try reader["StateValue"].readIfPresent()
        value.stateReason = try reader["StateReason"].readIfPresent()
        value.stateReasonData = try reader["StateReasonData"].readIfPresent()
        value.stateUpdatedTimestamp = try reader["StateUpdatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.metricName = try reader["MetricName"].readIfPresent()
        value.namespace = try reader["Namespace"].readIfPresent()
        value.statistic = try reader["Statistic"].readIfPresent()
        value.extendedStatistic = try reader["ExtendedStatistic"].readIfPresent()
        value.dimensions = try reader["Dimensions"].readListIfPresent(memberReadingClosure: CloudWatchClientTypes.Dimension.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.period = try reader["Period"].readIfPresent()
        value.unit = try reader["Unit"].readIfPresent()
        value.evaluationPeriods = try reader["EvaluationPeriods"].readIfPresent()
        value.datapointsToAlarm = try reader["DatapointsToAlarm"].readIfPresent()
        value.threshold = try reader["Threshold"].readIfPresent()
        value.comparisonOperator = try reader["ComparisonOperator"].readIfPresent()
        value.treatMissingData = try reader["TreatMissingData"].readIfPresent()
        value.evaluateLowSampleCountPercentile = try reader["EvaluateLowSampleCountPercentile"].readIfPresent()
        value.metrics = try reader["Metrics"].readListIfPresent(memberReadingClosure: CloudWatchClientTypes.MetricDataQuery.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.thresholdMetricId = try reader["ThresholdMetricId"].readIfPresent()
        value.evaluationState = try reader["EvaluationState"].readIfPresent()
        value.stateTransitionedTimestamp = try reader["StateTransitionedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        return value
    }
}

extension CloudWatchClientTypes.MetricDataQuery {

    static func write(value: CloudWatchClientTypes.MetricDataQuery?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AccountId"].write(value.accountId)
        try writer["Expression"].write(value.expression)
        try writer["Id"].write(value.id)
        try writer["Label"].write(value.label)
        try writer["MetricStat"].write(value.metricStat, with: CloudWatchClientTypes.MetricStat.write(value:to:))
        try writer["Period"].write(value.period)
        try writer["ReturnData"].write(value.returnData)
    }

    static func read(from reader: SmithyXML.Reader) throws -> CloudWatchClientTypes.MetricDataQuery {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchClientTypes.MetricDataQuery()
        value.id = try reader["Id"].readIfPresent() ?? ""
        value.metricStat = try reader["MetricStat"].readIfPresent(with: CloudWatchClientTypes.MetricStat.read(from:))
        value.expression = try reader["Expression"].readIfPresent()
        value.label = try reader["Label"].readIfPresent()
        value.returnData = try reader["ReturnData"].readIfPresent()
        value.period = try reader["Period"].readIfPresent()
        value.accountId = try reader["AccountId"].readIfPresent()
        return value
    }
}

extension CloudWatchClientTypes.MetricStat {

    static func write(value: CloudWatchClientTypes.MetricStat?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Metric"].write(value.metric, with: CloudWatchClientTypes.Metric.write(value:to:))
        try writer["Period"].write(value.period)
        try writer["Stat"].write(value.stat)
        try writer["Unit"].write(value.unit)
    }

    static func read(from reader: SmithyXML.Reader) throws -> CloudWatchClientTypes.MetricStat {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchClientTypes.MetricStat()
        value.metric = try reader["Metric"].readIfPresent(with: CloudWatchClientTypes.Metric.read(from:))
        value.period = try reader["Period"].readIfPresent() ?? 0
        value.stat = try reader["Stat"].readIfPresent() ?? ""
        value.unit = try reader["Unit"].readIfPresent()
        return value
    }
}

extension CloudWatchClientTypes.Metric {

    static func write(value: CloudWatchClientTypes.Metric?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Dimensions"].writeList(value.dimensions, memberWritingClosure: CloudWatchClientTypes.Dimension.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MetricName"].write(value.metricName)
        try writer["Namespace"].write(value.namespace)
    }

    static func read(from reader: SmithyXML.Reader) throws -> CloudWatchClientTypes.Metric {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchClientTypes.Metric()
        value.namespace = try reader["Namespace"].readIfPresent()
        value.metricName = try reader["MetricName"].readIfPresent()
        value.dimensions = try reader["Dimensions"].readListIfPresent(memberReadingClosure: CloudWatchClientTypes.Dimension.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CloudWatchClientTypes.Dimension {

    static func write(value: CloudWatchClientTypes.Dimension?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyXML.Reader) throws -> CloudWatchClientTypes.Dimension {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchClientTypes.Dimension()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent() ?? ""
        return value
    }
}

extension CloudWatchClientTypes.AnomalyDetector {

    static func read(from reader: SmithyXML.Reader) throws -> CloudWatchClientTypes.AnomalyDetector {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchClientTypes.AnomalyDetector()
        value.namespace = try reader["Namespace"].readIfPresent()
        value.metricName = try reader["MetricName"].readIfPresent()
        value.dimensions = try reader["Dimensions"].readListIfPresent(memberReadingClosure: CloudWatchClientTypes.Dimension.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.stat = try reader["Stat"].readIfPresent()
        value.configuration = try reader["Configuration"].readIfPresent(with: CloudWatchClientTypes.AnomalyDetectorConfiguration.read(from:))
        value.stateValue = try reader["StateValue"].readIfPresent()
        value.metricCharacteristics = try reader["MetricCharacteristics"].readIfPresent(with: CloudWatchClientTypes.MetricCharacteristics.read(from:))
        value.singleMetricAnomalyDetector = try reader["SingleMetricAnomalyDetector"].readIfPresent(with: CloudWatchClientTypes.SingleMetricAnomalyDetector.read(from:))
        value.metricMathAnomalyDetector = try reader["MetricMathAnomalyDetector"].readIfPresent(with: CloudWatchClientTypes.MetricMathAnomalyDetector.read(from:))
        return value
    }
}

extension CloudWatchClientTypes.MetricMathAnomalyDetector {

    static func write(value: CloudWatchClientTypes.MetricMathAnomalyDetector?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["MetricDataQueries"].writeList(value.metricDataQueries, memberWritingClosure: CloudWatchClientTypes.MetricDataQuery.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyXML.Reader) throws -> CloudWatchClientTypes.MetricMathAnomalyDetector {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchClientTypes.MetricMathAnomalyDetector()
        value.metricDataQueries = try reader["MetricDataQueries"].readListIfPresent(memberReadingClosure: CloudWatchClientTypes.MetricDataQuery.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CloudWatchClientTypes.SingleMetricAnomalyDetector {

    static func write(value: CloudWatchClientTypes.SingleMetricAnomalyDetector?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AccountId"].write(value.accountId)
        try writer["Dimensions"].writeList(value.dimensions, memberWritingClosure: CloudWatchClientTypes.Dimension.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MetricName"].write(value.metricName)
        try writer["Namespace"].write(value.namespace)
        try writer["Stat"].write(value.stat)
    }

    static func read(from reader: SmithyXML.Reader) throws -> CloudWatchClientTypes.SingleMetricAnomalyDetector {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchClientTypes.SingleMetricAnomalyDetector()
        value.accountId = try reader["AccountId"].readIfPresent()
        value.namespace = try reader["Namespace"].readIfPresent()
        value.metricName = try reader["MetricName"].readIfPresent()
        value.dimensions = try reader["Dimensions"].readListIfPresent(memberReadingClosure: CloudWatchClientTypes.Dimension.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.stat = try reader["Stat"].readIfPresent()
        return value
    }
}

extension CloudWatchClientTypes.MetricCharacteristics {

    static func write(value: CloudWatchClientTypes.MetricCharacteristics?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["PeriodicSpikes"].write(value.periodicSpikes)
    }

    static func read(from reader: SmithyXML.Reader) throws -> CloudWatchClientTypes.MetricCharacteristics {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchClientTypes.MetricCharacteristics()
        value.periodicSpikes = try reader["PeriodicSpikes"].readIfPresent()
        return value
    }
}

extension CloudWatchClientTypes.AnomalyDetectorConfiguration {

    static func write(value: CloudWatchClientTypes.AnomalyDetectorConfiguration?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ExcludedTimeRanges"].writeList(value.excludedTimeRanges, memberWritingClosure: CloudWatchClientTypes.Range.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MetricTimezone"].write(value.metricTimezone)
    }

    static func read(from reader: SmithyXML.Reader) throws -> CloudWatchClientTypes.AnomalyDetectorConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchClientTypes.AnomalyDetectorConfiguration()
        value.excludedTimeRanges = try reader["ExcludedTimeRanges"].readListIfPresent(memberReadingClosure: CloudWatchClientTypes.Range.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.metricTimezone = try reader["MetricTimezone"].readIfPresent()
        return value
    }
}

extension CloudWatchClientTypes.Range {

    static func write(value: CloudWatchClientTypes.Range?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["EndTime"].writeTimestamp(value.endTime, format: SmithyTimestamps.TimestampFormat.dateTime)
        try writer["StartTime"].writeTimestamp(value.startTime, format: SmithyTimestamps.TimestampFormat.dateTime)
    }

    static func read(from reader: SmithyXML.Reader) throws -> CloudWatchClientTypes.Range {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchClientTypes.Range()
        value.startTime = try reader["StartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.endTime = try reader["EndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        return value
    }
}

extension CloudWatchClientTypes.InsightRule {

    static func read(from reader: SmithyXML.Reader) throws -> CloudWatchClientTypes.InsightRule {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchClientTypes.InsightRule()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.state = try reader["State"].readIfPresent() ?? ""
        value.schema = try reader["Schema"].readIfPresent() ?? ""
        value.definition = try reader["Definition"].readIfPresent() ?? ""
        value.managedRule = try reader["ManagedRule"].readIfPresent()
        return value
    }
}

extension CloudWatchClientTypes.InsightRuleContributor {

    static func read(from reader: SmithyXML.Reader) throws -> CloudWatchClientTypes.InsightRuleContributor {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchClientTypes.InsightRuleContributor()
        value.keys = try reader["Keys"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.approximateAggregateValue = try reader["ApproximateAggregateValue"].readIfPresent() ?? 0.0
        value.datapoints = try reader["Datapoints"].readListIfPresent(memberReadingClosure: CloudWatchClientTypes.InsightRuleContributorDatapoint.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension CloudWatchClientTypes.InsightRuleContributorDatapoint {

    static func read(from reader: SmithyXML.Reader) throws -> CloudWatchClientTypes.InsightRuleContributorDatapoint {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchClientTypes.InsightRuleContributorDatapoint()
        value.timestamp = try reader["Timestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.approximateValue = try reader["ApproximateValue"].readIfPresent() ?? 0.0
        return value
    }
}

extension CloudWatchClientTypes.InsightRuleMetricDatapoint {

    static func read(from reader: SmithyXML.Reader) throws -> CloudWatchClientTypes.InsightRuleMetricDatapoint {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchClientTypes.InsightRuleMetricDatapoint()
        value.timestamp = try reader["Timestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.uniqueContributors = try reader["UniqueContributors"].readIfPresent()
        value.maxContributorValue = try reader["MaxContributorValue"].readIfPresent()
        value.sampleCount = try reader["SampleCount"].readIfPresent()
        value.average = try reader["Average"].readIfPresent()
        value.sum = try reader["Sum"].readIfPresent()
        value.minimum = try reader["Minimum"].readIfPresent()
        value.maximum = try reader["Maximum"].readIfPresent()
        return value
    }
}

extension CloudWatchClientTypes.MetricDataResult {

    static func read(from reader: SmithyXML.Reader) throws -> CloudWatchClientTypes.MetricDataResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchClientTypes.MetricDataResult()
        value.id = try reader["Id"].readIfPresent()
        value.label = try reader["Label"].readIfPresent()
        value.timestamps = try reader["Timestamps"].readListIfPresent(memberReadingClosure: SmithyReadWrite.timestampReadingClosure(format: SmithyTimestamps.TimestampFormat.dateTime), memberNodeInfo: "member", isFlattened: false)
        value.values = try reader["Values"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readDouble(from:), memberNodeInfo: "member", isFlattened: false)
        value.statusCode = try reader["StatusCode"].readIfPresent()
        value.messages = try reader["Messages"].readListIfPresent(memberReadingClosure: CloudWatchClientTypes.MessageData.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CloudWatchClientTypes.MessageData {

    static func read(from reader: SmithyXML.Reader) throws -> CloudWatchClientTypes.MessageData {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchClientTypes.MessageData()
        value.code = try reader["Code"].readIfPresent()
        value.value = try reader["Value"].readIfPresent()
        return value
    }
}

extension CloudWatchClientTypes.Datapoint {

    static func read(from reader: SmithyXML.Reader) throws -> CloudWatchClientTypes.Datapoint {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchClientTypes.Datapoint()
        value.timestamp = try reader["Timestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.sampleCount = try reader["SampleCount"].readIfPresent()
        value.average = try reader["Average"].readIfPresent()
        value.sum = try reader["Sum"].readIfPresent()
        value.minimum = try reader["Minimum"].readIfPresent()
        value.maximum = try reader["Maximum"].readIfPresent()
        value.unit = try reader["Unit"].readIfPresent()
        value.extendedStatistics = try reader["ExtendedStatistics"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readDouble(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension CloudWatchClientTypes.MetricStreamFilter {

    static func write(value: CloudWatchClientTypes.MetricStreamFilter?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["MetricNames"].writeList(value.metricNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Namespace"].write(value.namespace)
    }

    static func read(from reader: SmithyXML.Reader) throws -> CloudWatchClientTypes.MetricStreamFilter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchClientTypes.MetricStreamFilter()
        value.namespace = try reader["Namespace"].readIfPresent()
        value.metricNames = try reader["MetricNames"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CloudWatchClientTypes.MetricStreamStatisticsConfiguration {

    static func write(value: CloudWatchClientTypes.MetricStreamStatisticsConfiguration?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AdditionalStatistics"].writeList(value.additionalStatistics, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["IncludeMetrics"].writeList(value.includeMetrics, memberWritingClosure: CloudWatchClientTypes.MetricStreamStatisticsMetric.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyXML.Reader) throws -> CloudWatchClientTypes.MetricStreamStatisticsConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchClientTypes.MetricStreamStatisticsConfiguration()
        value.includeMetrics = try reader["IncludeMetrics"].readListIfPresent(memberReadingClosure: CloudWatchClientTypes.MetricStreamStatisticsMetric.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.additionalStatistics = try reader["AdditionalStatistics"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension CloudWatchClientTypes.MetricStreamStatisticsMetric {

    static func write(value: CloudWatchClientTypes.MetricStreamStatisticsMetric?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["MetricName"].write(value.metricName)
        try writer["Namespace"].write(value.namespace)
    }

    static func read(from reader: SmithyXML.Reader) throws -> CloudWatchClientTypes.MetricStreamStatisticsMetric {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchClientTypes.MetricStreamStatisticsMetric()
        value.namespace = try reader["Namespace"].readIfPresent() ?? ""
        value.metricName = try reader["MetricName"].readIfPresent() ?? ""
        return value
    }
}

extension CloudWatchClientTypes.DashboardEntry {

    static func read(from reader: SmithyXML.Reader) throws -> CloudWatchClientTypes.DashboardEntry {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchClientTypes.DashboardEntry()
        value.dashboardName = try reader["DashboardName"].readIfPresent()
        value.dashboardArn = try reader["DashboardArn"].readIfPresent()
        value.lastModified = try reader["LastModified"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.size = try reader["Size"].readIfPresent()
        return value
    }
}

extension CloudWatchClientTypes.ManagedRuleDescription {

    static func read(from reader: SmithyXML.Reader) throws -> CloudWatchClientTypes.ManagedRuleDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchClientTypes.ManagedRuleDescription()
        value.templateName = try reader["TemplateName"].readIfPresent()
        value.resourceARN = try reader["ResourceARN"].readIfPresent()
        value.ruleState = try reader["RuleState"].readIfPresent(with: CloudWatchClientTypes.ManagedRuleState.read(from:))
        return value
    }
}

extension CloudWatchClientTypes.ManagedRuleState {

    static func read(from reader: SmithyXML.Reader) throws -> CloudWatchClientTypes.ManagedRuleState {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchClientTypes.ManagedRuleState()
        value.ruleName = try reader["RuleName"].readIfPresent() ?? ""
        value.state = try reader["State"].readIfPresent() ?? ""
        return value
    }
}

extension CloudWatchClientTypes.MetricStreamEntry {

    static func read(from reader: SmithyXML.Reader) throws -> CloudWatchClientTypes.MetricStreamEntry {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchClientTypes.MetricStreamEntry()
        value.arn = try reader["Arn"].readIfPresent()
        value.creationDate = try reader["CreationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.lastUpdateDate = try reader["LastUpdateDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.name = try reader["Name"].readIfPresent()
        value.firehoseArn = try reader["FirehoseArn"].readIfPresent()
        value.state = try reader["State"].readIfPresent()
        value.outputFormat = try reader["OutputFormat"].readIfPresent()
        return value
    }
}

extension CloudWatchClientTypes.Tag {

    static func write(value: CloudWatchClientTypes.Tag?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyXML.Reader) throws -> CloudWatchClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchClientTypes.Tag()
        value.key = try reader["Key"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent() ?? ""
        return value
    }
}

extension CloudWatchClientTypes.DashboardValidationMessage {

    static func read(from reader: SmithyXML.Reader) throws -> CloudWatchClientTypes.DashboardValidationMessage {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchClientTypes.DashboardValidationMessage()
        value.dataPath = try reader["DataPath"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension CloudWatchClientTypes.LabelOptions {

    static func write(value: CloudWatchClientTypes.LabelOptions?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Timezone"].write(value.timezone)
    }
}

extension CloudWatchClientTypes.DimensionFilter {

    static func write(value: CloudWatchClientTypes.DimensionFilter?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Value"].write(value.value)
    }
}

extension CloudWatchClientTypes.ManagedRule {

    static func write(value: CloudWatchClientTypes.ManagedRule?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ResourceARN"].write(value.resourceARN)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: CloudWatchClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TemplateName"].write(value.templateName)
    }
}

extension CloudWatchClientTypes.MetricDatum {

    static func write(value: CloudWatchClientTypes.MetricDatum?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Counts"].writeList(value.counts, memberWritingClosure: SmithyReadWrite.WritingClosures.writeDouble(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Dimensions"].writeList(value.dimensions, memberWritingClosure: CloudWatchClientTypes.Dimension.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MetricName"].write(value.metricName)
        try writer["StatisticValues"].write(value.statisticValues, with: CloudWatchClientTypes.StatisticSet.write(value:to:))
        try writer["StorageResolution"].write(value.storageResolution)
        try writer["Timestamp"].writeTimestamp(value.timestamp, format: SmithyTimestamps.TimestampFormat.dateTime)
        try writer["Unit"].write(value.unit)
        try writer["Value"].write(value.value)
        try writer["Values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeDouble(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CloudWatchClientTypes.StatisticSet {

    static func write(value: CloudWatchClientTypes.StatisticSet?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Maximum"].write(value.maximum)
        try writer["Minimum"].write(value.minimum)
        try writer["SampleCount"].write(value.sampleCount)
        try writer["Sum"].write(value.sum)
    }
}

public enum CloudWatchClientTypes {}
