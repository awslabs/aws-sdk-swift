// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension CloudWatchClientTypes {
    public enum ActionsSuppressedBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case alarm
        case extensionperiod
        case waitperiod
        case sdkUnknown(Swift.String)

        public static var allCases: [ActionsSuppressedBy] {
            return [
                .alarm,
                .extensionperiod,
                .waitperiod,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .alarm: return "Alarm"
            case .extensionperiod: return "ExtensionPeriod"
            case .waitperiod: return "WaitPeriod"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ActionsSuppressedBy(rawValue: rawValue) ?? ActionsSuppressedBy.sdkUnknown(rawValue)
        }
    }
}

extension CloudWatchClientTypes.AlarmHistoryItem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmName = "AlarmName"
        case alarmType = "AlarmType"
        case historyData = "HistoryData"
        case historyItemType = "HistoryItemType"
        case historySummary = "HistorySummary"
        case timestamp = "Timestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let alarmName = alarmName {
            try container.encode(alarmName, forKey: ClientRuntime.Key("AlarmName"))
        }
        if let alarmType = alarmType {
            try container.encode(alarmType, forKey: ClientRuntime.Key("AlarmType"))
        }
        if let historyData = historyData {
            try container.encode(historyData, forKey: ClientRuntime.Key("HistoryData"))
        }
        if let historyItemType = historyItemType {
            try container.encode(historyItemType, forKey: ClientRuntime.Key("HistoryItemType"))
        }
        if let historySummary = historySummary {
            try container.encode(historySummary, forKey: ClientRuntime.Key("HistorySummary"))
        }
        if let timestamp = timestamp {
            try container.encodeTimestamp(timestamp, format: .dateTime, forKey: ClientRuntime.Key("timestamp"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alarmNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmName)
        alarmName = alarmNameDecoded
        let alarmTypeDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.AlarmType.self, forKey: .alarmType)
        alarmType = alarmTypeDecoded
        let timestampDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .timestamp)
        timestamp = timestampDecoded
        let historyItemTypeDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.HistoryItemType.self, forKey: .historyItemType)
        historyItemType = historyItemTypeDecoded
        let historySummaryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .historySummary)
        historySummary = historySummaryDecoded
        let historyDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .historyData)
        historyData = historyDataDecoded
    }
}

extension CloudWatchClientTypes {
    /// Represents the history of a specific alarm.
    public struct AlarmHistoryItem: Swift.Equatable {
        /// The descriptive name for the alarm.
        public var alarmName: Swift.String?
        /// The type of alarm, either metric alarm or composite alarm.
        public var alarmType: CloudWatchClientTypes.AlarmType?
        /// Data about the alarm, in JSON format.
        public var historyData: Swift.String?
        /// The type of alarm history item.
        public var historyItemType: CloudWatchClientTypes.HistoryItemType?
        /// A summary of the alarm history, in text format.
        public var historySummary: Swift.String?
        /// The time stamp for the alarm history item.
        public var timestamp: ClientRuntime.Date?

        public init (
            alarmName: Swift.String? = nil,
            alarmType: CloudWatchClientTypes.AlarmType? = nil,
            historyData: Swift.String? = nil,
            historyItemType: CloudWatchClientTypes.HistoryItemType? = nil,
            historySummary: Swift.String? = nil,
            timestamp: ClientRuntime.Date? = nil
        )
        {
            self.alarmName = alarmName
            self.alarmType = alarmType
            self.historyData = historyData
            self.historyItemType = historyItemType
            self.historySummary = historySummary
            self.timestamp = timestamp
        }
    }

}

extension CloudWatchClientTypes {
    public enum AlarmType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case compositealarm
        case metricalarm
        case sdkUnknown(Swift.String)

        public static var allCases: [AlarmType] {
            return [
                .compositealarm,
                .metricalarm,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .compositealarm: return "CompositeAlarm"
            case .metricalarm: return "MetricAlarm"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AlarmType(rawValue: rawValue) ?? AlarmType.sdkUnknown(rawValue)
        }
    }
}

extension CloudWatchClientTypes.AnomalyDetector: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configuration = "Configuration"
        case dimensions = "Dimensions"
        case metricMathAnomalyDetector = "MetricMathAnomalyDetector"
        case metricName = "MetricName"
        case namespace = "Namespace"
        case singleMetricAnomalyDetector = "SingleMetricAnomalyDetector"
        case stat = "Stat"
        case stateValue = "StateValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configuration = configuration {
            try container.encode(configuration, forKey: ClientRuntime.Key("Configuration"))
        }
        if let dimensions = dimensions {
            if !dimensions.isEmpty {
                var dimensionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Dimensions"))
                for (index0, dimension0) in dimensions.enumerated() {
                    try dimensionsContainer.encode(dimension0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var dimensionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Dimensions"))
                try dimensionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let metricMathAnomalyDetector = metricMathAnomalyDetector {
            try container.encode(metricMathAnomalyDetector, forKey: ClientRuntime.Key("MetricMathAnomalyDetector"))
        }
        if let metricName = metricName {
            try container.encode(metricName, forKey: ClientRuntime.Key("MetricName"))
        }
        if let namespace = namespace {
            try container.encode(namespace, forKey: ClientRuntime.Key("Namespace"))
        }
        if let singleMetricAnomalyDetector = singleMetricAnomalyDetector {
            try container.encode(singleMetricAnomalyDetector, forKey: ClientRuntime.Key("SingleMetricAnomalyDetector"))
        }
        if let stat = stat {
            try container.encode(stat, forKey: ClientRuntime.Key("Stat"))
        }
        if let stateValue = stateValue {
            try container.encode(stateValue, forKey: ClientRuntime.Key("StateValue"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        if containerValues.contains(.dimensions) {
            struct KeyVal0{struct member{}}
            let dimensionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dimensions)
            if let dimensionsWrappedContainer = dimensionsWrappedContainer {
                let dimensionsContainer = try dimensionsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.Dimension].self, forKey: .member)
                var dimensionsBuffer:[CloudWatchClientTypes.Dimension]? = nil
                if let dimensionsContainer = dimensionsContainer {
                    dimensionsBuffer = [CloudWatchClientTypes.Dimension]()
                    for structureContainer0 in dimensionsContainer {
                        dimensionsBuffer?.append(structureContainer0)
                    }
                }
                dimensions = dimensionsBuffer
            } else {
                dimensions = []
            }
        } else {
            dimensions = nil
        }
        let statDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stat)
        stat = statDecoded
        let configurationDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.AnomalyDetectorConfiguration.self, forKey: .configuration)
        configuration = configurationDecoded
        let stateValueDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.AnomalyDetectorStateValue.self, forKey: .stateValue)
        stateValue = stateValueDecoded
        let singleMetricAnomalyDetectorDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.SingleMetricAnomalyDetector.self, forKey: .singleMetricAnomalyDetector)
        singleMetricAnomalyDetector = singleMetricAnomalyDetectorDecoded
        let metricMathAnomalyDetectorDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.MetricMathAnomalyDetector.self, forKey: .metricMathAnomalyDetector)
        metricMathAnomalyDetector = metricMathAnomalyDetectorDecoded
    }
}

extension CloudWatchClientTypes {
    /// An anomaly detection model associated with a particular CloudWatch metric, statistic, or metric math expression. You can use the model to display a band of expected, normal values when the metric is graphed.
    public struct AnomalyDetector: Swift.Equatable {
        /// The configuration specifies details about how the anomaly detection model is to be trained, including time ranges to exclude from use for training the model, and the time zone to use for the metric.
        public var configuration: CloudWatchClientTypes.AnomalyDetectorConfiguration?
        /// The metric dimensions associated with the anomaly detection model.
        @available(*, deprecated, message: "Use SingleMetricAnomalyDetector.Dimensions property.")
        public var dimensions: [CloudWatchClientTypes.Dimension]?
        /// The CloudWatch metric math expression for this anomaly detector.
        public var metricMathAnomalyDetector: CloudWatchClientTypes.MetricMathAnomalyDetector?
        /// The name of the metric associated with the anomaly detection model.
        @available(*, deprecated, message: "Use SingleMetricAnomalyDetector.MetricName property.")
        public var metricName: Swift.String?
        /// The namespace of the metric associated with the anomaly detection model.
        @available(*, deprecated, message: "Use SingleMetricAnomalyDetector.Namespace property.")
        public var namespace: Swift.String?
        /// The CloudWatch metric and statistic for this anomaly detector.
        public var singleMetricAnomalyDetector: CloudWatchClientTypes.SingleMetricAnomalyDetector?
        /// The statistic associated with the anomaly detection model.
        @available(*, deprecated, message: "Use SingleMetricAnomalyDetector.Stat property.")
        public var stat: Swift.String?
        /// The current status of the anomaly detector's training. The possible values are TRAINED | PENDING_TRAINING | TRAINED_INSUFFICIENT_DATA
        public var stateValue: CloudWatchClientTypes.AnomalyDetectorStateValue?

        public init (
            configuration: CloudWatchClientTypes.AnomalyDetectorConfiguration? = nil,
            dimensions: [CloudWatchClientTypes.Dimension]? = nil,
            metricMathAnomalyDetector: CloudWatchClientTypes.MetricMathAnomalyDetector? = nil,
            metricName: Swift.String? = nil,
            namespace: Swift.String? = nil,
            singleMetricAnomalyDetector: CloudWatchClientTypes.SingleMetricAnomalyDetector? = nil,
            stat: Swift.String? = nil,
            stateValue: CloudWatchClientTypes.AnomalyDetectorStateValue? = nil
        )
        {
            self.configuration = configuration
            self.dimensions = dimensions
            self.metricMathAnomalyDetector = metricMathAnomalyDetector
            self.metricName = metricName
            self.namespace = namespace
            self.singleMetricAnomalyDetector = singleMetricAnomalyDetector
            self.stat = stat
            self.stateValue = stateValue
        }
    }

}

extension CloudWatchClientTypes.AnomalyDetectorConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case excludedTimeRanges = "ExcludedTimeRanges"
        case metricTimezone = "MetricTimezone"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let excludedTimeRanges = excludedTimeRanges {
            if !excludedTimeRanges.isEmpty {
                var excludedTimeRangesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ExcludedTimeRanges"))
                for (index0, range0) in excludedTimeRanges.enumerated() {
                    try excludedTimeRangesContainer.encode(range0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var excludedTimeRangesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ExcludedTimeRanges"))
                try excludedTimeRangesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let metricTimezone = metricTimezone {
            try container.encode(metricTimezone, forKey: ClientRuntime.Key("MetricTimezone"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.excludedTimeRanges) {
            struct KeyVal0{struct member{}}
            let excludedTimeRangesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .excludedTimeRanges)
            if let excludedTimeRangesWrappedContainer = excludedTimeRangesWrappedContainer {
                let excludedTimeRangesContainer = try excludedTimeRangesWrappedContainer.decodeIfPresent([CloudWatchClientTypes.Range].self, forKey: .member)
                var excludedTimeRangesBuffer:[CloudWatchClientTypes.Range]? = nil
                if let excludedTimeRangesContainer = excludedTimeRangesContainer {
                    excludedTimeRangesBuffer = [CloudWatchClientTypes.Range]()
                    for structureContainer0 in excludedTimeRangesContainer {
                        excludedTimeRangesBuffer?.append(structureContainer0)
                    }
                }
                excludedTimeRanges = excludedTimeRangesBuffer
            } else {
                excludedTimeRanges = []
            }
        } else {
            excludedTimeRanges = nil
        }
        let metricTimezoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricTimezone)
        metricTimezone = metricTimezoneDecoded
    }
}

extension CloudWatchClientTypes {
    /// The configuration specifies details about how the anomaly detection model is to be trained, including time ranges to exclude from use for training the model and the time zone to use for the metric.
    public struct AnomalyDetectorConfiguration: Swift.Equatable {
        /// An array of time ranges to exclude from use when the anomaly detection model is trained. Use this to make sure that events that could cause unusual values for the metric, such as deployments, aren't used when CloudWatch creates the model.
        public var excludedTimeRanges: [CloudWatchClientTypes.Range]?
        /// The time zone to use for the metric. This is useful to enable the model to automatically account for daylight savings time changes if the metric is sensitive to such time changes. To specify a time zone, use the name of the time zone as specified in the standard tz database. For more information, see [tz database](https://en.wikipedia.org/wiki/Tz_database).
        public var metricTimezone: Swift.String?

        public init (
            excludedTimeRanges: [CloudWatchClientTypes.Range]? = nil,
            metricTimezone: Swift.String? = nil
        )
        {
            self.excludedTimeRanges = excludedTimeRanges
            self.metricTimezone = metricTimezone
        }
    }

}

extension CloudWatchClientTypes {
    public enum AnomalyDetectorStateValue: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case pendingTraining
        case trained
        case trainedInsufficientData
        case sdkUnknown(Swift.String)

        public static var allCases: [AnomalyDetectorStateValue] {
            return [
                .pendingTraining,
                .trained,
                .trainedInsufficientData,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .pendingTraining: return "PENDING_TRAINING"
            case .trained: return "TRAINED"
            case .trainedInsufficientData: return "TRAINED_INSUFFICIENT_DATA"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AnomalyDetectorStateValue(rawValue: rawValue) ?? AnomalyDetectorStateValue.sdkUnknown(rawValue)
        }
    }
}

extension CloudWatchClientTypes {
    public enum AnomalyDetectorType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case metricMath
        case singleMetric
        case sdkUnknown(Swift.String)

        public static var allCases: [AnomalyDetectorType] {
            return [
                .metricMath,
                .singleMetric,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .metricMath: return "METRIC_MATH"
            case .singleMetric: return "SINGLE_METRIC"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AnomalyDetectorType(rawValue: rawValue) ?? AnomalyDetectorType.sdkUnknown(rawValue)
        }
    }
}

extension CloudWatchClientTypes {
    public enum ComparisonOperator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case greaterthanorequaltothreshold
        case greaterthanthreshold
        case greaterthanupperthreshold
        case lessthanlowerorgreaterthanupperthreshold
        case lessthanlowerthreshold
        case lessthanorequaltothreshold
        case lessthanthreshold
        case sdkUnknown(Swift.String)

        public static var allCases: [ComparisonOperator] {
            return [
                .greaterthanorequaltothreshold,
                .greaterthanthreshold,
                .greaterthanupperthreshold,
                .lessthanlowerorgreaterthanupperthreshold,
                .lessthanlowerthreshold,
                .lessthanorequaltothreshold,
                .lessthanthreshold,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .greaterthanorequaltothreshold: return "GreaterThanOrEqualToThreshold"
            case .greaterthanthreshold: return "GreaterThanThreshold"
            case .greaterthanupperthreshold: return "GreaterThanUpperThreshold"
            case .lessthanlowerorgreaterthanupperthreshold: return "LessThanLowerOrGreaterThanUpperThreshold"
            case .lessthanlowerthreshold: return "LessThanLowerThreshold"
            case .lessthanorequaltothreshold: return "LessThanOrEqualToThreshold"
            case .lessthanthreshold: return "LessThanThreshold"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ComparisonOperator(rawValue: rawValue) ?? ComparisonOperator.sdkUnknown(rawValue)
        }
    }
}

extension CloudWatchClientTypes.CompositeAlarm: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionsEnabled = "ActionsEnabled"
        case actionsSuppressedBy = "ActionsSuppressedBy"
        case actionsSuppressedReason = "ActionsSuppressedReason"
        case actionsSuppressor = "ActionsSuppressor"
        case actionsSuppressorExtensionPeriod = "ActionsSuppressorExtensionPeriod"
        case actionsSuppressorWaitPeriod = "ActionsSuppressorWaitPeriod"
        case alarmActions = "AlarmActions"
        case alarmArn = "AlarmArn"
        case alarmConfigurationUpdatedTimestamp = "AlarmConfigurationUpdatedTimestamp"
        case alarmDescription = "AlarmDescription"
        case alarmName = "AlarmName"
        case alarmRule = "AlarmRule"
        case insufficientDataActions = "InsufficientDataActions"
        case okActions = "OKActions"
        case stateReason = "StateReason"
        case stateReasonData = "StateReasonData"
        case stateTransitionedTimestamp = "StateTransitionedTimestamp"
        case stateUpdatedTimestamp = "StateUpdatedTimestamp"
        case stateValue = "StateValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let actionsEnabled = actionsEnabled {
            try container.encode(actionsEnabled, forKey: ClientRuntime.Key("ActionsEnabled"))
        }
        if let actionsSuppressedBy = actionsSuppressedBy {
            try container.encode(actionsSuppressedBy, forKey: ClientRuntime.Key("ActionsSuppressedBy"))
        }
        if let actionsSuppressedReason = actionsSuppressedReason {
            try container.encode(actionsSuppressedReason, forKey: ClientRuntime.Key("ActionsSuppressedReason"))
        }
        if let actionsSuppressor = actionsSuppressor {
            try container.encode(actionsSuppressor, forKey: ClientRuntime.Key("ActionsSuppressor"))
        }
        if let actionsSuppressorExtensionPeriod = actionsSuppressorExtensionPeriod {
            try container.encode(actionsSuppressorExtensionPeriod, forKey: ClientRuntime.Key("ActionsSuppressorExtensionPeriod"))
        }
        if let actionsSuppressorWaitPeriod = actionsSuppressorWaitPeriod {
            try container.encode(actionsSuppressorWaitPeriod, forKey: ClientRuntime.Key("ActionsSuppressorWaitPeriod"))
        }
        if let alarmActions = alarmActions {
            if !alarmActions.isEmpty {
                var alarmActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AlarmActions"))
                for (index0, resourcename0) in alarmActions.enumerated() {
                    try alarmActionsContainer.encode(resourcename0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var alarmActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AlarmActions"))
                try alarmActionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let alarmArn = alarmArn {
            try container.encode(alarmArn, forKey: ClientRuntime.Key("AlarmArn"))
        }
        if let alarmConfigurationUpdatedTimestamp = alarmConfigurationUpdatedTimestamp {
            try container.encodeTimestamp(alarmConfigurationUpdatedTimestamp, format: .dateTime, forKey: ClientRuntime.Key("alarmConfigurationUpdatedTimestamp"))
        }
        if let alarmDescription = alarmDescription {
            try container.encode(alarmDescription, forKey: ClientRuntime.Key("AlarmDescription"))
        }
        if let alarmName = alarmName {
            try container.encode(alarmName, forKey: ClientRuntime.Key("AlarmName"))
        }
        if let alarmRule = alarmRule {
            try container.encode(alarmRule, forKey: ClientRuntime.Key("AlarmRule"))
        }
        if let insufficientDataActions = insufficientDataActions {
            if !insufficientDataActions.isEmpty {
                var insufficientDataActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InsufficientDataActions"))
                for (index0, resourcename0) in insufficientDataActions.enumerated() {
                    try insufficientDataActionsContainer.encode(resourcename0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var insufficientDataActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InsufficientDataActions"))
                try insufficientDataActionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let okActions = okActions {
            if !okActions.isEmpty {
                var okActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OKActions"))
                for (index0, resourcename0) in okActions.enumerated() {
                    try okActionsContainer.encode(resourcename0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var okActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OKActions"))
                try okActionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let stateReason = stateReason {
            try container.encode(stateReason, forKey: ClientRuntime.Key("StateReason"))
        }
        if let stateReasonData = stateReasonData {
            try container.encode(stateReasonData, forKey: ClientRuntime.Key("StateReasonData"))
        }
        if let stateTransitionedTimestamp = stateTransitionedTimestamp {
            try container.encodeTimestamp(stateTransitionedTimestamp, format: .dateTime, forKey: ClientRuntime.Key("stateTransitionedTimestamp"))
        }
        if let stateUpdatedTimestamp = stateUpdatedTimestamp {
            try container.encodeTimestamp(stateUpdatedTimestamp, format: .dateTime, forKey: ClientRuntime.Key("stateUpdatedTimestamp"))
        }
        if let stateValue = stateValue {
            try container.encode(stateValue, forKey: ClientRuntime.Key("StateValue"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionsEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .actionsEnabled)
        actionsEnabled = actionsEnabledDecoded
        if containerValues.contains(.alarmActions) {
            struct KeyVal0{struct member{}}
            let alarmActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .alarmActions)
            if let alarmActionsWrappedContainer = alarmActionsWrappedContainer {
                let alarmActionsContainer = try alarmActionsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var alarmActionsBuffer:[Swift.String]? = nil
                if let alarmActionsContainer = alarmActionsContainer {
                    alarmActionsBuffer = [Swift.String]()
                    for stringContainer0 in alarmActionsContainer {
                        alarmActionsBuffer?.append(stringContainer0)
                    }
                }
                alarmActions = alarmActionsBuffer
            } else {
                alarmActions = []
            }
        } else {
            alarmActions = nil
        }
        let alarmArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmArn)
        alarmArn = alarmArnDecoded
        let alarmConfigurationUpdatedTimestampDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .alarmConfigurationUpdatedTimestamp)
        alarmConfigurationUpdatedTimestamp = alarmConfigurationUpdatedTimestampDecoded
        let alarmDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmDescription)
        alarmDescription = alarmDescriptionDecoded
        let alarmNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmName)
        alarmName = alarmNameDecoded
        let alarmRuleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmRule)
        alarmRule = alarmRuleDecoded
        if containerValues.contains(.insufficientDataActions) {
            struct KeyVal0{struct member{}}
            let insufficientDataActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .insufficientDataActions)
            if let insufficientDataActionsWrappedContainer = insufficientDataActionsWrappedContainer {
                let insufficientDataActionsContainer = try insufficientDataActionsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var insufficientDataActionsBuffer:[Swift.String]? = nil
                if let insufficientDataActionsContainer = insufficientDataActionsContainer {
                    insufficientDataActionsBuffer = [Swift.String]()
                    for stringContainer0 in insufficientDataActionsContainer {
                        insufficientDataActionsBuffer?.append(stringContainer0)
                    }
                }
                insufficientDataActions = insufficientDataActionsBuffer
            } else {
                insufficientDataActions = []
            }
        } else {
            insufficientDataActions = nil
        }
        if containerValues.contains(.okActions) {
            struct KeyVal0{struct member{}}
            let okActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .okActions)
            if let okActionsWrappedContainer = okActionsWrappedContainer {
                let okActionsContainer = try okActionsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var okActionsBuffer:[Swift.String]? = nil
                if let okActionsContainer = okActionsContainer {
                    okActionsBuffer = [Swift.String]()
                    for stringContainer0 in okActionsContainer {
                        okActionsBuffer?.append(stringContainer0)
                    }
                }
                okActions = okActionsBuffer
            } else {
                okActions = []
            }
        } else {
            okActions = nil
        }
        let stateReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateReason)
        stateReason = stateReasonDecoded
        let stateReasonDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateReasonData)
        stateReasonData = stateReasonDataDecoded
        let stateUpdatedTimestampDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .stateUpdatedTimestamp)
        stateUpdatedTimestamp = stateUpdatedTimestampDecoded
        let stateValueDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.StateValue.self, forKey: .stateValue)
        stateValue = stateValueDecoded
        let stateTransitionedTimestampDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .stateTransitionedTimestamp)
        stateTransitionedTimestamp = stateTransitionedTimestampDecoded
        let actionsSuppressedByDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.ActionsSuppressedBy.self, forKey: .actionsSuppressedBy)
        actionsSuppressedBy = actionsSuppressedByDecoded
        let actionsSuppressedReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionsSuppressedReason)
        actionsSuppressedReason = actionsSuppressedReasonDecoded
        let actionsSuppressorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionsSuppressor)
        actionsSuppressor = actionsSuppressorDecoded
        let actionsSuppressorWaitPeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .actionsSuppressorWaitPeriod)
        actionsSuppressorWaitPeriod = actionsSuppressorWaitPeriodDecoded
        let actionsSuppressorExtensionPeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .actionsSuppressorExtensionPeriod)
        actionsSuppressorExtensionPeriod = actionsSuppressorExtensionPeriodDecoded
    }
}

extension CloudWatchClientTypes {
    /// The details about a composite alarm.
    public struct CompositeAlarm: Swift.Equatable {
        /// Indicates whether actions should be executed during any changes to the alarm state.
        public var actionsEnabled: Swift.Bool?
        /// When the value is ALARM, it means that the actions are suppressed because the suppressor alarm is in ALARM When the value is WaitPeriod, it means that the actions are suppressed because the composite alarm is waiting for the suppressor alarm to go into into the ALARM state. The maximum waiting time is as specified in ActionsSuppressorWaitPeriod. After this time, the composite alarm performs its actions. When the value is ExtensionPeriod, it means that the actions are suppressed because the composite alarm is waiting after the suppressor alarm went out of the ALARM state. The maximum waiting time is as specified in ActionsSuppressorExtensionPeriod. After this time, the composite alarm performs its actions.
        public var actionsSuppressedBy: CloudWatchClientTypes.ActionsSuppressedBy?
        /// Captures the reason for action suppression.
        public var actionsSuppressedReason: Swift.String?
        /// Actions will be suppressed if the suppressor alarm is in the ALARM state. ActionsSuppressor can be an AlarmName or an Amazon Resource Name (ARN) from an existing alarm.
        public var actionsSuppressor: Swift.String?
        /// The maximum time in seconds that the composite alarm waits after suppressor alarm goes out of the ALARM state. After this time, the composite alarm performs its actions. ExtensionPeriod is required only when ActionsSuppressor is specified.
        public var actionsSuppressorExtensionPeriod: Swift.Int?
        /// The maximum time in seconds that the composite alarm waits for the suppressor alarm to go into the ALARM state. After this time, the composite alarm performs its actions. WaitPeriod is required only when ActionsSuppressor is specified.
        public var actionsSuppressorWaitPeriod: Swift.Int?
        /// The actions to execute when this alarm transitions to the ALARM state from any other state. Each action is specified as an Amazon Resource Name (ARN).
        public var alarmActions: [Swift.String]?
        /// The Amazon Resource Name (ARN) of the alarm.
        public var alarmArn: Swift.String?
        /// The time stamp of the last update to the alarm configuration.
        public var alarmConfigurationUpdatedTimestamp: ClientRuntime.Date?
        /// The description of the alarm.
        public var alarmDescription: Swift.String?
        /// The name of the alarm.
        public var alarmName: Swift.String?
        /// The rule that this alarm uses to evaluate its alarm state.
        public var alarmRule: Swift.String?
        /// The actions to execute when this alarm transitions to the INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Name (ARN).
        public var insufficientDataActions: [Swift.String]?
        /// The actions to execute when this alarm transitions to the OK state from any other state. Each action is specified as an Amazon Resource Name (ARN).
        public var okActions: [Swift.String]?
        /// An explanation for the alarm state, in text format.
        public var stateReason: Swift.String?
        /// An explanation for the alarm state, in JSON format.
        public var stateReasonData: Swift.String?
        /// The timestamp of the last change to the alarm's StateValue.
        public var stateTransitionedTimestamp: ClientRuntime.Date?
        /// Tracks the timestamp of any state update, even if StateValue doesn't change.
        public var stateUpdatedTimestamp: ClientRuntime.Date?
        /// The state value for the alarm.
        public var stateValue: CloudWatchClientTypes.StateValue?

        public init (
            actionsEnabled: Swift.Bool? = nil,
            actionsSuppressedBy: CloudWatchClientTypes.ActionsSuppressedBy? = nil,
            actionsSuppressedReason: Swift.String? = nil,
            actionsSuppressor: Swift.String? = nil,
            actionsSuppressorExtensionPeriod: Swift.Int? = nil,
            actionsSuppressorWaitPeriod: Swift.Int? = nil,
            alarmActions: [Swift.String]? = nil,
            alarmArn: Swift.String? = nil,
            alarmConfigurationUpdatedTimestamp: ClientRuntime.Date? = nil,
            alarmDescription: Swift.String? = nil,
            alarmName: Swift.String? = nil,
            alarmRule: Swift.String? = nil,
            insufficientDataActions: [Swift.String]? = nil,
            okActions: [Swift.String]? = nil,
            stateReason: Swift.String? = nil,
            stateReasonData: Swift.String? = nil,
            stateTransitionedTimestamp: ClientRuntime.Date? = nil,
            stateUpdatedTimestamp: ClientRuntime.Date? = nil,
            stateValue: CloudWatchClientTypes.StateValue? = nil
        )
        {
            self.actionsEnabled = actionsEnabled
            self.actionsSuppressedBy = actionsSuppressedBy
            self.actionsSuppressedReason = actionsSuppressedReason
            self.actionsSuppressor = actionsSuppressor
            self.actionsSuppressorExtensionPeriod = actionsSuppressorExtensionPeriod
            self.actionsSuppressorWaitPeriod = actionsSuppressorWaitPeriod
            self.alarmActions = alarmActions
            self.alarmArn = alarmArn
            self.alarmConfigurationUpdatedTimestamp = alarmConfigurationUpdatedTimestamp
            self.alarmDescription = alarmDescription
            self.alarmName = alarmName
            self.alarmRule = alarmRule
            self.insufficientDataActions = insufficientDataActions
            self.okActions = okActions
            self.stateReason = stateReason
            self.stateReasonData = stateReasonData
            self.stateTransitionedTimestamp = stateTransitionedTimestamp
            self.stateUpdatedTimestamp = stateUpdatedTimestamp
            self.stateValue = stateValue
        }
    }

}

extension ConcurrentModificationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ConcurrentModificationExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// More than one process tried to modify a resource at the same time.
public struct ConcurrentModificationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ConcurrentModificationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ConcurrentModificationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudWatchClientTypes.DashboardEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dashboardArn = "DashboardArn"
        case dashboardName = "DashboardName"
        case lastModified = "LastModified"
        case size = "Size"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dashboardArn = dashboardArn {
            try container.encode(dashboardArn, forKey: ClientRuntime.Key("DashboardArn"))
        }
        if let dashboardName = dashboardName {
            try container.encode(dashboardName, forKey: ClientRuntime.Key("DashboardName"))
        }
        if let lastModified = lastModified {
            try container.encodeTimestamp(lastModified, format: .dateTime, forKey: ClientRuntime.Key("lastModified"))
        }
        if size != 0 {
            try container.encode(size, forKey: ClientRuntime.Key("Size"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dashboardNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dashboardName)
        dashboardName = dashboardNameDecoded
        let dashboardArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dashboardArn)
        dashboardArn = dashboardArnDecoded
        let lastModifiedDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .lastModified)
        lastModified = lastModifiedDecoded
        let sizeDecoded = try containerValues.decode(Swift.Int.self, forKey: .size)
        size = sizeDecoded
    }
}

extension CloudWatchClientTypes {
    /// Represents a specific dashboard.
    public struct DashboardEntry: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the dashboard.
        public var dashboardArn: Swift.String?
        /// The name of the dashboard.
        public var dashboardName: Swift.String?
        /// The time stamp of when the dashboard was last modified, either by an API call or through the console. This number is expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC.
        public var lastModified: ClientRuntime.Date?
        /// The size of the dashboard, in bytes.
        public var size: Swift.Int

        public init (
            dashboardArn: Swift.String? = nil,
            dashboardName: Swift.String? = nil,
            lastModified: ClientRuntime.Date? = nil,
            size: Swift.Int = 0
        )
        {
            self.dashboardArn = dashboardArn
            self.dashboardName = dashboardName
            self.lastModified = lastModified
            self.size = size
        }
    }

}

extension DashboardInvalidInputError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<DashboardInvalidInputErrorBody> = try responseDecoder.decode(responseBody: data)
            self.dashboardValidationMessages = output.error.dashboardValidationMessages
            self.message = output.error.message
        } else {
            self.dashboardValidationMessages = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Some part of the dashboard data is invalid.
public struct DashboardInvalidInputError: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var dashboardValidationMessages: [CloudWatchClientTypes.DashboardValidationMessage]?
    public var message: Swift.String?

    public init (
        dashboardValidationMessages: [CloudWatchClientTypes.DashboardValidationMessage]? = nil,
        message: Swift.String? = nil
    )
    {
        self.dashboardValidationMessages = dashboardValidationMessages
        self.message = message
    }
}

struct DashboardInvalidInputErrorBody: Swift.Equatable {
    let message: Swift.String?
    let dashboardValidationMessages: [CloudWatchClientTypes.DashboardValidationMessage]?
}

extension DashboardInvalidInputErrorBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dashboardValidationMessages
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        if containerValues.contains(.dashboardValidationMessages) {
            struct KeyVal0{struct member{}}
            let dashboardValidationMessagesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dashboardValidationMessages)
            if let dashboardValidationMessagesWrappedContainer = dashboardValidationMessagesWrappedContainer {
                let dashboardValidationMessagesContainer = try dashboardValidationMessagesWrappedContainer.decodeIfPresent([CloudWatchClientTypes.DashboardValidationMessage].self, forKey: .member)
                var dashboardValidationMessagesBuffer:[CloudWatchClientTypes.DashboardValidationMessage]? = nil
                if let dashboardValidationMessagesContainer = dashboardValidationMessagesContainer {
                    dashboardValidationMessagesBuffer = [CloudWatchClientTypes.DashboardValidationMessage]()
                    for structureContainer0 in dashboardValidationMessagesContainer {
                        dashboardValidationMessagesBuffer?.append(structureContainer0)
                    }
                }
                dashboardValidationMessages = dashboardValidationMessagesBuffer
            } else {
                dashboardValidationMessages = []
            }
        } else {
            dashboardValidationMessages = nil
        }
    }
}

extension DashboardNotFoundError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<DashboardNotFoundErrorBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified dashboard does not exist.
public struct DashboardNotFoundError: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DashboardNotFoundErrorBody: Swift.Equatable {
    let message: Swift.String?
}

extension DashboardNotFoundErrorBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudWatchClientTypes.DashboardValidationMessage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataPath = "DataPath"
        case message = "Message"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dataPath = dataPath {
            try container.encode(dataPath, forKey: ClientRuntime.Key("DataPath"))
        }
        if let message = message {
            try container.encode(message, forKey: ClientRuntime.Key("Message"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataPath)
        dataPath = dataPathDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudWatchClientTypes {
    /// An error or warning for the operation.
    public struct DashboardValidationMessage: Swift.Equatable {
        /// The data path related to the message.
        public var dataPath: Swift.String?
        /// A message describing the error or warning.
        public var message: Swift.String?

        public init (
            dataPath: Swift.String? = nil,
            message: Swift.String? = nil
        )
        {
            self.dataPath = dataPath
            self.message = message
        }
    }

}

extension CloudWatchClientTypes.Datapoint: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case average = "Average"
        case extendedStatistics = "ExtendedStatistics"
        case maximum = "Maximum"
        case minimum = "Minimum"
        case sampleCount = "SampleCount"
        case sum = "Sum"
        case timestamp = "Timestamp"
        case unit = "Unit"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let average = average {
            try container.encode(average, forKey: ClientRuntime.Key("Average"))
        }
        if let extendedStatistics = extendedStatistics {
            var extendedStatisticsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ExtendedStatistics"))
            for (index0, element0) in extendedStatistics.sorted(by: { $0.key < $1.key }).enumerated() {
                let extendedstatisticKey0 = element0.key
                let datapointvalueValue0 = element0.value
                var entryContainer0 = extendedStatisticsContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("entry.\(index0.advanced(by: 1))"))
                var keyContainer0 = entryContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("key"))
                try keyContainer0.encode(extendedstatisticKey0, forKey: ClientRuntime.Key(""))
                var valueContainer0 = entryContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("value"))
                try valueContainer0.encode(datapointvalueValue0, forKey: ClientRuntime.Key(""))
            }
        }
        if let maximum = maximum {
            try container.encode(maximum, forKey: ClientRuntime.Key("Maximum"))
        }
        if let minimum = minimum {
            try container.encode(minimum, forKey: ClientRuntime.Key("Minimum"))
        }
        if let sampleCount = sampleCount {
            try container.encode(sampleCount, forKey: ClientRuntime.Key("SampleCount"))
        }
        if let sum = sum {
            try container.encode(sum, forKey: ClientRuntime.Key("Sum"))
        }
        if let timestamp = timestamp {
            try container.encodeTimestamp(timestamp, format: .dateTime, forKey: ClientRuntime.Key("timestamp"))
        }
        if let unit = unit {
            try container.encode(unit, forKey: ClientRuntime.Key("Unit"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timestampDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .timestamp)
        timestamp = timestampDecoded
        let sampleCountDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .sampleCount)
        sampleCount = sampleCountDecoded
        let averageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .average)
        average = averageDecoded
        let sumDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .sum)
        sum = sumDecoded
        let minimumDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .minimum)
        minimum = minimumDecoded
        let maximumDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .maximum)
        maximum = maximumDecoded
        let unitDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.StandardUnit.self, forKey: .unit)
        unit = unitDecoded
        if containerValues.contains(.extendedStatistics) {
            struct KeyVal0{struct key{}; struct value{}}
            let extendedStatisticsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: ClientRuntime.MapEntry<Swift.String, Swift.Double, KeyVal0.key, KeyVal0.value>.CodingKeys.self, forKey: .extendedStatistics)
            if let extendedStatisticsWrappedContainer = extendedStatisticsWrappedContainer {
                let extendedStatisticsContainer = try extendedStatisticsWrappedContainer.decodeIfPresent([ClientRuntime.MapKeyValue<Swift.String, Swift.Double, KeyVal0.key, KeyVal0.value>].self, forKey: .entry)
                var extendedStatisticsBuffer: [Swift.String:Swift.Double]? = nil
                if let extendedStatisticsContainer = extendedStatisticsContainer {
                    extendedStatisticsBuffer = [Swift.String:Swift.Double]()
                    for doubleContainer0 in extendedStatisticsContainer {
                        extendedStatisticsBuffer?[doubleContainer0.key] = doubleContainer0.value
                    }
                }
                extendedStatistics = extendedStatisticsBuffer
            } else {
                extendedStatistics = [:]
            }
        } else {
            extendedStatistics = nil
        }
    }
}

extension CloudWatchClientTypes {
    /// Encapsulates the statistical data that CloudWatch computes from metric data.
    public struct Datapoint: Swift.Equatable {
        /// The average of the metric values that correspond to the data point.
        public var average: Swift.Double?
        /// The percentile statistic for the data point.
        public var extendedStatistics: [Swift.String:Swift.Double]?
        /// The maximum metric value for the data point.
        public var maximum: Swift.Double?
        /// The minimum metric value for the data point.
        public var minimum: Swift.Double?
        /// The number of metric values that contributed to the aggregate value of this data point.
        public var sampleCount: Swift.Double?
        /// The sum of the metric values for the data point.
        public var sum: Swift.Double?
        /// The time stamp used for the data point.
        public var timestamp: ClientRuntime.Date?
        /// The standard unit for the data point.
        public var unit: CloudWatchClientTypes.StandardUnit?

        public init (
            average: Swift.Double? = nil,
            extendedStatistics: [Swift.String:Swift.Double]? = nil,
            maximum: Swift.Double? = nil,
            minimum: Swift.Double? = nil,
            sampleCount: Swift.Double? = nil,
            sum: Swift.Double? = nil,
            timestamp: ClientRuntime.Date? = nil,
            unit: CloudWatchClientTypes.StandardUnit? = nil
        )
        {
            self.average = average
            self.extendedStatistics = extendedStatistics
            self.maximum = maximum
            self.minimum = minimum
            self.sampleCount = sampleCount
            self.sum = sum
            self.timestamp = timestamp
            self.unit = unit
        }
    }

}

extension DeleteAlarmsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let alarmNames = alarmNames {
            if !alarmNames.isEmpty {
                var alarmNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AlarmNames"))
                for (index0, alarmname0) in alarmNames.enumerated() {
                    try alarmNamesContainer.encode(alarmname0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var alarmNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AlarmNames"))
                try alarmNamesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DeleteAlarms", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteAlarmsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteAlarmsInput: Swift.Equatable {
    /// The alarms to be deleted.
    /// This member is required.
    public var alarmNames: [Swift.String]?

    public init (
        alarmNames: [Swift.String]? = nil
    )
    {
        self.alarmNames = alarmNames
    }
}

struct DeleteAlarmsInputBody: Swift.Equatable {
    let alarmNames: [Swift.String]?
}

extension DeleteAlarmsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmNames = "AlarmNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.alarmNames) {
            struct KeyVal0{struct member{}}
            let alarmNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .alarmNames)
            if let alarmNamesWrappedContainer = alarmNamesWrappedContainer {
                let alarmNamesContainer = try alarmNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var alarmNamesBuffer:[Swift.String]? = nil
                if let alarmNamesContainer = alarmNamesContainer {
                    alarmNamesBuffer = [Swift.String]()
                    for stringContainer0 in alarmNamesContainer {
                        alarmNamesBuffer?.append(stringContainer0)
                    }
                }
                alarmNames = alarmNamesBuffer
            } else {
                alarmNames = []
            }
        } else {
            alarmNames = nil
        }
    }
}

extension DeleteAlarmsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteAlarmsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteAlarmsOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteAlarmsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteAlarmsOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteAnomalyDetectorInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dimensions = dimensions {
            if !dimensions.isEmpty {
                var dimensionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Dimensions"))
                for (index0, dimension0) in dimensions.enumerated() {
                    try dimensionsContainer.encode(dimension0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var dimensionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Dimensions"))
                try dimensionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let metricMathAnomalyDetector = metricMathAnomalyDetector {
            try container.encode(metricMathAnomalyDetector, forKey: ClientRuntime.Key("MetricMathAnomalyDetector"))
        }
        if let metricName = metricName {
            try container.encode(metricName, forKey: ClientRuntime.Key("MetricName"))
        }
        if let namespace = namespace {
            try container.encode(namespace, forKey: ClientRuntime.Key("Namespace"))
        }
        if let singleMetricAnomalyDetector = singleMetricAnomalyDetector {
            try container.encode(singleMetricAnomalyDetector, forKey: ClientRuntime.Key("SingleMetricAnomalyDetector"))
        }
        if let stat = stat {
            try container.encode(stat, forKey: ClientRuntime.Key("Stat"))
        }
        try container.encode("DeleteAnomalyDetector", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteAnomalyDetectorInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteAnomalyDetectorInput: Swift.Equatable {
    /// The metric dimensions associated with the anomaly detection model to delete.
    @available(*, deprecated, message: "Use SingleMetricAnomalyDetector.")
    public var dimensions: [CloudWatchClientTypes.Dimension]?
    /// The metric math anomaly detector to be deleted. When using MetricMathAnomalyDetector, you cannot include following parameters in the same operation:
    ///
    /// * Dimensions,
    ///
    /// * MetricName
    ///
    /// * Namespace
    ///
    /// * Stat
    ///
    /// * the SingleMetricAnomalyDetector parameters of DeleteAnomalyDetectorInput
    ///
    ///
    /// Instead, specify the metric math anomaly detector attributes as part of the MetricMathAnomalyDetector property.
    public var metricMathAnomalyDetector: CloudWatchClientTypes.MetricMathAnomalyDetector?
    /// The metric name associated with the anomaly detection model to delete.
    @available(*, deprecated, message: "Use SingleMetricAnomalyDetector.")
    public var metricName: Swift.String?
    /// The namespace associated with the anomaly detection model to delete.
    @available(*, deprecated, message: "Use SingleMetricAnomalyDetector.")
    public var namespace: Swift.String?
    /// A single metric anomaly detector to be deleted. When using SingleMetricAnomalyDetector, you cannot include the following parameters in the same operation:
    ///
    /// * Dimensions,
    ///
    /// * MetricName
    ///
    /// * Namespace
    ///
    /// * Stat
    ///
    /// * the MetricMathAnomalyDetector parameters of DeleteAnomalyDetectorInput
    ///
    ///
    /// Instead, specify the single metric anomaly detector attributes as part of the SingleMetricAnomalyDetector property.
    public var singleMetricAnomalyDetector: CloudWatchClientTypes.SingleMetricAnomalyDetector?
    /// The statistic associated with the anomaly detection model to delete.
    @available(*, deprecated, message: "Use SingleMetricAnomalyDetector.")
    public var stat: Swift.String?

    public init (
        dimensions: [CloudWatchClientTypes.Dimension]? = nil,
        metricMathAnomalyDetector: CloudWatchClientTypes.MetricMathAnomalyDetector? = nil,
        metricName: Swift.String? = nil,
        namespace: Swift.String? = nil,
        singleMetricAnomalyDetector: CloudWatchClientTypes.SingleMetricAnomalyDetector? = nil,
        stat: Swift.String? = nil
    )
    {
        self.dimensions = dimensions
        self.metricMathAnomalyDetector = metricMathAnomalyDetector
        self.metricName = metricName
        self.namespace = namespace
        self.singleMetricAnomalyDetector = singleMetricAnomalyDetector
        self.stat = stat
    }
}

struct DeleteAnomalyDetectorInputBody: Swift.Equatable {
    let namespace: Swift.String?
    let metricName: Swift.String?
    let dimensions: [CloudWatchClientTypes.Dimension]?
    let stat: Swift.String?
    let singleMetricAnomalyDetector: CloudWatchClientTypes.SingleMetricAnomalyDetector?
    let metricMathAnomalyDetector: CloudWatchClientTypes.MetricMathAnomalyDetector?
}

extension DeleteAnomalyDetectorInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dimensions = "Dimensions"
        case metricMathAnomalyDetector = "MetricMathAnomalyDetector"
        case metricName = "MetricName"
        case namespace = "Namespace"
        case singleMetricAnomalyDetector = "SingleMetricAnomalyDetector"
        case stat = "Stat"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        if containerValues.contains(.dimensions) {
            struct KeyVal0{struct member{}}
            let dimensionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dimensions)
            if let dimensionsWrappedContainer = dimensionsWrappedContainer {
                let dimensionsContainer = try dimensionsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.Dimension].self, forKey: .member)
                var dimensionsBuffer:[CloudWatchClientTypes.Dimension]? = nil
                if let dimensionsContainer = dimensionsContainer {
                    dimensionsBuffer = [CloudWatchClientTypes.Dimension]()
                    for structureContainer0 in dimensionsContainer {
                        dimensionsBuffer?.append(structureContainer0)
                    }
                }
                dimensions = dimensionsBuffer
            } else {
                dimensions = []
            }
        } else {
            dimensions = nil
        }
        let statDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stat)
        stat = statDecoded
        let singleMetricAnomalyDetectorDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.SingleMetricAnomalyDetector.self, forKey: .singleMetricAnomalyDetector)
        singleMetricAnomalyDetector = singleMetricAnomalyDetectorDecoded
        let metricMathAnomalyDetectorDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.MetricMathAnomalyDetector.self, forKey: .metricMathAnomalyDetector)
        metricMathAnomalyDetector = metricMathAnomalyDetectorDecoded
    }
}

extension DeleteAnomalyDetectorOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteAnomalyDetectorOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceError" : self = .internalServiceFault(try InternalServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingParameter" : self = .missingRequiredParameterException(try MissingRequiredParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteAnomalyDetectorOutputError: Swift.Error, Swift.Equatable {
    case internalServiceFault(InternalServiceFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case missingRequiredParameterException(MissingRequiredParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteAnomalyDetectorOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteAnomalyDetectorOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteDashboardsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dashboardNames = dashboardNames {
            if !dashboardNames.isEmpty {
                var dashboardNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DashboardNames"))
                for (index0, dashboardname0) in dashboardNames.enumerated() {
                    try dashboardNamesContainer.encode(dashboardname0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var dashboardNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DashboardNames"))
                try dashboardNamesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DeleteDashboards", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteDashboardsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteDashboardsInput: Swift.Equatable {
    /// The dashboards to be deleted. This parameter is required.
    /// This member is required.
    public var dashboardNames: [Swift.String]?

    public init (
        dashboardNames: [Swift.String]? = nil
    )
    {
        self.dashboardNames = dashboardNames
    }
}

struct DeleteDashboardsInputBody: Swift.Equatable {
    let dashboardNames: [Swift.String]?
}

extension DeleteDashboardsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dashboardNames = "DashboardNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.dashboardNames) {
            struct KeyVal0{struct member{}}
            let dashboardNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dashboardNames)
            if let dashboardNamesWrappedContainer = dashboardNamesWrappedContainer {
                let dashboardNamesContainer = try dashboardNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var dashboardNamesBuffer:[Swift.String]? = nil
                if let dashboardNamesContainer = dashboardNamesContainer {
                    dashboardNamesBuffer = [Swift.String]()
                    for stringContainer0 in dashboardNamesContainer {
                        dashboardNamesBuffer?.append(stringContainer0)
                    }
                }
                dashboardNames = dashboardNamesBuffer
            } else {
                dashboardNames = []
            }
        } else {
            dashboardNames = nil
        }
    }
}

extension DeleteDashboardsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteDashboardsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .dashboardNotFoundError(try DashboardNotFoundError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceError" : self = .internalServiceFault(try InternalServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteDashboardsOutputError: Swift.Error, Swift.Equatable {
    case dashboardNotFoundError(DashboardNotFoundError)
    case internalServiceFault(InternalServiceFault)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDashboardsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteDashboardsOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteInsightRulesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let ruleNames = ruleNames {
            if !ruleNames.isEmpty {
                var ruleNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RuleNames"))
                for (index0, insightrulename0) in ruleNames.enumerated() {
                    try ruleNamesContainer.encode(insightrulename0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var ruleNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RuleNames"))
                try ruleNamesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DeleteInsightRules", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteInsightRulesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteInsightRulesInput: Swift.Equatable {
    /// An array of the rule names to delete. If you need to find out the names of your rules, use [DescribeInsightRules](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeInsightRules.html).
    /// This member is required.
    public var ruleNames: [Swift.String]?

    public init (
        ruleNames: [Swift.String]? = nil
    )
    {
        self.ruleNames = ruleNames
    }
}

struct DeleteInsightRulesInputBody: Swift.Equatable {
    let ruleNames: [Swift.String]?
}

extension DeleteInsightRulesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleNames = "RuleNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.ruleNames) {
            struct KeyVal0{struct member{}}
            let ruleNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .ruleNames)
            if let ruleNamesWrappedContainer = ruleNamesWrappedContainer {
                let ruleNamesContainer = try ruleNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var ruleNamesBuffer:[Swift.String]? = nil
                if let ruleNamesContainer = ruleNamesContainer {
                    ruleNamesBuffer = [Swift.String]()
                    for stringContainer0 in ruleNamesContainer {
                        ruleNamesBuffer?.append(stringContainer0)
                    }
                }
                ruleNames = ruleNamesBuffer
            } else {
                ruleNames = []
            }
        } else {
            ruleNames = nil
        }
    }
}

extension DeleteInsightRulesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteInsightRulesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingParameter" : self = .missingRequiredParameterException(try MissingRequiredParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteInsightRulesOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterValueException(InvalidParameterValueException)
    case missingRequiredParameterException(MissingRequiredParameterException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteInsightRulesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteInsightRulesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.failures = output.failures
        } else {
            self.failures = nil
        }
    }
}

public struct DeleteInsightRulesOutputResponse: Swift.Equatable {
    /// An array listing the rules that could not be deleted. You cannot delete built-in rules.
    public var failures: [CloudWatchClientTypes.PartialFailure]?

    public init (
        failures: [CloudWatchClientTypes.PartialFailure]? = nil
    )
    {
        self.failures = failures
    }
}

struct DeleteInsightRulesOutputResponseBody: Swift.Equatable {
    let failures: [CloudWatchClientTypes.PartialFailure]?
}

extension DeleteInsightRulesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failures = "Failures"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DeleteInsightRulesResult"))
        if containerValues.contains(.failures) {
            struct KeyVal0{struct member{}}
            let failuresWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .failures)
            if let failuresWrappedContainer = failuresWrappedContainer {
                let failuresContainer = try failuresWrappedContainer.decodeIfPresent([CloudWatchClientTypes.PartialFailure].self, forKey: .member)
                var failuresBuffer:[CloudWatchClientTypes.PartialFailure]? = nil
                if let failuresContainer = failuresContainer {
                    failuresBuffer = [CloudWatchClientTypes.PartialFailure]()
                    for structureContainer0 in failuresContainer {
                        failuresBuffer?.append(structureContainer0)
                    }
                }
                failures = failuresBuffer
            } else {
                failures = []
            }
        } else {
            failures = nil
        }
    }
}

extension DeleteMetricStreamInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        try container.encode("DeleteMetricStream", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteMetricStreamInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteMetricStreamInput: Swift.Equatable {
    /// The name of the metric stream to delete.
    /// This member is required.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct DeleteMetricStreamInputBody: Swift.Equatable {
    let name: Swift.String?
}

extension DeleteMetricStreamInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension DeleteMetricStreamOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteMetricStreamOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceError" : self = .internalServiceFault(try InternalServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingParameter" : self = .missingRequiredParameterException(try MissingRequiredParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteMetricStreamOutputError: Swift.Error, Swift.Equatable {
    case internalServiceFault(InternalServiceFault)
    case invalidParameterValueException(InvalidParameterValueException)
    case missingRequiredParameterException(MissingRequiredParameterException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteMetricStreamOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteMetricStreamOutputResponse: Swift.Equatable {

    public init () { }
}

extension DescribeAlarmHistoryInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let alarmName = alarmName {
            try container.encode(alarmName, forKey: ClientRuntime.Key("AlarmName"))
        }
        if let alarmTypes = alarmTypes {
            if !alarmTypes.isEmpty {
                var alarmTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AlarmTypes"))
                for (index0, alarmtype0) in alarmTypes.enumerated() {
                    try alarmTypesContainer.encode(alarmtype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var alarmTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AlarmTypes"))
                try alarmTypesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let endDate = endDate {
            try container.encodeTimestamp(endDate, format: .dateTime, forKey: ClientRuntime.Key("endDate"))
        }
        if let historyItemType = historyItemType {
            try container.encode(historyItemType, forKey: ClientRuntime.Key("HistoryItemType"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let scanBy = scanBy {
            try container.encode(scanBy, forKey: ClientRuntime.Key("ScanBy"))
        }
        if let startDate = startDate {
            try container.encodeTimestamp(startDate, format: .dateTime, forKey: ClientRuntime.Key("startDate"))
        }
        try container.encode("DescribeAlarmHistory", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeAlarmHistoryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeAlarmHistoryInput: Swift.Equatable {
    /// The name of the alarm.
    public var alarmName: Swift.String?
    /// Use this parameter to specify whether you want the operation to return metric alarms or composite alarms. If you omit this parameter, only metric alarms are returned.
    public var alarmTypes: [CloudWatchClientTypes.AlarmType]?
    /// The ending date to retrieve alarm history.
    public var endDate: ClientRuntime.Date?
    /// The type of alarm histories to retrieve.
    public var historyItemType: CloudWatchClientTypes.HistoryItemType?
    /// The maximum number of alarm history records to retrieve.
    public var maxRecords: Swift.Int?
    /// The token returned by a previous call to indicate that there is more data available.
    public var nextToken: Swift.String?
    /// Specified whether to return the newest or oldest alarm history first. Specify TimestampDescending to have the newest event history returned first, and specify TimestampAscending to have the oldest history returned first.
    public var scanBy: CloudWatchClientTypes.ScanBy?
    /// The starting date to retrieve alarm history.
    public var startDate: ClientRuntime.Date?

    public init (
        alarmName: Swift.String? = nil,
        alarmTypes: [CloudWatchClientTypes.AlarmType]? = nil,
        endDate: ClientRuntime.Date? = nil,
        historyItemType: CloudWatchClientTypes.HistoryItemType? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        scanBy: CloudWatchClientTypes.ScanBy? = nil,
        startDate: ClientRuntime.Date? = nil
    )
    {
        self.alarmName = alarmName
        self.alarmTypes = alarmTypes
        self.endDate = endDate
        self.historyItemType = historyItemType
        self.maxRecords = maxRecords
        self.nextToken = nextToken
        self.scanBy = scanBy
        self.startDate = startDate
    }
}

struct DescribeAlarmHistoryInputBody: Swift.Equatable {
    let alarmName: Swift.String?
    let alarmTypes: [CloudWatchClientTypes.AlarmType]?
    let historyItemType: CloudWatchClientTypes.HistoryItemType?
    let startDate: ClientRuntime.Date?
    let endDate: ClientRuntime.Date?
    let maxRecords: Swift.Int?
    let nextToken: Swift.String?
    let scanBy: CloudWatchClientTypes.ScanBy?
}

extension DescribeAlarmHistoryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmName = "AlarmName"
        case alarmTypes = "AlarmTypes"
        case endDate = "EndDate"
        case historyItemType = "HistoryItemType"
        case maxRecords = "MaxRecords"
        case nextToken = "NextToken"
        case scanBy = "ScanBy"
        case startDate = "StartDate"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alarmNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmName)
        alarmName = alarmNameDecoded
        if containerValues.contains(.alarmTypes) {
            struct KeyVal0{struct member{}}
            let alarmTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .alarmTypes)
            if let alarmTypesWrappedContainer = alarmTypesWrappedContainer {
                let alarmTypesContainer = try alarmTypesWrappedContainer.decodeIfPresent([CloudWatchClientTypes.AlarmType].self, forKey: .member)
                var alarmTypesBuffer:[CloudWatchClientTypes.AlarmType]? = nil
                if let alarmTypesContainer = alarmTypesContainer {
                    alarmTypesBuffer = [CloudWatchClientTypes.AlarmType]()
                    for enumContainer0 in alarmTypesContainer {
                        alarmTypesBuffer?.append(enumContainer0)
                    }
                }
                alarmTypes = alarmTypesBuffer
            } else {
                alarmTypes = []
            }
        } else {
            alarmTypes = nil
        }
        let historyItemTypeDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.HistoryItemType.self, forKey: .historyItemType)
        historyItemType = historyItemTypeDecoded
        let startDateDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .startDate)
        startDate = startDateDecoded
        let endDateDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .endDate)
        endDate = endDateDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let scanByDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.ScanBy.self, forKey: .scanBy)
        scanBy = scanByDecoded
    }
}

extension DescribeAlarmHistoryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeAlarmHistoryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextToken" : self = .invalidNextToken(try InvalidNextToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeAlarmHistoryOutputError: Swift.Error, Swift.Equatable {
    case invalidNextToken(InvalidNextToken)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAlarmHistoryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeAlarmHistoryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.alarmHistoryItems = output.alarmHistoryItems
            self.nextToken = output.nextToken
        } else {
            self.alarmHistoryItems = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeAlarmHistoryOutputResponse: Swift.Equatable {
    /// The alarm histories, in JSON format.
    public var alarmHistoryItems: [CloudWatchClientTypes.AlarmHistoryItem]?
    /// The token that marks the start of the next batch of returned results.
    public var nextToken: Swift.String?

    public init (
        alarmHistoryItems: [CloudWatchClientTypes.AlarmHistoryItem]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.alarmHistoryItems = alarmHistoryItems
        self.nextToken = nextToken
    }
}

struct DescribeAlarmHistoryOutputResponseBody: Swift.Equatable {
    let alarmHistoryItems: [CloudWatchClientTypes.AlarmHistoryItem]?
    let nextToken: Swift.String?
}

extension DescribeAlarmHistoryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmHistoryItems = "AlarmHistoryItems"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeAlarmHistoryResult"))
        if containerValues.contains(.alarmHistoryItems) {
            struct KeyVal0{struct member{}}
            let alarmHistoryItemsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .alarmHistoryItems)
            if let alarmHistoryItemsWrappedContainer = alarmHistoryItemsWrappedContainer {
                let alarmHistoryItemsContainer = try alarmHistoryItemsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.AlarmHistoryItem].self, forKey: .member)
                var alarmHistoryItemsBuffer:[CloudWatchClientTypes.AlarmHistoryItem]? = nil
                if let alarmHistoryItemsContainer = alarmHistoryItemsContainer {
                    alarmHistoryItemsBuffer = [CloudWatchClientTypes.AlarmHistoryItem]()
                    for structureContainer0 in alarmHistoryItemsContainer {
                        alarmHistoryItemsBuffer?.append(structureContainer0)
                    }
                }
                alarmHistoryItems = alarmHistoryItemsBuffer
            } else {
                alarmHistoryItems = []
            }
        } else {
            alarmHistoryItems = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeAlarmsForMetricInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dimensions = dimensions {
            if !dimensions.isEmpty {
                var dimensionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Dimensions"))
                for (index0, dimension0) in dimensions.enumerated() {
                    try dimensionsContainer.encode(dimension0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var dimensionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Dimensions"))
                try dimensionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let extendedStatistic = extendedStatistic {
            try container.encode(extendedStatistic, forKey: ClientRuntime.Key("ExtendedStatistic"))
        }
        if let metricName = metricName {
            try container.encode(metricName, forKey: ClientRuntime.Key("MetricName"))
        }
        if let namespace = namespace {
            try container.encode(namespace, forKey: ClientRuntime.Key("Namespace"))
        }
        if let period = period {
            try container.encode(period, forKey: ClientRuntime.Key("Period"))
        }
        if let statistic = statistic {
            try container.encode(statistic, forKey: ClientRuntime.Key("Statistic"))
        }
        if let unit = unit {
            try container.encode(unit, forKey: ClientRuntime.Key("Unit"))
        }
        try container.encode("DescribeAlarmsForMetric", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeAlarmsForMetricInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeAlarmsForMetricInput: Swift.Equatable {
    /// The dimensions associated with the metric. If the metric has any associated dimensions, you must specify them in order for the call to succeed.
    public var dimensions: [CloudWatchClientTypes.Dimension]?
    /// The percentile statistic for the metric. Specify a value between p0.0 and p100.
    public var extendedStatistic: Swift.String?
    /// The name of the metric.
    /// This member is required.
    public var metricName: Swift.String?
    /// The namespace of the metric.
    /// This member is required.
    public var namespace: Swift.String?
    /// The period, in seconds, over which the statistic is applied.
    public var period: Swift.Int?
    /// The statistic for the metric, other than percentiles. For percentile statistics, use ExtendedStatistics.
    public var statistic: CloudWatchClientTypes.Statistic?
    /// The unit for the metric.
    public var unit: CloudWatchClientTypes.StandardUnit?

    public init (
        dimensions: [CloudWatchClientTypes.Dimension]? = nil,
        extendedStatistic: Swift.String? = nil,
        metricName: Swift.String? = nil,
        namespace: Swift.String? = nil,
        period: Swift.Int? = nil,
        statistic: CloudWatchClientTypes.Statistic? = nil,
        unit: CloudWatchClientTypes.StandardUnit? = nil
    )
    {
        self.dimensions = dimensions
        self.extendedStatistic = extendedStatistic
        self.metricName = metricName
        self.namespace = namespace
        self.period = period
        self.statistic = statistic
        self.unit = unit
    }
}

struct DescribeAlarmsForMetricInputBody: Swift.Equatable {
    let metricName: Swift.String?
    let namespace: Swift.String?
    let statistic: CloudWatchClientTypes.Statistic?
    let extendedStatistic: Swift.String?
    let dimensions: [CloudWatchClientTypes.Dimension]?
    let period: Swift.Int?
    let unit: CloudWatchClientTypes.StandardUnit?
}

extension DescribeAlarmsForMetricInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dimensions = "Dimensions"
        case extendedStatistic = "ExtendedStatistic"
        case metricName = "MetricName"
        case namespace = "Namespace"
        case period = "Period"
        case statistic = "Statistic"
        case unit = "Unit"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let statisticDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.Statistic.self, forKey: .statistic)
        statistic = statisticDecoded
        let extendedStatisticDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .extendedStatistic)
        extendedStatistic = extendedStatisticDecoded
        if containerValues.contains(.dimensions) {
            struct KeyVal0{struct member{}}
            let dimensionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dimensions)
            if let dimensionsWrappedContainer = dimensionsWrappedContainer {
                let dimensionsContainer = try dimensionsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.Dimension].self, forKey: .member)
                var dimensionsBuffer:[CloudWatchClientTypes.Dimension]? = nil
                if let dimensionsContainer = dimensionsContainer {
                    dimensionsBuffer = [CloudWatchClientTypes.Dimension]()
                    for structureContainer0 in dimensionsContainer {
                        dimensionsBuffer?.append(structureContainer0)
                    }
                }
                dimensions = dimensionsBuffer
            } else {
                dimensions = []
            }
        } else {
            dimensions = nil
        }
        let periodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .period)
        period = periodDecoded
        let unitDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.StandardUnit.self, forKey: .unit)
        unit = unitDecoded
    }
}

extension DescribeAlarmsForMetricOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeAlarmsForMetricOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeAlarmsForMetricOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAlarmsForMetricOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeAlarmsForMetricOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.metricAlarms = output.metricAlarms
        } else {
            self.metricAlarms = nil
        }
    }
}

public struct DescribeAlarmsForMetricOutputResponse: Swift.Equatable {
    /// The information for each alarm with the specified metric.
    public var metricAlarms: [CloudWatchClientTypes.MetricAlarm]?

    public init (
        metricAlarms: [CloudWatchClientTypes.MetricAlarm]? = nil
    )
    {
        self.metricAlarms = metricAlarms
    }
}

struct DescribeAlarmsForMetricOutputResponseBody: Swift.Equatable {
    let metricAlarms: [CloudWatchClientTypes.MetricAlarm]?
}

extension DescribeAlarmsForMetricOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricAlarms = "MetricAlarms"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeAlarmsForMetricResult"))
        if containerValues.contains(.metricAlarms) {
            struct KeyVal0{struct member{}}
            let metricAlarmsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .metricAlarms)
            if let metricAlarmsWrappedContainer = metricAlarmsWrappedContainer {
                let metricAlarmsContainer = try metricAlarmsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.MetricAlarm].self, forKey: .member)
                var metricAlarmsBuffer:[CloudWatchClientTypes.MetricAlarm]? = nil
                if let metricAlarmsContainer = metricAlarmsContainer {
                    metricAlarmsBuffer = [CloudWatchClientTypes.MetricAlarm]()
                    for structureContainer0 in metricAlarmsContainer {
                        metricAlarmsBuffer?.append(structureContainer0)
                    }
                }
                metricAlarms = metricAlarmsBuffer
            } else {
                metricAlarms = []
            }
        } else {
            metricAlarms = nil
        }
    }
}

extension DescribeAlarmsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let actionPrefix = actionPrefix {
            try container.encode(actionPrefix, forKey: ClientRuntime.Key("ActionPrefix"))
        }
        if let alarmNamePrefix = alarmNamePrefix {
            try container.encode(alarmNamePrefix, forKey: ClientRuntime.Key("AlarmNamePrefix"))
        }
        if let alarmNames = alarmNames {
            if !alarmNames.isEmpty {
                var alarmNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AlarmNames"))
                for (index0, alarmname0) in alarmNames.enumerated() {
                    try alarmNamesContainer.encode(alarmname0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var alarmNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AlarmNames"))
                try alarmNamesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let alarmTypes = alarmTypes {
            if !alarmTypes.isEmpty {
                var alarmTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AlarmTypes"))
                for (index0, alarmtype0) in alarmTypes.enumerated() {
                    try alarmTypesContainer.encode(alarmtype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var alarmTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AlarmTypes"))
                try alarmTypesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let childrenOfAlarmName = childrenOfAlarmName {
            try container.encode(childrenOfAlarmName, forKey: ClientRuntime.Key("ChildrenOfAlarmName"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let parentsOfAlarmName = parentsOfAlarmName {
            try container.encode(parentsOfAlarmName, forKey: ClientRuntime.Key("ParentsOfAlarmName"))
        }
        if let stateValue = stateValue {
            try container.encode(stateValue, forKey: ClientRuntime.Key("StateValue"))
        }
        try container.encode("DescribeAlarms", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeAlarmsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeAlarmsInput: Swift.Equatable {
    /// Use this parameter to filter the results of the operation to only those alarms that use a certain alarm action. For example, you could specify the ARN of an SNS topic to find all alarms that send notifications to that topic.
    public var actionPrefix: Swift.String?
    /// An alarm name prefix. If you specify this parameter, you receive information about all alarms that have names that start with this prefix. If this parameter is specified, you cannot specify AlarmNames.
    public var alarmNamePrefix: Swift.String?
    /// The names of the alarms to retrieve information about.
    public var alarmNames: [Swift.String]?
    /// Use this parameter to specify whether you want the operation to return metric alarms or composite alarms. If you omit this parameter, only metric alarms are returned.
    public var alarmTypes: [CloudWatchClientTypes.AlarmType]?
    /// If you use this parameter and specify the name of a composite alarm, the operation returns information about the "children" alarms of the alarm you specify. These are the metric alarms and composite alarms referenced in the AlarmRule field of the composite alarm that you specify in ChildrenOfAlarmName. Information about the composite alarm that you name in ChildrenOfAlarmName is not returned. If you specify ChildrenOfAlarmName, you cannot specify any other parameters in the request except for MaxRecords and NextToken. If you do so, you receive a validation error. Only the Alarm Name, ARN, StateValue (OK/ALARM/INSUFFICIENT_DATA), and StateUpdatedTimestamp information are returned by this operation when you use this parameter. To get complete information about these alarms, perform another DescribeAlarms operation and specify the parent alarm names in the AlarmNames parameter.
    public var childrenOfAlarmName: Swift.String?
    /// The maximum number of alarm descriptions to retrieve.
    public var maxRecords: Swift.Int?
    /// The token returned by a previous call to indicate that there is more data available.
    public var nextToken: Swift.String?
    /// If you use this parameter and specify the name of a metric or composite alarm, the operation returns information about the "parent" alarms of the alarm you specify. These are the composite alarms that have AlarmRule parameters that reference the alarm named in ParentsOfAlarmName. Information about the alarm that you specify in ParentsOfAlarmName is not returned. If you specify ParentsOfAlarmName, you cannot specify any other parameters in the request except for MaxRecords and NextToken. If you do so, you receive a validation error. Only the Alarm Name and ARN are returned by this operation when you use this parameter. To get complete information about these alarms, perform another DescribeAlarms operation and specify the parent alarm names in the AlarmNames parameter.
    public var parentsOfAlarmName: Swift.String?
    /// Specify this parameter to receive information only about alarms that are currently in the state that you specify.
    public var stateValue: CloudWatchClientTypes.StateValue?

    public init (
        actionPrefix: Swift.String? = nil,
        alarmNamePrefix: Swift.String? = nil,
        alarmNames: [Swift.String]? = nil,
        alarmTypes: [CloudWatchClientTypes.AlarmType]? = nil,
        childrenOfAlarmName: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        parentsOfAlarmName: Swift.String? = nil,
        stateValue: CloudWatchClientTypes.StateValue? = nil
    )
    {
        self.actionPrefix = actionPrefix
        self.alarmNamePrefix = alarmNamePrefix
        self.alarmNames = alarmNames
        self.alarmTypes = alarmTypes
        self.childrenOfAlarmName = childrenOfAlarmName
        self.maxRecords = maxRecords
        self.nextToken = nextToken
        self.parentsOfAlarmName = parentsOfAlarmName
        self.stateValue = stateValue
    }
}

struct DescribeAlarmsInputBody: Swift.Equatable {
    let alarmNames: [Swift.String]?
    let alarmNamePrefix: Swift.String?
    let alarmTypes: [CloudWatchClientTypes.AlarmType]?
    let childrenOfAlarmName: Swift.String?
    let parentsOfAlarmName: Swift.String?
    let stateValue: CloudWatchClientTypes.StateValue?
    let actionPrefix: Swift.String?
    let maxRecords: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribeAlarmsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionPrefix = "ActionPrefix"
        case alarmNamePrefix = "AlarmNamePrefix"
        case alarmNames = "AlarmNames"
        case alarmTypes = "AlarmTypes"
        case childrenOfAlarmName = "ChildrenOfAlarmName"
        case maxRecords = "MaxRecords"
        case nextToken = "NextToken"
        case parentsOfAlarmName = "ParentsOfAlarmName"
        case stateValue = "StateValue"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.alarmNames) {
            struct KeyVal0{struct member{}}
            let alarmNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .alarmNames)
            if let alarmNamesWrappedContainer = alarmNamesWrappedContainer {
                let alarmNamesContainer = try alarmNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var alarmNamesBuffer:[Swift.String]? = nil
                if let alarmNamesContainer = alarmNamesContainer {
                    alarmNamesBuffer = [Swift.String]()
                    for stringContainer0 in alarmNamesContainer {
                        alarmNamesBuffer?.append(stringContainer0)
                    }
                }
                alarmNames = alarmNamesBuffer
            } else {
                alarmNames = []
            }
        } else {
            alarmNames = nil
        }
        let alarmNamePrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmNamePrefix)
        alarmNamePrefix = alarmNamePrefixDecoded
        if containerValues.contains(.alarmTypes) {
            struct KeyVal0{struct member{}}
            let alarmTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .alarmTypes)
            if let alarmTypesWrappedContainer = alarmTypesWrappedContainer {
                let alarmTypesContainer = try alarmTypesWrappedContainer.decodeIfPresent([CloudWatchClientTypes.AlarmType].self, forKey: .member)
                var alarmTypesBuffer:[CloudWatchClientTypes.AlarmType]? = nil
                if let alarmTypesContainer = alarmTypesContainer {
                    alarmTypesBuffer = [CloudWatchClientTypes.AlarmType]()
                    for enumContainer0 in alarmTypesContainer {
                        alarmTypesBuffer?.append(enumContainer0)
                    }
                }
                alarmTypes = alarmTypesBuffer
            } else {
                alarmTypes = []
            }
        } else {
            alarmTypes = nil
        }
        let childrenOfAlarmNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .childrenOfAlarmName)
        childrenOfAlarmName = childrenOfAlarmNameDecoded
        let parentsOfAlarmNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentsOfAlarmName)
        parentsOfAlarmName = parentsOfAlarmNameDecoded
        let stateValueDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.StateValue.self, forKey: .stateValue)
        stateValue = stateValueDecoded
        let actionPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionPrefix)
        actionPrefix = actionPrefixDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeAlarmsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeAlarmsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextToken" : self = .invalidNextToken(try InvalidNextToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeAlarmsOutputError: Swift.Error, Swift.Equatable {
    case invalidNextToken(InvalidNextToken)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAlarmsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeAlarmsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.compositeAlarms = output.compositeAlarms
            self.metricAlarms = output.metricAlarms
            self.nextToken = output.nextToken
        } else {
            self.compositeAlarms = nil
            self.metricAlarms = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeAlarmsOutputResponse: Swift.Equatable {
    /// The information about any composite alarms returned by the operation.
    public var compositeAlarms: [CloudWatchClientTypes.CompositeAlarm]?
    /// The information about any metric alarms returned by the operation.
    public var metricAlarms: [CloudWatchClientTypes.MetricAlarm]?
    /// The token that marks the start of the next batch of returned results.
    public var nextToken: Swift.String?

    public init (
        compositeAlarms: [CloudWatchClientTypes.CompositeAlarm]? = nil,
        metricAlarms: [CloudWatchClientTypes.MetricAlarm]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.compositeAlarms = compositeAlarms
        self.metricAlarms = metricAlarms
        self.nextToken = nextToken
    }
}

struct DescribeAlarmsOutputResponseBody: Swift.Equatable {
    let compositeAlarms: [CloudWatchClientTypes.CompositeAlarm]?
    let metricAlarms: [CloudWatchClientTypes.MetricAlarm]?
    let nextToken: Swift.String?
}

extension DescribeAlarmsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compositeAlarms = "CompositeAlarms"
        case metricAlarms = "MetricAlarms"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeAlarmsResult"))
        if containerValues.contains(.compositeAlarms) {
            struct KeyVal0{struct member{}}
            let compositeAlarmsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .compositeAlarms)
            if let compositeAlarmsWrappedContainer = compositeAlarmsWrappedContainer {
                let compositeAlarmsContainer = try compositeAlarmsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.CompositeAlarm].self, forKey: .member)
                var compositeAlarmsBuffer:[CloudWatchClientTypes.CompositeAlarm]? = nil
                if let compositeAlarmsContainer = compositeAlarmsContainer {
                    compositeAlarmsBuffer = [CloudWatchClientTypes.CompositeAlarm]()
                    for structureContainer0 in compositeAlarmsContainer {
                        compositeAlarmsBuffer?.append(structureContainer0)
                    }
                }
                compositeAlarms = compositeAlarmsBuffer
            } else {
                compositeAlarms = []
            }
        } else {
            compositeAlarms = nil
        }
        if containerValues.contains(.metricAlarms) {
            struct KeyVal0{struct member{}}
            let metricAlarmsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .metricAlarms)
            if let metricAlarmsWrappedContainer = metricAlarmsWrappedContainer {
                let metricAlarmsContainer = try metricAlarmsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.MetricAlarm].self, forKey: .member)
                var metricAlarmsBuffer:[CloudWatchClientTypes.MetricAlarm]? = nil
                if let metricAlarmsContainer = metricAlarmsContainer {
                    metricAlarmsBuffer = [CloudWatchClientTypes.MetricAlarm]()
                    for structureContainer0 in metricAlarmsContainer {
                        metricAlarmsBuffer?.append(structureContainer0)
                    }
                }
                metricAlarms = metricAlarmsBuffer
            } else {
                metricAlarms = []
            }
        } else {
            metricAlarms = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeAnomalyDetectorsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let anomalyDetectorTypes = anomalyDetectorTypes {
            if !anomalyDetectorTypes.isEmpty {
                var anomalyDetectorTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AnomalyDetectorTypes"))
                for (index0, anomalydetectortype0) in anomalyDetectorTypes.enumerated() {
                    try anomalyDetectorTypesContainer.encode(anomalydetectortype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var anomalyDetectorTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AnomalyDetectorTypes"))
                try anomalyDetectorTypesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let dimensions = dimensions {
            if !dimensions.isEmpty {
                var dimensionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Dimensions"))
                for (index0, dimension0) in dimensions.enumerated() {
                    try dimensionsContainer.encode(dimension0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var dimensionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Dimensions"))
                try dimensionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: ClientRuntime.Key("MaxResults"))
        }
        if let metricName = metricName {
            try container.encode(metricName, forKey: ClientRuntime.Key("MetricName"))
        }
        if let namespace = namespace {
            try container.encode(namespace, forKey: ClientRuntime.Key("Namespace"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("DescribeAnomalyDetectors", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeAnomalyDetectorsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeAnomalyDetectorsInput: Swift.Equatable {
    /// The anomaly detector types to request when using DescribeAnomalyDetectorsInput. If empty, defaults to SINGLE_METRIC.
    public var anomalyDetectorTypes: [CloudWatchClientTypes.AnomalyDetectorType]?
    /// Limits the results to only the anomaly detection models that are associated with the specified metric dimensions. If there are multiple metrics that have these dimensions and have anomaly detection models associated, they're all returned.
    public var dimensions: [CloudWatchClientTypes.Dimension]?
    /// The maximum number of results to return in one operation. The maximum value that you can specify is 100. To retrieve the remaining results, make another call with the returned NextToken value.
    public var maxResults: Swift.Int?
    /// Limits the results to only the anomaly detection models that are associated with the specified metric name. If there are multiple metrics with this name in different namespaces that have anomaly detection models, they're all returned.
    public var metricName: Swift.String?
    /// Limits the results to only the anomaly detection models that are associated with the specified namespace.
    public var namespace: Swift.String?
    /// Use the token returned by the previous operation to request the next page of results.
    public var nextToken: Swift.String?

    public init (
        anomalyDetectorTypes: [CloudWatchClientTypes.AnomalyDetectorType]? = nil,
        dimensions: [CloudWatchClientTypes.Dimension]? = nil,
        maxResults: Swift.Int? = nil,
        metricName: Swift.String? = nil,
        namespace: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.anomalyDetectorTypes = anomalyDetectorTypes
        self.dimensions = dimensions
        self.maxResults = maxResults
        self.metricName = metricName
        self.namespace = namespace
        self.nextToken = nextToken
    }
}

struct DescribeAnomalyDetectorsInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let namespace: Swift.String?
    let metricName: Swift.String?
    let dimensions: [CloudWatchClientTypes.Dimension]?
    let anomalyDetectorTypes: [CloudWatchClientTypes.AnomalyDetectorType]?
}

extension DescribeAnomalyDetectorsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case anomalyDetectorTypes = "AnomalyDetectorTypes"
        case dimensions = "Dimensions"
        case maxResults = "MaxResults"
        case metricName = "MetricName"
        case namespace = "Namespace"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        if containerValues.contains(.dimensions) {
            struct KeyVal0{struct member{}}
            let dimensionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dimensions)
            if let dimensionsWrappedContainer = dimensionsWrappedContainer {
                let dimensionsContainer = try dimensionsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.Dimension].self, forKey: .member)
                var dimensionsBuffer:[CloudWatchClientTypes.Dimension]? = nil
                if let dimensionsContainer = dimensionsContainer {
                    dimensionsBuffer = [CloudWatchClientTypes.Dimension]()
                    for structureContainer0 in dimensionsContainer {
                        dimensionsBuffer?.append(structureContainer0)
                    }
                }
                dimensions = dimensionsBuffer
            } else {
                dimensions = []
            }
        } else {
            dimensions = nil
        }
        if containerValues.contains(.anomalyDetectorTypes) {
            struct KeyVal0{struct member{}}
            let anomalyDetectorTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .anomalyDetectorTypes)
            if let anomalyDetectorTypesWrappedContainer = anomalyDetectorTypesWrappedContainer {
                let anomalyDetectorTypesContainer = try anomalyDetectorTypesWrappedContainer.decodeIfPresent([CloudWatchClientTypes.AnomalyDetectorType].self, forKey: .member)
                var anomalyDetectorTypesBuffer:[CloudWatchClientTypes.AnomalyDetectorType]? = nil
                if let anomalyDetectorTypesContainer = anomalyDetectorTypesContainer {
                    anomalyDetectorTypesBuffer = [CloudWatchClientTypes.AnomalyDetectorType]()
                    for enumContainer0 in anomalyDetectorTypesContainer {
                        anomalyDetectorTypesBuffer?.append(enumContainer0)
                    }
                }
                anomalyDetectorTypes = anomalyDetectorTypesBuffer
            } else {
                anomalyDetectorTypes = []
            }
        } else {
            anomalyDetectorTypes = nil
        }
    }
}

extension DescribeAnomalyDetectorsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeAnomalyDetectorsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceError" : self = .internalServiceFault(try InternalServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextToken" : self = .invalidNextToken(try InvalidNextToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeAnomalyDetectorsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceFault(InternalServiceFault)
    case invalidNextToken(InvalidNextToken)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAnomalyDetectorsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeAnomalyDetectorsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.anomalyDetectors = output.anomalyDetectors
            self.nextToken = output.nextToken
        } else {
            self.anomalyDetectors = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeAnomalyDetectorsOutputResponse: Swift.Equatable {
    /// The list of anomaly detection models returned by the operation.
    public var anomalyDetectors: [CloudWatchClientTypes.AnomalyDetector]?
    /// A token that you can use in a subsequent operation to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init (
        anomalyDetectors: [CloudWatchClientTypes.AnomalyDetector]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.anomalyDetectors = anomalyDetectors
        self.nextToken = nextToken
    }
}

struct DescribeAnomalyDetectorsOutputResponseBody: Swift.Equatable {
    let anomalyDetectors: [CloudWatchClientTypes.AnomalyDetector]?
    let nextToken: Swift.String?
}

extension DescribeAnomalyDetectorsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case anomalyDetectors = "AnomalyDetectors"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeAnomalyDetectorsResult"))
        if containerValues.contains(.anomalyDetectors) {
            struct KeyVal0{struct member{}}
            let anomalyDetectorsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .anomalyDetectors)
            if let anomalyDetectorsWrappedContainer = anomalyDetectorsWrappedContainer {
                let anomalyDetectorsContainer = try anomalyDetectorsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.AnomalyDetector].self, forKey: .member)
                var anomalyDetectorsBuffer:[CloudWatchClientTypes.AnomalyDetector]? = nil
                if let anomalyDetectorsContainer = anomalyDetectorsContainer {
                    anomalyDetectorsBuffer = [CloudWatchClientTypes.AnomalyDetector]()
                    for structureContainer0 in anomalyDetectorsContainer {
                        anomalyDetectorsBuffer?.append(structureContainer0)
                    }
                }
                anomalyDetectors = anomalyDetectorsBuffer
            } else {
                anomalyDetectors = []
            }
        } else {
            anomalyDetectors = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeInsightRulesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: ClientRuntime.Key("MaxResults"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("DescribeInsightRules", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeInsightRulesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeInsightRulesInput: Swift.Equatable {
    /// The maximum number of results to return in one operation. If you omit this parameter, the default of 500 is used.
    public var maxResults: Swift.Int?
    /// Include this value, if it was returned by the previous operation, to get the next set of rules.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct DescribeInsightRulesInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension DescribeInsightRulesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension DescribeInsightRulesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeInsightRulesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextToken" : self = .invalidNextToken(try InvalidNextToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeInsightRulesOutputError: Swift.Error, Swift.Equatable {
    case invalidNextToken(InvalidNextToken)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeInsightRulesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeInsightRulesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.insightRules = output.insightRules
            self.nextToken = output.nextToken
        } else {
            self.insightRules = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeInsightRulesOutputResponse: Swift.Equatable {
    /// The rules returned by the operation.
    public var insightRules: [CloudWatchClientTypes.InsightRule]?
    /// If this parameter is present, it is a token that marks the start of the next batch of returned results.
    public var nextToken: Swift.String?

    public init (
        insightRules: [CloudWatchClientTypes.InsightRule]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.insightRules = insightRules
        self.nextToken = nextToken
    }
}

struct DescribeInsightRulesOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let insightRules: [CloudWatchClientTypes.InsightRule]?
}

extension DescribeInsightRulesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case insightRules = "InsightRules"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeInsightRulesResult"))
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        if containerValues.contains(.insightRules) {
            struct KeyVal0{struct member{}}
            let insightRulesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .insightRules)
            if let insightRulesWrappedContainer = insightRulesWrappedContainer {
                let insightRulesContainer = try insightRulesWrappedContainer.decodeIfPresent([CloudWatchClientTypes.InsightRule].self, forKey: .member)
                var insightRulesBuffer:[CloudWatchClientTypes.InsightRule]? = nil
                if let insightRulesContainer = insightRulesContainer {
                    insightRulesBuffer = [CloudWatchClientTypes.InsightRule]()
                    for structureContainer0 in insightRulesContainer {
                        insightRulesBuffer?.append(structureContainer0)
                    }
                }
                insightRules = insightRulesBuffer
            } else {
                insightRules = []
            }
        } else {
            insightRules = nil
        }
    }
}

extension CloudWatchClientTypes.Dimension: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension CloudWatchClientTypes {
    /// A dimension is a name/value pair that is part of the identity of a metric. Because dimensions are part of the unique identifier for a metric, whenever you add a unique name/value pair to one of your metrics, you are creating a new variation of that metric. For example, many Amazon EC2 metrics publish InstanceId as a dimension name, and the actual instance ID as the value for that dimension. You can assign up to 30 dimensions to a metric.
    public struct Dimension: Swift.Equatable {
        /// The name of the dimension. Dimension names must contain only ASCII characters, must include at least one non-whitespace character, and cannot start with a colon (:).
        /// This member is required.
        public var name: Swift.String?
        /// The value of the dimension. Dimension values must contain only ASCII characters and must include at least one non-whitespace character.
        /// This member is required.
        public var value: Swift.String?

        public init (
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension CloudWatchClientTypes.DimensionFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension CloudWatchClientTypes {
    /// Represents filters for a dimension.
    public struct DimensionFilter: Swift.Equatable {
        /// The dimension name to be matched.
        /// This member is required.
        public var name: Swift.String?
        /// The value of the dimension to be matched.
        public var value: Swift.String?

        public init (
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension DisableAlarmActionsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let alarmNames = alarmNames {
            if !alarmNames.isEmpty {
                var alarmNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AlarmNames"))
                for (index0, alarmname0) in alarmNames.enumerated() {
                    try alarmNamesContainer.encode(alarmname0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var alarmNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AlarmNames"))
                try alarmNamesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DisableAlarmActions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DisableAlarmActionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DisableAlarmActionsInput: Swift.Equatable {
    /// The names of the alarms.
    /// This member is required.
    public var alarmNames: [Swift.String]?

    public init (
        alarmNames: [Swift.String]? = nil
    )
    {
        self.alarmNames = alarmNames
    }
}

struct DisableAlarmActionsInputBody: Swift.Equatable {
    let alarmNames: [Swift.String]?
}

extension DisableAlarmActionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmNames = "AlarmNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.alarmNames) {
            struct KeyVal0{struct member{}}
            let alarmNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .alarmNames)
            if let alarmNamesWrappedContainer = alarmNamesWrappedContainer {
                let alarmNamesContainer = try alarmNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var alarmNamesBuffer:[Swift.String]? = nil
                if let alarmNamesContainer = alarmNamesContainer {
                    alarmNamesBuffer = [Swift.String]()
                    for stringContainer0 in alarmNamesContainer {
                        alarmNamesBuffer?.append(stringContainer0)
                    }
                }
                alarmNames = alarmNamesBuffer
            } else {
                alarmNames = []
            }
        } else {
            alarmNames = nil
        }
    }
}

extension DisableAlarmActionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DisableAlarmActionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DisableAlarmActionsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DisableAlarmActionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DisableAlarmActionsOutputResponse: Swift.Equatable {

    public init () { }
}

extension DisableInsightRulesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let ruleNames = ruleNames {
            if !ruleNames.isEmpty {
                var ruleNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RuleNames"))
                for (index0, insightrulename0) in ruleNames.enumerated() {
                    try ruleNamesContainer.encode(insightrulename0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var ruleNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RuleNames"))
                try ruleNamesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DisableInsightRules", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension DisableInsightRulesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DisableInsightRulesInput: Swift.Equatable {
    /// An array of the rule names to disable. If you need to find out the names of your rules, use [DescribeInsightRules](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeInsightRules.html).
    /// This member is required.
    public var ruleNames: [Swift.String]?

    public init (
        ruleNames: [Swift.String]? = nil
    )
    {
        self.ruleNames = ruleNames
    }
}

struct DisableInsightRulesInputBody: Swift.Equatable {
    let ruleNames: [Swift.String]?
}

extension DisableInsightRulesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleNames = "RuleNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.ruleNames) {
            struct KeyVal0{struct member{}}
            let ruleNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .ruleNames)
            if let ruleNamesWrappedContainer = ruleNamesWrappedContainer {
                let ruleNamesContainer = try ruleNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var ruleNamesBuffer:[Swift.String]? = nil
                if let ruleNamesContainer = ruleNamesContainer {
                    ruleNamesBuffer = [Swift.String]()
                    for stringContainer0 in ruleNamesContainer {
                        ruleNamesBuffer?.append(stringContainer0)
                    }
                }
                ruleNames = ruleNamesBuffer
            } else {
                ruleNames = []
            }
        } else {
            ruleNames = nil
        }
    }
}

extension DisableInsightRulesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DisableInsightRulesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingParameter" : self = .missingRequiredParameterException(try MissingRequiredParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DisableInsightRulesOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterValueException(InvalidParameterValueException)
    case missingRequiredParameterException(MissingRequiredParameterException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisableInsightRulesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DisableInsightRulesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.failures = output.failures
        } else {
            self.failures = nil
        }
    }
}

public struct DisableInsightRulesOutputResponse: Swift.Equatable {
    /// An array listing the rules that could not be disabled. You cannot disable built-in rules.
    public var failures: [CloudWatchClientTypes.PartialFailure]?

    public init (
        failures: [CloudWatchClientTypes.PartialFailure]? = nil
    )
    {
        self.failures = failures
    }
}

struct DisableInsightRulesOutputResponseBody: Swift.Equatable {
    let failures: [CloudWatchClientTypes.PartialFailure]?
}

extension DisableInsightRulesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failures = "Failures"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DisableInsightRulesResult"))
        if containerValues.contains(.failures) {
            struct KeyVal0{struct member{}}
            let failuresWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .failures)
            if let failuresWrappedContainer = failuresWrappedContainer {
                let failuresContainer = try failuresWrappedContainer.decodeIfPresent([CloudWatchClientTypes.PartialFailure].self, forKey: .member)
                var failuresBuffer:[CloudWatchClientTypes.PartialFailure]? = nil
                if let failuresContainer = failuresContainer {
                    failuresBuffer = [CloudWatchClientTypes.PartialFailure]()
                    for structureContainer0 in failuresContainer {
                        failuresBuffer?.append(structureContainer0)
                    }
                }
                failures = failuresBuffer
            } else {
                failures = []
            }
        } else {
            failures = nil
        }
    }
}

extension EnableAlarmActionsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let alarmNames = alarmNames {
            if !alarmNames.isEmpty {
                var alarmNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AlarmNames"))
                for (index0, alarmname0) in alarmNames.enumerated() {
                    try alarmNamesContainer.encode(alarmname0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var alarmNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AlarmNames"))
                try alarmNamesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("EnableAlarmActions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension EnableAlarmActionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct EnableAlarmActionsInput: Swift.Equatable {
    /// The names of the alarms.
    /// This member is required.
    public var alarmNames: [Swift.String]?

    public init (
        alarmNames: [Swift.String]? = nil
    )
    {
        self.alarmNames = alarmNames
    }
}

struct EnableAlarmActionsInputBody: Swift.Equatable {
    let alarmNames: [Swift.String]?
}

extension EnableAlarmActionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmNames = "AlarmNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.alarmNames) {
            struct KeyVal0{struct member{}}
            let alarmNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .alarmNames)
            if let alarmNamesWrappedContainer = alarmNamesWrappedContainer {
                let alarmNamesContainer = try alarmNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var alarmNamesBuffer:[Swift.String]? = nil
                if let alarmNamesContainer = alarmNamesContainer {
                    alarmNamesBuffer = [Swift.String]()
                    for stringContainer0 in alarmNamesContainer {
                        alarmNamesBuffer?.append(stringContainer0)
                    }
                }
                alarmNames = alarmNamesBuffer
            } else {
                alarmNames = []
            }
        } else {
            alarmNames = nil
        }
    }
}

extension EnableAlarmActionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension EnableAlarmActionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum EnableAlarmActionsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension EnableAlarmActionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct EnableAlarmActionsOutputResponse: Swift.Equatable {

    public init () { }
}

extension EnableInsightRulesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let ruleNames = ruleNames {
            if !ruleNames.isEmpty {
                var ruleNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RuleNames"))
                for (index0, insightrulename0) in ruleNames.enumerated() {
                    try ruleNamesContainer.encode(insightrulename0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var ruleNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RuleNames"))
                try ruleNamesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("EnableInsightRules", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension EnableInsightRulesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct EnableInsightRulesInput: Swift.Equatable {
    /// An array of the rule names to enable. If you need to find out the names of your rules, use [DescribeInsightRules](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeInsightRules.html).
    /// This member is required.
    public var ruleNames: [Swift.String]?

    public init (
        ruleNames: [Swift.String]? = nil
    )
    {
        self.ruleNames = ruleNames
    }
}

struct EnableInsightRulesInputBody: Swift.Equatable {
    let ruleNames: [Swift.String]?
}

extension EnableInsightRulesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleNames = "RuleNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.ruleNames) {
            struct KeyVal0{struct member{}}
            let ruleNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .ruleNames)
            if let ruleNamesWrappedContainer = ruleNamesWrappedContainer {
                let ruleNamesContainer = try ruleNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var ruleNamesBuffer:[Swift.String]? = nil
                if let ruleNamesContainer = ruleNamesContainer {
                    ruleNamesBuffer = [Swift.String]()
                    for stringContainer0 in ruleNamesContainer {
                        ruleNamesBuffer?.append(stringContainer0)
                    }
                }
                ruleNames = ruleNamesBuffer
            } else {
                ruleNames = []
            }
        } else {
            ruleNames = nil
        }
    }
}

extension EnableInsightRulesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension EnableInsightRulesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingParameter" : self = .missingRequiredParameterException(try MissingRequiredParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum EnableInsightRulesOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterValueException(InvalidParameterValueException)
    case limitExceededException(LimitExceededException)
    case missingRequiredParameterException(MissingRequiredParameterException)
    case unknown(UnknownAWSHttpServiceError)
}

extension EnableInsightRulesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: EnableInsightRulesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.failures = output.failures
        } else {
            self.failures = nil
        }
    }
}

public struct EnableInsightRulesOutputResponse: Swift.Equatable {
    /// An array listing the rules that could not be enabled. You cannot disable or enable built-in rules.
    public var failures: [CloudWatchClientTypes.PartialFailure]?

    public init (
        failures: [CloudWatchClientTypes.PartialFailure]? = nil
    )
    {
        self.failures = failures
    }
}

struct EnableInsightRulesOutputResponseBody: Swift.Equatable {
    let failures: [CloudWatchClientTypes.PartialFailure]?
}

extension EnableInsightRulesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failures = "Failures"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("EnableInsightRulesResult"))
        if containerValues.contains(.failures) {
            struct KeyVal0{struct member{}}
            let failuresWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .failures)
            if let failuresWrappedContainer = failuresWrappedContainer {
                let failuresContainer = try failuresWrappedContainer.decodeIfPresent([CloudWatchClientTypes.PartialFailure].self, forKey: .member)
                var failuresBuffer:[CloudWatchClientTypes.PartialFailure]? = nil
                if let failuresContainer = failuresContainer {
                    failuresBuffer = [CloudWatchClientTypes.PartialFailure]()
                    for structureContainer0 in failuresContainer {
                        failuresBuffer?.append(structureContainer0)
                    }
                }
                failures = failuresBuffer
            } else {
                failures = []
            }
        } else {
            failures = nil
        }
    }
}

extension CloudWatchClientTypes {
    public enum EvaluationState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case partialData
        case sdkUnknown(Swift.String)

        public static var allCases: [EvaluationState] {
            return [
                .partialData,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .partialData: return "PARTIAL_DATA"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EvaluationState(rawValue: rawValue) ?? EvaluationState.sdkUnknown(rawValue)
        }
    }
}

extension GetDashboardInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dashboardName = dashboardName {
            try container.encode(dashboardName, forKey: ClientRuntime.Key("DashboardName"))
        }
        try container.encode("GetDashboard", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetDashboardInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetDashboardInput: Swift.Equatable {
    /// The name of the dashboard to be described.
    /// This member is required.
    public var dashboardName: Swift.String?

    public init (
        dashboardName: Swift.String? = nil
    )
    {
        self.dashboardName = dashboardName
    }
}

struct GetDashboardInputBody: Swift.Equatable {
    let dashboardName: Swift.String?
}

extension GetDashboardInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dashboardName = "DashboardName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dashboardNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dashboardName)
        dashboardName = dashboardNameDecoded
    }
}

extension GetDashboardOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetDashboardOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFound" : self = .dashboardNotFoundError(try DashboardNotFoundError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceError" : self = .internalServiceFault(try InternalServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetDashboardOutputError: Swift.Error, Swift.Equatable {
    case dashboardNotFoundError(DashboardNotFoundError)
    case internalServiceFault(InternalServiceFault)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDashboardOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetDashboardOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dashboardArn = output.dashboardArn
            self.dashboardBody = output.dashboardBody
            self.dashboardName = output.dashboardName
        } else {
            self.dashboardArn = nil
            self.dashboardBody = nil
            self.dashboardName = nil
        }
    }
}

public struct GetDashboardOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the dashboard.
    public var dashboardArn: Swift.String?
    /// The detailed information about the dashboard, including what widgets are included and their location on the dashboard. For more information about the DashboardBody syntax, see [Dashboard Body Structure and Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html).
    public var dashboardBody: Swift.String?
    /// The name of the dashboard.
    public var dashboardName: Swift.String?

    public init (
        dashboardArn: Swift.String? = nil,
        dashboardBody: Swift.String? = nil,
        dashboardName: Swift.String? = nil
    )
    {
        self.dashboardArn = dashboardArn
        self.dashboardBody = dashboardBody
        self.dashboardName = dashboardName
    }
}

struct GetDashboardOutputResponseBody: Swift.Equatable {
    let dashboardArn: Swift.String?
    let dashboardBody: Swift.String?
    let dashboardName: Swift.String?
}

extension GetDashboardOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dashboardArn = "DashboardArn"
        case dashboardBody = "DashboardBody"
        case dashboardName = "DashboardName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetDashboardResult"))
        let dashboardArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dashboardArn)
        dashboardArn = dashboardArnDecoded
        let dashboardBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dashboardBody)
        dashboardBody = dashboardBodyDecoded
        let dashboardNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dashboardName)
        dashboardName = dashboardNameDecoded
    }
}

extension GetInsightRuleReportInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let endTime = endTime {
            try container.encodeTimestamp(endTime, format: .dateTime, forKey: ClientRuntime.Key("endTime"))
        }
        if let maxContributorCount = maxContributorCount {
            try container.encode(maxContributorCount, forKey: ClientRuntime.Key("MaxContributorCount"))
        }
        if let metrics = metrics {
            if !metrics.isEmpty {
                var metricsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Metrics"))
                for (index0, insightrulemetricname0) in metrics.enumerated() {
                    try metricsContainer.encode(insightrulemetricname0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var metricsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Metrics"))
                try metricsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let orderBy = orderBy {
            try container.encode(orderBy, forKey: ClientRuntime.Key("OrderBy"))
        }
        if let period = period {
            try container.encode(period, forKey: ClientRuntime.Key("Period"))
        }
        if let ruleName = ruleName {
            try container.encode(ruleName, forKey: ClientRuntime.Key("RuleName"))
        }
        if let startTime = startTime {
            try container.encodeTimestamp(startTime, format: .dateTime, forKey: ClientRuntime.Key("startTime"))
        }
        try container.encode("GetInsightRuleReport", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetInsightRuleReportInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetInsightRuleReportInput: Swift.Equatable {
    /// The end time of the data to use in the report. When used in a raw HTTP Query API, it is formatted as yyyy-MM-dd'T'HH:mm:ss. For example, 2019-07-01T23:59:59.
    /// This member is required.
    public var endTime: ClientRuntime.Date?
    /// The maximum number of contributors to include in the report. The range is 1 to 100. If you omit this, the default of 10 is used.
    public var maxContributorCount: Swift.Int?
    /// Specifies which metrics to use for aggregation of contributor values for the report. You can specify one or more of the following metrics:
    ///
    /// * UniqueContributors -- the number of unique contributors for each data point.
    ///
    /// * MaxContributorValue -- the value of the top contributor for each data point. The identity of the contributor might change for each data point in the graph. If this rule aggregates by COUNT, the top contributor for each data point is the contributor with the most occurrences in that period. If the rule aggregates by SUM, the top contributor is the contributor with the highest sum in the log field specified by the rule's Value, during that period.
    ///
    /// * SampleCount -- the number of data points matched by the rule.
    ///
    /// * Sum -- the sum of the values from all contributors during the time period represented by that data point.
    ///
    /// * Minimum -- the minimum value from a single observation during the time period represented by that data point.
    ///
    /// * Maximum -- the maximum value from a single observation during the time period represented by that data point.
    ///
    /// * Average -- the average value from all contributors during the time period represented by that data point.
    public var metrics: [Swift.String]?
    /// Determines what statistic to use to rank the contributors. Valid values are SUM and MAXIMUM.
    public var orderBy: Swift.String?
    /// The period, in seconds, to use for the statistics in the InsightRuleMetricDatapoint results.
    /// This member is required.
    public var period: Swift.Int?
    /// The name of the rule that you want to see data from.
    /// This member is required.
    public var ruleName: Swift.String?
    /// The start time of the data to use in the report. When used in a raw HTTP Query API, it is formatted as yyyy-MM-dd'T'HH:mm:ss. For example, 2019-07-01T23:59:59.
    /// This member is required.
    public var startTime: ClientRuntime.Date?

    public init (
        endTime: ClientRuntime.Date? = nil,
        maxContributorCount: Swift.Int? = nil,
        metrics: [Swift.String]? = nil,
        orderBy: Swift.String? = nil,
        period: Swift.Int? = nil,
        ruleName: Swift.String? = nil,
        startTime: ClientRuntime.Date? = nil
    )
    {
        self.endTime = endTime
        self.maxContributorCount = maxContributorCount
        self.metrics = metrics
        self.orderBy = orderBy
        self.period = period
        self.ruleName = ruleName
        self.startTime = startTime
    }
}

struct GetInsightRuleReportInputBody: Swift.Equatable {
    let ruleName: Swift.String?
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
    let period: Swift.Int?
    let maxContributorCount: Swift.Int?
    let metrics: [Swift.String]?
    let orderBy: Swift.String?
}

extension GetInsightRuleReportInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime = "EndTime"
        case maxContributorCount = "MaxContributorCount"
        case metrics = "Metrics"
        case orderBy = "OrderBy"
        case period = "Period"
        case ruleName = "RuleName"
        case startTime = "StartTime"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleName)
        ruleName = ruleNameDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .endTime)
        endTime = endTimeDecoded
        let periodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .period)
        period = periodDecoded
        let maxContributorCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxContributorCount)
        maxContributorCount = maxContributorCountDecoded
        if containerValues.contains(.metrics) {
            struct KeyVal0{struct member{}}
            let metricsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .metrics)
            if let metricsWrappedContainer = metricsWrappedContainer {
                let metricsContainer = try metricsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var metricsBuffer:[Swift.String]? = nil
                if let metricsContainer = metricsContainer {
                    metricsBuffer = [Swift.String]()
                    for stringContainer0 in metricsContainer {
                        metricsBuffer?.append(stringContainer0)
                    }
                }
                metrics = metricsBuffer
            } else {
                metrics = []
            }
        } else {
            metrics = nil
        }
        let orderByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .orderBy)
        orderBy = orderByDecoded
    }
}

extension GetInsightRuleReportOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetInsightRuleReportOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingParameter" : self = .missingRequiredParameterException(try MissingRequiredParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetInsightRuleReportOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterValueException(InvalidParameterValueException)
    case missingRequiredParameterException(MissingRequiredParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetInsightRuleReportOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetInsightRuleReportOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.aggregateValue = output.aggregateValue
            self.aggregationStatistic = output.aggregationStatistic
            self.approximateUniqueCount = output.approximateUniqueCount
            self.contributors = output.contributors
            self.keyLabels = output.keyLabels
            self.metricDatapoints = output.metricDatapoints
        } else {
            self.aggregateValue = nil
            self.aggregationStatistic = nil
            self.approximateUniqueCount = nil
            self.contributors = nil
            self.keyLabels = nil
            self.metricDatapoints = nil
        }
    }
}

public struct GetInsightRuleReportOutputResponse: Swift.Equatable {
    /// The sum of the values from all individual contributors that match the rule.
    public var aggregateValue: Swift.Double?
    /// Specifies whether this rule aggregates contributor data by COUNT or SUM.
    public var aggregationStatistic: Swift.String?
    /// An approximate count of the unique contributors found by this rule in this time period.
    public var approximateUniqueCount: Swift.Int?
    /// An array of the unique contributors found by this rule in this time period. If the rule contains multiple keys, each combination of values for the keys counts as a unique contributor.
    public var contributors: [CloudWatchClientTypes.InsightRuleContributor]?
    /// An array of the strings used as the keys for this rule. The keys are the dimensions used to classify contributors. If the rule contains more than one key, then each unique combination of values for the keys is counted as a unique contributor.
    public var keyLabels: [Swift.String]?
    /// A time series of metric data points that matches the time period in the rule request.
    public var metricDatapoints: [CloudWatchClientTypes.InsightRuleMetricDatapoint]?

    public init (
        aggregateValue: Swift.Double? = nil,
        aggregationStatistic: Swift.String? = nil,
        approximateUniqueCount: Swift.Int? = nil,
        contributors: [CloudWatchClientTypes.InsightRuleContributor]? = nil,
        keyLabels: [Swift.String]? = nil,
        metricDatapoints: [CloudWatchClientTypes.InsightRuleMetricDatapoint]? = nil
    )
    {
        self.aggregateValue = aggregateValue
        self.aggregationStatistic = aggregationStatistic
        self.approximateUniqueCount = approximateUniqueCount
        self.contributors = contributors
        self.keyLabels = keyLabels
        self.metricDatapoints = metricDatapoints
    }
}

struct GetInsightRuleReportOutputResponseBody: Swift.Equatable {
    let keyLabels: [Swift.String]?
    let aggregationStatistic: Swift.String?
    let aggregateValue: Swift.Double?
    let approximateUniqueCount: Swift.Int?
    let contributors: [CloudWatchClientTypes.InsightRuleContributor]?
    let metricDatapoints: [CloudWatchClientTypes.InsightRuleMetricDatapoint]?
}

extension GetInsightRuleReportOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aggregateValue = "AggregateValue"
        case aggregationStatistic = "AggregationStatistic"
        case approximateUniqueCount = "ApproximateUniqueCount"
        case contributors = "Contributors"
        case keyLabels = "KeyLabels"
        case metricDatapoints = "MetricDatapoints"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetInsightRuleReportResult"))
        if containerValues.contains(.keyLabels) {
            struct KeyVal0{struct member{}}
            let keyLabelsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .keyLabels)
            if let keyLabelsWrappedContainer = keyLabelsWrappedContainer {
                let keyLabelsContainer = try keyLabelsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var keyLabelsBuffer:[Swift.String]? = nil
                if let keyLabelsContainer = keyLabelsContainer {
                    keyLabelsBuffer = [Swift.String]()
                    for stringContainer0 in keyLabelsContainer {
                        keyLabelsBuffer?.append(stringContainer0)
                    }
                }
                keyLabels = keyLabelsBuffer
            } else {
                keyLabels = []
            }
        } else {
            keyLabels = nil
        }
        let aggregationStatisticDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aggregationStatistic)
        aggregationStatistic = aggregationStatisticDecoded
        let aggregateValueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .aggregateValue)
        aggregateValue = aggregateValueDecoded
        let approximateUniqueCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .approximateUniqueCount)
        approximateUniqueCount = approximateUniqueCountDecoded
        if containerValues.contains(.contributors) {
            struct KeyVal0{struct member{}}
            let contributorsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .contributors)
            if let contributorsWrappedContainer = contributorsWrappedContainer {
                let contributorsContainer = try contributorsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.InsightRuleContributor].self, forKey: .member)
                var contributorsBuffer:[CloudWatchClientTypes.InsightRuleContributor]? = nil
                if let contributorsContainer = contributorsContainer {
                    contributorsBuffer = [CloudWatchClientTypes.InsightRuleContributor]()
                    for structureContainer0 in contributorsContainer {
                        contributorsBuffer?.append(structureContainer0)
                    }
                }
                contributors = contributorsBuffer
            } else {
                contributors = []
            }
        } else {
            contributors = nil
        }
        if containerValues.contains(.metricDatapoints) {
            struct KeyVal0{struct member{}}
            let metricDatapointsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .metricDatapoints)
            if let metricDatapointsWrappedContainer = metricDatapointsWrappedContainer {
                let metricDatapointsContainer = try metricDatapointsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.InsightRuleMetricDatapoint].self, forKey: .member)
                var metricDatapointsBuffer:[CloudWatchClientTypes.InsightRuleMetricDatapoint]? = nil
                if let metricDatapointsContainer = metricDatapointsContainer {
                    metricDatapointsBuffer = [CloudWatchClientTypes.InsightRuleMetricDatapoint]()
                    for structureContainer0 in metricDatapointsContainer {
                        metricDatapointsBuffer?.append(structureContainer0)
                    }
                }
                metricDatapoints = metricDatapointsBuffer
            } else {
                metricDatapoints = []
            }
        } else {
            metricDatapoints = nil
        }
    }
}

extension GetMetricDataInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let endTime = endTime {
            try container.encodeTimestamp(endTime, format: .dateTime, forKey: ClientRuntime.Key("endTime"))
        }
        if let labelOptions = labelOptions {
            try container.encode(labelOptions, forKey: ClientRuntime.Key("LabelOptions"))
        }
        if let maxDatapoints = maxDatapoints {
            try container.encode(maxDatapoints, forKey: ClientRuntime.Key("MaxDatapoints"))
        }
        if let metricDataQueries = metricDataQueries {
            if !metricDataQueries.isEmpty {
                var metricDataQueriesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MetricDataQueries"))
                for (index0, metricdataquery0) in metricDataQueries.enumerated() {
                    try metricDataQueriesContainer.encode(metricdataquery0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var metricDataQueriesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MetricDataQueries"))
                try metricDataQueriesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let scanBy = scanBy {
            try container.encode(scanBy, forKey: ClientRuntime.Key("ScanBy"))
        }
        if let startTime = startTime {
            try container.encodeTimestamp(startTime, format: .dateTime, forKey: ClientRuntime.Key("startTime"))
        }
        try container.encode("GetMetricData", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetMetricDataInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetMetricDataInput: Swift.Equatable {
    /// The time stamp indicating the latest data to be returned. The value specified is exclusive; results include data points up to the specified time stamp. For better performance, specify StartTime and EndTime values that align with the value of the metric's Period and sync up with the beginning and end of an hour. For example, if the Period of a metric is 5 minutes, specifying 12:05 or 12:30 as EndTime can get a faster response from CloudWatch than setting 12:07 or 12:29 as the EndTime.
    /// This member is required.
    public var endTime: ClientRuntime.Date?
    /// This structure includes the Timezone parameter, which you can use to specify your time zone so that the labels of returned data display the correct time for your time zone.
    public var labelOptions: CloudWatchClientTypes.LabelOptions?
    /// The maximum number of data points the request should return before paginating. If you omit this, the default of 100,800 is used.
    public var maxDatapoints: Swift.Int?
    /// The metric queries to be returned. A single GetMetricData call can include as many as 500 MetricDataQuery structures. Each of these structures can specify either a metric to retrieve, a Metrics Insights query, or a math expression to perform on retrieved data.
    /// This member is required.
    public var metricDataQueries: [CloudWatchClientTypes.MetricDataQuery]?
    /// Include this value, if it was returned by the previous GetMetricData operation, to get the next set of data points.
    public var nextToken: Swift.String?
    /// The order in which data points should be returned. TimestampDescending returns the newest data first and paginates when the MaxDatapoints limit is reached. TimestampAscending returns the oldest data first and paginates when the MaxDatapoints limit is reached.
    public var scanBy: CloudWatchClientTypes.ScanBy?
    /// The time stamp indicating the earliest data to be returned. The value specified is inclusive; results include data points with the specified time stamp. CloudWatch rounds the specified time stamp as follows:
    ///
    /// * Start time less than 15 days ago - Round down to the nearest whole minute. For example, 12:32:34 is rounded down to 12:32:00.
    ///
    /// * Start time between 15 and 63 days ago - Round down to the nearest 5-minute clock interval. For example, 12:32:34 is rounded down to 12:30:00.
    ///
    /// * Start time greater than 63 days ago - Round down to the nearest 1-hour clock interval. For example, 12:32:34 is rounded down to 12:00:00.
    ///
    ///
    /// If you set Period to 5, 10, or 30, the start time of your request is rounded down to the nearest time that corresponds to even 5-, 10-, or 30-second divisions of a minute. For example, if you make a query at (HH:mm:ss) 01:05:23 for the previous 10-second period, the start time of your request is rounded down and you receive data from 01:05:10 to 01:05:20. If you make a query at 15:07:17 for the previous 5 minutes of data, using a period of 5 seconds, you receive data timestamped between 15:02:15 and 15:07:15. For better performance, specify StartTime and EndTime values that align with the value of the metric's Period and sync up with the beginning and end of an hour. For example, if the Period of a metric is 5 minutes, specifying 12:05 or 12:30 as StartTime can get a faster response from CloudWatch than setting 12:07 or 12:29 as the StartTime.
    /// This member is required.
    public var startTime: ClientRuntime.Date?

    public init (
        endTime: ClientRuntime.Date? = nil,
        labelOptions: CloudWatchClientTypes.LabelOptions? = nil,
        maxDatapoints: Swift.Int? = nil,
        metricDataQueries: [CloudWatchClientTypes.MetricDataQuery]? = nil,
        nextToken: Swift.String? = nil,
        scanBy: CloudWatchClientTypes.ScanBy? = nil,
        startTime: ClientRuntime.Date? = nil
    )
    {
        self.endTime = endTime
        self.labelOptions = labelOptions
        self.maxDatapoints = maxDatapoints
        self.metricDataQueries = metricDataQueries
        self.nextToken = nextToken
        self.scanBy = scanBy
        self.startTime = startTime
    }
}

struct GetMetricDataInputBody: Swift.Equatable {
    let metricDataQueries: [CloudWatchClientTypes.MetricDataQuery]?
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
    let nextToken: Swift.String?
    let scanBy: CloudWatchClientTypes.ScanBy?
    let maxDatapoints: Swift.Int?
    let labelOptions: CloudWatchClientTypes.LabelOptions?
}

extension GetMetricDataInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime = "EndTime"
        case labelOptions = "LabelOptions"
        case maxDatapoints = "MaxDatapoints"
        case metricDataQueries = "MetricDataQueries"
        case nextToken = "NextToken"
        case scanBy = "ScanBy"
        case startTime = "StartTime"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.metricDataQueries) {
            struct KeyVal0{struct member{}}
            let metricDataQueriesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .metricDataQueries)
            if let metricDataQueriesWrappedContainer = metricDataQueriesWrappedContainer {
                let metricDataQueriesContainer = try metricDataQueriesWrappedContainer.decodeIfPresent([CloudWatchClientTypes.MetricDataQuery].self, forKey: .member)
                var metricDataQueriesBuffer:[CloudWatchClientTypes.MetricDataQuery]? = nil
                if let metricDataQueriesContainer = metricDataQueriesContainer {
                    metricDataQueriesBuffer = [CloudWatchClientTypes.MetricDataQuery]()
                    for structureContainer0 in metricDataQueriesContainer {
                        metricDataQueriesBuffer?.append(structureContainer0)
                    }
                }
                metricDataQueries = metricDataQueriesBuffer
            } else {
                metricDataQueries = []
            }
        } else {
            metricDataQueries = nil
        }
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .endTime)
        endTime = endTimeDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let scanByDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.ScanBy.self, forKey: .scanBy)
        scanBy = scanByDecoded
        let maxDatapointsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxDatapoints)
        maxDatapoints = maxDatapointsDecoded
        let labelOptionsDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.LabelOptions.self, forKey: .labelOptions)
        labelOptions = labelOptionsDecoded
    }
}

extension GetMetricDataOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetMetricDataOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextToken" : self = .invalidNextToken(try InvalidNextToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetMetricDataOutputError: Swift.Error, Swift.Equatable {
    case invalidNextToken(InvalidNextToken)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetMetricDataOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetMetricDataOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.messages = output.messages
            self.metricDataResults = output.metricDataResults
            self.nextToken = output.nextToken
        } else {
            self.messages = nil
            self.metricDataResults = nil
            self.nextToken = nil
        }
    }
}

public struct GetMetricDataOutputResponse: Swift.Equatable {
    /// Contains a message about this GetMetricData operation, if the operation results in such a message. An example of a message that might be returned is Maximum number of allowed metrics exceeded. If there is a message, as much of the operation as possible is still executed. A message appears here only if it is related to the global GetMetricData operation. Any message about a specific metric returned by the operation appears in the MetricDataResult object returned for that metric.
    public var messages: [CloudWatchClientTypes.MessageData]?
    /// The metrics that are returned, including the metric name, namespace, and dimensions.
    public var metricDataResults: [CloudWatchClientTypes.MetricDataResult]?
    /// A token that marks the next batch of returned results.
    public var nextToken: Swift.String?

    public init (
        messages: [CloudWatchClientTypes.MessageData]? = nil,
        metricDataResults: [CloudWatchClientTypes.MetricDataResult]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.messages = messages
        self.metricDataResults = metricDataResults
        self.nextToken = nextToken
    }
}

struct GetMetricDataOutputResponseBody: Swift.Equatable {
    let metricDataResults: [CloudWatchClientTypes.MetricDataResult]?
    let nextToken: Swift.String?
    let messages: [CloudWatchClientTypes.MessageData]?
}

extension GetMetricDataOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messages = "Messages"
        case metricDataResults = "MetricDataResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetMetricDataResult"))
        if containerValues.contains(.metricDataResults) {
            struct KeyVal0{struct member{}}
            let metricDataResultsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .metricDataResults)
            if let metricDataResultsWrappedContainer = metricDataResultsWrappedContainer {
                let metricDataResultsContainer = try metricDataResultsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.MetricDataResult].self, forKey: .member)
                var metricDataResultsBuffer:[CloudWatchClientTypes.MetricDataResult]? = nil
                if let metricDataResultsContainer = metricDataResultsContainer {
                    metricDataResultsBuffer = [CloudWatchClientTypes.MetricDataResult]()
                    for structureContainer0 in metricDataResultsContainer {
                        metricDataResultsBuffer?.append(structureContainer0)
                    }
                }
                metricDataResults = metricDataResultsBuffer
            } else {
                metricDataResults = []
            }
        } else {
            metricDataResults = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        if containerValues.contains(.messages) {
            struct KeyVal0{struct member{}}
            let messagesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .messages)
            if let messagesWrappedContainer = messagesWrappedContainer {
                let messagesContainer = try messagesWrappedContainer.decodeIfPresent([CloudWatchClientTypes.MessageData].self, forKey: .member)
                var messagesBuffer:[CloudWatchClientTypes.MessageData]? = nil
                if let messagesContainer = messagesContainer {
                    messagesBuffer = [CloudWatchClientTypes.MessageData]()
                    for structureContainer0 in messagesContainer {
                        messagesBuffer?.append(structureContainer0)
                    }
                }
                messages = messagesBuffer
            } else {
                messages = []
            }
        } else {
            messages = nil
        }
    }
}

extension GetMetricStatisticsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dimensions = dimensions {
            if !dimensions.isEmpty {
                var dimensionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Dimensions"))
                for (index0, dimension0) in dimensions.enumerated() {
                    try dimensionsContainer.encode(dimension0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var dimensionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Dimensions"))
                try dimensionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let endTime = endTime {
            try container.encodeTimestamp(endTime, format: .dateTime, forKey: ClientRuntime.Key("endTime"))
        }
        if let extendedStatistics = extendedStatistics {
            if !extendedStatistics.isEmpty {
                var extendedStatisticsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ExtendedStatistics"))
                for (index0, extendedstatistic0) in extendedStatistics.enumerated() {
                    try extendedStatisticsContainer.encode(extendedstatistic0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var extendedStatisticsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ExtendedStatistics"))
                try extendedStatisticsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let metricName = metricName {
            try container.encode(metricName, forKey: ClientRuntime.Key("MetricName"))
        }
        if let namespace = namespace {
            try container.encode(namespace, forKey: ClientRuntime.Key("Namespace"))
        }
        if let period = period {
            try container.encode(period, forKey: ClientRuntime.Key("Period"))
        }
        if let startTime = startTime {
            try container.encodeTimestamp(startTime, format: .dateTime, forKey: ClientRuntime.Key("startTime"))
        }
        if let statistics = statistics {
            if !statistics.isEmpty {
                var statisticsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Statistics"))
                for (index0, statistic0) in statistics.enumerated() {
                    try statisticsContainer.encode(statistic0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var statisticsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Statistics"))
                try statisticsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let unit = unit {
            try container.encode(unit, forKey: ClientRuntime.Key("Unit"))
        }
        try container.encode("GetMetricStatistics", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetMetricStatisticsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetMetricStatisticsInput: Swift.Equatable {
    /// The dimensions. If the metric contains multiple dimensions, you must include a value for each dimension. CloudWatch treats each unique combination of dimensions as a separate metric. If a specific combination of dimensions was not published, you can't retrieve statistics for it. You must specify the same dimensions that were used when the metrics were created. For an example, see [Dimension Combinations](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#dimension-combinations) in the Amazon CloudWatch User Guide. For more information about specifying dimensions, see [Publishing Metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html) in the Amazon CloudWatch User Guide.
    public var dimensions: [CloudWatchClientTypes.Dimension]?
    /// The time stamp that determines the last data point to return. The value specified is exclusive; results include data points up to the specified time stamp. In a raw HTTP query, the time stamp must be in ISO 8601 UTC format (for example, 2016-10-10T23:00:00Z).
    /// This member is required.
    public var endTime: ClientRuntime.Date?
    /// The percentile statistics. Specify values between p0.0 and p100. When calling GetMetricStatistics, you must specify either Statistics or ExtendedStatistics, but not both. Percentile statistics are not available for metrics when any of the metric values are negative numbers.
    public var extendedStatistics: [Swift.String]?
    /// The name of the metric, with or without spaces.
    /// This member is required.
    public var metricName: Swift.String?
    /// The namespace of the metric, with or without spaces.
    /// This member is required.
    public var namespace: Swift.String?
    /// The granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics stored by a PutMetricData call that includes a StorageResolution of 1 second. If the StartTime parameter specifies a time stamp that is greater than 3 hours ago, you must specify the period as follows or no data points in that time range is returned:
    ///
    /// * Start time between 3 hours and 15 days ago - Use a multiple of 60 seconds (1 minute).
    ///
    /// * Start time between 15 and 63 days ago - Use a multiple of 300 seconds (5 minutes).
    ///
    /// * Start time greater than 63 days ago - Use a multiple of 3600 seconds (1 hour).
    /// This member is required.
    public var period: Swift.Int?
    /// The time stamp that determines the first data point to return. Start times are evaluated relative to the time that CloudWatch receives the request. The value specified is inclusive; results include data points with the specified time stamp. In a raw HTTP query, the time stamp must be in ISO 8601 UTC format (for example, 2016-10-03T23:00:00Z). CloudWatch rounds the specified time stamp as follows:
    ///
    /// * Start time less than 15 days ago - Round down to the nearest whole minute. For example, 12:32:34 is rounded down to 12:32:00.
    ///
    /// * Start time between 15 and 63 days ago - Round down to the nearest 5-minute clock interval. For example, 12:32:34 is rounded down to 12:30:00.
    ///
    /// * Start time greater than 63 days ago - Round down to the nearest 1-hour clock interval. For example, 12:32:34 is rounded down to 12:00:00.
    ///
    ///
    /// If you set Period to 5, 10, or 30, the start time of your request is rounded down to the nearest time that corresponds to even 5-, 10-, or 30-second divisions of a minute. For example, if you make a query at (HH:mm:ss) 01:05:23 for the previous 10-second period, the start time of your request is rounded down and you receive data from 01:05:10 to 01:05:20. If you make a query at 15:07:17 for the previous 5 minutes of data, using a period of 5 seconds, you receive data timestamped between 15:02:15 and 15:07:15.
    /// This member is required.
    public var startTime: ClientRuntime.Date?
    /// The metric statistics, other than percentile. For percentile statistics, use ExtendedStatistics. When calling GetMetricStatistics, you must specify either Statistics or ExtendedStatistics, but not both.
    public var statistics: [CloudWatchClientTypes.Statistic]?
    /// The unit for a given metric. If you omit Unit, all data that was collected with any unit is returned, along with the corresponding units that were specified when the data was reported to CloudWatch. If you specify a unit, the operation returns only data that was collected with that unit specified. If you specify a unit that does not match the data collected, the results of the operation are null. CloudWatch does not perform unit conversions.
    public var unit: CloudWatchClientTypes.StandardUnit?

    public init (
        dimensions: [CloudWatchClientTypes.Dimension]? = nil,
        endTime: ClientRuntime.Date? = nil,
        extendedStatistics: [Swift.String]? = nil,
        metricName: Swift.String? = nil,
        namespace: Swift.String? = nil,
        period: Swift.Int? = nil,
        startTime: ClientRuntime.Date? = nil,
        statistics: [CloudWatchClientTypes.Statistic]? = nil,
        unit: CloudWatchClientTypes.StandardUnit? = nil
    )
    {
        self.dimensions = dimensions
        self.endTime = endTime
        self.extendedStatistics = extendedStatistics
        self.metricName = metricName
        self.namespace = namespace
        self.period = period
        self.startTime = startTime
        self.statistics = statistics
        self.unit = unit
    }
}

struct GetMetricStatisticsInputBody: Swift.Equatable {
    let namespace: Swift.String?
    let metricName: Swift.String?
    let dimensions: [CloudWatchClientTypes.Dimension]?
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
    let period: Swift.Int?
    let statistics: [CloudWatchClientTypes.Statistic]?
    let extendedStatistics: [Swift.String]?
    let unit: CloudWatchClientTypes.StandardUnit?
}

extension GetMetricStatisticsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dimensions = "Dimensions"
        case endTime = "EndTime"
        case extendedStatistics = "ExtendedStatistics"
        case metricName = "MetricName"
        case namespace = "Namespace"
        case period = "Period"
        case startTime = "StartTime"
        case statistics = "Statistics"
        case unit = "Unit"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        if containerValues.contains(.dimensions) {
            struct KeyVal0{struct member{}}
            let dimensionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dimensions)
            if let dimensionsWrappedContainer = dimensionsWrappedContainer {
                let dimensionsContainer = try dimensionsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.Dimension].self, forKey: .member)
                var dimensionsBuffer:[CloudWatchClientTypes.Dimension]? = nil
                if let dimensionsContainer = dimensionsContainer {
                    dimensionsBuffer = [CloudWatchClientTypes.Dimension]()
                    for structureContainer0 in dimensionsContainer {
                        dimensionsBuffer?.append(structureContainer0)
                    }
                }
                dimensions = dimensionsBuffer
            } else {
                dimensions = []
            }
        } else {
            dimensions = nil
        }
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .endTime)
        endTime = endTimeDecoded
        let periodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .period)
        period = periodDecoded
        if containerValues.contains(.statistics) {
            struct KeyVal0{struct member{}}
            let statisticsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .statistics)
            if let statisticsWrappedContainer = statisticsWrappedContainer {
                let statisticsContainer = try statisticsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.Statistic].self, forKey: .member)
                var statisticsBuffer:[CloudWatchClientTypes.Statistic]? = nil
                if let statisticsContainer = statisticsContainer {
                    statisticsBuffer = [CloudWatchClientTypes.Statistic]()
                    for enumContainer0 in statisticsContainer {
                        statisticsBuffer?.append(enumContainer0)
                    }
                }
                statistics = statisticsBuffer
            } else {
                statistics = []
            }
        } else {
            statistics = nil
        }
        if containerValues.contains(.extendedStatistics) {
            struct KeyVal0{struct member{}}
            let extendedStatisticsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .extendedStatistics)
            if let extendedStatisticsWrappedContainer = extendedStatisticsWrappedContainer {
                let extendedStatisticsContainer = try extendedStatisticsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var extendedStatisticsBuffer:[Swift.String]? = nil
                if let extendedStatisticsContainer = extendedStatisticsContainer {
                    extendedStatisticsBuffer = [Swift.String]()
                    for stringContainer0 in extendedStatisticsContainer {
                        extendedStatisticsBuffer?.append(stringContainer0)
                    }
                }
                extendedStatistics = extendedStatisticsBuffer
            } else {
                extendedStatistics = []
            }
        } else {
            extendedStatistics = nil
        }
        let unitDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.StandardUnit.self, forKey: .unit)
        unit = unitDecoded
    }
}

extension GetMetricStatisticsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetMetricStatisticsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceError" : self = .internalServiceFault(try InternalServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingParameter" : self = .missingRequiredParameterException(try MissingRequiredParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetMetricStatisticsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceFault(InternalServiceFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case missingRequiredParameterException(MissingRequiredParameterException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetMetricStatisticsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetMetricStatisticsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.datapoints = output.datapoints
            self.label = output.label
        } else {
            self.datapoints = nil
            self.label = nil
        }
    }
}

public struct GetMetricStatisticsOutputResponse: Swift.Equatable {
    /// The data points for the specified metric.
    public var datapoints: [CloudWatchClientTypes.Datapoint]?
    /// A label for the specified metric.
    public var label: Swift.String?

    public init (
        datapoints: [CloudWatchClientTypes.Datapoint]? = nil,
        label: Swift.String? = nil
    )
    {
        self.datapoints = datapoints
        self.label = label
    }
}

struct GetMetricStatisticsOutputResponseBody: Swift.Equatable {
    let label: Swift.String?
    let datapoints: [CloudWatchClientTypes.Datapoint]?
}

extension GetMetricStatisticsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datapoints = "Datapoints"
        case label = "Label"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetMetricStatisticsResult"))
        let labelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .label)
        label = labelDecoded
        if containerValues.contains(.datapoints) {
            struct KeyVal0{struct member{}}
            let datapointsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .datapoints)
            if let datapointsWrappedContainer = datapointsWrappedContainer {
                let datapointsContainer = try datapointsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.Datapoint].self, forKey: .member)
                var datapointsBuffer:[CloudWatchClientTypes.Datapoint]? = nil
                if let datapointsContainer = datapointsContainer {
                    datapointsBuffer = [CloudWatchClientTypes.Datapoint]()
                    for structureContainer0 in datapointsContainer {
                        datapointsBuffer?.append(structureContainer0)
                    }
                }
                datapoints = datapointsBuffer
            } else {
                datapoints = []
            }
        } else {
            datapoints = nil
        }
    }
}

extension GetMetricStreamInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        try container.encode("GetMetricStream", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetMetricStreamInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetMetricStreamInput: Swift.Equatable {
    /// The name of the metric stream to retrieve information about.
    /// This member is required.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct GetMetricStreamInputBody: Swift.Equatable {
    let name: Swift.String?
}

extension GetMetricStreamInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension GetMetricStreamOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetMetricStreamOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceError" : self = .internalServiceFault(try InternalServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingParameter" : self = .missingRequiredParameterException(try MissingRequiredParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetMetricStreamOutputError: Swift.Error, Swift.Equatable {
    case internalServiceFault(InternalServiceFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case missingRequiredParameterException(MissingRequiredParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetMetricStreamOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetMetricStreamOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.arn = output.arn
            self.creationDate = output.creationDate
            self.excludeFilters = output.excludeFilters
            self.firehoseArn = output.firehoseArn
            self.includeFilters = output.includeFilters
            self.lastUpdateDate = output.lastUpdateDate
            self.name = output.name
            self.outputFormat = output.outputFormat
            self.roleArn = output.roleArn
            self.state = output.state
            self.statisticsConfigurations = output.statisticsConfigurations
        } else {
            self.arn = nil
            self.creationDate = nil
            self.excludeFilters = nil
            self.firehoseArn = nil
            self.includeFilters = nil
            self.lastUpdateDate = nil
            self.name = nil
            self.outputFormat = nil
            self.roleArn = nil
            self.state = nil
            self.statisticsConfigurations = nil
        }
    }
}

public struct GetMetricStreamOutputResponse: Swift.Equatable {
    /// The ARN of the metric stream.
    public var arn: Swift.String?
    /// The date that the metric stream was created.
    public var creationDate: ClientRuntime.Date?
    /// If this array of metric namespaces is present, then these namespaces are the only metric namespaces that are not streamed by this metric stream. In this case, all other metric namespaces in the account are streamed by this metric stream.
    public var excludeFilters: [CloudWatchClientTypes.MetricStreamFilter]?
    /// The ARN of the Amazon Kinesis Data Firehose delivery stream that is used by this metric stream.
    public var firehoseArn: Swift.String?
    /// If this array of metric namespaces is present, then these namespaces are the only metric namespaces that are streamed by this metric stream.
    public var includeFilters: [CloudWatchClientTypes.MetricStreamFilter]?
    /// The date of the most recent update to the metric stream's configuration.
    public var lastUpdateDate: ClientRuntime.Date?
    /// The name of the metric stream.
    public var name: Swift.String?
    /// The output format for the stream. Valid values are json and opentelemetry0.7. For more information about metric stream output formats, see [Metric streams output formats](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-metric-streams-formats.html).
    public var outputFormat: CloudWatchClientTypes.MetricStreamOutputFormat?
    /// The ARN of the IAM role that is used by this metric stream.
    public var roleArn: Swift.String?
    /// The state of the metric stream. The possible values are running and stopped.
    public var state: Swift.String?
    /// Each entry in this array displays information about one or more metrics that include additional statistics in the metric stream. For more information about the additional statistics, see [ CloudWatch statistics definitions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html.html).
    public var statisticsConfigurations: [CloudWatchClientTypes.MetricStreamStatisticsConfiguration]?

    public init (
        arn: Swift.String? = nil,
        creationDate: ClientRuntime.Date? = nil,
        excludeFilters: [CloudWatchClientTypes.MetricStreamFilter]? = nil,
        firehoseArn: Swift.String? = nil,
        includeFilters: [CloudWatchClientTypes.MetricStreamFilter]? = nil,
        lastUpdateDate: ClientRuntime.Date? = nil,
        name: Swift.String? = nil,
        outputFormat: CloudWatchClientTypes.MetricStreamOutputFormat? = nil,
        roleArn: Swift.String? = nil,
        state: Swift.String? = nil,
        statisticsConfigurations: [CloudWatchClientTypes.MetricStreamStatisticsConfiguration]? = nil
    )
    {
        self.arn = arn
        self.creationDate = creationDate
        self.excludeFilters = excludeFilters
        self.firehoseArn = firehoseArn
        self.includeFilters = includeFilters
        self.lastUpdateDate = lastUpdateDate
        self.name = name
        self.outputFormat = outputFormat
        self.roleArn = roleArn
        self.state = state
        self.statisticsConfigurations = statisticsConfigurations
    }
}

struct GetMetricStreamOutputResponseBody: Swift.Equatable {
    let arn: Swift.String?
    let name: Swift.String?
    let includeFilters: [CloudWatchClientTypes.MetricStreamFilter]?
    let excludeFilters: [CloudWatchClientTypes.MetricStreamFilter]?
    let firehoseArn: Swift.String?
    let roleArn: Swift.String?
    let state: Swift.String?
    let creationDate: ClientRuntime.Date?
    let lastUpdateDate: ClientRuntime.Date?
    let outputFormat: CloudWatchClientTypes.MetricStreamOutputFormat?
    let statisticsConfigurations: [CloudWatchClientTypes.MetricStreamStatisticsConfiguration]?
}

extension GetMetricStreamOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case creationDate = "CreationDate"
        case excludeFilters = "ExcludeFilters"
        case firehoseArn = "FirehoseArn"
        case includeFilters = "IncludeFilters"
        case lastUpdateDate = "LastUpdateDate"
        case name = "Name"
        case outputFormat = "OutputFormat"
        case roleArn = "RoleArn"
        case state = "State"
        case statisticsConfigurations = "StatisticsConfigurations"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetMetricStreamResult"))
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        if containerValues.contains(.includeFilters) {
            struct KeyVal0{struct member{}}
            let includeFiltersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .includeFilters)
            if let includeFiltersWrappedContainer = includeFiltersWrappedContainer {
                let includeFiltersContainer = try includeFiltersWrappedContainer.decodeIfPresent([CloudWatchClientTypes.MetricStreamFilter].self, forKey: .member)
                var includeFiltersBuffer:[CloudWatchClientTypes.MetricStreamFilter]? = nil
                if let includeFiltersContainer = includeFiltersContainer {
                    includeFiltersBuffer = [CloudWatchClientTypes.MetricStreamFilter]()
                    for structureContainer0 in includeFiltersContainer {
                        includeFiltersBuffer?.append(structureContainer0)
                    }
                }
                includeFilters = includeFiltersBuffer
            } else {
                includeFilters = []
            }
        } else {
            includeFilters = nil
        }
        if containerValues.contains(.excludeFilters) {
            struct KeyVal0{struct member{}}
            let excludeFiltersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .excludeFilters)
            if let excludeFiltersWrappedContainer = excludeFiltersWrappedContainer {
                let excludeFiltersContainer = try excludeFiltersWrappedContainer.decodeIfPresent([CloudWatchClientTypes.MetricStreamFilter].self, forKey: .member)
                var excludeFiltersBuffer:[CloudWatchClientTypes.MetricStreamFilter]? = nil
                if let excludeFiltersContainer = excludeFiltersContainer {
                    excludeFiltersBuffer = [CloudWatchClientTypes.MetricStreamFilter]()
                    for structureContainer0 in excludeFiltersContainer {
                        excludeFiltersBuffer?.append(structureContainer0)
                    }
                }
                excludeFilters = excludeFiltersBuffer
            } else {
                excludeFilters = []
            }
        } else {
            excludeFilters = nil
        }
        let firehoseArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firehoseArn)
        firehoseArn = firehoseArnDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .state)
        state = stateDecoded
        let creationDateDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .creationDate)
        creationDate = creationDateDecoded
        let lastUpdateDateDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .lastUpdateDate)
        lastUpdateDate = lastUpdateDateDecoded
        let outputFormatDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.MetricStreamOutputFormat.self, forKey: .outputFormat)
        outputFormat = outputFormatDecoded
        if containerValues.contains(.statisticsConfigurations) {
            struct KeyVal0{struct member{}}
            let statisticsConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .statisticsConfigurations)
            if let statisticsConfigurationsWrappedContainer = statisticsConfigurationsWrappedContainer {
                let statisticsConfigurationsContainer = try statisticsConfigurationsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.MetricStreamStatisticsConfiguration].self, forKey: .member)
                var statisticsConfigurationsBuffer:[CloudWatchClientTypes.MetricStreamStatisticsConfiguration]? = nil
                if let statisticsConfigurationsContainer = statisticsConfigurationsContainer {
                    statisticsConfigurationsBuffer = [CloudWatchClientTypes.MetricStreamStatisticsConfiguration]()
                    for structureContainer0 in statisticsConfigurationsContainer {
                        statisticsConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                statisticsConfigurations = statisticsConfigurationsBuffer
            } else {
                statisticsConfigurations = []
            }
        } else {
            statisticsConfigurations = nil
        }
    }
}

extension GetMetricWidgetImageInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let metricWidget = metricWidget {
            try container.encode(metricWidget, forKey: ClientRuntime.Key("MetricWidget"))
        }
        if let outputFormat = outputFormat {
            try container.encode(outputFormat, forKey: ClientRuntime.Key("OutputFormat"))
        }
        try container.encode("GetMetricWidgetImage", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetMetricWidgetImageInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetMetricWidgetImageInput: Swift.Equatable {
    /// A JSON string that defines the bitmap graph to be retrieved. The string includes the metrics to include in the graph, statistics, annotations, title, axis limits, and so on. You can include only one MetricWidget parameter in each GetMetricWidgetImage call. For more information about the syntax of MetricWidget see [GetMetricWidgetImage: Metric Widget Structure and Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Metric-Widget-Structure.html). If any metric on the graph could not load all the requested data points, an orange triangle with an exclamation point appears next to the graph legend.
    /// This member is required.
    public var metricWidget: Swift.String?
    /// The format of the resulting image. Only PNG images are supported. The default is png. If you specify png, the API returns an HTTP response with the content-type set to text/xml. The image data is in a MetricWidgetImage field. For example:  >
    ///
    ///
    ///
    ///
    ///
    ///
    ///     iVBORw0KGgoAAAANSUhEUgAAAlgAAAGQEAYAAAAip...
    ///
    ///
    ///
    ///
    ///
    ///
    ///
    ///
    ///
    ///
    ///
    ///     6f0d4192-4d42-11e8-82c1-f539a07e0e3b
    ///
    ///
    ///
    ///
    /// The image/png setting is intended only for custom HTTP requests. For most use cases, and all actions using an Amazon Web Services SDK, you should use png. If you specify image/png, the HTTP response has a content-type set to image/png, and the body of the response is a PNG image.
    public var outputFormat: Swift.String?

    public init (
        metricWidget: Swift.String? = nil,
        outputFormat: Swift.String? = nil
    )
    {
        self.metricWidget = metricWidget
        self.outputFormat = outputFormat
    }
}

struct GetMetricWidgetImageInputBody: Swift.Equatable {
    let metricWidget: Swift.String?
    let outputFormat: Swift.String?
}

extension GetMetricWidgetImageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricWidget = "MetricWidget"
        case outputFormat = "OutputFormat"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricWidgetDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricWidget)
        metricWidget = metricWidgetDecoded
        let outputFormatDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputFormat)
        outputFormat = outputFormatDecoded
    }
}

extension GetMetricWidgetImageOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetMetricWidgetImageOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetMetricWidgetImageOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetMetricWidgetImageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetMetricWidgetImageOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.metricWidgetImage = output.metricWidgetImage
        } else {
            self.metricWidgetImage = nil
        }
    }
}

public struct GetMetricWidgetImageOutputResponse: Swift.Equatable {
    /// The image of the graph, in the output format specified. The output is base64-encoded.
    public var metricWidgetImage: ClientRuntime.Data?

    public init (
        metricWidgetImage: ClientRuntime.Data? = nil
    )
    {
        self.metricWidgetImage = metricWidgetImage
    }
}

struct GetMetricWidgetImageOutputResponseBody: Swift.Equatable {
    let metricWidgetImage: ClientRuntime.Data?
}

extension GetMetricWidgetImageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricWidgetImage = "MetricWidgetImage"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetMetricWidgetImageResult"))
        if containerValues.contains(.metricWidgetImage) {
            do {
                let metricWidgetImageDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .metricWidgetImage)
                metricWidgetImage = metricWidgetImageDecoded
            } catch {
                metricWidgetImage = "".data(using: .utf8)
            }
        } else {
            metricWidgetImage = nil
        }
    }
}

extension CloudWatchClientTypes {
    public enum HistoryItemType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case action
        case configurationupdate
        case stateupdate
        case sdkUnknown(Swift.String)

        public static var allCases: [HistoryItemType] {
            return [
                .action,
                .configurationupdate,
                .stateupdate,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .action: return "Action"
            case .configurationupdate: return "ConfigurationUpdate"
            case .stateupdate: return "StateUpdate"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HistoryItemType(rawValue: rawValue) ?? HistoryItemType.sdkUnknown(rawValue)
        }
    }
}

extension CloudWatchClientTypes.InsightRule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case definition = "Definition"
        case managedRule = "ManagedRule"
        case name = "Name"
        case schema = "Schema"
        case state = "State"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let definition = definition {
            try container.encode(definition, forKey: ClientRuntime.Key("Definition"))
        }
        if managedRule != false {
            try container.encode(managedRule, forKey: ClientRuntime.Key("ManagedRule"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let schema = schema {
            try container.encode(schema, forKey: ClientRuntime.Key("Schema"))
        }
        if let state = state {
            try container.encode(state, forKey: ClientRuntime.Key("State"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .state)
        state = stateDecoded
        let schemaDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schema)
        schema = schemaDecoded
        let definitionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .definition)
        definition = definitionDecoded
        let managedRuleDecoded = try containerValues.decode(Swift.Bool.self, forKey: .managedRule)
        managedRule = managedRuleDecoded
    }
}

extension CloudWatchClientTypes {
    /// This structure contains the definition for a Contributor Insights rule. For more information about this rule, see[ Using Constributor Insights to analyze high-cardinality data](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContributorInsights.html) in the Amazon CloudWatch User Guide.
    public struct InsightRule: Swift.Equatable {
        /// The definition of the rule, as a JSON object. The definition contains the keywords used to define contributors, the value to aggregate on if this rule returns a sum instead of a count, and the filters. For details on the valid syntax, see [Contributor Insights Rule Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContributorInsights-RuleSyntax.html).
        /// This member is required.
        public var definition: Swift.String?
        /// An optional built-in rule that Amazon Web Services manages.
        public var managedRule: Swift.Bool
        /// The name of the rule.
        /// This member is required.
        public var name: Swift.String?
        /// For rules that you create, this is always {"Name": "CloudWatchLogRule", "Version": 1}. For managed rules, this is {"Name": "ServiceLogRule", "Version": 1}
        /// This member is required.
        public var schema: Swift.String?
        /// Indicates whether the rule is enabled or disabled.
        /// This member is required.
        public var state: Swift.String?

        public init (
            definition: Swift.String? = nil,
            managedRule: Swift.Bool = false,
            name: Swift.String? = nil,
            schema: Swift.String? = nil,
            state: Swift.String? = nil
        )
        {
            self.definition = definition
            self.managedRule = managedRule
            self.name = name
            self.schema = schema
            self.state = state
        }
    }

}

extension CloudWatchClientTypes.InsightRuleContributor: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case approximateAggregateValue = "ApproximateAggregateValue"
        case datapoints = "Datapoints"
        case keys = "Keys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let approximateAggregateValue = approximateAggregateValue {
            try container.encode(approximateAggregateValue, forKey: ClientRuntime.Key("ApproximateAggregateValue"))
        }
        if let datapoints = datapoints {
            if !datapoints.isEmpty {
                var datapointsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Datapoints"))
                for (index0, insightrulecontributordatapoint0) in datapoints.enumerated() {
                    try datapointsContainer.encode(insightrulecontributordatapoint0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var datapointsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Datapoints"))
                try datapointsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let keys = keys {
            if !keys.isEmpty {
                var keysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Keys"))
                for (index0, insightrulecontributorkey0) in keys.enumerated() {
                    try keysContainer.encode(insightrulecontributorkey0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var keysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Keys"))
                try keysContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.keys) {
            struct KeyVal0{struct member{}}
            let keysWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .keys)
            if let keysWrappedContainer = keysWrappedContainer {
                let keysContainer = try keysWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var keysBuffer:[Swift.String]? = nil
                if let keysContainer = keysContainer {
                    keysBuffer = [Swift.String]()
                    for stringContainer0 in keysContainer {
                        keysBuffer?.append(stringContainer0)
                    }
                }
                keys = keysBuffer
            } else {
                keys = []
            }
        } else {
            keys = nil
        }
        let approximateAggregateValueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .approximateAggregateValue)
        approximateAggregateValue = approximateAggregateValueDecoded
        if containerValues.contains(.datapoints) {
            struct KeyVal0{struct member{}}
            let datapointsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .datapoints)
            if let datapointsWrappedContainer = datapointsWrappedContainer {
                let datapointsContainer = try datapointsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.InsightRuleContributorDatapoint].self, forKey: .member)
                var datapointsBuffer:[CloudWatchClientTypes.InsightRuleContributorDatapoint]? = nil
                if let datapointsContainer = datapointsContainer {
                    datapointsBuffer = [CloudWatchClientTypes.InsightRuleContributorDatapoint]()
                    for structureContainer0 in datapointsContainer {
                        datapointsBuffer?.append(structureContainer0)
                    }
                }
                datapoints = datapointsBuffer
            } else {
                datapoints = []
            }
        } else {
            datapoints = nil
        }
    }
}

extension CloudWatchClientTypes {
    /// One of the unique contributors found by a Contributor Insights rule. If the rule contains multiple keys, then a unique contributor is a unique combination of values from all the keys in the rule. If the rule contains a single key, then each unique contributor is each unique value for this key. For more information, see [GetInsightRuleReport](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetInsightRuleReport.html).
    public struct InsightRuleContributor: Swift.Equatable {
        /// An approximation of the aggregate value that comes from this contributor.
        /// This member is required.
        public var approximateAggregateValue: Swift.Double?
        /// An array of the data points where this contributor is present. Only the data points when this contributor appeared are included in the array.
        /// This member is required.
        public var datapoints: [CloudWatchClientTypes.InsightRuleContributorDatapoint]?
        /// One of the log entry field keywords that is used to define contributors for this rule.
        /// This member is required.
        public var keys: [Swift.String]?

        public init (
            approximateAggregateValue: Swift.Double? = nil,
            datapoints: [CloudWatchClientTypes.InsightRuleContributorDatapoint]? = nil,
            keys: [Swift.String]? = nil
        )
        {
            self.approximateAggregateValue = approximateAggregateValue
            self.datapoints = datapoints
            self.keys = keys
        }
    }

}

extension CloudWatchClientTypes.InsightRuleContributorDatapoint: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case approximateValue = "ApproximateValue"
        case timestamp = "Timestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let approximateValue = approximateValue {
            try container.encode(approximateValue, forKey: ClientRuntime.Key("ApproximateValue"))
        }
        if let timestamp = timestamp {
            try container.encodeTimestamp(timestamp, format: .dateTime, forKey: ClientRuntime.Key("timestamp"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timestampDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .timestamp)
        timestamp = timestampDecoded
        let approximateValueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .approximateValue)
        approximateValue = approximateValueDecoded
    }
}

extension CloudWatchClientTypes {
    /// One data point related to one contributor. For more information, see [GetInsightRuleReport](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetInsightRuleReport.html) and [InsightRuleContributor](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_InsightRuleContributor.html).
    public struct InsightRuleContributorDatapoint: Swift.Equatable {
        /// The approximate value that this contributor added during this timestamp.
        /// This member is required.
        public var approximateValue: Swift.Double?
        /// The timestamp of the data point.
        /// This member is required.
        public var timestamp: ClientRuntime.Date?

        public init (
            approximateValue: Swift.Double? = nil,
            timestamp: ClientRuntime.Date? = nil
        )
        {
            self.approximateValue = approximateValue
            self.timestamp = timestamp
        }
    }

}

extension CloudWatchClientTypes.InsightRuleMetricDatapoint: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case average = "Average"
        case maxContributorValue = "MaxContributorValue"
        case maximum = "Maximum"
        case minimum = "Minimum"
        case sampleCount = "SampleCount"
        case sum = "Sum"
        case timestamp = "Timestamp"
        case uniqueContributors = "UniqueContributors"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let average = average {
            try container.encode(average, forKey: ClientRuntime.Key("Average"))
        }
        if let maxContributorValue = maxContributorValue {
            try container.encode(maxContributorValue, forKey: ClientRuntime.Key("MaxContributorValue"))
        }
        if let maximum = maximum {
            try container.encode(maximum, forKey: ClientRuntime.Key("Maximum"))
        }
        if let minimum = minimum {
            try container.encode(minimum, forKey: ClientRuntime.Key("Minimum"))
        }
        if let sampleCount = sampleCount {
            try container.encode(sampleCount, forKey: ClientRuntime.Key("SampleCount"))
        }
        if let sum = sum {
            try container.encode(sum, forKey: ClientRuntime.Key("Sum"))
        }
        if let timestamp = timestamp {
            try container.encodeTimestamp(timestamp, format: .dateTime, forKey: ClientRuntime.Key("timestamp"))
        }
        if let uniqueContributors = uniqueContributors {
            try container.encode(uniqueContributors, forKey: ClientRuntime.Key("UniqueContributors"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timestampDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .timestamp)
        timestamp = timestampDecoded
        let uniqueContributorsDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .uniqueContributors)
        uniqueContributors = uniqueContributorsDecoded
        let maxContributorValueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .maxContributorValue)
        maxContributorValue = maxContributorValueDecoded
        let sampleCountDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .sampleCount)
        sampleCount = sampleCountDecoded
        let averageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .average)
        average = averageDecoded
        let sumDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .sum)
        sum = sumDecoded
        let minimumDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .minimum)
        minimum = minimumDecoded
        let maximumDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .maximum)
        maximum = maximumDecoded
    }
}

extension CloudWatchClientTypes {
    /// One data point from the metric time series returned in a Contributor Insights rule report. For more information, see [GetInsightRuleReport](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetInsightRuleReport.html).
    public struct InsightRuleMetricDatapoint: Swift.Equatable {
        /// The average value from all contributors during the time period represented by that data point. This statistic is returned only if you included it in the Metrics array in your request.
        public var average: Swift.Double?
        /// The maximum value provided by one contributor during this timestamp. Each timestamp is evaluated separately, so the identity of the max contributor could be different for each timestamp. This statistic is returned only if you included it in the Metrics array in your request.
        public var maxContributorValue: Swift.Double?
        /// The maximum value from a single occurence from a single contributor during the time period represented by that data point. This statistic is returned only if you included it in the Metrics array in your request.
        public var maximum: Swift.Double?
        /// The minimum value from a single contributor during the time period represented by that data point. This statistic is returned only if you included it in the Metrics array in your request.
        public var minimum: Swift.Double?
        /// The number of occurrences that matched the rule during this data point. This statistic is returned only if you included it in the Metrics array in your request.
        public var sampleCount: Swift.Double?
        /// The sum of the values from all contributors during the time period represented by that data point. This statistic is returned only if you included it in the Metrics array in your request.
        public var sum: Swift.Double?
        /// The timestamp of the data point.
        /// This member is required.
        public var timestamp: ClientRuntime.Date?
        /// The number of unique contributors who published data during this timestamp. This statistic is returned only if you included it in the Metrics array in your request.
        public var uniqueContributors: Swift.Double?

        public init (
            average: Swift.Double? = nil,
            maxContributorValue: Swift.Double? = nil,
            maximum: Swift.Double? = nil,
            minimum: Swift.Double? = nil,
            sampleCount: Swift.Double? = nil,
            sum: Swift.Double? = nil,
            timestamp: ClientRuntime.Date? = nil,
            uniqueContributors: Swift.Double? = nil
        )
        {
            self.average = average
            self.maxContributorValue = maxContributorValue
            self.maximum = maximum
            self.minimum = minimum
            self.sampleCount = sampleCount
            self.sum = sum
            self.timestamp = timestamp
            self.uniqueContributors = uniqueContributors
        }
    }

}

extension InternalServiceFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InternalServiceFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Request processing has failed due to some unknown error, exception, or failure.
public struct InternalServiceFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    ///
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InternalServiceFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InternalServiceFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidFormatFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidFormatFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Data was not syntactically valid JSON.
public struct InvalidFormatFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    ///
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidFormatFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidFormatFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidNextToken {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidNextTokenBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The next token specified is invalid.
public struct InvalidNextToken: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    ///
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidNextTokenBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidNextTokenBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidParameterCombinationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidParameterCombinationExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Parameters were used together that cannot be used together.
public struct InvalidParameterCombinationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    ///
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidParameterCombinationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidParameterCombinationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidParameterValueException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidParameterValueExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The value of an input parameter is bad or out-of-range.
public struct InvalidParameterValueException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    ///
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidParameterValueExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidParameterValueExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudWatchClientTypes.LabelOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case timezone = "Timezone"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let timezone = timezone {
            try container.encode(timezone, forKey: ClientRuntime.Key("Timezone"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timezoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timezone)
        timezone = timezoneDecoded
    }
}

extension CloudWatchClientTypes {
    /// This structure includes the Timezone parameter, which you can use to specify your time zone so that the labels that are associated with returned metrics display the correct time for your time zone. The Timezone value affects a label only if you have a time-based dynamic expression in the label. For more information about dynamic expressions in labels, see [Using Dynamic Labels](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html).
    public struct LabelOptions: Swift.Equatable {
        /// The time zone to use for metric data return in this operation. The format is + or - followed by four digits. The first two digits indicate the number of hours ahead or behind of UTC, and the final two digits are the number of minutes. For example, +0130 indicates a time zone that is 1 hour and 30 minutes ahead of UTC. The default is +0000.
        public var timezone: Swift.String?

        public init (
            timezone: Swift.String? = nil
        )
        {
            self.timezone = timezone
        }
    }

}

extension LimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<LimitExceededExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The operation exceeded one or more limits.
public struct LimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LimitExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension LimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LimitExceededFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<LimitExceededFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The quota for alarms for this customer has already been reached.
public struct LimitExceededFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    ///
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LimitExceededFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension LimitExceededFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ListDashboardsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dashboardNamePrefix = dashboardNamePrefix {
            try container.encode(dashboardNamePrefix, forKey: ClientRuntime.Key("DashboardNamePrefix"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("ListDashboards", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListDashboardsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListDashboardsInput: Swift.Equatable {
    /// If you specify this parameter, only the dashboards with names starting with the specified string are listed. The maximum length is 255, and valid characters are A-Z, a-z, 0-9, ".", "-", and "_".
    public var dashboardNamePrefix: Swift.String?
    /// The token returned by a previous call to indicate that there is more data available.
    public var nextToken: Swift.String?

    public init (
        dashboardNamePrefix: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.dashboardNamePrefix = dashboardNamePrefix
        self.nextToken = nextToken
    }
}

struct ListDashboardsInputBody: Swift.Equatable {
    let dashboardNamePrefix: Swift.String?
    let nextToken: Swift.String?
}

extension ListDashboardsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dashboardNamePrefix = "DashboardNamePrefix"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dashboardNamePrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dashboardNamePrefix)
        dashboardNamePrefix = dashboardNamePrefixDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListDashboardsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListDashboardsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceError" : self = .internalServiceFault(try InternalServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListDashboardsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceFault(InternalServiceFault)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDashboardsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListDashboardsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dashboardEntries = output.dashboardEntries
            self.nextToken = output.nextToken
        } else {
            self.dashboardEntries = nil
            self.nextToken = nil
        }
    }
}

public struct ListDashboardsOutputResponse: Swift.Equatable {
    /// The list of matching dashboards.
    public var dashboardEntries: [CloudWatchClientTypes.DashboardEntry]?
    /// The token that marks the start of the next batch of returned results.
    public var nextToken: Swift.String?

    public init (
        dashboardEntries: [CloudWatchClientTypes.DashboardEntry]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.dashboardEntries = dashboardEntries
        self.nextToken = nextToken
    }
}

struct ListDashboardsOutputResponseBody: Swift.Equatable {
    let dashboardEntries: [CloudWatchClientTypes.DashboardEntry]?
    let nextToken: Swift.String?
}

extension ListDashboardsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dashboardEntries = "DashboardEntries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListDashboardsResult"))
        if containerValues.contains(.dashboardEntries) {
            struct KeyVal0{struct member{}}
            let dashboardEntriesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dashboardEntries)
            if let dashboardEntriesWrappedContainer = dashboardEntriesWrappedContainer {
                let dashboardEntriesContainer = try dashboardEntriesWrappedContainer.decodeIfPresent([CloudWatchClientTypes.DashboardEntry].self, forKey: .member)
                var dashboardEntriesBuffer:[CloudWatchClientTypes.DashboardEntry]? = nil
                if let dashboardEntriesContainer = dashboardEntriesContainer {
                    dashboardEntriesBuffer = [CloudWatchClientTypes.DashboardEntry]()
                    for structureContainer0 in dashboardEntriesContainer {
                        dashboardEntriesBuffer?.append(structureContainer0)
                    }
                }
                dashboardEntries = dashboardEntriesBuffer
            } else {
                dashboardEntries = []
            }
        } else {
            dashboardEntries = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListManagedInsightRulesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: ClientRuntime.Key("MaxResults"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let resourceARN = resourceARN {
            try container.encode(resourceARN, forKey: ClientRuntime.Key("ResourceARN"))
        }
        try container.encode("ListManagedInsightRules", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListManagedInsightRulesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListManagedInsightRulesInput: Swift.Equatable {
    /// The maximum number of results to return in one operation. If you omit this parameter, the default number is used. The default number is 100.
    public var maxResults: Swift.Int?
    /// Include this value to get the next set of rules if the value was returned by the previous operation.
    public var nextToken: Swift.String?
    /// The ARN of an Amazon Web Services resource that has managed Contributor Insights rules.
    /// This member is required.
    public var resourceARN: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceARN: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceARN = resourceARN
    }
}

struct ListManagedInsightRulesInputBody: Swift.Equatable {
    let resourceARN: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListManagedInsightRulesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case resourceARN = "ResourceARN"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListManagedInsightRulesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListManagedInsightRulesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextToken" : self = .invalidNextToken(try InvalidNextToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingParameter" : self = .missingRequiredParameterException(try MissingRequiredParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListManagedInsightRulesOutputError: Swift.Error, Swift.Equatable {
    case invalidNextToken(InvalidNextToken)
    case invalidParameterValueException(InvalidParameterValueException)
    case missingRequiredParameterException(MissingRequiredParameterException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListManagedInsightRulesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListManagedInsightRulesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.managedRules = output.managedRules
            self.nextToken = output.nextToken
        } else {
            self.managedRules = nil
            self.nextToken = nil
        }
    }
}

public struct ListManagedInsightRulesOutputResponse: Swift.Equatable {
    /// The managed rules that are available for the specified Amazon Web Services resource.
    public var managedRules: [CloudWatchClientTypes.ManagedRuleDescription]?
    /// Include this value to get the next set of rules if the value was returned by the previous operation.
    public var nextToken: Swift.String?

    public init (
        managedRules: [CloudWatchClientTypes.ManagedRuleDescription]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.managedRules = managedRules
        self.nextToken = nextToken
    }
}

struct ListManagedInsightRulesOutputResponseBody: Swift.Equatable {
    let managedRules: [CloudWatchClientTypes.ManagedRuleDescription]?
    let nextToken: Swift.String?
}

extension ListManagedInsightRulesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case managedRules = "ManagedRules"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListManagedInsightRulesResult"))
        if containerValues.contains(.managedRules) {
            struct KeyVal0{struct member{}}
            let managedRulesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .managedRules)
            if let managedRulesWrappedContainer = managedRulesWrappedContainer {
                let managedRulesContainer = try managedRulesWrappedContainer.decodeIfPresent([CloudWatchClientTypes.ManagedRuleDescription].self, forKey: .member)
                var managedRulesBuffer:[CloudWatchClientTypes.ManagedRuleDescription]? = nil
                if let managedRulesContainer = managedRulesContainer {
                    managedRulesBuffer = [CloudWatchClientTypes.ManagedRuleDescription]()
                    for structureContainer0 in managedRulesContainer {
                        managedRulesBuffer?.append(structureContainer0)
                    }
                }
                managedRules = managedRulesBuffer
            } else {
                managedRules = []
            }
        } else {
            managedRules = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListMetricStreamsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: ClientRuntime.Key("MaxResults"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("ListMetricStreams", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListMetricStreamsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListMetricStreamsInput: Swift.Equatable {
    /// The maximum number of results to return in one operation.
    public var maxResults: Swift.Int?
    /// Include this value, if it was returned by the previous call, to get the next set of metric streams.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListMetricStreamsInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListMetricStreamsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListMetricStreamsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListMetricStreamsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceError" : self = .internalServiceFault(try InternalServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextToken" : self = .invalidNextToken(try InvalidNextToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingParameter" : self = .missingRequiredParameterException(try MissingRequiredParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListMetricStreamsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceFault(InternalServiceFault)
    case invalidNextToken(InvalidNextToken)
    case invalidParameterValueException(InvalidParameterValueException)
    case missingRequiredParameterException(MissingRequiredParameterException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListMetricStreamsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListMetricStreamsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.entries = output.entries
            self.nextToken = output.nextToken
        } else {
            self.entries = nil
            self.nextToken = nil
        }
    }
}

public struct ListMetricStreamsOutputResponse: Swift.Equatable {
    /// The array of metric stream information.
    public var entries: [CloudWatchClientTypes.MetricStreamEntry]?
    /// The token that marks the start of the next batch of returned results. You can use this token in a subsequent operation to get the next batch of results.
    public var nextToken: Swift.String?

    public init (
        entries: [CloudWatchClientTypes.MetricStreamEntry]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.entries = entries
        self.nextToken = nextToken
    }
}

struct ListMetricStreamsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let entries: [CloudWatchClientTypes.MetricStreamEntry]?
}

extension ListMetricStreamsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entries = "Entries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListMetricStreamsResult"))
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        if containerValues.contains(.entries) {
            struct KeyVal0{struct member{}}
            let entriesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .entries)
            if let entriesWrappedContainer = entriesWrappedContainer {
                let entriesContainer = try entriesWrappedContainer.decodeIfPresent([CloudWatchClientTypes.MetricStreamEntry].self, forKey: .member)
                var entriesBuffer:[CloudWatchClientTypes.MetricStreamEntry]? = nil
                if let entriesContainer = entriesContainer {
                    entriesBuffer = [CloudWatchClientTypes.MetricStreamEntry]()
                    for structureContainer0 in entriesContainer {
                        entriesBuffer?.append(structureContainer0)
                    }
                }
                entries = entriesBuffer
            } else {
                entries = []
            }
        } else {
            entries = nil
        }
    }
}

extension ListMetricsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dimensions = dimensions {
            if !dimensions.isEmpty {
                var dimensionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Dimensions"))
                for (index0, dimensionfilter0) in dimensions.enumerated() {
                    try dimensionsContainer.encode(dimensionfilter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var dimensionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Dimensions"))
                try dimensionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if includeLinkedAccounts != false {
            try container.encode(includeLinkedAccounts, forKey: ClientRuntime.Key("IncludeLinkedAccounts"))
        }
        if let metricName = metricName {
            try container.encode(metricName, forKey: ClientRuntime.Key("MetricName"))
        }
        if let namespace = namespace {
            try container.encode(namespace, forKey: ClientRuntime.Key("Namespace"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let owningAccount = owningAccount {
            try container.encode(owningAccount, forKey: ClientRuntime.Key("OwningAccount"))
        }
        if let recentlyActive = recentlyActive {
            try container.encode(recentlyActive, forKey: ClientRuntime.Key("RecentlyActive"))
        }
        try container.encode("ListMetrics", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListMetricsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListMetricsInput: Swift.Equatable {
    /// The dimensions to filter against. Only the dimensions that match exactly will be returned.
    public var dimensions: [CloudWatchClientTypes.DimensionFilter]?
    /// If you are using this operation in a monitoring account, specify true to include metrics from source accounts in the returned data. The default is false.
    public var includeLinkedAccounts: Swift.Bool
    /// The name of the metric to filter against. Only the metrics with names that match exactly will be returned.
    public var metricName: Swift.String?
    /// The metric namespace to filter against. Only the namespace that matches exactly will be returned.
    public var namespace: Swift.String?
    /// The token returned by a previous call to indicate that there is more data available.
    public var nextToken: Swift.String?
    /// When you use this operation in a monitoring account, use this field to return metrics only from one source account. To do so, specify that source account ID in this field, and also specify true for IncludeLinkedAccounts.
    public var owningAccount: Swift.String?
    /// To filter the results to show only metrics that have had data points published in the past three hours, specify this parameter with a value of PT3H. This is the only valid value for this parameter. The results that are returned are an approximation of the value you specify. There is a low probability that the returned results include metrics with last published data as much as 40 minutes more than the specified time interval.
    public var recentlyActive: CloudWatchClientTypes.RecentlyActive?

    public init (
        dimensions: [CloudWatchClientTypes.DimensionFilter]? = nil,
        includeLinkedAccounts: Swift.Bool = false,
        metricName: Swift.String? = nil,
        namespace: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        owningAccount: Swift.String? = nil,
        recentlyActive: CloudWatchClientTypes.RecentlyActive? = nil
    )
    {
        self.dimensions = dimensions
        self.includeLinkedAccounts = includeLinkedAccounts
        self.metricName = metricName
        self.namespace = namespace
        self.nextToken = nextToken
        self.owningAccount = owningAccount
        self.recentlyActive = recentlyActive
    }
}

struct ListMetricsInputBody: Swift.Equatable {
    let namespace: Swift.String?
    let metricName: Swift.String?
    let dimensions: [CloudWatchClientTypes.DimensionFilter]?
    let nextToken: Swift.String?
    let recentlyActive: CloudWatchClientTypes.RecentlyActive?
    let includeLinkedAccounts: Swift.Bool
    let owningAccount: Swift.String?
}

extension ListMetricsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dimensions = "Dimensions"
        case includeLinkedAccounts = "IncludeLinkedAccounts"
        case metricName = "MetricName"
        case namespace = "Namespace"
        case nextToken = "NextToken"
        case owningAccount = "OwningAccount"
        case recentlyActive = "RecentlyActive"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        if containerValues.contains(.dimensions) {
            struct KeyVal0{struct member{}}
            let dimensionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dimensions)
            if let dimensionsWrappedContainer = dimensionsWrappedContainer {
                let dimensionsContainer = try dimensionsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.DimensionFilter].self, forKey: .member)
                var dimensionsBuffer:[CloudWatchClientTypes.DimensionFilter]? = nil
                if let dimensionsContainer = dimensionsContainer {
                    dimensionsBuffer = [CloudWatchClientTypes.DimensionFilter]()
                    for structureContainer0 in dimensionsContainer {
                        dimensionsBuffer?.append(structureContainer0)
                    }
                }
                dimensions = dimensionsBuffer
            } else {
                dimensions = []
            }
        } else {
            dimensions = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let recentlyActiveDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.RecentlyActive.self, forKey: .recentlyActive)
        recentlyActive = recentlyActiveDecoded
        let includeLinkedAccountsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .includeLinkedAccounts)
        includeLinkedAccounts = includeLinkedAccountsDecoded
        let owningAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .owningAccount)
        owningAccount = owningAccountDecoded
    }
}

extension ListMetricsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListMetricsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceError" : self = .internalServiceFault(try InternalServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListMetricsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceFault(InternalServiceFault)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListMetricsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListMetricsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.metrics = output.metrics
            self.nextToken = output.nextToken
            self.owningAccounts = output.owningAccounts
        } else {
            self.metrics = nil
            self.nextToken = nil
            self.owningAccounts = nil
        }
    }
}

public struct ListMetricsOutputResponse: Swift.Equatable {
    /// The metrics that match your request.
    public var metrics: [CloudWatchClientTypes.Metric]?
    /// The token that marks the start of the next batch of returned results.
    public var nextToken: Swift.String?
    /// If you are using this operation in a monitoring account, this array contains the account IDs of the source accounts where the metrics in the returned data are from. This field is a 1:1 mapping between each metric that is returned and the ID of the owning account.
    public var owningAccounts: [Swift.String]?

    public init (
        metrics: [CloudWatchClientTypes.Metric]? = nil,
        nextToken: Swift.String? = nil,
        owningAccounts: [Swift.String]? = nil
    )
    {
        self.metrics = metrics
        self.nextToken = nextToken
        self.owningAccounts = owningAccounts
    }
}

struct ListMetricsOutputResponseBody: Swift.Equatable {
    let metrics: [CloudWatchClientTypes.Metric]?
    let nextToken: Swift.String?
    let owningAccounts: [Swift.String]?
}

extension ListMetricsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metrics = "Metrics"
        case nextToken = "NextToken"
        case owningAccounts = "OwningAccounts"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListMetricsResult"))
        if containerValues.contains(.metrics) {
            struct KeyVal0{struct member{}}
            let metricsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .metrics)
            if let metricsWrappedContainer = metricsWrappedContainer {
                let metricsContainer = try metricsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.Metric].self, forKey: .member)
                var metricsBuffer:[CloudWatchClientTypes.Metric]? = nil
                if let metricsContainer = metricsContainer {
                    metricsBuffer = [CloudWatchClientTypes.Metric]()
                    for structureContainer0 in metricsContainer {
                        metricsBuffer?.append(structureContainer0)
                    }
                }
                metrics = metricsBuffer
            } else {
                metrics = []
            }
        } else {
            metrics = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        if containerValues.contains(.owningAccounts) {
            struct KeyVal0{struct member{}}
            let owningAccountsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .owningAccounts)
            if let owningAccountsWrappedContainer = owningAccountsWrappedContainer {
                let owningAccountsContainer = try owningAccountsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var owningAccountsBuffer:[Swift.String]? = nil
                if let owningAccountsContainer = owningAccountsContainer {
                    owningAccountsBuffer = [Swift.String]()
                    for stringContainer0 in owningAccountsContainer {
                        owningAccountsBuffer?.append(stringContainer0)
                    }
                }
                owningAccounts = owningAccountsBuffer
            } else {
                owningAccounts = []
            }
        } else {
            owningAccounts = nil
        }
    }
}

extension ListTagsForResourceInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let resourceARN = resourceARN {
            try container.encode(resourceARN, forKey: ClientRuntime.Key("ResourceARN"))
        }
        try container.encode("ListTagsForResource", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListTagsForResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListTagsForResourceInput: Swift.Equatable {
    /// The ARN of the CloudWatch resource that you want to view tags for. The ARN format of an alarm is arn:aws:cloudwatch:Region:account-id:alarm:alarm-name  The ARN format of a Contributor Insights rule is arn:aws:cloudwatch:Region:account-id:insight-rule:insight-rule-name  For more information about ARN format, see [ Resource Types Defined by Amazon CloudWatch](https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazoncloudwatch.html#amazoncloudwatch-resources-for-iam-policies) in the Amazon Web Services General Reference.
    /// This member is required.
    public var resourceARN: Swift.String?

    public init (
        resourceARN: Swift.String? = nil
    )
    {
        self.resourceARN = resourceARN
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
    let resourceARN: Swift.String?
}

extension ListTagsForResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceARN = "ResourceARN"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceError" : self = .internalServiceFault(try InternalServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case internalServiceFault(InternalServiceFault)
    case invalidParameterValueException(InvalidParameterValueException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tags = output.tags
        } else {
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// The list of tag keys and values associated with the resource you specified.
    public var tags: [CloudWatchClientTypes.Tag]?

    public init (
        tags: [CloudWatchClientTypes.Tag]? = nil
    )
    {
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    let tags: [CloudWatchClientTypes.Tag]?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListTagsForResourceResult"))
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[CloudWatchClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [CloudWatchClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension CloudWatchClientTypes.ManagedRule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceARN = "ResourceARN"
        case tags = "Tags"
        case templateName = "TemplateName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let resourceARN = resourceARN {
            try container.encode(resourceARN, forKey: ClientRuntime.Key("ResourceARN"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let templateName = templateName {
            try container.encode(templateName, forKey: ClientRuntime.Key("TemplateName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[CloudWatchClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [CloudWatchClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension CloudWatchClientTypes {
    /// Contains the information that's required to enable a managed Contributor Insights rule for an Amazon Web Services resource.
    public struct ManagedRule: Swift.Equatable {
        /// The ARN of an Amazon Web Services resource that has managed Contributor Insights rules.
        /// This member is required.
        public var resourceARN: Swift.String?
        /// A list of key-value pairs that you can associate with a managed Contributor Insights rule. You can associate as many as 50 tags with a rule. Tags can help you organize and categorize your resources. You also can use them to scope user permissions by granting a user permission to access or change only the resources that have certain tag values. To associate tags with a rule, you must have the cloudwatch:TagResource permission in addition to the cloudwatch:PutInsightRule permission. If you are using this operation to update an existing Contributor Insights rule, any tags that you specify in this parameter are ignored. To change the tags of an existing rule, use TagResource.
        public var tags: [CloudWatchClientTypes.Tag]?
        /// The template name for the managed Contributor Insights rule, as returned by ListManagedInsightRules.
        /// This member is required.
        public var templateName: Swift.String?

        public init (
            resourceARN: Swift.String? = nil,
            tags: [CloudWatchClientTypes.Tag]? = nil,
            templateName: Swift.String? = nil
        )
        {
            self.resourceARN = resourceARN
            self.tags = tags
            self.templateName = templateName
        }
    }

}

extension CloudWatchClientTypes.ManagedRuleDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceARN = "ResourceARN"
        case ruleState = "RuleState"
        case templateName = "TemplateName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let resourceARN = resourceARN {
            try container.encode(resourceARN, forKey: ClientRuntime.Key("ResourceARN"))
        }
        if let ruleState = ruleState {
            try container.encode(ruleState, forKey: ClientRuntime.Key("RuleState"))
        }
        if let templateName = templateName {
            try container.encode(templateName, forKey: ClientRuntime.Key("TemplateName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
        let ruleStateDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.ManagedRuleState.self, forKey: .ruleState)
        ruleState = ruleStateDecoded
    }
}

extension CloudWatchClientTypes {
    /// Contains information about managed Contributor Insights rules, as returned by ListManagedInsightRules.
    public struct ManagedRuleDescription: Swift.Equatable {
        /// If a managed rule is enabled, this is the ARN for the related Amazon Web Services resource.
        public var resourceARN: Swift.String?
        /// Describes the state of a managed rule. If present, it contains information about the Contributor Insights rule that contains information about the related Amazon Web Services resource.
        public var ruleState: CloudWatchClientTypes.ManagedRuleState?
        /// The template name for the managed rule. Used to enable managed rules using PutManagedInsightRules.
        public var templateName: Swift.String?

        public init (
            resourceARN: Swift.String? = nil,
            ruleState: CloudWatchClientTypes.ManagedRuleState? = nil,
            templateName: Swift.String? = nil
        )
        {
            self.resourceARN = resourceARN
            self.ruleState = ruleState
            self.templateName = templateName
        }
    }

}

extension CloudWatchClientTypes.ManagedRuleState: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleName = "RuleName"
        case state = "State"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let ruleName = ruleName {
            try container.encode(ruleName, forKey: ClientRuntime.Key("RuleName"))
        }
        if let state = state {
            try container.encode(state, forKey: ClientRuntime.Key("State"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleName)
        ruleName = ruleNameDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .state)
        state = stateDecoded
    }
}

extension CloudWatchClientTypes {
    /// The status of a managed Contributor Insights rule.
    public struct ManagedRuleState: Swift.Equatable {
        /// The name of the Contributor Insights rule that contains data for the specified Amazon Web Services resource.
        /// This member is required.
        public var ruleName: Swift.String?
        /// Indicates whether the rule is enabled or disabled.
        /// This member is required.
        public var state: Swift.String?

        public init (
            ruleName: Swift.String? = nil,
            state: Swift.String? = nil
        )
        {
            self.ruleName = ruleName
            self.state = state
        }
    }

}

extension CloudWatchClientTypes.MessageData: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let code = code {
            try container.encode(code, forKey: ClientRuntime.Key("Code"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension CloudWatchClientTypes {
    /// A message returned by the GetMetricDataAPI, including a code and a description. If a cross-Region GetMetricData operation fails with a code of Forbidden and a value of Authentication too complex to retrieve cross region data, you can correct the problem by running the GetMetricData operation in the same Region where the metric data is.
    public struct MessageData: Swift.Equatable {
        /// The error code or status code associated with the message.
        public var code: Swift.String?
        /// The message text.
        public var value: Swift.String?

        public init (
            code: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.code = code
            self.value = value
        }
    }

}

extension CloudWatchClientTypes.Metric: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dimensions = "Dimensions"
        case metricName = "MetricName"
        case namespace = "Namespace"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dimensions = dimensions {
            if !dimensions.isEmpty {
                var dimensionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Dimensions"))
                for (index0, dimension0) in dimensions.enumerated() {
                    try dimensionsContainer.encode(dimension0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var dimensionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Dimensions"))
                try dimensionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let metricName = metricName {
            try container.encode(metricName, forKey: ClientRuntime.Key("MetricName"))
        }
        if let namespace = namespace {
            try container.encode(namespace, forKey: ClientRuntime.Key("Namespace"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        if containerValues.contains(.dimensions) {
            struct KeyVal0{struct member{}}
            let dimensionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dimensions)
            if let dimensionsWrappedContainer = dimensionsWrappedContainer {
                let dimensionsContainer = try dimensionsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.Dimension].self, forKey: .member)
                var dimensionsBuffer:[CloudWatchClientTypes.Dimension]? = nil
                if let dimensionsContainer = dimensionsContainer {
                    dimensionsBuffer = [CloudWatchClientTypes.Dimension]()
                    for structureContainer0 in dimensionsContainer {
                        dimensionsBuffer?.append(structureContainer0)
                    }
                }
                dimensions = dimensionsBuffer
            } else {
                dimensions = []
            }
        } else {
            dimensions = nil
        }
    }
}

extension CloudWatchClientTypes {
    /// Represents a specific metric.
    public struct Metric: Swift.Equatable {
        /// The dimensions for the metric.
        public var dimensions: [CloudWatchClientTypes.Dimension]?
        /// The name of the metric. This is a required field.
        public var metricName: Swift.String?
        /// The namespace of the metric.
        public var namespace: Swift.String?

        public init (
            dimensions: [CloudWatchClientTypes.Dimension]? = nil,
            metricName: Swift.String? = nil,
            namespace: Swift.String? = nil
        )
        {
            self.dimensions = dimensions
            self.metricName = metricName
            self.namespace = namespace
        }
    }

}

extension CloudWatchClientTypes.MetricAlarm: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionsEnabled = "ActionsEnabled"
        case alarmActions = "AlarmActions"
        case alarmArn = "AlarmArn"
        case alarmConfigurationUpdatedTimestamp = "AlarmConfigurationUpdatedTimestamp"
        case alarmDescription = "AlarmDescription"
        case alarmName = "AlarmName"
        case comparisonOperator = "ComparisonOperator"
        case datapointsToAlarm = "DatapointsToAlarm"
        case dimensions = "Dimensions"
        case evaluateLowSampleCountPercentile = "EvaluateLowSampleCountPercentile"
        case evaluationPeriods = "EvaluationPeriods"
        case evaluationState = "EvaluationState"
        case extendedStatistic = "ExtendedStatistic"
        case insufficientDataActions = "InsufficientDataActions"
        case metricName = "MetricName"
        case metrics = "Metrics"
        case namespace = "Namespace"
        case okActions = "OKActions"
        case period = "Period"
        case stateReason = "StateReason"
        case stateReasonData = "StateReasonData"
        case stateTransitionedTimestamp = "StateTransitionedTimestamp"
        case stateUpdatedTimestamp = "StateUpdatedTimestamp"
        case stateValue = "StateValue"
        case statistic = "Statistic"
        case threshold = "Threshold"
        case thresholdMetricId = "ThresholdMetricId"
        case treatMissingData = "TreatMissingData"
        case unit = "Unit"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let actionsEnabled = actionsEnabled {
            try container.encode(actionsEnabled, forKey: ClientRuntime.Key("ActionsEnabled"))
        }
        if let alarmActions = alarmActions {
            if !alarmActions.isEmpty {
                var alarmActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AlarmActions"))
                for (index0, resourcename0) in alarmActions.enumerated() {
                    try alarmActionsContainer.encode(resourcename0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var alarmActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AlarmActions"))
                try alarmActionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let alarmArn = alarmArn {
            try container.encode(alarmArn, forKey: ClientRuntime.Key("AlarmArn"))
        }
        if let alarmConfigurationUpdatedTimestamp = alarmConfigurationUpdatedTimestamp {
            try container.encodeTimestamp(alarmConfigurationUpdatedTimestamp, format: .dateTime, forKey: ClientRuntime.Key("alarmConfigurationUpdatedTimestamp"))
        }
        if let alarmDescription = alarmDescription {
            try container.encode(alarmDescription, forKey: ClientRuntime.Key("AlarmDescription"))
        }
        if let alarmName = alarmName {
            try container.encode(alarmName, forKey: ClientRuntime.Key("AlarmName"))
        }
        if let comparisonOperator = comparisonOperator {
            try container.encode(comparisonOperator, forKey: ClientRuntime.Key("ComparisonOperator"))
        }
        if let datapointsToAlarm = datapointsToAlarm {
            try container.encode(datapointsToAlarm, forKey: ClientRuntime.Key("DatapointsToAlarm"))
        }
        if let dimensions = dimensions {
            if !dimensions.isEmpty {
                var dimensionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Dimensions"))
                for (index0, dimension0) in dimensions.enumerated() {
                    try dimensionsContainer.encode(dimension0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var dimensionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Dimensions"))
                try dimensionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let evaluateLowSampleCountPercentile = evaluateLowSampleCountPercentile {
            try container.encode(evaluateLowSampleCountPercentile, forKey: ClientRuntime.Key("EvaluateLowSampleCountPercentile"))
        }
        if let evaluationPeriods = evaluationPeriods {
            try container.encode(evaluationPeriods, forKey: ClientRuntime.Key("EvaluationPeriods"))
        }
        if let evaluationState = evaluationState {
            try container.encode(evaluationState, forKey: ClientRuntime.Key("EvaluationState"))
        }
        if let extendedStatistic = extendedStatistic {
            try container.encode(extendedStatistic, forKey: ClientRuntime.Key("ExtendedStatistic"))
        }
        if let insufficientDataActions = insufficientDataActions {
            if !insufficientDataActions.isEmpty {
                var insufficientDataActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InsufficientDataActions"))
                for (index0, resourcename0) in insufficientDataActions.enumerated() {
                    try insufficientDataActionsContainer.encode(resourcename0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var insufficientDataActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InsufficientDataActions"))
                try insufficientDataActionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let metricName = metricName {
            try container.encode(metricName, forKey: ClientRuntime.Key("MetricName"))
        }
        if let metrics = metrics {
            if !metrics.isEmpty {
                var metricsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Metrics"))
                for (index0, metricdataquery0) in metrics.enumerated() {
                    try metricsContainer.encode(metricdataquery0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var metricsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Metrics"))
                try metricsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let namespace = namespace {
            try container.encode(namespace, forKey: ClientRuntime.Key("Namespace"))
        }
        if let okActions = okActions {
            if !okActions.isEmpty {
                var okActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OKActions"))
                for (index0, resourcename0) in okActions.enumerated() {
                    try okActionsContainer.encode(resourcename0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var okActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OKActions"))
                try okActionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let period = period {
            try container.encode(period, forKey: ClientRuntime.Key("Period"))
        }
        if let stateReason = stateReason {
            try container.encode(stateReason, forKey: ClientRuntime.Key("StateReason"))
        }
        if let stateReasonData = stateReasonData {
            try container.encode(stateReasonData, forKey: ClientRuntime.Key("StateReasonData"))
        }
        if let stateTransitionedTimestamp = stateTransitionedTimestamp {
            try container.encodeTimestamp(stateTransitionedTimestamp, format: .dateTime, forKey: ClientRuntime.Key("stateTransitionedTimestamp"))
        }
        if let stateUpdatedTimestamp = stateUpdatedTimestamp {
            try container.encodeTimestamp(stateUpdatedTimestamp, format: .dateTime, forKey: ClientRuntime.Key("stateUpdatedTimestamp"))
        }
        if let stateValue = stateValue {
            try container.encode(stateValue, forKey: ClientRuntime.Key("StateValue"))
        }
        if let statistic = statistic {
            try container.encode(statistic, forKey: ClientRuntime.Key("Statistic"))
        }
        if let threshold = threshold {
            try container.encode(threshold, forKey: ClientRuntime.Key("Threshold"))
        }
        if let thresholdMetricId = thresholdMetricId {
            try container.encode(thresholdMetricId, forKey: ClientRuntime.Key("ThresholdMetricId"))
        }
        if let treatMissingData = treatMissingData {
            try container.encode(treatMissingData, forKey: ClientRuntime.Key("TreatMissingData"))
        }
        if let unit = unit {
            try container.encode(unit, forKey: ClientRuntime.Key("Unit"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alarmNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmName)
        alarmName = alarmNameDecoded
        let alarmArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmArn)
        alarmArn = alarmArnDecoded
        let alarmDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmDescription)
        alarmDescription = alarmDescriptionDecoded
        let alarmConfigurationUpdatedTimestampDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .alarmConfigurationUpdatedTimestamp)
        alarmConfigurationUpdatedTimestamp = alarmConfigurationUpdatedTimestampDecoded
        let actionsEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .actionsEnabled)
        actionsEnabled = actionsEnabledDecoded
        if containerValues.contains(.okActions) {
            struct KeyVal0{struct member{}}
            let okActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .okActions)
            if let okActionsWrappedContainer = okActionsWrappedContainer {
                let okActionsContainer = try okActionsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var okActionsBuffer:[Swift.String]? = nil
                if let okActionsContainer = okActionsContainer {
                    okActionsBuffer = [Swift.String]()
                    for stringContainer0 in okActionsContainer {
                        okActionsBuffer?.append(stringContainer0)
                    }
                }
                okActions = okActionsBuffer
            } else {
                okActions = []
            }
        } else {
            okActions = nil
        }
        if containerValues.contains(.alarmActions) {
            struct KeyVal0{struct member{}}
            let alarmActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .alarmActions)
            if let alarmActionsWrappedContainer = alarmActionsWrappedContainer {
                let alarmActionsContainer = try alarmActionsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var alarmActionsBuffer:[Swift.String]? = nil
                if let alarmActionsContainer = alarmActionsContainer {
                    alarmActionsBuffer = [Swift.String]()
                    for stringContainer0 in alarmActionsContainer {
                        alarmActionsBuffer?.append(stringContainer0)
                    }
                }
                alarmActions = alarmActionsBuffer
            } else {
                alarmActions = []
            }
        } else {
            alarmActions = nil
        }
        if containerValues.contains(.insufficientDataActions) {
            struct KeyVal0{struct member{}}
            let insufficientDataActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .insufficientDataActions)
            if let insufficientDataActionsWrappedContainer = insufficientDataActionsWrappedContainer {
                let insufficientDataActionsContainer = try insufficientDataActionsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var insufficientDataActionsBuffer:[Swift.String]? = nil
                if let insufficientDataActionsContainer = insufficientDataActionsContainer {
                    insufficientDataActionsBuffer = [Swift.String]()
                    for stringContainer0 in insufficientDataActionsContainer {
                        insufficientDataActionsBuffer?.append(stringContainer0)
                    }
                }
                insufficientDataActions = insufficientDataActionsBuffer
            } else {
                insufficientDataActions = []
            }
        } else {
            insufficientDataActions = nil
        }
        let stateValueDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.StateValue.self, forKey: .stateValue)
        stateValue = stateValueDecoded
        let stateReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateReason)
        stateReason = stateReasonDecoded
        let stateReasonDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateReasonData)
        stateReasonData = stateReasonDataDecoded
        let stateUpdatedTimestampDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .stateUpdatedTimestamp)
        stateUpdatedTimestamp = stateUpdatedTimestampDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let statisticDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.Statistic.self, forKey: .statistic)
        statistic = statisticDecoded
        let extendedStatisticDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .extendedStatistic)
        extendedStatistic = extendedStatisticDecoded
        if containerValues.contains(.dimensions) {
            struct KeyVal0{struct member{}}
            let dimensionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dimensions)
            if let dimensionsWrappedContainer = dimensionsWrappedContainer {
                let dimensionsContainer = try dimensionsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.Dimension].self, forKey: .member)
                var dimensionsBuffer:[CloudWatchClientTypes.Dimension]? = nil
                if let dimensionsContainer = dimensionsContainer {
                    dimensionsBuffer = [CloudWatchClientTypes.Dimension]()
                    for structureContainer0 in dimensionsContainer {
                        dimensionsBuffer?.append(structureContainer0)
                    }
                }
                dimensions = dimensionsBuffer
            } else {
                dimensions = []
            }
        } else {
            dimensions = nil
        }
        let periodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .period)
        period = periodDecoded
        let unitDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.StandardUnit.self, forKey: .unit)
        unit = unitDecoded
        let evaluationPeriodsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .evaluationPeriods)
        evaluationPeriods = evaluationPeriodsDecoded
        let datapointsToAlarmDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .datapointsToAlarm)
        datapointsToAlarm = datapointsToAlarmDecoded
        let thresholdDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .threshold)
        threshold = thresholdDecoded
        let comparisonOperatorDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.ComparisonOperator.self, forKey: .comparisonOperator)
        comparisonOperator = comparisonOperatorDecoded
        let treatMissingDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .treatMissingData)
        treatMissingData = treatMissingDataDecoded
        let evaluateLowSampleCountPercentileDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .evaluateLowSampleCountPercentile)
        evaluateLowSampleCountPercentile = evaluateLowSampleCountPercentileDecoded
        if containerValues.contains(.metrics) {
            struct KeyVal0{struct member{}}
            let metricsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .metrics)
            if let metricsWrappedContainer = metricsWrappedContainer {
                let metricsContainer = try metricsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.MetricDataQuery].self, forKey: .member)
                var metricsBuffer:[CloudWatchClientTypes.MetricDataQuery]? = nil
                if let metricsContainer = metricsContainer {
                    metricsBuffer = [CloudWatchClientTypes.MetricDataQuery]()
                    for structureContainer0 in metricsContainer {
                        metricsBuffer?.append(structureContainer0)
                    }
                }
                metrics = metricsBuffer
            } else {
                metrics = []
            }
        } else {
            metrics = nil
        }
        let thresholdMetricIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thresholdMetricId)
        thresholdMetricId = thresholdMetricIdDecoded
        let evaluationStateDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.EvaluationState.self, forKey: .evaluationState)
        evaluationState = evaluationStateDecoded
        let stateTransitionedTimestampDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .stateTransitionedTimestamp)
        stateTransitionedTimestamp = stateTransitionedTimestampDecoded
    }
}

extension CloudWatchClientTypes {
    /// The details about a metric alarm.
    public struct MetricAlarm: Swift.Equatable {
        /// Indicates whether actions should be executed during any changes to the alarm state.
        public var actionsEnabled: Swift.Bool?
        /// The actions to execute when this alarm transitions to the ALARM state from any other state. Each action is specified as an Amazon Resource Name (ARN).
        public var alarmActions: [Swift.String]?
        /// The Amazon Resource Name (ARN) of the alarm.
        public var alarmArn: Swift.String?
        /// The time stamp of the last update to the alarm configuration.
        public var alarmConfigurationUpdatedTimestamp: ClientRuntime.Date?
        /// The description of the alarm.
        public var alarmDescription: Swift.String?
        /// The name of the alarm.
        public var alarmName: Swift.String?
        /// The arithmetic operation to use when comparing the specified statistic and threshold. The specified statistic value is used as the first operand.
        public var comparisonOperator: CloudWatchClientTypes.ComparisonOperator?
        /// The number of data points that must be breaching to trigger the alarm.
        public var datapointsToAlarm: Swift.Int?
        /// The dimensions for the metric associated with the alarm.
        public var dimensions: [CloudWatchClientTypes.Dimension]?
        /// Used only for alarms based on percentiles. If ignore, the alarm state does not change during periods with too few data points to be statistically significant. If evaluate or this parameter is not used, the alarm is always evaluated and possibly changes state no matter how many data points are available.
        public var evaluateLowSampleCountPercentile: Swift.String?
        /// The number of periods over which data is compared to the specified threshold.
        public var evaluationPeriods: Swift.Int?
        /// If the value of this field is PARTIAL_DATA, the alarm is being evaluated based on only partial data. This happens if the query used for the alarm returns more than 10,000 metrics. For more information, see [Create alarms on Metrics Insights queries](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Create_Metrics_Insights_Alarm.html).
        public var evaluationState: CloudWatchClientTypes.EvaluationState?
        /// The percentile statistic for the metric associated with the alarm. Specify a value between p0.0 and p100.
        public var extendedStatistic: Swift.String?
        /// The actions to execute when this alarm transitions to the INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Name (ARN).
        public var insufficientDataActions: [Swift.String]?
        /// The name of the metric associated with the alarm, if this is an alarm based on a single metric.
        public var metricName: Swift.String?
        /// An array of MetricDataQuery structures, used in an alarm based on a metric math expression. Each structure either retrieves a metric or performs a math expression. One item in the Metrics array is the math expression that the alarm watches. This expression by designated by having ReturnData set to true.
        public var metrics: [CloudWatchClientTypes.MetricDataQuery]?
        /// The namespace of the metric associated with the alarm.
        public var namespace: Swift.String?
        /// The actions to execute when this alarm transitions to the OK state from any other state. Each action is specified as an Amazon Resource Name (ARN).
        public var okActions: [Swift.String]?
        /// The period, in seconds, over which the statistic is applied.
        public var period: Swift.Int?
        /// An explanation for the alarm state, in text format.
        public var stateReason: Swift.String?
        /// An explanation for the alarm state, in JSON format.
        public var stateReasonData: Swift.String?
        /// The date and time that the alarm's StateValue most recently changed.
        public var stateTransitionedTimestamp: ClientRuntime.Date?
        /// The time stamp of the last update to the value of either the StateValue or EvaluationState parameters.
        public var stateUpdatedTimestamp: ClientRuntime.Date?
        /// The state value for the alarm.
        public var stateValue: CloudWatchClientTypes.StateValue?
        /// The statistic for the metric associated with the alarm, other than percentile. For percentile statistics, use ExtendedStatistic.
        public var statistic: CloudWatchClientTypes.Statistic?
        /// The value to compare with the specified statistic.
        public var threshold: Swift.Double?
        /// In an alarm based on an anomaly detection model, this is the ID of the ANOMALY_DETECTION_BAND function used as the threshold for the alarm.
        public var thresholdMetricId: Swift.String?
        /// Sets how this alarm is to handle missing data points. The valid values are breaching, notBreaching, ignore, and missing. For more information, see [Configuring how CloudWatch alarms treat missing data](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarms-and-missing-data). If this parameter is omitted, the default behavior of missing is used.
        public var treatMissingData: Swift.String?
        /// The unit of the metric associated with the alarm.
        public var unit: CloudWatchClientTypes.StandardUnit?

        public init (
            actionsEnabled: Swift.Bool? = nil,
            alarmActions: [Swift.String]? = nil,
            alarmArn: Swift.String? = nil,
            alarmConfigurationUpdatedTimestamp: ClientRuntime.Date? = nil,
            alarmDescription: Swift.String? = nil,
            alarmName: Swift.String? = nil,
            comparisonOperator: CloudWatchClientTypes.ComparisonOperator? = nil,
            datapointsToAlarm: Swift.Int? = nil,
            dimensions: [CloudWatchClientTypes.Dimension]? = nil,
            evaluateLowSampleCountPercentile: Swift.String? = nil,
            evaluationPeriods: Swift.Int? = nil,
            evaluationState: CloudWatchClientTypes.EvaluationState? = nil,
            extendedStatistic: Swift.String? = nil,
            insufficientDataActions: [Swift.String]? = nil,
            metricName: Swift.String? = nil,
            metrics: [CloudWatchClientTypes.MetricDataQuery]? = nil,
            namespace: Swift.String? = nil,
            okActions: [Swift.String]? = nil,
            period: Swift.Int? = nil,
            stateReason: Swift.String? = nil,
            stateReasonData: Swift.String? = nil,
            stateTransitionedTimestamp: ClientRuntime.Date? = nil,
            stateUpdatedTimestamp: ClientRuntime.Date? = nil,
            stateValue: CloudWatchClientTypes.StateValue? = nil,
            statistic: CloudWatchClientTypes.Statistic? = nil,
            threshold: Swift.Double? = nil,
            thresholdMetricId: Swift.String? = nil,
            treatMissingData: Swift.String? = nil,
            unit: CloudWatchClientTypes.StandardUnit? = nil
        )
        {
            self.actionsEnabled = actionsEnabled
            self.alarmActions = alarmActions
            self.alarmArn = alarmArn
            self.alarmConfigurationUpdatedTimestamp = alarmConfigurationUpdatedTimestamp
            self.alarmDescription = alarmDescription
            self.alarmName = alarmName
            self.comparisonOperator = comparisonOperator
            self.datapointsToAlarm = datapointsToAlarm
            self.dimensions = dimensions
            self.evaluateLowSampleCountPercentile = evaluateLowSampleCountPercentile
            self.evaluationPeriods = evaluationPeriods
            self.evaluationState = evaluationState
            self.extendedStatistic = extendedStatistic
            self.insufficientDataActions = insufficientDataActions
            self.metricName = metricName
            self.metrics = metrics
            self.namespace = namespace
            self.okActions = okActions
            self.period = period
            self.stateReason = stateReason
            self.stateReasonData = stateReasonData
            self.stateTransitionedTimestamp = stateTransitionedTimestamp
            self.stateUpdatedTimestamp = stateUpdatedTimestamp
            self.stateValue = stateValue
            self.statistic = statistic
            self.threshold = threshold
            self.thresholdMetricId = thresholdMetricId
            self.treatMissingData = treatMissingData
            self.unit = unit
        }
    }

}

extension CloudWatchClientTypes.MetricDataQuery: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case expression = "Expression"
        case id = "Id"
        case label = "Label"
        case metricStat = "MetricStat"
        case period = "Period"
        case returnData = "ReturnData"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accountId = accountId {
            try container.encode(accountId, forKey: ClientRuntime.Key("AccountId"))
        }
        if let expression = expression {
            try container.encode(expression, forKey: ClientRuntime.Key("Expression"))
        }
        if let id = id {
            try container.encode(id, forKey: ClientRuntime.Key("Id"))
        }
        if let label = label {
            try container.encode(label, forKey: ClientRuntime.Key("Label"))
        }
        if let metricStat = metricStat {
            try container.encode(metricStat, forKey: ClientRuntime.Key("MetricStat"))
        }
        if let period = period {
            try container.encode(period, forKey: ClientRuntime.Key("Period"))
        }
        if let returnData = returnData {
            try container.encode(returnData, forKey: ClientRuntime.Key("ReturnData"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let metricStatDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.MetricStat.self, forKey: .metricStat)
        metricStat = metricStatDecoded
        let expressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expression)
        expression = expressionDecoded
        let labelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .label)
        label = labelDecoded
        let returnDataDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .returnData)
        returnData = returnDataDecoded
        let periodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .period)
        period = periodDecoded
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
    }
}

extension CloudWatchClientTypes {
    /// This structure is used in both GetMetricData and PutMetricAlarm. The supported use of this structure is different for those two operations. When used in GetMetricData, it indicates the metric data to return, and whether this call is just retrieving a batch set of data for one metric, or is performing a Metrics Insights query or a math expression. A single GetMetricData call can include up to 500 MetricDataQuery structures. When used in PutMetricAlarm, it enables you to create an alarm based on a metric math expression. Each MetricDataQuery in the array specifies either a metric to retrieve, or a math expression to be performed on retrieved metrics. A single PutMetricAlarm call can include up to 20 MetricDataQuery structures in the array. The 20 structures can include as many as 10 structures that contain a MetricStat parameter to retrieve a metric, and as many as 10 structures that contain the Expression parameter to perform a math expression. Of those Expression structures, one must have true as the value for ReturnData. The result of this expression is the value the alarm watches. Any expression used in a PutMetricAlarm operation must return a single time series. For more information, see [Metric Math Syntax and Functions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax) in the Amazon CloudWatch User Guide. Some of the parameters of this structure also have different uses whether you are using this structure in a GetMetricData operation or a PutMetricAlarm operation. These differences are explained in the following parameter list.
    public struct MetricDataQuery: Swift.Equatable {
        /// The ID of the account where the metrics are located. If you are performing a GetMetricData operation in a monitoring account, use this to specify which account to retrieve this metric from. If you are performing a PutMetricAlarm operation, use this to specify which account contains the metric that the alarm is watching.
        public var accountId: Swift.String?
        /// This field can contain either a Metrics Insights query, or a metric math expression to be performed on the returned data. For more information about Metrics Insights queries, see [Metrics Insights query components and syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch-metrics-insights-querylanguage) in the Amazon CloudWatch User Guide. A math expression can use the Id of the other metrics or queries to refer to those metrics, and can also use the Id of other expressions to use the result of those expressions. For more information about metric math expressions, see [Metric Math Syntax and Functions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax) in the Amazon CloudWatch User Guide. Within each MetricDataQuery object, you must specify either Expression or MetricStat but not both.
        public var expression: Swift.String?
        /// A short name used to tie this object to the results in the response. This name must be unique within a single call to GetMetricData. If you are performing math expressions on this set of data, this name represents that data and can serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscore. The first character must be a lowercase letter.
        /// This member is required.
        public var id: Swift.String?
        /// A human-readable label for this metric or expression. This is especially useful if this is an expression, so that you know what the value represents. If the metric or expression is shown in a CloudWatch dashboard widget, the label is shown. If Label is omitted, CloudWatch generates a default. You can put dynamic expressions into a label, so that it is more descriptive. For more information, see [Using Dynamic Labels](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html).
        public var label: Swift.String?
        /// The metric to be returned, along with statistics, period, and units. Use this parameter only if this object is retrieving a metric and not performing a math expression on returned data. Within one MetricDataQuery object, you must specify either Expression or MetricStat but not both.
        public var metricStat: CloudWatchClientTypes.MetricStat?
        /// The granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics stored by a PutMetricData operation that includes a StorageResolution of 1 second.
        public var period: Swift.Int?
        /// When used in GetMetricData, this option indicates whether to return the timestamps and raw data values of this metric. If you are performing this call just to do math expressions and do not also need the raw data returned, you can specify false. If you omit this, the default of true is used. When used in PutMetricAlarm, specify true for the one expression result to use as the alarm. For all other metrics and expressions in the same PutMetricAlarm operation, specify ReturnData as False.
        public var returnData: Swift.Bool?

        public init (
            accountId: Swift.String? = nil,
            expression: Swift.String? = nil,
            id: Swift.String? = nil,
            label: Swift.String? = nil,
            metricStat: CloudWatchClientTypes.MetricStat? = nil,
            period: Swift.Int? = nil,
            returnData: Swift.Bool? = nil
        )
        {
            self.accountId = accountId
            self.expression = expression
            self.id = id
            self.label = label
            self.metricStat = metricStat
            self.period = period
            self.returnData = returnData
        }
    }

}

extension CloudWatchClientTypes.MetricDataResult: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case label = "Label"
        case messages = "Messages"
        case statusCode = "StatusCode"
        case timestamps = "Timestamps"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let id = id {
            try container.encode(id, forKey: ClientRuntime.Key("Id"))
        }
        if let label = label {
            try container.encode(label, forKey: ClientRuntime.Key("Label"))
        }
        if let messages = messages {
            if !messages.isEmpty {
                var messagesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Messages"))
                for (index0, messagedata0) in messages.enumerated() {
                    try messagesContainer.encode(messagedata0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var messagesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Messages"))
                try messagesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let statusCode = statusCode {
            try container.encode(statusCode, forKey: ClientRuntime.Key("StatusCode"))
        }
        if let timestamps = timestamps {
            if !timestamps.isEmpty {
                var timestampsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Timestamps"))
                for (index0, timestamp0) in timestamps.enumerated() {
                    try timestampsContainer.encodeTimestamp(timestamp0, format: .dateTime, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var timestampsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Timestamps"))
                try timestampsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let values = values {
            if !values.isEmpty {
                var valuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Values"))
                for (index0, datapointvalue0) in values.enumerated() {
                    try valuesContainer.encode(datapointvalue0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var valuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Values"))
                try valuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let labelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .label)
        label = labelDecoded
        if containerValues.contains(.timestamps) {
            struct KeyVal0{struct member{}}
            let timestampsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .timestamps)
            if let timestampsWrappedContainer = timestampsWrappedContainer {
                let timestampsContainer = try timestampsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var timestampsBuffer:[ClientRuntime.Date]? = nil
                if let timestampsContainer = timestampsContainer {
                    timestampsBuffer = [ClientRuntime.Date]()
                    for timestampContainer0 in timestampsContainer {
                        try timestampsBuffer?.append(timestampsWrappedContainer.timestampStringAsDate(timestampContainer0, format: .dateTime, forKey: .member))
                    }
                }
                timestamps = timestampsBuffer
            } else {
                timestamps = []
            }
        } else {
            timestamps = nil
        }
        if containerValues.contains(.values) {
            struct KeyVal0{struct member{}}
            let valuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .values)
            if let valuesWrappedContainer = valuesWrappedContainer {
                let valuesContainer = try valuesWrappedContainer.decodeIfPresent([Swift.Double].self, forKey: .member)
                var valuesBuffer:[Swift.Double]? = nil
                if let valuesContainer = valuesContainer {
                    valuesBuffer = [Swift.Double]()
                    for doubleContainer0 in valuesContainer {
                        valuesBuffer?.append(doubleContainer0)
                    }
                }
                values = valuesBuffer
            } else {
                values = []
            }
        } else {
            values = nil
        }
        let statusCodeDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.StatusCode.self, forKey: .statusCode)
        statusCode = statusCodeDecoded
        if containerValues.contains(.messages) {
            struct KeyVal0{struct member{}}
            let messagesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .messages)
            if let messagesWrappedContainer = messagesWrappedContainer {
                let messagesContainer = try messagesWrappedContainer.decodeIfPresent([CloudWatchClientTypes.MessageData].self, forKey: .member)
                var messagesBuffer:[CloudWatchClientTypes.MessageData]? = nil
                if let messagesContainer = messagesContainer {
                    messagesBuffer = [CloudWatchClientTypes.MessageData]()
                    for structureContainer0 in messagesContainer {
                        messagesBuffer?.append(structureContainer0)
                    }
                }
                messages = messagesBuffer
            } else {
                messages = []
            }
        } else {
            messages = nil
        }
    }
}

extension CloudWatchClientTypes {
    /// A GetMetricData call returns an array of MetricDataResult structures. Each of these structures includes the data points for that metric, along with the timestamps of those data points and other identifying information.
    public struct MetricDataResult: Swift.Equatable {
        /// The short name you specified to represent this metric.
        public var id: Swift.String?
        /// The human-readable label associated with the data.
        public var label: Swift.String?
        /// A list of messages with additional information about the data returned.
        public var messages: [CloudWatchClientTypes.MessageData]?
        /// The status of the returned data. Complete indicates that all data points in the requested time range were returned. PartialData means that an incomplete set of data points were returned. You can use the NextToken value that was returned and repeat your request to get more data points. NextToken is not returned if you are performing a math expression. InternalError indicates that an error occurred. Retry your request using NextToken, if present.
        public var statusCode: CloudWatchClientTypes.StatusCode?
        /// The timestamps for the data points, formatted in Unix timestamp format. The number of timestamps always matches the number of values and the value for Timestamps[x] is Values[x].
        public var timestamps: [ClientRuntime.Date]?
        /// The data points for the metric corresponding to Timestamps. The number of values always matches the number of timestamps and the timestamp for Values[x] is Timestamps[x].
        public var values: [Swift.Double]?

        public init (
            id: Swift.String? = nil,
            label: Swift.String? = nil,
            messages: [CloudWatchClientTypes.MessageData]? = nil,
            statusCode: CloudWatchClientTypes.StatusCode? = nil,
            timestamps: [ClientRuntime.Date]? = nil,
            values: [Swift.Double]? = nil
        )
        {
            self.id = id
            self.label = label
            self.messages = messages
            self.statusCode = statusCode
            self.timestamps = timestamps
            self.values = values
        }
    }

}

extension CloudWatchClientTypes.MetricDatum: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case counts = "Counts"
        case dimensions = "Dimensions"
        case metricName = "MetricName"
        case statisticValues = "StatisticValues"
        case storageResolution = "StorageResolution"
        case timestamp = "Timestamp"
        case unit = "Unit"
        case value = "Value"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let counts = counts {
            if !counts.isEmpty {
                var countsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Counts"))
                for (index0, datapointvalue0) in counts.enumerated() {
                    try countsContainer.encode(datapointvalue0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var countsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Counts"))
                try countsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let dimensions = dimensions {
            if !dimensions.isEmpty {
                var dimensionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Dimensions"))
                for (index0, dimension0) in dimensions.enumerated() {
                    try dimensionsContainer.encode(dimension0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var dimensionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Dimensions"))
                try dimensionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let metricName = metricName {
            try container.encode(metricName, forKey: ClientRuntime.Key("MetricName"))
        }
        if let statisticValues = statisticValues {
            try container.encode(statisticValues, forKey: ClientRuntime.Key("StatisticValues"))
        }
        if let storageResolution = storageResolution {
            try container.encode(storageResolution, forKey: ClientRuntime.Key("StorageResolution"))
        }
        if let timestamp = timestamp {
            try container.encodeTimestamp(timestamp, format: .dateTime, forKey: ClientRuntime.Key("timestamp"))
        }
        if let unit = unit {
            try container.encode(unit, forKey: ClientRuntime.Key("Unit"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
        if let values = values {
            if !values.isEmpty {
                var valuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Values"))
                for (index0, datapointvalue0) in values.enumerated() {
                    try valuesContainer.encode(datapointvalue0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var valuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Values"))
                try valuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        if containerValues.contains(.dimensions) {
            struct KeyVal0{struct member{}}
            let dimensionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dimensions)
            if let dimensionsWrappedContainer = dimensionsWrappedContainer {
                let dimensionsContainer = try dimensionsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.Dimension].self, forKey: .member)
                var dimensionsBuffer:[CloudWatchClientTypes.Dimension]? = nil
                if let dimensionsContainer = dimensionsContainer {
                    dimensionsBuffer = [CloudWatchClientTypes.Dimension]()
                    for structureContainer0 in dimensionsContainer {
                        dimensionsBuffer?.append(structureContainer0)
                    }
                }
                dimensions = dimensionsBuffer
            } else {
                dimensions = []
            }
        } else {
            dimensions = nil
        }
        let timestampDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .timestamp)
        timestamp = timestampDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .value)
        value = valueDecoded
        let statisticValuesDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.StatisticSet.self, forKey: .statisticValues)
        statisticValues = statisticValuesDecoded
        if containerValues.contains(.values) {
            struct KeyVal0{struct member{}}
            let valuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .values)
            if let valuesWrappedContainer = valuesWrappedContainer {
                let valuesContainer = try valuesWrappedContainer.decodeIfPresent([Swift.Double].self, forKey: .member)
                var valuesBuffer:[Swift.Double]? = nil
                if let valuesContainer = valuesContainer {
                    valuesBuffer = [Swift.Double]()
                    for doubleContainer0 in valuesContainer {
                        valuesBuffer?.append(doubleContainer0)
                    }
                }
                values = valuesBuffer
            } else {
                values = []
            }
        } else {
            values = nil
        }
        if containerValues.contains(.counts) {
            struct KeyVal0{struct member{}}
            let countsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .counts)
            if let countsWrappedContainer = countsWrappedContainer {
                let countsContainer = try countsWrappedContainer.decodeIfPresent([Swift.Double].self, forKey: .member)
                var countsBuffer:[Swift.Double]? = nil
                if let countsContainer = countsContainer {
                    countsBuffer = [Swift.Double]()
                    for doubleContainer0 in countsContainer {
                        countsBuffer?.append(doubleContainer0)
                    }
                }
                counts = countsBuffer
            } else {
                counts = []
            }
        } else {
            counts = nil
        }
        let unitDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.StandardUnit.self, forKey: .unit)
        unit = unitDecoded
        let storageResolutionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .storageResolution)
        storageResolution = storageResolutionDecoded
    }
}

extension CloudWatchClientTypes {
    /// Encapsulates the information sent to either create a metric or add new values to be aggregated into an existing metric.
    public struct MetricDatum: Swift.Equatable {
        /// Array of numbers that is used along with the Values array. Each number in the Count array is the number of times the corresponding value in the Values array occurred during the period. If you omit the Counts array, the default of 1 is used as the value for each count. If you include a Counts array, it must include the same amount of values as the Values array.
        public var counts: [Swift.Double]?
        /// The dimensions associated with the metric.
        public var dimensions: [CloudWatchClientTypes.Dimension]?
        /// The name of the metric.
        /// This member is required.
        public var metricName: Swift.String?
        /// The statistical values for the metric.
        public var statisticValues: CloudWatchClientTypes.StatisticSet?
        /// Valid values are 1 and 60. Setting this to 1 specifies this metric as a high-resolution metric, so that CloudWatch stores the metric with sub-minute resolution down to one second. Setting this to 60 specifies this metric as a regular-resolution metric, which CloudWatch stores at 1-minute resolution. Currently, high resolution is available only for custom metrics. For more information about high-resolution metrics, see [High-Resolution Metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html#high-resolution-metrics) in the Amazon CloudWatch User Guide. This field is optional, if you do not specify it the default of 60 is used.
        public var storageResolution: Swift.Int?
        /// The time the metric data was received, expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC.
        public var timestamp: ClientRuntime.Date?
        /// When you are using a Put operation, this defines what unit you want to use when storing the metric. In a Get operation, this displays the unit that is used for the metric.
        public var unit: CloudWatchClientTypes.StandardUnit?
        /// The value for the metric. Although the parameter accepts numbers of type Double, CloudWatch rejects values that are either too small or too large. Values must be in the range of -2^360 to 2^360. In addition, special values (for example, NaN, +Infinity, -Infinity) are not supported.
        public var value: Swift.Double?
        /// Array of numbers representing the values for the metric during the period. Each unique value is listed just once in this array, and the corresponding number in the Counts array specifies the number of times that value occurred during the period. You can include up to 150 unique values in each PutMetricData action that specifies a Values array. Although the Values array accepts numbers of type Double, CloudWatch rejects values that are either too small or too large. Values must be in the range of -2^360 to 2^360. In addition, special values (for example, NaN, +Infinity, -Infinity) are not supported.
        public var values: [Swift.Double]?

        public init (
            counts: [Swift.Double]? = nil,
            dimensions: [CloudWatchClientTypes.Dimension]? = nil,
            metricName: Swift.String? = nil,
            statisticValues: CloudWatchClientTypes.StatisticSet? = nil,
            storageResolution: Swift.Int? = nil,
            timestamp: ClientRuntime.Date? = nil,
            unit: CloudWatchClientTypes.StandardUnit? = nil,
            value: Swift.Double? = nil,
            values: [Swift.Double]? = nil
        )
        {
            self.counts = counts
            self.dimensions = dimensions
            self.metricName = metricName
            self.statisticValues = statisticValues
            self.storageResolution = storageResolution
            self.timestamp = timestamp
            self.unit = unit
            self.value = value
            self.values = values
        }
    }

}

extension CloudWatchClientTypes.MetricMathAnomalyDetector: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricDataQueries = "MetricDataQueries"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let metricDataQueries = metricDataQueries {
            if !metricDataQueries.isEmpty {
                var metricDataQueriesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MetricDataQueries"))
                for (index0, metricdataquery0) in metricDataQueries.enumerated() {
                    try metricDataQueriesContainer.encode(metricdataquery0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var metricDataQueriesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MetricDataQueries"))
                try metricDataQueriesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.metricDataQueries) {
            struct KeyVal0{struct member{}}
            let metricDataQueriesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .metricDataQueries)
            if let metricDataQueriesWrappedContainer = metricDataQueriesWrappedContainer {
                let metricDataQueriesContainer = try metricDataQueriesWrappedContainer.decodeIfPresent([CloudWatchClientTypes.MetricDataQuery].self, forKey: .member)
                var metricDataQueriesBuffer:[CloudWatchClientTypes.MetricDataQuery]? = nil
                if let metricDataQueriesContainer = metricDataQueriesContainer {
                    metricDataQueriesBuffer = [CloudWatchClientTypes.MetricDataQuery]()
                    for structureContainer0 in metricDataQueriesContainer {
                        metricDataQueriesBuffer?.append(structureContainer0)
                    }
                }
                metricDataQueries = metricDataQueriesBuffer
            } else {
                metricDataQueries = []
            }
        } else {
            metricDataQueries = nil
        }
    }
}

extension CloudWatchClientTypes {
    /// Indicates the CloudWatch math expression that provides the time series the anomaly detector uses as input. The designated math expression must return a single time series.
    public struct MetricMathAnomalyDetector: Swift.Equatable {
        /// An array of metric data query structures that enables you to create an anomaly detector based on the result of a metric math expression. Each item in MetricDataQueries gets a metric or performs a math expression. One item in MetricDataQueries is the expression that provides the time series that the anomaly detector uses as input. Designate the expression by setting ReturnData to true for this object in the array. For all other expressions and metrics, set ReturnData to false. The designated expression must return a single time series.
        public var metricDataQueries: [CloudWatchClientTypes.MetricDataQuery]?

        public init (
            metricDataQueries: [CloudWatchClientTypes.MetricDataQuery]? = nil
        )
        {
            self.metricDataQueries = metricDataQueries
        }
    }

}

extension CloudWatchClientTypes.MetricStat: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metric = "Metric"
        case period = "Period"
        case stat = "Stat"
        case unit = "Unit"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let metric = metric {
            try container.encode(metric, forKey: ClientRuntime.Key("Metric"))
        }
        if let period = period {
            try container.encode(period, forKey: ClientRuntime.Key("Period"))
        }
        if let stat = stat {
            try container.encode(stat, forKey: ClientRuntime.Key("Stat"))
        }
        if let unit = unit {
            try container.encode(unit, forKey: ClientRuntime.Key("Unit"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.Metric.self, forKey: .metric)
        metric = metricDecoded
        let periodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .period)
        period = periodDecoded
        let statDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stat)
        stat = statDecoded
        let unitDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.StandardUnit.self, forKey: .unit)
        unit = unitDecoded
    }
}

extension CloudWatchClientTypes {
    /// This structure defines the metric to be returned, along with the statistics, period, and units.
    public struct MetricStat: Swift.Equatable {
        /// The metric to return, including the metric name, namespace, and dimensions.
        /// This member is required.
        public var metric: CloudWatchClientTypes.Metric?
        /// The granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics stored by a PutMetricData call that includes a StorageResolution of 1 second. If the StartTime parameter specifies a time stamp that is greater than 3 hours ago, you must specify the period as follows or no data points in that time range is returned:
        ///
        /// * Start time between 3 hours and 15 days ago - Use a multiple of 60 seconds (1 minute).
        ///
        /// * Start time between 15 and 63 days ago - Use a multiple of 300 seconds (5 minutes).
        ///
        /// * Start time greater than 63 days ago - Use a multiple of 3600 seconds (1 hour).
        /// This member is required.
        public var period: Swift.Int?
        /// The statistic to return. It can include any CloudWatch statistic or extended statistic.
        /// This member is required.
        public var stat: Swift.String?
        /// When you are using a Put operation, this defines what unit you want to use when storing the metric. In a Get operation, if you omit Unit then all data that was collected with any unit is returned, along with the corresponding units that were specified when the data was reported to CloudWatch. If you specify a unit, the operation returns only data that was collected with that unit specified. If you specify a unit that does not match the data collected, the results of the operation are null. CloudWatch does not perform unit conversions.
        public var unit: CloudWatchClientTypes.StandardUnit?

        public init (
            metric: CloudWatchClientTypes.Metric? = nil,
            period: Swift.Int? = nil,
            stat: Swift.String? = nil,
            unit: CloudWatchClientTypes.StandardUnit? = nil
        )
        {
            self.metric = metric
            self.period = period
            self.stat = stat
            self.unit = unit
        }
    }

}

extension CloudWatchClientTypes.MetricStreamEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case creationDate = "CreationDate"
        case firehoseArn = "FirehoseArn"
        case lastUpdateDate = "LastUpdateDate"
        case name = "Name"
        case outputFormat = "OutputFormat"
        case state = "State"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
        if let creationDate = creationDate {
            try container.encodeTimestamp(creationDate, format: .dateTime, forKey: ClientRuntime.Key("creationDate"))
        }
        if let firehoseArn = firehoseArn {
            try container.encode(firehoseArn, forKey: ClientRuntime.Key("FirehoseArn"))
        }
        if let lastUpdateDate = lastUpdateDate {
            try container.encodeTimestamp(lastUpdateDate, format: .dateTime, forKey: ClientRuntime.Key("lastUpdateDate"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let outputFormat = outputFormat {
            try container.encode(outputFormat, forKey: ClientRuntime.Key("OutputFormat"))
        }
        if let state = state {
            try container.encode(state, forKey: ClientRuntime.Key("State"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let creationDateDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .creationDate)
        creationDate = creationDateDecoded
        let lastUpdateDateDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .lastUpdateDate)
        lastUpdateDate = lastUpdateDateDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let firehoseArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firehoseArn)
        firehoseArn = firehoseArnDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .state)
        state = stateDecoded
        let outputFormatDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.MetricStreamOutputFormat.self, forKey: .outputFormat)
        outputFormat = outputFormatDecoded
    }
}

extension CloudWatchClientTypes {
    /// This structure contains the configuration information about one metric stream.
    public struct MetricStreamEntry: Swift.Equatable {
        /// The ARN of the metric stream.
        public var arn: Swift.String?
        /// The date that the metric stream was originally created.
        public var creationDate: ClientRuntime.Date?
        /// The ARN of the Kinesis Firehose devlivery stream that is used for this metric stream.
        public var firehoseArn: Swift.String?
        /// The date that the configuration of this metric stream was most recently updated.
        public var lastUpdateDate: ClientRuntime.Date?
        /// The name of the metric stream.
        public var name: Swift.String?
        /// The output format of this metric stream. Valid values are json and opentelemetry0.7.
        public var outputFormat: CloudWatchClientTypes.MetricStreamOutputFormat?
        /// The current state of this stream. Valid values are running and stopped.
        public var state: Swift.String?

        public init (
            arn: Swift.String? = nil,
            creationDate: ClientRuntime.Date? = nil,
            firehoseArn: Swift.String? = nil,
            lastUpdateDate: ClientRuntime.Date? = nil,
            name: Swift.String? = nil,
            outputFormat: CloudWatchClientTypes.MetricStreamOutputFormat? = nil,
            state: Swift.String? = nil
        )
        {
            self.arn = arn
            self.creationDate = creationDate
            self.firehoseArn = firehoseArn
            self.lastUpdateDate = lastUpdateDate
            self.name = name
            self.outputFormat = outputFormat
            self.state = state
        }
    }

}

extension CloudWatchClientTypes.MetricStreamFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case namespace = "Namespace"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let namespace = namespace {
            try container.encode(namespace, forKey: ClientRuntime.Key("Namespace"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
    }
}

extension CloudWatchClientTypes {
    /// This structure contains the name of one of the metric namespaces that is listed in a filter of a metric stream.
    public struct MetricStreamFilter: Swift.Equatable {
        /// The name of the metric namespace in the filter.
        public var namespace: Swift.String?

        public init (
            namespace: Swift.String? = nil
        )
        {
            self.namespace = namespace
        }
    }

}

extension CloudWatchClientTypes {
    public enum MetricStreamOutputFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case json
        case openTelemetry07
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricStreamOutputFormat] {
            return [
                .json,
                .openTelemetry07,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .json: return "json"
            case .openTelemetry07: return "opentelemetry0.7"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MetricStreamOutputFormat(rawValue: rawValue) ?? MetricStreamOutputFormat.sdkUnknown(rawValue)
        }
    }
}

extension CloudWatchClientTypes.MetricStreamStatisticsConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalStatistics = "AdditionalStatistics"
        case includeMetrics = "IncludeMetrics"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let additionalStatistics = additionalStatistics {
            if !additionalStatistics.isEmpty {
                var additionalStatisticsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AdditionalStatistics"))
                for (index0, metricstreamstatistic0) in additionalStatistics.enumerated() {
                    try additionalStatisticsContainer.encode(metricstreamstatistic0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var additionalStatisticsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AdditionalStatistics"))
                try additionalStatisticsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let includeMetrics = includeMetrics {
            if !includeMetrics.isEmpty {
                var includeMetricsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("IncludeMetrics"))
                for (index0, metricstreamstatisticsmetric0) in includeMetrics.enumerated() {
                    try includeMetricsContainer.encode(metricstreamstatisticsmetric0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var includeMetricsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("IncludeMetrics"))
                try includeMetricsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.includeMetrics) {
            struct KeyVal0{struct member{}}
            let includeMetricsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .includeMetrics)
            if let includeMetricsWrappedContainer = includeMetricsWrappedContainer {
                let includeMetricsContainer = try includeMetricsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.MetricStreamStatisticsMetric].self, forKey: .member)
                var includeMetricsBuffer:[CloudWatchClientTypes.MetricStreamStatisticsMetric]? = nil
                if let includeMetricsContainer = includeMetricsContainer {
                    includeMetricsBuffer = [CloudWatchClientTypes.MetricStreamStatisticsMetric]()
                    for structureContainer0 in includeMetricsContainer {
                        includeMetricsBuffer?.append(structureContainer0)
                    }
                }
                includeMetrics = includeMetricsBuffer
            } else {
                includeMetrics = []
            }
        } else {
            includeMetrics = nil
        }
        if containerValues.contains(.additionalStatistics) {
            struct KeyVal0{struct member{}}
            let additionalStatisticsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .additionalStatistics)
            if let additionalStatisticsWrappedContainer = additionalStatisticsWrappedContainer {
                let additionalStatisticsContainer = try additionalStatisticsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var additionalStatisticsBuffer:[Swift.String]? = nil
                if let additionalStatisticsContainer = additionalStatisticsContainer {
                    additionalStatisticsBuffer = [Swift.String]()
                    for stringContainer0 in additionalStatisticsContainer {
                        additionalStatisticsBuffer?.append(stringContainer0)
                    }
                }
                additionalStatistics = additionalStatisticsBuffer
            } else {
                additionalStatistics = []
            }
        } else {
            additionalStatistics = nil
        }
    }
}

extension CloudWatchClientTypes {
    /// By default, a metric stream always sends the MAX, MIN, SUM, and SAMPLECOUNT statistics for each metric that is streamed. This structure contains information for one metric that includes additional statistics in the stream. For more information about statistics, see CloudWatch, listed in [ CloudWatch statistics definitions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html.html).
    public struct MetricStreamStatisticsConfiguration: Swift.Equatable {
        /// The list of additional statistics that are to be streamed for the metrics listed in the IncludeMetrics array in this structure. This list can include as many as 20 statistics. If the OutputFormat for the stream is opentelemetry0.7, the only valid values are p??  percentile statistics such as p90, p99 and so on. If the OutputFormat for the stream is json, the valid values include the abbreviations for all of the statistics listed in [ CloudWatch statistics definitions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html.html). For example, this includes tm98, wm90, PR(:300), and so on.
        /// This member is required.
        public var additionalStatistics: [Swift.String]?
        /// An array of metric name and namespace pairs that stream the additional statistics listed in the value of the AdditionalStatistics parameter. There can be as many as 100 pairs in the array. All metrics that match the combination of metric name and namespace will be streamed with the additional statistics, no matter their dimensions.
        /// This member is required.
        public var includeMetrics: [CloudWatchClientTypes.MetricStreamStatisticsMetric]?

        public init (
            additionalStatistics: [Swift.String]? = nil,
            includeMetrics: [CloudWatchClientTypes.MetricStreamStatisticsMetric]? = nil
        )
        {
            self.additionalStatistics = additionalStatistics
            self.includeMetrics = includeMetrics
        }
    }

}

extension CloudWatchClientTypes.MetricStreamStatisticsMetric: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricName = "MetricName"
        case namespace = "Namespace"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let metricName = metricName {
            try container.encode(metricName, forKey: ClientRuntime.Key("MetricName"))
        }
        if let namespace = namespace {
            try container.encode(namespace, forKey: ClientRuntime.Key("Namespace"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
    }
}

extension CloudWatchClientTypes {
    /// This object contains the information for one metric that is to be streamed with additional statistics.
    public struct MetricStreamStatisticsMetric: Swift.Equatable {
        /// The name of the metric.
        /// This member is required.
        public var metricName: Swift.String?
        /// The namespace of the metric.
        /// This member is required.
        public var namespace: Swift.String?

        public init (
            metricName: Swift.String? = nil,
            namespace: Swift.String? = nil
        )
        {
            self.metricName = metricName
            self.namespace = namespace
        }
    }

}

extension MissingRequiredParameterException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<MissingRequiredParameterExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An input parameter that is required is missing.
public struct MissingRequiredParameterException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    ///
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct MissingRequiredParameterExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension MissingRequiredParameterExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudWatchClientTypes.PartialFailure: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exceptionType = "ExceptionType"
        case failureCode = "FailureCode"
        case failureDescription = "FailureDescription"
        case failureResource = "FailureResource"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let exceptionType = exceptionType {
            try container.encode(exceptionType, forKey: ClientRuntime.Key("ExceptionType"))
        }
        if let failureCode = failureCode {
            try container.encode(failureCode, forKey: ClientRuntime.Key("FailureCode"))
        }
        if let failureDescription = failureDescription {
            try container.encode(failureDescription, forKey: ClientRuntime.Key("FailureDescription"))
        }
        if let failureResource = failureResource {
            try container.encode(failureResource, forKey: ClientRuntime.Key("FailureResource"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let failureResourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureResource)
        failureResource = failureResourceDecoded
        let exceptionTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .exceptionType)
        exceptionType = exceptionTypeDecoded
        let failureCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureCode)
        failureCode = failureCodeDecoded
        let failureDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureDescription)
        failureDescription = failureDescriptionDecoded
    }
}

extension CloudWatchClientTypes {
    /// This array is empty if the API operation was successful for all the rules specified in the request. If the operation could not process one of the rules, the following data is returned for each of those rules.
    public struct PartialFailure: Swift.Equatable {
        /// The type of error.
        public var exceptionType: Swift.String?
        /// The code of the error.
        public var failureCode: Swift.String?
        /// A description of the error.
        public var failureDescription: Swift.String?
        /// The specified rule that could not be deleted.
        public var failureResource: Swift.String?

        public init (
            exceptionType: Swift.String? = nil,
            failureCode: Swift.String? = nil,
            failureDescription: Swift.String? = nil,
            failureResource: Swift.String? = nil
        )
        {
            self.exceptionType = exceptionType
            self.failureCode = failureCode
            self.failureDescription = failureDescription
            self.failureResource = failureResource
        }
    }

}

extension PutAnomalyDetectorInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configuration = configuration {
            try container.encode(configuration, forKey: ClientRuntime.Key("Configuration"))
        }
        if let dimensions = dimensions {
            if !dimensions.isEmpty {
                var dimensionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Dimensions"))
                for (index0, dimension0) in dimensions.enumerated() {
                    try dimensionsContainer.encode(dimension0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var dimensionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Dimensions"))
                try dimensionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let metricMathAnomalyDetector = metricMathAnomalyDetector {
            try container.encode(metricMathAnomalyDetector, forKey: ClientRuntime.Key("MetricMathAnomalyDetector"))
        }
        if let metricName = metricName {
            try container.encode(metricName, forKey: ClientRuntime.Key("MetricName"))
        }
        if let namespace = namespace {
            try container.encode(namespace, forKey: ClientRuntime.Key("Namespace"))
        }
        if let singleMetricAnomalyDetector = singleMetricAnomalyDetector {
            try container.encode(singleMetricAnomalyDetector, forKey: ClientRuntime.Key("SingleMetricAnomalyDetector"))
        }
        if let stat = stat {
            try container.encode(stat, forKey: ClientRuntime.Key("Stat"))
        }
        try container.encode("PutAnomalyDetector", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension PutAnomalyDetectorInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutAnomalyDetectorInput: Swift.Equatable {
    /// The configuration specifies details about how the anomaly detection model is to be trained, including time ranges to exclude when training and updating the model. You can specify as many as 10 time ranges. The configuration can also include the time zone to use for the metric.
    public var configuration: CloudWatchClientTypes.AnomalyDetectorConfiguration?
    /// The metric dimensions to create the anomaly detection model for.
    @available(*, deprecated, message: "Use SingleMetricAnomalyDetector.")
    public var dimensions: [CloudWatchClientTypes.Dimension]?
    /// The metric math anomaly detector to be created. When using MetricMathAnomalyDetector, you cannot include the following parameters in the same operation:
    ///
    /// * Dimensions
    ///
    /// * MetricName
    ///
    /// * Namespace
    ///
    /// * Stat
    ///
    /// * the SingleMetricAnomalyDetector parameters of PutAnomalyDetectorInput
    ///
    ///
    /// Instead, specify the metric math anomaly detector attributes as part of the property MetricMathAnomalyDetector.
    public var metricMathAnomalyDetector: CloudWatchClientTypes.MetricMathAnomalyDetector?
    /// The name of the metric to create the anomaly detection model for.
    @available(*, deprecated, message: "Use SingleMetricAnomalyDetector.")
    public var metricName: Swift.String?
    /// The namespace of the metric to create the anomaly detection model for.
    @available(*, deprecated, message: "Use SingleMetricAnomalyDetector.")
    public var namespace: Swift.String?
    /// A single metric anomaly detector to be created. When using SingleMetricAnomalyDetector, you cannot include the following parameters in the same operation:
    ///
    /// * Dimensions
    ///
    /// * MetricName
    ///
    /// * Namespace
    ///
    /// * Stat
    ///
    /// * the MetricMatchAnomalyDetector parameters of PutAnomalyDetectorInput
    ///
    ///
    /// Instead, specify the single metric anomaly detector attributes as part of the property SingleMetricAnomalyDetector.
    public var singleMetricAnomalyDetector: CloudWatchClientTypes.SingleMetricAnomalyDetector?
    /// The statistic to use for the metric and the anomaly detection model.
    @available(*, deprecated, message: "Use SingleMetricAnomalyDetector.")
    public var stat: Swift.String?

    public init (
        configuration: CloudWatchClientTypes.AnomalyDetectorConfiguration? = nil,
        dimensions: [CloudWatchClientTypes.Dimension]? = nil,
        metricMathAnomalyDetector: CloudWatchClientTypes.MetricMathAnomalyDetector? = nil,
        metricName: Swift.String? = nil,
        namespace: Swift.String? = nil,
        singleMetricAnomalyDetector: CloudWatchClientTypes.SingleMetricAnomalyDetector? = nil,
        stat: Swift.String? = nil
    )
    {
        self.configuration = configuration
        self.dimensions = dimensions
        self.metricMathAnomalyDetector = metricMathAnomalyDetector
        self.metricName = metricName
        self.namespace = namespace
        self.singleMetricAnomalyDetector = singleMetricAnomalyDetector
        self.stat = stat
    }
}

struct PutAnomalyDetectorInputBody: Swift.Equatable {
    let namespace: Swift.String?
    let metricName: Swift.String?
    let dimensions: [CloudWatchClientTypes.Dimension]?
    let stat: Swift.String?
    let configuration: CloudWatchClientTypes.AnomalyDetectorConfiguration?
    let singleMetricAnomalyDetector: CloudWatchClientTypes.SingleMetricAnomalyDetector?
    let metricMathAnomalyDetector: CloudWatchClientTypes.MetricMathAnomalyDetector?
}

extension PutAnomalyDetectorInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configuration = "Configuration"
        case dimensions = "Dimensions"
        case metricMathAnomalyDetector = "MetricMathAnomalyDetector"
        case metricName = "MetricName"
        case namespace = "Namespace"
        case singleMetricAnomalyDetector = "SingleMetricAnomalyDetector"
        case stat = "Stat"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        if containerValues.contains(.dimensions) {
            struct KeyVal0{struct member{}}
            let dimensionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dimensions)
            if let dimensionsWrappedContainer = dimensionsWrappedContainer {
                let dimensionsContainer = try dimensionsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.Dimension].self, forKey: .member)
                var dimensionsBuffer:[CloudWatchClientTypes.Dimension]? = nil
                if let dimensionsContainer = dimensionsContainer {
                    dimensionsBuffer = [CloudWatchClientTypes.Dimension]()
                    for structureContainer0 in dimensionsContainer {
                        dimensionsBuffer?.append(structureContainer0)
                    }
                }
                dimensions = dimensionsBuffer
            } else {
                dimensions = []
            }
        } else {
            dimensions = nil
        }
        let statDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stat)
        stat = statDecoded
        let configurationDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.AnomalyDetectorConfiguration.self, forKey: .configuration)
        configuration = configurationDecoded
        let singleMetricAnomalyDetectorDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.SingleMetricAnomalyDetector.self, forKey: .singleMetricAnomalyDetector)
        singleMetricAnomalyDetector = singleMetricAnomalyDetectorDecoded
        let metricMathAnomalyDetectorDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.MetricMathAnomalyDetector.self, forKey: .metricMathAnomalyDetector)
        metricMathAnomalyDetector = metricMathAnomalyDetectorDecoded
    }
}

extension PutAnomalyDetectorOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutAnomalyDetectorOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceError" : self = .internalServiceFault(try InternalServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingParameter" : self = .missingRequiredParameterException(try MissingRequiredParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutAnomalyDetectorOutputError: Swift.Error, Swift.Equatable {
    case internalServiceFault(InternalServiceFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case limitExceededException(LimitExceededException)
    case missingRequiredParameterException(MissingRequiredParameterException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutAnomalyDetectorOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutAnomalyDetectorOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutCompositeAlarmInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let actionsEnabled = actionsEnabled {
            try container.encode(actionsEnabled, forKey: ClientRuntime.Key("ActionsEnabled"))
        }
        if let actionsSuppressor = actionsSuppressor {
            try container.encode(actionsSuppressor, forKey: ClientRuntime.Key("ActionsSuppressor"))
        }
        if let actionsSuppressorExtensionPeriod = actionsSuppressorExtensionPeriod {
            try container.encode(actionsSuppressorExtensionPeriod, forKey: ClientRuntime.Key("ActionsSuppressorExtensionPeriod"))
        }
        if let actionsSuppressorWaitPeriod = actionsSuppressorWaitPeriod {
            try container.encode(actionsSuppressorWaitPeriod, forKey: ClientRuntime.Key("ActionsSuppressorWaitPeriod"))
        }
        if let alarmActions = alarmActions {
            if !alarmActions.isEmpty {
                var alarmActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AlarmActions"))
                for (index0, resourcename0) in alarmActions.enumerated() {
                    try alarmActionsContainer.encode(resourcename0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var alarmActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AlarmActions"))
                try alarmActionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let alarmDescription = alarmDescription {
            try container.encode(alarmDescription, forKey: ClientRuntime.Key("AlarmDescription"))
        }
        if let alarmName = alarmName {
            try container.encode(alarmName, forKey: ClientRuntime.Key("AlarmName"))
        }
        if let alarmRule = alarmRule {
            try container.encode(alarmRule, forKey: ClientRuntime.Key("AlarmRule"))
        }
        if let insufficientDataActions = insufficientDataActions {
            if !insufficientDataActions.isEmpty {
                var insufficientDataActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InsufficientDataActions"))
                for (index0, resourcename0) in insufficientDataActions.enumerated() {
                    try insufficientDataActionsContainer.encode(resourcename0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var insufficientDataActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InsufficientDataActions"))
                try insufficientDataActionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let okActions = okActions {
            if !okActions.isEmpty {
                var okActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OKActions"))
                for (index0, resourcename0) in okActions.enumerated() {
                    try okActionsContainer.encode(resourcename0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var okActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OKActions"))
                try okActionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("PutCompositeAlarm", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension PutCompositeAlarmInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutCompositeAlarmInput: Swift.Equatable {
    /// Indicates whether actions should be executed during any changes to the alarm state of the composite alarm. The default is TRUE.
    public var actionsEnabled: Swift.Bool?
    /// Actions will be suppressed if the suppressor alarm is in the ALARM state. ActionsSuppressor can be an AlarmName or an Amazon Resource Name (ARN) from an existing alarm.
    public var actionsSuppressor: Swift.String?
    /// The maximum time in seconds that the composite alarm waits after suppressor alarm goes out of the ALARM state. After this time, the composite alarm performs its actions. ExtensionPeriod is required only when ActionsSuppressor is specified.
    public var actionsSuppressorExtensionPeriod: Swift.Int?
    /// The maximum time in seconds that the composite alarm waits for the suppressor alarm to go into the ALARM state. After this time, the composite alarm performs its actions. WaitPeriod is required only when ActionsSuppressor is specified.
    public var actionsSuppressorWaitPeriod: Swift.Int?
    /// The actions to execute when this alarm transitions to the ALARM state from any other state. Each action is specified as an Amazon Resource Name (ARN). Valid Values: arn:aws:sns:region:account-id:sns-topic-name  | arn:aws:ssm:region:account-id:opsitem:severity
    public var alarmActions: [Swift.String]?
    /// The description for the composite alarm.
    public var alarmDescription: Swift.String?
    /// The name for the composite alarm. This name must be unique within the Region.
    /// This member is required.
    public var alarmName: Swift.String?
    /// An expression that specifies which other alarms are to be evaluated to determine this composite alarm's state. For each alarm that you reference, you designate a function that specifies whether that alarm needs to be in ALARM state, OK state, or INSUFFICIENT_DATA state. You can use operators (AND, OR and NOT) to combine multiple functions in a single expression. You can use parenthesis to logically group the functions in your expression. You can use either alarm names or ARNs to reference the other alarms that are to be evaluated. Functions can include the following:
    ///
    /// * ALARM("alarm-name or alarm-ARN") is TRUE if the named alarm is in ALARM state.
    ///
    /// * OK("alarm-name or alarm-ARN") is TRUE if the named alarm is in OK state.
    ///
    /// * INSUFFICIENT_DATA("alarm-name or alarm-ARN") is TRUE if the named alarm is in INSUFFICIENT_DATA state.
    ///
    /// * TRUE always evaluates to TRUE.
    ///
    /// * FALSE always evaluates to FALSE.
    ///
    ///
    /// TRUE and FALSE are useful for testing a complex AlarmRule structure, and for testing your alarm actions. Alarm names specified in AlarmRule can be surrounded with double-quotes ("), but do not have to be. The following are some examples of AlarmRule:
    ///
    /// * ALARM(CPUUtilizationTooHigh) AND ALARM(DiskReadOpsTooHigh) specifies that the composite alarm goes into ALARM state only if both CPUUtilizationTooHigh and DiskReadOpsTooHigh alarms are in ALARM state.
    ///
    /// * ALARM(CPUUtilizationTooHigh) AND NOT ALARM(DeploymentInProgress) specifies that the alarm goes to ALARM state if CPUUtilizationTooHigh is in ALARM state and DeploymentInProgress is not in ALARM state. This example reduces alarm noise during a known deployment window.
    ///
    /// * (ALARM(CPUUtilizationTooHigh) OR ALARM(DiskReadOpsTooHigh)) AND OK(NetworkOutTooHigh) goes into ALARM state if CPUUtilizationTooHigh OR DiskReadOpsTooHigh is in ALARM state, and if NetworkOutTooHigh is in OK state. This provides another example of using a composite alarm to prevent noise. This rule ensures that you are not notified with an alarm action on high CPU or disk usage if a known network problem is also occurring.
    ///
    ///
    /// The AlarmRule can specify as many as 100 "children" alarms. The AlarmRule expression can have as many as 500 elements. Elements are child alarms, TRUE or FALSE statements, and parentheses.
    /// This member is required.
    public var alarmRule: Swift.String?
    /// The actions to execute when this alarm transitions to the INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Name (ARN). Valid Values: arn:aws:sns:region:account-id:sns-topic-name
    public var insufficientDataActions: [Swift.String]?
    /// The actions to execute when this alarm transitions to an OK state from any other state. Each action is specified as an Amazon Resource Name (ARN). Valid Values: arn:aws:sns:region:account-id:sns-topic-name
    public var okActions: [Swift.String]?
    /// A list of key-value pairs to associate with the composite alarm. You can associate as many as 50 tags with an alarm. Tags can help you organize and categorize your resources. You can also use them to scope user permissions, by granting a user permission to access or change only resources with certain tag values.
    public var tags: [CloudWatchClientTypes.Tag]?

    public init (
        actionsEnabled: Swift.Bool? = nil,
        actionsSuppressor: Swift.String? = nil,
        actionsSuppressorExtensionPeriod: Swift.Int? = nil,
        actionsSuppressorWaitPeriod: Swift.Int? = nil,
        alarmActions: [Swift.String]? = nil,
        alarmDescription: Swift.String? = nil,
        alarmName: Swift.String? = nil,
        alarmRule: Swift.String? = nil,
        insufficientDataActions: [Swift.String]? = nil,
        okActions: [Swift.String]? = nil,
        tags: [CloudWatchClientTypes.Tag]? = nil
    )
    {
        self.actionsEnabled = actionsEnabled
        self.actionsSuppressor = actionsSuppressor
        self.actionsSuppressorExtensionPeriod = actionsSuppressorExtensionPeriod
        self.actionsSuppressorWaitPeriod = actionsSuppressorWaitPeriod
        self.alarmActions = alarmActions
        self.alarmDescription = alarmDescription
        self.alarmName = alarmName
        self.alarmRule = alarmRule
        self.insufficientDataActions = insufficientDataActions
        self.okActions = okActions
        self.tags = tags
    }
}

struct PutCompositeAlarmInputBody: Swift.Equatable {
    let actionsEnabled: Swift.Bool?
    let alarmActions: [Swift.String]?
    let alarmDescription: Swift.String?
    let alarmName: Swift.String?
    let alarmRule: Swift.String?
    let insufficientDataActions: [Swift.String]?
    let okActions: [Swift.String]?
    let tags: [CloudWatchClientTypes.Tag]?
    let actionsSuppressor: Swift.String?
    let actionsSuppressorWaitPeriod: Swift.Int?
    let actionsSuppressorExtensionPeriod: Swift.Int?
}

extension PutCompositeAlarmInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionsEnabled = "ActionsEnabled"
        case actionsSuppressor = "ActionsSuppressor"
        case actionsSuppressorExtensionPeriod = "ActionsSuppressorExtensionPeriod"
        case actionsSuppressorWaitPeriod = "ActionsSuppressorWaitPeriod"
        case alarmActions = "AlarmActions"
        case alarmDescription = "AlarmDescription"
        case alarmName = "AlarmName"
        case alarmRule = "AlarmRule"
        case insufficientDataActions = "InsufficientDataActions"
        case okActions = "OKActions"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionsEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .actionsEnabled)
        actionsEnabled = actionsEnabledDecoded
        if containerValues.contains(.alarmActions) {
            struct KeyVal0{struct member{}}
            let alarmActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .alarmActions)
            if let alarmActionsWrappedContainer = alarmActionsWrappedContainer {
                let alarmActionsContainer = try alarmActionsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var alarmActionsBuffer:[Swift.String]? = nil
                if let alarmActionsContainer = alarmActionsContainer {
                    alarmActionsBuffer = [Swift.String]()
                    for stringContainer0 in alarmActionsContainer {
                        alarmActionsBuffer?.append(stringContainer0)
                    }
                }
                alarmActions = alarmActionsBuffer
            } else {
                alarmActions = []
            }
        } else {
            alarmActions = nil
        }
        let alarmDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmDescription)
        alarmDescription = alarmDescriptionDecoded
        let alarmNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmName)
        alarmName = alarmNameDecoded
        let alarmRuleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmRule)
        alarmRule = alarmRuleDecoded
        if containerValues.contains(.insufficientDataActions) {
            struct KeyVal0{struct member{}}
            let insufficientDataActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .insufficientDataActions)
            if let insufficientDataActionsWrappedContainer = insufficientDataActionsWrappedContainer {
                let insufficientDataActionsContainer = try insufficientDataActionsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var insufficientDataActionsBuffer:[Swift.String]? = nil
                if let insufficientDataActionsContainer = insufficientDataActionsContainer {
                    insufficientDataActionsBuffer = [Swift.String]()
                    for stringContainer0 in insufficientDataActionsContainer {
                        insufficientDataActionsBuffer?.append(stringContainer0)
                    }
                }
                insufficientDataActions = insufficientDataActionsBuffer
            } else {
                insufficientDataActions = []
            }
        } else {
            insufficientDataActions = nil
        }
        if containerValues.contains(.okActions) {
            struct KeyVal0{struct member{}}
            let okActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .okActions)
            if let okActionsWrappedContainer = okActionsWrappedContainer {
                let okActionsContainer = try okActionsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var okActionsBuffer:[Swift.String]? = nil
                if let okActionsContainer = okActionsContainer {
                    okActionsBuffer = [Swift.String]()
                    for stringContainer0 in okActionsContainer {
                        okActionsBuffer?.append(stringContainer0)
                    }
                }
                okActions = okActionsBuffer
            } else {
                okActions = []
            }
        } else {
            okActions = nil
        }
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[CloudWatchClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [CloudWatchClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let actionsSuppressorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionsSuppressor)
        actionsSuppressor = actionsSuppressorDecoded
        let actionsSuppressorWaitPeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .actionsSuppressorWaitPeriod)
        actionsSuppressorWaitPeriod = actionsSuppressorWaitPeriodDecoded
        let actionsSuppressorExtensionPeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .actionsSuppressorExtensionPeriod)
        actionsSuppressorExtensionPeriod = actionsSuppressorExtensionPeriodDecoded
    }
}

extension PutCompositeAlarmOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutCompositeAlarmOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LimitExceeded" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutCompositeAlarmOutputError: Swift.Error, Swift.Equatable {
    case limitExceededFault(LimitExceededFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutCompositeAlarmOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutCompositeAlarmOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutDashboardInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dashboardBody = dashboardBody {
            try container.encode(dashboardBody, forKey: ClientRuntime.Key("DashboardBody"))
        }
        if let dashboardName = dashboardName {
            try container.encode(dashboardName, forKey: ClientRuntime.Key("DashboardName"))
        }
        try container.encode("PutDashboard", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension PutDashboardInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutDashboardInput: Swift.Equatable {
    /// The detailed information about the dashboard in JSON format, including the widgets to include and their location on the dashboard. This parameter is required. For more information about the syntax, see [Dashboard Body Structure and Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html).
    /// This member is required.
    public var dashboardBody: Swift.String?
    /// The name of the dashboard. If a dashboard with this name already exists, this call modifies that dashboard, replacing its current contents. Otherwise, a new dashboard is created. The maximum length is 255, and valid characters are A-Z, a-z, 0-9, "-", and "_". This parameter is required.
    /// This member is required.
    public var dashboardName: Swift.String?

    public init (
        dashboardBody: Swift.String? = nil,
        dashboardName: Swift.String? = nil
    )
    {
        self.dashboardBody = dashboardBody
        self.dashboardName = dashboardName
    }
}

struct PutDashboardInputBody: Swift.Equatable {
    let dashboardName: Swift.String?
    let dashboardBody: Swift.String?
}

extension PutDashboardInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dashboardBody = "DashboardBody"
        case dashboardName = "DashboardName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dashboardNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dashboardName)
        dashboardName = dashboardNameDecoded
        let dashboardBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dashboardBody)
        dashboardBody = dashboardBodyDecoded
    }
}

extension PutDashboardOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutDashboardOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterInput" : self = .dashboardInvalidInputError(try DashboardInvalidInputError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceError" : self = .internalServiceFault(try InternalServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutDashboardOutputError: Swift.Error, Swift.Equatable {
    case dashboardInvalidInputError(DashboardInvalidInputError)
    case internalServiceFault(InternalServiceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutDashboardOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PutDashboardOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dashboardValidationMessages = output.dashboardValidationMessages
        } else {
            self.dashboardValidationMessages = nil
        }
    }
}

public struct PutDashboardOutputResponse: Swift.Equatable {
    /// If the input for PutDashboard was correct and the dashboard was successfully created or modified, this result is empty. If this result includes only warning messages, then the input was valid enough for the dashboard to be created or modified, but some elements of the dashboard might not render. If this result includes error messages, the input was not valid and the operation failed.
    public var dashboardValidationMessages: [CloudWatchClientTypes.DashboardValidationMessage]?

    public init (
        dashboardValidationMessages: [CloudWatchClientTypes.DashboardValidationMessage]? = nil
    )
    {
        self.dashboardValidationMessages = dashboardValidationMessages
    }
}

struct PutDashboardOutputResponseBody: Swift.Equatable {
    let dashboardValidationMessages: [CloudWatchClientTypes.DashboardValidationMessage]?
}

extension PutDashboardOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dashboardValidationMessages = "DashboardValidationMessages"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("PutDashboardResult"))
        if containerValues.contains(.dashboardValidationMessages) {
            struct KeyVal0{struct member{}}
            let dashboardValidationMessagesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dashboardValidationMessages)
            if let dashboardValidationMessagesWrappedContainer = dashboardValidationMessagesWrappedContainer {
                let dashboardValidationMessagesContainer = try dashboardValidationMessagesWrappedContainer.decodeIfPresent([CloudWatchClientTypes.DashboardValidationMessage].self, forKey: .member)
                var dashboardValidationMessagesBuffer:[CloudWatchClientTypes.DashboardValidationMessage]? = nil
                if let dashboardValidationMessagesContainer = dashboardValidationMessagesContainer {
                    dashboardValidationMessagesBuffer = [CloudWatchClientTypes.DashboardValidationMessage]()
                    for structureContainer0 in dashboardValidationMessagesContainer {
                        dashboardValidationMessagesBuffer?.append(structureContainer0)
                    }
                }
                dashboardValidationMessages = dashboardValidationMessagesBuffer
            } else {
                dashboardValidationMessages = []
            }
        } else {
            dashboardValidationMessages = nil
        }
    }
}

extension PutInsightRuleInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let ruleDefinition = ruleDefinition {
            try container.encode(ruleDefinition, forKey: ClientRuntime.Key("RuleDefinition"))
        }
        if let ruleName = ruleName {
            try container.encode(ruleName, forKey: ClientRuntime.Key("RuleName"))
        }
        if let ruleState = ruleState {
            try container.encode(ruleState, forKey: ClientRuntime.Key("RuleState"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("PutInsightRule", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension PutInsightRuleInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutInsightRuleInput: Swift.Equatable {
    /// The definition of the rule, as a JSON object. For details on the valid syntax, see [Contributor Insights Rule Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContributorInsights-RuleSyntax.html).
    /// This member is required.
    public var ruleDefinition: Swift.String?
    /// A unique name for the rule.
    /// This member is required.
    public var ruleName: Swift.String?
    /// The state of the rule. Valid values are ENABLED and DISABLED.
    public var ruleState: Swift.String?
    /// A list of key-value pairs to associate with the Contributor Insights rule. You can associate as many as 50 tags with a rule. Tags can help you organize and categorize your resources. You can also use them to scope user permissions, by granting a user permission to access or change only the resources that have certain tag values. To be able to associate tags with a rule, you must have the cloudwatch:TagResource permission in addition to the cloudwatch:PutInsightRule permission. If you are using this operation to update an existing Contributor Insights rule, any tags you specify in this parameter are ignored. To change the tags of an existing rule, use [TagResource](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_TagResource.html).
    public var tags: [CloudWatchClientTypes.Tag]?

    public init (
        ruleDefinition: Swift.String? = nil,
        ruleName: Swift.String? = nil,
        ruleState: Swift.String? = nil,
        tags: [CloudWatchClientTypes.Tag]? = nil
    )
    {
        self.ruleDefinition = ruleDefinition
        self.ruleName = ruleName
        self.ruleState = ruleState
        self.tags = tags
    }
}

struct PutInsightRuleInputBody: Swift.Equatable {
    let ruleName: Swift.String?
    let ruleState: Swift.String?
    let ruleDefinition: Swift.String?
    let tags: [CloudWatchClientTypes.Tag]?
}

extension PutInsightRuleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleDefinition = "RuleDefinition"
        case ruleName = "RuleName"
        case ruleState = "RuleState"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleName)
        ruleName = ruleNameDecoded
        let ruleStateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleState)
        ruleState = ruleStateDecoded
        let ruleDefinitionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleDefinition)
        ruleDefinition = ruleDefinitionDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[CloudWatchClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [CloudWatchClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension PutInsightRuleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutInsightRuleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingParameter" : self = .missingRequiredParameterException(try MissingRequiredParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutInsightRuleOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterValueException(InvalidParameterValueException)
    case limitExceededException(LimitExceededException)
    case missingRequiredParameterException(MissingRequiredParameterException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutInsightRuleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutInsightRuleOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutManagedInsightRulesInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let managedRules = managedRules {
            if !managedRules.isEmpty {
                var managedRulesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ManagedRules"))
                for (index0, managedrule0) in managedRules.enumerated() {
                    try managedRulesContainer.encode(managedrule0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var managedRulesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ManagedRules"))
                try managedRulesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("PutManagedInsightRules", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension PutManagedInsightRulesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutManagedInsightRulesInput: Swift.Equatable {
    /// A list of ManagedRules to enable.
    /// This member is required.
    public var managedRules: [CloudWatchClientTypes.ManagedRule]?

    public init (
        managedRules: [CloudWatchClientTypes.ManagedRule]? = nil
    )
    {
        self.managedRules = managedRules
    }
}

struct PutManagedInsightRulesInputBody: Swift.Equatable {
    let managedRules: [CloudWatchClientTypes.ManagedRule]?
}

extension PutManagedInsightRulesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case managedRules = "ManagedRules"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.managedRules) {
            struct KeyVal0{struct member{}}
            let managedRulesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .managedRules)
            if let managedRulesWrappedContainer = managedRulesWrappedContainer {
                let managedRulesContainer = try managedRulesWrappedContainer.decodeIfPresent([CloudWatchClientTypes.ManagedRule].self, forKey: .member)
                var managedRulesBuffer:[CloudWatchClientTypes.ManagedRule]? = nil
                if let managedRulesContainer = managedRulesContainer {
                    managedRulesBuffer = [CloudWatchClientTypes.ManagedRule]()
                    for structureContainer0 in managedRulesContainer {
                        managedRulesBuffer?.append(structureContainer0)
                    }
                }
                managedRules = managedRulesBuffer
            } else {
                managedRules = []
            }
        } else {
            managedRules = nil
        }
    }
}

extension PutManagedInsightRulesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutManagedInsightRulesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingParameter" : self = .missingRequiredParameterException(try MissingRequiredParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutManagedInsightRulesOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterValueException(InvalidParameterValueException)
    case missingRequiredParameterException(MissingRequiredParameterException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutManagedInsightRulesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PutManagedInsightRulesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.failures = output.failures
        } else {
            self.failures = nil
        }
    }
}

public struct PutManagedInsightRulesOutputResponse: Swift.Equatable {
    /// An array that lists the rules that could not be enabled.
    public var failures: [CloudWatchClientTypes.PartialFailure]?

    public init (
        failures: [CloudWatchClientTypes.PartialFailure]? = nil
    )
    {
        self.failures = failures
    }
}

struct PutManagedInsightRulesOutputResponseBody: Swift.Equatable {
    let failures: [CloudWatchClientTypes.PartialFailure]?
}

extension PutManagedInsightRulesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failures = "Failures"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("PutManagedInsightRulesResult"))
        if containerValues.contains(.failures) {
            struct KeyVal0{struct member{}}
            let failuresWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .failures)
            if let failuresWrappedContainer = failuresWrappedContainer {
                let failuresContainer = try failuresWrappedContainer.decodeIfPresent([CloudWatchClientTypes.PartialFailure].self, forKey: .member)
                var failuresBuffer:[CloudWatchClientTypes.PartialFailure]? = nil
                if let failuresContainer = failuresContainer {
                    failuresBuffer = [CloudWatchClientTypes.PartialFailure]()
                    for structureContainer0 in failuresContainer {
                        failuresBuffer?.append(structureContainer0)
                    }
                }
                failures = failuresBuffer
            } else {
                failures = []
            }
        } else {
            failures = nil
        }
    }
}

extension PutMetricAlarmInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let actionsEnabled = actionsEnabled {
            try container.encode(actionsEnabled, forKey: ClientRuntime.Key("ActionsEnabled"))
        }
        if let alarmActions = alarmActions {
            if !alarmActions.isEmpty {
                var alarmActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AlarmActions"))
                for (index0, resourcename0) in alarmActions.enumerated() {
                    try alarmActionsContainer.encode(resourcename0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var alarmActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AlarmActions"))
                try alarmActionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let alarmDescription = alarmDescription {
            try container.encode(alarmDescription, forKey: ClientRuntime.Key("AlarmDescription"))
        }
        if let alarmName = alarmName {
            try container.encode(alarmName, forKey: ClientRuntime.Key("AlarmName"))
        }
        if let comparisonOperator = comparisonOperator {
            try container.encode(comparisonOperator, forKey: ClientRuntime.Key("ComparisonOperator"))
        }
        if let datapointsToAlarm = datapointsToAlarm {
            try container.encode(datapointsToAlarm, forKey: ClientRuntime.Key("DatapointsToAlarm"))
        }
        if let dimensions = dimensions {
            if !dimensions.isEmpty {
                var dimensionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Dimensions"))
                for (index0, dimension0) in dimensions.enumerated() {
                    try dimensionsContainer.encode(dimension0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var dimensionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Dimensions"))
                try dimensionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let evaluateLowSampleCountPercentile = evaluateLowSampleCountPercentile {
            try container.encode(evaluateLowSampleCountPercentile, forKey: ClientRuntime.Key("EvaluateLowSampleCountPercentile"))
        }
        if let evaluationPeriods = evaluationPeriods {
            try container.encode(evaluationPeriods, forKey: ClientRuntime.Key("EvaluationPeriods"))
        }
        if let extendedStatistic = extendedStatistic {
            try container.encode(extendedStatistic, forKey: ClientRuntime.Key("ExtendedStatistic"))
        }
        if let insufficientDataActions = insufficientDataActions {
            if !insufficientDataActions.isEmpty {
                var insufficientDataActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InsufficientDataActions"))
                for (index0, resourcename0) in insufficientDataActions.enumerated() {
                    try insufficientDataActionsContainer.encode(resourcename0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var insufficientDataActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InsufficientDataActions"))
                try insufficientDataActionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let metricName = metricName {
            try container.encode(metricName, forKey: ClientRuntime.Key("MetricName"))
        }
        if let metrics = metrics {
            if !metrics.isEmpty {
                var metricsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Metrics"))
                for (index0, metricdataquery0) in metrics.enumerated() {
                    try metricsContainer.encode(metricdataquery0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var metricsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Metrics"))
                try metricsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let namespace = namespace {
            try container.encode(namespace, forKey: ClientRuntime.Key("Namespace"))
        }
        if let okActions = okActions {
            if !okActions.isEmpty {
                var okActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OKActions"))
                for (index0, resourcename0) in okActions.enumerated() {
                    try okActionsContainer.encode(resourcename0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var okActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OKActions"))
                try okActionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let period = period {
            try container.encode(period, forKey: ClientRuntime.Key("Period"))
        }
        if let statistic = statistic {
            try container.encode(statistic, forKey: ClientRuntime.Key("Statistic"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let threshold = threshold {
            try container.encode(threshold, forKey: ClientRuntime.Key("Threshold"))
        }
        if let thresholdMetricId = thresholdMetricId {
            try container.encode(thresholdMetricId, forKey: ClientRuntime.Key("ThresholdMetricId"))
        }
        if let treatMissingData = treatMissingData {
            try container.encode(treatMissingData, forKey: ClientRuntime.Key("TreatMissingData"))
        }
        if let unit = unit {
            try container.encode(unit, forKey: ClientRuntime.Key("Unit"))
        }
        try container.encode("PutMetricAlarm", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension PutMetricAlarmInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutMetricAlarmInput: Swift.Equatable {
    /// Indicates whether actions should be executed during any changes to the alarm state. The default is TRUE.
    public var actionsEnabled: Swift.Bool?
    /// The actions to execute when this alarm transitions to the ALARM state from any other state. Each action is specified as an Amazon Resource Name (ARN). Valid Values: arn:aws:automate:region:ec2:stop | arn:aws:automate:region:ec2:terminate | arn:aws:automate:region:ec2:recover | arn:aws:automate:region:ec2:reboot | arn:aws:sns:region:account-id:sns-topic-name  | arn:aws:autoscaling:region:account-id:scalingPolicy:policy-id:autoScalingGroupName/group-friendly-name:policyName/policy-friendly-name  | arn:aws:ssm:region:account-id:opsitem:severity  | arn:aws:ssm-incidents::account-id:response-plan:response-plan-name  Valid Values (for use with IAM roles): arn:aws:swf:region:account-id:action/actions/AWS_EC2.InstanceId.Stop/1.0 | arn:aws:swf:region:account-id:action/actions/AWS_EC2.InstanceId.Terminate/1.0 | arn:aws:swf:region:account-id:action/actions/AWS_EC2.InstanceId.Reboot/1.0 | arn:aws:swf:region:account-id:action/actions/AWS_EC2.InstanceId.Recover/1.0
    public var alarmActions: [Swift.String]?
    /// The description for the alarm.
    public var alarmDescription: Swift.String?
    /// The name for the alarm. This name must be unique within the Region.
    /// This member is required.
    public var alarmName: Swift.String?
    /// The arithmetic operation to use when comparing the specified statistic and threshold. The specified statistic value is used as the first operand. The values LessThanLowerOrGreaterThanUpperThreshold, LessThanLowerThreshold, and GreaterThanUpperThreshold are used only for alarms based on anomaly detection models.
    /// This member is required.
    public var comparisonOperator: CloudWatchClientTypes.ComparisonOperator?
    /// The number of data points that must be breaching to trigger the alarm. This is used only if you are setting an "M out of N" alarm. In that case, this value is the M. For more information, see [Evaluating an Alarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarm-evaluation) in the Amazon CloudWatch User Guide.
    public var datapointsToAlarm: Swift.Int?
    /// The dimensions for the metric specified in MetricName.
    public var dimensions: [CloudWatchClientTypes.Dimension]?
    /// Used only for alarms based on percentiles. If you specify ignore, the alarm state does not change during periods with too few data points to be statistically significant. If you specify evaluate or omit this parameter, the alarm is always evaluated and possibly changes state no matter how many data points are available. For more information, see [Percentile-Based CloudWatch Alarms and Low Data Samples](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#percentiles-with-low-samples). Valid Values: evaluate | ignore
    public var evaluateLowSampleCountPercentile: Swift.String?
    /// The number of periods over which data is compared to the specified threshold. If you are setting an alarm that requires that a number of consecutive data points be breaching to trigger the alarm, this value specifies that number. If you are setting an "M out of N" alarm, this value is the N. An alarm's total current evaluation period can be no longer than one day, so this number multiplied by Period cannot be more than 86,400 seconds.
    /// This member is required.
    public var evaluationPeriods: Swift.Int?
    /// The percentile statistic for the metric specified in MetricName. Specify a value between p0.0 and p100. When you call PutMetricAlarm and specify a MetricName, you must specify either Statistic or ExtendedStatistic, but not both.
    public var extendedStatistic: Swift.String?
    /// The actions to execute when this alarm transitions to the INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Name (ARN). Valid Values: arn:aws:automate:region:ec2:stop | arn:aws:automate:region:ec2:terminate | arn:aws:automate:region:ec2:recover | arn:aws:automate:region:ec2:reboot | arn:aws:sns:region:account-id:sns-topic-name  | arn:aws:autoscaling:region:account-id:scalingPolicy:policy-id:autoScalingGroupName/group-friendly-name:policyName/policy-friendly-name  Valid Values (for use with IAM roles): >arn:aws:swf:region:account-id:action/actions/AWS_EC2.InstanceId.Stop/1.0 | arn:aws:swf:region:account-id:action/actions/AWS_EC2.InstanceId.Terminate/1.0 | arn:aws:swf:region:account-id:action/actions/AWS_EC2.InstanceId.Reboot/1.0
    public var insufficientDataActions: [Swift.String]?
    /// The name for the metric associated with the alarm. For each PutMetricAlarm operation, you must specify either MetricName or a Metrics array. If you are creating an alarm based on a math expression, you cannot specify this parameter, or any of the Dimensions, Period, Namespace, Statistic, or ExtendedStatistic parameters. Instead, you specify all this information in the Metrics array.
    public var metricName: Swift.String?
    /// An array of MetricDataQuery structures that enable you to create an alarm based on the result of a metric math expression. For each PutMetricAlarm operation, you must specify either MetricName or a Metrics array. Each item in the Metrics array either retrieves a metric or performs a math expression. One item in the Metrics array is the expression that the alarm watches. You designate this expression by setting ReturnData to true for this object in the array. For more information, see [MetricDataQuery](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_MetricDataQuery.html). If you use the Metrics parameter, you cannot include the MetricName, Dimensions, Period, Namespace, Statistic, or ExtendedStatistic parameters of PutMetricAlarm in the same operation. Instead, you retrieve the metrics you are using in your math expression as part of the Metrics array.
    public var metrics: [CloudWatchClientTypes.MetricDataQuery]?
    /// The namespace for the metric associated specified in MetricName.
    public var namespace: Swift.String?
    /// The actions to execute when this alarm transitions to an OK state from any other state. Each action is specified as an Amazon Resource Name (ARN). Valid Values: arn:aws:automate:region:ec2:stop | arn:aws:automate:region:ec2:terminate | arn:aws:automate:region:ec2:recover | arn:aws:automate:region:ec2:reboot | arn:aws:sns:region:account-id:sns-topic-name  | arn:aws:autoscaling:region:account-id:scalingPolicy:policy-id:autoScalingGroupName/group-friendly-name:policyName/policy-friendly-name  Valid Values (for use with IAM roles): arn:aws:swf:region:account-id:action/actions/AWS_EC2.InstanceId.Stop/1.0 | arn:aws:swf:region:account-id:action/actions/AWS_EC2.InstanceId.Terminate/1.0 | arn:aws:swf:region:account-id:action/actions/AWS_EC2.InstanceId.Reboot/1.0 | arn:aws:swf:region:account-id:action/actions/AWS_EC2.InstanceId.Recover/1.0
    public var okActions: [Swift.String]?
    /// The length, in seconds, used each time the metric specified in MetricName is evaluated. Valid values are 10, 30, and any multiple of 60. Period is required for alarms based on static thresholds. If you are creating an alarm based on a metric math expression, you specify the period for each metric within the objects in the Metrics array. Be sure to specify 10 or 30 only for metrics that are stored by a PutMetricData call with a StorageResolution of 1. If you specify a period of 10 or 30 for a metric that does not have sub-minute resolution, the alarm still attempts to gather data at the period rate that you specify. In this case, it does not receive data for the attempts that do not correspond to a one-minute data resolution, and the alarm might often lapse into INSUFFICENT_DATA status. Specifying 10 or 30 also sets this alarm as a high-resolution alarm, which has a higher charge than other alarms. For more information about pricing, see [Amazon CloudWatch Pricing](https://aws.amazon.com/cloudwatch/pricing/). An alarm's total current evaluation period can be no longer than one day, so Period multiplied by EvaluationPeriods cannot be more than 86,400 seconds.
    public var period: Swift.Int?
    /// The statistic for the metric specified in MetricName, other than percentile. For percentile statistics, use ExtendedStatistic. When you call PutMetricAlarm and specify a MetricName, you must specify either Statistic or ExtendedStatistic, but not both.
    public var statistic: CloudWatchClientTypes.Statistic?
    /// A list of key-value pairs to associate with the alarm. You can associate as many as 50 tags with an alarm. Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values. If you are using this operation to update an existing alarm, any tags you specify in this parameter are ignored. To change the tags of an existing alarm, use [TagResource](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_TagResource.html) or [UntagResource](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_UntagResource.html).
    public var tags: [CloudWatchClientTypes.Tag]?
    /// The value against which the specified statistic is compared. This parameter is required for alarms based on static thresholds, but should not be used for alarms based on anomaly detection models.
    public var threshold: Swift.Double?
    /// If this is an alarm based on an anomaly detection model, make this value match the ID of the ANOMALY_DETECTION_BAND function. For an example of how to use this parameter, see the Anomaly Detection Model Alarm example on this page. If your alarm uses this parameter, it cannot have Auto Scaling actions.
    public var thresholdMetricId: Swift.String?
    /// Sets how this alarm is to handle missing data points. If TreatMissingData is omitted, the default behavior of missing is used. For more information, see [Configuring How CloudWatch Alarms Treats Missing Data](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarms-and-missing-data). Valid Values: breaching | notBreaching | ignore | missing Alarms that evaluate metrics in the AWS/DynamoDB namespace always ignore missing data even if you choose a different option for TreatMissingData. When an AWS/DynamoDB metric has missing data, alarms that evaluate that metric remain in their current state.
    public var treatMissingData: Swift.String?
    /// The unit of measure for the statistic. For example, the units for the Amazon EC2 NetworkIn metric are Bytes because NetworkIn tracks the number of bytes that an instance receives on all network interfaces. You can also specify a unit when you create a custom metric. Units help provide conceptual meaning to your data. Metric data points that specify a unit of measure, such as Percent, are aggregated separately. If you don't specify Unit, CloudWatch retrieves all unit types that have been published for the metric and attempts to evaluate the alarm. Usually, metrics are published with only one unit, so the alarm works as intended. However, if the metric is published with multiple types of units and you don't specify a unit, the alarm's behavior is not defined and it behaves unpredictably. We recommend omitting Unit so that you don't inadvertently specify an incorrect unit that is not published for this metric. Doing so causes the alarm to be stuck in the INSUFFICIENT DATA state.
    public var unit: CloudWatchClientTypes.StandardUnit?

    public init (
        actionsEnabled: Swift.Bool? = nil,
        alarmActions: [Swift.String]? = nil,
        alarmDescription: Swift.String? = nil,
        alarmName: Swift.String? = nil,
        comparisonOperator: CloudWatchClientTypes.ComparisonOperator? = nil,
        datapointsToAlarm: Swift.Int? = nil,
        dimensions: [CloudWatchClientTypes.Dimension]? = nil,
        evaluateLowSampleCountPercentile: Swift.String? = nil,
        evaluationPeriods: Swift.Int? = nil,
        extendedStatistic: Swift.String? = nil,
        insufficientDataActions: [Swift.String]? = nil,
        metricName: Swift.String? = nil,
        metrics: [CloudWatchClientTypes.MetricDataQuery]? = nil,
        namespace: Swift.String? = nil,
        okActions: [Swift.String]? = nil,
        period: Swift.Int? = nil,
        statistic: CloudWatchClientTypes.Statistic? = nil,
        tags: [CloudWatchClientTypes.Tag]? = nil,
        threshold: Swift.Double? = nil,
        thresholdMetricId: Swift.String? = nil,
        treatMissingData: Swift.String? = nil,
        unit: CloudWatchClientTypes.StandardUnit? = nil
    )
    {
        self.actionsEnabled = actionsEnabled
        self.alarmActions = alarmActions
        self.alarmDescription = alarmDescription
        self.alarmName = alarmName
        self.comparisonOperator = comparisonOperator
        self.datapointsToAlarm = datapointsToAlarm
        self.dimensions = dimensions
        self.evaluateLowSampleCountPercentile = evaluateLowSampleCountPercentile
        self.evaluationPeriods = evaluationPeriods
        self.extendedStatistic = extendedStatistic
        self.insufficientDataActions = insufficientDataActions
        self.metricName = metricName
        self.metrics = metrics
        self.namespace = namespace
        self.okActions = okActions
        self.period = period
        self.statistic = statistic
        self.tags = tags
        self.threshold = threshold
        self.thresholdMetricId = thresholdMetricId
        self.treatMissingData = treatMissingData
        self.unit = unit
    }
}

struct PutMetricAlarmInputBody: Swift.Equatable {
    let alarmName: Swift.String?
    let alarmDescription: Swift.String?
    let actionsEnabled: Swift.Bool?
    let okActions: [Swift.String]?
    let alarmActions: [Swift.String]?
    let insufficientDataActions: [Swift.String]?
    let metricName: Swift.String?
    let namespace: Swift.String?
    let statistic: CloudWatchClientTypes.Statistic?
    let extendedStatistic: Swift.String?
    let dimensions: [CloudWatchClientTypes.Dimension]?
    let period: Swift.Int?
    let unit: CloudWatchClientTypes.StandardUnit?
    let evaluationPeriods: Swift.Int?
    let datapointsToAlarm: Swift.Int?
    let threshold: Swift.Double?
    let comparisonOperator: CloudWatchClientTypes.ComparisonOperator?
    let treatMissingData: Swift.String?
    let evaluateLowSampleCountPercentile: Swift.String?
    let metrics: [CloudWatchClientTypes.MetricDataQuery]?
    let tags: [CloudWatchClientTypes.Tag]?
    let thresholdMetricId: Swift.String?
}

extension PutMetricAlarmInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionsEnabled = "ActionsEnabled"
        case alarmActions = "AlarmActions"
        case alarmDescription = "AlarmDescription"
        case alarmName = "AlarmName"
        case comparisonOperator = "ComparisonOperator"
        case datapointsToAlarm = "DatapointsToAlarm"
        case dimensions = "Dimensions"
        case evaluateLowSampleCountPercentile = "EvaluateLowSampleCountPercentile"
        case evaluationPeriods = "EvaluationPeriods"
        case extendedStatistic = "ExtendedStatistic"
        case insufficientDataActions = "InsufficientDataActions"
        case metricName = "MetricName"
        case metrics = "Metrics"
        case namespace = "Namespace"
        case okActions = "OKActions"
        case period = "Period"
        case statistic = "Statistic"
        case tags = "Tags"
        case threshold = "Threshold"
        case thresholdMetricId = "ThresholdMetricId"
        case treatMissingData = "TreatMissingData"
        case unit = "Unit"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alarmNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmName)
        alarmName = alarmNameDecoded
        let alarmDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmDescription)
        alarmDescription = alarmDescriptionDecoded
        let actionsEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .actionsEnabled)
        actionsEnabled = actionsEnabledDecoded
        if containerValues.contains(.okActions) {
            struct KeyVal0{struct member{}}
            let okActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .okActions)
            if let okActionsWrappedContainer = okActionsWrappedContainer {
                let okActionsContainer = try okActionsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var okActionsBuffer:[Swift.String]? = nil
                if let okActionsContainer = okActionsContainer {
                    okActionsBuffer = [Swift.String]()
                    for stringContainer0 in okActionsContainer {
                        okActionsBuffer?.append(stringContainer0)
                    }
                }
                okActions = okActionsBuffer
            } else {
                okActions = []
            }
        } else {
            okActions = nil
        }
        if containerValues.contains(.alarmActions) {
            struct KeyVal0{struct member{}}
            let alarmActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .alarmActions)
            if let alarmActionsWrappedContainer = alarmActionsWrappedContainer {
                let alarmActionsContainer = try alarmActionsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var alarmActionsBuffer:[Swift.String]? = nil
                if let alarmActionsContainer = alarmActionsContainer {
                    alarmActionsBuffer = [Swift.String]()
                    for stringContainer0 in alarmActionsContainer {
                        alarmActionsBuffer?.append(stringContainer0)
                    }
                }
                alarmActions = alarmActionsBuffer
            } else {
                alarmActions = []
            }
        } else {
            alarmActions = nil
        }
        if containerValues.contains(.insufficientDataActions) {
            struct KeyVal0{struct member{}}
            let insufficientDataActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .insufficientDataActions)
            if let insufficientDataActionsWrappedContainer = insufficientDataActionsWrappedContainer {
                let insufficientDataActionsContainer = try insufficientDataActionsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var insufficientDataActionsBuffer:[Swift.String]? = nil
                if let insufficientDataActionsContainer = insufficientDataActionsContainer {
                    insufficientDataActionsBuffer = [Swift.String]()
                    for stringContainer0 in insufficientDataActionsContainer {
                        insufficientDataActionsBuffer?.append(stringContainer0)
                    }
                }
                insufficientDataActions = insufficientDataActionsBuffer
            } else {
                insufficientDataActions = []
            }
        } else {
            insufficientDataActions = nil
        }
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let statisticDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.Statistic.self, forKey: .statistic)
        statistic = statisticDecoded
        let extendedStatisticDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .extendedStatistic)
        extendedStatistic = extendedStatisticDecoded
        if containerValues.contains(.dimensions) {
            struct KeyVal0{struct member{}}
            let dimensionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dimensions)
            if let dimensionsWrappedContainer = dimensionsWrappedContainer {
                let dimensionsContainer = try dimensionsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.Dimension].self, forKey: .member)
                var dimensionsBuffer:[CloudWatchClientTypes.Dimension]? = nil
                if let dimensionsContainer = dimensionsContainer {
                    dimensionsBuffer = [CloudWatchClientTypes.Dimension]()
                    for structureContainer0 in dimensionsContainer {
                        dimensionsBuffer?.append(structureContainer0)
                    }
                }
                dimensions = dimensionsBuffer
            } else {
                dimensions = []
            }
        } else {
            dimensions = nil
        }
        let periodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .period)
        period = periodDecoded
        let unitDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.StandardUnit.self, forKey: .unit)
        unit = unitDecoded
        let evaluationPeriodsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .evaluationPeriods)
        evaluationPeriods = evaluationPeriodsDecoded
        let datapointsToAlarmDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .datapointsToAlarm)
        datapointsToAlarm = datapointsToAlarmDecoded
        let thresholdDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .threshold)
        threshold = thresholdDecoded
        let comparisonOperatorDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.ComparisonOperator.self, forKey: .comparisonOperator)
        comparisonOperator = comparisonOperatorDecoded
        let treatMissingDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .treatMissingData)
        treatMissingData = treatMissingDataDecoded
        let evaluateLowSampleCountPercentileDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .evaluateLowSampleCountPercentile)
        evaluateLowSampleCountPercentile = evaluateLowSampleCountPercentileDecoded
        if containerValues.contains(.metrics) {
            struct KeyVal0{struct member{}}
            let metricsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .metrics)
            if let metricsWrappedContainer = metricsWrappedContainer {
                let metricsContainer = try metricsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.MetricDataQuery].self, forKey: .member)
                var metricsBuffer:[CloudWatchClientTypes.MetricDataQuery]? = nil
                if let metricsContainer = metricsContainer {
                    metricsBuffer = [CloudWatchClientTypes.MetricDataQuery]()
                    for structureContainer0 in metricsContainer {
                        metricsBuffer?.append(structureContainer0)
                    }
                }
                metrics = metricsBuffer
            } else {
                metrics = []
            }
        } else {
            metrics = nil
        }
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[CloudWatchClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [CloudWatchClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let thresholdMetricIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thresholdMetricId)
        thresholdMetricId = thresholdMetricIdDecoded
    }
}

extension PutMetricAlarmOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutMetricAlarmOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LimitExceeded" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutMetricAlarmOutputError: Swift.Error, Swift.Equatable {
    case limitExceededFault(LimitExceededFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutMetricAlarmOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutMetricAlarmOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutMetricDataInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let metricData = metricData {
            if !metricData.isEmpty {
                var metricDataContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MetricData"))
                for (index0, metricdatum0) in metricData.enumerated() {
                    try metricDataContainer.encode(metricdatum0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var metricDataContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MetricData"))
                try metricDataContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let namespace = namespace {
            try container.encode(namespace, forKey: ClientRuntime.Key("Namespace"))
        }
        try container.encode("PutMetricData", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension PutMetricDataInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutMetricDataInput: Swift.Equatable {
    /// The data for the metric. The array can include no more than 1000 metrics per call.
    /// This member is required.
    public var metricData: [CloudWatchClientTypes.MetricDatum]?
    /// The namespace for the metric data. To avoid conflicts with Amazon Web Services service namespaces, you should not specify a namespace that begins with AWS/
    /// This member is required.
    public var namespace: Swift.String?

    public init (
        metricData: [CloudWatchClientTypes.MetricDatum]? = nil,
        namespace: Swift.String? = nil
    )
    {
        self.metricData = metricData
        self.namespace = namespace
    }
}

struct PutMetricDataInputBody: Swift.Equatable {
    let namespace: Swift.String?
    let metricData: [CloudWatchClientTypes.MetricDatum]?
}

extension PutMetricDataInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricData = "MetricData"
        case namespace = "Namespace"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
        if containerValues.contains(.metricData) {
            struct KeyVal0{struct member{}}
            let metricDataWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .metricData)
            if let metricDataWrappedContainer = metricDataWrappedContainer {
                let metricDataContainer = try metricDataWrappedContainer.decodeIfPresent([CloudWatchClientTypes.MetricDatum].self, forKey: .member)
                var metricDataBuffer:[CloudWatchClientTypes.MetricDatum]? = nil
                if let metricDataContainer = metricDataContainer {
                    metricDataBuffer = [CloudWatchClientTypes.MetricDatum]()
                    for structureContainer0 in metricDataContainer {
                        metricDataBuffer?.append(structureContainer0)
                    }
                }
                metricData = metricDataBuffer
            } else {
                metricData = []
            }
        } else {
            metricData = nil
        }
    }
}

extension PutMetricDataOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutMetricDataOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceError" : self = .internalServiceFault(try InternalServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingParameter" : self = .missingRequiredParameterException(try MissingRequiredParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutMetricDataOutputError: Swift.Error, Swift.Equatable {
    case internalServiceFault(InternalServiceFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case missingRequiredParameterException(MissingRequiredParameterException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutMetricDataOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutMetricDataOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutMetricStreamInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let excludeFilters = excludeFilters {
            if !excludeFilters.isEmpty {
                var excludeFiltersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ExcludeFilters"))
                for (index0, metricstreamfilter0) in excludeFilters.enumerated() {
                    try excludeFiltersContainer.encode(metricstreamfilter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var excludeFiltersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ExcludeFilters"))
                try excludeFiltersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let firehoseArn = firehoseArn {
            try container.encode(firehoseArn, forKey: ClientRuntime.Key("FirehoseArn"))
        }
        if let includeFilters = includeFilters {
            if !includeFilters.isEmpty {
                var includeFiltersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("IncludeFilters"))
                for (index0, metricstreamfilter0) in includeFilters.enumerated() {
                    try includeFiltersContainer.encode(metricstreamfilter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var includeFiltersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("IncludeFilters"))
                try includeFiltersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let outputFormat = outputFormat {
            try container.encode(outputFormat, forKey: ClientRuntime.Key("OutputFormat"))
        }
        if let roleArn = roleArn {
            try container.encode(roleArn, forKey: ClientRuntime.Key("RoleArn"))
        }
        if let statisticsConfigurations = statisticsConfigurations {
            if !statisticsConfigurations.isEmpty {
                var statisticsConfigurationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("StatisticsConfigurations"))
                for (index0, metricstreamstatisticsconfiguration0) in statisticsConfigurations.enumerated() {
                    try statisticsConfigurationsContainer.encode(metricstreamstatisticsconfiguration0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var statisticsConfigurationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("StatisticsConfigurations"))
                try statisticsConfigurationsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("PutMetricStream", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension PutMetricStreamInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutMetricStreamInput: Swift.Equatable {
    /// If you specify this parameter, the stream sends metrics from all metric namespaces except for the namespaces that you specify here. You cannot include ExcludeFilters and IncludeFilters in the same operation.
    public var excludeFilters: [CloudWatchClientTypes.MetricStreamFilter]?
    /// The ARN of the Amazon Kinesis Data Firehose delivery stream to use for this metric stream. This Amazon Kinesis Data Firehose delivery stream must already exist and must be in the same account as the metric stream.
    /// This member is required.
    public var firehoseArn: Swift.String?
    /// If you specify this parameter, the stream sends only the metrics from the metric namespaces that you specify here. You cannot include IncludeFilters and ExcludeFilters in the same operation.
    public var includeFilters: [CloudWatchClientTypes.MetricStreamFilter]?
    /// If you are creating a new metric stream, this is the name for the new stream. The name must be different than the names of other metric streams in this account and Region. If you are updating a metric stream, specify the name of that stream here. Valid characters are A-Z, a-z, 0-9, "-" and "_".
    /// This member is required.
    public var name: Swift.String?
    /// The output format for the stream. Valid values are json and opentelemetry0.7. For more information about metric stream output formats, see [ Metric streams output formats](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-metric-streams-formats.html).
    /// This member is required.
    public var outputFormat: CloudWatchClientTypes.MetricStreamOutputFormat?
    /// The ARN of an IAM role that this metric stream will use to access Amazon Kinesis Data Firehose resources. This IAM role must already exist and must be in the same account as the metric stream. This IAM role must include the following permissions:
    ///
    /// * firehose:PutRecord
    ///
    /// * firehose:PutRecordBatch
    /// This member is required.
    public var roleArn: Swift.String?
    /// By default, a metric stream always sends the MAX, MIN, SUM, and SAMPLECOUNT statistics for each metric that is streamed. You can use this parameter to have the metric stream also send additional statistics in the stream. This array can have up to 100 members. For each entry in this array, you specify one or more metrics and the list of additional statistics to stream for those metrics. The additional statistics that you can stream depend on the stream's OutputFormat. If the OutputFormat is json, you can stream any additional statistic that is supported by CloudWatch, listed in [ CloudWatch statistics definitions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html.html). If the OutputFormat is opentelemetry0.7, you can stream percentile statistics such as p95, p99.9, and so on.
    public var statisticsConfigurations: [CloudWatchClientTypes.MetricStreamStatisticsConfiguration]?
    /// A list of key-value pairs to associate with the metric stream. You can associate as many as 50 tags with a metric stream. Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values. You can use this parameter only when you are creating a new metric stream. If you are using this operation to update an existing metric stream, any tags you specify in this parameter are ignored. To change the tags of an existing metric stream, use [TagResource](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_TagResource.html) or [UntagResource](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_UntagResource.html).
    public var tags: [CloudWatchClientTypes.Tag]?

    public init (
        excludeFilters: [CloudWatchClientTypes.MetricStreamFilter]? = nil,
        firehoseArn: Swift.String? = nil,
        includeFilters: [CloudWatchClientTypes.MetricStreamFilter]? = nil,
        name: Swift.String? = nil,
        outputFormat: CloudWatchClientTypes.MetricStreamOutputFormat? = nil,
        roleArn: Swift.String? = nil,
        statisticsConfigurations: [CloudWatchClientTypes.MetricStreamStatisticsConfiguration]? = nil,
        tags: [CloudWatchClientTypes.Tag]? = nil
    )
    {
        self.excludeFilters = excludeFilters
        self.firehoseArn = firehoseArn
        self.includeFilters = includeFilters
        self.name = name
        self.outputFormat = outputFormat
        self.roleArn = roleArn
        self.statisticsConfigurations = statisticsConfigurations
        self.tags = tags
    }
}

struct PutMetricStreamInputBody: Swift.Equatable {
    let name: Swift.String?
    let includeFilters: [CloudWatchClientTypes.MetricStreamFilter]?
    let excludeFilters: [CloudWatchClientTypes.MetricStreamFilter]?
    let firehoseArn: Swift.String?
    let roleArn: Swift.String?
    let outputFormat: CloudWatchClientTypes.MetricStreamOutputFormat?
    let tags: [CloudWatchClientTypes.Tag]?
    let statisticsConfigurations: [CloudWatchClientTypes.MetricStreamStatisticsConfiguration]?
}

extension PutMetricStreamInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case excludeFilters = "ExcludeFilters"
        case firehoseArn = "FirehoseArn"
        case includeFilters = "IncludeFilters"
        case name = "Name"
        case outputFormat = "OutputFormat"
        case roleArn = "RoleArn"
        case statisticsConfigurations = "StatisticsConfigurations"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        if containerValues.contains(.includeFilters) {
            struct KeyVal0{struct member{}}
            let includeFiltersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .includeFilters)
            if let includeFiltersWrappedContainer = includeFiltersWrappedContainer {
                let includeFiltersContainer = try includeFiltersWrappedContainer.decodeIfPresent([CloudWatchClientTypes.MetricStreamFilter].self, forKey: .member)
                var includeFiltersBuffer:[CloudWatchClientTypes.MetricStreamFilter]? = nil
                if let includeFiltersContainer = includeFiltersContainer {
                    includeFiltersBuffer = [CloudWatchClientTypes.MetricStreamFilter]()
                    for structureContainer0 in includeFiltersContainer {
                        includeFiltersBuffer?.append(structureContainer0)
                    }
                }
                includeFilters = includeFiltersBuffer
            } else {
                includeFilters = []
            }
        } else {
            includeFilters = nil
        }
        if containerValues.contains(.excludeFilters) {
            struct KeyVal0{struct member{}}
            let excludeFiltersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .excludeFilters)
            if let excludeFiltersWrappedContainer = excludeFiltersWrappedContainer {
                let excludeFiltersContainer = try excludeFiltersWrappedContainer.decodeIfPresent([CloudWatchClientTypes.MetricStreamFilter].self, forKey: .member)
                var excludeFiltersBuffer:[CloudWatchClientTypes.MetricStreamFilter]? = nil
                if let excludeFiltersContainer = excludeFiltersContainer {
                    excludeFiltersBuffer = [CloudWatchClientTypes.MetricStreamFilter]()
                    for structureContainer0 in excludeFiltersContainer {
                        excludeFiltersBuffer?.append(structureContainer0)
                    }
                }
                excludeFilters = excludeFiltersBuffer
            } else {
                excludeFilters = []
            }
        } else {
            excludeFilters = nil
        }
        let firehoseArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firehoseArn)
        firehoseArn = firehoseArnDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let outputFormatDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.MetricStreamOutputFormat.self, forKey: .outputFormat)
        outputFormat = outputFormatDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[CloudWatchClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [CloudWatchClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        if containerValues.contains(.statisticsConfigurations) {
            struct KeyVal0{struct member{}}
            let statisticsConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .statisticsConfigurations)
            if let statisticsConfigurationsWrappedContainer = statisticsConfigurationsWrappedContainer {
                let statisticsConfigurationsContainer = try statisticsConfigurationsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.MetricStreamStatisticsConfiguration].self, forKey: .member)
                var statisticsConfigurationsBuffer:[CloudWatchClientTypes.MetricStreamStatisticsConfiguration]? = nil
                if let statisticsConfigurationsContainer = statisticsConfigurationsContainer {
                    statisticsConfigurationsBuffer = [CloudWatchClientTypes.MetricStreamStatisticsConfiguration]()
                    for structureContainer0 in statisticsConfigurationsContainer {
                        statisticsConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                statisticsConfigurations = statisticsConfigurationsBuffer
            } else {
                statisticsConfigurations = []
            }
        } else {
            statisticsConfigurations = nil
        }
    }
}

extension PutMetricStreamOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutMetricStreamOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceError" : self = .internalServiceFault(try InternalServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterCombination" : self = .invalidParameterCombinationException(try InvalidParameterCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingParameter" : self = .missingRequiredParameterException(try MissingRequiredParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutMetricStreamOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case internalServiceFault(InternalServiceFault)
    case invalidParameterCombinationException(InvalidParameterCombinationException)
    case invalidParameterValueException(InvalidParameterValueException)
    case missingRequiredParameterException(MissingRequiredParameterException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutMetricStreamOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PutMetricStreamOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.arn = output.arn
        } else {
            self.arn = nil
        }
    }
}

public struct PutMetricStreamOutputResponse: Swift.Equatable {
    /// The ARN of the metric stream.
    public var arn: Swift.String?

    public init (
        arn: Swift.String? = nil
    )
    {
        self.arn = arn
    }
}

struct PutMetricStreamOutputResponseBody: Swift.Equatable {
    let arn: Swift.String?
}

extension PutMetricStreamOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("PutMetricStreamResult"))
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension CloudWatchClientTypes.Range: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime = "EndTime"
        case startTime = "StartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let endTime = endTime {
            try container.encodeTimestamp(endTime, format: .dateTime, forKey: ClientRuntime.Key("endTime"))
        }
        if let startTime = startTime {
            try container.encodeTimestamp(startTime, format: .dateTime, forKey: ClientRuntime.Key("startTime"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.dateTime, forKey: .endTime)
        endTime = endTimeDecoded
    }
}

extension CloudWatchClientTypes {
    /// Specifies one range of days or times to exclude from use for training an anomaly detection model.
    public struct Range: Swift.Equatable {
        /// The end time of the range to exclude. The format is yyyy-MM-dd'T'HH:mm:ss. For example, 2019-07-01T23:59:59.
        /// This member is required.
        public var endTime: ClientRuntime.Date?
        /// The start time of the range to exclude. The format is yyyy-MM-dd'T'HH:mm:ss. For example, 2019-07-01T23:59:59.
        /// This member is required.
        public var startTime: ClientRuntime.Date?

        public init (
            endTime: ClientRuntime.Date? = nil,
            startTime: ClientRuntime.Date? = nil
        )
        {
            self.endTime = endTime
            self.startTime = startTime
        }
    }

}

extension CloudWatchClientTypes {
    public enum RecentlyActive: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case pt3h
        case sdkUnknown(Swift.String)

        public static var allCases: [RecentlyActive] {
            return [
                .pt3h,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .pt3h: return "PT3H"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RecentlyActive(rawValue: rawValue) ?? RecentlyActive.sdkUnknown(rawValue)
        }
    }
}

extension ResourceNotFound {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ResourceNotFoundBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The named resource does not exist.
public struct ResourceNotFound: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    ///
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceNotFoundBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceNotFoundBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let data = httpResponse.body.toBytes()?.getData(),
            let responseDecoder = decoder {
            let output: AWSClientRuntime.ErrorResponseContainer<ResourceNotFoundExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
            self.resourceId = output.error.resourceId
            self.resourceType = output.error.resourceType
        } else {
            self.message = nil
            self.resourceId = nil
            self.resourceType = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The named resource does not exist.
public struct ResourceNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?
    public var resourceId: Swift.String?
    public var resourceType: Swift.String?

    public init (
        message: Swift.String? = nil,
        resourceId: Swift.String? = nil,
        resourceType: Swift.String? = nil
    )
    {
        self.message = message
        self.resourceId = resourceId
        self.resourceType = resourceType
    }
}

struct ResourceNotFoundExceptionBody: Swift.Equatable {
    let resourceType: Swift.String?
    let resourceId: Swift.String?
    let message: Swift.String?
}

extension ResourceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudWatchClientTypes {
    public enum ScanBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case timestampAscending
        case timestampDescending
        case sdkUnknown(Swift.String)

        public static var allCases: [ScanBy] {
            return [
                .timestampAscending,
                .timestampDescending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .timestampAscending: return "TimestampAscending"
            case .timestampDescending: return "TimestampDescending"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ScanBy(rawValue: rawValue) ?? ScanBy.sdkUnknown(rawValue)
        }
    }
}

extension SetAlarmStateInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let alarmName = alarmName {
            try container.encode(alarmName, forKey: ClientRuntime.Key("AlarmName"))
        }
        if let stateReason = stateReason {
            try container.encode(stateReason, forKey: ClientRuntime.Key("StateReason"))
        }
        if let stateReasonData = stateReasonData {
            try container.encode(stateReasonData, forKey: ClientRuntime.Key("StateReasonData"))
        }
        if let stateValue = stateValue {
            try container.encode(stateValue, forKey: ClientRuntime.Key("StateValue"))
        }
        try container.encode("SetAlarmState", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension SetAlarmStateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct SetAlarmStateInput: Swift.Equatable {
    /// The name of the alarm.
    /// This member is required.
    public var alarmName: Swift.String?
    /// The reason that this alarm is set to this specific state, in text format.
    /// This member is required.
    public var stateReason: Swift.String?
    /// The reason that this alarm is set to this specific state, in JSON format. For SNS or EC2 alarm actions, this is just informational. But for EC2 Auto Scaling or application Auto Scaling alarm actions, the Auto Scaling policy uses the information in this field to take the correct action.
    public var stateReasonData: Swift.String?
    /// The value of the state.
    /// This member is required.
    public var stateValue: CloudWatchClientTypes.StateValue?

    public init (
        alarmName: Swift.String? = nil,
        stateReason: Swift.String? = nil,
        stateReasonData: Swift.String? = nil,
        stateValue: CloudWatchClientTypes.StateValue? = nil
    )
    {
        self.alarmName = alarmName
        self.stateReason = stateReason
        self.stateReasonData = stateReasonData
        self.stateValue = stateValue
    }
}

struct SetAlarmStateInputBody: Swift.Equatable {
    let alarmName: Swift.String?
    let stateValue: CloudWatchClientTypes.StateValue?
    let stateReason: Swift.String?
    let stateReasonData: Swift.String?
}

extension SetAlarmStateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmName = "AlarmName"
        case stateReason = "StateReason"
        case stateReasonData = "StateReasonData"
        case stateValue = "StateValue"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alarmNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmName)
        alarmName = alarmNameDecoded
        let stateValueDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.StateValue.self, forKey: .stateValue)
        stateValue = stateValueDecoded
        let stateReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateReason)
        stateReason = stateReasonDecoded
        let stateReasonDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateReasonData)
        stateReasonData = stateReasonDataDecoded
    }
}

extension SetAlarmStateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SetAlarmStateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidFormat" : self = .invalidFormatFault(try InvalidFormatFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SetAlarmStateOutputError: Swift.Error, Swift.Equatable {
    case invalidFormatFault(InvalidFormatFault)
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension SetAlarmStateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct SetAlarmStateOutputResponse: Swift.Equatable {

    public init () { }
}

extension CloudWatchClientTypes.SingleMetricAnomalyDetector: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dimensions = "Dimensions"
        case metricName = "MetricName"
        case namespace = "Namespace"
        case stat = "Stat"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dimensions = dimensions {
            if !dimensions.isEmpty {
                var dimensionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Dimensions"))
                for (index0, dimension0) in dimensions.enumerated() {
                    try dimensionsContainer.encode(dimension0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var dimensionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Dimensions"))
                try dimensionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let metricName = metricName {
            try container.encode(metricName, forKey: ClientRuntime.Key("MetricName"))
        }
        if let namespace = namespace {
            try container.encode(namespace, forKey: ClientRuntime.Key("Namespace"))
        }
        if let stat = stat {
            try container.encode(stat, forKey: ClientRuntime.Key("Stat"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        if containerValues.contains(.dimensions) {
            struct KeyVal0{struct member{}}
            let dimensionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dimensions)
            if let dimensionsWrappedContainer = dimensionsWrappedContainer {
                let dimensionsContainer = try dimensionsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.Dimension].self, forKey: .member)
                var dimensionsBuffer:[CloudWatchClientTypes.Dimension]? = nil
                if let dimensionsContainer = dimensionsContainer {
                    dimensionsBuffer = [CloudWatchClientTypes.Dimension]()
                    for structureContainer0 in dimensionsContainer {
                        dimensionsBuffer?.append(structureContainer0)
                    }
                }
                dimensions = dimensionsBuffer
            } else {
                dimensions = []
            }
        } else {
            dimensions = nil
        }
        let statDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stat)
        stat = statDecoded
    }
}

extension CloudWatchClientTypes {
    /// Designates the CloudWatch metric and statistic that provides the time series the anomaly detector uses as input.
    public struct SingleMetricAnomalyDetector: Swift.Equatable {
        /// The metric dimensions to create the anomaly detection model for.
        public var dimensions: [CloudWatchClientTypes.Dimension]?
        /// The name of the metric to create the anomaly detection model for.
        public var metricName: Swift.String?
        /// The namespace of the metric to create the anomaly detection model for.
        public var namespace: Swift.String?
        /// The statistic to use for the metric and anomaly detection model.
        public var stat: Swift.String?

        public init (
            dimensions: [CloudWatchClientTypes.Dimension]? = nil,
            metricName: Swift.String? = nil,
            namespace: Swift.String? = nil,
            stat: Swift.String? = nil
        )
        {
            self.dimensions = dimensions
            self.metricName = metricName
            self.namespace = namespace
            self.stat = stat
        }
    }

}

extension CloudWatchClientTypes {
    public enum StandardUnit: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bits
        case bitsSecond
        case bytes
        case bytesSecond
        case count
        case countSecond
        case gigabits
        case gigabitsSecond
        case gigabytes
        case gigabytesSecond
        case kilobits
        case kilobitsSecond
        case kilobytes
        case kilobytesSecond
        case megabits
        case megabitsSecond
        case megabytes
        case megabytesSecond
        case microseconds
        case milliseconds
        case `none`
        case percent
        case seconds
        case terabits
        case terabitsSecond
        case terabytes
        case terabytesSecond
        case sdkUnknown(Swift.String)

        public static var allCases: [StandardUnit] {
            return [
                .bits,
                .bitsSecond,
                .bytes,
                .bytesSecond,
                .count,
                .countSecond,
                .gigabits,
                .gigabitsSecond,
                .gigabytes,
                .gigabytesSecond,
                .kilobits,
                .kilobitsSecond,
                .kilobytes,
                .kilobytesSecond,
                .megabits,
                .megabitsSecond,
                .megabytes,
                .megabytesSecond,
                .microseconds,
                .milliseconds,
                .none,
                .percent,
                .seconds,
                .terabits,
                .terabitsSecond,
                .terabytes,
                .terabytesSecond,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bits: return "Bits"
            case .bitsSecond: return "Bits/Second"
            case .bytes: return "Bytes"
            case .bytesSecond: return "Bytes/Second"
            case .count: return "Count"
            case .countSecond: return "Count/Second"
            case .gigabits: return "Gigabits"
            case .gigabitsSecond: return "Gigabits/Second"
            case .gigabytes: return "Gigabytes"
            case .gigabytesSecond: return "Gigabytes/Second"
            case .kilobits: return "Kilobits"
            case .kilobitsSecond: return "Kilobits/Second"
            case .kilobytes: return "Kilobytes"
            case .kilobytesSecond: return "Kilobytes/Second"
            case .megabits: return "Megabits"
            case .megabitsSecond: return "Megabits/Second"
            case .megabytes: return "Megabytes"
            case .megabytesSecond: return "Megabytes/Second"
            case .microseconds: return "Microseconds"
            case .milliseconds: return "Milliseconds"
            case .none: return "None"
            case .percent: return "Percent"
            case .seconds: return "Seconds"
            case .terabits: return "Terabits"
            case .terabitsSecond: return "Terabits/Second"
            case .terabytes: return "Terabytes"
            case .terabytesSecond: return "Terabytes/Second"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StandardUnit(rawValue: rawValue) ?? StandardUnit.sdkUnknown(rawValue)
        }
    }
}

extension StartMetricStreamsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let names = names {
            if !names.isEmpty {
                var namesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Names"))
                for (index0, metricstreamname0) in names.enumerated() {
                    try namesContainer.encode(metricstreamname0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var namesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Names"))
                try namesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("StartMetricStreams", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension StartMetricStreamsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartMetricStreamsInput: Swift.Equatable {
    /// The array of the names of metric streams to start streaming. This is an "all or nothing" operation. If you do not have permission to access all of the metric streams that you list here, then none of the streams that you list in the operation will start streaming.
    /// This member is required.
    public var names: [Swift.String]?

    public init (
        names: [Swift.String]? = nil
    )
    {
        self.names = names
    }
}

struct StartMetricStreamsInputBody: Swift.Equatable {
    let names: [Swift.String]?
}

extension StartMetricStreamsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case names = "Names"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.names) {
            struct KeyVal0{struct member{}}
            let namesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .names)
            if let namesWrappedContainer = namesWrappedContainer {
                let namesContainer = try namesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var namesBuffer:[Swift.String]? = nil
                if let namesContainer = namesContainer {
                    namesBuffer = [Swift.String]()
                    for stringContainer0 in namesContainer {
                        namesBuffer?.append(stringContainer0)
                    }
                }
                names = namesBuffer
            } else {
                names = []
            }
        } else {
            names = nil
        }
    }
}

extension StartMetricStreamsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension StartMetricStreamsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceError" : self = .internalServiceFault(try InternalServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingParameter" : self = .missingRequiredParameterException(try MissingRequiredParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartMetricStreamsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceFault(InternalServiceFault)
    case invalidParameterValueException(InvalidParameterValueException)
    case missingRequiredParameterException(MissingRequiredParameterException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartMetricStreamsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct StartMetricStreamsOutputResponse: Swift.Equatable {

    public init () { }
}

extension CloudWatchClientTypes {
    public enum StateValue: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case alarm
        case insufficientData
        case ok
        case sdkUnknown(Swift.String)

        public static var allCases: [StateValue] {
            return [
                .alarm,
                .insufficientData,
                .ok,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .alarm: return "ALARM"
            case .insufficientData: return "INSUFFICIENT_DATA"
            case .ok: return "OK"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StateValue(rawValue: rawValue) ?? StateValue.sdkUnknown(rawValue)
        }
    }
}

extension CloudWatchClientTypes {
    public enum Statistic: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case average
        case maximum
        case minimum
        case samplecount
        case sum
        case sdkUnknown(Swift.String)

        public static var allCases: [Statistic] {
            return [
                .average,
                .maximum,
                .minimum,
                .samplecount,
                .sum,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .average: return "Average"
            case .maximum: return "Maximum"
            case .minimum: return "Minimum"
            case .samplecount: return "SampleCount"
            case .sum: return "Sum"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Statistic(rawValue: rawValue) ?? Statistic.sdkUnknown(rawValue)
        }
    }
}

extension CloudWatchClientTypes.StatisticSet: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maximum = "Maximum"
        case minimum = "Minimum"
        case sampleCount = "SampleCount"
        case sum = "Sum"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let maximum = maximum {
            try container.encode(maximum, forKey: ClientRuntime.Key("Maximum"))
        }
        if let minimum = minimum {
            try container.encode(minimum, forKey: ClientRuntime.Key("Minimum"))
        }
        if let sampleCount = sampleCount {
            try container.encode(sampleCount, forKey: ClientRuntime.Key("SampleCount"))
        }
        if let sum = sum {
            try container.encode(sum, forKey: ClientRuntime.Key("Sum"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sampleCountDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .sampleCount)
        sampleCount = sampleCountDecoded
        let sumDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .sum)
        sum = sumDecoded
        let minimumDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .minimum)
        minimum = minimumDecoded
        let maximumDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .maximum)
        maximum = maximumDecoded
    }
}

extension CloudWatchClientTypes {
    /// Represents a set of statistics that describes a specific metric.
    public struct StatisticSet: Swift.Equatable {
        /// The maximum value of the sample set.
        /// This member is required.
        public var maximum: Swift.Double?
        /// The minimum value of the sample set.
        /// This member is required.
        public var minimum: Swift.Double?
        /// The number of samples used for the statistic set.
        /// This member is required.
        public var sampleCount: Swift.Double?
        /// The sum of values for the sample set.
        /// This member is required.
        public var sum: Swift.Double?

        public init (
            maximum: Swift.Double? = nil,
            minimum: Swift.Double? = nil,
            sampleCount: Swift.Double? = nil,
            sum: Swift.Double? = nil
        )
        {
            self.maximum = maximum
            self.minimum = minimum
            self.sampleCount = sampleCount
            self.sum = sum
        }
    }

}

extension CloudWatchClientTypes {
    public enum StatusCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case complete
        case forbidden
        case internalError
        case partialData
        case sdkUnknown(Swift.String)

        public static var allCases: [StatusCode] {
            return [
                .complete,
                .forbidden,
                .internalError,
                .partialData,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .complete: return "Complete"
            case .forbidden: return "Forbidden"
            case .internalError: return "InternalError"
            case .partialData: return "PartialData"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StatusCode(rawValue: rawValue) ?? StatusCode.sdkUnknown(rawValue)
        }
    }
}

extension StopMetricStreamsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let names = names {
            if !names.isEmpty {
                var namesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Names"))
                for (index0, metricstreamname0) in names.enumerated() {
                    try namesContainer.encode(metricstreamname0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var namesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Names"))
                try namesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("StopMetricStreams", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension StopMetricStreamsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopMetricStreamsInput: Swift.Equatable {
    /// The array of the names of metric streams to stop streaming. This is an "all or nothing" operation. If you do not have permission to access all of the metric streams that you list here, then none of the streams that you list in the operation will stop streaming.
    /// This member is required.
    public var names: [Swift.String]?

    public init (
        names: [Swift.String]? = nil
    )
    {
        self.names = names
    }
}

struct StopMetricStreamsInputBody: Swift.Equatable {
    let names: [Swift.String]?
}

extension StopMetricStreamsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case names = "Names"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.names) {
            struct KeyVal0{struct member{}}
            let namesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .names)
            if let namesWrappedContainer = namesWrappedContainer {
                let namesContainer = try namesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var namesBuffer:[Swift.String]? = nil
                if let namesContainer = namesContainer {
                    namesBuffer = [Swift.String]()
                    for stringContainer0 in namesContainer {
                        namesBuffer?.append(stringContainer0)
                    }
                }
                names = namesBuffer
            } else {
                names = []
            }
        } else {
            names = nil
        }
    }
}

extension StopMetricStreamsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension StopMetricStreamsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceError" : self = .internalServiceFault(try InternalServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingParameter" : self = .missingRequiredParameterException(try MissingRequiredParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StopMetricStreamsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceFault(InternalServiceFault)
    case invalidParameterValueException(InvalidParameterValueException)
    case missingRequiredParameterException(MissingRequiredParameterException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopMetricStreamsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct StopMetricStreamsOutputResponse: Swift.Equatable {

    public init () { }
}

extension CloudWatchClientTypes.Tag: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let key = key {
            try container.encode(key, forKey: ClientRuntime.Key("Key"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension CloudWatchClientTypes {
    /// A key-value pair associated with a CloudWatch resource.
    public struct Tag: Swift.Equatable {
        /// A string that you can use to assign a value. The combination of tag keys and values can help you organize and categorize your resources.
        /// This member is required.
        public var key: Swift.String?
        /// The value for the specified tag key.
        /// This member is required.
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension TagResourceInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let resourceARN = resourceARN {
            try container.encode(resourceARN, forKey: ClientRuntime.Key("ResourceARN"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("TagResource", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension TagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct TagResourceInput: Swift.Equatable {
    /// The ARN of the CloudWatch resource that you're adding tags to. The ARN format of an alarm is arn:aws:cloudwatch:Region:account-id:alarm:alarm-name  The ARN format of a Contributor Insights rule is arn:aws:cloudwatch:Region:account-id:insight-rule:insight-rule-name  For more information about ARN format, see [ Resource Types Defined by Amazon CloudWatch](https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazoncloudwatch.html#amazoncloudwatch-resources-for-iam-policies) in the Amazon Web Services General Reference.
    /// This member is required.
    public var resourceARN: Swift.String?
    /// The list of key-value pairs to associate with the alarm.
    /// This member is required.
    public var tags: [CloudWatchClientTypes.Tag]?

    public init (
        resourceARN: Swift.String? = nil,
        tags: [CloudWatchClientTypes.Tag]? = nil
    )
    {
        self.resourceARN = resourceARN
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    let resourceARN: Swift.String?
    let tags: [CloudWatchClientTypes.Tag]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceARN = "ResourceARN"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[CloudWatchClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [CloudWatchClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceError" : self = .internalServiceFault(try InternalServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case internalServiceFault(InternalServiceFault)
    case invalidParameterValueException(InvalidParameterValueException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension UntagResourceInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let resourceARN = resourceARN {
            try container.encode(resourceARN, forKey: ClientRuntime.Key("ResourceARN"))
        }
        if let tagKeys = tagKeys {
            if !tagKeys.isEmpty {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                for (index0, tagkey0) in tagKeys.enumerated() {
                    try tagKeysContainer.encode(tagkey0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TagKeys"))
                try tagKeysContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("UntagResource", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}

extension UntagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UntagResourceInput: Swift.Equatable {
    /// The ARN of the CloudWatch resource that you're removing tags from. The ARN format of an alarm is arn:aws:cloudwatch:Region:account-id:alarm:alarm-name  The ARN format of a Contributor Insights rule is arn:aws:cloudwatch:Region:account-id:insight-rule:insight-rule-name  For more information about ARN format, see [ Resource Types Defined by Amazon CloudWatch](https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazoncloudwatch.html#amazoncloudwatch-resources-for-iam-policies) in the Amazon Web Services General Reference.
    /// This member is required.
    public var resourceARN: Swift.String?
    /// The list of tag keys to remove from the resource.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        resourceARN: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceARN = resourceARN
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
    let resourceARN: Swift.String?
    let tagKeys: [Swift.String]?
}

extension UntagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceARN = "ResourceARN"
        case tagKeys = "TagKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
        if containerValues.contains(.tagKeys) {
            struct KeyVal0{struct member{}}
            let tagKeysWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tagKeys)
            if let tagKeysWrappedContainer = tagKeysWrappedContainer {
                let tagKeysContainer = try tagKeysWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var tagKeysBuffer:[Swift.String]? = nil
                if let tagKeysContainer = tagKeysContainer {
                    tagKeysBuffer = [Swift.String]()
                    for stringContainer0 in tagKeysContainer {
                        tagKeysBuffer?.append(stringContainer0)
                    }
                }
                tagKeys = tagKeysBuffer
            } else {
                tagKeys = []
            }
        } else {
            tagKeys = nil
        }
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceError" : self = .internalServiceFault(try InternalServiceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValue" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case internalServiceFault(InternalServiceFault)
    case invalidParameterValueException(InvalidParameterValueException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

    public init () { }
}
