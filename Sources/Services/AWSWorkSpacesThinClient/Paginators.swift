// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension WorkSpacesThinClientClient {
    /// Paginate over `[ListDevicesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListDevicesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListDevicesOutput`
    public func listDevicesPaginated(input: ListDevicesInput) -> ClientRuntime.PaginatorSequence<ListDevicesInput, ListDevicesOutput> {
        return ClientRuntime.PaginatorSequence<ListDevicesInput, ListDevicesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listDevices(input:))
    }
}

extension ListDevicesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListDevicesInput {
        return ListDevicesInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListDevicesInput, OperationStackOutput == ListDevicesOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listDevicesPaginated`
    /// to access the nested member `[WorkSpacesThinClientClientTypes.DeviceSummary]`
    /// - Returns: `[WorkSpacesThinClientClientTypes.DeviceSummary]`
    public func devices() async throws -> [WorkSpacesThinClientClientTypes.DeviceSummary] {
        return try await self.asyncCompactMap { item in item.devices }
    }
}
extension WorkSpacesThinClientClient {
    /// Paginate over `[ListEnvironmentsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListEnvironmentsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListEnvironmentsOutput`
    public func listEnvironmentsPaginated(input: ListEnvironmentsInput) -> ClientRuntime.PaginatorSequence<ListEnvironmentsInput, ListEnvironmentsOutput> {
        return ClientRuntime.PaginatorSequence<ListEnvironmentsInput, ListEnvironmentsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listEnvironments(input:))
    }
}

extension ListEnvironmentsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListEnvironmentsInput {
        return ListEnvironmentsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListEnvironmentsInput, OperationStackOutput == ListEnvironmentsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listEnvironmentsPaginated`
    /// to access the nested member `[WorkSpacesThinClientClientTypes.EnvironmentSummary]`
    /// - Returns: `[WorkSpacesThinClientClientTypes.EnvironmentSummary]`
    public func environments() async throws -> [WorkSpacesThinClientClientTypes.EnvironmentSummary] {
        return try await self.asyncCompactMap { item in item.environments }
    }
}
extension WorkSpacesThinClientClient {
    /// Paginate over `[ListSoftwareSetsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListSoftwareSetsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListSoftwareSetsOutput`
    public func listSoftwareSetsPaginated(input: ListSoftwareSetsInput) -> ClientRuntime.PaginatorSequence<ListSoftwareSetsInput, ListSoftwareSetsOutput> {
        return ClientRuntime.PaginatorSequence<ListSoftwareSetsInput, ListSoftwareSetsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listSoftwareSets(input:))
    }
}

extension ListSoftwareSetsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListSoftwareSetsInput {
        return ListSoftwareSetsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListSoftwareSetsInput, OperationStackOutput == ListSoftwareSetsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listSoftwareSetsPaginated`
    /// to access the nested member `[WorkSpacesThinClientClientTypes.SoftwareSetSummary]`
    /// - Returns: `[WorkSpacesThinClientClientTypes.SoftwareSetSummary]`
    public func softwareSets() async throws -> [WorkSpacesThinClientClientTypes.SoftwareSetSummary] {
        return try await self.asyncCompactMap { item in item.softwareSets }
    }
}
