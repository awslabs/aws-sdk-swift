// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension AccessDeniedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AccessDeniedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You don't have sufficient permissions to perform this action.
public struct AccessDeniedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// This member is required.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct AccessDeniedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension AccessDeniedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RUMClientTypes.AppMonitor: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appMonitorConfiguration = "AppMonitorConfiguration"
        case created = "Created"
        case customEvents = "CustomEvents"
        case dataStorage = "DataStorage"
        case domain = "Domain"
        case id = "Id"
        case lastModified = "LastModified"
        case name = "Name"
        case state = "State"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appMonitorConfiguration = self.appMonitorConfiguration {
            try encodeContainer.encode(appMonitorConfiguration, forKey: .appMonitorConfiguration)
        }
        if let created = self.created {
            try encodeContainer.encode(created, forKey: .created)
        }
        if let customEvents = self.customEvents {
            try encodeContainer.encode(customEvents, forKey: .customEvents)
        }
        if let dataStorage = self.dataStorage {
            try encodeContainer.encode(dataStorage, forKey: .dataStorage)
        }
        if let domain = self.domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let lastModified = self.lastModified {
            try encodeContainer.encode(lastModified, forKey: .lastModified)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagMap0) in tags {
                try tagsContainer.encode(tagMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let createdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .created)
        created = createdDecoded
        let lastModifiedDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModified)
        lastModified = lastModifiedDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let stateDecoded = try containerValues.decodeIfPresent(RUMClientTypes.StateEnum.self, forKey: .state)
        state = stateDecoded
        let appMonitorConfigurationDecoded = try containerValues.decodeIfPresent(RUMClientTypes.AppMonitorConfiguration.self, forKey: .appMonitorConfiguration)
        appMonitorConfiguration = appMonitorConfigurationDecoded
        let dataStorageDecoded = try containerValues.decodeIfPresent(RUMClientTypes.DataStorage.self, forKey: .dataStorage)
        dataStorage = dataStorageDecoded
        let customEventsDecoded = try containerValues.decodeIfPresent(RUMClientTypes.CustomEvents.self, forKey: .customEvents)
        customEvents = customEventsDecoded
    }
}

extension RUMClientTypes {
    /// A RUM app monitor collects telemetry data from your application and sends that data to RUM. The data includes performance and reliability information such as page load time, client-side errors, and user behavior.
    public struct AppMonitor: Swift.Equatable {
        /// A structure that contains much of the configuration data for the app monitor.
        public var appMonitorConfiguration: RUMClientTypes.AppMonitorConfiguration?
        /// The date and time that this app monitor was created.
        public var created: Swift.String?
        /// Specifies whether this app monitor allows the web client to define and send custom events. For more information about custom events, see [Send custom events](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-RUM-custom-events.html).
        public var customEvents: RUMClientTypes.CustomEvents?
        /// A structure that contains information about whether this app monitor stores a copy of the telemetry data that RUM collects using CloudWatch Logs.
        public var dataStorage: RUMClientTypes.DataStorage?
        /// The top-level internet domain name for which your application has administrative authority.
        public var domain: Swift.String?
        /// The unique ID of this app monitor.
        public var id: Swift.String?
        /// The date and time of the most recent changes to this app monitor's configuration.
        public var lastModified: Swift.String?
        /// The name of the app monitor.
        public var name: Swift.String?
        /// The current state of the app monitor.
        public var state: RUMClientTypes.StateEnum?
        /// The list of tag keys and values associated with this app monitor.
        public var tags: [Swift.String:Swift.String]?

        public init (
            appMonitorConfiguration: RUMClientTypes.AppMonitorConfiguration? = nil,
            created: Swift.String? = nil,
            customEvents: RUMClientTypes.CustomEvents? = nil,
            dataStorage: RUMClientTypes.DataStorage? = nil,
            domain: Swift.String? = nil,
            id: Swift.String? = nil,
            lastModified: Swift.String? = nil,
            name: Swift.String? = nil,
            state: RUMClientTypes.StateEnum? = nil,
            tags: [Swift.String:Swift.String]? = nil
        )
        {
            self.appMonitorConfiguration = appMonitorConfiguration
            self.created = created
            self.customEvents = customEvents
            self.dataStorage = dataStorage
            self.domain = domain
            self.id = id
            self.lastModified = lastModified
            self.name = name
            self.state = state
            self.tags = tags
        }
    }

}

extension RUMClientTypes.AppMonitorConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowCookies = "AllowCookies"
        case enableXRay = "EnableXRay"
        case excludedPages = "ExcludedPages"
        case favoritePages = "FavoritePages"
        case guestRoleArn = "GuestRoleArn"
        case identityPoolId = "IdentityPoolId"
        case includedPages = "IncludedPages"
        case sessionSampleRate = "SessionSampleRate"
        case telemetries = "Telemetries"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowCookies = self.allowCookies {
            try encodeContainer.encode(allowCookies, forKey: .allowCookies)
        }
        if let enableXRay = self.enableXRay {
            try encodeContainer.encode(enableXRay, forKey: .enableXRay)
        }
        if let excludedPages = excludedPages {
            var excludedPagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .excludedPages)
            for url0 in excludedPages {
                try excludedPagesContainer.encode(url0)
            }
        }
        if let favoritePages = favoritePages {
            var favoritePagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .favoritePages)
            for string0 in favoritePages {
                try favoritePagesContainer.encode(string0)
            }
        }
        if let guestRoleArn = self.guestRoleArn {
            try encodeContainer.encode(guestRoleArn, forKey: .guestRoleArn)
        }
        if let identityPoolId = self.identityPoolId {
            try encodeContainer.encode(identityPoolId, forKey: .identityPoolId)
        }
        if let includedPages = includedPages {
            var includedPagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .includedPages)
            for url0 in includedPages {
                try includedPagesContainer.encode(url0)
            }
        }
        if sessionSampleRate != 0.0 {
            try encodeContainer.encode(sessionSampleRate, forKey: .sessionSampleRate)
        }
        if let telemetries = telemetries {
            var telemetriesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .telemetries)
            for telemetry0 in telemetries {
                try telemetriesContainer.encode(telemetry0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identityPoolId)
        identityPoolId = identityPoolIdDecoded
        let excludedPagesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .excludedPages)
        var excludedPagesDecoded0:[Swift.String]? = nil
        if let excludedPagesContainer = excludedPagesContainer {
            excludedPagesDecoded0 = [Swift.String]()
            for string0 in excludedPagesContainer {
                if let string0 = string0 {
                    excludedPagesDecoded0?.append(string0)
                }
            }
        }
        excludedPages = excludedPagesDecoded0
        let includedPagesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .includedPages)
        var includedPagesDecoded0:[Swift.String]? = nil
        if let includedPagesContainer = includedPagesContainer {
            includedPagesDecoded0 = [Swift.String]()
            for string0 in includedPagesContainer {
                if let string0 = string0 {
                    includedPagesDecoded0?.append(string0)
                }
            }
        }
        includedPages = includedPagesDecoded0
        let favoritePagesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .favoritePages)
        var favoritePagesDecoded0:[Swift.String]? = nil
        if let favoritePagesContainer = favoritePagesContainer {
            favoritePagesDecoded0 = [Swift.String]()
            for string0 in favoritePagesContainer {
                if let string0 = string0 {
                    favoritePagesDecoded0?.append(string0)
                }
            }
        }
        favoritePages = favoritePagesDecoded0
        let sessionSampleRateDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .sessionSampleRate) ?? 0.0
        sessionSampleRate = sessionSampleRateDecoded
        let guestRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .guestRoleArn)
        guestRoleArn = guestRoleArnDecoded
        let allowCookiesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .allowCookies)
        allowCookies = allowCookiesDecoded
        let telemetriesContainer = try containerValues.decodeIfPresent([RUMClientTypes.Telemetry?].self, forKey: .telemetries)
        var telemetriesDecoded0:[RUMClientTypes.Telemetry]? = nil
        if let telemetriesContainer = telemetriesContainer {
            telemetriesDecoded0 = [RUMClientTypes.Telemetry]()
            for string0 in telemetriesContainer {
                if let string0 = string0 {
                    telemetriesDecoded0?.append(string0)
                }
            }
        }
        telemetries = telemetriesDecoded0
        let enableXRayDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableXRay)
        enableXRay = enableXRayDecoded
    }
}

extension RUMClientTypes {
    /// This structure contains much of the configuration data for the app monitor.
    public struct AppMonitorConfiguration: Swift.Equatable {
        /// If you set this to true, the RUM web client sets two cookies, a session cookie and a user cookie. The cookies allow the RUM web client to collect data relating to the number of users an application has and the behavior of the application across a sequence of events. Cookies are stored in the top-level domain of the current page.
        public var allowCookies: Swift.Bool?
        /// If you set this to true, RUM enables X-Ray tracing for the user sessions that RUM samples. RUM adds an X-Ray trace header to allowed HTTP requests. It also records an X-Ray segment for allowed HTTP requests. You can see traces and segments from these user sessions in the X-Ray console and the CloudWatch ServiceLens console. For more information, see [What is X-Ray?](https://docs.aws.amazon.com/xray/latest/devguide/aws-xray.html)
        public var enableXRay: Swift.Bool?
        /// A list of URLs in your website or application to exclude from RUM data collection. You can't include both ExcludedPages and IncludedPages in the same operation.
        public var excludedPages: [Swift.String]?
        /// A list of pages in your application that are to be displayed with a "favorite" icon in the CloudWatch RUM console.
        public var favoritePages: [Swift.String]?
        /// The ARN of the guest IAM role that is attached to the Amazon Cognito identity pool that is used to authorize the sending of data to RUM.
        public var guestRoleArn: Swift.String?
        /// The ID of the Amazon Cognito identity pool that is used to authorize the sending of data to RUM.
        public var identityPoolId: Swift.String?
        /// If this app monitor is to collect data from only certain pages in your application, this structure lists those pages. You can't include both ExcludedPages and IncludedPages in the same operation.
        public var includedPages: [Swift.String]?
        /// Specifies the portion of user sessions to use for RUM data collection. Choosing a higher portion gives you more data but also incurs more costs. The range for this value is 0 to 1 inclusive. Setting this to 1 means that 100% of user sessions are sampled, and setting it to 0.1 means that 10% of user sessions are sampled. If you omit this parameter, the default of 0.1 is used, and 10% of sessions will be sampled.
        public var sessionSampleRate: Swift.Double
        /// An array that lists the types of telemetry data that this app monitor is to collect.
        ///
        /// * errors indicates that RUM collects data about unhandled JavaScript errors raised by your application.
        ///
        /// * performance indicates that RUM collects performance data about how your application and its resources are loaded and rendered. This includes Core Web Vitals.
        ///
        /// * http indicates that RUM collects data about HTTP errors thrown by your application.
        public var telemetries: [RUMClientTypes.Telemetry]?

        public init (
            allowCookies: Swift.Bool? = nil,
            enableXRay: Swift.Bool? = nil,
            excludedPages: [Swift.String]? = nil,
            favoritePages: [Swift.String]? = nil,
            guestRoleArn: Swift.String? = nil,
            identityPoolId: Swift.String? = nil,
            includedPages: [Swift.String]? = nil,
            sessionSampleRate: Swift.Double = 0.0,
            telemetries: [RUMClientTypes.Telemetry]? = nil
        )
        {
            self.allowCookies = allowCookies
            self.enableXRay = enableXRay
            self.excludedPages = excludedPages
            self.favoritePages = favoritePages
            self.guestRoleArn = guestRoleArn
            self.identityPoolId = identityPoolId
            self.includedPages = includedPages
            self.sessionSampleRate = sessionSampleRate
            self.telemetries = telemetries
        }
    }

}

extension RUMClientTypes.AppMonitorDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id
        case name
        case version
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
    }
}

extension RUMClientTypes {
    /// A structure that contains information about the RUM app monitor.
    public struct AppMonitorDetails: Swift.Equatable {
        /// The unique ID of the app monitor.
        public var id: Swift.String?
        /// The name of the app monitor.
        public var name: Swift.String?
        /// The version of the app monitor.
        public var version: Swift.String?

        public init (
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.id = id
            self.name = name
            self.version = version
        }
    }

}

extension RUMClientTypes.AppMonitorSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case created = "Created"
        case id = "Id"
        case lastModified = "LastModified"
        case name = "Name"
        case state = "State"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let created = self.created {
            try encodeContainer.encode(created, forKey: .created)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let lastModified = self.lastModified {
            try encodeContainer.encode(lastModified, forKey: .lastModified)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let createdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .created)
        created = createdDecoded
        let lastModifiedDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModified)
        lastModified = lastModifiedDecoded
        let stateDecoded = try containerValues.decodeIfPresent(RUMClientTypes.StateEnum.self, forKey: .state)
        state = stateDecoded
    }
}

extension RUMClientTypes {
    /// A structure that includes some data about app monitors and their settings.
    public struct AppMonitorSummary: Swift.Equatable {
        /// The date and time that the app monitor was created.
        public var created: Swift.String?
        /// The unique ID of this app monitor.
        public var id: Swift.String?
        /// The date and time of the most recent changes to this app monitor's configuration.
        public var lastModified: Swift.String?
        /// The name of this app monitor.
        public var name: Swift.String?
        /// The current state of this app monitor.
        public var state: RUMClientTypes.StateEnum?

        public init (
            created: Swift.String? = nil,
            id: Swift.String? = nil,
            lastModified: Swift.String? = nil,
            name: Swift.String? = nil,
            state: RUMClientTypes.StateEnum? = nil
        )
        {
            self.created = created
            self.id = id
            self.lastModified = lastModified
            self.name = name
            self.state = state
        }
    }

}

extension RUMClientTypes.BatchCreateRumMetricDefinitionsError: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorCode = "ErrorCode"
        case errorMessage = "ErrorMessage"
        case metricDefinition = "MetricDefinition"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorCode = self.errorCode {
            try encodeContainer.encode(errorCode, forKey: .errorCode)
        }
        if let errorMessage = self.errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let metricDefinition = self.metricDefinition {
            try encodeContainer.encode(metricDefinition, forKey: .metricDefinition)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricDefinitionDecoded = try containerValues.decodeIfPresent(RUMClientTypes.MetricDefinitionRequest.self, forKey: .metricDefinition)
        metricDefinition = metricDefinitionDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}

extension RUMClientTypes {
    /// A structure that defines one error caused by a [BatchCreateRumMetricsDefinitions](https://docs.aws.amazon.com/cloudwatchrum/latest/APIReference/API_BatchCreateRumMetricsDefinitions.html) operation.
    public struct BatchCreateRumMetricDefinitionsError: Swift.Equatable {
        /// The error code.
        /// This member is required.
        public var errorCode: Swift.String?
        /// The error message for this metric definition.
        /// This member is required.
        public var errorMessage: Swift.String?
        /// The metric definition that caused this error.
        /// This member is required.
        public var metricDefinition: RUMClientTypes.MetricDefinitionRequest?

        public init (
            errorCode: Swift.String? = nil,
            errorMessage: Swift.String? = nil,
            metricDefinition: RUMClientTypes.MetricDefinitionRequest? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.metricDefinition = metricDefinition
        }
    }

}

extension BatchCreateRumMetricDefinitionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destination = "Destination"
        case destinationArn = "DestinationArn"
        case metricDefinitions = "MetricDefinitions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destination = self.destination {
            try encodeContainer.encode(destination.rawValue, forKey: .destination)
        }
        if let destinationArn = self.destinationArn {
            try encodeContainer.encode(destinationArn, forKey: .destinationArn)
        }
        if let metricDefinitions = metricDefinitions {
            var metricDefinitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .metricDefinitions)
            for metricdefinitionrequest0 in metricDefinitions {
                try metricDefinitionsContainer.encode(metricdefinitionrequest0)
            }
        }
    }
}

extension BatchCreateRumMetricDefinitionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let appMonitorName = appMonitorName else {
            return nil
        }
        return "/rummetrics/\(appMonitorName.urlPercentEncoding())/metrics"
    }
}

public struct BatchCreateRumMetricDefinitionsInput: Swift.Equatable {
    /// The name of the CloudWatch RUM app monitor that is to send the metrics.
    /// This member is required.
    public var appMonitorName: Swift.String?
    /// The destination to send the metrics to. Valid values are CloudWatch and Evidently. If you specify Evidently, you must also specify the ARN of the CloudWatchEvidently experiment that will receive the metrics and an IAM role that has permission to write to the experiment.
    /// This member is required.
    public var destination: RUMClientTypes.MetricDestination?
    /// This parameter is required if Destination is Evidently. If Destination is CloudWatch, do not use this parameter. This parameter specifies the ARN of the Evidently experiment that is to receive the metrics. You must have already defined this experiment as a valid destination. For more information, see [PutRumMetricsDestination](https://docs.aws.amazon.com/cloudwatchrum/latest/APIReference/API_PutRumMetricsDestination.html).
    public var destinationArn: Swift.String?
    /// An array of structures which define the metrics that you want to send.
    /// This member is required.
    public var metricDefinitions: [RUMClientTypes.MetricDefinitionRequest]?

    public init (
        appMonitorName: Swift.String? = nil,
        destination: RUMClientTypes.MetricDestination? = nil,
        destinationArn: Swift.String? = nil,
        metricDefinitions: [RUMClientTypes.MetricDefinitionRequest]? = nil
    )
    {
        self.appMonitorName = appMonitorName
        self.destination = destination
        self.destinationArn = destinationArn
        self.metricDefinitions = metricDefinitions
    }
}

struct BatchCreateRumMetricDefinitionsInputBody: Swift.Equatable {
    let destination: RUMClientTypes.MetricDestination?
    let destinationArn: Swift.String?
    let metricDefinitions: [RUMClientTypes.MetricDefinitionRequest]?
}

extension BatchCreateRumMetricDefinitionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destination = "Destination"
        case destinationArn = "DestinationArn"
        case metricDefinitions = "MetricDefinitions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationDecoded = try containerValues.decodeIfPresent(RUMClientTypes.MetricDestination.self, forKey: .destination)
        destination = destinationDecoded
        let destinationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationArn)
        destinationArn = destinationArnDecoded
        let metricDefinitionsContainer = try containerValues.decodeIfPresent([RUMClientTypes.MetricDefinitionRequest?].self, forKey: .metricDefinitions)
        var metricDefinitionsDecoded0:[RUMClientTypes.MetricDefinitionRequest]? = nil
        if let metricDefinitionsContainer = metricDefinitionsContainer {
            metricDefinitionsDecoded0 = [RUMClientTypes.MetricDefinitionRequest]()
            for structure0 in metricDefinitionsContainer {
                if let structure0 = structure0 {
                    metricDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        metricDefinitions = metricDefinitionsDecoded0
    }
}

extension BatchCreateRumMetricDefinitionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchCreateRumMetricDefinitionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum BatchCreateRumMetricDefinitionsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchCreateRumMetricDefinitionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BatchCreateRumMetricDefinitionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.errors = output.errors
            self.metricDefinitions = output.metricDefinitions
        } else {
            self.errors = nil
            self.metricDefinitions = nil
        }
    }
}

public struct BatchCreateRumMetricDefinitionsOutputResponse: Swift.Equatable {
    /// An array of error objects, if the operation caused any errors.
    /// This member is required.
    public var errors: [RUMClientTypes.BatchCreateRumMetricDefinitionsError]?
    /// An array of structures that define the extended metrics.
    public var metricDefinitions: [RUMClientTypes.MetricDefinition]?

    public init (
        errors: [RUMClientTypes.BatchCreateRumMetricDefinitionsError]? = nil,
        metricDefinitions: [RUMClientTypes.MetricDefinition]? = nil
    )
    {
        self.errors = errors
        self.metricDefinitions = metricDefinitions
    }
}

struct BatchCreateRumMetricDefinitionsOutputResponseBody: Swift.Equatable {
    let errors: [RUMClientTypes.BatchCreateRumMetricDefinitionsError]?
    let metricDefinitions: [RUMClientTypes.MetricDefinition]?
}

extension BatchCreateRumMetricDefinitionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errors = "Errors"
        case metricDefinitions = "MetricDefinitions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorsContainer = try containerValues.decodeIfPresent([RUMClientTypes.BatchCreateRumMetricDefinitionsError?].self, forKey: .errors)
        var errorsDecoded0:[RUMClientTypes.BatchCreateRumMetricDefinitionsError]? = nil
        if let errorsContainer = errorsContainer {
            errorsDecoded0 = [RUMClientTypes.BatchCreateRumMetricDefinitionsError]()
            for structure0 in errorsContainer {
                if let structure0 = structure0 {
                    errorsDecoded0?.append(structure0)
                }
            }
        }
        errors = errorsDecoded0
        let metricDefinitionsContainer = try containerValues.decodeIfPresent([RUMClientTypes.MetricDefinition?].self, forKey: .metricDefinitions)
        var metricDefinitionsDecoded0:[RUMClientTypes.MetricDefinition]? = nil
        if let metricDefinitionsContainer = metricDefinitionsContainer {
            metricDefinitionsDecoded0 = [RUMClientTypes.MetricDefinition]()
            for structure0 in metricDefinitionsContainer {
                if let structure0 = structure0 {
                    metricDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        metricDefinitions = metricDefinitionsDecoded0
    }
}

extension RUMClientTypes.BatchDeleteRumMetricDefinitionsError: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorCode = "ErrorCode"
        case errorMessage = "ErrorMessage"
        case metricDefinitionId = "MetricDefinitionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorCode = self.errorCode {
            try encodeContainer.encode(errorCode, forKey: .errorCode)
        }
        if let errorMessage = self.errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let metricDefinitionId = self.metricDefinitionId {
            try encodeContainer.encode(metricDefinitionId, forKey: .metricDefinitionId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricDefinitionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricDefinitionId)
        metricDefinitionId = metricDefinitionIdDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}

extension RUMClientTypes {
    /// A structure that defines one error caused by a [BatchCreateRumMetricsDefinitions](https://docs.aws.amazon.com/cloudwatchrum/latest/APIReference/API_BatchDeleteRumMetricsDefinitions.html) operation.
    public struct BatchDeleteRumMetricDefinitionsError: Swift.Equatable {
        /// The error code.
        /// This member is required.
        public var errorCode: Swift.String?
        /// The error message for this metric definition.
        /// This member is required.
        public var errorMessage: Swift.String?
        /// The ID of the metric definition that caused this error.
        /// This member is required.
        public var metricDefinitionId: Swift.String?

        public init (
            errorCode: Swift.String? = nil,
            errorMessage: Swift.String? = nil,
            metricDefinitionId: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.metricDefinitionId = metricDefinitionId
        }
    }

}

extension BatchDeleteRumMetricDefinitionsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            guard let destination = destination else {
                let message = "Creating a URL Query Item failed. destination is required and must not be nil."
                throw ClientRuntime.ClientError.queryItemCreationFailed(message)
            }
            let destinationQueryItem = ClientRuntime.URLQueryItem(name: "destination".urlPercentEncoding(), value: Swift.String(destination.rawValue).urlPercentEncoding())
            items.append(destinationQueryItem)
            guard let metricDefinitionIds = metricDefinitionIds else {
                let message = "Creating a URL Query Item failed. metricDefinitionIds is required and must not be nil."
                throw ClientRuntime.ClientError.queryItemCreationFailed(message)
            }
            metricDefinitionIds.forEach { queryItemValue in
                let queryItem = ClientRuntime.URLQueryItem(name: "metricDefinitionIds".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
                items.append(queryItem)
            }
            if let destinationArn = destinationArn {
                let destinationArnQueryItem = ClientRuntime.URLQueryItem(name: "destinationArn".urlPercentEncoding(), value: Swift.String(destinationArn).urlPercentEncoding())
                items.append(destinationArnQueryItem)
            }
            return items
        }
    }
}

extension BatchDeleteRumMetricDefinitionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let appMonitorName = appMonitorName else {
            return nil
        }
        return "/rummetrics/\(appMonitorName.urlPercentEncoding())/metrics"
    }
}

public struct BatchDeleteRumMetricDefinitionsInput: Swift.Equatable {
    /// The name of the CloudWatch RUM app monitor that is sending these metrics.
    /// This member is required.
    public var appMonitorName: Swift.String?
    /// Defines the destination where you want to stop sending the specified metrics. Valid values are CloudWatch and Evidently. If you specify Evidently, you must also specify the ARN of the CloudWatchEvidently experiment that is to be the destination and an IAM role that has permission to write to the experiment.
    /// This member is required.
    public var destination: RUMClientTypes.MetricDestination?
    /// This parameter is required if Destination is Evidently. If Destination is CloudWatch, do not use this parameter. This parameter specifies the ARN of the Evidently experiment that was receiving the metrics that are being deleted.
    public var destinationArn: Swift.String?
    /// An array of structures which define the metrics that you want to stop sending.
    /// This member is required.
    public var metricDefinitionIds: [Swift.String]?

    public init (
        appMonitorName: Swift.String? = nil,
        destination: RUMClientTypes.MetricDestination? = nil,
        destinationArn: Swift.String? = nil,
        metricDefinitionIds: [Swift.String]? = nil
    )
    {
        self.appMonitorName = appMonitorName
        self.destination = destination
        self.destinationArn = destinationArn
        self.metricDefinitionIds = metricDefinitionIds
    }
}

struct BatchDeleteRumMetricDefinitionsInputBody: Swift.Equatable {
}

extension BatchDeleteRumMetricDefinitionsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension BatchDeleteRumMetricDefinitionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchDeleteRumMetricDefinitionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum BatchDeleteRumMetricDefinitionsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchDeleteRumMetricDefinitionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BatchDeleteRumMetricDefinitionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.errors = output.errors
            self.metricDefinitionIds = output.metricDefinitionIds
        } else {
            self.errors = nil
            self.metricDefinitionIds = nil
        }
    }
}

public struct BatchDeleteRumMetricDefinitionsOutputResponse: Swift.Equatable {
    /// An array of error objects, if the operation caused any errors.
    /// This member is required.
    public var errors: [RUMClientTypes.BatchDeleteRumMetricDefinitionsError]?
    /// The IDs of the metric definitions that were deleted.
    public var metricDefinitionIds: [Swift.String]?

    public init (
        errors: [RUMClientTypes.BatchDeleteRumMetricDefinitionsError]? = nil,
        metricDefinitionIds: [Swift.String]? = nil
    )
    {
        self.errors = errors
        self.metricDefinitionIds = metricDefinitionIds
    }
}

struct BatchDeleteRumMetricDefinitionsOutputResponseBody: Swift.Equatable {
    let errors: [RUMClientTypes.BatchDeleteRumMetricDefinitionsError]?
    let metricDefinitionIds: [Swift.String]?
}

extension BatchDeleteRumMetricDefinitionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errors = "Errors"
        case metricDefinitionIds = "MetricDefinitionIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorsContainer = try containerValues.decodeIfPresent([RUMClientTypes.BatchDeleteRumMetricDefinitionsError?].self, forKey: .errors)
        var errorsDecoded0:[RUMClientTypes.BatchDeleteRumMetricDefinitionsError]? = nil
        if let errorsContainer = errorsContainer {
            errorsDecoded0 = [RUMClientTypes.BatchDeleteRumMetricDefinitionsError]()
            for structure0 in errorsContainer {
                if let structure0 = structure0 {
                    errorsDecoded0?.append(structure0)
                }
            }
        }
        errors = errorsDecoded0
        let metricDefinitionIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .metricDefinitionIds)
        var metricDefinitionIdsDecoded0:[Swift.String]? = nil
        if let metricDefinitionIdsContainer = metricDefinitionIdsContainer {
            metricDefinitionIdsDecoded0 = [Swift.String]()
            for string0 in metricDefinitionIdsContainer {
                if let string0 = string0 {
                    metricDefinitionIdsDecoded0?.append(string0)
                }
            }
        }
        metricDefinitionIds = metricDefinitionIdsDecoded0
    }
}

extension BatchGetRumMetricDefinitionsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            guard let destination = destination else {
                let message = "Creating a URL Query Item failed. destination is required and must not be nil."
                throw ClientRuntime.ClientError.queryItemCreationFailed(message)
            }
            let destinationQueryItem = ClientRuntime.URLQueryItem(name: "destination".urlPercentEncoding(), value: Swift.String(destination.rawValue).urlPercentEncoding())
            items.append(destinationQueryItem)
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            if let destinationArn = destinationArn {
                let destinationArnQueryItem = ClientRuntime.URLQueryItem(name: "destinationArn".urlPercentEncoding(), value: Swift.String(destinationArn).urlPercentEncoding())
                items.append(destinationArnQueryItem)
            }
            return items
        }
    }
}

extension BatchGetRumMetricDefinitionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let appMonitorName = appMonitorName else {
            return nil
        }
        return "/rummetrics/\(appMonitorName.urlPercentEncoding())/metrics"
    }
}

public struct BatchGetRumMetricDefinitionsInput: Swift.Equatable {
    /// The name of the CloudWatch RUM app monitor that is sending the metrics.
    /// This member is required.
    public var appMonitorName: Swift.String?
    /// The type of destination that you want to view metrics for. Valid values are CloudWatch and Evidently.
    /// This member is required.
    public var destination: RUMClientTypes.MetricDestination?
    /// This parameter is required if Destination is Evidently. If Destination is CloudWatch, do not use this parameter. This parameter specifies the ARN of the Evidently experiment that corresponds to the destination.
    public var destinationArn: Swift.String?
    /// The maximum number of results to return in one operation. The default is 50. The maximum that you can specify is 100. To retrieve the remaining results, make another call with the returned NextToken value.
    public var maxResults: Swift.Int?
    /// Use the token returned by the previous operation to request the next page of results.
    public var nextToken: Swift.String?

    public init (
        appMonitorName: Swift.String? = nil,
        destination: RUMClientTypes.MetricDestination? = nil,
        destinationArn: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.appMonitorName = appMonitorName
        self.destination = destination
        self.destinationArn = destinationArn
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct BatchGetRumMetricDefinitionsInputBody: Swift.Equatable {
}

extension BatchGetRumMetricDefinitionsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension BatchGetRumMetricDefinitionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchGetRumMetricDefinitionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum BatchGetRumMetricDefinitionsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchGetRumMetricDefinitionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BatchGetRumMetricDefinitionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.metricDefinitions = output.metricDefinitions
            self.nextToken = output.nextToken
        } else {
            self.metricDefinitions = nil
            self.nextToken = nil
        }
    }
}

public struct BatchGetRumMetricDefinitionsOutputResponse: Swift.Equatable {
    /// An array of structures that display information about the metrics that are sent by the specified app monitor to the specified destination.
    public var metricDefinitions: [RUMClientTypes.MetricDefinition]?
    /// A token that you can use in a subsequent operation to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init (
        metricDefinitions: [RUMClientTypes.MetricDefinition]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.metricDefinitions = metricDefinitions
        self.nextToken = nextToken
    }
}

struct BatchGetRumMetricDefinitionsOutputResponseBody: Swift.Equatable {
    let metricDefinitions: [RUMClientTypes.MetricDefinition]?
    let nextToken: Swift.String?
}

extension BatchGetRumMetricDefinitionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricDefinitions = "MetricDefinitions"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricDefinitionsContainer = try containerValues.decodeIfPresent([RUMClientTypes.MetricDefinition?].self, forKey: .metricDefinitions)
        var metricDefinitionsDecoded0:[RUMClientTypes.MetricDefinition]? = nil
        if let metricDefinitionsContainer = metricDefinitionsContainer {
            metricDefinitionsDecoded0 = [RUMClientTypes.MetricDefinition]()
            for structure0 in metricDefinitionsContainer {
                if let structure0 = structure0 {
                    metricDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        metricDefinitions = metricDefinitionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ConflictException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ConflictExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.resourceName = output.resourceName
            self.resourceType = output.resourceType
        } else {
            self.message = nil
            self.resourceName = nil
            self.resourceType = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This operation attempted to create a resource that already exists.
public struct ConflictException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// This member is required.
    public var message: Swift.String?
    /// The name of the resource that is associated with the error.
    /// This member is required.
    public var resourceName: Swift.String?
    /// The type of the resource that is associated with the error.
    public var resourceType: Swift.String?

    public init (
        message: Swift.String? = nil,
        resourceName: Swift.String? = nil,
        resourceType: Swift.String? = nil
    )
    {
        self.message = message
        self.resourceName = resourceName
        self.resourceType = resourceType
    }
}

struct ConflictExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let resourceName: Swift.String?
    let resourceType: Swift.String?
}

extension ConflictExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
        case resourceName
        case resourceType
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
    }
}

extension CreateAppMonitorInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appMonitorConfiguration = "AppMonitorConfiguration"
        case customEvents = "CustomEvents"
        case cwLogEnabled = "CwLogEnabled"
        case domain = "Domain"
        case name = "Name"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appMonitorConfiguration = self.appMonitorConfiguration {
            try encodeContainer.encode(appMonitorConfiguration, forKey: .appMonitorConfiguration)
        }
        if let customEvents = self.customEvents {
            try encodeContainer.encode(customEvents, forKey: .customEvents)
        }
        if let cwLogEnabled = self.cwLogEnabled {
            try encodeContainer.encode(cwLogEnabled, forKey: .cwLogEnabled)
        }
        if let domain = self.domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagMap0) in tags {
                try tagsContainer.encode(tagMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension CreateAppMonitorInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/appmonitor"
    }
}

public struct CreateAppMonitorInput: Swift.Equatable {
    /// A structure that contains much of the configuration data for the app monitor. If you are using Amazon Cognito for authorization, you must include this structure in your request, and it must include the ID of the Amazon Cognito identity pool to use for authorization. If you don't include AppMonitorConfiguration, you must set up your own authorization method. For more information, see [Authorize your application to send data to Amazon Web Services](https://docs.aws.amazon.com/monitoring/CloudWatch-RUM-get-started-authorization.html). If you omit this argument, the sample rate used for RUM is set to 10% of the user sessions.
    public var appMonitorConfiguration: RUMClientTypes.AppMonitorConfiguration?
    /// Specifies whether this app monitor allows the web client to define and send custom events. If you omit this parameter, custom events are DISABLED. For more information about custom events, see [Send custom events](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-RUM-custom-events.html).
    public var customEvents: RUMClientTypes.CustomEvents?
    /// Data collected by RUM is kept by RUM for 30 days and then deleted. This parameter specifies whether RUM sends a copy of this telemetry data to Amazon CloudWatch Logs in your account. This enables you to keep the telemetry data for more than 30 days, but it does incur Amazon CloudWatch Logs charges. If you omit this parameter, the default is false.
    public var cwLogEnabled: Swift.Bool?
    /// The top-level internet domain name for which your application has administrative authority.
    /// This member is required.
    public var domain: Swift.String?
    /// A name for the app monitor.
    /// This member is required.
    public var name: Swift.String?
    /// Assigns one or more tags (key-value pairs) to the app monitor. Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values. Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters. You can associate as many as 50 tags with an app monitor. For more information, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).
    public var tags: [Swift.String:Swift.String]?

    public init (
        appMonitorConfiguration: RUMClientTypes.AppMonitorConfiguration? = nil,
        customEvents: RUMClientTypes.CustomEvents? = nil,
        cwLogEnabled: Swift.Bool? = nil,
        domain: Swift.String? = nil,
        name: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.appMonitorConfiguration = appMonitorConfiguration
        self.customEvents = customEvents
        self.cwLogEnabled = cwLogEnabled
        self.domain = domain
        self.name = name
        self.tags = tags
    }
}

struct CreateAppMonitorInputBody: Swift.Equatable {
    let name: Swift.String?
    let domain: Swift.String?
    let tags: [Swift.String:Swift.String]?
    let appMonitorConfiguration: RUMClientTypes.AppMonitorConfiguration?
    let cwLogEnabled: Swift.Bool?
    let customEvents: RUMClientTypes.CustomEvents?
}

extension CreateAppMonitorInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appMonitorConfiguration = "AppMonitorConfiguration"
        case customEvents = "CustomEvents"
        case cwLogEnabled = "CwLogEnabled"
        case domain = "Domain"
        case name = "Name"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let appMonitorConfigurationDecoded = try containerValues.decodeIfPresent(RUMClientTypes.AppMonitorConfiguration.self, forKey: .appMonitorConfiguration)
        appMonitorConfiguration = appMonitorConfigurationDecoded
        let cwLogEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .cwLogEnabled)
        cwLogEnabled = cwLogEnabledDecoded
        let customEventsDecoded = try containerValues.decodeIfPresent(RUMClientTypes.CustomEvents.self, forKey: .customEvents)
        customEvents = customEventsDecoded
    }
}

extension CreateAppMonitorOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateAppMonitorOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateAppMonitorOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateAppMonitorOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateAppMonitorOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.id = output.id
        } else {
            self.id = nil
        }
    }
}

public struct CreateAppMonitorOutputResponse: Swift.Equatable {
    /// The unique ID of the new app monitor.
    public var id: Swift.String?

    public init (
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

struct CreateAppMonitorOutputResponseBody: Swift.Equatable {
    let id: Swift.String?
}

extension CreateAppMonitorOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
    }
}

extension RUMClientTypes.CustomEvents: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(RUMClientTypes.CustomEventsStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension RUMClientTypes {
    /// A structure that contains information about custom events for this app monitor.
    public struct CustomEvents: Swift.Equatable {
        /// Specifies whether this app monitor allows the web client to define and send custom events. The default is for custom events to be DISABLED.
        public var status: RUMClientTypes.CustomEventsStatus?

        public init (
            status: RUMClientTypes.CustomEventsStatus? = nil
        )
        {
            self.status = status
        }
    }

}

extension RUMClientTypes {
    public enum CustomEventsStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [CustomEventsStatus] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CustomEventsStatus(rawValue: rawValue) ?? CustomEventsStatus.sdkUnknown(rawValue)
        }
    }
}

extension RUMClientTypes.CwLog: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cwLogEnabled = "CwLogEnabled"
        case cwLogGroup = "CwLogGroup"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cwLogEnabled = self.cwLogEnabled {
            try encodeContainer.encode(cwLogEnabled, forKey: .cwLogEnabled)
        }
        if let cwLogGroup = self.cwLogGroup {
            try encodeContainer.encode(cwLogGroup, forKey: .cwLogGroup)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cwLogEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .cwLogEnabled)
        cwLogEnabled = cwLogEnabledDecoded
        let cwLogGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cwLogGroup)
        cwLogGroup = cwLogGroupDecoded
    }
}

extension RUMClientTypes {
    /// A structure that contains the information about whether the app monitor stores copies of the data that RUM collects in CloudWatch Logs. If it does, this structure also contains the name of the log group.
    public struct CwLog: Swift.Equatable {
        /// Indicated whether the app monitor stores copies of the data that RUM collects in CloudWatch Logs.
        public var cwLogEnabled: Swift.Bool?
        /// The name of the log group where the copies are stored.
        public var cwLogGroup: Swift.String?

        public init (
            cwLogEnabled: Swift.Bool? = nil,
            cwLogGroup: Swift.String? = nil
        )
        {
            self.cwLogEnabled = cwLogEnabled
            self.cwLogGroup = cwLogGroup
        }
    }

}

extension RUMClientTypes.DataStorage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cwLog = "CwLog"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cwLog = self.cwLog {
            try encodeContainer.encode(cwLog, forKey: .cwLog)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cwLogDecoded = try containerValues.decodeIfPresent(RUMClientTypes.CwLog.self, forKey: .cwLog)
        cwLog = cwLogDecoded
    }
}

extension RUMClientTypes {
    /// A structure that contains information about whether this app monitor stores a copy of the telemetry data that RUM collects using CloudWatch Logs.
    public struct DataStorage: Swift.Equatable {
        /// A structure that contains the information about whether the app monitor stores copies of the data that RUM collects in CloudWatch Logs. If it does, this structure also contains the name of the log group.
        public var cwLog: RUMClientTypes.CwLog?

        public init (
            cwLog: RUMClientTypes.CwLog? = nil
        )
        {
            self.cwLog = cwLog
        }
    }

}

extension DeleteAppMonitorInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let name = name else {
            return nil
        }
        return "/appmonitor/\(name.urlPercentEncoding())"
    }
}

public struct DeleteAppMonitorInput: Swift.Equatable {
    /// The name of the app monitor to delete.
    /// This member is required.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct DeleteAppMonitorInputBody: Swift.Equatable {
}

extension DeleteAppMonitorInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteAppMonitorOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteAppMonitorOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteAppMonitorOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteAppMonitorOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteAppMonitorOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteRumMetricsDestinationInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            guard let destination = destination else {
                let message = "Creating a URL Query Item failed. destination is required and must not be nil."
                throw ClientRuntime.ClientError.queryItemCreationFailed(message)
            }
            let destinationQueryItem = ClientRuntime.URLQueryItem(name: "destination".urlPercentEncoding(), value: Swift.String(destination.rawValue).urlPercentEncoding())
            items.append(destinationQueryItem)
            if let destinationArn = destinationArn {
                let destinationArnQueryItem = ClientRuntime.URLQueryItem(name: "destinationArn".urlPercentEncoding(), value: Swift.String(destinationArn).urlPercentEncoding())
                items.append(destinationArnQueryItem)
            }
            return items
        }
    }
}

extension DeleteRumMetricsDestinationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let appMonitorName = appMonitorName else {
            return nil
        }
        return "/rummetrics/\(appMonitorName.urlPercentEncoding())/metricsdestination"
    }
}

public struct DeleteRumMetricsDestinationInput: Swift.Equatable {
    /// The name of the app monitor that is sending metrics to the destination that you want to delete.
    /// This member is required.
    public var appMonitorName: Swift.String?
    /// The type of destination to delete. Valid values are CloudWatch and Evidently.
    /// This member is required.
    public var destination: RUMClientTypes.MetricDestination?
    /// This parameter is required if Destination is Evidently. If Destination is CloudWatch, do not use this parameter. This parameter specifies the ARN of the Evidently experiment that corresponds to the destination to delete.
    public var destinationArn: Swift.String?

    public init (
        appMonitorName: Swift.String? = nil,
        destination: RUMClientTypes.MetricDestination? = nil,
        destinationArn: Swift.String? = nil
    )
    {
        self.appMonitorName = appMonitorName
        self.destination = destination
        self.destinationArn = destinationArn
    }
}

struct DeleteRumMetricsDestinationInputBody: Swift.Equatable {
}

extension DeleteRumMetricsDestinationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteRumMetricsDestinationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteRumMetricsDestinationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteRumMetricsDestinationOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteRumMetricsDestinationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteRumMetricsDestinationOutputResponse: Swift.Equatable {

    public init () { }
}

extension GetAppMonitorDataInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case timeRange = "TimeRange"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for queryfilter0 in filters {
                try filtersContainer.encode(queryfilter0)
            }
        }
        if maxResults != 0 {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let timeRange = self.timeRange {
            try encodeContainer.encode(timeRange, forKey: .timeRange)
        }
    }
}

extension GetAppMonitorDataInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let name = name else {
            return nil
        }
        return "/appmonitor/\(name.urlPercentEncoding())/data"
    }
}

public struct GetAppMonitorDataInput: Swift.Equatable {
    /// An array of structures that you can use to filter the results to those that match one or more sets of key-value pairs that you specify.
    public var filters: [RUMClientTypes.QueryFilter]?
    /// The maximum number of results to return in one operation.
    public var maxResults: Swift.Int
    /// The name of the app monitor that collected the data that you want to retrieve.
    /// This member is required.
    public var name: Swift.String?
    /// Use the token returned by the previous operation to request the next page of results.
    public var nextToken: Swift.String?
    /// A structure that defines the time range that you want to retrieve results from.
    /// This member is required.
    public var timeRange: RUMClientTypes.TimeRange?

    public init (
        filters: [RUMClientTypes.QueryFilter]? = nil,
        maxResults: Swift.Int = 0,
        name: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        timeRange: RUMClientTypes.TimeRange? = nil
    )
    {
        self.filters = filters
        self.maxResults = maxResults
        self.name = name
        self.nextToken = nextToken
        self.timeRange = timeRange
    }
}

struct GetAppMonitorDataInputBody: Swift.Equatable {
    let timeRange: RUMClientTypes.TimeRange?
    let filters: [RUMClientTypes.QueryFilter]?
    let maxResults: Swift.Int
    let nextToken: Swift.String?
}

extension GetAppMonitorDataInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case timeRange = "TimeRange"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timeRangeDecoded = try containerValues.decodeIfPresent(RUMClientTypes.TimeRange.self, forKey: .timeRange)
        timeRange = timeRangeDecoded
        let filtersContainer = try containerValues.decodeIfPresent([RUMClientTypes.QueryFilter?].self, forKey: .filters)
        var filtersDecoded0:[RUMClientTypes.QueryFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [RUMClientTypes.QueryFilter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults) ?? 0
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetAppMonitorDataOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetAppMonitorDataOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetAppMonitorDataOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetAppMonitorDataOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetAppMonitorDataOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.events = output.events
            self.nextToken = output.nextToken
        } else {
            self.events = nil
            self.nextToken = nil
        }
    }
}

public struct GetAppMonitorDataOutputResponse: Swift.Equatable {
    /// The events that RUM collected that match your request.
    public var events: [Swift.String]?
    /// A token that you can use in a subsequent operation to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init (
        events: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.events = events
        self.nextToken = nextToken
    }
}

struct GetAppMonitorDataOutputResponseBody: Swift.Equatable {
    let events: [Swift.String]?
    let nextToken: Swift.String?
}

extension GetAppMonitorDataOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case events = "Events"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .events)
        var eventsDecoded0:[Swift.String]? = nil
        if let eventsContainer = eventsContainer {
            eventsDecoded0 = [Swift.String]()
            for string0 in eventsContainer {
                if let string0 = string0 {
                    eventsDecoded0?.append(string0)
                }
            }
        }
        events = eventsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetAppMonitorInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let name = name else {
            return nil
        }
        return "/appmonitor/\(name.urlPercentEncoding())"
    }
}

public struct GetAppMonitorInput: Swift.Equatable {
    /// The app monitor to retrieve information for.
    /// This member is required.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct GetAppMonitorInputBody: Swift.Equatable {
}

extension GetAppMonitorInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetAppMonitorOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetAppMonitorOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetAppMonitorOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetAppMonitorOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetAppMonitorOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.appMonitor = output.appMonitor
        } else {
            self.appMonitor = nil
        }
    }
}

public struct GetAppMonitorOutputResponse: Swift.Equatable {
    /// A structure containing all the configuration information for the app monitor.
    public var appMonitor: RUMClientTypes.AppMonitor?

    public init (
        appMonitor: RUMClientTypes.AppMonitor? = nil
    )
    {
        self.appMonitor = appMonitor
    }
}

struct GetAppMonitorOutputResponseBody: Swift.Equatable {
    let appMonitor: RUMClientTypes.AppMonitor?
}

extension GetAppMonitorOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appMonitor = "AppMonitor"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let appMonitorDecoded = try containerValues.decodeIfPresent(RUMClientTypes.AppMonitor.self, forKey: .appMonitor)
        appMonitor = appMonitorDecoded
    }
}

extension InternalServerException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let retryAfterSecondsHeaderValue = httpResponse.headers.value(for: "Retry-After") {
            self.retryAfterSeconds = Swift.Int(retryAfterSecondsHeaderValue) ?? 0
        } else {
            self.retryAfterSeconds = nil
        }
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InternalServerExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Internal service exception.
public struct InternalServerException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = true
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    /// This member is required.
    public var message: Swift.String?
    /// The value of a parameter in the request caused an error.
    public var retryAfterSeconds: Swift.Int?

    public init (
        message: Swift.String? = nil,
        retryAfterSeconds: Swift.Int? = nil
    )
    {
        self.message = message
        self.retryAfterSeconds = retryAfterSeconds
    }
}

struct InternalServerExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InternalServerExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ListAppMonitorsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            return items
        }
    }
}

extension ListAppMonitorsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/appmonitors"
    }
}

public struct ListAppMonitorsInput: Swift.Equatable {
    /// The maximum number of results to return in one operation. The default is 50. The maximum that you can specify is 100.
    public var maxResults: Swift.Int?
    /// Use the token returned by the previous operation to request the next page of results.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListAppMonitorsInputBody: Swift.Equatable {
}

extension ListAppMonitorsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListAppMonitorsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListAppMonitorsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListAppMonitorsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListAppMonitorsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListAppMonitorsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.appMonitorSummaries = output.appMonitorSummaries
            self.nextToken = output.nextToken
        } else {
            self.appMonitorSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListAppMonitorsOutputResponse: Swift.Equatable {
    /// An array of structures that contain information about the returned app monitors.
    public var appMonitorSummaries: [RUMClientTypes.AppMonitorSummary]?
    /// A token that you can use in a subsequent operation to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init (
        appMonitorSummaries: [RUMClientTypes.AppMonitorSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.appMonitorSummaries = appMonitorSummaries
        self.nextToken = nextToken
    }
}

struct ListAppMonitorsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let appMonitorSummaries: [RUMClientTypes.AppMonitorSummary]?
}

extension ListAppMonitorsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appMonitorSummaries = "AppMonitorSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let appMonitorSummariesContainer = try containerValues.decodeIfPresent([RUMClientTypes.AppMonitorSummary?].self, forKey: .appMonitorSummaries)
        var appMonitorSummariesDecoded0:[RUMClientTypes.AppMonitorSummary]? = nil
        if let appMonitorSummariesContainer = appMonitorSummariesContainer {
            appMonitorSummariesDecoded0 = [RUMClientTypes.AppMonitorSummary]()
            for structure0 in appMonitorSummariesContainer {
                if let structure0 = structure0 {
                    appMonitorSummariesDecoded0?.append(structure0)
                }
            }
        }
        appMonitorSummaries = appMonitorSummariesDecoded0
    }
}

extension ListRumMetricsDestinationsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            return items
        }
    }
}

extension ListRumMetricsDestinationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let appMonitorName = appMonitorName else {
            return nil
        }
        return "/rummetrics/\(appMonitorName.urlPercentEncoding())/metricsdestination"
    }
}

public struct ListRumMetricsDestinationsInput: Swift.Equatable {
    /// The name of the app monitor associated with the destinations that you want to retrieve.
    /// This member is required.
    public var appMonitorName: Swift.String?
    /// The maximum number of results to return in one operation. The default is 50. The maximum that you can specify is 100. To retrieve the remaining results, make another call with the returned NextToken value.
    public var maxResults: Swift.Int?
    /// Use the token returned by the previous operation to request the next page of results.
    public var nextToken: Swift.String?

    public init (
        appMonitorName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.appMonitorName = appMonitorName
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListRumMetricsDestinationsInputBody: Swift.Equatable {
}

extension ListRumMetricsDestinationsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListRumMetricsDestinationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListRumMetricsDestinationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListRumMetricsDestinationsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListRumMetricsDestinationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListRumMetricsDestinationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.destinations = output.destinations
            self.nextToken = output.nextToken
        } else {
            self.destinations = nil
            self.nextToken = nil
        }
    }
}

public struct ListRumMetricsDestinationsOutputResponse: Swift.Equatable {
    /// The list of CloudWatch RUM extended metrics destinations associated with the app monitor that you specified.
    public var destinations: [RUMClientTypes.MetricDestinationSummary]?
    /// A token that you can use in a subsequent operation to retrieve the next set of results.
    public var nextToken: Swift.String?

    public init (
        destinations: [RUMClientTypes.MetricDestinationSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.destinations = destinations
        self.nextToken = nextToken
    }
}

struct ListRumMetricsDestinationsOutputResponseBody: Swift.Equatable {
    let destinations: [RUMClientTypes.MetricDestinationSummary]?
    let nextToken: Swift.String?
}

extension ListRumMetricsDestinationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinations = "Destinations"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationsContainer = try containerValues.decodeIfPresent([RUMClientTypes.MetricDestinationSummary?].self, forKey: .destinations)
        var destinationsDecoded0:[RUMClientTypes.MetricDestinationSummary]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [RUMClientTypes.MetricDestinationSummary]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTagsForResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let resourceArn = resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

public struct ListTagsForResourceInput: Swift.Equatable {
    /// The ARN of the resource that you want to see the tags of.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
}

extension ListTagsForResourceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.resourceArn = output.resourceArn
            self.tags = output.tags
        } else {
            self.resourceArn = nil
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// The ARN of the resource that you are viewing.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The list of tag keys and values associated with the resource you specified.
    /// This member is required.
    public var tags: [Swift.String:Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension RUMClientTypes.MetricDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dimensionKeys = "DimensionKeys"
        case eventPattern = "EventPattern"
        case metricDefinitionId = "MetricDefinitionId"
        case name = "Name"
        case namespace = "Namespace"
        case unitLabel = "UnitLabel"
        case valueKey = "ValueKey"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dimensionKeys = dimensionKeys {
            var dimensionKeysContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .dimensionKeys)
            for (dictKey0, dimensionKeysMap0) in dimensionKeys {
                try dimensionKeysContainer.encode(dimensionKeysMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let eventPattern = self.eventPattern {
            try encodeContainer.encode(eventPattern, forKey: .eventPattern)
        }
        if let metricDefinitionId = self.metricDefinitionId {
            try encodeContainer.encode(metricDefinitionId, forKey: .metricDefinitionId)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let namespace = self.namespace {
            try encodeContainer.encode(namespace, forKey: .namespace)
        }
        if let unitLabel = self.unitLabel {
            try encodeContainer.encode(unitLabel, forKey: .unitLabel)
        }
        if let valueKey = self.valueKey {
            try encodeContainer.encode(valueKey, forKey: .valueKey)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricDefinitionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricDefinitionId)
        metricDefinitionId = metricDefinitionIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .valueKey)
        valueKey = valueKeyDecoded
        let unitLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .unitLabel)
        unitLabel = unitLabelDecoded
        let dimensionKeysContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .dimensionKeys)
        var dimensionKeysDecoded0: [Swift.String:Swift.String]? = nil
        if let dimensionKeysContainer = dimensionKeysContainer {
            dimensionKeysDecoded0 = [Swift.String:Swift.String]()
            for (key0, dimensionname0) in dimensionKeysContainer {
                if let dimensionname0 = dimensionname0 {
                    dimensionKeysDecoded0?[key0] = dimensionname0
                }
            }
        }
        dimensionKeys = dimensionKeysDecoded0
        let eventPatternDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventPattern)
        eventPattern = eventPatternDecoded
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
    }
}

extension RUMClientTypes {
    /// A structure that displays the definition of one extended metric that RUM sends to CloudWatch or CloudWatch Evidently. For more information, see [ Additional metrics that you can send to CloudWatch and CloudWatch Evidently](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-RUM-vended-metrics.html).
    public struct MetricDefinition: Swift.Equatable {
        /// This field is a map of field paths to dimension names. It defines the dimensions to associate with this metric in CloudWatch The value of this field is used only if the metric destination is CloudWatch. If the metric destination is Evidently, the value of DimensionKeys is ignored.
        public var dimensionKeys: [Swift.String:Swift.String]?
        /// The pattern that defines the metric. RUM checks events that happen in a user's session against the pattern, and events that match the pattern are sent to the metric destination. If the metrics destination is CloudWatch and the event also matches a value in DimensionKeys, then the metric is published with the specified dimensions.
        public var eventPattern: Swift.String?
        /// The ID of this metric definition.
        /// This member is required.
        public var metricDefinitionId: Swift.String?
        /// The name of the metric that is defined in this structure.
        /// This member is required.
        public var name: Swift.String?
        /// If this metric definition is for a custom metric instead of an extended metric, this field displays the metric namespace that the custom metric is published to.
        public var namespace: Swift.String?
        /// Use this field only if you are sending this metric to CloudWatch. It defines the CloudWatch metric unit that this metric is measured in.
        public var unitLabel: Swift.String?
        /// The field within the event object that the metric value is sourced from.
        public var valueKey: Swift.String?

        public init (
            dimensionKeys: [Swift.String:Swift.String]? = nil,
            eventPattern: Swift.String? = nil,
            metricDefinitionId: Swift.String? = nil,
            name: Swift.String? = nil,
            namespace: Swift.String? = nil,
            unitLabel: Swift.String? = nil,
            valueKey: Swift.String? = nil
        )
        {
            self.dimensionKeys = dimensionKeys
            self.eventPattern = eventPattern
            self.metricDefinitionId = metricDefinitionId
            self.name = name
            self.namespace = namespace
            self.unitLabel = unitLabel
            self.valueKey = valueKey
        }
    }

}

extension RUMClientTypes.MetricDefinitionRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dimensionKeys = "DimensionKeys"
        case eventPattern = "EventPattern"
        case name = "Name"
        case namespace = "Namespace"
        case unitLabel = "UnitLabel"
        case valueKey = "ValueKey"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dimensionKeys = dimensionKeys {
            var dimensionKeysContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .dimensionKeys)
            for (dictKey0, dimensionKeysMap0) in dimensionKeys {
                try dimensionKeysContainer.encode(dimensionKeysMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let eventPattern = self.eventPattern {
            try encodeContainer.encode(eventPattern, forKey: .eventPattern)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let namespace = self.namespace {
            try encodeContainer.encode(namespace, forKey: .namespace)
        }
        if let unitLabel = self.unitLabel {
            try encodeContainer.encode(unitLabel, forKey: .unitLabel)
        }
        if let valueKey = self.valueKey {
            try encodeContainer.encode(valueKey, forKey: .valueKey)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .valueKey)
        valueKey = valueKeyDecoded
        let unitLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .unitLabel)
        unitLabel = unitLabelDecoded
        let dimensionKeysContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .dimensionKeys)
        var dimensionKeysDecoded0: [Swift.String:Swift.String]? = nil
        if let dimensionKeysContainer = dimensionKeysContainer {
            dimensionKeysDecoded0 = [Swift.String:Swift.String]()
            for (key0, dimensionname0) in dimensionKeysContainer {
                if let dimensionname0 = dimensionname0 {
                    dimensionKeysDecoded0?[key0] = dimensionname0
                }
            }
        }
        dimensionKeys = dimensionKeysDecoded0
        let eventPatternDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventPattern)
        eventPattern = eventPatternDecoded
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
    }
}

extension RUMClientTypes {
    /// Use this structure to define one extended metric or custom metric that RUM will send to CloudWatch or CloudWatch Evidently. For more information, see [ Additional metrics that you can send to CloudWatch and CloudWatch Evidently](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-RUM-vended-metrics.html). This structure is validated differently for extended metrics and custom metrics. For extended metrics that are sent to the AWS/RUM namespace, the following validations apply:
    ///
    /// * The Namespace parameter must be omitted or set to AWS/RUM.
    ///
    /// * Only certain combinations of values for Name, ValueKey, and EventPattern are valid. In addition to what is displayed in the list below, the EventPattern can also include information used by the DimensionKeys field.
    ///
    /// * If Name is PerformanceNavigationDuration, then ValueKeymust be event_details.duration and the EventPattern must include {"event_type":["com.amazon.rum.performance_navigation_event"]}
    ///
    /// * If Name is PerformanceResourceDuration, then ValueKeymust be event_details.duration and the EventPattern must include {"event_type":["com.amazon.rum.performance_resource_event"]}
    ///
    /// * If Name is NavigationSatisfiedTransaction, then ValueKeymust be null and the EventPattern must include { "event_type": ["com.amazon.rum.performance_navigation_event"], "event_details": { "duration": [{ "numeric": [">",2000] }] } }
    ///
    /// * If Name is NavigationToleratedTransaction, then ValueKeymust be null and the EventPattern must include { "event_type": ["com.amazon.rum.performance_navigation_event"], "event_details": { "duration": [{ "numeric": [">=",2000,"<"8000] }] } }
    ///
    /// * If Name is NavigationFrustratedTransaction, then ValueKeymust be null and the EventPattern must include { "event_type": ["com.amazon.rum.performance_navigation_event"], "event_details": { "duration": [{ "numeric": [">=",8000] }] } }
    ///
    /// * If Name is WebVitalsCumulativeLayoutShift, then ValueKeymust be event_details.value and the EventPattern must include {"event_type":["com.amazon.rum.cumulative_layout_shift_event"]}
    ///
    /// * If Name is WebVitalsFirstInputDelay, then ValueKeymust be event_details.value and the EventPattern must include {"event_type":["com.amazon.rum.first_input_delay_event"]}
    ///
    /// * If Name is WebVitalsLargestContentfulPaint, then ValueKeymust be event_details.value and the EventPattern must include {"event_type":["com.amazon.rum.largest_contentful_paint_event"]}
    ///
    /// * If Name is JsErrorCount, then ValueKeymust be null and the EventPattern must include {"event_type":["com.amazon.rum.js_error_event"]}
    ///
    /// * If Name is HttpErrorCount, then ValueKeymust be null and the EventPattern must include {"event_type":["com.amazon.rum.http_event"]}
    ///
    /// * If Name is SessionCount, then ValueKeymust be null and the EventPattern must include {"event_type":["com.amazon.rum.session_start_event"]}
    ///
    ///
    ///
    ///
    ///
    /// For custom metrics, the following validation rules apply:
    ///
    /// * The namespace can't be omitted and can't be AWS/RUM. You can use the AWS/RUM namespace only for extended metrics.
    ///
    /// * All dimensions listed in the DimensionKeys field must be present in the value of EventPattern.
    ///
    /// * The values that you specify for ValueKey, EventPattern, and DimensionKeys must be fields in RUM events, so all first-level keys in these fields must be one of the keys in the list later in this section.
    ///
    /// * If you set a value for EventPattern, it must be a JSON object.
    ///
    /// * For every non-empty event_details, there must be a non-empty event_type.
    ///
    /// * If EventPattern contains an event_details field, it must also contain an event_type. For every built-in event_type that you use, you must use a value for event_details that corresponds to that event_type. For information about event details that correspond to event types, see [ RUM event details](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-RUM-datacollected.html#CloudWatch-RUM-datacollected-eventDetails).
    ///
    /// * In EventPattern, any JSON array must contain only one value.
    ///
    ///
    /// Valid key values for first-level keys in the ValueKey, EventPattern, and DimensionKeys fields:
    ///
    /// * account_id
    ///
    /// * application_Id
    ///
    /// * application_version
    ///
    /// * application_name
    ///
    /// * batch_id
    ///
    /// * event_details
    ///
    /// * event_id
    ///
    /// * event_interaction
    ///
    /// * event_timestamp
    ///
    /// * event_type
    ///
    /// * event_version
    ///
    /// * log_stream
    ///
    /// * metadata
    ///
    /// * sessionId
    ///
    /// * user_details
    ///
    /// * userId
    public struct MetricDefinitionRequest: Swift.Equatable {
        /// Use this field only if you are sending the metric to CloudWatch. This field is a map of field paths to dimension names. It defines the dimensions to associate with this metric in CloudWatch. For extended metrics, valid values for the entries in this field are the following:
        ///
        /// * "metadata.pageId": "PageId"
        ///
        /// * "metadata.browserName": "BrowserName"
        ///
        /// * "metadata.deviceType": "DeviceType"
        ///
        /// * "metadata.osName": "OSName"
        ///
        /// * "metadata.countryCode": "CountryCode"
        ///
        /// * "event_details.fileType": "FileType"
        ///
        ///
        /// For both extended metrics and custom metrics, all dimensions listed in this field must also be included in EventPattern.
        public var dimensionKeys: [Swift.String:Swift.String]?
        /// The pattern that defines the metric, specified as a JSON object. RUM checks events that happen in a user's session against the pattern, and events that match the pattern are sent to the metric destination. When you define extended metrics, the metric definition is not valid if EventPattern is omitted. Example event patterns:
        ///
        /// * '{ "event_type": ["com.amazon.rum.js_error_event"], "metadata": { "browserName": [ "Chrome", "Safari" ], } }'
        ///
        /// * '{ "event_type": ["com.amazon.rum.performance_navigation_event"], "metadata": { "browserName": [ "Chrome", "Firefox" ] }, "event_details": { "duration": [{ "numeric": [ "<", 2000 ] }] } }'
        ///
        /// * '{ "event_type": ["com.amazon.rum.performance_navigation_event"], "metadata": { "browserName": [ "Chrome", "Safari" ], "countryCode": [ "US" ] }, "event_details": { "duration": [{ "numeric": [ ">=", 2000, "<", 8000 ] }] } }'
        ///
        ///
        /// If the metrics destination' is CloudWatch and the event also matches a value in DimensionKeys, then the metric is published with the specified dimensions.
        public var eventPattern: Swift.String?
        /// The name for the metric that is defined in this structure. For custom metrics, you can specify any name that you like. For extended metrics, valid values are the following:
        ///
        /// * PerformanceNavigationDuration
        ///
        /// * PerformanceResourceDuration
        ///
        /// * NavigationSatisfiedTransaction
        ///
        /// * NavigationToleratedTransaction
        ///
        /// * NavigationFrustratedTransaction
        ///
        /// * WebVitalsCumulativeLayoutShift
        ///
        /// * WebVitalsFirstInputDelay
        ///
        /// * WebVitalsLargestContentfulPaint
        ///
        /// * JsErrorCount
        ///
        /// * HttpErrorCount
        ///
        /// * SessionCount
        /// This member is required.
        public var name: Swift.String?
        /// If this structure is for a custom metric instead of an extended metrics, use this parameter to define the metric namespace for that custom metric. Do not specify this parameter if this structure is for an extended metric. You cannot use any string that starts with AWS/ for your namespace.
        public var namespace: Swift.String?
        /// The CloudWatch metric unit to use for this metric. If you omit this field, the metric is recorded with no unit.
        public var unitLabel: Swift.String?
        /// The field within the event object that the metric value is sourced from. If you omit this field, a hardcoded value of 1 is pushed as the metric value. This is useful if you just want to count the number of events that the filter catches. If this metric is sent to CloudWatch Evidently, this field will be passed to Evidently raw and Evidently will handle data extraction from the event.
        public var valueKey: Swift.String?

        public init (
            dimensionKeys: [Swift.String:Swift.String]? = nil,
            eventPattern: Swift.String? = nil,
            name: Swift.String? = nil,
            namespace: Swift.String? = nil,
            unitLabel: Swift.String? = nil,
            valueKey: Swift.String? = nil
        )
        {
            self.dimensionKeys = dimensionKeys
            self.eventPattern = eventPattern
            self.name = name
            self.namespace = namespace
            self.unitLabel = unitLabel
            self.valueKey = valueKey
        }
    }

}

extension RUMClientTypes {
    public enum MetricDestination: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cloudwatch
        case evidently
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricDestination] {
            return [
                .cloudwatch,
                .evidently,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cloudwatch: return "CloudWatch"
            case .evidently: return "Evidently"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MetricDestination(rawValue: rawValue) ?? MetricDestination.sdkUnknown(rawValue)
        }
    }
}

extension RUMClientTypes.MetricDestinationSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destination = "Destination"
        case destinationArn = "DestinationArn"
        case iamRoleArn = "IamRoleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destination = self.destination {
            try encodeContainer.encode(destination.rawValue, forKey: .destination)
        }
        if let destinationArn = self.destinationArn {
            try encodeContainer.encode(destinationArn, forKey: .destinationArn)
        }
        if let iamRoleArn = self.iamRoleArn {
            try encodeContainer.encode(iamRoleArn, forKey: .iamRoleArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationDecoded = try containerValues.decodeIfPresent(RUMClientTypes.MetricDestination.self, forKey: .destination)
        destination = destinationDecoded
        let destinationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationArn)
        destinationArn = destinationArnDecoded
        let iamRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iamRoleArn)
        iamRoleArn = iamRoleArnDecoded
    }
}

extension RUMClientTypes {
    /// A structure that displays information about one destination that CloudWatch RUM sends extended metrics to.
    public struct MetricDestinationSummary: Swift.Equatable {
        /// Specifies whether the destination is CloudWatch or Evidently.
        public var destination: RUMClientTypes.MetricDestination?
        /// If the destination is Evidently, this specifies the ARN of the Evidently experiment that receives the metrics.
        public var destinationArn: Swift.String?
        /// This field appears only when the destination is Evidently. It specifies the ARN of the IAM role that is used to write to the Evidently experiment that receives the metrics.
        public var iamRoleArn: Swift.String?

        public init (
            destination: RUMClientTypes.MetricDestination? = nil,
            destinationArn: Swift.String? = nil,
            iamRoleArn: Swift.String? = nil
        )
        {
            self.destination = destination
            self.destinationArn = destinationArn
            self.iamRoleArn = iamRoleArn
        }
    }

}

extension PutRumEventsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appMonitorDetails = "AppMonitorDetails"
        case batchId = "BatchId"
        case rumEvents = "RumEvents"
        case userDetails = "UserDetails"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appMonitorDetails = self.appMonitorDetails {
            try encodeContainer.encode(appMonitorDetails, forKey: .appMonitorDetails)
        }
        if let batchId = self.batchId {
            try encodeContainer.encode(batchId, forKey: .batchId)
        }
        if let rumEvents = rumEvents {
            var rumEventsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .rumEvents)
            for rumevent0 in rumEvents {
                try rumEventsContainer.encode(rumevent0)
            }
        }
        if let userDetails = self.userDetails {
            try encodeContainer.encode(userDetails, forKey: .userDetails)
        }
    }
}

extension PutRumEventsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/appmonitors/\(id.urlPercentEncoding())"
    }
}

public struct PutRumEventsInput: Swift.Equatable {
    /// A structure that contains information about the app monitor that collected this telemetry information.
    /// This member is required.
    public var appMonitorDetails: RUMClientTypes.AppMonitorDetails?
    /// A unique identifier for this batch of RUM event data.
    /// This member is required.
    public var batchId: Swift.String?
    /// The ID of the app monitor that is sending this data.
    /// This member is required.
    public var id: Swift.String?
    /// An array of structures that contain the telemetry event data.
    /// This member is required.
    public var rumEvents: [RUMClientTypes.RumEvent]?
    /// A structure that contains information about the user session that this batch of events was collected from.
    /// This member is required.
    public var userDetails: RUMClientTypes.UserDetails?

    public init (
        appMonitorDetails: RUMClientTypes.AppMonitorDetails? = nil,
        batchId: Swift.String? = nil,
        id: Swift.String? = nil,
        rumEvents: [RUMClientTypes.RumEvent]? = nil,
        userDetails: RUMClientTypes.UserDetails? = nil
    )
    {
        self.appMonitorDetails = appMonitorDetails
        self.batchId = batchId
        self.id = id
        self.rumEvents = rumEvents
        self.userDetails = userDetails
    }
}

struct PutRumEventsInputBody: Swift.Equatable {
    let batchId: Swift.String?
    let appMonitorDetails: RUMClientTypes.AppMonitorDetails?
    let userDetails: RUMClientTypes.UserDetails?
    let rumEvents: [RUMClientTypes.RumEvent]?
}

extension PutRumEventsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appMonitorDetails = "AppMonitorDetails"
        case batchId = "BatchId"
        case rumEvents = "RumEvents"
        case userDetails = "UserDetails"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let batchIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .batchId)
        batchId = batchIdDecoded
        let appMonitorDetailsDecoded = try containerValues.decodeIfPresent(RUMClientTypes.AppMonitorDetails.self, forKey: .appMonitorDetails)
        appMonitorDetails = appMonitorDetailsDecoded
        let userDetailsDecoded = try containerValues.decodeIfPresent(RUMClientTypes.UserDetails.self, forKey: .userDetails)
        userDetails = userDetailsDecoded
        let rumEventsContainer = try containerValues.decodeIfPresent([RUMClientTypes.RumEvent?].self, forKey: .rumEvents)
        var rumEventsDecoded0:[RUMClientTypes.RumEvent]? = nil
        if let rumEventsContainer = rumEventsContainer {
            rumEventsDecoded0 = [RUMClientTypes.RumEvent]()
            for structure0 in rumEventsContainer {
                if let structure0 = structure0 {
                    rumEventsDecoded0?.append(structure0)
                }
            }
        }
        rumEvents = rumEventsDecoded0
    }
}

extension PutRumEventsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutRumEventsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutRumEventsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutRumEventsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutRumEventsOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutRumMetricsDestinationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destination = "Destination"
        case destinationArn = "DestinationArn"
        case iamRoleArn = "IamRoleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destination = self.destination {
            try encodeContainer.encode(destination.rawValue, forKey: .destination)
        }
        if let destinationArn = self.destinationArn {
            try encodeContainer.encode(destinationArn, forKey: .destinationArn)
        }
        if let iamRoleArn = self.iamRoleArn {
            try encodeContainer.encode(iamRoleArn, forKey: .iamRoleArn)
        }
    }
}

extension PutRumMetricsDestinationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let appMonitorName = appMonitorName else {
            return nil
        }
        return "/rummetrics/\(appMonitorName.urlPercentEncoding())/metricsdestination"
    }
}

public struct PutRumMetricsDestinationInput: Swift.Equatable {
    /// The name of the CloudWatch RUM app monitor that will send the metrics.
    /// This member is required.
    public var appMonitorName: Swift.String?
    /// Defines the destination to send the metrics to. Valid values are CloudWatch and Evidently. If you specify Evidently, you must also specify the ARN of the CloudWatchEvidently experiment that is to be the destination and an IAM role that has permission to write to the experiment.
    /// This member is required.
    public var destination: RUMClientTypes.MetricDestination?
    /// Use this parameter only if Destination is Evidently. This parameter specifies the ARN of the Evidently experiment that will receive the extended metrics.
    public var destinationArn: Swift.String?
    /// This parameter is required if Destination is Evidently. If Destination is CloudWatch, do not use this parameter. This parameter specifies the ARN of an IAM role that RUM will assume to write to the Evidently experiment that you are sending metrics to. This role must have permission to write to that experiment.
    public var iamRoleArn: Swift.String?

    public init (
        appMonitorName: Swift.String? = nil,
        destination: RUMClientTypes.MetricDestination? = nil,
        destinationArn: Swift.String? = nil,
        iamRoleArn: Swift.String? = nil
    )
    {
        self.appMonitorName = appMonitorName
        self.destination = destination
        self.destinationArn = destinationArn
        self.iamRoleArn = iamRoleArn
    }
}

struct PutRumMetricsDestinationInputBody: Swift.Equatable {
    let destination: RUMClientTypes.MetricDestination?
    let destinationArn: Swift.String?
    let iamRoleArn: Swift.String?
}

extension PutRumMetricsDestinationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destination = "Destination"
        case destinationArn = "DestinationArn"
        case iamRoleArn = "IamRoleArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationDecoded = try containerValues.decodeIfPresent(RUMClientTypes.MetricDestination.self, forKey: .destination)
        destination = destinationDecoded
        let destinationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationArn)
        destinationArn = destinationArnDecoded
        let iamRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iamRoleArn)
        iamRoleArn = iamRoleArnDecoded
    }
}

extension PutRumMetricsDestinationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutRumMetricsDestinationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutRumMetricsDestinationOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutRumMetricsDestinationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutRumMetricsDestinationOutputResponse: Swift.Equatable {

    public init () { }
}

extension RUMClientTypes.QueryFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for queryfiltervalue0 in values {
                try valuesContainer.encode(queryfiltervalue0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .values)
        var valuesDecoded0:[Swift.String]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.String]()
            for string0 in valuesContainer {
                if let string0 = string0 {
                    valuesDecoded0?.append(string0)
                }
            }
        }
        values = valuesDecoded0
    }
}

extension RUMClientTypes {
    /// A structure that defines a key and values that you can use to filter the results. The only performance events that are returned are those that have values matching the ones that you specify in one of your QueryFilter structures. For example, you could specify Browser as the Name and specify Chrome,Firefox as the Values to return events generated only from those browsers. Specifying Invert as the Name works as a "not equal to" filter. For example, specify Invert as the Name and specify Chrome as the value to return all events except events from user sessions with the Chrome browser.
    public struct QueryFilter: Swift.Equatable {
        /// The name of a key to search for. The filter returns only the events that match the Name and Values that you specify. Valid values for Name are Browser | Device | Country | Page | OS | EventType | Invert
        public var name: Swift.String?
        /// The values of the Name that are to be be included in the returned results.
        public var values: [Swift.String]?

        public init (
            name: Swift.String? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

extension ResourceNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.resourceName = output.resourceName
            self.resourceType = output.resourceType
        } else {
            self.message = nil
            self.resourceName = nil
            self.resourceType = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Resource not found.
public struct ResourceNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// This member is required.
    public var message: Swift.String?
    /// The name of the resource that is associated with the error.
    /// This member is required.
    public var resourceName: Swift.String?
    /// The type of the resource that is associated with the error.
    public var resourceType: Swift.String?

    public init (
        message: Swift.String? = nil,
        resourceName: Swift.String? = nil,
        resourceType: Swift.String? = nil
    )
    {
        self.message = message
        self.resourceName = resourceName
        self.resourceType = resourceType
    }
}

struct ResourceNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let resourceName: Swift.String?
    let resourceType: Swift.String?
}

extension ResourceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
        case resourceName
        case resourceType
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
    }
}

extension RUMClientTypes.RumEvent: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case details
        case id
        case metadata
        case timestamp
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let details = self.details {
            try encodeContainer.encode(details, forKey: .details)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let metadata = self.metadata {
            try encodeContainer.encode(metadata, forKey: .metadata)
        }
        if let timestamp = self.timestamp {
            try encodeContainer.encodeTimestamp(timestamp, format: .epochSeconds, forKey: .timestamp)
        }
        if let type = self.type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let timestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .timestamp)
        timestamp = timestampDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let metadataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metadata)
        metadata = metadataDecoded
        let detailsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .details)
        details = detailsDecoded
    }
}

extension RUMClientTypes {
    /// A structure that contains the information for one performance event that RUM collects from a user session with your application.
    public struct RumEvent: Swift.Equatable {
        /// A string containing details about the event.
        /// This member is required.
        public var details: Swift.String?
        /// A unique ID for this event.
        /// This member is required.
        public var id: Swift.String?
        /// Metadata about this event, which contains a JSON serialization of the identity of the user for this session. The user information comes from information such as the HTTP user-agent request header and document interface.
        public var metadata: Swift.String?
        /// The exact time that this event occurred.
        /// This member is required.
        public var timestamp: ClientRuntime.Date?
        /// The JSON schema that denotes the type of event this is, such as a page load or a new session.
        /// This member is required.
        public var type: Swift.String?

        public init (
            details: Swift.String? = nil,
            id: Swift.String? = nil,
            metadata: Swift.String? = nil,
            timestamp: ClientRuntime.Date? = nil,
            type: Swift.String? = nil
        )
        {
            self.details = details
            self.id = id
            self.metadata = metadata
            self.timestamp = timestamp
            self.type = type
        }
    }

}

extension ServiceQuotaExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ServiceQuotaExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This request exceeds a service quota.
public struct ServiceQuotaExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// This member is required.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ServiceQuotaExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ServiceQuotaExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RUMClientTypes {
    public enum StateEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case created
        case deleting
        case sdkUnknown(Swift.String)

        public static var allCases: [StateEnum] {
            return [
                .active,
                .created,
                .deleting,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .created: return "CREATED"
            case .deleting: return "DELETING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StateEnum(rawValue: rawValue) ?? StateEnum.sdkUnknown(rawValue)
        }
    }
}

extension TagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagMap0) in tags {
                try tagsContainer.encode(tagMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension TagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let resourceArn = resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

public struct TagResourceInput: Swift.Equatable {
    /// The ARN of the CloudWatch RUM resource that you're adding tags to.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The list of key-value pairs to associate with the resource.
    /// This member is required.
    public var tags: [Swift.String:Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    let tags: [Swift.String:Swift.String]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension RUMClientTypes {
    public enum Telemetry: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        /// Includes JS error event plugin
        case errors
        /// Includes X-Ray Xhr and X-Ray Fetch plugin
        case http
        /// Includes navigation, paint, resource and web vital event plugins
        case performance
        case sdkUnknown(Swift.String)

        public static var allCases: [Telemetry] {
            return [
                .errors,
                .http,
                .performance,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .errors: return "errors"
            case .http: return "http"
            case .performance: return "performance"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Telemetry(rawValue: rawValue) ?? Telemetry.sdkUnknown(rawValue)
        }
    }
}

extension ThrottlingException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let retryAfterSecondsHeaderValue = httpResponse.headers.value(for: "Retry-After") {
            self.retryAfterSeconds = Swift.Int(retryAfterSecondsHeaderValue) ?? 0
        } else {
            self.retryAfterSeconds = nil
        }
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ThrottlingExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.quotaCode = output.quotaCode
            self.serviceCode = output.serviceCode
        } else {
            self.message = nil
            self.quotaCode = nil
            self.serviceCode = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was throttled because of quota limits.
public struct ThrottlingException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = true
    public var _isThrottling: Swift.Bool = true
    public var _type: ClientRuntime.ErrorType = .client
    /// This member is required.
    public var message: Swift.String?
    /// The ID of the service quota that was exceeded.
    public var quotaCode: Swift.String?
    /// The value of a parameter in the request caused an error.
    public var retryAfterSeconds: Swift.Int?
    /// The ID of the service that is associated with the error.
    public var serviceCode: Swift.String?

    public init (
        message: Swift.String? = nil,
        quotaCode: Swift.String? = nil,
        retryAfterSeconds: Swift.Int? = nil,
        serviceCode: Swift.String? = nil
    )
    {
        self.message = message
        self.quotaCode = quotaCode
        self.retryAfterSeconds = retryAfterSeconds
        self.serviceCode = serviceCode
    }
}

struct ThrottlingExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let serviceCode: Swift.String?
    let quotaCode: Swift.String?
}

extension ThrottlingExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
        case quotaCode
        case serviceCode
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let serviceCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceCode)
        serviceCode = serviceCodeDecoded
        let quotaCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .quotaCode)
        quotaCode = quotaCodeDecoded
    }
}

extension RUMClientTypes.TimeRange: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case after = "After"
        case before = "Before"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if after != 0 {
            try encodeContainer.encode(after, forKey: .after)
        }
        if before != 0 {
            try encodeContainer.encode(before, forKey: .before)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let afterDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .after) ?? 0
        after = afterDecoded
        let beforeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .before) ?? 0
        before = beforeDecoded
    }
}

extension RUMClientTypes {
    /// A structure that defines the time range that you want to retrieve results from.
    public struct TimeRange: Swift.Equatable {
        /// The beginning of the time range to retrieve performance events from.
        /// This member is required.
        public var after: Swift.Int
        /// The end of the time range to retrieve performance events from. If you omit this, the time range extends to the time that this operation is performed.
        public var before: Swift.Int

        public init (
            after: Swift.Int = 0,
            before: Swift.Int = 0
        )
        {
            self.after = after
            self.before = before
        }
    }

}

extension UntagResourceInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            guard let tagKeys = tagKeys else {
                let message = "Creating a URL Query Item failed. tagKeys is required and must not be nil."
                throw ClientRuntime.ClientError.queryItemCreationFailed(message)
            }
            tagKeys.forEach { queryItemValue in
                let queryItem = ClientRuntime.URLQueryItem(name: "tagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
                items.append(queryItem)
            }
            return items
        }
    }
}

extension UntagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let resourceArn = resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

public struct UntagResourceInput: Swift.Equatable {
    /// The ARN of the CloudWatch RUM resource that you're removing tags from.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The list of tag keys to remove from the resource.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
}

extension UntagResourceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateAppMonitorInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appMonitorConfiguration = "AppMonitorConfiguration"
        case customEvents = "CustomEvents"
        case cwLogEnabled = "CwLogEnabled"
        case domain = "Domain"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appMonitorConfiguration = self.appMonitorConfiguration {
            try encodeContainer.encode(appMonitorConfiguration, forKey: .appMonitorConfiguration)
        }
        if let customEvents = self.customEvents {
            try encodeContainer.encode(customEvents, forKey: .customEvents)
        }
        if let cwLogEnabled = self.cwLogEnabled {
            try encodeContainer.encode(cwLogEnabled, forKey: .cwLogEnabled)
        }
        if let domain = self.domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
    }
}

extension UpdateAppMonitorInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let name = name else {
            return nil
        }
        return "/appmonitor/\(name.urlPercentEncoding())"
    }
}

public struct UpdateAppMonitorInput: Swift.Equatable {
    /// A structure that contains much of the configuration data for the app monitor. If you are using Amazon Cognito for authorization, you must include this structure in your request, and it must include the ID of the Amazon Cognito identity pool to use for authorization. If you don't include AppMonitorConfiguration, you must set up your own authorization method. For more information, see [Authorize your application to send data to Amazon Web Services](https://docs.aws.amazon.com/monitoring/CloudWatch-RUM-get-started-authorization.html).
    public var appMonitorConfiguration: RUMClientTypes.AppMonitorConfiguration?
    /// Specifies whether this app monitor allows the web client to define and send custom events. The default is for custom events to be DISABLED. For more information about custom events, see [Send custom events](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-RUM-custom-events.html).
    public var customEvents: RUMClientTypes.CustomEvents?
    /// Data collected by RUM is kept by RUM for 30 days and then deleted. This parameter specifies whether RUM sends a copy of this telemetry data to Amazon CloudWatch Logs in your account. This enables you to keep the telemetry data for more than 30 days, but it does incur Amazon CloudWatch Logs charges.
    public var cwLogEnabled: Swift.Bool?
    /// The top-level internet domain name for which your application has administrative authority.
    public var domain: Swift.String?
    /// The name of the app monitor to update.
    /// This member is required.
    public var name: Swift.String?

    public init (
        appMonitorConfiguration: RUMClientTypes.AppMonitorConfiguration? = nil,
        customEvents: RUMClientTypes.CustomEvents? = nil,
        cwLogEnabled: Swift.Bool? = nil,
        domain: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.appMonitorConfiguration = appMonitorConfiguration
        self.customEvents = customEvents
        self.cwLogEnabled = cwLogEnabled
        self.domain = domain
        self.name = name
    }
}

struct UpdateAppMonitorInputBody: Swift.Equatable {
    let domain: Swift.String?
    let appMonitorConfiguration: RUMClientTypes.AppMonitorConfiguration?
    let cwLogEnabled: Swift.Bool?
    let customEvents: RUMClientTypes.CustomEvents?
}

extension UpdateAppMonitorInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appMonitorConfiguration = "AppMonitorConfiguration"
        case customEvents = "CustomEvents"
        case cwLogEnabled = "CwLogEnabled"
        case domain = "Domain"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let appMonitorConfigurationDecoded = try containerValues.decodeIfPresent(RUMClientTypes.AppMonitorConfiguration.self, forKey: .appMonitorConfiguration)
        appMonitorConfiguration = appMonitorConfigurationDecoded
        let cwLogEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .cwLogEnabled)
        cwLogEnabled = cwLogEnabledDecoded
        let customEventsDecoded = try containerValues.decodeIfPresent(RUMClientTypes.CustomEvents.self, forKey: .customEvents)
        customEvents = customEventsDecoded
    }
}

extension UpdateAppMonitorOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateAppMonitorOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateAppMonitorOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateAppMonitorOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateAppMonitorOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateRumMetricDefinitionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destination = "Destination"
        case destinationArn = "DestinationArn"
        case metricDefinition = "MetricDefinition"
        case metricDefinitionId = "MetricDefinitionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destination = self.destination {
            try encodeContainer.encode(destination.rawValue, forKey: .destination)
        }
        if let destinationArn = self.destinationArn {
            try encodeContainer.encode(destinationArn, forKey: .destinationArn)
        }
        if let metricDefinition = self.metricDefinition {
            try encodeContainer.encode(metricDefinition, forKey: .metricDefinition)
        }
        if let metricDefinitionId = self.metricDefinitionId {
            try encodeContainer.encode(metricDefinitionId, forKey: .metricDefinitionId)
        }
    }
}

extension UpdateRumMetricDefinitionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let appMonitorName = appMonitorName else {
            return nil
        }
        return "/rummetrics/\(appMonitorName.urlPercentEncoding())/metrics"
    }
}

public struct UpdateRumMetricDefinitionInput: Swift.Equatable {
    /// The name of the CloudWatch RUM app monitor that sends these metrics.
    /// This member is required.
    public var appMonitorName: Swift.String?
    /// The destination to send the metrics to. Valid values are CloudWatch and Evidently. If you specify Evidently, you must also specify the ARN of the CloudWatchEvidently experiment that will receive the metrics and an IAM role that has permission to write to the experiment.
    /// This member is required.
    public var destination: RUMClientTypes.MetricDestination?
    /// This parameter is required if Destination is Evidently. If Destination is CloudWatch, do not use this parameter. This parameter specifies the ARN of the Evidently experiment that is to receive the metrics. You must have already defined this experiment as a valid destination. For more information, see [PutRumMetricsDestination](https://docs.aws.amazon.com/cloudwatchrum/latest/APIReference/API_PutRumMetricsDestination.html).
    public var destinationArn: Swift.String?
    /// A structure that contains the new definition that you want to use for this metric.
    /// This member is required.
    public var metricDefinition: RUMClientTypes.MetricDefinitionRequest?
    /// The ID of the metric definition to update.
    /// This member is required.
    public var metricDefinitionId: Swift.String?

    public init (
        appMonitorName: Swift.String? = nil,
        destination: RUMClientTypes.MetricDestination? = nil,
        destinationArn: Swift.String? = nil,
        metricDefinition: RUMClientTypes.MetricDefinitionRequest? = nil,
        metricDefinitionId: Swift.String? = nil
    )
    {
        self.appMonitorName = appMonitorName
        self.destination = destination
        self.destinationArn = destinationArn
        self.metricDefinition = metricDefinition
        self.metricDefinitionId = metricDefinitionId
    }
}

struct UpdateRumMetricDefinitionInputBody: Swift.Equatable {
    let destination: RUMClientTypes.MetricDestination?
    let destinationArn: Swift.String?
    let metricDefinition: RUMClientTypes.MetricDefinitionRequest?
    let metricDefinitionId: Swift.String?
}

extension UpdateRumMetricDefinitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destination = "Destination"
        case destinationArn = "DestinationArn"
        case metricDefinition = "MetricDefinition"
        case metricDefinitionId = "MetricDefinitionId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationDecoded = try containerValues.decodeIfPresent(RUMClientTypes.MetricDestination.self, forKey: .destination)
        destination = destinationDecoded
        let destinationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationArn)
        destinationArn = destinationArnDecoded
        let metricDefinitionDecoded = try containerValues.decodeIfPresent(RUMClientTypes.MetricDefinitionRequest.self, forKey: .metricDefinition)
        metricDefinition = metricDefinitionDecoded
        let metricDefinitionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricDefinitionId)
        metricDefinitionId = metricDefinitionIdDecoded
    }
}

extension UpdateRumMetricDefinitionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateRumMetricDefinitionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateRumMetricDefinitionOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateRumMetricDefinitionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateRumMetricDefinitionOutputResponse: Swift.Equatable {

    public init () { }
}

extension RUMClientTypes.UserDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sessionId
        case userId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sessionId = self.sessionId {
            try encodeContainer.encode(sessionId, forKey: .sessionId)
        }
        if let userId = self.userId {
            try encodeContainer.encode(userId, forKey: .userId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userId)
        userId = userIdDecoded
        let sessionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sessionId)
        sessionId = sessionIdDecoded
    }
}

extension RUMClientTypes {
    /// A structure that contains information about the user session that this batch of events was collected from.
    public struct UserDetails: Swift.Equatable {
        /// The session ID that the performance events are from.
        public var sessionId: Swift.String?
        /// The ID of the user for this user session. This ID is generated by RUM and does not include any personally identifiable information about the user.
        public var userId: Swift.String?

        public init (
            sessionId: Swift.String? = nil,
            userId: Swift.String? = nil
        )
        {
            self.sessionId = sessionId
            self.userId = userId
        }
    }

}

extension ValidationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ValidationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// One of the arguments for the request is not valid.
public struct ValidationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// This member is required.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ValidationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ValidationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}
