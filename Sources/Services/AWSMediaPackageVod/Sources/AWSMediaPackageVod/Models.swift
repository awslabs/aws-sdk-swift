//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum Smithy.ClientError
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.URIQueryItem
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox


public struct TagResourceOutput: Swift.Sendable {

    public init() { }
}

public struct UntagResourceOutput: Swift.Sendable {

    public init() { }
}

extension MediaPackageVodClientTypes {

    public enum __PeriodTriggersElement: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ads
        case sdkUnknown(Swift.String)

        public static var allCases: [__PeriodTriggersElement] {
            return [
                .ads
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ads: return "ADS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaPackageVodClientTypes {

    /// A MediaPackage VOD Asset resource.
    public struct AssetShallow: Swift.Sendable {
        /// The ARN of the Asset.
        public var arn: Swift.String?
        /// The time the Asset was initially submitted for Ingest.
        public var createdAt: Swift.String?
        /// The unique identifier for the Asset.
        public var id: Swift.String?
        /// The ID of the PackagingGroup for the Asset.
        public var packagingGroupId: Swift.String?
        /// The resource ID to include in SPEKE key requests.
        public var resourceId: Swift.String?
        /// ARN of the source object in S3.
        public var sourceArn: Swift.String?
        /// The IAM role ARN used to access the source S3 bucket.
        public var sourceRoleArn: Swift.String?
        /// A collection of tags associated with a resource
        public var tags: [Swift.String: Swift.String]?

        public init(
            arn: Swift.String? = nil,
            createdAt: Swift.String? = nil,
            id: Swift.String? = nil,
            packagingGroupId: Swift.String? = nil,
            resourceId: Swift.String? = nil,
            sourceArn: Swift.String? = nil,
            sourceRoleArn: Swift.String? = nil,
            tags: [Swift.String: Swift.String]? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.id = id
            self.packagingGroupId = packagingGroupId
            self.resourceId = resourceId
            self.sourceArn = sourceArn
            self.sourceRoleArn = sourceRoleArn
            self.tags = tags
        }
    }
}

extension MediaPackageVodClientTypes {

    public enum ManifestLayout: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case compact
        case full
        case sdkUnknown(Swift.String)

        public static var allCases: [ManifestLayout] {
            return [
                .compact,
                .full
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .compact: return "COMPACT"
            case .full: return "FULL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaPackageVodClientTypes {

    public enum Profile: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case hbbtv15
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [Profile] {
            return [
                .hbbtv15,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .hbbtv15: return "HBBTV_1_5"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaPackageVodClientTypes {

    public enum ScteMarkersSource: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case manifest
        case segments
        case sdkUnknown(Swift.String)

        public static var allCases: [ScteMarkersSource] {
            return [
                .manifest,
                .segments
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .manifest: return "MANIFEST"
            case .segments: return "SEGMENTS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaPackageVodClientTypes {

    public enum StreamOrder: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case original
        case videoBitrateAscending
        case videoBitrateDescending
        case sdkUnknown(Swift.String)

        public static var allCases: [StreamOrder] {
            return [
                .original,
                .videoBitrateAscending,
                .videoBitrateDescending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .original: return "ORIGINAL"
            case .videoBitrateAscending: return "VIDEO_BITRATE_ASCENDING"
            case .videoBitrateDescending: return "VIDEO_BITRATE_DESCENDING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaPackageVodClientTypes {

    /// A StreamSelection configuration.
    public struct StreamSelection: Swift.Sendable {
        /// The maximum video bitrate (bps) to include in output.
        public var maxVideoBitsPerSecond: Swift.Int?
        /// The minimum video bitrate (bps) to include in output.
        public var minVideoBitsPerSecond: Swift.Int?
        /// A directive that determines the order of streams in the output.
        public var streamOrder: MediaPackageVodClientTypes.StreamOrder?

        public init(
            maxVideoBitsPerSecond: Swift.Int? = nil,
            minVideoBitsPerSecond: Swift.Int? = nil,
            streamOrder: MediaPackageVodClientTypes.StreamOrder? = nil
        )
        {
            self.maxVideoBitsPerSecond = maxVideoBitsPerSecond
            self.minVideoBitsPerSecond = minVideoBitsPerSecond
            self.streamOrder = streamOrder
        }
    }
}

extension MediaPackageVodClientTypes {

    /// A DASH manifest configuration.
    public struct DashManifest: Swift.Sendable {
        /// Determines the position of some tags in the Media Presentation Description (MPD). When set to FULL, elements like SegmentTemplate and ContentProtection are included in each Representation. When set to COMPACT, duplicate elements are combined and presented at the AdaptationSet level.
        public var manifestLayout: MediaPackageVodClientTypes.ManifestLayout?
        /// An optional string to include in the name of the manifest.
        public var manifestName: Swift.String?
        /// Minimum duration (in seconds) that a player will buffer media before starting the presentation.
        public var minBufferTimeSeconds: Swift.Int?
        /// The Dynamic Adaptive Streaming over HTTP (DASH) profile type. When set to "HBBTV_1_5", HbbTV 1.5 compliant output is enabled.
        public var profile: MediaPackageVodClientTypes.Profile?
        /// The source of scte markers used. When set to SEGMENTS, the scte markers are sourced from the segments of the ingested content. When set to MANIFEST, the scte markers are sourced from the manifest of the ingested content.
        public var scteMarkersSource: MediaPackageVodClientTypes.ScteMarkersSource?
        /// A StreamSelection configuration.
        public var streamSelection: MediaPackageVodClientTypes.StreamSelection?

        public init(
            manifestLayout: MediaPackageVodClientTypes.ManifestLayout? = nil,
            manifestName: Swift.String? = nil,
            minBufferTimeSeconds: Swift.Int? = nil,
            profile: MediaPackageVodClientTypes.Profile? = nil,
            scteMarkersSource: MediaPackageVodClientTypes.ScteMarkersSource? = nil,
            streamSelection: MediaPackageVodClientTypes.StreamSelection? = nil
        )
        {
            self.manifestLayout = manifestLayout
            self.manifestName = manifestName
            self.minBufferTimeSeconds = minBufferTimeSeconds
            self.profile = profile
            self.scteMarkersSource = scteMarkersSource
            self.streamSelection = streamSelection
        }
    }
}

extension MediaPackageVodClientTypes {

    /// The endpoint URL used to access an Asset using one PackagingConfiguration.
    public struct EgressEndpoint: Swift.Sendable {
        /// The ID of the PackagingConfiguration being applied to the Asset.
        public var packagingConfigurationId: Swift.String?
        /// The current processing status of the asset used for the packaging configuration. The status can be either QUEUED, PROCESSING, PLAYABLE, or FAILED. Status information won't be available for most assets ingested before 2021-09-30.
        public var status: Swift.String?
        /// The URL of the parent manifest for the repackaged Asset.
        public var url: Swift.String?

        public init(
            packagingConfigurationId: Swift.String? = nil,
            status: Swift.String? = nil,
            url: Swift.String? = nil
        )
        {
            self.packagingConfigurationId = packagingConfigurationId
            self.status = status
            self.url = url
        }
    }
}

extension MediaPackageVodClientTypes {

    public enum AdMarkers: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `none`
        case passthrough
        case scte35Enhanced
        case sdkUnknown(Swift.String)

        public static var allCases: [AdMarkers] {
            return [
                .none,
                .passthrough,
                .scte35Enhanced
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .passthrough: return "PASSTHROUGH"
            case .scte35Enhanced: return "SCTE35_ENHANCED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaPackageVodClientTypes {

    /// An HTTP Live Streaming (HLS) manifest configuration.
    public struct HlsManifest: Swift.Sendable {
        /// This setting controls how ad markers are included in the packaged OriginEndpoint. "NONE" will omit all SCTE-35 ad markers from the output. "PASSTHROUGH" causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. "SCTE35_ENHANCED" generates ad markers and blackout tags based on SCTE-35 messages in the input source.
        public var adMarkers: MediaPackageVodClientTypes.AdMarkers?
        /// When enabled, an I-Frame only stream will be included in the output.
        public var includeIframeOnlyStream: Swift.Bool?
        /// An optional string to include in the name of the manifest.
        public var manifestName: Swift.String?
        /// The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input, it will be passed through to HLS output.
        public var programDateTimeIntervalSeconds: Swift.Int?
        /// When enabled, the EXT-X-KEY tag will be repeated in output manifests.
        public var repeatExtXKey: Swift.Bool?
        /// A StreamSelection configuration.
        public var streamSelection: MediaPackageVodClientTypes.StreamSelection?

        public init(
            adMarkers: MediaPackageVodClientTypes.AdMarkers? = nil,
            includeIframeOnlyStream: Swift.Bool? = nil,
            manifestName: Swift.String? = nil,
            programDateTimeIntervalSeconds: Swift.Int? = nil,
            repeatExtXKey: Swift.Bool? = nil,
            streamSelection: MediaPackageVodClientTypes.StreamSelection? = nil
        )
        {
            self.adMarkers = adMarkers
            self.includeIframeOnlyStream = includeIframeOnlyStream
            self.manifestName = manifestName
            self.programDateTimeIntervalSeconds = programDateTimeIntervalSeconds
            self.repeatExtXKey = repeatExtXKey
            self.streamSelection = streamSelection
        }
    }
}

extension MediaPackageVodClientTypes {

    /// A Microsoft Smooth Streaming (MSS) manifest configuration.
    public struct MssManifest: Swift.Sendable {
        /// An optional string to include in the name of the manifest.
        public var manifestName: Swift.String?
        /// A StreamSelection configuration.
        public var streamSelection: MediaPackageVodClientTypes.StreamSelection?

        public init(
            manifestName: Swift.String? = nil,
            streamSelection: MediaPackageVodClientTypes.StreamSelection? = nil
        )
        {
            self.manifestName = manifestName
            self.streamSelection = streamSelection
        }
    }
}

extension MediaPackageVodClientTypes {

    public enum PresetSpeke20Audio: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case presetAudio1
        case presetAudio2
        case presetAudio3
        case shared
        case unencrypted
        case sdkUnknown(Swift.String)

        public static var allCases: [PresetSpeke20Audio] {
            return [
                .presetAudio1,
                .presetAudio2,
                .presetAudio3,
                .shared,
                .unencrypted
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .presetAudio1: return "PRESET-AUDIO-1"
            case .presetAudio2: return "PRESET-AUDIO-2"
            case .presetAudio3: return "PRESET-AUDIO-3"
            case .shared: return "SHARED"
            case .unencrypted: return "UNENCRYPTED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaPackageVodClientTypes {

    public enum PresetSpeke20Video: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case presetVideo1
        case presetVideo2
        case presetVideo3
        case presetVideo4
        case presetVideo5
        case presetVideo6
        case presetVideo7
        case presetVideo8
        case shared
        case unencrypted
        case sdkUnknown(Swift.String)

        public static var allCases: [PresetSpeke20Video] {
            return [
                .presetVideo1,
                .presetVideo2,
                .presetVideo3,
                .presetVideo4,
                .presetVideo5,
                .presetVideo6,
                .presetVideo7,
                .presetVideo8,
                .shared,
                .unencrypted
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .presetVideo1: return "PRESET-VIDEO-1"
            case .presetVideo2: return "PRESET-VIDEO-2"
            case .presetVideo3: return "PRESET-VIDEO-3"
            case .presetVideo4: return "PRESET-VIDEO-4"
            case .presetVideo5: return "PRESET-VIDEO-5"
            case .presetVideo6: return "PRESET-VIDEO-6"
            case .presetVideo7: return "PRESET-VIDEO-7"
            case .presetVideo8: return "PRESET-VIDEO-8"
            case .shared: return "SHARED"
            case .unencrypted: return "UNENCRYPTED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaPackageVodClientTypes {

    /// Use encryptionContractConfiguration to configure one or more content encryption keys for your endpoints that use SPEKE 2.0. The encryption contract defines which content keys are used to encrypt the audio and video tracks in your stream. To configure the encryption contract, specify which audio and video encryption presets to use. Note the following considerations when using encryptionContractConfiguration: encryptionContractConfiguration can be used for DASH endpoints that use SPEKE 2.0. SPEKE 2.0 relies on the CPIX 2.3 specification. You must disable key rotation for this endpoint by setting keyRotationIntervalSeconds to 0.
    public struct EncryptionContractConfiguration: Swift.Sendable {
        /// A collection of audio encryption presets.
        /// This member is required.
        public var presetSpeke20Audio: MediaPackageVodClientTypes.PresetSpeke20Audio?
        /// A collection of video encryption presets.
        /// This member is required.
        public var presetSpeke20Video: MediaPackageVodClientTypes.PresetSpeke20Video?

        public init(
            presetSpeke20Audio: MediaPackageVodClientTypes.PresetSpeke20Audio? = nil,
            presetSpeke20Video: MediaPackageVodClientTypes.PresetSpeke20Video? = nil
        )
        {
            self.presetSpeke20Audio = presetSpeke20Audio
            self.presetSpeke20Video = presetSpeke20Video
        }
    }
}

extension MediaPackageVodClientTypes {

    /// A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.
    public struct SpekeKeyProvider: Swift.Sendable {
        /// Use encryptionContractConfiguration to configure one or more content encryption keys for your endpoints that use SPEKE 2.0. The encryption contract defines which content keys are used to encrypt the audio and video tracks in your stream. To configure the encryption contract, specify which audio and video encryption presets to use. Note the following considerations when using encryptionContractConfiguration: encryptionContractConfiguration can be used for DASH endpoints that use SPEKE 2.0. SPEKE 2.0 relies on the CPIX 2.3 specification. You must disable key rotation for this endpoint by setting keyRotationIntervalSeconds to 0.
        public var encryptionContractConfiguration: MediaPackageVodClientTypes.EncryptionContractConfiguration?
        /// An Amazon Resource Name (ARN) of an IAM role that AWS Elemental MediaPackage will assume when accessing the key provider service.
        /// This member is required.
        public var roleArn: Swift.String?
        /// The system IDs to include in key requests.
        /// This member is required.
        public var systemIds: [Swift.String]?
        /// The URL of the external key provider service.
        /// This member is required.
        public var url: Swift.String?

        public init(
            encryptionContractConfiguration: MediaPackageVodClientTypes.EncryptionContractConfiguration? = nil,
            roleArn: Swift.String? = nil,
            systemIds: [Swift.String]? = nil,
            url: Swift.String? = nil
        )
        {
            self.encryptionContractConfiguration = encryptionContractConfiguration
            self.roleArn = roleArn
            self.systemIds = systemIds
            self.url = url
        }
    }
}

extension MediaPackageVodClientTypes {

    /// A CMAF encryption configuration.
    public struct CmafEncryption: Swift.Sendable {
        /// An optional 128-bit, 16-byte hex value represented by a 32-character string, used in conjunction with the key for encrypting blocks. If you don't specify a value, then MediaPackage creates the constant initialization vector (IV).
        public var constantInitializationVector: Swift.String?
        /// A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.
        /// This member is required.
        public var spekeKeyProvider: MediaPackageVodClientTypes.SpekeKeyProvider?

        public init(
            constantInitializationVector: Swift.String? = nil,
            spekeKeyProvider: MediaPackageVodClientTypes.SpekeKeyProvider? = nil
        )
        {
            self.constantInitializationVector = constantInitializationVector
            self.spekeKeyProvider = spekeKeyProvider
        }
    }
}

extension MediaPackageVodClientTypes {

    /// A CMAF packaging configuration.
    public struct CmafPackage: Swift.Sendable {
        /// A CMAF encryption configuration.
        public var encryption: MediaPackageVodClientTypes.CmafEncryption?
        /// A list of HLS manifest configurations.
        /// This member is required.
        public var hlsManifests: [MediaPackageVodClientTypes.HlsManifest]?
        /// When includeEncoderConfigurationInSegments is set to true, MediaPackage places your encoder's Sequence Parameter Set (SPS), Picture Parameter Set (PPS), and Video Parameter Set (VPS) metadata in every video segment instead of in the init fragment. This lets you use different SPS/PPS/VPS settings for your assets during content playback.
        public var includeEncoderConfigurationInSegments: Swift.Bool?
        /// Duration (in seconds) of each fragment. Actual fragments will be rounded to the nearest multiple of the source fragment duration.
        public var segmentDurationSeconds: Swift.Int?

        public init(
            encryption: MediaPackageVodClientTypes.CmafEncryption? = nil,
            hlsManifests: [MediaPackageVodClientTypes.HlsManifest]? = nil,
            includeEncoderConfigurationInSegments: Swift.Bool? = nil,
            segmentDurationSeconds: Swift.Int? = nil
        )
        {
            self.encryption = encryption
            self.hlsManifests = hlsManifests
            self.includeEncoderConfigurationInSegments = includeEncoderConfigurationInSegments
            self.segmentDurationSeconds = segmentDurationSeconds
        }
    }
}

extension MediaPackageVodClientTypes {

    /// A Dynamic Adaptive Streaming over HTTP (DASH) encryption configuration.
    public struct DashEncryption: Swift.Sendable {
        /// A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.
        /// This member is required.
        public var spekeKeyProvider: MediaPackageVodClientTypes.SpekeKeyProvider?

        public init(
            spekeKeyProvider: MediaPackageVodClientTypes.SpekeKeyProvider? = nil
        )
        {
            self.spekeKeyProvider = spekeKeyProvider
        }
    }
}

extension MediaPackageVodClientTypes {

    public enum SegmentTemplateFormat: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case numberWithDuration
        case numberWithTimeline
        case timeWithTimeline
        case sdkUnknown(Swift.String)

        public static var allCases: [SegmentTemplateFormat] {
            return [
                .numberWithDuration,
                .numberWithTimeline,
                .timeWithTimeline
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .numberWithDuration: return "NUMBER_WITH_DURATION"
            case .numberWithTimeline: return "NUMBER_WITH_TIMELINE"
            case .timeWithTimeline: return "TIME_WITH_TIMELINE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaPackageVodClientTypes {

    /// A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
    public struct DashPackage: Swift.Sendable {
        /// A list of DASH manifest configurations.
        /// This member is required.
        public var dashManifests: [MediaPackageVodClientTypes.DashManifest]?
        /// A Dynamic Adaptive Streaming over HTTP (DASH) encryption configuration.
        public var encryption: MediaPackageVodClientTypes.DashEncryption?
        /// When includeEncoderConfigurationInSegments is set to true, MediaPackage places your encoder's Sequence Parameter Set (SPS), Picture Parameter Set (PPS), and Video Parameter Set (VPS) metadata in every video segment instead of in the init fragment. This lets you use different SPS/PPS/VPS settings for your assets during content playback.
        public var includeEncoderConfigurationInSegments: Swift.Bool?
        /// When enabled, an I-Frame only stream will be included in the output.
        public var includeIframeOnlyStream: Swift.Bool?
        /// A list of triggers that controls when the outgoing Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD) will be partitioned into multiple periods. If empty, the content will not be partitioned into more than one period. If the list contains "ADS", new periods will be created where the Asset contains SCTE-35 ad markers.
        public var periodTriggers: [MediaPackageVodClientTypes.__PeriodTriggersElement]?
        /// Duration (in seconds) of each segment. Actual segments will be rounded to the nearest multiple of the source segment duration.
        public var segmentDurationSeconds: Swift.Int?
        /// Determines the type of SegmentTemplate included in the Media Presentation Description (MPD). When set to NUMBER_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Number$ media URLs. When set to TIME_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Time$ media URLs. When set to NUMBER_WITH_DURATION, only a duration is included in each SegmentTemplate, with $Number$ media URLs.
        public var segmentTemplateFormat: MediaPackageVodClientTypes.SegmentTemplateFormat?

        public init(
            dashManifests: [MediaPackageVodClientTypes.DashManifest]? = nil,
            encryption: MediaPackageVodClientTypes.DashEncryption? = nil,
            includeEncoderConfigurationInSegments: Swift.Bool? = nil,
            includeIframeOnlyStream: Swift.Bool? = nil,
            periodTriggers: [MediaPackageVodClientTypes.__PeriodTriggersElement]? = nil,
            segmentDurationSeconds: Swift.Int? = nil,
            segmentTemplateFormat: MediaPackageVodClientTypes.SegmentTemplateFormat? = nil
        )
        {
            self.dashManifests = dashManifests
            self.encryption = encryption
            self.includeEncoderConfigurationInSegments = includeEncoderConfigurationInSegments
            self.includeIframeOnlyStream = includeIframeOnlyStream
            self.periodTriggers = periodTriggers
            self.segmentDurationSeconds = segmentDurationSeconds
            self.segmentTemplateFormat = segmentTemplateFormat
        }
    }
}

extension MediaPackageVodClientTypes {

    public enum EncryptionMethod: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case aes128
        case sampleAes
        case sdkUnknown(Swift.String)

        public static var allCases: [EncryptionMethod] {
            return [
                .aes128,
                .sampleAes
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .aes128: return "AES_128"
            case .sampleAes: return "SAMPLE_AES"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MediaPackageVodClientTypes {

    /// An HTTP Live Streaming (HLS) encryption configuration.
    public struct HlsEncryption: Swift.Sendable {
        /// A constant initialization vector for encryption (optional). When not specified the initialization vector will be periodically rotated.
        public var constantInitializationVector: Swift.String?
        /// The encryption method to use.
        public var encryptionMethod: MediaPackageVodClientTypes.EncryptionMethod?
        /// A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.
        /// This member is required.
        public var spekeKeyProvider: MediaPackageVodClientTypes.SpekeKeyProvider?

        public init(
            constantInitializationVector: Swift.String? = nil,
            encryptionMethod: MediaPackageVodClientTypes.EncryptionMethod? = nil,
            spekeKeyProvider: MediaPackageVodClientTypes.SpekeKeyProvider? = nil
        )
        {
            self.constantInitializationVector = constantInitializationVector
            self.encryptionMethod = encryptionMethod
            self.spekeKeyProvider = spekeKeyProvider
        }
    }
}

extension MediaPackageVodClientTypes {

    /// An HTTP Live Streaming (HLS) packaging configuration.
    public struct HlsPackage: Swift.Sendable {
        /// An HTTP Live Streaming (HLS) encryption configuration.
        public var encryption: MediaPackageVodClientTypes.HlsEncryption?
        /// A list of HLS manifest configurations.
        /// This member is required.
        public var hlsManifests: [MediaPackageVodClientTypes.HlsManifest]?
        /// When enabled, MediaPackage passes through digital video broadcasting (DVB) subtitles into the output.
        public var includeDvbSubtitles: Swift.Bool?
        /// Duration (in seconds) of each fragment. Actual fragments will be rounded to the nearest multiple of the source fragment duration.
        public var segmentDurationSeconds: Swift.Int?
        /// When enabled, audio streams will be placed in rendition groups in the output.
        public var useAudioRenditionGroup: Swift.Bool?

        public init(
            encryption: MediaPackageVodClientTypes.HlsEncryption? = nil,
            hlsManifests: [MediaPackageVodClientTypes.HlsManifest]? = nil,
            includeDvbSubtitles: Swift.Bool? = nil,
            segmentDurationSeconds: Swift.Int? = nil,
            useAudioRenditionGroup: Swift.Bool? = nil
        )
        {
            self.encryption = encryption
            self.hlsManifests = hlsManifests
            self.includeDvbSubtitles = includeDvbSubtitles
            self.segmentDurationSeconds = segmentDurationSeconds
            self.useAudioRenditionGroup = useAudioRenditionGroup
        }
    }
}

extension MediaPackageVodClientTypes {

    /// A Microsoft Smooth Streaming (MSS) encryption configuration.
    public struct MssEncryption: Swift.Sendable {
        /// A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.
        /// This member is required.
        public var spekeKeyProvider: MediaPackageVodClientTypes.SpekeKeyProvider?

        public init(
            spekeKeyProvider: MediaPackageVodClientTypes.SpekeKeyProvider? = nil
        )
        {
            self.spekeKeyProvider = spekeKeyProvider
        }
    }
}

extension MediaPackageVodClientTypes {

    /// A Microsoft Smooth Streaming (MSS) PackagingConfiguration.
    public struct MssPackage: Swift.Sendable {
        /// A Microsoft Smooth Streaming (MSS) encryption configuration.
        public var encryption: MediaPackageVodClientTypes.MssEncryption?
        /// A list of MSS manifest configurations.
        /// This member is required.
        public var mssManifests: [MediaPackageVodClientTypes.MssManifest]?
        /// The duration (in seconds) of each segment.
        public var segmentDurationSeconds: Swift.Int?

        public init(
            encryption: MediaPackageVodClientTypes.MssEncryption? = nil,
            mssManifests: [MediaPackageVodClientTypes.MssManifest]? = nil,
            segmentDurationSeconds: Swift.Int? = nil
        )
        {
            self.encryption = encryption
            self.mssManifests = mssManifests
            self.segmentDurationSeconds = segmentDurationSeconds
        }
    }
}

extension MediaPackageVodClientTypes {

    /// A MediaPackage VOD PackagingConfiguration resource.
    public struct PackagingConfiguration: Swift.Sendable {
        /// The ARN of the PackagingConfiguration.
        public var arn: Swift.String?
        /// A CMAF packaging configuration.
        public var cmafPackage: MediaPackageVodClientTypes.CmafPackage?
        /// The time the PackagingConfiguration was created.
        public var createdAt: Swift.String?
        /// A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
        public var dashPackage: MediaPackageVodClientTypes.DashPackage?
        /// An HTTP Live Streaming (HLS) packaging configuration.
        public var hlsPackage: MediaPackageVodClientTypes.HlsPackage?
        /// The ID of the PackagingConfiguration.
        public var id: Swift.String?
        /// A Microsoft Smooth Streaming (MSS) PackagingConfiguration.
        public var mssPackage: MediaPackageVodClientTypes.MssPackage?
        /// The ID of a PackagingGroup.
        public var packagingGroupId: Swift.String?
        /// A collection of tags associated with a resource
        public var tags: [Swift.String: Swift.String]?

        public init(
            arn: Swift.String? = nil,
            cmafPackage: MediaPackageVodClientTypes.CmafPackage? = nil,
            createdAt: Swift.String? = nil,
            dashPackage: MediaPackageVodClientTypes.DashPackage? = nil,
            hlsPackage: MediaPackageVodClientTypes.HlsPackage? = nil,
            id: Swift.String? = nil,
            mssPackage: MediaPackageVodClientTypes.MssPackage? = nil,
            packagingGroupId: Swift.String? = nil,
            tags: [Swift.String: Swift.String]? = nil
        )
        {
            self.arn = arn
            self.cmafPackage = cmafPackage
            self.createdAt = createdAt
            self.dashPackage = dashPackage
            self.hlsPackage = hlsPackage
            self.id = id
            self.mssPackage = mssPackage
            self.packagingGroupId = packagingGroupId
            self.tags = tags
        }
    }
}

extension MediaPackageVodClientTypes {

    /// CDN Authorization credentials
    public struct Authorization: Swift.Sendable {
        /// The Amazon Resource Name (ARN) for the secret in AWS Secrets Manager that is used for CDN authorization.
        /// This member is required.
        public var cdnIdentifierSecret: Swift.String?
        /// The Amazon Resource Name (ARN) for the IAM role that allows MediaPackage to communicate with AWS Secrets Manager.
        /// This member is required.
        public var secretsRoleArn: Swift.String?

        public init(
            cdnIdentifierSecret: Swift.String? = nil,
            secretsRoleArn: Swift.String? = nil
        )
        {
            self.cdnIdentifierSecret = cdnIdentifierSecret
            self.secretsRoleArn = secretsRoleArn
        }
    }
}

extension MediaPackageVodClientTypes {

    /// Configure egress access logging.
    public struct EgressAccessLogs: Swift.Sendable {
        /// Customize the log group name.
        public var logGroupName: Swift.String?

        public init(
            logGroupName: Swift.String? = nil
        )
        {
            self.logGroupName = logGroupName
        }
    }
}

extension MediaPackageVodClientTypes {

    /// A MediaPackage VOD PackagingGroup resource.
    public struct PackagingGroup: Swift.Sendable {
        /// The approximate asset count of the PackagingGroup.
        public var approximateAssetCount: Swift.Int?
        /// The ARN of the PackagingGroup.
        public var arn: Swift.String?
        /// CDN Authorization credentials
        public var authorization: MediaPackageVodClientTypes.Authorization?
        /// The time the PackagingGroup was created.
        public var createdAt: Swift.String?
        /// The fully qualified domain name for Assets in the PackagingGroup.
        public var domainName: Swift.String?
        /// Configure egress access logging.
        public var egressAccessLogs: MediaPackageVodClientTypes.EgressAccessLogs?
        /// The ID of the PackagingGroup.
        public var id: Swift.String?
        /// A collection of tags associated with a resource
        public var tags: [Swift.String: Swift.String]?

        public init(
            approximateAssetCount: Swift.Int? = nil,
            arn: Swift.String? = nil,
            authorization: MediaPackageVodClientTypes.Authorization? = nil,
            createdAt: Swift.String? = nil,
            domainName: Swift.String? = nil,
            egressAccessLogs: MediaPackageVodClientTypes.EgressAccessLogs? = nil,
            id: Swift.String? = nil,
            tags: [Swift.String: Swift.String]? = nil
        )
        {
            self.approximateAssetCount = approximateAssetCount
            self.arn = arn
            self.authorization = authorization
            self.createdAt = createdAt
            self.domainName = domainName
            self.egressAccessLogs = egressAccessLogs
            self.id = id
            self.tags = tags
        }
    }
}

/// The client is not authorized to access the requested resource.
public struct ForbiddenException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ForbiddenException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// An unexpected error occurred.
public struct InternalServerErrorException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerErrorException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The requested resource does not exist.
public struct NotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// An unexpected error occurred.
public struct ServiceUnavailableException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceUnavailableException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The client has exceeded their resource or throttling limits.
public struct TooManyRequestsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyRequestsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The parameters sent in the request are not valid.
public struct UnprocessableEntityException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnprocessableEntityException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The option to configure log subscription.
public struct ConfigureLogsInput: Swift.Sendable {
    /// Configure egress access logging.
    public var egressAccessLogs: MediaPackageVodClientTypes.EgressAccessLogs?
    /// The ID of a MediaPackage VOD PackagingGroup resource.
    /// This member is required.
    public var id: Swift.String?

    public init(
        egressAccessLogs: MediaPackageVodClientTypes.EgressAccessLogs? = nil,
        id: Swift.String? = nil
    )
    {
        self.egressAccessLogs = egressAccessLogs
        self.id = id
    }
}

public struct ConfigureLogsOutput: Swift.Sendable {
    /// The ARN of the PackagingGroup.
    public var arn: Swift.String?
    /// CDN Authorization credentials
    public var authorization: MediaPackageVodClientTypes.Authorization?
    /// The time the PackagingGroup was created.
    public var createdAt: Swift.String?
    /// The fully qualified domain name for Assets in the PackagingGroup.
    public var domainName: Swift.String?
    /// Configure egress access logging.
    public var egressAccessLogs: MediaPackageVodClientTypes.EgressAccessLogs?
    /// The ID of the PackagingGroup.
    public var id: Swift.String?
    /// A collection of tags associated with a resource
    public var tags: [Swift.String: Swift.String]?

    public init(
        arn: Swift.String? = nil,
        authorization: MediaPackageVodClientTypes.Authorization? = nil,
        createdAt: Swift.String? = nil,
        domainName: Swift.String? = nil,
        egressAccessLogs: MediaPackageVodClientTypes.EgressAccessLogs? = nil,
        id: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.arn = arn
        self.authorization = authorization
        self.createdAt = createdAt
        self.domainName = domainName
        self.egressAccessLogs = egressAccessLogs
        self.id = id
        self.tags = tags
    }
}

/// A new MediaPackage VOD Asset configuration.
public struct CreateAssetInput: Swift.Sendable {
    /// The unique identifier for the Asset.
    /// This member is required.
    public var id: Swift.String?
    /// The ID of the PackagingGroup for the Asset.
    /// This member is required.
    public var packagingGroupId: Swift.String?
    /// The resource ID to include in SPEKE key requests.
    public var resourceId: Swift.String?
    /// ARN of the source object in S3.
    /// This member is required.
    public var sourceArn: Swift.String?
    /// The IAM role ARN used to access the source S3 bucket.
    /// This member is required.
    public var sourceRoleArn: Swift.String?
    /// A collection of tags associated with a resource
    public var tags: [Swift.String: Swift.String]?

    public init(
        id: Swift.String? = nil,
        packagingGroupId: Swift.String? = nil,
        resourceId: Swift.String? = nil,
        sourceArn: Swift.String? = nil,
        sourceRoleArn: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.id = id
        self.packagingGroupId = packagingGroupId
        self.resourceId = resourceId
        self.sourceArn = sourceArn
        self.sourceRoleArn = sourceRoleArn
        self.tags = tags
    }
}

public struct CreateAssetOutput: Swift.Sendable {
    /// The ARN of the Asset.
    public var arn: Swift.String?
    /// The time the Asset was initially submitted for Ingest.
    public var createdAt: Swift.String?
    /// The list of egress endpoints available for the Asset.
    public var egressEndpoints: [MediaPackageVodClientTypes.EgressEndpoint]?
    /// The unique identifier for the Asset.
    public var id: Swift.String?
    /// The ID of the PackagingGroup for the Asset.
    public var packagingGroupId: Swift.String?
    /// The resource ID to include in SPEKE key requests.
    public var resourceId: Swift.String?
    /// ARN of the source object in S3.
    public var sourceArn: Swift.String?
    /// The IAM role_arn used to access the source S3 bucket.
    public var sourceRoleArn: Swift.String?
    /// A collection of tags associated with a resource
    public var tags: [Swift.String: Swift.String]?

    public init(
        arn: Swift.String? = nil,
        createdAt: Swift.String? = nil,
        egressEndpoints: [MediaPackageVodClientTypes.EgressEndpoint]? = nil,
        id: Swift.String? = nil,
        packagingGroupId: Swift.String? = nil,
        resourceId: Swift.String? = nil,
        sourceArn: Swift.String? = nil,
        sourceRoleArn: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.arn = arn
        self.createdAt = createdAt
        self.egressEndpoints = egressEndpoints
        self.id = id
        self.packagingGroupId = packagingGroupId
        self.resourceId = resourceId
        self.sourceArn = sourceArn
        self.sourceRoleArn = sourceRoleArn
        self.tags = tags
    }
}

/// A new MediaPackage VOD PackagingConfiguration resource configuration.
public struct CreatePackagingConfigurationInput: Swift.Sendable {
    /// A CMAF packaging configuration.
    public var cmafPackage: MediaPackageVodClientTypes.CmafPackage?
    /// A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
    public var dashPackage: MediaPackageVodClientTypes.DashPackage?
    /// An HTTP Live Streaming (HLS) packaging configuration.
    public var hlsPackage: MediaPackageVodClientTypes.HlsPackage?
    /// The ID of the PackagingConfiguration.
    /// This member is required.
    public var id: Swift.String?
    /// A Microsoft Smooth Streaming (MSS) PackagingConfiguration.
    public var mssPackage: MediaPackageVodClientTypes.MssPackage?
    /// The ID of a PackagingGroup.
    /// This member is required.
    public var packagingGroupId: Swift.String?
    /// A collection of tags associated with a resource
    public var tags: [Swift.String: Swift.String]?

    public init(
        cmafPackage: MediaPackageVodClientTypes.CmafPackage? = nil,
        dashPackage: MediaPackageVodClientTypes.DashPackage? = nil,
        hlsPackage: MediaPackageVodClientTypes.HlsPackage? = nil,
        id: Swift.String? = nil,
        mssPackage: MediaPackageVodClientTypes.MssPackage? = nil,
        packagingGroupId: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.cmafPackage = cmafPackage
        self.dashPackage = dashPackage
        self.hlsPackage = hlsPackage
        self.id = id
        self.mssPackage = mssPackage
        self.packagingGroupId = packagingGroupId
        self.tags = tags
    }
}

public struct CreatePackagingConfigurationOutput: Swift.Sendable {
    /// The ARN of the PackagingConfiguration.
    public var arn: Swift.String?
    /// A CMAF packaging configuration.
    public var cmafPackage: MediaPackageVodClientTypes.CmafPackage?
    /// The time the PackagingConfiguration was created.
    public var createdAt: Swift.String?
    /// A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
    public var dashPackage: MediaPackageVodClientTypes.DashPackage?
    /// An HTTP Live Streaming (HLS) packaging configuration.
    public var hlsPackage: MediaPackageVodClientTypes.HlsPackage?
    /// The ID of the PackagingConfiguration.
    public var id: Swift.String?
    /// A Microsoft Smooth Streaming (MSS) PackagingConfiguration.
    public var mssPackage: MediaPackageVodClientTypes.MssPackage?
    /// The ID of a PackagingGroup.
    public var packagingGroupId: Swift.String?
    /// A collection of tags associated with a resource
    public var tags: [Swift.String: Swift.String]?

    public init(
        arn: Swift.String? = nil,
        cmafPackage: MediaPackageVodClientTypes.CmafPackage? = nil,
        createdAt: Swift.String? = nil,
        dashPackage: MediaPackageVodClientTypes.DashPackage? = nil,
        hlsPackage: MediaPackageVodClientTypes.HlsPackage? = nil,
        id: Swift.String? = nil,
        mssPackage: MediaPackageVodClientTypes.MssPackage? = nil,
        packagingGroupId: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.arn = arn
        self.cmafPackage = cmafPackage
        self.createdAt = createdAt
        self.dashPackage = dashPackage
        self.hlsPackage = hlsPackage
        self.id = id
        self.mssPackage = mssPackage
        self.packagingGroupId = packagingGroupId
        self.tags = tags
    }
}

/// A new MediaPackage VOD PackagingGroup resource configuration.
public struct CreatePackagingGroupInput: Swift.Sendable {
    /// CDN Authorization credentials
    public var authorization: MediaPackageVodClientTypes.Authorization?
    /// Configure egress access logging.
    public var egressAccessLogs: MediaPackageVodClientTypes.EgressAccessLogs?
    /// The ID of the PackagingGroup.
    /// This member is required.
    public var id: Swift.String?
    /// A collection of tags associated with a resource
    public var tags: [Swift.String: Swift.String]?

    public init(
        authorization: MediaPackageVodClientTypes.Authorization? = nil,
        egressAccessLogs: MediaPackageVodClientTypes.EgressAccessLogs? = nil,
        id: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.authorization = authorization
        self.egressAccessLogs = egressAccessLogs
        self.id = id
        self.tags = tags
    }
}

public struct CreatePackagingGroupOutput: Swift.Sendable {
    /// The ARN of the PackagingGroup.
    public var arn: Swift.String?
    /// CDN Authorization credentials
    public var authorization: MediaPackageVodClientTypes.Authorization?
    /// The time the PackagingGroup was created.
    public var createdAt: Swift.String?
    /// The fully qualified domain name for Assets in the PackagingGroup.
    public var domainName: Swift.String?
    /// Configure egress access logging.
    public var egressAccessLogs: MediaPackageVodClientTypes.EgressAccessLogs?
    /// The ID of the PackagingGroup.
    public var id: Swift.String?
    /// A collection of tags associated with a resource
    public var tags: [Swift.String: Swift.String]?

    public init(
        arn: Swift.String? = nil,
        authorization: MediaPackageVodClientTypes.Authorization? = nil,
        createdAt: Swift.String? = nil,
        domainName: Swift.String? = nil,
        egressAccessLogs: MediaPackageVodClientTypes.EgressAccessLogs? = nil,
        id: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.arn = arn
        self.authorization = authorization
        self.createdAt = createdAt
        self.domainName = domainName
        self.egressAccessLogs = egressAccessLogs
        self.id = id
        self.tags = tags
    }
}

public struct DeleteAssetInput: Swift.Sendable {
    /// The ID of the MediaPackage VOD Asset resource to delete.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

public struct DeleteAssetOutput: Swift.Sendable {

    public init() { }
}

public struct DeletePackagingConfigurationInput: Swift.Sendable {
    /// The ID of the MediaPackage VOD PackagingConfiguration resource to delete.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

public struct DeletePackagingConfigurationOutput: Swift.Sendable {

    public init() { }
}

public struct DeletePackagingGroupInput: Swift.Sendable {
    /// The ID of the MediaPackage VOD PackagingGroup resource to delete.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

public struct DeletePackagingGroupOutput: Swift.Sendable {

    public init() { }
}

public struct DescribeAssetInput: Swift.Sendable {
    /// The ID of an MediaPackage VOD Asset resource.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

public struct DescribeAssetOutput: Swift.Sendable {
    /// The ARN of the Asset.
    public var arn: Swift.String?
    /// The time the Asset was initially submitted for Ingest.
    public var createdAt: Swift.String?
    /// The list of egress endpoints available for the Asset.
    public var egressEndpoints: [MediaPackageVodClientTypes.EgressEndpoint]?
    /// The unique identifier for the Asset.
    public var id: Swift.String?
    /// The ID of the PackagingGroup for the Asset.
    public var packagingGroupId: Swift.String?
    /// The resource ID to include in SPEKE key requests.
    public var resourceId: Swift.String?
    /// ARN of the source object in S3.
    public var sourceArn: Swift.String?
    /// The IAM role_arn used to access the source S3 bucket.
    public var sourceRoleArn: Swift.String?
    /// A collection of tags associated with a resource
    public var tags: [Swift.String: Swift.String]?

    public init(
        arn: Swift.String? = nil,
        createdAt: Swift.String? = nil,
        egressEndpoints: [MediaPackageVodClientTypes.EgressEndpoint]? = nil,
        id: Swift.String? = nil,
        packagingGroupId: Swift.String? = nil,
        resourceId: Swift.String? = nil,
        sourceArn: Swift.String? = nil,
        sourceRoleArn: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.arn = arn
        self.createdAt = createdAt
        self.egressEndpoints = egressEndpoints
        self.id = id
        self.packagingGroupId = packagingGroupId
        self.resourceId = resourceId
        self.sourceArn = sourceArn
        self.sourceRoleArn = sourceRoleArn
        self.tags = tags
    }
}

public struct DescribePackagingConfigurationInput: Swift.Sendable {
    /// The ID of a MediaPackage VOD PackagingConfiguration resource.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

public struct DescribePackagingConfigurationOutput: Swift.Sendable {
    /// The ARN of the PackagingConfiguration.
    public var arn: Swift.String?
    /// A CMAF packaging configuration.
    public var cmafPackage: MediaPackageVodClientTypes.CmafPackage?
    /// The time the PackagingConfiguration was created.
    public var createdAt: Swift.String?
    /// A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
    public var dashPackage: MediaPackageVodClientTypes.DashPackage?
    /// An HTTP Live Streaming (HLS) packaging configuration.
    public var hlsPackage: MediaPackageVodClientTypes.HlsPackage?
    /// The ID of the PackagingConfiguration.
    public var id: Swift.String?
    /// A Microsoft Smooth Streaming (MSS) PackagingConfiguration.
    public var mssPackage: MediaPackageVodClientTypes.MssPackage?
    /// The ID of a PackagingGroup.
    public var packagingGroupId: Swift.String?
    /// A collection of tags associated with a resource
    public var tags: [Swift.String: Swift.String]?

    public init(
        arn: Swift.String? = nil,
        cmafPackage: MediaPackageVodClientTypes.CmafPackage? = nil,
        createdAt: Swift.String? = nil,
        dashPackage: MediaPackageVodClientTypes.DashPackage? = nil,
        hlsPackage: MediaPackageVodClientTypes.HlsPackage? = nil,
        id: Swift.String? = nil,
        mssPackage: MediaPackageVodClientTypes.MssPackage? = nil,
        packagingGroupId: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.arn = arn
        self.cmafPackage = cmafPackage
        self.createdAt = createdAt
        self.dashPackage = dashPackage
        self.hlsPackage = hlsPackage
        self.id = id
        self.mssPackage = mssPackage
        self.packagingGroupId = packagingGroupId
        self.tags = tags
    }
}

public struct DescribePackagingGroupInput: Swift.Sendable {
    /// The ID of a MediaPackage VOD PackagingGroup resource.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

public struct DescribePackagingGroupOutput: Swift.Sendable {
    /// The approximate asset count of the PackagingGroup.
    public var approximateAssetCount: Swift.Int?
    /// The ARN of the PackagingGroup.
    public var arn: Swift.String?
    /// CDN Authorization credentials
    public var authorization: MediaPackageVodClientTypes.Authorization?
    /// The time the PackagingGroup was created.
    public var createdAt: Swift.String?
    /// The fully qualified domain name for Assets in the PackagingGroup.
    public var domainName: Swift.String?
    /// Configure egress access logging.
    public var egressAccessLogs: MediaPackageVodClientTypes.EgressAccessLogs?
    /// The ID of the PackagingGroup.
    public var id: Swift.String?
    /// A collection of tags associated with a resource
    public var tags: [Swift.String: Swift.String]?

    public init(
        approximateAssetCount: Swift.Int? = nil,
        arn: Swift.String? = nil,
        authorization: MediaPackageVodClientTypes.Authorization? = nil,
        createdAt: Swift.String? = nil,
        domainName: Swift.String? = nil,
        egressAccessLogs: MediaPackageVodClientTypes.EgressAccessLogs? = nil,
        id: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.approximateAssetCount = approximateAssetCount
        self.arn = arn
        self.authorization = authorization
        self.createdAt = createdAt
        self.domainName = domainName
        self.egressAccessLogs = egressAccessLogs
        self.id = id
        self.tags = tags
    }
}

public struct ListAssetsInput: Swift.Sendable {
    /// Upper bound on number of records to return.
    public var maxResults: Swift.Int?
    /// A token used to resume pagination from the end of a previous request.
    public var nextToken: Swift.String?
    /// Returns Assets associated with the specified PackagingGroup.
    public var packagingGroupId: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        packagingGroupId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.packagingGroupId = packagingGroupId
    }
}

public struct ListAssetsOutput: Swift.Sendable {
    /// A list of MediaPackage VOD Asset resources.
    public var assets: [MediaPackageVodClientTypes.AssetShallow]?
    /// A token that can be used to resume pagination from the end of the collection.
    public var nextToken: Swift.String?

    public init(
        assets: [MediaPackageVodClientTypes.AssetShallow]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.assets = assets
        self.nextToken = nextToken
    }
}

public struct ListPackagingConfigurationsInput: Swift.Sendable {
    /// Upper bound on number of records to return.
    public var maxResults: Swift.Int?
    /// A token used to resume pagination from the end of a previous request.
    public var nextToken: Swift.String?
    /// Returns MediaPackage VOD PackagingConfigurations associated with the specified PackagingGroup.
    public var packagingGroupId: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        packagingGroupId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.packagingGroupId = packagingGroupId
    }
}

public struct ListPackagingConfigurationsOutput: Swift.Sendable {
    /// A token that can be used to resume pagination from the end of the collection.
    public var nextToken: Swift.String?
    /// A list of MediaPackage VOD PackagingConfiguration resources.
    public var packagingConfigurations: [MediaPackageVodClientTypes.PackagingConfiguration]?

    public init(
        nextToken: Swift.String? = nil,
        packagingConfigurations: [MediaPackageVodClientTypes.PackagingConfiguration]? = nil
    )
    {
        self.nextToken = nextToken
        self.packagingConfigurations = packagingConfigurations
    }
}

public struct ListPackagingGroupsInput: Swift.Sendable {
    /// Upper bound on number of records to return.
    public var maxResults: Swift.Int?
    /// A token used to resume pagination from the end of a previous request.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListPackagingGroupsOutput: Swift.Sendable {
    /// A token that can be used to resume pagination from the end of the collection.
    public var nextToken: Swift.String?
    /// A list of MediaPackage VOD PackagingGroup resources.
    public var packagingGroups: [MediaPackageVodClientTypes.PackagingGroup]?

    public init(
        nextToken: Swift.String? = nil,
        packagingGroups: [MediaPackageVodClientTypes.PackagingGroup]? = nil
    )
    {
        self.nextToken = nextToken
        self.packagingGroups = packagingGroups
    }
}

public struct ListTagsForResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) for the resource. You can get this from the response to any request to the resource.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct ListTagsForResourceOutput: Swift.Sendable {
    /// A collection of tags associated with a resource
    public var tags: [Swift.String: Swift.String]?

    public init(
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

public struct TagResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) for the resource. You can get this from the response to any request to the resource.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// A collection of tags associated with a resource
    /// This member is required.
    public var tags: [Swift.String: Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

public struct UntagResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) for the resource. You can get this from the response to any request to the resource.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// A comma-separated list of the tag keys to remove from the resource.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

/// A MediaPackage VOD PackagingGroup resource configuration.
public struct UpdatePackagingGroupInput: Swift.Sendable {
    /// CDN Authorization credentials
    public var authorization: MediaPackageVodClientTypes.Authorization?
    /// The ID of a MediaPackage VOD PackagingGroup resource.
    /// This member is required.
    public var id: Swift.String?

    public init(
        authorization: MediaPackageVodClientTypes.Authorization? = nil,
        id: Swift.String? = nil
    )
    {
        self.authorization = authorization
        self.id = id
    }
}

public struct UpdatePackagingGroupOutput: Swift.Sendable {
    /// The approximate asset count of the PackagingGroup.
    public var approximateAssetCount: Swift.Int?
    /// The ARN of the PackagingGroup.
    public var arn: Swift.String?
    /// CDN Authorization credentials
    public var authorization: MediaPackageVodClientTypes.Authorization?
    /// The time the PackagingGroup was created.
    public var createdAt: Swift.String?
    /// The fully qualified domain name for Assets in the PackagingGroup.
    public var domainName: Swift.String?
    /// Configure egress access logging.
    public var egressAccessLogs: MediaPackageVodClientTypes.EgressAccessLogs?
    /// The ID of the PackagingGroup.
    public var id: Swift.String?
    /// A collection of tags associated with a resource
    public var tags: [Swift.String: Swift.String]?

    public init(
        approximateAssetCount: Swift.Int? = nil,
        arn: Swift.String? = nil,
        authorization: MediaPackageVodClientTypes.Authorization? = nil,
        createdAt: Swift.String? = nil,
        domainName: Swift.String? = nil,
        egressAccessLogs: MediaPackageVodClientTypes.EgressAccessLogs? = nil,
        id: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.approximateAssetCount = approximateAssetCount
        self.arn = arn
        self.authorization = authorization
        self.createdAt = createdAt
        self.domainName = domainName
        self.egressAccessLogs = egressAccessLogs
        self.id = id
        self.tags = tags
    }
}

extension ConfigureLogsInput {

    static func urlPathProvider(_ value: ConfigureLogsInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/packaging_groups/\(id.urlPercentEncoding())/configure_logs"
    }
}

extension CreateAssetInput {

    static func urlPathProvider(_ value: CreateAssetInput) -> Swift.String? {
        return "/assets"
    }
}

extension CreatePackagingConfigurationInput {

    static func urlPathProvider(_ value: CreatePackagingConfigurationInput) -> Swift.String? {
        return "/packaging_configurations"
    }
}

extension CreatePackagingGroupInput {

    static func urlPathProvider(_ value: CreatePackagingGroupInput) -> Swift.String? {
        return "/packaging_groups"
    }
}

extension DeleteAssetInput {

    static func urlPathProvider(_ value: DeleteAssetInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/assets/\(id.urlPercentEncoding())"
    }
}

extension DeletePackagingConfigurationInput {

    static func urlPathProvider(_ value: DeletePackagingConfigurationInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/packaging_configurations/\(id.urlPercentEncoding())"
    }
}

extension DeletePackagingGroupInput {

    static func urlPathProvider(_ value: DeletePackagingGroupInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/packaging_groups/\(id.urlPercentEncoding())"
    }
}

extension DescribeAssetInput {

    static func urlPathProvider(_ value: DescribeAssetInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/assets/\(id.urlPercentEncoding())"
    }
}

extension DescribePackagingConfigurationInput {

    static func urlPathProvider(_ value: DescribePackagingConfigurationInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/packaging_configurations/\(id.urlPercentEncoding())"
    }
}

extension DescribePackagingGroupInput {

    static func urlPathProvider(_ value: DescribePackagingGroupInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/packaging_groups/\(id.urlPercentEncoding())"
    }
}

extension ListAssetsInput {

    static func urlPathProvider(_ value: ListAssetsInput) -> Swift.String? {
        return "/assets"
    }
}

extension ListAssetsInput {

    static func queryItemProvider(_ value: ListAssetsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let packagingGroupId = value.packagingGroupId {
            let packagingGroupIdQueryItem = Smithy.URIQueryItem(name: "packagingGroupId".urlPercentEncoding(), value: Swift.String(packagingGroupId).urlPercentEncoding())
            items.append(packagingGroupIdQueryItem)
        }
        return items
    }
}

extension ListPackagingConfigurationsInput {

    static func urlPathProvider(_ value: ListPackagingConfigurationsInput) -> Swift.String? {
        return "/packaging_configurations"
    }
}

extension ListPackagingConfigurationsInput {

    static func queryItemProvider(_ value: ListPackagingConfigurationsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let packagingGroupId = value.packagingGroupId {
            let packagingGroupIdQueryItem = Smithy.URIQueryItem(name: "packagingGroupId".urlPercentEncoding(), value: Swift.String(packagingGroupId).urlPercentEncoding())
            items.append(packagingGroupIdQueryItem)
        }
        return items
    }
}

extension ListPackagingGroupsInput {

    static func urlPathProvider(_ value: ListPackagingGroupsInput) -> Swift.String? {
        return "/packaging_groups"
    }
}

extension ListPackagingGroupsInput {

    static func queryItemProvider(_ value: ListPackagingGroupsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func queryItemProvider(_ value: UntagResourceInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let tagKeys = value.tagKeys else {
            let message = "Creating a URL Query Item failed. tagKeys is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        tagKeys.forEach { queryItemValue in
            let queryItem = Smithy.URIQueryItem(name: "tagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
            items.append(queryItem)
        }
        return items
    }
}

extension UpdatePackagingGroupInput {

    static func urlPathProvider(_ value: UpdatePackagingGroupInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/packaging_groups/\(id.urlPercentEncoding())"
    }
}

extension ConfigureLogsInput {

    static func write(value: ConfigureLogsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["egressAccessLogs"].write(value.egressAccessLogs, with: MediaPackageVodClientTypes.EgressAccessLogs.write(value:to:))
    }
}

extension CreateAssetInput {

    static func write(value: CreateAssetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["id"].write(value.id)
        try writer["packagingGroupId"].write(value.packagingGroupId)
        try writer["resourceId"].write(value.resourceId)
        try writer["sourceArn"].write(value.sourceArn)
        try writer["sourceRoleArn"].write(value.sourceRoleArn)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreatePackagingConfigurationInput {

    static func write(value: CreatePackagingConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cmafPackage"].write(value.cmafPackage, with: MediaPackageVodClientTypes.CmafPackage.write(value:to:))
        try writer["dashPackage"].write(value.dashPackage, with: MediaPackageVodClientTypes.DashPackage.write(value:to:))
        try writer["hlsPackage"].write(value.hlsPackage, with: MediaPackageVodClientTypes.HlsPackage.write(value:to:))
        try writer["id"].write(value.id)
        try writer["mssPackage"].write(value.mssPackage, with: MediaPackageVodClientTypes.MssPackage.write(value:to:))
        try writer["packagingGroupId"].write(value.packagingGroupId)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreatePackagingGroupInput {

    static func write(value: CreatePackagingGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["authorization"].write(value.authorization, with: MediaPackageVodClientTypes.Authorization.write(value:to:))
        try writer["egressAccessLogs"].write(value.egressAccessLogs, with: MediaPackageVodClientTypes.EgressAccessLogs.write(value:to:))
        try writer["id"].write(value.id)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension UpdatePackagingGroupInput {

    static func write(value: UpdatePackagingGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["authorization"].write(value.authorization, with: MediaPackageVodClientTypes.Authorization.write(value:to:))
    }
}

extension ConfigureLogsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ConfigureLogsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ConfigureLogsOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.authorization = try reader["authorization"].readIfPresent(with: MediaPackageVodClientTypes.Authorization.read(from:))
        value.createdAt = try reader["createdAt"].readIfPresent()
        value.domainName = try reader["domainName"].readIfPresent()
        value.egressAccessLogs = try reader["egressAccessLogs"].readIfPresent(with: MediaPackageVodClientTypes.EgressAccessLogs.read(from:))
        value.id = try reader["id"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension CreateAssetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateAssetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateAssetOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.createdAt = try reader["createdAt"].readIfPresent()
        value.egressEndpoints = try reader["egressEndpoints"].readListIfPresent(memberReadingClosure: MediaPackageVodClientTypes.EgressEndpoint.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.id = try reader["id"].readIfPresent()
        value.packagingGroupId = try reader["packagingGroupId"].readIfPresent()
        value.resourceId = try reader["resourceId"].readIfPresent()
        value.sourceArn = try reader["sourceArn"].readIfPresent()
        value.sourceRoleArn = try reader["sourceRoleArn"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension CreatePackagingConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreatePackagingConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreatePackagingConfigurationOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.cmafPackage = try reader["cmafPackage"].readIfPresent(with: MediaPackageVodClientTypes.CmafPackage.read(from:))
        value.createdAt = try reader["createdAt"].readIfPresent()
        value.dashPackage = try reader["dashPackage"].readIfPresent(with: MediaPackageVodClientTypes.DashPackage.read(from:))
        value.hlsPackage = try reader["hlsPackage"].readIfPresent(with: MediaPackageVodClientTypes.HlsPackage.read(from:))
        value.id = try reader["id"].readIfPresent()
        value.mssPackage = try reader["mssPackage"].readIfPresent(with: MediaPackageVodClientTypes.MssPackage.read(from:))
        value.packagingGroupId = try reader["packagingGroupId"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension CreatePackagingGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreatePackagingGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreatePackagingGroupOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.authorization = try reader["authorization"].readIfPresent(with: MediaPackageVodClientTypes.Authorization.read(from:))
        value.createdAt = try reader["createdAt"].readIfPresent()
        value.domainName = try reader["domainName"].readIfPresent()
        value.egressAccessLogs = try reader["egressAccessLogs"].readIfPresent(with: MediaPackageVodClientTypes.EgressAccessLogs.read(from:))
        value.id = try reader["id"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension DeleteAssetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteAssetOutput {
        return DeleteAssetOutput()
    }
}

extension DeletePackagingConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeletePackagingConfigurationOutput {
        return DeletePackagingConfigurationOutput()
    }
}

extension DeletePackagingGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeletePackagingGroupOutput {
        return DeletePackagingGroupOutput()
    }
}

extension DescribeAssetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeAssetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeAssetOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.createdAt = try reader["createdAt"].readIfPresent()
        value.egressEndpoints = try reader["egressEndpoints"].readListIfPresent(memberReadingClosure: MediaPackageVodClientTypes.EgressEndpoint.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.id = try reader["id"].readIfPresent()
        value.packagingGroupId = try reader["packagingGroupId"].readIfPresent()
        value.resourceId = try reader["resourceId"].readIfPresent()
        value.sourceArn = try reader["sourceArn"].readIfPresent()
        value.sourceRoleArn = try reader["sourceRoleArn"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension DescribePackagingConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribePackagingConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribePackagingConfigurationOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.cmafPackage = try reader["cmafPackage"].readIfPresent(with: MediaPackageVodClientTypes.CmafPackage.read(from:))
        value.createdAt = try reader["createdAt"].readIfPresent()
        value.dashPackage = try reader["dashPackage"].readIfPresent(with: MediaPackageVodClientTypes.DashPackage.read(from:))
        value.hlsPackage = try reader["hlsPackage"].readIfPresent(with: MediaPackageVodClientTypes.HlsPackage.read(from:))
        value.id = try reader["id"].readIfPresent()
        value.mssPackage = try reader["mssPackage"].readIfPresent(with: MediaPackageVodClientTypes.MssPackage.read(from:))
        value.packagingGroupId = try reader["packagingGroupId"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension DescribePackagingGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribePackagingGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribePackagingGroupOutput()
        value.approximateAssetCount = try reader["approximateAssetCount"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.authorization = try reader["authorization"].readIfPresent(with: MediaPackageVodClientTypes.Authorization.read(from:))
        value.createdAt = try reader["createdAt"].readIfPresent()
        value.domainName = try reader["domainName"].readIfPresent()
        value.egressAccessLogs = try reader["egressAccessLogs"].readIfPresent(with: MediaPackageVodClientTypes.EgressAccessLogs.read(from:))
        value.id = try reader["id"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension ListAssetsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAssetsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAssetsOutput()
        value.assets = try reader["assets"].readListIfPresent(memberReadingClosure: MediaPackageVodClientTypes.AssetShallow.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListPackagingConfigurationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListPackagingConfigurationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListPackagingConfigurationsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.packagingConfigurations = try reader["packagingConfigurations"].readListIfPresent(memberReadingClosure: MediaPackageVodClientTypes.PackagingConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListPackagingGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListPackagingGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListPackagingGroupsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.packagingGroups = try reader["packagingGroups"].readListIfPresent(memberReadingClosure: MediaPackageVodClientTypes.PackagingGroup.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdatePackagingGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdatePackagingGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdatePackagingGroupOutput()
        value.approximateAssetCount = try reader["approximateAssetCount"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.authorization = try reader["authorization"].readIfPresent(with: MediaPackageVodClientTypes.Authorization.read(from:))
        value.createdAt = try reader["createdAt"].readIfPresent()
        value.domainName = try reader["domainName"].readIfPresent()
        value.egressAccessLogs = try reader["egressAccessLogs"].readIfPresent(with: MediaPackageVodClientTypes.EgressAccessLogs.read(from:))
        value.id = try reader["id"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

enum ConfigureLogsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnprocessableEntityException": return try UnprocessableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateAssetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnprocessableEntityException": return try UnprocessableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreatePackagingConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnprocessableEntityException": return try UnprocessableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreatePackagingGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnprocessableEntityException": return try UnprocessableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteAssetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnprocessableEntityException": return try UnprocessableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeletePackagingConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnprocessableEntityException": return try UnprocessableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeletePackagingGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnprocessableEntityException": return try UnprocessableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeAssetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnprocessableEntityException": return try UnprocessableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribePackagingConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnprocessableEntityException": return try UnprocessableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribePackagingGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnprocessableEntityException": return try UnprocessableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAssetsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnprocessableEntityException": return try UnprocessableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListPackagingConfigurationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnprocessableEntityException": return try UnprocessableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListPackagingGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnprocessableEntityException": return try UnprocessableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdatePackagingGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "InternalServerErrorException": return try InternalServerErrorException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "UnprocessableEntityException": return try UnprocessableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ServiceUnavailableException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ServiceUnavailableException {
        let reader = baseError.errorBodyReader
        var value = ServiceUnavailableException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TooManyRequestsException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> TooManyRequestsException {
        let reader = baseError.errorBodyReader
        var value = TooManyRequestsException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ForbiddenException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ForbiddenException {
        let reader = baseError.errorBodyReader
        var value = ForbiddenException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServerErrorException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalServerErrorException {
        let reader = baseError.errorBodyReader
        var value = InternalServerErrorException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension NotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> NotFoundException {
        let reader = baseError.errorBodyReader
        var value = NotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UnprocessableEntityException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> UnprocessableEntityException {
        let reader = baseError.errorBodyReader
        var value = UnprocessableEntityException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension MediaPackageVodClientTypes.Authorization {

    static func write(value: MediaPackageVodClientTypes.Authorization?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cdnIdentifierSecret"].write(value.cdnIdentifierSecret)
        try writer["secretsRoleArn"].write(value.secretsRoleArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaPackageVodClientTypes.Authorization {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaPackageVodClientTypes.Authorization()
        value.cdnIdentifierSecret = try reader["cdnIdentifierSecret"].readIfPresent() ?? ""
        value.secretsRoleArn = try reader["secretsRoleArn"].readIfPresent() ?? ""
        return value
    }
}

extension MediaPackageVodClientTypes.EgressAccessLogs {

    static func write(value: MediaPackageVodClientTypes.EgressAccessLogs?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["logGroupName"].write(value.logGroupName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaPackageVodClientTypes.EgressAccessLogs {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaPackageVodClientTypes.EgressAccessLogs()
        value.logGroupName = try reader["logGroupName"].readIfPresent()
        return value
    }
}

extension MediaPackageVodClientTypes.EgressEndpoint {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaPackageVodClientTypes.EgressEndpoint {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaPackageVodClientTypes.EgressEndpoint()
        value.packagingConfigurationId = try reader["packagingConfigurationId"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.url = try reader["url"].readIfPresent()
        return value
    }
}

extension MediaPackageVodClientTypes.CmafPackage {

    static func write(value: MediaPackageVodClientTypes.CmafPackage?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["encryption"].write(value.encryption, with: MediaPackageVodClientTypes.CmafEncryption.write(value:to:))
        try writer["hlsManifests"].writeList(value.hlsManifests, memberWritingClosure: MediaPackageVodClientTypes.HlsManifest.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["includeEncoderConfigurationInSegments"].write(value.includeEncoderConfigurationInSegments)
        try writer["segmentDurationSeconds"].write(value.segmentDurationSeconds)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaPackageVodClientTypes.CmafPackage {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaPackageVodClientTypes.CmafPackage()
        value.encryption = try reader["encryption"].readIfPresent(with: MediaPackageVodClientTypes.CmafEncryption.read(from:))
        value.hlsManifests = try reader["hlsManifests"].readListIfPresent(memberReadingClosure: MediaPackageVodClientTypes.HlsManifest.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.includeEncoderConfigurationInSegments = try reader["includeEncoderConfigurationInSegments"].readIfPresent()
        value.segmentDurationSeconds = try reader["segmentDurationSeconds"].readIfPresent()
        return value
    }
}

extension MediaPackageVodClientTypes.HlsManifest {

    static func write(value: MediaPackageVodClientTypes.HlsManifest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["adMarkers"].write(value.adMarkers)
        try writer["includeIframeOnlyStream"].write(value.includeIframeOnlyStream)
        try writer["manifestName"].write(value.manifestName)
        try writer["programDateTimeIntervalSeconds"].write(value.programDateTimeIntervalSeconds)
        try writer["repeatExtXKey"].write(value.repeatExtXKey)
        try writer["streamSelection"].write(value.streamSelection, with: MediaPackageVodClientTypes.StreamSelection.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaPackageVodClientTypes.HlsManifest {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaPackageVodClientTypes.HlsManifest()
        value.adMarkers = try reader["adMarkers"].readIfPresent()
        value.includeIframeOnlyStream = try reader["includeIframeOnlyStream"].readIfPresent()
        value.manifestName = try reader["manifestName"].readIfPresent()
        value.programDateTimeIntervalSeconds = try reader["programDateTimeIntervalSeconds"].readIfPresent()
        value.repeatExtXKey = try reader["repeatExtXKey"].readIfPresent()
        value.streamSelection = try reader["streamSelection"].readIfPresent(with: MediaPackageVodClientTypes.StreamSelection.read(from:))
        return value
    }
}

extension MediaPackageVodClientTypes.StreamSelection {

    static func write(value: MediaPackageVodClientTypes.StreamSelection?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxVideoBitsPerSecond"].write(value.maxVideoBitsPerSecond)
        try writer["minVideoBitsPerSecond"].write(value.minVideoBitsPerSecond)
        try writer["streamOrder"].write(value.streamOrder)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaPackageVodClientTypes.StreamSelection {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaPackageVodClientTypes.StreamSelection()
        value.maxVideoBitsPerSecond = try reader["maxVideoBitsPerSecond"].readIfPresent()
        value.minVideoBitsPerSecond = try reader["minVideoBitsPerSecond"].readIfPresent()
        value.streamOrder = try reader["streamOrder"].readIfPresent()
        return value
    }
}

extension MediaPackageVodClientTypes.CmafEncryption {

    static func write(value: MediaPackageVodClientTypes.CmafEncryption?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["constantInitializationVector"].write(value.constantInitializationVector)
        try writer["spekeKeyProvider"].write(value.spekeKeyProvider, with: MediaPackageVodClientTypes.SpekeKeyProvider.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaPackageVodClientTypes.CmafEncryption {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaPackageVodClientTypes.CmafEncryption()
        value.constantInitializationVector = try reader["constantInitializationVector"].readIfPresent()
        value.spekeKeyProvider = try reader["spekeKeyProvider"].readIfPresent(with: MediaPackageVodClientTypes.SpekeKeyProvider.read(from:))
        return value
    }
}

extension MediaPackageVodClientTypes.SpekeKeyProvider {

    static func write(value: MediaPackageVodClientTypes.SpekeKeyProvider?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["encryptionContractConfiguration"].write(value.encryptionContractConfiguration, with: MediaPackageVodClientTypes.EncryptionContractConfiguration.write(value:to:))
        try writer["roleArn"].write(value.roleArn)
        try writer["systemIds"].writeList(value.systemIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["url"].write(value.url)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaPackageVodClientTypes.SpekeKeyProvider {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaPackageVodClientTypes.SpekeKeyProvider()
        value.encryptionContractConfiguration = try reader["encryptionContractConfiguration"].readIfPresent(with: MediaPackageVodClientTypes.EncryptionContractConfiguration.read(from:))
        value.roleArn = try reader["roleArn"].readIfPresent() ?? ""
        value.systemIds = try reader["systemIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.url = try reader["url"].readIfPresent() ?? ""
        return value
    }
}

extension MediaPackageVodClientTypes.EncryptionContractConfiguration {

    static func write(value: MediaPackageVodClientTypes.EncryptionContractConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["presetSpeke20Audio"].write(value.presetSpeke20Audio)
        try writer["presetSpeke20Video"].write(value.presetSpeke20Video)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaPackageVodClientTypes.EncryptionContractConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaPackageVodClientTypes.EncryptionContractConfiguration()
        value.presetSpeke20Audio = try reader["presetSpeke20Audio"].readIfPresent() ?? .sdkUnknown("")
        value.presetSpeke20Video = try reader["presetSpeke20Video"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension MediaPackageVodClientTypes.DashPackage {

    static func write(value: MediaPackageVodClientTypes.DashPackage?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["dashManifests"].writeList(value.dashManifests, memberWritingClosure: MediaPackageVodClientTypes.DashManifest.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["encryption"].write(value.encryption, with: MediaPackageVodClientTypes.DashEncryption.write(value:to:))
        try writer["includeEncoderConfigurationInSegments"].write(value.includeEncoderConfigurationInSegments)
        try writer["includeIframeOnlyStream"].write(value.includeIframeOnlyStream)
        try writer["periodTriggers"].writeList(value.periodTriggers, memberWritingClosure: SmithyReadWrite.WritingClosureBox<MediaPackageVodClientTypes.__PeriodTriggersElement>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["segmentDurationSeconds"].write(value.segmentDurationSeconds)
        try writer["segmentTemplateFormat"].write(value.segmentTemplateFormat)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaPackageVodClientTypes.DashPackage {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaPackageVodClientTypes.DashPackage()
        value.dashManifests = try reader["dashManifests"].readListIfPresent(memberReadingClosure: MediaPackageVodClientTypes.DashManifest.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.encryption = try reader["encryption"].readIfPresent(with: MediaPackageVodClientTypes.DashEncryption.read(from:))
        value.includeEncoderConfigurationInSegments = try reader["includeEncoderConfigurationInSegments"].readIfPresent()
        value.includeIframeOnlyStream = try reader["includeIframeOnlyStream"].readIfPresent()
        value.periodTriggers = try reader["periodTriggers"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<MediaPackageVodClientTypes.__PeriodTriggersElement>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.segmentDurationSeconds = try reader["segmentDurationSeconds"].readIfPresent()
        value.segmentTemplateFormat = try reader["segmentTemplateFormat"].readIfPresent()
        return value
    }
}

extension MediaPackageVodClientTypes.DashEncryption {

    static func write(value: MediaPackageVodClientTypes.DashEncryption?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["spekeKeyProvider"].write(value.spekeKeyProvider, with: MediaPackageVodClientTypes.SpekeKeyProvider.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaPackageVodClientTypes.DashEncryption {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaPackageVodClientTypes.DashEncryption()
        value.spekeKeyProvider = try reader["spekeKeyProvider"].readIfPresent(with: MediaPackageVodClientTypes.SpekeKeyProvider.read(from:))
        return value
    }
}

extension MediaPackageVodClientTypes.DashManifest {

    static func write(value: MediaPackageVodClientTypes.DashManifest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["manifestLayout"].write(value.manifestLayout)
        try writer["manifestName"].write(value.manifestName)
        try writer["minBufferTimeSeconds"].write(value.minBufferTimeSeconds)
        try writer["profile"].write(value.profile)
        try writer["scteMarkersSource"].write(value.scteMarkersSource)
        try writer["streamSelection"].write(value.streamSelection, with: MediaPackageVodClientTypes.StreamSelection.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaPackageVodClientTypes.DashManifest {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaPackageVodClientTypes.DashManifest()
        value.manifestLayout = try reader["manifestLayout"].readIfPresent()
        value.manifestName = try reader["manifestName"].readIfPresent()
        value.minBufferTimeSeconds = try reader["minBufferTimeSeconds"].readIfPresent()
        value.profile = try reader["profile"].readIfPresent()
        value.scteMarkersSource = try reader["scteMarkersSource"].readIfPresent()
        value.streamSelection = try reader["streamSelection"].readIfPresent(with: MediaPackageVodClientTypes.StreamSelection.read(from:))
        return value
    }
}

extension MediaPackageVodClientTypes.HlsPackage {

    static func write(value: MediaPackageVodClientTypes.HlsPackage?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["encryption"].write(value.encryption, with: MediaPackageVodClientTypes.HlsEncryption.write(value:to:))
        try writer["hlsManifests"].writeList(value.hlsManifests, memberWritingClosure: MediaPackageVodClientTypes.HlsManifest.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["includeDvbSubtitles"].write(value.includeDvbSubtitles)
        try writer["segmentDurationSeconds"].write(value.segmentDurationSeconds)
        try writer["useAudioRenditionGroup"].write(value.useAudioRenditionGroup)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaPackageVodClientTypes.HlsPackage {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaPackageVodClientTypes.HlsPackage()
        value.encryption = try reader["encryption"].readIfPresent(with: MediaPackageVodClientTypes.HlsEncryption.read(from:))
        value.hlsManifests = try reader["hlsManifests"].readListIfPresent(memberReadingClosure: MediaPackageVodClientTypes.HlsManifest.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.includeDvbSubtitles = try reader["includeDvbSubtitles"].readIfPresent()
        value.segmentDurationSeconds = try reader["segmentDurationSeconds"].readIfPresent()
        value.useAudioRenditionGroup = try reader["useAudioRenditionGroup"].readIfPresent()
        return value
    }
}

extension MediaPackageVodClientTypes.HlsEncryption {

    static func write(value: MediaPackageVodClientTypes.HlsEncryption?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["constantInitializationVector"].write(value.constantInitializationVector)
        try writer["encryptionMethod"].write(value.encryptionMethod)
        try writer["spekeKeyProvider"].write(value.spekeKeyProvider, with: MediaPackageVodClientTypes.SpekeKeyProvider.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaPackageVodClientTypes.HlsEncryption {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaPackageVodClientTypes.HlsEncryption()
        value.constantInitializationVector = try reader["constantInitializationVector"].readIfPresent()
        value.encryptionMethod = try reader["encryptionMethod"].readIfPresent()
        value.spekeKeyProvider = try reader["spekeKeyProvider"].readIfPresent(with: MediaPackageVodClientTypes.SpekeKeyProvider.read(from:))
        return value
    }
}

extension MediaPackageVodClientTypes.MssPackage {

    static func write(value: MediaPackageVodClientTypes.MssPackage?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["encryption"].write(value.encryption, with: MediaPackageVodClientTypes.MssEncryption.write(value:to:))
        try writer["mssManifests"].writeList(value.mssManifests, memberWritingClosure: MediaPackageVodClientTypes.MssManifest.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["segmentDurationSeconds"].write(value.segmentDurationSeconds)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaPackageVodClientTypes.MssPackage {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaPackageVodClientTypes.MssPackage()
        value.encryption = try reader["encryption"].readIfPresent(with: MediaPackageVodClientTypes.MssEncryption.read(from:))
        value.mssManifests = try reader["mssManifests"].readListIfPresent(memberReadingClosure: MediaPackageVodClientTypes.MssManifest.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.segmentDurationSeconds = try reader["segmentDurationSeconds"].readIfPresent()
        return value
    }
}

extension MediaPackageVodClientTypes.MssManifest {

    static func write(value: MediaPackageVodClientTypes.MssManifest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["manifestName"].write(value.manifestName)
        try writer["streamSelection"].write(value.streamSelection, with: MediaPackageVodClientTypes.StreamSelection.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaPackageVodClientTypes.MssManifest {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaPackageVodClientTypes.MssManifest()
        value.manifestName = try reader["manifestName"].readIfPresent()
        value.streamSelection = try reader["streamSelection"].readIfPresent(with: MediaPackageVodClientTypes.StreamSelection.read(from:))
        return value
    }
}

extension MediaPackageVodClientTypes.MssEncryption {

    static func write(value: MediaPackageVodClientTypes.MssEncryption?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["spekeKeyProvider"].write(value.spekeKeyProvider, with: MediaPackageVodClientTypes.SpekeKeyProvider.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MediaPackageVodClientTypes.MssEncryption {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaPackageVodClientTypes.MssEncryption()
        value.spekeKeyProvider = try reader["spekeKeyProvider"].readIfPresent(with: MediaPackageVodClientTypes.SpekeKeyProvider.read(from:))
        return value
    }
}

extension MediaPackageVodClientTypes.AssetShallow {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaPackageVodClientTypes.AssetShallow {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaPackageVodClientTypes.AssetShallow()
        value.arn = try reader["arn"].readIfPresent()
        value.createdAt = try reader["createdAt"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.packagingGroupId = try reader["packagingGroupId"].readIfPresent()
        value.resourceId = try reader["resourceId"].readIfPresent()
        value.sourceArn = try reader["sourceArn"].readIfPresent()
        value.sourceRoleArn = try reader["sourceRoleArn"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension MediaPackageVodClientTypes.PackagingConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaPackageVodClientTypes.PackagingConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaPackageVodClientTypes.PackagingConfiguration()
        value.arn = try reader["arn"].readIfPresent()
        value.cmafPackage = try reader["cmafPackage"].readIfPresent(with: MediaPackageVodClientTypes.CmafPackage.read(from:))
        value.createdAt = try reader["createdAt"].readIfPresent()
        value.dashPackage = try reader["dashPackage"].readIfPresent(with: MediaPackageVodClientTypes.DashPackage.read(from:))
        value.hlsPackage = try reader["hlsPackage"].readIfPresent(with: MediaPackageVodClientTypes.HlsPackage.read(from:))
        value.id = try reader["id"].readIfPresent()
        value.mssPackage = try reader["mssPackage"].readIfPresent(with: MediaPackageVodClientTypes.MssPackage.read(from:))
        value.packagingGroupId = try reader["packagingGroupId"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension MediaPackageVodClientTypes.PackagingGroup {

    static func read(from reader: SmithyJSON.Reader) throws -> MediaPackageVodClientTypes.PackagingGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MediaPackageVodClientTypes.PackagingGroup()
        value.approximateAssetCount = try reader["approximateAssetCount"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.authorization = try reader["authorization"].readIfPresent(with: MediaPackageVodClientTypes.Authorization.read(from:))
        value.createdAt = try reader["createdAt"].readIfPresent()
        value.domainName = try reader["domainName"].readIfPresent()
        value.egressAccessLogs = try reader["egressAccessLogs"].readIfPresent(with: MediaPackageVodClientTypes.EgressAccessLogs.read(from:))
        value.id = try reader["id"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

public enum MediaPackageVodClientTypes {}
