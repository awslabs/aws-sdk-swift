// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// Welcome to the AWS Device Farm API documentation, which contains APIs for:
///
/// * Testing on desktop browsers Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain TestGrid in their names. For more information, see [Testing Web Applications on Selenium with Device Farm](https://docs.aws.amazon.com/devicefarm/latest/testgrid/).
///
/// * Testing on real mobile devices Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the [Device Farm Developer Guide](https://docs.aws.amazon.com/devicefarm/latest/developerguide/).
public protocol DeviceFarmClientProtocol {
    /// Creates a device pool.
    func createDevicePool(input: CreateDevicePoolInput) async throws -> CreateDevicePoolOutputResponse
    /// Creates a profile that can be applied to one or more private fleet device instances.
    func createInstanceProfile(input: CreateInstanceProfileInput) async throws -> CreateInstanceProfileOutputResponse
    /// Creates a network profile.
    func createNetworkProfile(input: CreateNetworkProfileInput) async throws -> CreateNetworkProfileOutputResponse
    /// Creates a project.
    func createProject(input: CreateProjectInput) async throws -> CreateProjectOutputResponse
    /// Specifies and starts a remote access session.
    func createRemoteAccessSession(input: CreateRemoteAccessSessionInput) async throws -> CreateRemoteAccessSessionOutputResponse
    /// Creates a Selenium testing project. Projects are used to track [TestGridSession] instances.
    func createTestGridProject(input: CreateTestGridProjectInput) async throws -> CreateTestGridProjectOutputResponse
    /// Creates a signed, short-term URL that can be passed to a Selenium RemoteWebDriver constructor.
    func createTestGridUrl(input: CreateTestGridUrlInput) async throws -> CreateTestGridUrlOutputResponse
    /// Uploads an app or test scripts.
    func createUpload(input: CreateUploadInput) async throws -> CreateUploadOutputResponse
    /// Creates a configuration record in Device Farm for your Amazon Virtual Private Cloud (VPC) endpoint.
    func createVPCEConfiguration(input: CreateVPCEConfigurationInput) async throws -> CreateVPCEConfigurationOutputResponse
    /// Deletes a device pool given the pool ARN. Does not allow deletion of curated pools owned by the system.
    func deleteDevicePool(input: DeleteDevicePoolInput) async throws -> DeleteDevicePoolOutputResponse
    /// Deletes a profile that can be applied to one or more private device instances.
    func deleteInstanceProfile(input: DeleteInstanceProfileInput) async throws -> DeleteInstanceProfileOutputResponse
    /// Deletes a network profile.
    func deleteNetworkProfile(input: DeleteNetworkProfileInput) async throws -> DeleteNetworkProfileOutputResponse
    /// Deletes an AWS Device Farm project, given the project ARN. Deleting this resource does not stop an in-progress run.
    func deleteProject(input: DeleteProjectInput) async throws -> DeleteProjectOutputResponse
    /// Deletes a completed remote access session and its results.
    func deleteRemoteAccessSession(input: DeleteRemoteAccessSessionInput) async throws -> DeleteRemoteAccessSessionOutputResponse
    /// Deletes the run, given the run ARN. Deleting this resource does not stop an in-progress run.
    func deleteRun(input: DeleteRunInput) async throws -> DeleteRunOutputResponse
    /// Deletes a Selenium testing project and all content generated under it. You cannot undo this operation. You cannot delete a project if it has active sessions.
    func deleteTestGridProject(input: DeleteTestGridProjectInput) async throws -> DeleteTestGridProjectOutputResponse
    /// Deletes an upload given the upload ARN.
    func deleteUpload(input: DeleteUploadInput) async throws -> DeleteUploadOutputResponse
    /// Deletes a configuration for your Amazon Virtual Private Cloud (VPC) endpoint.
    func deleteVPCEConfiguration(input: DeleteVPCEConfigurationInput) async throws -> DeleteVPCEConfigurationOutputResponse
    /// Returns the number of unmetered iOS or unmetered Android devices that have been purchased by the account.
    func getAccountSettings(input: GetAccountSettingsInput) async throws -> GetAccountSettingsOutputResponse
    /// Gets information about a unique device type.
    func getDevice(input: GetDeviceInput) async throws -> GetDeviceOutputResponse
    /// Returns information about a device instance that belongs to a private device fleet.
    func getDeviceInstance(input: GetDeviceInstanceInput) async throws -> GetDeviceInstanceOutputResponse
    /// Gets information about a device pool.
    func getDevicePool(input: GetDevicePoolInput) async throws -> GetDevicePoolOutputResponse
    /// Gets information about compatibility with a device pool.
    func getDevicePoolCompatibility(input: GetDevicePoolCompatibilityInput) async throws -> GetDevicePoolCompatibilityOutputResponse
    /// Returns information about the specified instance profile.
    func getInstanceProfile(input: GetInstanceProfileInput) async throws -> GetInstanceProfileOutputResponse
    /// Gets information about a job.
    func getJob(input: GetJobInput) async throws -> GetJobOutputResponse
    /// Returns information about a network profile.
    func getNetworkProfile(input: GetNetworkProfileInput) async throws -> GetNetworkProfileOutputResponse
    /// Gets the current status and future status of all offerings purchased by an AWS account. The response indicates how many offerings are currently available and the offerings that will be available in the next period. The API returns a NotEligible error if the user is not permitted to invoke the operation. If you must be able to invoke this operation, contact [aws-devicefarm-support@amazon.com](mailto:aws-devicefarm-support@amazon.com).
    func getOfferingStatus(input: GetOfferingStatusInput) async throws -> GetOfferingStatusOutputResponse
    /// Gets information about a project.
    func getProject(input: GetProjectInput) async throws -> GetProjectOutputResponse
    /// Returns a link to a currently running remote access session.
    func getRemoteAccessSession(input: GetRemoteAccessSessionInput) async throws -> GetRemoteAccessSessionOutputResponse
    /// Gets information about a run.
    func getRun(input: GetRunInput) async throws -> GetRunOutputResponse
    /// Gets information about a suite.
    func getSuite(input: GetSuiteInput) async throws -> GetSuiteOutputResponse
    /// Gets information about a test.
    func getTest(input: GetTestInput) async throws -> GetTestOutputResponse
    /// Retrieves information about a Selenium testing project.
    func getTestGridProject(input: GetTestGridProjectInput) async throws -> GetTestGridProjectOutputResponse
    /// A session is an instance of a browser created through a RemoteWebDriver with the URL from [CreateTestGridUrlResult$url]. You can use the following to look up sessions:
    ///
    /// * The session ARN ([GetTestGridSessionRequest$sessionArn]).
    ///
    /// * The project ARN and a session ID ([GetTestGridSessionRequest$projectArn] and [GetTestGridSessionRequest$sessionId]).
    func getTestGridSession(input: GetTestGridSessionInput) async throws -> GetTestGridSessionOutputResponse
    /// Gets information about an upload.
    func getUpload(input: GetUploadInput) async throws -> GetUploadOutputResponse
    /// Returns information about the configuration settings for your Amazon Virtual Private Cloud (VPC) endpoint.
    func getVPCEConfiguration(input: GetVPCEConfigurationInput) async throws -> GetVPCEConfigurationOutputResponse
    /// Installs an application to the device in a remote access session. For Android applications, the file must be in .apk format. For iOS applications, the file must be in .ipa format.
    func installToRemoteAccessSession(input: InstallToRemoteAccessSessionInput) async throws -> InstallToRemoteAccessSessionOutputResponse
    /// Gets information about artifacts.
    func listArtifacts(input: ListArtifactsInput) async throws -> ListArtifactsOutputResponse
    /// Returns information about the private device instances associated with one or more AWS accounts.
    func listDeviceInstances(input: ListDeviceInstancesInput) async throws -> ListDeviceInstancesOutputResponse
    /// Gets information about device pools.
    func listDevicePools(input: ListDevicePoolsInput) async throws -> ListDevicePoolsOutputResponse
    /// Gets information about unique device types.
    func listDevices(input: ListDevicesInput) async throws -> ListDevicesOutputResponse
    /// Returns information about all the instance profiles in an AWS account.
    func listInstanceProfiles(input: ListInstanceProfilesInput) async throws -> ListInstanceProfilesOutputResponse
    /// Gets information about jobs for a given test run.
    func listJobs(input: ListJobsInput) async throws -> ListJobsOutputResponse
    /// Returns the list of available network profiles.
    func listNetworkProfiles(input: ListNetworkProfilesInput) async throws -> ListNetworkProfilesOutputResponse
    /// Returns a list of offering promotions. Each offering promotion record contains the ID and description of the promotion. The API returns a NotEligible error if the caller is not permitted to invoke the operation. Contact [aws-devicefarm-support@amazon.com](mailto:aws-devicefarm-support@amazon.com) if you must be able to invoke this operation.
    func listOfferingPromotions(input: ListOfferingPromotionsInput) async throws -> ListOfferingPromotionsOutputResponse
    /// Returns a list of products or offerings that the user can manage through the API. Each offering record indicates the recurring price per unit and the frequency for that offering. The API returns a NotEligible error if the user is not permitted to invoke the operation. If you must be able to invoke this operation, contact [aws-devicefarm-support@amazon.com](mailto:aws-devicefarm-support@amazon.com).
    func listOfferings(input: ListOfferingsInput) async throws -> ListOfferingsOutputResponse
    /// Returns a list of all historical purchases, renewals, and system renewal transactions for an AWS account. The list is paginated and ordered by a descending timestamp (most recent transactions are first). The API returns a NotEligible error if the user is not permitted to invoke the operation. If you must be able to invoke this operation, contact [aws-devicefarm-support@amazon.com](mailto:aws-devicefarm-support@amazon.com).
    func listOfferingTransactions(input: ListOfferingTransactionsInput) async throws -> ListOfferingTransactionsOutputResponse
    /// Gets information about projects.
    func listProjects(input: ListProjectsInput) async throws -> ListProjectsOutputResponse
    /// Returns a list of all currently running remote access sessions.
    func listRemoteAccessSessions(input: ListRemoteAccessSessionsInput) async throws -> ListRemoteAccessSessionsOutputResponse
    /// Gets information about runs, given an AWS Device Farm project ARN.
    func listRuns(input: ListRunsInput) async throws -> ListRunsOutputResponse
    /// Gets information about samples, given an AWS Device Farm job ARN.
    func listSamples(input: ListSamplesInput) async throws -> ListSamplesOutputResponse
    /// Gets information about test suites for a given job.
    func listSuites(input: ListSuitesInput) async throws -> ListSuitesOutputResponse
    /// List the tags for an AWS Device Farm resource.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    /// Gets a list of all Selenium testing projects in your account.
    func listTestGridProjects(input: ListTestGridProjectsInput) async throws -> ListTestGridProjectsOutputResponse
    /// Returns a list of the actions taken in a [TestGridSession].
    func listTestGridSessionActions(input: ListTestGridSessionActionsInput) async throws -> ListTestGridSessionActionsOutputResponse
    /// Retrieves a list of artifacts created during the session.
    func listTestGridSessionArtifacts(input: ListTestGridSessionArtifactsInput) async throws -> ListTestGridSessionArtifactsOutputResponse
    /// Retrieves a list of sessions for a [TestGridProject].
    func listTestGridSessions(input: ListTestGridSessionsInput) async throws -> ListTestGridSessionsOutputResponse
    /// Gets information about tests in a given test suite.
    func listTests(input: ListTestsInput) async throws -> ListTestsOutputResponse
    /// Gets information about unique problems, such as exceptions or crashes. Unique problems are defined as a single instance of an error across a run, job, or suite. For example, if a call in your application consistently raises an exception (OutOfBoundsException in MyActivity.java:386), ListUniqueProblems returns a single entry instead of many individual entries for that exception.
    func listUniqueProblems(input: ListUniqueProblemsInput) async throws -> ListUniqueProblemsOutputResponse
    /// Gets information about uploads, given an AWS Device Farm project ARN.
    func listUploads(input: ListUploadsInput) async throws -> ListUploadsOutputResponse
    /// Returns information about all Amazon Virtual Private Cloud (VPC) endpoint configurations in the AWS account.
    func listVPCEConfigurations(input: ListVPCEConfigurationsInput) async throws -> ListVPCEConfigurationsOutputResponse
    /// Immediately purchases offerings for an AWS account. Offerings renew with the latest total purchased quantity for an offering, unless the renewal was overridden. The API returns a NotEligible error if the user is not permitted to invoke the operation. If you must be able to invoke this operation, contact [aws-devicefarm-support@amazon.com](mailto:aws-devicefarm-support@amazon.com).
    func purchaseOffering(input: PurchaseOfferingInput) async throws -> PurchaseOfferingOutputResponse
    /// Explicitly sets the quantity of devices to renew for an offering, starting from the effectiveDate of the next period. The API returns a NotEligible error if the user is not permitted to invoke the operation. If you must be able to invoke this operation, contact [aws-devicefarm-support@amazon.com](mailto:aws-devicefarm-support@amazon.com).
    func renewOffering(input: RenewOfferingInput) async throws -> RenewOfferingOutputResponse
    /// Schedules a run.
    func scheduleRun(input: ScheduleRunInput) async throws -> ScheduleRunOutputResponse
    /// Initiates a stop request for the current job. AWS Device Farm immediately stops the job on the device where tests have not started. You are not billed for this device. On the device where tests have started, setup suite and teardown suite tests run to completion on the device. You are billed for setup, teardown, and any tests that were in progress or already completed.
    func stopJob(input: StopJobInput) async throws -> StopJobOutputResponse
    /// Ends a specified remote access session.
    func stopRemoteAccessSession(input: StopRemoteAccessSessionInput) async throws -> StopRemoteAccessSessionOutputResponse
    /// Initiates a stop request for the current test run. AWS Device Farm immediately stops the run on devices where tests have not started. You are not billed for these devices. On devices where tests have started executing, setup suite and teardown suite tests run to completion on those devices. You are billed for setup, teardown, and any tests that were in progress or already completed.
    func stopRun(input: StopRunInput) async throws -> StopRunOutputResponse
    /// Associates the specified tags to a resource with the specified resourceArn. If existing tags on a resource are not specified in the request parameters, they are not changed. When a resource is deleted, the tags associated with that resource are also deleted.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    /// Deletes the specified tags from a resource.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    /// Updates information about a private device instance.
    func updateDeviceInstance(input: UpdateDeviceInstanceInput) async throws -> UpdateDeviceInstanceOutputResponse
    /// Modifies the name, description, and rules in a device pool given the attributes and the pool ARN. Rule updates are all-or-nothing, meaning they can only be updated as a whole (or not at all).
    func updateDevicePool(input: UpdateDevicePoolInput) async throws -> UpdateDevicePoolOutputResponse
    /// Updates information about an existing private device instance profile.
    func updateInstanceProfile(input: UpdateInstanceProfileInput) async throws -> UpdateInstanceProfileOutputResponse
    /// Updates the network profile.
    func updateNetworkProfile(input: UpdateNetworkProfileInput) async throws -> UpdateNetworkProfileOutputResponse
    /// Modifies the specified project name, given the project ARN and a new name.
    func updateProject(input: UpdateProjectInput) async throws -> UpdateProjectOutputResponse
    /// Change details of a project.
    func updateTestGridProject(input: UpdateTestGridProjectInput) async throws -> UpdateTestGridProjectOutputResponse
    /// Updates an uploaded test spec.
    func updateUpload(input: UpdateUploadInput) async throws -> UpdateUploadOutputResponse
    /// Updates information about an Amazon Virtual Private Cloud (VPC) endpoint configuration.
    func updateVPCEConfiguration(input: UpdateVPCEConfigurationInput) async throws -> UpdateVPCEConfigurationOutputResponse
}

public enum DeviceFarmClientTypes {}
