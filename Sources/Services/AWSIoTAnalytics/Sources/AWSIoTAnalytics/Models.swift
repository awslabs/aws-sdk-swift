//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum Smithy.ClientError
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.URIQueryItem
@_spi(SmithyTimestamps) import struct SmithyTimestamps.TimestampFormatter


public struct DeleteChannelOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteDatasetContentOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteDatasetOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteDatastoreOutput: Swift.Sendable {

    public init() { }
}

public struct DeletePipelineOutput: Swift.Sendable {

    public init() { }
}

public struct PutLoggingOptionsOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateChannelOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateDatasetOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateDatastoreOutput: Swift.Sendable {

    public init() { }
}

public struct UpdatePipelineOutput: Swift.Sendable {

    public init() { }
}

extension IoTAnalyticsClientTypes {

    /// An activity that adds other attributes based on existing attributes in the message.
    public struct AddAttributesActivity: Swift.Sendable {
        /// A list of 1-50 AttributeNameMapping objects that map an existing attribute to a new attribute. The existing attributes remain in the message, so if you want to remove the originals, use RemoveAttributeActivity.
        /// This member is required.
        public var attributes: [Swift.String: Swift.String]?
        /// The name of the addAttributes activity.
        /// This member is required.
        public var name: Swift.String?
        /// The next activity in the pipeline.
        public var next: Swift.String?

        public init(
            attributes: [Swift.String: Swift.String]? = nil,
            name: Swift.String? = nil,
            next: Swift.String? = nil
        )
        {
            self.attributes = attributes
            self.name = name
            self.next = next
        }
    }
}

/// There was an internal failure.
public struct InternalFailureException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalFailureException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was not valid.
public struct InvalidRequestException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidRequestException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// A resource with the specified name could not be found.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The service is temporarily unavailable.
public struct ServiceUnavailableException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceUnavailableException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was denied due to request throttling.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension IoTAnalyticsClientTypes {

    /// Information about a message.
    public struct Message: Swift.Sendable {
        /// The ID you want to assign to the message. Each messageId must be unique within each batch sent.
        /// This member is required.
        public var messageId: Swift.String?
        /// The payload of the message. This can be a JSON string or a base64-encoded string representing binary data, in which case you must decode it by means of a pipeline activity.
        /// This member is required.
        public var payload: Foundation.Data?

        public init(
            messageId: Swift.String? = nil,
            payload: Foundation.Data? = nil
        )
        {
            self.messageId = messageId
            self.payload = payload
        }
    }
}

public struct BatchPutMessageInput: Swift.Sendable {
    /// The name of the channel where the messages are sent.
    /// This member is required.
    public var channelName: Swift.String?
    /// The list of messages to be sent. Each message has the format: { "messageId": "string", "payload": "string"}. The field names of message payloads (data) that you send to IoT Analytics:
    ///
    /// * Must contain only alphanumeric characters and undescores (_). No other special characters are allowed.
    ///
    /// * Must begin with an alphabetic character or single underscore (_).
    ///
    /// * Cannot contain hyphens (-).
    ///
    /// * In regular expression terms: "^[A-Za-z_]([A-Za-z0-9]*|[A-Za-z0-9][A-Za-z0-9_]*)$".
    ///
    /// * Cannot be more than 255 characters.
    ///
    /// * Are case insensitive. (Fields named foo and FOO in the same payload are considered duplicates.)
    ///
    ///
    /// For example, {"temp_01": 29} or {"_temp_01": 29} are valid, but {"temp-01": 29}, {"01_temp": 29} or {"__temp_01": 29} are invalid in message payloads.
    /// This member is required.
    public var messages: [IoTAnalyticsClientTypes.Message]?

    public init(
        channelName: Swift.String? = nil,
        messages: [IoTAnalyticsClientTypes.Message]? = nil
    )
    {
        self.channelName = channelName
        self.messages = messages
    }
}

extension IoTAnalyticsClientTypes {

    /// Contains informations about errors.
    public struct BatchPutMessageErrorEntry: Swift.Sendable {
        /// The code associated with the error.
        public var errorCode: Swift.String?
        /// The message associated with the error.
        public var errorMessage: Swift.String?
        /// The ID of the message that caused the error. See the value corresponding to the messageId key in the message object.
        public var messageId: Swift.String?

        public init(
            errorCode: Swift.String? = nil,
            errorMessage: Swift.String? = nil,
            messageId: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.messageId = messageId
        }
    }
}

public struct BatchPutMessageOutput: Swift.Sendable {
    /// A list of any errors encountered when sending the messages to the channel.
    public var batchPutMessageErrorEntries: [IoTAnalyticsClientTypes.BatchPutMessageErrorEntry]?

    public init(
        batchPutMessageErrorEntries: [IoTAnalyticsClientTypes.BatchPutMessageErrorEntry]? = nil
    )
    {
        self.batchPutMessageErrorEntries = batchPutMessageErrorEntries
    }
}

public struct CancelPipelineReprocessingInput: Swift.Sendable {
    /// The name of pipeline for which data reprocessing is canceled.
    /// This member is required.
    public var pipelineName: Swift.String?
    /// The ID of the reprocessing task (returned by StartPipelineReprocessing).
    /// This member is required.
    public var reprocessingId: Swift.String?

    public init(
        pipelineName: Swift.String? = nil,
        reprocessingId: Swift.String? = nil
    )
    {
        self.pipelineName = pipelineName
        self.reprocessingId = reprocessingId
    }
}

public struct CancelPipelineReprocessingOutput: Swift.Sendable {

    public init() { }
}

/// The command caused an internal limit to be exceeded.
public struct LimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// A resource with the same name already exists.
public struct ResourceAlreadyExistsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        /// The ARN of the resource.
        public internal(set) var resourceArn: Swift.String? = nil
        /// The ID of the resource.
        public internal(set) var resourceId: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceAlreadyExistsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        resourceArn: Swift.String? = nil,
        resourceId: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.resourceArn = resourceArn
        self.properties.resourceId = resourceId
    }
}

extension IoTAnalyticsClientTypes {

    /// Used to store channel data in an S3 bucket that you manage. If customer-managed storage is selected, the retentionPeriod parameter is ignored. You can't change the choice of S3 storage after the data store is created.
    public struct CustomerManagedChannelS3Storage: Swift.Sendable {
        /// The name of the S3 bucket in which channel data is stored.
        /// This member is required.
        public var bucket: Swift.String?
        /// (Optional) The prefix used to create the keys of the channel data objects. Each object in an S3 bucket has a key that is its unique identifier in the bucket. Each object in a bucket has exactly one key. The prefix must end with a forward slash (/).
        public var keyPrefix: Swift.String?
        /// The ARN of the role that grants IoT Analytics permission to interact with your Amazon S3 resources.
        /// This member is required.
        public var roleArn: Swift.String?

        public init(
            bucket: Swift.String? = nil,
            keyPrefix: Swift.String? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.keyPrefix = keyPrefix
            self.roleArn = roleArn
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// Used to store channel data in an S3 bucket managed by IoT Analytics. You can't change the choice of S3 storage after the data store is created.
    public struct ServiceManagedChannelS3Storage: Swift.Sendable {

        public init() { }
    }
}

extension IoTAnalyticsClientTypes {

    /// Where channel data is stored. You may choose one of serviceManagedS3, customerManagedS3 storage. If not specified, the default is serviceManagedS3. This can't be changed after creation of the channel.
    public struct ChannelStorage: Swift.Sendable {
        /// Used to store channel data in an S3 bucket that you manage. If customer managed storage is selected, the retentionPeriod parameter is ignored. You can't change the choice of S3 storage after the data store is created.
        public var customerManagedS3: IoTAnalyticsClientTypes.CustomerManagedChannelS3Storage?
        /// Used to store channel data in an S3 bucket managed by IoT Analytics. You can't change the choice of S3 storage after the data store is created.
        public var serviceManagedS3: IoTAnalyticsClientTypes.ServiceManagedChannelS3Storage?

        public init(
            customerManagedS3: IoTAnalyticsClientTypes.CustomerManagedChannelS3Storage? = nil,
            serviceManagedS3: IoTAnalyticsClientTypes.ServiceManagedChannelS3Storage? = nil
        )
        {
            self.customerManagedS3 = customerManagedS3
            self.serviceManagedS3 = serviceManagedS3
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// How long, in days, message data is kept.
    public struct RetentionPeriod: Swift.Sendable {
        /// The number of days that message data is kept. The unlimited parameter must be false.
        public var numberOfDays: Swift.Int?
        /// If true, message data is kept indefinitely.
        public var unlimited: Swift.Bool

        public init(
            numberOfDays: Swift.Int? = nil,
            unlimited: Swift.Bool = false
        )
        {
            self.numberOfDays = numberOfDays
            self.unlimited = unlimited
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// A set of key-value pairs that are used to manage the resource.
    public struct Tag: Swift.Sendable {
        /// The tag's key.
        /// This member is required.
        public var key: Swift.String?
        /// The tag's value.
        /// This member is required.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }
}

public struct CreateChannelInput: Swift.Sendable {
    /// The name of the channel.
    /// This member is required.
    public var channelName: Swift.String?
    /// Where channel data is stored. You can choose one of serviceManagedS3 or customerManagedS3 storage. If not specified, the default is serviceManagedS3. You can't change this storage option after the channel is created.
    public var channelStorage: IoTAnalyticsClientTypes.ChannelStorage?
    /// How long, in days, message data is kept for the channel. When customerManagedS3 storage is selected, this parameter is ignored.
    public var retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod?
    /// Metadata which can be used to manage the channel.
    public var tags: [IoTAnalyticsClientTypes.Tag]?

    public init(
        channelName: Swift.String? = nil,
        channelStorage: IoTAnalyticsClientTypes.ChannelStorage? = nil,
        retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod? = nil,
        tags: [IoTAnalyticsClientTypes.Tag]? = nil
    )
    {
        self.channelName = channelName
        self.channelStorage = channelStorage
        self.retentionPeriod = retentionPeriod
        self.tags = tags
    }
}

public struct CreateChannelOutput: Swift.Sendable {
    /// The ARN of the channel.
    public var channelArn: Swift.String?
    /// The name of the channel.
    public var channelName: Swift.String?
    /// How long, in days, message data is kept for the channel.
    public var retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod?

    public init(
        channelArn: Swift.String? = nil,
        channelName: Swift.String? = nil,
        retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod? = nil
    )
    {
        self.channelArn = channelArn
        self.channelName = channelName
        self.retentionPeriod = retentionPeriod
    }
}

extension IoTAnalyticsClientTypes {

    public enum ComputeType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case acu1
        case acu2
        case sdkUnknown(Swift.String)

        public static var allCases: [ComputeType] {
            return [
                .acu1,
                .acu2
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .acu1: return "ACU_1"
            case .acu2: return "ACU_2"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// The configuration of the resource used to execute the containerAction.
    public struct ResourceConfiguration: Swift.Sendable {
        /// The type of the compute resource used to execute the containerAction. Possible values are: ACU_1 (vCPU=4, memory=16 GiB) or ACU_2 (vCPU=8, memory=32 GiB).
        /// This member is required.
        public var computeType: IoTAnalyticsClientTypes.ComputeType?
        /// The size, in GB, of the persistent storage available to the resource instance used to execute the containerAction (min: 1, max: 50).
        /// This member is required.
        public var volumeSizeInGB: Swift.Int?

        public init(
            computeType: IoTAnalyticsClientTypes.ComputeType? = nil,
            volumeSizeInGB: Swift.Int? = nil
        )
        {
            self.computeType = computeType
            self.volumeSizeInGB = volumeSizeInGB
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// The dataset whose latest contents are used as input to the notebook or application.
    public struct DatasetContentVersionValue: Swift.Sendable {
        /// The name of the dataset whose latest contents are used as input to the notebook or application.
        /// This member is required.
        public var datasetName: Swift.String?

        public init(
            datasetName: Swift.String? = nil
        )
        {
            self.datasetName = datasetName
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// The value of the variable as a structure that specifies an output file URI.
    public struct OutputFileUriValue: Swift.Sendable {
        /// The URI of the location where dataset contents are stored, usually the URI of a file in an S3 bucket.
        /// This member is required.
        public var fileName: Swift.String?

        public init(
            fileName: Swift.String? = nil
        )
        {
            self.fileName = fileName
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// An instance of a variable to be passed to the containerAction execution. Each variable must have a name and a value given by one of stringValue, datasetContentVersionValue, or outputFileUriValue.
    public struct Variable: Swift.Sendable {
        /// The value of the variable as a structure that specifies a dataset content version.
        public var datasetContentVersionValue: IoTAnalyticsClientTypes.DatasetContentVersionValue?
        /// The value of the variable as a double (numeric).
        public var doubleValue: Swift.Double?
        /// The name of the variable.
        /// This member is required.
        public var name: Swift.String?
        /// The value of the variable as a structure that specifies an output file URI.
        public var outputFileUriValue: IoTAnalyticsClientTypes.OutputFileUriValue?
        /// The value of the variable as a string.
        public var stringValue: Swift.String?

        public init(
            datasetContentVersionValue: IoTAnalyticsClientTypes.DatasetContentVersionValue? = nil,
            doubleValue: Swift.Double? = 0.0,
            name: Swift.String? = nil,
            outputFileUriValue: IoTAnalyticsClientTypes.OutputFileUriValue? = nil,
            stringValue: Swift.String? = nil
        )
        {
            self.datasetContentVersionValue = datasetContentVersionValue
            self.doubleValue = doubleValue
            self.name = name
            self.outputFileUriValue = outputFileUriValue
            self.stringValue = stringValue
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// Information required to run the containerAction to produce dataset contents.
    public struct ContainerDatasetAction: Swift.Sendable {
        /// The ARN of the role that gives permission to the system to access required resources to run the containerAction. This includes, at minimum, permission to retrieve the dataset contents that are the input to the containerized application.
        /// This member is required.
        public var executionRoleArn: Swift.String?
        /// The ARN of the Docker container stored in your account. The Docker container contains an application and required support libraries and is used to generate dataset contents.
        /// This member is required.
        public var image: Swift.String?
        /// Configuration of the resource that executes the containerAction.
        /// This member is required.
        public var resourceConfiguration: IoTAnalyticsClientTypes.ResourceConfiguration?
        /// The values of variables used in the context of the execution of the containerized application (basically, parameters passed to the application). Each variable must have a name and a value given by one of stringValue, datasetContentVersionValue, or outputFileUriValue.
        public var variables: [IoTAnalyticsClientTypes.Variable]?

        public init(
            executionRoleArn: Swift.String? = nil,
            image: Swift.String? = nil,
            resourceConfiguration: IoTAnalyticsClientTypes.ResourceConfiguration? = nil,
            variables: [IoTAnalyticsClientTypes.Variable]? = nil
        )
        {
            self.executionRoleArn = executionRoleArn
            self.image = image
            self.resourceConfiguration = resourceConfiguration
            self.variables = variables
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// Used to limit data to that which has arrived since the last execution of the action.
    public struct DeltaTime: Swift.Sendable {
        /// The number of seconds of estimated in-flight lag time of message data. When you create dataset contents using message data from a specified timeframe, some message data might still be in flight when processing begins, and so do not arrive in time to be processed. Use this field to make allowances for the in flight time of your message data, so that data not processed from a previous timeframe is included with the next timeframe. Otherwise, missed message data would be excluded from processing during the next timeframe too, because its timestamp places it within the previous timeframe.
        /// This member is required.
        public var offsetSeconds: Swift.Int?
        /// An expression by which the time of the message data might be determined. This can be the name of a timestamp field or a SQL expression that is used to derive the time the message data was generated.
        /// This member is required.
        public var timeExpression: Swift.String?

        public init(
            offsetSeconds: Swift.Int? = nil,
            timeExpression: Swift.String? = nil
        )
        {
            self.offsetSeconds = offsetSeconds
            self.timeExpression = timeExpression
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// Information that is used to filter message data, to segregate it according to the timeframe in which it arrives.
    public struct QueryFilter: Swift.Sendable {
        /// Used to limit data to that which has arrived since the last execution of the action.
        public var deltaTime: IoTAnalyticsClientTypes.DeltaTime?

        public init(
            deltaTime: IoTAnalyticsClientTypes.DeltaTime? = nil
        )
        {
            self.deltaTime = deltaTime
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// The SQL query to modify the message.
    public struct SqlQueryDatasetAction: Swift.Sendable {
        /// Prefilters applied to message data.
        public var filters: [IoTAnalyticsClientTypes.QueryFilter]?
        /// A SQL query string.
        /// This member is required.
        public var sqlQuery: Swift.String?

        public init(
            filters: [IoTAnalyticsClientTypes.QueryFilter]? = nil,
            sqlQuery: Swift.String? = nil
        )
        {
            self.filters = filters
            self.sqlQuery = sqlQuery
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// A DatasetAction object that specifies how dataset contents are automatically created.
    public struct DatasetAction: Swift.Sendable {
        /// The name of the dataset action by which dataset contents are automatically created.
        public var actionName: Swift.String?
        /// Information that allows the system to run a containerized application to create the dataset contents. The application must be in a Docker container along with any required support libraries.
        public var containerAction: IoTAnalyticsClientTypes.ContainerDatasetAction?
        /// An SqlQueryDatasetAction object that uses an SQL query to automatically create dataset contents.
        public var queryAction: IoTAnalyticsClientTypes.SqlQueryDatasetAction?

        public init(
            actionName: Swift.String? = nil,
            containerAction: IoTAnalyticsClientTypes.ContainerDatasetAction? = nil,
            queryAction: IoTAnalyticsClientTypes.SqlQueryDatasetAction? = nil
        )
        {
            self.actionName = actionName
            self.containerAction = containerAction
            self.queryAction = queryAction
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// Configuration information for delivery of dataset contents to IoT Events.
    public struct IotEventsDestinationConfiguration: Swift.Sendable {
        /// The name of the IoT Events input to which dataset contents are delivered.
        /// This member is required.
        public var inputName: Swift.String?
        /// The ARN of the role that grants IoT Analytics permission to deliver dataset contents to an IoT Events input.
        /// This member is required.
        public var roleArn: Swift.String?

        public init(
            inputName: Swift.String? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.inputName = inputName
            self.roleArn = roleArn
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// Configuration information for coordination with Glue, a fully managed extract, transform and load (ETL) service.
    public struct GlueConfiguration: Swift.Sendable {
        /// The name of the database in your Glue Data Catalog in which the table is located. An Glue Data Catalog database contains metadata tables.
        /// This member is required.
        public var databaseName: Swift.String?
        /// The name of the table in your Glue Data Catalog that is used to perform the ETL operations. An Glue Data Catalog table contains partitioned data and descriptions of data sources and targets.
        /// This member is required.
        public var tableName: Swift.String?

        public init(
            databaseName: Swift.String? = nil,
            tableName: Swift.String? = nil
        )
        {
            self.databaseName = databaseName
            self.tableName = tableName
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// Configuration information for delivery of dataset contents to Amazon Simple Storage Service (Amazon S3).
    public struct S3DestinationConfiguration: Swift.Sendable {
        /// The name of the S3 bucket to which dataset contents are delivered.
        /// This member is required.
        public var bucket: Swift.String?
        /// Configuration information for coordination with Glue, a fully managed extract, transform and load (ETL) service.
        public var glueConfiguration: IoTAnalyticsClientTypes.GlueConfiguration?
        /// The key of the dataset contents object in an S3 bucket. Each object has a key that is a unique identifier. Each object has exactly one key. You can create a unique key with the following options:
        ///
        /// * Use !{iotanalytics:scheduleTime} to insert the time of a scheduled SQL query run.
        ///
        /// * Use !{iotanalytics:versionId} to insert a unique hash that identifies a dataset content.
        ///
        /// * Use !{iotanalytics:creationTime} to insert the creation time of a dataset content.
        ///
        ///
        /// The following example creates a unique key for a CSV file: dataset/mydataset/!{iotanalytics:scheduleTime}/!{iotanalytics:versionId}.csv If you don't use !{iotanalytics:versionId} to specify the key, you might get duplicate keys. For example, you might have two dataset contents with the same scheduleTime but different versionIds. This means that one dataset content overwrites the other.
        /// This member is required.
        public var key: Swift.String?
        /// The ARN of the role that grants IoT Analytics permission to interact with your Amazon S3 and Glue resources.
        /// This member is required.
        public var roleArn: Swift.String?

        public init(
            bucket: Swift.String? = nil,
            glueConfiguration: IoTAnalyticsClientTypes.GlueConfiguration? = nil,
            key: Swift.String? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.glueConfiguration = glueConfiguration
            self.key = key
            self.roleArn = roleArn
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// The destination to which dataset contents are delivered.
    public struct DatasetContentDeliveryDestination: Swift.Sendable {
        /// Configuration information for delivery of dataset contents to IoT Events.
        public var iotEventsDestinationConfiguration: IoTAnalyticsClientTypes.IotEventsDestinationConfiguration?
        /// Configuration information for delivery of dataset contents to Amazon S3.
        public var s3DestinationConfiguration: IoTAnalyticsClientTypes.S3DestinationConfiguration?

        public init(
            iotEventsDestinationConfiguration: IoTAnalyticsClientTypes.IotEventsDestinationConfiguration? = nil,
            s3DestinationConfiguration: IoTAnalyticsClientTypes.S3DestinationConfiguration? = nil
        )
        {
            self.iotEventsDestinationConfiguration = iotEventsDestinationConfiguration
            self.s3DestinationConfiguration = s3DestinationConfiguration
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// When dataset contents are created, they are delivered to destination specified here.
    public struct DatasetContentDeliveryRule: Swift.Sendable {
        /// The destination to which dataset contents are delivered.
        /// This member is required.
        public var destination: IoTAnalyticsClientTypes.DatasetContentDeliveryDestination?
        /// The name of the dataset content delivery rules entry.
        public var entryName: Swift.String?

        public init(
            destination: IoTAnalyticsClientTypes.DatasetContentDeliveryDestination? = nil,
            entryName: Swift.String? = nil
        )
        {
            self.destination = destination
            self.entryName = entryName
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// A structure that contains the configuration information of a delta time session window. [DeltaTime](https://docs.aws.amazon.com/iotanalytics/latest/APIReference/API_DeltaTime.html) specifies a time interval. You can use DeltaTime to create dataset contents with data that has arrived in the data store since the last execution. For an example of DeltaTime, see [ Creating a SQL dataset with a delta window (CLI)](https://docs.aws.amazon.com/iotanalytics/latest/userguide/automate-create-dataset.html#automate-example6) in the IoT Analytics User Guide.
    public struct DeltaTimeSessionWindowConfiguration: Swift.Sendable {
        /// A time interval. You can use timeoutInMinutes so that IoT Analytics can batch up late data notifications that have been generated since the last execution. IoT Analytics sends one batch of notifications to Amazon CloudWatch Events at one time. For more information about how to write a timestamp expression, see [Date and Time Functions and Operators](https://prestodb.io/docs/0.172/functions/datetime.html), in the Presto 0.172 Documentation.
        /// This member is required.
        public var timeoutInMinutes: Swift.Int?

        public init(
            timeoutInMinutes: Swift.Int? = nil
        )
        {
            self.timeoutInMinutes = timeoutInMinutes
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// The information needed to configure a delta time session window.
    public struct LateDataRuleConfiguration: Swift.Sendable {
        /// The information needed to configure a delta time session window.
        public var deltaTimeSessionWindowConfiguration: IoTAnalyticsClientTypes.DeltaTimeSessionWindowConfiguration?

        public init(
            deltaTimeSessionWindowConfiguration: IoTAnalyticsClientTypes.DeltaTimeSessionWindowConfiguration? = nil
        )
        {
            self.deltaTimeSessionWindowConfiguration = deltaTimeSessionWindowConfiguration
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// A structure that contains the name and configuration information of a late data rule.
    public struct LateDataRule: Swift.Sendable {
        /// The information needed to configure the late data rule.
        /// This member is required.
        public var ruleConfiguration: IoTAnalyticsClientTypes.LateDataRuleConfiguration?
        /// The name of the late data rule.
        public var ruleName: Swift.String?

        public init(
            ruleConfiguration: IoTAnalyticsClientTypes.LateDataRuleConfiguration? = nil,
            ruleName: Swift.String? = nil
        )
        {
            self.ruleConfiguration = ruleConfiguration
            self.ruleName = ruleName
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// Information about the dataset whose content generation triggers the new dataset content generation.
    public struct TriggeringDataset: Swift.Sendable {
        /// The name of the dataset whose content generation triggers the new dataset content generation.
        /// This member is required.
        public var name: Swift.String?

        public init(
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// The schedule for when to trigger an update.
    public struct Schedule: Swift.Sendable {
        /// The expression that defines when to trigger an update. For more information, see [Schedule Expressions for Rules](https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html) in the Amazon CloudWatch Events User Guide.
        public var expression: Swift.String?

        public init(
            expression: Swift.String? = nil
        )
        {
            self.expression = expression
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// The DatasetTrigger that specifies when the dataset is automatically updated.
    public struct DatasetTrigger: Swift.Sendable {
        /// The dataset whose content creation triggers the creation of this dataset's contents.
        public var dataset: IoTAnalyticsClientTypes.TriggeringDataset?
        /// The Schedule when the trigger is initiated.
        public var schedule: IoTAnalyticsClientTypes.Schedule?

        public init(
            dataset: IoTAnalyticsClientTypes.TriggeringDataset? = nil,
            schedule: IoTAnalyticsClientTypes.Schedule? = nil
        )
        {
            self.dataset = dataset
            self.schedule = schedule
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// Information about the versioning of dataset contents.
    public struct VersioningConfiguration: Swift.Sendable {
        /// How many versions of dataset contents are kept. The unlimited parameter must be false.
        public var maxVersions: Swift.Int?
        /// If true, unlimited versions of dataset contents are kept.
        public var unlimited: Swift.Bool

        public init(
            maxVersions: Swift.Int? = nil,
            unlimited: Swift.Bool = false
        )
        {
            self.maxVersions = maxVersions
            self.unlimited = unlimited
        }
    }
}

public struct CreateDatasetInput: Swift.Sendable {
    /// A list of actions that create the dataset contents.
    /// This member is required.
    public var actions: [IoTAnalyticsClientTypes.DatasetAction]?
    /// When dataset contents are created, they are delivered to destinations specified here.
    public var contentDeliveryRules: [IoTAnalyticsClientTypes.DatasetContentDeliveryRule]?
    /// The name of the dataset.
    /// This member is required.
    public var datasetName: Swift.String?
    /// A list of data rules that send notifications to CloudWatch, when data arrives late. To specify lateDataRules, the dataset must use a [DeltaTimer](https://docs.aws.amazon.com/iotanalytics/latest/APIReference/API_DeltaTime.html) filter.
    public var lateDataRules: [IoTAnalyticsClientTypes.LateDataRule]?
    /// Optional. How long, in days, versions of dataset contents are kept for the dataset. If not specified or set to null, versions of dataset contents are retained for at most 90 days. The number of versions of dataset contents retained is determined by the versioningConfiguration parameter. For more information, see [ Keeping Multiple Versions of IoT Analytics datasets](https://docs.aws.amazon.com/iotanalytics/latest/userguide/getting-started.html#aws-iot-analytics-dataset-versions) in the IoT Analytics User Guide.
    public var retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod?
    /// Metadata which can be used to manage the dataset.
    public var tags: [IoTAnalyticsClientTypes.Tag]?
    /// A list of triggers. A trigger causes dataset contents to be populated at a specified time interval or when another dataset's contents are created. The list of triggers can be empty or contain up to five DataSetTrigger objects.
    public var triggers: [IoTAnalyticsClientTypes.DatasetTrigger]?
    /// Optional. How many versions of dataset contents are kept. If not specified or set to null, only the latest version plus the latest succeeded version (if they are different) are kept for the time period specified by the retentionPeriod parameter. For more information, see [Keeping Multiple Versions of IoT Analytics datasets](https://docs.aws.amazon.com/iotanalytics/latest/userguide/getting-started.html#aws-iot-analytics-dataset-versions) in the IoT Analytics User Guide.
    public var versioningConfiguration: IoTAnalyticsClientTypes.VersioningConfiguration?

    public init(
        actions: [IoTAnalyticsClientTypes.DatasetAction]? = nil,
        contentDeliveryRules: [IoTAnalyticsClientTypes.DatasetContentDeliveryRule]? = nil,
        datasetName: Swift.String? = nil,
        lateDataRules: [IoTAnalyticsClientTypes.LateDataRule]? = nil,
        retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod? = nil,
        tags: [IoTAnalyticsClientTypes.Tag]? = nil,
        triggers: [IoTAnalyticsClientTypes.DatasetTrigger]? = nil,
        versioningConfiguration: IoTAnalyticsClientTypes.VersioningConfiguration? = nil
    )
    {
        self.actions = actions
        self.contentDeliveryRules = contentDeliveryRules
        self.datasetName = datasetName
        self.lateDataRules = lateDataRules
        self.retentionPeriod = retentionPeriod
        self.tags = tags
        self.triggers = triggers
        self.versioningConfiguration = versioningConfiguration
    }
}

public struct CreateDatasetOutput: Swift.Sendable {
    /// The ARN of the dataset.
    public var datasetArn: Swift.String?
    /// The name of the dataset.
    public var datasetName: Swift.String?
    /// How long, in days, dataset contents are kept for the dataset.
    public var retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod?

    public init(
        datasetArn: Swift.String? = nil,
        datasetName: Swift.String? = nil,
        retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod? = nil
    )
    {
        self.datasetArn = datasetArn
        self.datasetName = datasetName
        self.retentionPeriod = retentionPeriod
    }
}

public struct CreateDatasetContentInput: Swift.Sendable {
    /// The name of the dataset.
    /// This member is required.
    public var datasetName: Swift.String?
    /// The version ID of the dataset content. To specify versionId for a dataset content, the dataset must use a [DeltaTimer](https://docs.aws.amazon.com/iotanalytics/latest/APIReference/API_DeltaTime.html) filter.
    public var versionId: Swift.String?

    public init(
        datasetName: Swift.String? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.datasetName = datasetName
        self.versionId = versionId
    }
}

public struct CreateDatasetContentOutput: Swift.Sendable {
    /// The version ID of the dataset contents that are being created.
    public var versionId: Swift.String?

    public init(
        versionId: Swift.String? = nil
    )
    {
        self.versionId = versionId
    }
}

extension IoTAnalyticsClientTypes {

    /// A partition dimension defined by an attribute.
    public struct Partition: Swift.Sendable {
        /// The name of the attribute that defines a partition dimension.
        /// This member is required.
        public var attributeName: Swift.String?

        public init(
            attributeName: Swift.String? = nil
        )
        {
            self.attributeName = attributeName
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// A partition dimension defined by a timestamp attribute.
    public struct TimestampPartition: Swift.Sendable {
        /// The attribute name of the partition defined by a timestamp.
        /// This member is required.
        public var attributeName: Swift.String?
        /// The timestamp format of a partition defined by a timestamp. The default format is seconds since epoch (January 1, 1970 at midnight UTC time).
        public var timestampFormat: Swift.String?

        public init(
            attributeName: Swift.String? = nil,
            timestampFormat: Swift.String? = nil
        )
        {
            self.attributeName = attributeName
            self.timestampFormat = timestampFormat
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// A single dimension to partition a data store. The dimension must be an AttributePartition or a TimestampPartition.
    public struct DatastorePartition: Swift.Sendable {
        /// A partition dimension defined by an attributeName.
        public var attributePartition: IoTAnalyticsClientTypes.Partition?
        /// A partition dimension defined by a timestamp attribute.
        public var timestampPartition: IoTAnalyticsClientTypes.TimestampPartition?

        public init(
            attributePartition: IoTAnalyticsClientTypes.Partition? = nil,
            timestampPartition: IoTAnalyticsClientTypes.TimestampPartition? = nil
        )
        {
            self.attributePartition = attributePartition
            self.timestampPartition = timestampPartition
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// Contains information about the partition dimensions in a data store.
    public struct DatastorePartitions: Swift.Sendable {
        /// A list of partition dimensions in a data store.
        public var partitions: [IoTAnalyticsClientTypes.DatastorePartition]?

        public init(
            partitions: [IoTAnalyticsClientTypes.DatastorePartition]? = nil
        )
        {
            self.partitions = partitions
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// S3-customer-managed; When you choose customer-managed storage, the retentionPeriod parameter is ignored. You can't change the choice of Amazon S3 storage after your data store is created.
    public struct CustomerManagedDatastoreS3Storage: Swift.Sendable {
        /// The name of the Amazon S3 bucket where your data is stored.
        /// This member is required.
        public var bucket: Swift.String?
        /// (Optional) The prefix used to create the keys of the data store data objects. Each object in an Amazon S3 bucket has a key that is its unique identifier in the bucket. Each object in a bucket has exactly one key. The prefix must end with a forward slash (/).
        public var keyPrefix: Swift.String?
        /// The ARN of the role that grants IoT Analytics permission to interact with your Amazon S3 resources.
        /// This member is required.
        public var roleArn: Swift.String?

        public init(
            bucket: Swift.String? = nil,
            keyPrefix: Swift.String? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.keyPrefix = keyPrefix
            self.roleArn = roleArn
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// Used to store data used by IoT SiteWise in an Amazon S3 bucket that you manage. You can't change the choice of Amazon S3 storage after your data store is created.
    public struct IotSiteWiseCustomerManagedDatastoreS3Storage: Swift.Sendable {
        /// The name of the Amazon S3 bucket where your data is stored.
        /// This member is required.
        public var bucket: Swift.String?
        /// (Optional) The prefix used to create the keys of the data store data objects. Each object in an Amazon S3 bucket has a key that is its unique identifier in the bucket. Each object in a bucket has exactly one key. The prefix must end with a forward slash (/).
        public var keyPrefix: Swift.String?

        public init(
            bucket: Swift.String? = nil,
            keyPrefix: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.keyPrefix = keyPrefix
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// Used to store data used by IoT SiteWise in an Amazon S3 bucket that you manage. You can't change the choice of Amazon S3 storage after your data store is created.
    public struct DatastoreIotSiteWiseMultiLayerStorage: Swift.Sendable {
        /// Used to store data used by IoT SiteWise in an Amazon S3 bucket that you manage.
        /// This member is required.
        public var customerManagedS3Storage: IoTAnalyticsClientTypes.IotSiteWiseCustomerManagedDatastoreS3Storage?

        public init(
            customerManagedS3Storage: IoTAnalyticsClientTypes.IotSiteWiseCustomerManagedDatastoreS3Storage? = nil
        )
        {
            self.customerManagedS3Storage = customerManagedS3Storage
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// Used to store data in an Amazon S3 bucket managed by IoT Analytics. You can't change the choice of Amazon S3 storage after your data store is created.
    public struct ServiceManagedDatastoreS3Storage: Swift.Sendable {

        public init() { }
    }
}

extension IoTAnalyticsClientTypes {

    /// Where data in a data store is stored.. You can choose serviceManagedS3 storage, customerManagedS3 storage, or iotSiteWiseMultiLayerStorage storage. The default is serviceManagedS3. You can't change the choice of Amazon S3 storage after your data store is created.
    public enum DatastoreStorage: Swift.Sendable {
        /// Used to store data in an Amazon S3 bucket managed by IoT Analytics. You can't change the choice of Amazon S3 storage after your data store is created.
        case servicemanageds3(IoTAnalyticsClientTypes.ServiceManagedDatastoreS3Storage)
        /// S3-customer-managed; When you choose customer-managed storage, the retentionPeriod parameter is ignored. You can't change the choice of Amazon S3 storage after your data store is created.
        case customermanageds3(IoTAnalyticsClientTypes.CustomerManagedDatastoreS3Storage)
        /// Used to store data used by IoT SiteWise in an Amazon S3 bucket that you manage. You can't change the choice of Amazon S3 storage after your data store is created.
        case iotsitewisemultilayerstorage(IoTAnalyticsClientTypes.DatastoreIotSiteWiseMultiLayerStorage)
        case sdkUnknown(Swift.String)
    }
}

extension IoTAnalyticsClientTypes {

    /// Contains the configuration information of the JSON format.
    public struct JsonConfiguration: Swift.Sendable {

        public init() { }
    }
}

extension IoTAnalyticsClientTypes {

    /// Contains information about a column that stores your data.
    public struct Column: Swift.Sendable {
        /// The name of the column.
        /// This member is required.
        public var name: Swift.String?
        /// The type of data. For more information about the supported data types, see [Common data types](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-common.html) in the Glue Developer Guide.
        /// This member is required.
        public var type: Swift.String?

        public init(
            name: Swift.String? = nil,
            type: Swift.String? = nil
        )
        {
            self.name = name
            self.type = type
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// Information needed to define a schema.
    public struct SchemaDefinition: Swift.Sendable {
        /// Specifies one or more columns that store your data. Each schema can have up to 100 columns. Each column can have up to 100 nested types.
        public var columns: [IoTAnalyticsClientTypes.Column]?

        public init(
            columns: [IoTAnalyticsClientTypes.Column]? = nil
        )
        {
            self.columns = columns
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// Contains the configuration information of the Parquet format.
    public struct ParquetConfiguration: Swift.Sendable {
        /// Information needed to define a schema.
        public var schemaDefinition: IoTAnalyticsClientTypes.SchemaDefinition?

        public init(
            schemaDefinition: IoTAnalyticsClientTypes.SchemaDefinition? = nil
        )
        {
            self.schemaDefinition = schemaDefinition
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// Contains the configuration information of file formats. IoT Analytics data stores support JSON and [Parquet](https://parquet.apache.org/). The default file format is JSON. You can specify only one format. You can't change the file format after you create the data store.
    public struct FileFormatConfiguration: Swift.Sendable {
        /// Contains the configuration information of the JSON format.
        public var jsonConfiguration: IoTAnalyticsClientTypes.JsonConfiguration?
        /// Contains the configuration information of the Parquet format.
        public var parquetConfiguration: IoTAnalyticsClientTypes.ParquetConfiguration?

        public init(
            jsonConfiguration: IoTAnalyticsClientTypes.JsonConfiguration? = nil,
            parquetConfiguration: IoTAnalyticsClientTypes.ParquetConfiguration? = nil
        )
        {
            self.jsonConfiguration = jsonConfiguration
            self.parquetConfiguration = parquetConfiguration
        }
    }
}

public struct CreateDatastoreInput: Swift.Sendable {
    /// The name of the data store.
    /// This member is required.
    public var datastoreName: Swift.String?
    /// Contains information about the partition dimensions in a data store.
    public var datastorePartitions: IoTAnalyticsClientTypes.DatastorePartitions?
    /// Where data in a data store is stored.. You can choose serviceManagedS3 storage, customerManagedS3 storage, or iotSiteWiseMultiLayerStorage storage. The default is serviceManagedS3. You can't change the choice of Amazon S3 storage after your data store is created.
    public var datastoreStorage: IoTAnalyticsClientTypes.DatastoreStorage?
    /// Contains the configuration information of file formats. IoT Analytics data stores support JSON and [Parquet](https://parquet.apache.org/). The default file format is JSON. You can specify only one format. You can't change the file format after you create the data store.
    public var fileFormatConfiguration: IoTAnalyticsClientTypes.FileFormatConfiguration?
    /// How long, in days, message data is kept for the data store. When customerManagedS3 storage is selected, this parameter is ignored.
    public var retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod?
    /// Metadata which can be used to manage the data store.
    public var tags: [IoTAnalyticsClientTypes.Tag]?

    public init(
        datastoreName: Swift.String? = nil,
        datastorePartitions: IoTAnalyticsClientTypes.DatastorePartitions? = nil,
        datastoreStorage: IoTAnalyticsClientTypes.DatastoreStorage? = nil,
        fileFormatConfiguration: IoTAnalyticsClientTypes.FileFormatConfiguration? = nil,
        retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod? = nil,
        tags: [IoTAnalyticsClientTypes.Tag]? = nil
    )
    {
        self.datastoreName = datastoreName
        self.datastorePartitions = datastorePartitions
        self.datastoreStorage = datastoreStorage
        self.fileFormatConfiguration = fileFormatConfiguration
        self.retentionPeriod = retentionPeriod
        self.tags = tags
    }
}

public struct CreateDatastoreOutput: Swift.Sendable {
    /// The ARN of the data store.
    public var datastoreArn: Swift.String?
    /// The name of the data store.
    public var datastoreName: Swift.String?
    /// How long, in days, message data is kept for the data store.
    public var retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod?

    public init(
        datastoreArn: Swift.String? = nil,
        datastoreName: Swift.String? = nil,
        retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod? = nil
    )
    {
        self.datastoreArn = datastoreArn
        self.datastoreName = datastoreName
        self.retentionPeriod = retentionPeriod
    }
}

extension IoTAnalyticsClientTypes {

    /// The activity that determines the source of the messages to be processed.
    public struct ChannelActivity: Swift.Sendable {
        /// The name of the channel from which the messages are processed.
        /// This member is required.
        public var channelName: Swift.String?
        /// The name of the channel activity.
        /// This member is required.
        public var name: Swift.String?
        /// The next activity in the pipeline.
        public var next: Swift.String?

        public init(
            channelName: Swift.String? = nil,
            name: Swift.String? = nil,
            next: Swift.String? = nil
        )
        {
            self.channelName = channelName
            self.name = name
            self.next = next
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// The datastore activity that specifies where to store the processed data.
    public struct DatastoreActivity: Swift.Sendable {
        /// The name of the data store where processed messages are stored.
        /// This member is required.
        public var datastoreName: Swift.String?
        /// The name of the datastore activity.
        /// This member is required.
        public var name: Swift.String?

        public init(
            datastoreName: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.datastoreName = datastoreName
            self.name = name
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// An activity that adds data from the IoT device registry to your message.
    public struct DeviceRegistryEnrichActivity: Swift.Sendable {
        /// The name of the attribute that is added to the message.
        /// This member is required.
        public var attribute: Swift.String?
        /// The name of the deviceRegistryEnrich activity.
        /// This member is required.
        public var name: Swift.String?
        /// The next activity in the pipeline.
        public var next: Swift.String?
        /// The ARN of the role that allows access to the device's registry information.
        /// This member is required.
        public var roleArn: Swift.String?
        /// The name of the IoT device whose registry information is added to the message.
        /// This member is required.
        public var thingName: Swift.String?

        public init(
            attribute: Swift.String? = nil,
            name: Swift.String? = nil,
            next: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            thingName: Swift.String? = nil
        )
        {
            self.attribute = attribute
            self.name = name
            self.next = next
            self.roleArn = roleArn
            self.thingName = thingName
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// An activity that adds information from the IoT Device Shadow service to a message.
    public struct DeviceShadowEnrichActivity: Swift.Sendable {
        /// The name of the attribute that is added to the message.
        /// This member is required.
        public var attribute: Swift.String?
        /// The name of the deviceShadowEnrich activity.
        /// This member is required.
        public var name: Swift.String?
        /// The next activity in the pipeline.
        public var next: Swift.String?
        /// The ARN of the role that allows access to the device's shadow.
        /// This member is required.
        public var roleArn: Swift.String?
        /// The name of the IoT device whose shadow information is added to the message.
        /// This member is required.
        public var thingName: Swift.String?

        public init(
            attribute: Swift.String? = nil,
            name: Swift.String? = nil,
            next: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            thingName: Swift.String? = nil
        )
        {
            self.attribute = attribute
            self.name = name
            self.next = next
            self.roleArn = roleArn
            self.thingName = thingName
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// An activity that filters a message based on its attributes.
    public struct FilterActivity: Swift.Sendable {
        /// An expression that looks like a SQL WHERE clause that must return a Boolean value. Messages that satisfy the condition are passed to the next activity.
        /// This member is required.
        public var filter: Swift.String?
        /// The name of the filter activity.
        /// This member is required.
        public var name: Swift.String?
        /// The next activity in the pipeline.
        public var next: Swift.String?

        public init(
            filter: Swift.String? = nil,
            name: Swift.String? = nil,
            next: Swift.String? = nil
        )
        {
            self.filter = filter
            self.name = name
            self.next = next
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// An activity that runs a Lambda function to modify the message.
    public struct LambdaActivity: Swift.Sendable {
        /// The number of messages passed to the Lambda function for processing. The Lambda function must be able to process all of these messages within five minutes, which is the maximum timeout duration for Lambda functions.
        /// This member is required.
        public var batchSize: Swift.Int?
        /// The name of the Lambda function that is run on the message.
        /// This member is required.
        public var lambdaName: Swift.String?
        /// The name of the lambda activity.
        /// This member is required.
        public var name: Swift.String?
        /// The next activity in the pipeline.
        public var next: Swift.String?

        public init(
            batchSize: Swift.Int? = nil,
            lambdaName: Swift.String? = nil,
            name: Swift.String? = nil,
            next: Swift.String? = nil
        )
        {
            self.batchSize = batchSize
            self.lambdaName = lambdaName
            self.name = name
            self.next = next
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// An activity that computes an arithmetic expression using the message's attributes.
    public struct MathActivity: Swift.Sendable {
        /// The name of the attribute that contains the result of the math operation.
        /// This member is required.
        public var attribute: Swift.String?
        /// An expression that uses one or more existing attributes and must return an integer value.
        /// This member is required.
        public var math: Swift.String?
        /// The name of the math activity.
        /// This member is required.
        public var name: Swift.String?
        /// The next activity in the pipeline.
        public var next: Swift.String?

        public init(
            attribute: Swift.String? = nil,
            math: Swift.String? = nil,
            name: Swift.String? = nil,
            next: Swift.String? = nil
        )
        {
            self.attribute = attribute
            self.math = math
            self.name = name
            self.next = next
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// An activity that removes attributes from a message.
    public struct RemoveAttributesActivity: Swift.Sendable {
        /// A list of 1-50 attributes to remove from the message.
        /// This member is required.
        public var attributes: [Swift.String]?
        /// The name of the removeAttributes activity.
        /// This member is required.
        public var name: Swift.String?
        /// The next activity in the pipeline.
        public var next: Swift.String?

        public init(
            attributes: [Swift.String]? = nil,
            name: Swift.String? = nil,
            next: Swift.String? = nil
        )
        {
            self.attributes = attributes
            self.name = name
            self.next = next
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// Used to create a new message using only the specified attributes from the original message.
    public struct SelectAttributesActivity: Swift.Sendable {
        /// A list of the attributes to select from the message.
        /// This member is required.
        public var attributes: [Swift.String]?
        /// The name of the selectAttributes activity.
        /// This member is required.
        public var name: Swift.String?
        /// The next activity in the pipeline.
        public var next: Swift.String?

        public init(
            attributes: [Swift.String]? = nil,
            name: Swift.String? = nil,
            next: Swift.String? = nil
        )
        {
            self.attributes = attributes
            self.name = name
            self.next = next
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// An activity that performs a transformation on a message.
    public struct PipelineActivity: Swift.Sendable {
        /// Adds other attributes based on existing attributes in the message.
        public var addAttributes: IoTAnalyticsClientTypes.AddAttributesActivity?
        /// Determines the source of the messages to be processed.
        public var channel: IoTAnalyticsClientTypes.ChannelActivity?
        /// Specifies where to store the processed message data.
        public var datastore: IoTAnalyticsClientTypes.DatastoreActivity?
        /// Adds data from the IoT device registry to your message.
        public var deviceRegistryEnrich: IoTAnalyticsClientTypes.DeviceRegistryEnrichActivity?
        /// Adds information from the IoT Device Shadow service to a message.
        public var deviceShadowEnrich: IoTAnalyticsClientTypes.DeviceShadowEnrichActivity?
        /// Filters a message based on its attributes.
        public var filter: IoTAnalyticsClientTypes.FilterActivity?
        /// Runs a Lambda function to modify the message.
        public var lambda: IoTAnalyticsClientTypes.LambdaActivity?
        /// Computes an arithmetic expression using the message's attributes and adds it to the message.
        public var math: IoTAnalyticsClientTypes.MathActivity?
        /// Removes attributes from a message.
        public var removeAttributes: IoTAnalyticsClientTypes.RemoveAttributesActivity?
        /// Used to create a new message using only the specified attributes from the original message.
        public var selectAttributes: IoTAnalyticsClientTypes.SelectAttributesActivity?

        public init(
            addAttributes: IoTAnalyticsClientTypes.AddAttributesActivity? = nil,
            channel: IoTAnalyticsClientTypes.ChannelActivity? = nil,
            datastore: IoTAnalyticsClientTypes.DatastoreActivity? = nil,
            deviceRegistryEnrich: IoTAnalyticsClientTypes.DeviceRegistryEnrichActivity? = nil,
            deviceShadowEnrich: IoTAnalyticsClientTypes.DeviceShadowEnrichActivity? = nil,
            filter: IoTAnalyticsClientTypes.FilterActivity? = nil,
            lambda: IoTAnalyticsClientTypes.LambdaActivity? = nil,
            math: IoTAnalyticsClientTypes.MathActivity? = nil,
            removeAttributes: IoTAnalyticsClientTypes.RemoveAttributesActivity? = nil,
            selectAttributes: IoTAnalyticsClientTypes.SelectAttributesActivity? = nil
        )
        {
            self.addAttributes = addAttributes
            self.channel = channel
            self.datastore = datastore
            self.deviceRegistryEnrich = deviceRegistryEnrich
            self.deviceShadowEnrich = deviceShadowEnrich
            self.filter = filter
            self.lambda = lambda
            self.math = math
            self.removeAttributes = removeAttributes
            self.selectAttributes = selectAttributes
        }
    }
}

public struct CreatePipelineInput: Swift.Sendable {
    /// A list of PipelineActivity objects. Activities perform transformations on your messages, such as removing, renaming or adding message attributes; filtering messages based on attribute values; invoking your Lambda unctions on messages for advanced processing; or performing mathematical transformations to normalize device data. The list can be 2-25 PipelineActivity objects and must contain both a channel and a datastore activity. Each entry in the list must contain only one activity. For example: pipelineActivities = [ { "channel": { ... } }, { "lambda": { ... } }, ... ]
    /// This member is required.
    public var pipelineActivities: [IoTAnalyticsClientTypes.PipelineActivity]?
    /// The name of the pipeline.
    /// This member is required.
    public var pipelineName: Swift.String?
    /// Metadata which can be used to manage the pipeline.
    public var tags: [IoTAnalyticsClientTypes.Tag]?

    public init(
        pipelineActivities: [IoTAnalyticsClientTypes.PipelineActivity]? = nil,
        pipelineName: Swift.String? = nil,
        tags: [IoTAnalyticsClientTypes.Tag]? = nil
    )
    {
        self.pipelineActivities = pipelineActivities
        self.pipelineName = pipelineName
        self.tags = tags
    }
}

public struct CreatePipelineOutput: Swift.Sendable {
    /// The ARN of the pipeline.
    public var pipelineArn: Swift.String?
    /// The name of the pipeline.
    public var pipelineName: Swift.String?

    public init(
        pipelineArn: Swift.String? = nil,
        pipelineName: Swift.String? = nil
    )
    {
        self.pipelineArn = pipelineArn
        self.pipelineName = pipelineName
    }
}

public struct DeleteChannelInput: Swift.Sendable {
    /// The name of the channel to delete.
    /// This member is required.
    public var channelName: Swift.String?

    public init(
        channelName: Swift.String? = nil
    )
    {
        self.channelName = channelName
    }
}

public struct DeleteDatasetInput: Swift.Sendable {
    /// The name of the dataset to delete.
    /// This member is required.
    public var datasetName: Swift.String?

    public init(
        datasetName: Swift.String? = nil
    )
    {
        self.datasetName = datasetName
    }
}

public struct DeleteDatasetContentInput: Swift.Sendable {
    /// The name of the dataset whose content is deleted.
    /// This member is required.
    public var datasetName: Swift.String?
    /// The version of the dataset whose content is deleted. You can also use the strings "$LATEST" or "$LATEST_SUCCEEDED" to delete the latest or latest successfully completed data set. If not specified, "$LATEST_SUCCEEDED" is the default.
    public var versionId: Swift.String?

    public init(
        datasetName: Swift.String? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.datasetName = datasetName
        self.versionId = versionId
    }
}

public struct DeleteDatastoreInput: Swift.Sendable {
    /// The name of the data store to delete.
    /// This member is required.
    public var datastoreName: Swift.String?

    public init(
        datastoreName: Swift.String? = nil
    )
    {
        self.datastoreName = datastoreName
    }
}

public struct DeletePipelineInput: Swift.Sendable {
    /// The name of the pipeline to delete.
    /// This member is required.
    public var pipelineName: Swift.String?

    public init(
        pipelineName: Swift.String? = nil
    )
    {
        self.pipelineName = pipelineName
    }
}

public struct DescribeChannelInput: Swift.Sendable {
    /// The name of the channel whose information is retrieved.
    /// This member is required.
    public var channelName: Swift.String?
    /// If true, additional statistical information about the channel is included in the response. This feature can't be used with a channel whose S3 storage is customer-managed.
    public var includeStatistics: Swift.Bool?

    public init(
        channelName: Swift.String? = nil,
        includeStatistics: Swift.Bool? = false
    )
    {
        self.channelName = channelName
        self.includeStatistics = includeStatistics
    }
}

extension IoTAnalyticsClientTypes {

    public enum ChannelStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case creating
        case deleting
        case sdkUnknown(Swift.String)

        public static var allCases: [ChannelStatus] {
            return [
                .active,
                .creating,
                .deleting
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// A collection of data from an MQTT topic. Channels archive the raw, unprocessed messages before publishing the data to a pipeline.
    public struct Channel: Swift.Sendable {
        /// The ARN of the channel.
        public var arn: Swift.String?
        /// When the channel was created.
        public var creationTime: Foundation.Date?
        /// The last time when a new message arrived in the channel. IoT Analytics updates this value at most once per minute for one channel. Hence, the lastMessageArrivalTime value is an approximation. This feature only applies to messages that arrived in the data store after October 23, 2020.
        public var lastMessageArrivalTime: Foundation.Date?
        /// When the channel was last updated.
        public var lastUpdateTime: Foundation.Date?
        /// The name of the channel.
        public var name: Swift.String?
        /// How long, in days, message data is kept for the channel.
        public var retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod?
        /// The status of the channel.
        public var status: IoTAnalyticsClientTypes.ChannelStatus?
        /// Where channel data is stored. You can choose one of serviceManagedS3 or customerManagedS3 storage. If not specified, the default is serviceManagedS3. You can't change this storage option after the channel is created.
        public var storage: IoTAnalyticsClientTypes.ChannelStorage?

        public init(
            arn: Swift.String? = nil,
            creationTime: Foundation.Date? = nil,
            lastMessageArrivalTime: Foundation.Date? = nil,
            lastUpdateTime: Foundation.Date? = nil,
            name: Swift.String? = nil,
            retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod? = nil,
            status: IoTAnalyticsClientTypes.ChannelStatus? = nil,
            storage: IoTAnalyticsClientTypes.ChannelStorage? = nil
        )
        {
            self.arn = arn
            self.creationTime = creationTime
            self.lastMessageArrivalTime = lastMessageArrivalTime
            self.lastUpdateTime = lastUpdateTime
            self.name = name
            self.retentionPeriod = retentionPeriod
            self.status = status
            self.storage = storage
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// The estimated size of the resource.
    public struct EstimatedResourceSize: Swift.Sendable {
        /// The time when the estimate of the size of the resource was made.
        public var estimatedOn: Foundation.Date?
        /// The estimated size of the resource, in bytes.
        public var estimatedSizeInBytes: Swift.Double?

        public init(
            estimatedOn: Foundation.Date? = nil,
            estimatedSizeInBytes: Swift.Double? = nil
        )
        {
            self.estimatedOn = estimatedOn
            self.estimatedSizeInBytes = estimatedSizeInBytes
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// Statistics information about the channel.
    public struct ChannelStatistics: Swift.Sendable {
        /// The estimated size of the channel.
        public var size: IoTAnalyticsClientTypes.EstimatedResourceSize?

        public init(
            size: IoTAnalyticsClientTypes.EstimatedResourceSize? = nil
        )
        {
            self.size = size
        }
    }
}

public struct DescribeChannelOutput: Swift.Sendable {
    /// An object that contains information about the channel.
    public var channel: IoTAnalyticsClientTypes.Channel?
    /// Statistics about the channel. Included if the includeStatistics parameter is set to true in the request.
    public var statistics: IoTAnalyticsClientTypes.ChannelStatistics?

    public init(
        channel: IoTAnalyticsClientTypes.Channel? = nil,
        statistics: IoTAnalyticsClientTypes.ChannelStatistics? = nil
    )
    {
        self.channel = channel
        self.statistics = statistics
    }
}

public struct DescribeDatasetInput: Swift.Sendable {
    /// The name of the dataset whose information is retrieved.
    /// This member is required.
    public var datasetName: Swift.String?

    public init(
        datasetName: Swift.String? = nil
    )
    {
        self.datasetName = datasetName
    }
}

extension IoTAnalyticsClientTypes {

    public enum DatasetStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case creating
        case deleting
        case sdkUnknown(Swift.String)

        public static var allCases: [DatasetStatus] {
            return [
                .active,
                .creating,
                .deleting
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// Information about a dataset.
    public struct Dataset: Swift.Sendable {
        /// The DatasetAction objects that automatically create the dataset contents.
        public var actions: [IoTAnalyticsClientTypes.DatasetAction]?
        /// The ARN of the dataset.
        public var arn: Swift.String?
        /// When dataset contents are created they are delivered to destinations specified here.
        public var contentDeliveryRules: [IoTAnalyticsClientTypes.DatasetContentDeliveryRule]?
        /// When the dataset was created.
        public var creationTime: Foundation.Date?
        /// The last time the dataset was updated.
        public var lastUpdateTime: Foundation.Date?
        /// A list of data rules that send notifications to CloudWatch, when data arrives late. To specify lateDataRules, the dataset must use a [DeltaTimer](https://docs.aws.amazon.com/iotanalytics/latest/APIReference/API_DeltaTime.html) filter.
        public var lateDataRules: [IoTAnalyticsClientTypes.LateDataRule]?
        /// The name of the dataset.
        public var name: Swift.String?
        /// Optional. How long, in days, message data is kept for the dataset.
        public var retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod?
        /// The status of the dataset.
        public var status: IoTAnalyticsClientTypes.DatasetStatus?
        /// The DatasetTrigger objects that specify when the dataset is automatically updated.
        public var triggers: [IoTAnalyticsClientTypes.DatasetTrigger]?
        /// Optional. How many versions of dataset contents are kept. If not specified or set to null, only the latest version plus the latest succeeded version (if they are different) are kept for the time period specified by the retentionPeriod parameter. For more information, see [ Keeping Multiple Versions of IoT Analytics datasets](https://docs.aws.amazon.com/iotanalytics/latest/userguide/getting-started.html#aws-iot-analytics-dataset-versions) in the IoT Analytics User Guide.
        public var versioningConfiguration: IoTAnalyticsClientTypes.VersioningConfiguration?

        public init(
            actions: [IoTAnalyticsClientTypes.DatasetAction]? = nil,
            arn: Swift.String? = nil,
            contentDeliveryRules: [IoTAnalyticsClientTypes.DatasetContentDeliveryRule]? = nil,
            creationTime: Foundation.Date? = nil,
            lastUpdateTime: Foundation.Date? = nil,
            lateDataRules: [IoTAnalyticsClientTypes.LateDataRule]? = nil,
            name: Swift.String? = nil,
            retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod? = nil,
            status: IoTAnalyticsClientTypes.DatasetStatus? = nil,
            triggers: [IoTAnalyticsClientTypes.DatasetTrigger]? = nil,
            versioningConfiguration: IoTAnalyticsClientTypes.VersioningConfiguration? = nil
        )
        {
            self.actions = actions
            self.arn = arn
            self.contentDeliveryRules = contentDeliveryRules
            self.creationTime = creationTime
            self.lastUpdateTime = lastUpdateTime
            self.lateDataRules = lateDataRules
            self.name = name
            self.retentionPeriod = retentionPeriod
            self.status = status
            self.triggers = triggers
            self.versioningConfiguration = versioningConfiguration
        }
    }
}

public struct DescribeDatasetOutput: Swift.Sendable {
    /// An object that contains information about the dataset.
    public var dataset: IoTAnalyticsClientTypes.Dataset?

    public init(
        dataset: IoTAnalyticsClientTypes.Dataset? = nil
    )
    {
        self.dataset = dataset
    }
}

public struct DescribeDatastoreInput: Swift.Sendable {
    /// The name of the data store
    /// This member is required.
    public var datastoreName: Swift.String?
    /// If true, additional statistical information about the data store is included in the response. This feature can't be used with a data store whose S3 storage is customer-managed.
    public var includeStatistics: Swift.Bool?

    public init(
        datastoreName: Swift.String? = nil,
        includeStatistics: Swift.Bool? = false
    )
    {
        self.datastoreName = datastoreName
        self.includeStatistics = includeStatistics
    }
}

extension IoTAnalyticsClientTypes {

    public enum DatastoreStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case creating
        case deleting
        case sdkUnknown(Swift.String)

        public static var allCases: [DatastoreStatus] {
            return [
                .active,
                .creating,
                .deleting
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// Information about a data store.
    public struct Datastore: Swift.Sendable {
        /// The ARN of the data store.
        public var arn: Swift.String?
        /// When the data store was created.
        public var creationTime: Foundation.Date?
        /// Contains information about the partition dimensions in a data store.
        public var datastorePartitions: IoTAnalyticsClientTypes.DatastorePartitions?
        /// Contains the configuration information of file formats. IoT Analytics data stores support JSON and [Parquet](https://parquet.apache.org/). The default file format is JSON. You can specify only one format. You can't change the file format after you create the data store.
        public var fileFormatConfiguration: IoTAnalyticsClientTypes.FileFormatConfiguration?
        /// The last time when a new message arrived in the data store. IoT Analytics updates this value at most once per minute for Amazon Simple Storage Service one data store. Hence, the lastMessageArrivalTime value is an approximation. This feature only applies to messages that arrived in the data store after October 23, 2020.
        public var lastMessageArrivalTime: Foundation.Date?
        /// The last time the data store was updated.
        public var lastUpdateTime: Foundation.Date?
        /// The name of the data store.
        public var name: Swift.String?
        /// How long, in days, message data is kept for the data store. When customerManagedS3 storage is selected, this parameter is ignored.
        public var retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod?
        /// The status of a data store: CREATING The data store is being created. ACTIVE The data store has been created and can be used. DELETING The data store is being deleted.
        public var status: IoTAnalyticsClientTypes.DatastoreStatus?
        /// Where data in a data store is stored.. You can choose serviceManagedS3 storage, customerManagedS3 storage, or iotSiteWiseMultiLayerStorage storage. The default is serviceManagedS3. You can't change the choice of Amazon S3 storage after your data store is created.
        public var storage: IoTAnalyticsClientTypes.DatastoreStorage?

        public init(
            arn: Swift.String? = nil,
            creationTime: Foundation.Date? = nil,
            datastorePartitions: IoTAnalyticsClientTypes.DatastorePartitions? = nil,
            fileFormatConfiguration: IoTAnalyticsClientTypes.FileFormatConfiguration? = nil,
            lastMessageArrivalTime: Foundation.Date? = nil,
            lastUpdateTime: Foundation.Date? = nil,
            name: Swift.String? = nil,
            retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod? = nil,
            status: IoTAnalyticsClientTypes.DatastoreStatus? = nil,
            storage: IoTAnalyticsClientTypes.DatastoreStorage? = nil
        )
        {
            self.arn = arn
            self.creationTime = creationTime
            self.datastorePartitions = datastorePartitions
            self.fileFormatConfiguration = fileFormatConfiguration
            self.lastMessageArrivalTime = lastMessageArrivalTime
            self.lastUpdateTime = lastUpdateTime
            self.name = name
            self.retentionPeriod = retentionPeriod
            self.status = status
            self.storage = storage
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// Statistical information about the data store.
    public struct DatastoreStatistics: Swift.Sendable {
        /// The estimated size of the data store.
        public var size: IoTAnalyticsClientTypes.EstimatedResourceSize?

        public init(
            size: IoTAnalyticsClientTypes.EstimatedResourceSize? = nil
        )
        {
            self.size = size
        }
    }
}

public struct DescribeDatastoreOutput: Swift.Sendable {
    /// Information about the data store.
    public var datastore: IoTAnalyticsClientTypes.Datastore?
    /// Additional statistical information about the data store. Included if the includeStatistics parameter is set to true in the request.
    public var statistics: IoTAnalyticsClientTypes.DatastoreStatistics?

    public init(
        datastore: IoTAnalyticsClientTypes.Datastore? = nil,
        statistics: IoTAnalyticsClientTypes.DatastoreStatistics? = nil
    )
    {
        self.datastore = datastore
        self.statistics = statistics
    }
}

public struct DescribeLoggingOptionsInput: Swift.Sendable {

    public init() { }
}

extension IoTAnalyticsClientTypes {

    public enum LoggingLevel: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case error
        case sdkUnknown(Swift.String)

        public static var allCases: [LoggingLevel] {
            return [
                .error
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .error: return "ERROR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// Information about logging options.
    public struct LoggingOptions: Swift.Sendable {
        /// If true, logging is enabled for IoT Analytics.
        /// This member is required.
        public var enabled: Swift.Bool
        /// The logging level. Currently, only ERROR is supported.
        /// This member is required.
        public var level: IoTAnalyticsClientTypes.LoggingLevel?
        /// The ARN of the role that grants permission to IoT Analytics to perform logging.
        /// This member is required.
        public var roleArn: Swift.String?

        public init(
            enabled: Swift.Bool = false,
            level: IoTAnalyticsClientTypes.LoggingLevel? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.enabled = enabled
            self.level = level
            self.roleArn = roleArn
        }
    }
}

public struct DescribeLoggingOptionsOutput: Swift.Sendable {
    /// The current settings of the IoT Analytics logging options.
    public var loggingOptions: IoTAnalyticsClientTypes.LoggingOptions?

    public init(
        loggingOptions: IoTAnalyticsClientTypes.LoggingOptions? = nil
    )
    {
        self.loggingOptions = loggingOptions
    }
}

public struct DescribePipelineInput: Swift.Sendable {
    /// The name of the pipeline whose information is retrieved.
    /// This member is required.
    public var pipelineName: Swift.String?

    public init(
        pipelineName: Swift.String? = nil
    )
    {
        self.pipelineName = pipelineName
    }
}

extension IoTAnalyticsClientTypes {

    public enum ReprocessingStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cancelled
        case failed
        case running
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [ReprocessingStatus] {
            return [
                .cancelled,
                .failed,
                .running,
                .succeeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "CANCELLED"
            case .failed: return "FAILED"
            case .running: return "RUNNING"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// Information about pipeline reprocessing.
    public struct ReprocessingSummary: Swift.Sendable {
        /// The time the pipeline reprocessing was created.
        public var creationTime: Foundation.Date?
        /// The reprocessingId returned by StartPipelineReprocessing.
        public var id: Swift.String?
        /// The status of the pipeline reprocessing.
        public var status: IoTAnalyticsClientTypes.ReprocessingStatus?

        public init(
            creationTime: Foundation.Date? = nil,
            id: Swift.String? = nil,
            status: IoTAnalyticsClientTypes.ReprocessingStatus? = nil
        )
        {
            self.creationTime = creationTime
            self.id = id
            self.status = status
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// Contains information about a pipeline.
    public struct Pipeline: Swift.Sendable {
        /// The activities that perform transformations on the messages.
        public var activities: [IoTAnalyticsClientTypes.PipelineActivity]?
        /// The ARN of the pipeline.
        public var arn: Swift.String?
        /// When the pipeline was created.
        public var creationTime: Foundation.Date?
        /// The last time the pipeline was updated.
        public var lastUpdateTime: Foundation.Date?
        /// The name of the pipeline.
        public var name: Swift.String?
        /// A summary of information about the pipeline reprocessing.
        public var reprocessingSummaries: [IoTAnalyticsClientTypes.ReprocessingSummary]?

        public init(
            activities: [IoTAnalyticsClientTypes.PipelineActivity]? = nil,
            arn: Swift.String? = nil,
            creationTime: Foundation.Date? = nil,
            lastUpdateTime: Foundation.Date? = nil,
            name: Swift.String? = nil,
            reprocessingSummaries: [IoTAnalyticsClientTypes.ReprocessingSummary]? = nil
        )
        {
            self.activities = activities
            self.arn = arn
            self.creationTime = creationTime
            self.lastUpdateTime = lastUpdateTime
            self.name = name
            self.reprocessingSummaries = reprocessingSummaries
        }
    }
}

public struct DescribePipelineOutput: Swift.Sendable {
    /// A Pipeline object that contains information about the pipeline.
    public var pipeline: IoTAnalyticsClientTypes.Pipeline?

    public init(
        pipeline: IoTAnalyticsClientTypes.Pipeline? = nil
    )
    {
        self.pipeline = pipeline
    }
}

public struct GetDatasetContentInput: Swift.Sendable {
    /// The name of the dataset whose contents are retrieved.
    /// This member is required.
    public var datasetName: Swift.String?
    /// The version of the dataset whose contents are retrieved. You can also use the strings "$LATEST" or "$LATEST_SUCCEEDED" to retrieve the contents of the latest or latest successfully completed dataset. If not specified, "$LATEST_SUCCEEDED" is the default.
    public var versionId: Swift.String?

    public init(
        datasetName: Swift.String? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.datasetName = datasetName
        self.versionId = versionId
    }
}

extension IoTAnalyticsClientTypes {

    /// The reference to a dataset entry.
    public struct DatasetEntry: Swift.Sendable {
        /// The presigned URI of the dataset item.
        public var dataURI: Swift.String?
        /// The name of the dataset item.
        public var entryName: Swift.String?

        public init(
            dataURI: Swift.String? = nil,
            entryName: Swift.String? = nil
        )
        {
            self.dataURI = dataURI
            self.entryName = entryName
        }
    }
}

extension IoTAnalyticsClientTypes {

    public enum DatasetContentState: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creating
        case failed
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [DatasetContentState] {
            return [
                .creating,
                .failed,
                .succeeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creating: return "CREATING"
            case .failed: return "FAILED"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// The state of the dataset contents and the reason they are in this state.
    public struct DatasetContentStatus: Swift.Sendable {
        /// The reason the dataset contents are in this state.
        public var reason: Swift.String?
        /// The state of the dataset contents. Can be one of READY, CREATING, SUCCEEDED, or FAILED.
        public var state: IoTAnalyticsClientTypes.DatasetContentState?

        public init(
            reason: Swift.String? = nil,
            state: IoTAnalyticsClientTypes.DatasetContentState? = nil
        )
        {
            self.reason = reason
            self.state = state
        }
    }
}

public struct GetDatasetContentOutput: Swift.Sendable {
    /// A list of DatasetEntry objects.
    public var entries: [IoTAnalyticsClientTypes.DatasetEntry]?
    /// The status of the dataset content.
    public var status: IoTAnalyticsClientTypes.DatasetContentStatus?
    /// The time when the request was made.
    public var timestamp: Foundation.Date?

    public init(
        entries: [IoTAnalyticsClientTypes.DatasetEntry]? = nil,
        status: IoTAnalyticsClientTypes.DatasetContentStatus? = nil,
        timestamp: Foundation.Date? = nil
    )
    {
        self.entries = entries
        self.status = status
        self.timestamp = timestamp
    }
}

public struct ListChannelsInput: Swift.Sendable {
    /// The maximum number of results to return in this request. The default value is 100.
    public var maxResults: Swift.Int?
    /// The token for the next set of results.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension IoTAnalyticsClientTypes {

    /// Used to store channel data in an S3 bucket that you manage.
    public struct CustomerManagedChannelS3StorageSummary: Swift.Sendable {
        /// The name of the S3 bucket in which channel data is stored.
        public var bucket: Swift.String?
        /// (Optional) The prefix used to create the keys of the channel data objects. Each object in an S3 bucket has a key that is its unique identifier within the bucket (each object in a bucket has exactly one key). The prefix must end with a forward slash (/).
        public var keyPrefix: Swift.String?
        /// The ARN of the role that grants IoT Analytics permission to interact with your Amazon S3 resources.
        public var roleArn: Swift.String?

        public init(
            bucket: Swift.String? = nil,
            keyPrefix: Swift.String? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.keyPrefix = keyPrefix
            self.roleArn = roleArn
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// Used to store channel data in an S3 bucket managed by IoT Analytics.
    public struct ServiceManagedChannelS3StorageSummary: Swift.Sendable {

        public init() { }
    }
}

extension IoTAnalyticsClientTypes {

    /// Where channel data is stored.
    public struct ChannelStorageSummary: Swift.Sendable {
        /// Used to store channel data in an S3 bucket that you manage.
        public var customerManagedS3: IoTAnalyticsClientTypes.CustomerManagedChannelS3StorageSummary?
        /// Used to store channel data in an S3 bucket managed by IoT Analytics.
        public var serviceManagedS3: IoTAnalyticsClientTypes.ServiceManagedChannelS3StorageSummary?

        public init(
            customerManagedS3: IoTAnalyticsClientTypes.CustomerManagedChannelS3StorageSummary? = nil,
            serviceManagedS3: IoTAnalyticsClientTypes.ServiceManagedChannelS3StorageSummary? = nil
        )
        {
            self.customerManagedS3 = customerManagedS3
            self.serviceManagedS3 = serviceManagedS3
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// A summary of information about a channel.
    public struct ChannelSummary: Swift.Sendable {
        /// The name of the channel.
        public var channelName: Swift.String?
        /// Where channel data is stored.
        public var channelStorage: IoTAnalyticsClientTypes.ChannelStorageSummary?
        /// When the channel was created.
        public var creationTime: Foundation.Date?
        /// The last time when a new message arrived in the channel. IoT Analytics updates this value at most once per minute for one channel. Hence, the lastMessageArrivalTime value is an approximation. This feature only applies to messages that arrived in the data store after October 23, 2020.
        public var lastMessageArrivalTime: Foundation.Date?
        /// The last time the channel was updated.
        public var lastUpdateTime: Foundation.Date?
        /// The status of the channel.
        public var status: IoTAnalyticsClientTypes.ChannelStatus?

        public init(
            channelName: Swift.String? = nil,
            channelStorage: IoTAnalyticsClientTypes.ChannelStorageSummary? = nil,
            creationTime: Foundation.Date? = nil,
            lastMessageArrivalTime: Foundation.Date? = nil,
            lastUpdateTime: Foundation.Date? = nil,
            status: IoTAnalyticsClientTypes.ChannelStatus? = nil
        )
        {
            self.channelName = channelName
            self.channelStorage = channelStorage
            self.creationTime = creationTime
            self.lastMessageArrivalTime = lastMessageArrivalTime
            self.lastUpdateTime = lastUpdateTime
            self.status = status
        }
    }
}

public struct ListChannelsOutput: Swift.Sendable {
    /// A list of ChannelSummary objects.
    public var channelSummaries: [IoTAnalyticsClientTypes.ChannelSummary]?
    /// The token to retrieve the next set of results, or null if there are no more results.
    public var nextToken: Swift.String?

    public init(
        channelSummaries: [IoTAnalyticsClientTypes.ChannelSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.channelSummaries = channelSummaries
        self.nextToken = nextToken
    }
}

public struct ListDatasetContentsInput: Swift.Sendable {
    /// The name of the dataset whose contents information you want to list.
    /// This member is required.
    public var datasetName: Swift.String?
    /// The maximum number of results to return in this request.
    public var maxResults: Swift.Int?
    /// The token for the next set of results.
    public var nextToken: Swift.String?
    /// A filter to limit results to those dataset contents whose creation is scheduled before the given time. See the field triggers.schedule in the CreateDataset request. (timestamp)
    public var scheduledBefore: Foundation.Date?
    /// A filter to limit results to those dataset contents whose creation is scheduled on or after the given time. See the field triggers.schedule in the CreateDataset request. (timestamp)
    public var scheduledOnOrAfter: Foundation.Date?

    public init(
        datasetName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        scheduledBefore: Foundation.Date? = nil,
        scheduledOnOrAfter: Foundation.Date? = nil
    )
    {
        self.datasetName = datasetName
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.scheduledBefore = scheduledBefore
        self.scheduledOnOrAfter = scheduledOnOrAfter
    }
}

extension IoTAnalyticsClientTypes {

    /// Summary information about dataset contents.
    public struct DatasetContentSummary: Swift.Sendable {
        /// The time the dataset content status was updated to SUCCEEDED or FAILED.
        public var completionTime: Foundation.Date?
        /// The actual time the creation of the dataset contents was started.
        public var creationTime: Foundation.Date?
        /// The time the creation of the dataset contents was scheduled to start.
        public var scheduleTime: Foundation.Date?
        /// The status of the dataset contents.
        public var status: IoTAnalyticsClientTypes.DatasetContentStatus?
        /// The version of the dataset contents.
        public var version: Swift.String?

        public init(
            completionTime: Foundation.Date? = nil,
            creationTime: Foundation.Date? = nil,
            scheduleTime: Foundation.Date? = nil,
            status: IoTAnalyticsClientTypes.DatasetContentStatus? = nil,
            version: Swift.String? = nil
        )
        {
            self.completionTime = completionTime
            self.creationTime = creationTime
            self.scheduleTime = scheduleTime
            self.status = status
            self.version = version
        }
    }
}

public struct ListDatasetContentsOutput: Swift.Sendable {
    /// Summary information about dataset contents that have been created.
    public var datasetContentSummaries: [IoTAnalyticsClientTypes.DatasetContentSummary]?
    /// The token to retrieve the next set of results, or null if there are no more results.
    public var nextToken: Swift.String?

    public init(
        datasetContentSummaries: [IoTAnalyticsClientTypes.DatasetContentSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.datasetContentSummaries = datasetContentSummaries
        self.nextToken = nextToken
    }
}

public struct ListDatasetsInput: Swift.Sendable {
    /// The maximum number of results to return in this request. The default value is 100.
    public var maxResults: Swift.Int?
    /// The token for the next set of results.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension IoTAnalyticsClientTypes {

    public enum DatasetActionType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case container
        case query
        case sdkUnknown(Swift.String)

        public static var allCases: [DatasetActionType] {
            return [
                .container,
                .query
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .container: return "CONTAINER"
            case .query: return "QUERY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// Information about the action that automatically creates the dataset's contents.
    public struct DatasetActionSummary: Swift.Sendable {
        /// The name of the action that automatically creates the dataset's contents.
        public var actionName: Swift.String?
        /// The type of action by which the dataset's contents are automatically created.
        public var actionType: IoTAnalyticsClientTypes.DatasetActionType?

        public init(
            actionName: Swift.String? = nil,
            actionType: IoTAnalyticsClientTypes.DatasetActionType? = nil
        )
        {
            self.actionName = actionName
            self.actionType = actionType
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// A summary of information about a dataset.
    public struct DatasetSummary: Swift.Sendable {
        /// A list of DataActionSummary objects.
        public var actions: [IoTAnalyticsClientTypes.DatasetActionSummary]?
        /// The time the dataset was created.
        public var creationTime: Foundation.Date?
        /// The name of the dataset.
        public var datasetName: Swift.String?
        /// The last time the dataset was updated.
        public var lastUpdateTime: Foundation.Date?
        /// The status of the dataset.
        public var status: IoTAnalyticsClientTypes.DatasetStatus?
        /// A list of triggers. A trigger causes dataset content to be populated at a specified time interval or when another dataset is populated. The list of triggers can be empty or contain up to five DataSetTrigger objects
        public var triggers: [IoTAnalyticsClientTypes.DatasetTrigger]?

        public init(
            actions: [IoTAnalyticsClientTypes.DatasetActionSummary]? = nil,
            creationTime: Foundation.Date? = nil,
            datasetName: Swift.String? = nil,
            lastUpdateTime: Foundation.Date? = nil,
            status: IoTAnalyticsClientTypes.DatasetStatus? = nil,
            triggers: [IoTAnalyticsClientTypes.DatasetTrigger]? = nil
        )
        {
            self.actions = actions
            self.creationTime = creationTime
            self.datasetName = datasetName
            self.lastUpdateTime = lastUpdateTime
            self.status = status
            self.triggers = triggers
        }
    }
}

public struct ListDatasetsOutput: Swift.Sendable {
    /// A list of DatasetSummary objects.
    public var datasetSummaries: [IoTAnalyticsClientTypes.DatasetSummary]?
    /// The token to retrieve the next set of results, or null if there are no more results.
    public var nextToken: Swift.String?

    public init(
        datasetSummaries: [IoTAnalyticsClientTypes.DatasetSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.datasetSummaries = datasetSummaries
        self.nextToken = nextToken
    }
}

public struct ListDatastoresInput: Swift.Sendable {
    /// The maximum number of results to return in this request. The default value is 100.
    public var maxResults: Swift.Int?
    /// The token for the next set of results.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension IoTAnalyticsClientTypes {

    /// Contains information about the data store that you manage.
    public struct CustomerManagedDatastoreS3StorageSummary: Swift.Sendable {
        /// The name of the Amazon S3 bucket where your data is stored.
        public var bucket: Swift.String?
        /// (Optional) The prefix used to create the keys of the data store data objects. Each object in an Amazon S3 bucket has a key that is its unique identifier in the bucket. Each object in a bucket has exactly one key. The prefix must end with a forward slash (/).
        public var keyPrefix: Swift.String?
        /// The ARN of the role that grants IoT Analytics permission to interact with your Amazon S3 resources.
        public var roleArn: Swift.String?

        public init(
            bucket: Swift.String? = nil,
            keyPrefix: Swift.String? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.keyPrefix = keyPrefix
            self.roleArn = roleArn
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// Contains information about the data store that you manage, which stores data used by IoT SiteWise.
    public struct IotSiteWiseCustomerManagedDatastoreS3StorageSummary: Swift.Sendable {
        /// The name of the Amazon S3 bucket where your data is stored.
        public var bucket: Swift.String?
        /// (Optional) The prefix used to create the keys of the data store data objects. Each object in an Amazon S3 bucket has a key that is its unique identifier in the bucket. Each object in a bucket has exactly one key. The prefix must end with a forward slash (/).
        public var keyPrefix: Swift.String?

        public init(
            bucket: Swift.String? = nil,
            keyPrefix: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.keyPrefix = keyPrefix
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// Contains information about the data store that you manage, which stores data used by IoT SiteWise.
    public struct DatastoreIotSiteWiseMultiLayerStorageSummary: Swift.Sendable {
        /// Used to store data used by IoT SiteWise in an Amazon S3 bucket that you manage.
        public var customerManagedS3Storage: IoTAnalyticsClientTypes.IotSiteWiseCustomerManagedDatastoreS3StorageSummary?

        public init(
            customerManagedS3Storage: IoTAnalyticsClientTypes.IotSiteWiseCustomerManagedDatastoreS3StorageSummary? = nil
        )
        {
            self.customerManagedS3Storage = customerManagedS3Storage
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// Contains information about the data store that is managed by IoT Analytics.
    public struct ServiceManagedDatastoreS3StorageSummary: Swift.Sendable {

        public init() { }
    }
}

extension IoTAnalyticsClientTypes {

    /// Contains information about your data store.
    public struct DatastoreStorageSummary: Swift.Sendable {
        /// Used to store data in an Amazon S3 bucket managed by IoT Analytics.
        public var customerManagedS3: IoTAnalyticsClientTypes.CustomerManagedDatastoreS3StorageSummary?
        /// Used to store data used by IoT SiteWise in an Amazon S3 bucket that you manage.
        public var iotSiteWiseMultiLayerStorage: IoTAnalyticsClientTypes.DatastoreIotSiteWiseMultiLayerStorageSummary?
        /// Used to store data in an Amazon S3 bucket managed by IoT Analytics.
        public var serviceManagedS3: IoTAnalyticsClientTypes.ServiceManagedDatastoreS3StorageSummary?

        public init(
            customerManagedS3: IoTAnalyticsClientTypes.CustomerManagedDatastoreS3StorageSummary? = nil,
            iotSiteWiseMultiLayerStorage: IoTAnalyticsClientTypes.DatastoreIotSiteWiseMultiLayerStorageSummary? = nil,
            serviceManagedS3: IoTAnalyticsClientTypes.ServiceManagedDatastoreS3StorageSummary? = nil
        )
        {
            self.customerManagedS3 = customerManagedS3
            self.iotSiteWiseMultiLayerStorage = iotSiteWiseMultiLayerStorage
            self.serviceManagedS3 = serviceManagedS3
        }
    }
}

extension IoTAnalyticsClientTypes {

    public enum FileFormatType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case json
        case parquet
        case sdkUnknown(Swift.String)

        public static var allCases: [FileFormatType] {
            return [
                .json,
                .parquet
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .json: return "JSON"
            case .parquet: return "PARQUET"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension IoTAnalyticsClientTypes {

    /// A summary of information about a data store.
    public struct DatastoreSummary: Swift.Sendable {
        /// When the data store was created.
        public var creationTime: Foundation.Date?
        /// The name of the data store.
        public var datastoreName: Swift.String?
        /// Contains information about the partition dimensions in a data store.
        public var datastorePartitions: IoTAnalyticsClientTypes.DatastorePartitions?
        /// Where data in a data store is stored.
        public var datastoreStorage: IoTAnalyticsClientTypes.DatastoreStorageSummary?
        /// The file format of the data in the data store.
        public var fileFormatType: IoTAnalyticsClientTypes.FileFormatType?
        /// The last time when a new message arrived in the data store. IoT Analytics updates this value at most once per minute for Amazon Simple Storage Service one data store. Hence, the lastMessageArrivalTime value is an approximation. This feature only applies to messages that arrived in the data store after October 23, 2020.
        public var lastMessageArrivalTime: Foundation.Date?
        /// The last time the data store was updated.
        public var lastUpdateTime: Foundation.Date?
        /// The status of the data store.
        public var status: IoTAnalyticsClientTypes.DatastoreStatus?

        public init(
            creationTime: Foundation.Date? = nil,
            datastoreName: Swift.String? = nil,
            datastorePartitions: IoTAnalyticsClientTypes.DatastorePartitions? = nil,
            datastoreStorage: IoTAnalyticsClientTypes.DatastoreStorageSummary? = nil,
            fileFormatType: IoTAnalyticsClientTypes.FileFormatType? = nil,
            lastMessageArrivalTime: Foundation.Date? = nil,
            lastUpdateTime: Foundation.Date? = nil,
            status: IoTAnalyticsClientTypes.DatastoreStatus? = nil
        )
        {
            self.creationTime = creationTime
            self.datastoreName = datastoreName
            self.datastorePartitions = datastorePartitions
            self.datastoreStorage = datastoreStorage
            self.fileFormatType = fileFormatType
            self.lastMessageArrivalTime = lastMessageArrivalTime
            self.lastUpdateTime = lastUpdateTime
            self.status = status
        }
    }
}

public struct ListDatastoresOutput: Swift.Sendable {
    /// A list of DatastoreSummary objects.
    public var datastoreSummaries: [IoTAnalyticsClientTypes.DatastoreSummary]?
    /// The token to retrieve the next set of results, or null if there are no more results.
    public var nextToken: Swift.String?

    public init(
        datastoreSummaries: [IoTAnalyticsClientTypes.DatastoreSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.datastoreSummaries = datastoreSummaries
        self.nextToken = nextToken
    }
}

public struct ListPipelinesInput: Swift.Sendable {
    /// The maximum number of results to return in this request. The default value is 100.
    public var maxResults: Swift.Int?
    /// The token for the next set of results.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension IoTAnalyticsClientTypes {

    /// A summary of information about a pipeline.
    public struct PipelineSummary: Swift.Sendable {
        /// When the pipeline was created.
        public var creationTime: Foundation.Date?
        /// When the pipeline was last updated.
        public var lastUpdateTime: Foundation.Date?
        /// The name of the pipeline.
        public var pipelineName: Swift.String?
        /// A summary of information about the pipeline reprocessing.
        public var reprocessingSummaries: [IoTAnalyticsClientTypes.ReprocessingSummary]?

        public init(
            creationTime: Foundation.Date? = nil,
            lastUpdateTime: Foundation.Date? = nil,
            pipelineName: Swift.String? = nil,
            reprocessingSummaries: [IoTAnalyticsClientTypes.ReprocessingSummary]? = nil
        )
        {
            self.creationTime = creationTime
            self.lastUpdateTime = lastUpdateTime
            self.pipelineName = pipelineName
            self.reprocessingSummaries = reprocessingSummaries
        }
    }
}

public struct ListPipelinesOutput: Swift.Sendable {
    /// The token to retrieve the next set of results, or null if there are no more results.
    public var nextToken: Swift.String?
    /// A list of PipelineSummary objects.
    public var pipelineSummaries: [IoTAnalyticsClientTypes.PipelineSummary]?

    public init(
        nextToken: Swift.String? = nil,
        pipelineSummaries: [IoTAnalyticsClientTypes.PipelineSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.pipelineSummaries = pipelineSummaries
    }
}

public struct ListTagsForResourceInput: Swift.Sendable {
    /// The ARN of the resource whose tags you want to list.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct ListTagsForResourceOutput: Swift.Sendable {
    /// The tags (metadata) that you have assigned to the resource.
    public var tags: [IoTAnalyticsClientTypes.Tag]?

    public init(
        tags: [IoTAnalyticsClientTypes.Tag]? = nil
    )
    {
        self.tags = tags
    }
}

public struct PutLoggingOptionsInput: Swift.Sendable {
    /// The new values of the IoT Analytics logging options.
    /// This member is required.
    public var loggingOptions: IoTAnalyticsClientTypes.LoggingOptions?

    public init(
        loggingOptions: IoTAnalyticsClientTypes.LoggingOptions? = nil
    )
    {
        self.loggingOptions = loggingOptions
    }
}

public struct RunPipelineActivityInput: Swift.Sendable {
    /// The sample message payloads on which the pipeline activity is run.
    /// This member is required.
    public var payloads: [Foundation.Data]?
    /// The pipeline activity that is run. This must not be a channel activity or a data store activity because these activities are used in a pipeline only to load the original message and to store the (possibly) transformed message. If a Lambda activity is specified, only short-running Lambda functions (those with a timeout of less than 30 seconds or less) can be used.
    /// This member is required.
    public var pipelineActivity: IoTAnalyticsClientTypes.PipelineActivity?

    public init(
        payloads: [Foundation.Data]? = nil,
        pipelineActivity: IoTAnalyticsClientTypes.PipelineActivity? = nil
    )
    {
        self.payloads = payloads
        self.pipelineActivity = pipelineActivity
    }
}

public struct RunPipelineActivityOutput: Swift.Sendable {
    /// In case the pipeline activity fails, the log message that is generated.
    public var logResult: Swift.String?
    /// The enriched or transformed sample message payloads as base64-encoded strings. (The results of running the pipeline activity on each input sample message payload, encoded in base64.)
    public var payloads: [Foundation.Data]?

    public init(
        logResult: Swift.String? = nil,
        payloads: [Foundation.Data]? = nil
    )
    {
        self.logResult = logResult
        self.payloads = payloads
    }
}

public struct SampleChannelDataInput: Swift.Sendable {
    /// The name of the channel whose message samples are retrieved.
    /// This member is required.
    public var channelName: Swift.String?
    /// The end of the time window from which sample messages are retrieved.
    public var endTime: Foundation.Date?
    /// The number of sample messages to be retrieved. The limit is 10. The default is also 10.
    public var maxMessages: Swift.Int?
    /// The start of the time window from which sample messages are retrieved.
    public var startTime: Foundation.Date?

    public init(
        channelName: Swift.String? = nil,
        endTime: Foundation.Date? = nil,
        maxMessages: Swift.Int? = nil,
        startTime: Foundation.Date? = nil
    )
    {
        self.channelName = channelName
        self.endTime = endTime
        self.maxMessages = maxMessages
        self.startTime = startTime
    }
}

public struct SampleChannelDataOutput: Swift.Sendable {
    /// The list of message samples. Each sample message is returned as a base64-encoded string.
    public var payloads: [Foundation.Data]?

    public init(
        payloads: [Foundation.Data]? = nil
    )
    {
        self.payloads = payloads
    }
}

extension IoTAnalyticsClientTypes {

    /// Specifies one or more sets of channel messages.
    public struct ChannelMessages: Swift.Sendable {
        /// Specifies one or more keys that identify the Amazon Simple Storage Service (Amazon S3) objects that save your channel messages. You must use the full path for the key. Example path: channel/mychannel/__dt=2020-02-29 00:00:00/1582940490000_1582940520000_123456789012_mychannel_0_2118.0.json.gz
        public var s3Paths: [Swift.String]?

        public init(
            s3Paths: [Swift.String]? = nil
        )
        {
            self.s3Paths = s3Paths
        }
    }
}

public struct StartPipelineReprocessingInput: Swift.Sendable {
    /// Specifies one or more sets of channel messages that you want to reprocess. If you use the channelMessages object, you must not specify a value for startTime and endTime.
    public var channelMessages: IoTAnalyticsClientTypes.ChannelMessages?
    /// The end time (exclusive) of raw message data that is reprocessed. If you specify a value for the endTime parameter, you must not use the channelMessages object.
    public var endTime: Foundation.Date?
    /// The name of the pipeline on which to start reprocessing.
    /// This member is required.
    public var pipelineName: Swift.String?
    /// The start time (inclusive) of raw message data that is reprocessed. If you specify a value for the startTime parameter, you must not use the channelMessages object.
    public var startTime: Foundation.Date?

    public init(
        channelMessages: IoTAnalyticsClientTypes.ChannelMessages? = nil,
        endTime: Foundation.Date? = nil,
        pipelineName: Swift.String? = nil,
        startTime: Foundation.Date? = nil
    )
    {
        self.channelMessages = channelMessages
        self.endTime = endTime
        self.pipelineName = pipelineName
        self.startTime = startTime
    }
}

public struct StartPipelineReprocessingOutput: Swift.Sendable {
    /// The ID of the pipeline reprocessing activity that was started.
    public var reprocessingId: Swift.String?

    public init(
        reprocessingId: Swift.String? = nil
    )
    {
        self.reprocessingId = reprocessingId
    }
}

public struct TagResourceInput: Swift.Sendable {
    /// The ARN of the resource whose tags you want to modify.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The new or modified tags for the resource.
    /// This member is required.
    public var tags: [IoTAnalyticsClientTypes.Tag]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [IoTAnalyticsClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

public struct TagResourceOutput: Swift.Sendable {

    public init() { }
}

public struct UntagResourceInput: Swift.Sendable {
    /// The ARN of the resource whose tags you want to remove.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The keys of those tags which you want to remove.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

public struct UntagResourceOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateChannelInput: Swift.Sendable {
    /// The name of the channel to be updated.
    /// This member is required.
    public var channelName: Swift.String?
    /// Where channel data is stored. You can choose one of serviceManagedS3 or customerManagedS3 storage. If not specified, the default is serviceManagedS3. You can't change this storage option after the channel is created.
    public var channelStorage: IoTAnalyticsClientTypes.ChannelStorage?
    /// How long, in days, message data is kept for the channel. The retention period can't be updated if the channel's Amazon S3 storage is customer-managed.
    public var retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod?

    public init(
        channelName: Swift.String? = nil,
        channelStorage: IoTAnalyticsClientTypes.ChannelStorage? = nil,
        retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod? = nil
    )
    {
        self.channelName = channelName
        self.channelStorage = channelStorage
        self.retentionPeriod = retentionPeriod
    }
}

public struct UpdateDatasetInput: Swift.Sendable {
    /// A list of DatasetAction objects.
    /// This member is required.
    public var actions: [IoTAnalyticsClientTypes.DatasetAction]?
    /// When dataset contents are created, they are delivered to destinations specified here.
    public var contentDeliveryRules: [IoTAnalyticsClientTypes.DatasetContentDeliveryRule]?
    /// The name of the dataset to update.
    /// This member is required.
    public var datasetName: Swift.String?
    /// A list of data rules that send notifications to CloudWatch, when data arrives late. To specify lateDataRules, the dataset must use a [DeltaTimer](https://docs.aws.amazon.com/iotanalytics/latest/APIReference/API_DeltaTime.html) filter.
    public var lateDataRules: [IoTAnalyticsClientTypes.LateDataRule]?
    /// How long, in days, dataset contents are kept for the dataset.
    public var retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod?
    /// A list of DatasetTrigger objects. The list can be empty or can contain up to five DatasetTrigger objects.
    public var triggers: [IoTAnalyticsClientTypes.DatasetTrigger]?
    /// Optional. How many versions of dataset contents are kept. If not specified or set to null, only the latest version plus the latest succeeded version (if they are different) are kept for the time period specified by the retentionPeriod parameter. For more information, see [Keeping Multiple Versions of IoT Analytics datasets](https://docs.aws.amazon.com/iotanalytics/latest/userguide/getting-started.html#aws-iot-analytics-dataset-versions) in the IoT Analytics User Guide.
    public var versioningConfiguration: IoTAnalyticsClientTypes.VersioningConfiguration?

    public init(
        actions: [IoTAnalyticsClientTypes.DatasetAction]? = nil,
        contentDeliveryRules: [IoTAnalyticsClientTypes.DatasetContentDeliveryRule]? = nil,
        datasetName: Swift.String? = nil,
        lateDataRules: [IoTAnalyticsClientTypes.LateDataRule]? = nil,
        retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod? = nil,
        triggers: [IoTAnalyticsClientTypes.DatasetTrigger]? = nil,
        versioningConfiguration: IoTAnalyticsClientTypes.VersioningConfiguration? = nil
    )
    {
        self.actions = actions
        self.contentDeliveryRules = contentDeliveryRules
        self.datasetName = datasetName
        self.lateDataRules = lateDataRules
        self.retentionPeriod = retentionPeriod
        self.triggers = triggers
        self.versioningConfiguration = versioningConfiguration
    }
}

public struct UpdateDatastoreInput: Swift.Sendable {
    /// The name of the data store to be updated.
    /// This member is required.
    public var datastoreName: Swift.String?
    /// Where data in a data store is stored.. You can choose serviceManagedS3 storage, customerManagedS3 storage, or iotSiteWiseMultiLayerStorage storage. The default is serviceManagedS3. You can't change the choice of Amazon S3 storage after your data store is created.
    public var datastoreStorage: IoTAnalyticsClientTypes.DatastoreStorage?
    /// Contains the configuration information of file formats. IoT Analytics data stores support JSON and [Parquet](https://parquet.apache.org/). The default file format is JSON. You can specify only one format. You can't change the file format after you create the data store.
    public var fileFormatConfiguration: IoTAnalyticsClientTypes.FileFormatConfiguration?
    /// How long, in days, message data is kept for the data store. The retention period can't be updated if the data store's Amazon S3 storage is customer-managed.
    public var retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod?

    public init(
        datastoreName: Swift.String? = nil,
        datastoreStorage: IoTAnalyticsClientTypes.DatastoreStorage? = nil,
        fileFormatConfiguration: IoTAnalyticsClientTypes.FileFormatConfiguration? = nil,
        retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod? = nil
    )
    {
        self.datastoreName = datastoreName
        self.datastoreStorage = datastoreStorage
        self.fileFormatConfiguration = fileFormatConfiguration
        self.retentionPeriod = retentionPeriod
    }
}

public struct UpdatePipelineInput: Swift.Sendable {
    /// A list of PipelineActivity objects. Activities perform transformations on your messages, such as removing, renaming or adding message attributes; filtering messages based on attribute values; invoking your Lambda functions on messages for advanced processing; or performing mathematical transformations to normalize device data. The list can be 2-25 PipelineActivity objects and must contain both a channel and a datastore activity. Each entry in the list must contain only one activity. For example: pipelineActivities = [ { "channel": { ... } }, { "lambda": { ... } }, ... ]
    /// This member is required.
    public var pipelineActivities: [IoTAnalyticsClientTypes.PipelineActivity]?
    /// The name of the pipeline to update.
    /// This member is required.
    public var pipelineName: Swift.String?

    public init(
        pipelineActivities: [IoTAnalyticsClientTypes.PipelineActivity]? = nil,
        pipelineName: Swift.String? = nil
    )
    {
        self.pipelineActivities = pipelineActivities
        self.pipelineName = pipelineName
    }
}

extension BatchPutMessageInput {

    static func urlPathProvider(_ value: BatchPutMessageInput) -> Swift.String? {
        return "/messages/batch"
    }
}

extension CancelPipelineReprocessingInput {

    static func urlPathProvider(_ value: CancelPipelineReprocessingInput) -> Swift.String? {
        guard let pipelineName = value.pipelineName else {
            return nil
        }
        guard let reprocessingId = value.reprocessingId else {
            return nil
        }
        return "/pipelines/\(pipelineName.urlPercentEncoding())/reprocessing/\(reprocessingId.urlPercentEncoding())"
    }
}

extension CreateChannelInput {

    static func urlPathProvider(_ value: CreateChannelInput) -> Swift.String? {
        return "/channels"
    }
}

extension CreateDatasetInput {

    static func urlPathProvider(_ value: CreateDatasetInput) -> Swift.String? {
        return "/datasets"
    }
}

extension CreateDatasetContentInput {

    static func urlPathProvider(_ value: CreateDatasetContentInput) -> Swift.String? {
        guard let datasetName = value.datasetName else {
            return nil
        }
        return "/datasets/\(datasetName.urlPercentEncoding())/content"
    }
}

extension CreateDatastoreInput {

    static func urlPathProvider(_ value: CreateDatastoreInput) -> Swift.String? {
        return "/datastores"
    }
}

extension CreatePipelineInput {

    static func urlPathProvider(_ value: CreatePipelineInput) -> Swift.String? {
        return "/pipelines"
    }
}

extension DeleteChannelInput {

    static func urlPathProvider(_ value: DeleteChannelInput) -> Swift.String? {
        guard let channelName = value.channelName else {
            return nil
        }
        return "/channels/\(channelName.urlPercentEncoding())"
    }
}

extension DeleteDatasetInput {

    static func urlPathProvider(_ value: DeleteDatasetInput) -> Swift.String? {
        guard let datasetName = value.datasetName else {
            return nil
        }
        return "/datasets/\(datasetName.urlPercentEncoding())"
    }
}

extension DeleteDatasetContentInput {

    static func urlPathProvider(_ value: DeleteDatasetContentInput) -> Swift.String? {
        guard let datasetName = value.datasetName else {
            return nil
        }
        return "/datasets/\(datasetName.urlPercentEncoding())/content"
    }
}

extension DeleteDatasetContentInput {

    static func queryItemProvider(_ value: DeleteDatasetContentInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let versionId = value.versionId {
            let versionIdQueryItem = Smithy.URIQueryItem(name: "versionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
            items.append(versionIdQueryItem)
        }
        return items
    }
}

extension DeleteDatastoreInput {

    static func urlPathProvider(_ value: DeleteDatastoreInput) -> Swift.String? {
        guard let datastoreName = value.datastoreName else {
            return nil
        }
        return "/datastores/\(datastoreName.urlPercentEncoding())"
    }
}

extension DeletePipelineInput {

    static func urlPathProvider(_ value: DeletePipelineInput) -> Swift.String? {
        guard let pipelineName = value.pipelineName else {
            return nil
        }
        return "/pipelines/\(pipelineName.urlPercentEncoding())"
    }
}

extension DescribeChannelInput {

    static func urlPathProvider(_ value: DescribeChannelInput) -> Swift.String? {
        guard let channelName = value.channelName else {
            return nil
        }
        return "/channels/\(channelName.urlPercentEncoding())"
    }
}

extension DescribeChannelInput {

    static func queryItemProvider(_ value: DescribeChannelInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let includeStatistics = value.includeStatistics {
            let includeStatisticsQueryItem = Smithy.URIQueryItem(name: "includeStatistics".urlPercentEncoding(), value: Swift.String(includeStatistics).urlPercentEncoding())
            items.append(includeStatisticsQueryItem)
        }
        return items
    }
}

extension DescribeDatasetInput {

    static func urlPathProvider(_ value: DescribeDatasetInput) -> Swift.String? {
        guard let datasetName = value.datasetName else {
            return nil
        }
        return "/datasets/\(datasetName.urlPercentEncoding())"
    }
}

extension DescribeDatastoreInput {

    static func urlPathProvider(_ value: DescribeDatastoreInput) -> Swift.String? {
        guard let datastoreName = value.datastoreName else {
            return nil
        }
        return "/datastores/\(datastoreName.urlPercentEncoding())"
    }
}

extension DescribeDatastoreInput {

    static func queryItemProvider(_ value: DescribeDatastoreInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let includeStatistics = value.includeStatistics {
            let includeStatisticsQueryItem = Smithy.URIQueryItem(name: "includeStatistics".urlPercentEncoding(), value: Swift.String(includeStatistics).urlPercentEncoding())
            items.append(includeStatisticsQueryItem)
        }
        return items
    }
}

extension DescribeLoggingOptionsInput {

    static func urlPathProvider(_ value: DescribeLoggingOptionsInput) -> Swift.String? {
        return "/logging"
    }
}

extension DescribePipelineInput {

    static func urlPathProvider(_ value: DescribePipelineInput) -> Swift.String? {
        guard let pipelineName = value.pipelineName else {
            return nil
        }
        return "/pipelines/\(pipelineName.urlPercentEncoding())"
    }
}

extension GetDatasetContentInput {

    static func urlPathProvider(_ value: GetDatasetContentInput) -> Swift.String? {
        guard let datasetName = value.datasetName else {
            return nil
        }
        return "/datasets/\(datasetName.urlPercentEncoding())/content"
    }
}

extension GetDatasetContentInput {

    static func queryItemProvider(_ value: GetDatasetContentInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let versionId = value.versionId {
            let versionIdQueryItem = Smithy.URIQueryItem(name: "versionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
            items.append(versionIdQueryItem)
        }
        return items
    }
}

extension ListChannelsInput {

    static func urlPathProvider(_ value: ListChannelsInput) -> Swift.String? {
        return "/channels"
    }
}

extension ListChannelsInput {

    static func queryItemProvider(_ value: ListChannelsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListDatasetContentsInput {

    static func urlPathProvider(_ value: ListDatasetContentsInput) -> Swift.String? {
        guard let datasetName = value.datasetName else {
            return nil
        }
        return "/datasets/\(datasetName.urlPercentEncoding())/contents"
    }
}

extension ListDatasetContentsInput {

    static func queryItemProvider(_ value: ListDatasetContentsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let scheduledOnOrAfter = value.scheduledOnOrAfter {
            let scheduledOnOrAfterQueryItem = Smithy.URIQueryItem(name: "scheduledOnOrAfter".urlPercentEncoding(), value: Swift.String(SmithyTimestamps.TimestampFormatter(format: .dateTime).string(from: scheduledOnOrAfter)).urlPercentEncoding())
            items.append(scheduledOnOrAfterQueryItem)
        }
        if let scheduledBefore = value.scheduledBefore {
            let scheduledBeforeQueryItem = Smithy.URIQueryItem(name: "scheduledBefore".urlPercentEncoding(), value: Swift.String(SmithyTimestamps.TimestampFormatter(format: .dateTime).string(from: scheduledBefore)).urlPercentEncoding())
            items.append(scheduledBeforeQueryItem)
        }
        return items
    }
}

extension ListDatasetsInput {

    static func urlPathProvider(_ value: ListDatasetsInput) -> Swift.String? {
        return "/datasets"
    }
}

extension ListDatasetsInput {

    static func queryItemProvider(_ value: ListDatasetsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListDatastoresInput {

    static func urlPathProvider(_ value: ListDatastoresInput) -> Swift.String? {
        return "/datastores"
    }
}

extension ListDatastoresInput {

    static func queryItemProvider(_ value: ListDatastoresInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListPipelinesInput {

    static func urlPathProvider(_ value: ListPipelinesInput) -> Swift.String? {
        return "/pipelines"
    }
}

extension ListPipelinesInput {

    static func queryItemProvider(_ value: ListPipelinesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        return "/tags"
    }
}

extension ListTagsForResourceInput {

    static func queryItemProvider(_ value: ListTagsForResourceInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let resourceArn = value.resourceArn else {
            let message = "Creating a URL Query Item failed. resourceArn is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let resourceArnQueryItem = Smithy.URIQueryItem(name: "resourceArn".urlPercentEncoding(), value: Swift.String(resourceArn).urlPercentEncoding())
        items.append(resourceArnQueryItem)
        return items
    }
}

extension PutLoggingOptionsInput {

    static func urlPathProvider(_ value: PutLoggingOptionsInput) -> Swift.String? {
        return "/logging"
    }
}

extension RunPipelineActivityInput {

    static func urlPathProvider(_ value: RunPipelineActivityInput) -> Swift.String? {
        return "/pipelineactivities/run"
    }
}

extension SampleChannelDataInput {

    static func urlPathProvider(_ value: SampleChannelDataInput) -> Swift.String? {
        guard let channelName = value.channelName else {
            return nil
        }
        return "/channels/\(channelName.urlPercentEncoding())/sample"
    }
}

extension SampleChannelDataInput {

    static func queryItemProvider(_ value: SampleChannelDataInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let maxMessages = value.maxMessages {
            let maxMessagesQueryItem = Smithy.URIQueryItem(name: "maxMessages".urlPercentEncoding(), value: Swift.String(maxMessages).urlPercentEncoding())
            items.append(maxMessagesQueryItem)
        }
        if let startTime = value.startTime {
            let startTimeQueryItem = Smithy.URIQueryItem(name: "startTime".urlPercentEncoding(), value: Swift.String(SmithyTimestamps.TimestampFormatter(format: .dateTime).string(from: startTime)).urlPercentEncoding())
            items.append(startTimeQueryItem)
        }
        if let endTime = value.endTime {
            let endTimeQueryItem = Smithy.URIQueryItem(name: "endTime".urlPercentEncoding(), value: Swift.String(SmithyTimestamps.TimestampFormatter(format: .dateTime).string(from: endTime)).urlPercentEncoding())
            items.append(endTimeQueryItem)
        }
        return items
    }
}

extension StartPipelineReprocessingInput {

    static func urlPathProvider(_ value: StartPipelineReprocessingInput) -> Swift.String? {
        guard let pipelineName = value.pipelineName else {
            return nil
        }
        return "/pipelines/\(pipelineName.urlPercentEncoding())/reprocessing"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        return "/tags"
    }
}

extension TagResourceInput {

    static func queryItemProvider(_ value: TagResourceInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let resourceArn = value.resourceArn else {
            let message = "Creating a URL Query Item failed. resourceArn is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let resourceArnQueryItem = Smithy.URIQueryItem(name: "resourceArn".urlPercentEncoding(), value: Swift.String(resourceArn).urlPercentEncoding())
        items.append(resourceArnQueryItem)
        return items
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        return "/tags"
    }
}

extension UntagResourceInput {

    static func queryItemProvider(_ value: UntagResourceInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let tagKeys = value.tagKeys else {
            let message = "Creating a URL Query Item failed. tagKeys is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        tagKeys.forEach { queryItemValue in
            let queryItem = Smithy.URIQueryItem(name: "tagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
            items.append(queryItem)
        }
        guard let resourceArn = value.resourceArn else {
            let message = "Creating a URL Query Item failed. resourceArn is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let resourceArnQueryItem = Smithy.URIQueryItem(name: "resourceArn".urlPercentEncoding(), value: Swift.String(resourceArn).urlPercentEncoding())
        items.append(resourceArnQueryItem)
        return items
    }
}

extension UpdateChannelInput {

    static func urlPathProvider(_ value: UpdateChannelInput) -> Swift.String? {
        guard let channelName = value.channelName else {
            return nil
        }
        return "/channels/\(channelName.urlPercentEncoding())"
    }
}

extension UpdateDatasetInput {

    static func urlPathProvider(_ value: UpdateDatasetInput) -> Swift.String? {
        guard let datasetName = value.datasetName else {
            return nil
        }
        return "/datasets/\(datasetName.urlPercentEncoding())"
    }
}

extension UpdateDatastoreInput {

    static func urlPathProvider(_ value: UpdateDatastoreInput) -> Swift.String? {
        guard let datastoreName = value.datastoreName else {
            return nil
        }
        return "/datastores/\(datastoreName.urlPercentEncoding())"
    }
}

extension UpdatePipelineInput {

    static func urlPathProvider(_ value: UpdatePipelineInput) -> Swift.String? {
        guard let pipelineName = value.pipelineName else {
            return nil
        }
        return "/pipelines/\(pipelineName.urlPercentEncoding())"
    }
}

extension BatchPutMessageInput {

    static func write(value: BatchPutMessageInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["channelName"].write(value.channelName)
        try writer["messages"].writeList(value.messages, memberWritingClosure: IoTAnalyticsClientTypes.Message.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateChannelInput {

    static func write(value: CreateChannelInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["channelName"].write(value.channelName)
        try writer["channelStorage"].write(value.channelStorage, with: IoTAnalyticsClientTypes.ChannelStorage.write(value:to:))
        try writer["retentionPeriod"].write(value.retentionPeriod, with: IoTAnalyticsClientTypes.RetentionPeriod.write(value:to:))
        try writer["tags"].writeList(value.tags, memberWritingClosure: IoTAnalyticsClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateDatasetInput {

    static func write(value: CreateDatasetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["actions"].writeList(value.actions, memberWritingClosure: IoTAnalyticsClientTypes.DatasetAction.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["contentDeliveryRules"].writeList(value.contentDeliveryRules, memberWritingClosure: IoTAnalyticsClientTypes.DatasetContentDeliveryRule.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["datasetName"].write(value.datasetName)
        try writer["lateDataRules"].writeList(value.lateDataRules, memberWritingClosure: IoTAnalyticsClientTypes.LateDataRule.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["retentionPeriod"].write(value.retentionPeriod, with: IoTAnalyticsClientTypes.RetentionPeriod.write(value:to:))
        try writer["tags"].writeList(value.tags, memberWritingClosure: IoTAnalyticsClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["triggers"].writeList(value.triggers, memberWritingClosure: IoTAnalyticsClientTypes.DatasetTrigger.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["versioningConfiguration"].write(value.versioningConfiguration, with: IoTAnalyticsClientTypes.VersioningConfiguration.write(value:to:))
    }
}

extension CreateDatasetContentInput {

    static func write(value: CreateDatasetContentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["versionId"].write(value.versionId)
    }
}

extension CreateDatastoreInput {

    static func write(value: CreateDatastoreInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["datastoreName"].write(value.datastoreName)
        try writer["datastorePartitions"].write(value.datastorePartitions, with: IoTAnalyticsClientTypes.DatastorePartitions.write(value:to:))
        try writer["datastoreStorage"].write(value.datastoreStorage, with: IoTAnalyticsClientTypes.DatastoreStorage.write(value:to:))
        try writer["fileFormatConfiguration"].write(value.fileFormatConfiguration, with: IoTAnalyticsClientTypes.FileFormatConfiguration.write(value:to:))
        try writer["retentionPeriod"].write(value.retentionPeriod, with: IoTAnalyticsClientTypes.RetentionPeriod.write(value:to:))
        try writer["tags"].writeList(value.tags, memberWritingClosure: IoTAnalyticsClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreatePipelineInput {

    static func write(value: CreatePipelineInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["pipelineActivities"].writeList(value.pipelineActivities, memberWritingClosure: IoTAnalyticsClientTypes.PipelineActivity.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["pipelineName"].write(value.pipelineName)
        try writer["tags"].writeList(value.tags, memberWritingClosure: IoTAnalyticsClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension PutLoggingOptionsInput {

    static func write(value: PutLoggingOptionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["loggingOptions"].write(value.loggingOptions, with: IoTAnalyticsClientTypes.LoggingOptions.write(value:to:))
    }
}

extension RunPipelineActivityInput {

    static func write(value: RunPipelineActivityInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["payloads"].writeList(value.payloads, memberWritingClosure: SmithyReadWrite.WritingClosures.writeData(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["pipelineActivity"].write(value.pipelineActivity, with: IoTAnalyticsClientTypes.PipelineActivity.write(value:to:))
    }
}

extension StartPipelineReprocessingInput {

    static func write(value: StartPipelineReprocessingInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["channelMessages"].write(value.channelMessages, with: IoTAnalyticsClientTypes.ChannelMessages.write(value:to:))
        try writer["endTime"].writeTimestamp(value.endTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["startTime"].writeTimestamp(value.startTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["tags"].writeList(value.tags, memberWritingClosure: IoTAnalyticsClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateChannelInput {

    static func write(value: UpdateChannelInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["channelStorage"].write(value.channelStorage, with: IoTAnalyticsClientTypes.ChannelStorage.write(value:to:))
        try writer["retentionPeriod"].write(value.retentionPeriod, with: IoTAnalyticsClientTypes.RetentionPeriod.write(value:to:))
    }
}

extension UpdateDatasetInput {

    static func write(value: UpdateDatasetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["actions"].writeList(value.actions, memberWritingClosure: IoTAnalyticsClientTypes.DatasetAction.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["contentDeliveryRules"].writeList(value.contentDeliveryRules, memberWritingClosure: IoTAnalyticsClientTypes.DatasetContentDeliveryRule.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["lateDataRules"].writeList(value.lateDataRules, memberWritingClosure: IoTAnalyticsClientTypes.LateDataRule.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["retentionPeriod"].write(value.retentionPeriod, with: IoTAnalyticsClientTypes.RetentionPeriod.write(value:to:))
        try writer["triggers"].writeList(value.triggers, memberWritingClosure: IoTAnalyticsClientTypes.DatasetTrigger.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["versioningConfiguration"].write(value.versioningConfiguration, with: IoTAnalyticsClientTypes.VersioningConfiguration.write(value:to:))
    }
}

extension UpdateDatastoreInput {

    static func write(value: UpdateDatastoreInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["datastoreStorage"].write(value.datastoreStorage, with: IoTAnalyticsClientTypes.DatastoreStorage.write(value:to:))
        try writer["fileFormatConfiguration"].write(value.fileFormatConfiguration, with: IoTAnalyticsClientTypes.FileFormatConfiguration.write(value:to:))
        try writer["retentionPeriod"].write(value.retentionPeriod, with: IoTAnalyticsClientTypes.RetentionPeriod.write(value:to:))
    }
}

extension UpdatePipelineInput {

    static func write(value: UpdatePipelineInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["pipelineActivities"].writeList(value.pipelineActivities, memberWritingClosure: IoTAnalyticsClientTypes.PipelineActivity.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension BatchPutMessageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchPutMessageOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchPutMessageOutput()
        value.batchPutMessageErrorEntries = try reader["batchPutMessageErrorEntries"].readListIfPresent(memberReadingClosure: IoTAnalyticsClientTypes.BatchPutMessageErrorEntry.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CancelPipelineReprocessingOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CancelPipelineReprocessingOutput {
        return CancelPipelineReprocessingOutput()
    }
}

extension CreateChannelOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateChannelOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateChannelOutput()
        value.channelArn = try reader["channelArn"].readIfPresent()
        value.channelName = try reader["channelName"].readIfPresent()
        value.retentionPeriod = try reader["retentionPeriod"].readIfPresent(with: IoTAnalyticsClientTypes.RetentionPeriod.read(from:))
        return value
    }
}

extension CreateDatasetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDatasetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateDatasetOutput()
        value.datasetArn = try reader["datasetArn"].readIfPresent()
        value.datasetName = try reader["datasetName"].readIfPresent()
        value.retentionPeriod = try reader["retentionPeriod"].readIfPresent(with: IoTAnalyticsClientTypes.RetentionPeriod.read(from:))
        return value
    }
}

extension CreateDatasetContentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDatasetContentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateDatasetContentOutput()
        value.versionId = try reader["versionId"].readIfPresent()
        return value
    }
}

extension CreateDatastoreOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDatastoreOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateDatastoreOutput()
        value.datastoreArn = try reader["datastoreArn"].readIfPresent()
        value.datastoreName = try reader["datastoreName"].readIfPresent()
        value.retentionPeriod = try reader["retentionPeriod"].readIfPresent(with: IoTAnalyticsClientTypes.RetentionPeriod.read(from:))
        return value
    }
}

extension CreatePipelineOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreatePipelineOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreatePipelineOutput()
        value.pipelineArn = try reader["pipelineArn"].readIfPresent()
        value.pipelineName = try reader["pipelineName"].readIfPresent()
        return value
    }
}

extension DeleteChannelOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteChannelOutput {
        return DeleteChannelOutput()
    }
}

extension DeleteDatasetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteDatasetOutput {
        return DeleteDatasetOutput()
    }
}

extension DeleteDatasetContentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteDatasetContentOutput {
        return DeleteDatasetContentOutput()
    }
}

extension DeleteDatastoreOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteDatastoreOutput {
        return DeleteDatastoreOutput()
    }
}

extension DeletePipelineOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeletePipelineOutput {
        return DeletePipelineOutput()
    }
}

extension DescribeChannelOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeChannelOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeChannelOutput()
        value.channel = try reader["channel"].readIfPresent(with: IoTAnalyticsClientTypes.Channel.read(from:))
        value.statistics = try reader["statistics"].readIfPresent(with: IoTAnalyticsClientTypes.ChannelStatistics.read(from:))
        return value
    }
}

extension DescribeDatasetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeDatasetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeDatasetOutput()
        value.dataset = try reader["dataset"].readIfPresent(with: IoTAnalyticsClientTypes.Dataset.read(from:))
        return value
    }
}

extension DescribeDatastoreOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeDatastoreOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeDatastoreOutput()
        value.datastore = try reader["datastore"].readIfPresent(with: IoTAnalyticsClientTypes.Datastore.read(from:))
        value.statistics = try reader["statistics"].readIfPresent(with: IoTAnalyticsClientTypes.DatastoreStatistics.read(from:))
        return value
    }
}

extension DescribeLoggingOptionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeLoggingOptionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeLoggingOptionsOutput()
        value.loggingOptions = try reader["loggingOptions"].readIfPresent(with: IoTAnalyticsClientTypes.LoggingOptions.read(from:))
        return value
    }
}

extension DescribePipelineOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribePipelineOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribePipelineOutput()
        value.pipeline = try reader["pipeline"].readIfPresent(with: IoTAnalyticsClientTypes.Pipeline.read(from:))
        return value
    }
}

extension GetDatasetContentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDatasetContentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDatasetContentOutput()
        value.entries = try reader["entries"].readListIfPresent(memberReadingClosure: IoTAnalyticsClientTypes.DatasetEntry.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.status = try reader["status"].readIfPresent(with: IoTAnalyticsClientTypes.DatasetContentStatus.read(from:))
        value.timestamp = try reader["timestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension ListChannelsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListChannelsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListChannelsOutput()
        value.channelSummaries = try reader["channelSummaries"].readListIfPresent(memberReadingClosure: IoTAnalyticsClientTypes.ChannelSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListDatasetContentsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDatasetContentsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDatasetContentsOutput()
        value.datasetContentSummaries = try reader["datasetContentSummaries"].readListIfPresent(memberReadingClosure: IoTAnalyticsClientTypes.DatasetContentSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListDatasetsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDatasetsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDatasetsOutput()
        value.datasetSummaries = try reader["datasetSummaries"].readListIfPresent(memberReadingClosure: IoTAnalyticsClientTypes.DatasetSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListDatastoresOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDatastoresOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDatastoresOutput()
        value.datastoreSummaries = try reader["datastoreSummaries"].readListIfPresent(memberReadingClosure: IoTAnalyticsClientTypes.DatastoreSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListPipelinesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListPipelinesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListPipelinesOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.pipelineSummaries = try reader["pipelineSummaries"].readListIfPresent(memberReadingClosure: IoTAnalyticsClientTypes.PipelineSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: IoTAnalyticsClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PutLoggingOptionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutLoggingOptionsOutput {
        return PutLoggingOptionsOutput()
    }
}

extension RunPipelineActivityOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RunPipelineActivityOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RunPipelineActivityOutput()
        value.logResult = try reader["logResult"].readIfPresent()
        value.payloads = try reader["payloads"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readData(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SampleChannelDataOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SampleChannelDataOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = SampleChannelDataOutput()
        value.payloads = try reader["payloads"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readData(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension StartPipelineReprocessingOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartPipelineReprocessingOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartPipelineReprocessingOutput()
        value.reprocessingId = try reader["reprocessingId"].readIfPresent()
        return value
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateChannelOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateChannelOutput {
        return UpdateChannelOutput()
    }
}

extension UpdateDatasetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateDatasetOutput {
        return UpdateDatasetOutput()
    }
}

extension UpdateDatastoreOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateDatastoreOutput {
        return UpdateDatastoreOutput()
    }
}

extension UpdatePipelineOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdatePipelineOutput {
        return UpdatePipelineOutput()
    }
}

enum BatchPutMessageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CancelPipelineReprocessingOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateChannelOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceAlreadyExistsException": return try ResourceAlreadyExistsException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateDatasetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceAlreadyExistsException": return try ResourceAlreadyExistsException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateDatasetContentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateDatastoreOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceAlreadyExistsException": return try ResourceAlreadyExistsException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreatePipelineOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceAlreadyExistsException": return try ResourceAlreadyExistsException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteChannelOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteDatasetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteDatasetContentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteDatastoreOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeletePipelineOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeChannelOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeDatasetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeDatastoreOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeLoggingOptionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribePipelineOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDatasetContentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListChannelsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDatasetContentsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDatasetsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDatastoresOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListPipelinesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutLoggingOptionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RunPipelineActivityOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SampleChannelDataOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartPipelineReprocessingOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceAlreadyExistsException": return try ResourceAlreadyExistsException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateChannelOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateDatasetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateDatastoreOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdatePipelineOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailureException": return try InternalFailureException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceUnavailableException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ServiceUnavailableException {
        let reader = baseError.errorBodyReader
        var value = ServiceUnavailableException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ThrottlingException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ThrottlingException {
        let reader = baseError.errorBodyReader
        var value = ThrottlingException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidRequestException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InvalidRequestException {
        let reader = baseError.errorBodyReader
        var value = InvalidRequestException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalFailureException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalFailureException {
        let reader = baseError.errorBodyReader
        var value = InternalFailureException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension LimitExceededException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> LimitExceededException {
        let reader = baseError.errorBodyReader
        var value = LimitExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceAlreadyExistsException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceAlreadyExistsException {
        let reader = baseError.errorBodyReader
        var value = ResourceAlreadyExistsException()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.resourceArn = try reader["resourceArn"].readIfPresent()
        value.properties.resourceId = try reader["resourceId"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension IoTAnalyticsClientTypes.BatchPutMessageErrorEntry {

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.BatchPutMessageErrorEntry {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.BatchPutMessageErrorEntry()
        value.messageId = try reader["messageId"].readIfPresent()
        value.errorCode = try reader["errorCode"].readIfPresent()
        value.errorMessage = try reader["errorMessage"].readIfPresent()
        return value
    }
}

extension IoTAnalyticsClientTypes.RetentionPeriod {

    static func write(value: IoTAnalyticsClientTypes.RetentionPeriod?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["numberOfDays"].write(value.numberOfDays)
        try writer["unlimited"].write(value.unlimited)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.RetentionPeriod {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.RetentionPeriod()
        value.unlimited = try reader["unlimited"].readIfPresent() ?? false
        value.numberOfDays = try reader["numberOfDays"].readIfPresent()
        return value
    }
}

extension IoTAnalyticsClientTypes.Channel {

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.Channel {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.Channel()
        value.name = try reader["name"].readIfPresent()
        value.storage = try reader["storage"].readIfPresent(with: IoTAnalyticsClientTypes.ChannelStorage.read(from:))
        value.arn = try reader["arn"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.retentionPeriod = try reader["retentionPeriod"].readIfPresent(with: IoTAnalyticsClientTypes.RetentionPeriod.read(from:))
        value.creationTime = try reader["creationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdateTime = try reader["lastUpdateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastMessageArrivalTime = try reader["lastMessageArrivalTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension IoTAnalyticsClientTypes.ChannelStorage {

    static func write(value: IoTAnalyticsClientTypes.ChannelStorage?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["customerManagedS3"].write(value.customerManagedS3, with: IoTAnalyticsClientTypes.CustomerManagedChannelS3Storage.write(value:to:))
        try writer["serviceManagedS3"].write(value.serviceManagedS3, with: IoTAnalyticsClientTypes.ServiceManagedChannelS3Storage.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.ChannelStorage {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.ChannelStorage()
        value.serviceManagedS3 = try reader["serviceManagedS3"].readIfPresent(with: IoTAnalyticsClientTypes.ServiceManagedChannelS3Storage.read(from:))
        value.customerManagedS3 = try reader["customerManagedS3"].readIfPresent(with: IoTAnalyticsClientTypes.CustomerManagedChannelS3Storage.read(from:))
        return value
    }
}

extension IoTAnalyticsClientTypes.CustomerManagedChannelS3Storage {

    static func write(value: IoTAnalyticsClientTypes.CustomerManagedChannelS3Storage?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bucket"].write(value.bucket)
        try writer["keyPrefix"].write(value.keyPrefix)
        try writer["roleArn"].write(value.roleArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.CustomerManagedChannelS3Storage {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.CustomerManagedChannelS3Storage()
        value.bucket = try reader["bucket"].readIfPresent() ?? ""
        value.keyPrefix = try reader["keyPrefix"].readIfPresent()
        value.roleArn = try reader["roleArn"].readIfPresent() ?? ""
        return value
    }
}

extension IoTAnalyticsClientTypes.ServiceManagedChannelS3Storage {

    static func write(value: IoTAnalyticsClientTypes.ServiceManagedChannelS3Storage?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.ServiceManagedChannelS3Storage {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return IoTAnalyticsClientTypes.ServiceManagedChannelS3Storage()
    }
}

extension IoTAnalyticsClientTypes.ChannelStatistics {

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.ChannelStatistics {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.ChannelStatistics()
        value.size = try reader["size"].readIfPresent(with: IoTAnalyticsClientTypes.EstimatedResourceSize.read(from:))
        return value
    }
}

extension IoTAnalyticsClientTypes.EstimatedResourceSize {

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.EstimatedResourceSize {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.EstimatedResourceSize()
        value.estimatedSizeInBytes = try reader["estimatedSizeInBytes"].readIfPresent()
        value.estimatedOn = try reader["estimatedOn"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension IoTAnalyticsClientTypes.Dataset {

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.Dataset {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.Dataset()
        value.name = try reader["name"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.actions = try reader["actions"].readListIfPresent(memberReadingClosure: IoTAnalyticsClientTypes.DatasetAction.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.triggers = try reader["triggers"].readListIfPresent(memberReadingClosure: IoTAnalyticsClientTypes.DatasetTrigger.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.contentDeliveryRules = try reader["contentDeliveryRules"].readListIfPresent(memberReadingClosure: IoTAnalyticsClientTypes.DatasetContentDeliveryRule.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.status = try reader["status"].readIfPresent()
        value.creationTime = try reader["creationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdateTime = try reader["lastUpdateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.retentionPeriod = try reader["retentionPeriod"].readIfPresent(with: IoTAnalyticsClientTypes.RetentionPeriod.read(from:))
        value.versioningConfiguration = try reader["versioningConfiguration"].readIfPresent(with: IoTAnalyticsClientTypes.VersioningConfiguration.read(from:))
        value.lateDataRules = try reader["lateDataRules"].readListIfPresent(memberReadingClosure: IoTAnalyticsClientTypes.LateDataRule.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension IoTAnalyticsClientTypes.LateDataRule {

    static func write(value: IoTAnalyticsClientTypes.LateDataRule?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ruleConfiguration"].write(value.ruleConfiguration, with: IoTAnalyticsClientTypes.LateDataRuleConfiguration.write(value:to:))
        try writer["ruleName"].write(value.ruleName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.LateDataRule {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.LateDataRule()
        value.ruleName = try reader["ruleName"].readIfPresent()
        value.ruleConfiguration = try reader["ruleConfiguration"].readIfPresent(with: IoTAnalyticsClientTypes.LateDataRuleConfiguration.read(from:))
        return value
    }
}

extension IoTAnalyticsClientTypes.LateDataRuleConfiguration {

    static func write(value: IoTAnalyticsClientTypes.LateDataRuleConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["deltaTimeSessionWindowConfiguration"].write(value.deltaTimeSessionWindowConfiguration, with: IoTAnalyticsClientTypes.DeltaTimeSessionWindowConfiguration.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.LateDataRuleConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.LateDataRuleConfiguration()
        value.deltaTimeSessionWindowConfiguration = try reader["deltaTimeSessionWindowConfiguration"].readIfPresent(with: IoTAnalyticsClientTypes.DeltaTimeSessionWindowConfiguration.read(from:))
        return value
    }
}

extension IoTAnalyticsClientTypes.DeltaTimeSessionWindowConfiguration {

    static func write(value: IoTAnalyticsClientTypes.DeltaTimeSessionWindowConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["timeoutInMinutes"].write(value.timeoutInMinutes)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.DeltaTimeSessionWindowConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.DeltaTimeSessionWindowConfiguration()
        value.timeoutInMinutes = try reader["timeoutInMinutes"].readIfPresent() ?? 0
        return value
    }
}

extension IoTAnalyticsClientTypes.VersioningConfiguration {

    static func write(value: IoTAnalyticsClientTypes.VersioningConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxVersions"].write(value.maxVersions)
        try writer["unlimited"].write(value.unlimited)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.VersioningConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.VersioningConfiguration()
        value.unlimited = try reader["unlimited"].readIfPresent() ?? false
        value.maxVersions = try reader["maxVersions"].readIfPresent()
        return value
    }
}

extension IoTAnalyticsClientTypes.DatasetContentDeliveryRule {

    static func write(value: IoTAnalyticsClientTypes.DatasetContentDeliveryRule?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["destination"].write(value.destination, with: IoTAnalyticsClientTypes.DatasetContentDeliveryDestination.write(value:to:))
        try writer["entryName"].write(value.entryName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.DatasetContentDeliveryRule {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.DatasetContentDeliveryRule()
        value.entryName = try reader["entryName"].readIfPresent()
        value.destination = try reader["destination"].readIfPresent(with: IoTAnalyticsClientTypes.DatasetContentDeliveryDestination.read(from:))
        return value
    }
}

extension IoTAnalyticsClientTypes.DatasetContentDeliveryDestination {

    static func write(value: IoTAnalyticsClientTypes.DatasetContentDeliveryDestination?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["iotEventsDestinationConfiguration"].write(value.iotEventsDestinationConfiguration, with: IoTAnalyticsClientTypes.IotEventsDestinationConfiguration.write(value:to:))
        try writer["s3DestinationConfiguration"].write(value.s3DestinationConfiguration, with: IoTAnalyticsClientTypes.S3DestinationConfiguration.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.DatasetContentDeliveryDestination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.DatasetContentDeliveryDestination()
        value.iotEventsDestinationConfiguration = try reader["iotEventsDestinationConfiguration"].readIfPresent(with: IoTAnalyticsClientTypes.IotEventsDestinationConfiguration.read(from:))
        value.s3DestinationConfiguration = try reader["s3DestinationConfiguration"].readIfPresent(with: IoTAnalyticsClientTypes.S3DestinationConfiguration.read(from:))
        return value
    }
}

extension IoTAnalyticsClientTypes.S3DestinationConfiguration {

    static func write(value: IoTAnalyticsClientTypes.S3DestinationConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bucket"].write(value.bucket)
        try writer["glueConfiguration"].write(value.glueConfiguration, with: IoTAnalyticsClientTypes.GlueConfiguration.write(value:to:))
        try writer["key"].write(value.key)
        try writer["roleArn"].write(value.roleArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.S3DestinationConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.S3DestinationConfiguration()
        value.bucket = try reader["bucket"].readIfPresent() ?? ""
        value.key = try reader["key"].readIfPresent() ?? ""
        value.glueConfiguration = try reader["glueConfiguration"].readIfPresent(with: IoTAnalyticsClientTypes.GlueConfiguration.read(from:))
        value.roleArn = try reader["roleArn"].readIfPresent() ?? ""
        return value
    }
}

extension IoTAnalyticsClientTypes.GlueConfiguration {

    static func write(value: IoTAnalyticsClientTypes.GlueConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["databaseName"].write(value.databaseName)
        try writer["tableName"].write(value.tableName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.GlueConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.GlueConfiguration()
        value.tableName = try reader["tableName"].readIfPresent() ?? ""
        value.databaseName = try reader["databaseName"].readIfPresent() ?? ""
        return value
    }
}

extension IoTAnalyticsClientTypes.IotEventsDestinationConfiguration {

    static func write(value: IoTAnalyticsClientTypes.IotEventsDestinationConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["inputName"].write(value.inputName)
        try writer["roleArn"].write(value.roleArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.IotEventsDestinationConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.IotEventsDestinationConfiguration()
        value.inputName = try reader["inputName"].readIfPresent() ?? ""
        value.roleArn = try reader["roleArn"].readIfPresent() ?? ""
        return value
    }
}

extension IoTAnalyticsClientTypes.DatasetTrigger {

    static func write(value: IoTAnalyticsClientTypes.DatasetTrigger?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["dataset"].write(value.dataset, with: IoTAnalyticsClientTypes.TriggeringDataset.write(value:to:))
        try writer["schedule"].write(value.schedule, with: IoTAnalyticsClientTypes.Schedule.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.DatasetTrigger {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.DatasetTrigger()
        value.schedule = try reader["schedule"].readIfPresent(with: IoTAnalyticsClientTypes.Schedule.read(from:))
        value.dataset = try reader["dataset"].readIfPresent(with: IoTAnalyticsClientTypes.TriggeringDataset.read(from:))
        return value
    }
}

extension IoTAnalyticsClientTypes.TriggeringDataset {

    static func write(value: IoTAnalyticsClientTypes.TriggeringDataset?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.TriggeringDataset {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.TriggeringDataset()
        value.name = try reader["name"].readIfPresent() ?? ""
        return value
    }
}

extension IoTAnalyticsClientTypes.Schedule {

    static func write(value: IoTAnalyticsClientTypes.Schedule?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["expression"].write(value.expression)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.Schedule {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.Schedule()
        value.expression = try reader["expression"].readIfPresent()
        return value
    }
}

extension IoTAnalyticsClientTypes.DatasetAction {

    static func write(value: IoTAnalyticsClientTypes.DatasetAction?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["actionName"].write(value.actionName)
        try writer["containerAction"].write(value.containerAction, with: IoTAnalyticsClientTypes.ContainerDatasetAction.write(value:to:))
        try writer["queryAction"].write(value.queryAction, with: IoTAnalyticsClientTypes.SqlQueryDatasetAction.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.DatasetAction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.DatasetAction()
        value.actionName = try reader["actionName"].readIfPresent()
        value.queryAction = try reader["queryAction"].readIfPresent(with: IoTAnalyticsClientTypes.SqlQueryDatasetAction.read(from:))
        value.containerAction = try reader["containerAction"].readIfPresent(with: IoTAnalyticsClientTypes.ContainerDatasetAction.read(from:))
        return value
    }
}

extension IoTAnalyticsClientTypes.ContainerDatasetAction {

    static func write(value: IoTAnalyticsClientTypes.ContainerDatasetAction?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["executionRoleArn"].write(value.executionRoleArn)
        try writer["image"].write(value.image)
        try writer["resourceConfiguration"].write(value.resourceConfiguration, with: IoTAnalyticsClientTypes.ResourceConfiguration.write(value:to:))
        try writer["variables"].writeList(value.variables, memberWritingClosure: IoTAnalyticsClientTypes.Variable.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.ContainerDatasetAction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.ContainerDatasetAction()
        value.image = try reader["image"].readIfPresent() ?? ""
        value.executionRoleArn = try reader["executionRoleArn"].readIfPresent() ?? ""
        value.resourceConfiguration = try reader["resourceConfiguration"].readIfPresent(with: IoTAnalyticsClientTypes.ResourceConfiguration.read(from:))
        value.variables = try reader["variables"].readListIfPresent(memberReadingClosure: IoTAnalyticsClientTypes.Variable.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension IoTAnalyticsClientTypes.Variable {

    static func write(value: IoTAnalyticsClientTypes.Variable?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["datasetContentVersionValue"].write(value.datasetContentVersionValue, with: IoTAnalyticsClientTypes.DatasetContentVersionValue.write(value:to:))
        try writer["doubleValue"].write(value.doubleValue)
        try writer["name"].write(value.name)
        try writer["outputFileUriValue"].write(value.outputFileUriValue, with: IoTAnalyticsClientTypes.OutputFileUriValue.write(value:to:))
        try writer["stringValue"].write(value.stringValue)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.Variable {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.Variable()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.stringValue = try reader["stringValue"].readIfPresent()
        value.doubleValue = try reader["doubleValue"].readIfPresent()
        value.datasetContentVersionValue = try reader["datasetContentVersionValue"].readIfPresent(with: IoTAnalyticsClientTypes.DatasetContentVersionValue.read(from:))
        value.outputFileUriValue = try reader["outputFileUriValue"].readIfPresent(with: IoTAnalyticsClientTypes.OutputFileUriValue.read(from:))
        return value
    }
}

extension IoTAnalyticsClientTypes.OutputFileUriValue {

    static func write(value: IoTAnalyticsClientTypes.OutputFileUriValue?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["fileName"].write(value.fileName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.OutputFileUriValue {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.OutputFileUriValue()
        value.fileName = try reader["fileName"].readIfPresent() ?? ""
        return value
    }
}

extension IoTAnalyticsClientTypes.DatasetContentVersionValue {

    static func write(value: IoTAnalyticsClientTypes.DatasetContentVersionValue?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["datasetName"].write(value.datasetName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.DatasetContentVersionValue {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.DatasetContentVersionValue()
        value.datasetName = try reader["datasetName"].readIfPresent() ?? ""
        return value
    }
}

extension IoTAnalyticsClientTypes.ResourceConfiguration {

    static func write(value: IoTAnalyticsClientTypes.ResourceConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["computeType"].write(value.computeType)
        try writer["volumeSizeInGB"].write(value.volumeSizeInGB)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.ResourceConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.ResourceConfiguration()
        value.computeType = try reader["computeType"].readIfPresent() ?? .sdkUnknown("")
        value.volumeSizeInGB = try reader["volumeSizeInGB"].readIfPresent() ?? 0
        return value
    }
}

extension IoTAnalyticsClientTypes.SqlQueryDatasetAction {

    static func write(value: IoTAnalyticsClientTypes.SqlQueryDatasetAction?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["filters"].writeList(value.filters, memberWritingClosure: IoTAnalyticsClientTypes.QueryFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["sqlQuery"].write(value.sqlQuery)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.SqlQueryDatasetAction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.SqlQueryDatasetAction()
        value.sqlQuery = try reader["sqlQuery"].readIfPresent() ?? ""
        value.filters = try reader["filters"].readListIfPresent(memberReadingClosure: IoTAnalyticsClientTypes.QueryFilter.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension IoTAnalyticsClientTypes.QueryFilter {

    static func write(value: IoTAnalyticsClientTypes.QueryFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["deltaTime"].write(value.deltaTime, with: IoTAnalyticsClientTypes.DeltaTime.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.QueryFilter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.QueryFilter()
        value.deltaTime = try reader["deltaTime"].readIfPresent(with: IoTAnalyticsClientTypes.DeltaTime.read(from:))
        return value
    }
}

extension IoTAnalyticsClientTypes.DeltaTime {

    static func write(value: IoTAnalyticsClientTypes.DeltaTime?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["offsetSeconds"].write(value.offsetSeconds)
        try writer["timeExpression"].write(value.timeExpression)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.DeltaTime {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.DeltaTime()
        value.offsetSeconds = try reader["offsetSeconds"].readIfPresent() ?? 0
        value.timeExpression = try reader["timeExpression"].readIfPresent() ?? ""
        return value
    }
}

extension IoTAnalyticsClientTypes.Datastore {

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.Datastore {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.Datastore()
        value.name = try reader["name"].readIfPresent()
        value.storage = try reader["storage"].readIfPresent(with: IoTAnalyticsClientTypes.DatastoreStorage.read(from:))
        value.arn = try reader["arn"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.retentionPeriod = try reader["retentionPeriod"].readIfPresent(with: IoTAnalyticsClientTypes.RetentionPeriod.read(from:))
        value.creationTime = try reader["creationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdateTime = try reader["lastUpdateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastMessageArrivalTime = try reader["lastMessageArrivalTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.fileFormatConfiguration = try reader["fileFormatConfiguration"].readIfPresent(with: IoTAnalyticsClientTypes.FileFormatConfiguration.read(from:))
        value.datastorePartitions = try reader["datastorePartitions"].readIfPresent(with: IoTAnalyticsClientTypes.DatastorePartitions.read(from:))
        return value
    }
}

extension IoTAnalyticsClientTypes.DatastorePartitions {

    static func write(value: IoTAnalyticsClientTypes.DatastorePartitions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["partitions"].writeList(value.partitions, memberWritingClosure: IoTAnalyticsClientTypes.DatastorePartition.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.DatastorePartitions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.DatastorePartitions()
        value.partitions = try reader["partitions"].readListIfPresent(memberReadingClosure: IoTAnalyticsClientTypes.DatastorePartition.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension IoTAnalyticsClientTypes.DatastorePartition {

    static func write(value: IoTAnalyticsClientTypes.DatastorePartition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attributePartition"].write(value.attributePartition, with: IoTAnalyticsClientTypes.Partition.write(value:to:))
        try writer["timestampPartition"].write(value.timestampPartition, with: IoTAnalyticsClientTypes.TimestampPartition.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.DatastorePartition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.DatastorePartition()
        value.attributePartition = try reader["attributePartition"].readIfPresent(with: IoTAnalyticsClientTypes.Partition.read(from:))
        value.timestampPartition = try reader["timestampPartition"].readIfPresent(with: IoTAnalyticsClientTypes.TimestampPartition.read(from:))
        return value
    }
}

extension IoTAnalyticsClientTypes.TimestampPartition {

    static func write(value: IoTAnalyticsClientTypes.TimestampPartition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attributeName"].write(value.attributeName)
        try writer["timestampFormat"].write(value.timestampFormat)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.TimestampPartition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.TimestampPartition()
        value.attributeName = try reader["attributeName"].readIfPresent() ?? ""
        value.timestampFormat = try reader["timestampFormat"].readIfPresent()
        return value
    }
}

extension IoTAnalyticsClientTypes.Partition {

    static func write(value: IoTAnalyticsClientTypes.Partition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attributeName"].write(value.attributeName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.Partition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.Partition()
        value.attributeName = try reader["attributeName"].readIfPresent() ?? ""
        return value
    }
}

extension IoTAnalyticsClientTypes.FileFormatConfiguration {

    static func write(value: IoTAnalyticsClientTypes.FileFormatConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["jsonConfiguration"].write(value.jsonConfiguration, with: IoTAnalyticsClientTypes.JsonConfiguration.write(value:to:))
        try writer["parquetConfiguration"].write(value.parquetConfiguration, with: IoTAnalyticsClientTypes.ParquetConfiguration.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.FileFormatConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.FileFormatConfiguration()
        value.jsonConfiguration = try reader["jsonConfiguration"].readIfPresent(with: IoTAnalyticsClientTypes.JsonConfiguration.read(from:))
        value.parquetConfiguration = try reader["parquetConfiguration"].readIfPresent(with: IoTAnalyticsClientTypes.ParquetConfiguration.read(from:))
        return value
    }
}

extension IoTAnalyticsClientTypes.ParquetConfiguration {

    static func write(value: IoTAnalyticsClientTypes.ParquetConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["schemaDefinition"].write(value.schemaDefinition, with: IoTAnalyticsClientTypes.SchemaDefinition.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.ParquetConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.ParquetConfiguration()
        value.schemaDefinition = try reader["schemaDefinition"].readIfPresent(with: IoTAnalyticsClientTypes.SchemaDefinition.read(from:))
        return value
    }
}

extension IoTAnalyticsClientTypes.SchemaDefinition {

    static func write(value: IoTAnalyticsClientTypes.SchemaDefinition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["columns"].writeList(value.columns, memberWritingClosure: IoTAnalyticsClientTypes.Column.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.SchemaDefinition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.SchemaDefinition()
        value.columns = try reader["columns"].readListIfPresent(memberReadingClosure: IoTAnalyticsClientTypes.Column.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension IoTAnalyticsClientTypes.Column {

    static func write(value: IoTAnalyticsClientTypes.Column?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.Column {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.Column()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.type = try reader["type"].readIfPresent() ?? ""
        return value
    }
}

extension IoTAnalyticsClientTypes.JsonConfiguration {

    static func write(value: IoTAnalyticsClientTypes.JsonConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.JsonConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return IoTAnalyticsClientTypes.JsonConfiguration()
    }
}

extension IoTAnalyticsClientTypes.DatastoreStorage {

    static func write(value: IoTAnalyticsClientTypes.DatastoreStorage?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        switch value {
            case let .customermanageds3(customermanageds3):
                try writer["customerManagedS3"].write(customermanageds3, with: IoTAnalyticsClientTypes.CustomerManagedDatastoreS3Storage.write(value:to:))
            case let .iotsitewisemultilayerstorage(iotsitewisemultilayerstorage):
                try writer["iotSiteWiseMultiLayerStorage"].write(iotsitewisemultilayerstorage, with: IoTAnalyticsClientTypes.DatastoreIotSiteWiseMultiLayerStorage.write(value:to:))
            case let .servicemanageds3(servicemanageds3):
                try writer["serviceManagedS3"].write(servicemanageds3, with: IoTAnalyticsClientTypes.ServiceManagedDatastoreS3Storage.write(value:to:))
            case let .sdkUnknown(sdkUnknown):
                try writer["sdkUnknown"].write(sdkUnknown)
        }
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.DatastoreStorage {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        let name = reader.children.filter { $0.hasContent && $0.nodeInfo.name != "__type" }.first?.nodeInfo.name
        switch name {
            case "serviceManagedS3":
                return .servicemanageds3(try reader["serviceManagedS3"].read(with: IoTAnalyticsClientTypes.ServiceManagedDatastoreS3Storage.read(from:)))
            case "customerManagedS3":
                return .customermanageds3(try reader["customerManagedS3"].read(with: IoTAnalyticsClientTypes.CustomerManagedDatastoreS3Storage.read(from:)))
            case "iotSiteWiseMultiLayerStorage":
                return .iotsitewisemultilayerstorage(try reader["iotSiteWiseMultiLayerStorage"].read(with: IoTAnalyticsClientTypes.DatastoreIotSiteWiseMultiLayerStorage.read(from:)))
            default:
                return .sdkUnknown(name ?? "")
        }
    }
}

extension IoTAnalyticsClientTypes.DatastoreIotSiteWiseMultiLayerStorage {

    static func write(value: IoTAnalyticsClientTypes.DatastoreIotSiteWiseMultiLayerStorage?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["customerManagedS3Storage"].write(value.customerManagedS3Storage, with: IoTAnalyticsClientTypes.IotSiteWiseCustomerManagedDatastoreS3Storage.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.DatastoreIotSiteWiseMultiLayerStorage {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.DatastoreIotSiteWiseMultiLayerStorage()
        value.customerManagedS3Storage = try reader["customerManagedS3Storage"].readIfPresent(with: IoTAnalyticsClientTypes.IotSiteWiseCustomerManagedDatastoreS3Storage.read(from:))
        return value
    }
}

extension IoTAnalyticsClientTypes.IotSiteWiseCustomerManagedDatastoreS3Storage {

    static func write(value: IoTAnalyticsClientTypes.IotSiteWiseCustomerManagedDatastoreS3Storage?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bucket"].write(value.bucket)
        try writer["keyPrefix"].write(value.keyPrefix)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.IotSiteWiseCustomerManagedDatastoreS3Storage {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.IotSiteWiseCustomerManagedDatastoreS3Storage()
        value.bucket = try reader["bucket"].readIfPresent() ?? ""
        value.keyPrefix = try reader["keyPrefix"].readIfPresent()
        return value
    }
}

extension IoTAnalyticsClientTypes.CustomerManagedDatastoreS3Storage {

    static func write(value: IoTAnalyticsClientTypes.CustomerManagedDatastoreS3Storage?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bucket"].write(value.bucket)
        try writer["keyPrefix"].write(value.keyPrefix)
        try writer["roleArn"].write(value.roleArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.CustomerManagedDatastoreS3Storage {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.CustomerManagedDatastoreS3Storage()
        value.bucket = try reader["bucket"].readIfPresent() ?? ""
        value.keyPrefix = try reader["keyPrefix"].readIfPresent()
        value.roleArn = try reader["roleArn"].readIfPresent() ?? ""
        return value
    }
}

extension IoTAnalyticsClientTypes.ServiceManagedDatastoreS3Storage {

    static func write(value: IoTAnalyticsClientTypes.ServiceManagedDatastoreS3Storage?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.ServiceManagedDatastoreS3Storage {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return IoTAnalyticsClientTypes.ServiceManagedDatastoreS3Storage()
    }
}

extension IoTAnalyticsClientTypes.DatastoreStatistics {

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.DatastoreStatistics {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.DatastoreStatistics()
        value.size = try reader["size"].readIfPresent(with: IoTAnalyticsClientTypes.EstimatedResourceSize.read(from:))
        return value
    }
}

extension IoTAnalyticsClientTypes.LoggingOptions {

    static func write(value: IoTAnalyticsClientTypes.LoggingOptions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["enabled"].write(value.enabled)
        try writer["level"].write(value.level)
        try writer["roleArn"].write(value.roleArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.LoggingOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.LoggingOptions()
        value.roleArn = try reader["roleArn"].readIfPresent() ?? ""
        value.level = try reader["level"].readIfPresent() ?? .sdkUnknown("")
        value.enabled = try reader["enabled"].readIfPresent() ?? false
        return value
    }
}

extension IoTAnalyticsClientTypes.Pipeline {

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.Pipeline {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.Pipeline()
        value.name = try reader["name"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.activities = try reader["activities"].readListIfPresent(memberReadingClosure: IoTAnalyticsClientTypes.PipelineActivity.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.reprocessingSummaries = try reader["reprocessingSummaries"].readListIfPresent(memberReadingClosure: IoTAnalyticsClientTypes.ReprocessingSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.creationTime = try reader["creationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdateTime = try reader["lastUpdateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension IoTAnalyticsClientTypes.ReprocessingSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.ReprocessingSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.ReprocessingSummary()
        value.id = try reader["id"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.creationTime = try reader["creationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension IoTAnalyticsClientTypes.PipelineActivity {

    static func write(value: IoTAnalyticsClientTypes.PipelineActivity?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["addAttributes"].write(value.addAttributes, with: IoTAnalyticsClientTypes.AddAttributesActivity.write(value:to:))
        try writer["channel"].write(value.channel, with: IoTAnalyticsClientTypes.ChannelActivity.write(value:to:))
        try writer["datastore"].write(value.datastore, with: IoTAnalyticsClientTypes.DatastoreActivity.write(value:to:))
        try writer["deviceRegistryEnrich"].write(value.deviceRegistryEnrich, with: IoTAnalyticsClientTypes.DeviceRegistryEnrichActivity.write(value:to:))
        try writer["deviceShadowEnrich"].write(value.deviceShadowEnrich, with: IoTAnalyticsClientTypes.DeviceShadowEnrichActivity.write(value:to:))
        try writer["filter"].write(value.filter, with: IoTAnalyticsClientTypes.FilterActivity.write(value:to:))
        try writer["lambda"].write(value.lambda, with: IoTAnalyticsClientTypes.LambdaActivity.write(value:to:))
        try writer["math"].write(value.math, with: IoTAnalyticsClientTypes.MathActivity.write(value:to:))
        try writer["removeAttributes"].write(value.removeAttributes, with: IoTAnalyticsClientTypes.RemoveAttributesActivity.write(value:to:))
        try writer["selectAttributes"].write(value.selectAttributes, with: IoTAnalyticsClientTypes.SelectAttributesActivity.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.PipelineActivity {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.PipelineActivity()
        value.channel = try reader["channel"].readIfPresent(with: IoTAnalyticsClientTypes.ChannelActivity.read(from:))
        value.lambda = try reader["lambda"].readIfPresent(with: IoTAnalyticsClientTypes.LambdaActivity.read(from:))
        value.datastore = try reader["datastore"].readIfPresent(with: IoTAnalyticsClientTypes.DatastoreActivity.read(from:))
        value.addAttributes = try reader["addAttributes"].readIfPresent(with: IoTAnalyticsClientTypes.AddAttributesActivity.read(from:))
        value.removeAttributes = try reader["removeAttributes"].readIfPresent(with: IoTAnalyticsClientTypes.RemoveAttributesActivity.read(from:))
        value.selectAttributes = try reader["selectAttributes"].readIfPresent(with: IoTAnalyticsClientTypes.SelectAttributesActivity.read(from:))
        value.filter = try reader["filter"].readIfPresent(with: IoTAnalyticsClientTypes.FilterActivity.read(from:))
        value.math = try reader["math"].readIfPresent(with: IoTAnalyticsClientTypes.MathActivity.read(from:))
        value.deviceRegistryEnrich = try reader["deviceRegistryEnrich"].readIfPresent(with: IoTAnalyticsClientTypes.DeviceRegistryEnrichActivity.read(from:))
        value.deviceShadowEnrich = try reader["deviceShadowEnrich"].readIfPresent(with: IoTAnalyticsClientTypes.DeviceShadowEnrichActivity.read(from:))
        return value
    }
}

extension IoTAnalyticsClientTypes.DeviceShadowEnrichActivity {

    static func write(value: IoTAnalyticsClientTypes.DeviceShadowEnrichActivity?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attribute"].write(value.attribute)
        try writer["name"].write(value.name)
        try writer["next"].write(value.next)
        try writer["roleArn"].write(value.roleArn)
        try writer["thingName"].write(value.thingName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.DeviceShadowEnrichActivity {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.DeviceShadowEnrichActivity()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.attribute = try reader["attribute"].readIfPresent() ?? ""
        value.thingName = try reader["thingName"].readIfPresent() ?? ""
        value.roleArn = try reader["roleArn"].readIfPresent() ?? ""
        value.next = try reader["next"].readIfPresent()
        return value
    }
}

extension IoTAnalyticsClientTypes.DeviceRegistryEnrichActivity {

    static func write(value: IoTAnalyticsClientTypes.DeviceRegistryEnrichActivity?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attribute"].write(value.attribute)
        try writer["name"].write(value.name)
        try writer["next"].write(value.next)
        try writer["roleArn"].write(value.roleArn)
        try writer["thingName"].write(value.thingName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.DeviceRegistryEnrichActivity {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.DeviceRegistryEnrichActivity()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.attribute = try reader["attribute"].readIfPresent() ?? ""
        value.thingName = try reader["thingName"].readIfPresent() ?? ""
        value.roleArn = try reader["roleArn"].readIfPresent() ?? ""
        value.next = try reader["next"].readIfPresent()
        return value
    }
}

extension IoTAnalyticsClientTypes.MathActivity {

    static func write(value: IoTAnalyticsClientTypes.MathActivity?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attribute"].write(value.attribute)
        try writer["math"].write(value.math)
        try writer["name"].write(value.name)
        try writer["next"].write(value.next)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.MathActivity {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.MathActivity()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.attribute = try reader["attribute"].readIfPresent() ?? ""
        value.math = try reader["math"].readIfPresent() ?? ""
        value.next = try reader["next"].readIfPresent()
        return value
    }
}

extension IoTAnalyticsClientTypes.FilterActivity {

    static func write(value: IoTAnalyticsClientTypes.FilterActivity?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["filter"].write(value.filter)
        try writer["name"].write(value.name)
        try writer["next"].write(value.next)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.FilterActivity {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.FilterActivity()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.filter = try reader["filter"].readIfPresent() ?? ""
        value.next = try reader["next"].readIfPresent()
        return value
    }
}

extension IoTAnalyticsClientTypes.SelectAttributesActivity {

    static func write(value: IoTAnalyticsClientTypes.SelectAttributesActivity?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attributes"].writeList(value.attributes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["name"].write(value.name)
        try writer["next"].write(value.next)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.SelectAttributesActivity {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.SelectAttributesActivity()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.attributes = try reader["attributes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.next = try reader["next"].readIfPresent()
        return value
    }
}

extension IoTAnalyticsClientTypes.RemoveAttributesActivity {

    static func write(value: IoTAnalyticsClientTypes.RemoveAttributesActivity?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attributes"].writeList(value.attributes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["name"].write(value.name)
        try writer["next"].write(value.next)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.RemoveAttributesActivity {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.RemoveAttributesActivity()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.attributes = try reader["attributes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.next = try reader["next"].readIfPresent()
        return value
    }
}

extension IoTAnalyticsClientTypes.AddAttributesActivity {

    static func write(value: IoTAnalyticsClientTypes.AddAttributesActivity?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attributes"].writeMap(value.attributes, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["name"].write(value.name)
        try writer["next"].write(value.next)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.AddAttributesActivity {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.AddAttributesActivity()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.attributes = try reader["attributes"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false) ?? [:]
        value.next = try reader["next"].readIfPresent()
        return value
    }
}

extension IoTAnalyticsClientTypes.DatastoreActivity {

    static func write(value: IoTAnalyticsClientTypes.DatastoreActivity?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["datastoreName"].write(value.datastoreName)
        try writer["name"].write(value.name)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.DatastoreActivity {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.DatastoreActivity()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.datastoreName = try reader["datastoreName"].readIfPresent() ?? ""
        return value
    }
}

extension IoTAnalyticsClientTypes.LambdaActivity {

    static func write(value: IoTAnalyticsClientTypes.LambdaActivity?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["batchSize"].write(value.batchSize)
        try writer["lambdaName"].write(value.lambdaName)
        try writer["name"].write(value.name)
        try writer["next"].write(value.next)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.LambdaActivity {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.LambdaActivity()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.lambdaName = try reader["lambdaName"].readIfPresent() ?? ""
        value.batchSize = try reader["batchSize"].readIfPresent() ?? 0
        value.next = try reader["next"].readIfPresent()
        return value
    }
}

extension IoTAnalyticsClientTypes.ChannelActivity {

    static func write(value: IoTAnalyticsClientTypes.ChannelActivity?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["channelName"].write(value.channelName)
        try writer["name"].write(value.name)
        try writer["next"].write(value.next)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.ChannelActivity {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.ChannelActivity()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.channelName = try reader["channelName"].readIfPresent() ?? ""
        value.next = try reader["next"].readIfPresent()
        return value
    }
}

extension IoTAnalyticsClientTypes.DatasetEntry {

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.DatasetEntry {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.DatasetEntry()
        value.entryName = try reader["entryName"].readIfPresent()
        value.dataURI = try reader["dataURI"].readIfPresent()
        return value
    }
}

extension IoTAnalyticsClientTypes.DatasetContentStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.DatasetContentStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.DatasetContentStatus()
        value.state = try reader["state"].readIfPresent()
        value.reason = try reader["reason"].readIfPresent()
        return value
    }
}

extension IoTAnalyticsClientTypes.ChannelSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.ChannelSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.ChannelSummary()
        value.channelName = try reader["channelName"].readIfPresent()
        value.channelStorage = try reader["channelStorage"].readIfPresent(with: IoTAnalyticsClientTypes.ChannelStorageSummary.read(from:))
        value.status = try reader["status"].readIfPresent()
        value.creationTime = try reader["creationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdateTime = try reader["lastUpdateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastMessageArrivalTime = try reader["lastMessageArrivalTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension IoTAnalyticsClientTypes.ChannelStorageSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.ChannelStorageSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.ChannelStorageSummary()
        value.serviceManagedS3 = try reader["serviceManagedS3"].readIfPresent(with: IoTAnalyticsClientTypes.ServiceManagedChannelS3StorageSummary.read(from:))
        value.customerManagedS3 = try reader["customerManagedS3"].readIfPresent(with: IoTAnalyticsClientTypes.CustomerManagedChannelS3StorageSummary.read(from:))
        return value
    }
}

extension IoTAnalyticsClientTypes.CustomerManagedChannelS3StorageSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.CustomerManagedChannelS3StorageSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.CustomerManagedChannelS3StorageSummary()
        value.bucket = try reader["bucket"].readIfPresent()
        value.keyPrefix = try reader["keyPrefix"].readIfPresent()
        value.roleArn = try reader["roleArn"].readIfPresent()
        return value
    }
}

extension IoTAnalyticsClientTypes.ServiceManagedChannelS3StorageSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.ServiceManagedChannelS3StorageSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return IoTAnalyticsClientTypes.ServiceManagedChannelS3StorageSummary()
    }
}

extension IoTAnalyticsClientTypes.DatasetContentSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.DatasetContentSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.DatasetContentSummary()
        value.version = try reader["version"].readIfPresent()
        value.status = try reader["status"].readIfPresent(with: IoTAnalyticsClientTypes.DatasetContentStatus.read(from:))
        value.creationTime = try reader["creationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.scheduleTime = try reader["scheduleTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.completionTime = try reader["completionTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension IoTAnalyticsClientTypes.DatasetSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.DatasetSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.DatasetSummary()
        value.datasetName = try reader["datasetName"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.creationTime = try reader["creationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdateTime = try reader["lastUpdateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.triggers = try reader["triggers"].readListIfPresent(memberReadingClosure: IoTAnalyticsClientTypes.DatasetTrigger.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.actions = try reader["actions"].readListIfPresent(memberReadingClosure: IoTAnalyticsClientTypes.DatasetActionSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension IoTAnalyticsClientTypes.DatasetActionSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.DatasetActionSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.DatasetActionSummary()
        value.actionName = try reader["actionName"].readIfPresent()
        value.actionType = try reader["actionType"].readIfPresent()
        return value
    }
}

extension IoTAnalyticsClientTypes.DatastoreSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.DatastoreSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.DatastoreSummary()
        value.datastoreName = try reader["datastoreName"].readIfPresent()
        value.datastoreStorage = try reader["datastoreStorage"].readIfPresent(with: IoTAnalyticsClientTypes.DatastoreStorageSummary.read(from:))
        value.status = try reader["status"].readIfPresent()
        value.creationTime = try reader["creationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdateTime = try reader["lastUpdateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastMessageArrivalTime = try reader["lastMessageArrivalTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.fileFormatType = try reader["fileFormatType"].readIfPresent()
        value.datastorePartitions = try reader["datastorePartitions"].readIfPresent(with: IoTAnalyticsClientTypes.DatastorePartitions.read(from:))
        return value
    }
}

extension IoTAnalyticsClientTypes.DatastoreStorageSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.DatastoreStorageSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.DatastoreStorageSummary()
        value.serviceManagedS3 = try reader["serviceManagedS3"].readIfPresent(with: IoTAnalyticsClientTypes.ServiceManagedDatastoreS3StorageSummary.read(from:))
        value.customerManagedS3 = try reader["customerManagedS3"].readIfPresent(with: IoTAnalyticsClientTypes.CustomerManagedDatastoreS3StorageSummary.read(from:))
        value.iotSiteWiseMultiLayerStorage = try reader["iotSiteWiseMultiLayerStorage"].readIfPresent(with: IoTAnalyticsClientTypes.DatastoreIotSiteWiseMultiLayerStorageSummary.read(from:))
        return value
    }
}

extension IoTAnalyticsClientTypes.DatastoreIotSiteWiseMultiLayerStorageSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.DatastoreIotSiteWiseMultiLayerStorageSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.DatastoreIotSiteWiseMultiLayerStorageSummary()
        value.customerManagedS3Storage = try reader["customerManagedS3Storage"].readIfPresent(with: IoTAnalyticsClientTypes.IotSiteWiseCustomerManagedDatastoreS3StorageSummary.read(from:))
        return value
    }
}

extension IoTAnalyticsClientTypes.IotSiteWiseCustomerManagedDatastoreS3StorageSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.IotSiteWiseCustomerManagedDatastoreS3StorageSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.IotSiteWiseCustomerManagedDatastoreS3StorageSummary()
        value.bucket = try reader["bucket"].readIfPresent()
        value.keyPrefix = try reader["keyPrefix"].readIfPresent()
        return value
    }
}

extension IoTAnalyticsClientTypes.CustomerManagedDatastoreS3StorageSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.CustomerManagedDatastoreS3StorageSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.CustomerManagedDatastoreS3StorageSummary()
        value.bucket = try reader["bucket"].readIfPresent()
        value.keyPrefix = try reader["keyPrefix"].readIfPresent()
        value.roleArn = try reader["roleArn"].readIfPresent()
        return value
    }
}

extension IoTAnalyticsClientTypes.ServiceManagedDatastoreS3StorageSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.ServiceManagedDatastoreS3StorageSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return IoTAnalyticsClientTypes.ServiceManagedDatastoreS3StorageSummary()
    }
}

extension IoTAnalyticsClientTypes.PipelineSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.PipelineSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.PipelineSummary()
        value.pipelineName = try reader["pipelineName"].readIfPresent()
        value.reprocessingSummaries = try reader["reprocessingSummaries"].readListIfPresent(memberReadingClosure: IoTAnalyticsClientTypes.ReprocessingSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.creationTime = try reader["creationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdateTime = try reader["lastUpdateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension IoTAnalyticsClientTypes.Tag {

    static func write(value: IoTAnalyticsClientTypes.Tag?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["key"].write(value.key)
        try writer["value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> IoTAnalyticsClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = IoTAnalyticsClientTypes.Tag()
        value.key = try reader["key"].readIfPresent() ?? ""
        value.value = try reader["value"].readIfPresent() ?? ""
        return value
    }
}

extension IoTAnalyticsClientTypes.Message {

    static func write(value: IoTAnalyticsClientTypes.Message?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["messageId"].write(value.messageId)
        try writer["payload"].write(value.payload)
    }
}

extension IoTAnalyticsClientTypes.ChannelMessages {

    static func write(value: IoTAnalyticsClientTypes.ChannelMessages?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["s3Paths"].writeList(value.s3Paths, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

public enum IoTAnalyticsClientTypes {}
