// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension IoTAnalyticsClientTypes.AddAttributesActivity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes
        case name
        case next
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .attributes)
            for (dictKey0, attributeNameMapping0) in attributes {
                try attributesContainer.encode(attributeNameMapping0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let next = self.next {
            try encodeContainer.encode(next, forKey: .next)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let attributesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .attributes)
        var attributesDecoded0: [Swift.String:Swift.String]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [Swift.String:Swift.String]()
            for (key0, attributename0) in attributesContainer {
                if let attributename0 = attributename0 {
                    attributesDecoded0?[key0] = attributename0
                }
            }
        }
        attributes = attributesDecoded0
        let nextDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .next)
        next = nextDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// An activity that adds other attributes based on existing attributes in the message.
    public struct AddAttributesActivity: Swift.Equatable {
        /// A list of 1-50 AttributeNameMapping objects that map an existing attribute to a new attribute. The existing attributes remain in the message, so if you want to remove the originals, use RemoveAttributeActivity.
        /// This member is required.
        public var attributes: [Swift.String:Swift.String]?
        /// The name of the addAttributes activity.
        /// This member is required.
        public var name: Swift.String?
        /// The next activity in the pipeline.
        public var next: Swift.String?

        public init (
            attributes: [Swift.String:Swift.String]? = nil,
            name: Swift.String? = nil,
            next: Swift.String? = nil
        )
        {
            self.attributes = attributes
            self.name = name
            self.next = next
        }
    }

}

extension IoTAnalyticsClientTypes.BatchPutMessageErrorEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorCode
        case errorMessage
        case messageId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorCode = self.errorCode {
            try encodeContainer.encode(errorCode, forKey: .errorCode)
        }
        if let errorMessage = self.errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let messageId = self.messageId {
            try encodeContainer.encode(messageId, forKey: .messageId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageId)
        messageId = messageIdDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// Contains informations about errors.
    public struct BatchPutMessageErrorEntry: Swift.Equatable {
        /// The code associated with the error.
        public var errorCode: Swift.String?
        /// The message associated with the error.
        public var errorMessage: Swift.String?
        /// The ID of the message that caused the error. See the value corresponding to the messageId key in the message object.
        public var messageId: Swift.String?

        public init (
            errorCode: Swift.String? = nil,
            errorMessage: Swift.String? = nil,
            messageId: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.messageId = messageId
        }
    }

}

extension BatchPutMessageInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channelName
        case messages
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channelName = self.channelName {
            try encodeContainer.encode(channelName, forKey: .channelName)
        }
        if let messages = messages {
            var messagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .messages)
            for message0 in messages {
                try messagesContainer.encode(message0)
            }
        }
    }
}

extension BatchPutMessageInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/messages/batch"
    }
}

public struct BatchPutMessageInput: Swift.Equatable {
    /// The name of the channel where the messages are sent.
    /// This member is required.
    public var channelName: Swift.String?
    /// The list of messages to be sent. Each message has the format: { "messageId": "string", "payload": "string"}. The field names of message payloads (data) that you send to IoT Analytics:
    ///
    /// * Must contain only alphanumeric characters and undescores (_). No other special characters are allowed.
    ///
    /// * Must begin with an alphabetic character or single underscore (_).
    ///
    /// * Cannot contain hyphens (-).
    ///
    /// * In regular expression terms: "^[A-Za-z_]([A-Za-z0-9]*|[A-Za-z0-9][A-Za-z0-9_]*)$".
    ///
    /// * Cannot be more than 255 characters.
    ///
    /// * Are case insensitive. (Fields named foo and FOO in the same payload are considered duplicates.)
    ///
    ///
    /// For example, {"temp_01": 29} or {"_temp_01": 29} are valid, but {"temp-01": 29}, {"01_temp": 29} or {"__temp_01": 29} are invalid in message payloads.
    /// This member is required.
    public var messages: [IoTAnalyticsClientTypes.Message]?

    public init (
        channelName: Swift.String? = nil,
        messages: [IoTAnalyticsClientTypes.Message]? = nil
    )
    {
        self.channelName = channelName
        self.messages = messages
    }
}

struct BatchPutMessageInputBody: Swift.Equatable {
    let channelName: Swift.String?
    let messages: [IoTAnalyticsClientTypes.Message]?
}

extension BatchPutMessageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channelName
        case messages
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .channelName)
        channelName = channelNameDecoded
        let messagesContainer = try containerValues.decodeIfPresent([IoTAnalyticsClientTypes.Message?].self, forKey: .messages)
        var messagesDecoded0:[IoTAnalyticsClientTypes.Message]? = nil
        if let messagesContainer = messagesContainer {
            messagesDecoded0 = [IoTAnalyticsClientTypes.Message]()
            for structure0 in messagesContainer {
                if let structure0 = structure0 {
                    messagesDecoded0?.append(structure0)
                }
            }
        }
        messages = messagesDecoded0
    }
}

extension BatchPutMessageOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchPutMessageOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum BatchPutMessageOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchPutMessageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BatchPutMessageOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.batchPutMessageErrorEntries = output.batchPutMessageErrorEntries
        } else {
            self.batchPutMessageErrorEntries = nil
        }
    }
}

public struct BatchPutMessageOutputResponse: Swift.Equatable {
    /// A list of any errors encountered when sending the messages to the channel.
    public var batchPutMessageErrorEntries: [IoTAnalyticsClientTypes.BatchPutMessageErrorEntry]?

    public init (
        batchPutMessageErrorEntries: [IoTAnalyticsClientTypes.BatchPutMessageErrorEntry]? = nil
    )
    {
        self.batchPutMessageErrorEntries = batchPutMessageErrorEntries
    }
}

struct BatchPutMessageOutputResponseBody: Swift.Equatable {
    let batchPutMessageErrorEntries: [IoTAnalyticsClientTypes.BatchPutMessageErrorEntry]?
}

extension BatchPutMessageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchPutMessageErrorEntries
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let batchPutMessageErrorEntriesContainer = try containerValues.decodeIfPresent([IoTAnalyticsClientTypes.BatchPutMessageErrorEntry?].self, forKey: .batchPutMessageErrorEntries)
        var batchPutMessageErrorEntriesDecoded0:[IoTAnalyticsClientTypes.BatchPutMessageErrorEntry]? = nil
        if let batchPutMessageErrorEntriesContainer = batchPutMessageErrorEntriesContainer {
            batchPutMessageErrorEntriesDecoded0 = [IoTAnalyticsClientTypes.BatchPutMessageErrorEntry]()
            for structure0 in batchPutMessageErrorEntriesContainer {
                if let structure0 = structure0 {
                    batchPutMessageErrorEntriesDecoded0?.append(structure0)
                }
            }
        }
        batchPutMessageErrorEntries = batchPutMessageErrorEntriesDecoded0
    }
}

extension CancelPipelineReprocessingInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let pipelineName = pipelineName else {
            return nil
        }
        guard let reprocessingId = reprocessingId else {
            return nil
        }
        return "/pipelines/\(pipelineName.urlPercentEncoding())/reprocessing/\(reprocessingId.urlPercentEncoding())"
    }
}

public struct CancelPipelineReprocessingInput: Swift.Equatable {
    /// The name of pipeline for which data reprocessing is canceled.
    /// This member is required.
    public var pipelineName: Swift.String?
    /// The ID of the reprocessing task (returned by StartPipelineReprocessing).
    /// This member is required.
    public var reprocessingId: Swift.String?

    public init (
        pipelineName: Swift.String? = nil,
        reprocessingId: Swift.String? = nil
    )
    {
        self.pipelineName = pipelineName
        self.reprocessingId = reprocessingId
    }
}

struct CancelPipelineReprocessingInputBody: Swift.Equatable {
}

extension CancelPipelineReprocessingInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension CancelPipelineReprocessingOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CancelPipelineReprocessingOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CancelPipelineReprocessingOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CancelPipelineReprocessingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CancelPipelineReprocessingOutputResponse: Swift.Equatable {

    public init () { }
}

extension IoTAnalyticsClientTypes.Channel: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case creationTime
        case lastMessageArrivalTime
        case lastUpdateTime
        case name
        case retentionPeriod
        case status
        case storage
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encodeTimestamp(creationTime, format: .epochSeconds, forKey: .creationTime)
        }
        if let lastMessageArrivalTime = self.lastMessageArrivalTime {
            try encodeContainer.encodeTimestamp(lastMessageArrivalTime, format: .epochSeconds, forKey: .lastMessageArrivalTime)
        }
        if let lastUpdateTime = self.lastUpdateTime {
            try encodeContainer.encodeTimestamp(lastUpdateTime, format: .epochSeconds, forKey: .lastUpdateTime)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let retentionPeriod = self.retentionPeriod {
            try encodeContainer.encode(retentionPeriod, forKey: .retentionPeriod)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let storage = self.storage {
            try encodeContainer.encode(storage, forKey: .storage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let storageDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.ChannelStorage.self, forKey: .storage)
        storage = storageDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.ChannelStatus.self, forKey: .status)
        status = statusDecoded
        let retentionPeriodDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.RetentionPeriod.self, forKey: .retentionPeriod)
        retentionPeriod = retentionPeriodDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastUpdateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdateTime)
        lastUpdateTime = lastUpdateTimeDecoded
        let lastMessageArrivalTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastMessageArrivalTime)
        lastMessageArrivalTime = lastMessageArrivalTimeDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// A collection of data from an MQTT topic. Channels archive the raw, unprocessed messages before publishing the data to a pipeline.
    public struct Channel: Swift.Equatable {
        /// The ARN of the channel.
        public var arn: Swift.String?
        /// When the channel was created.
        public var creationTime: ClientRuntime.Date?
        /// The last time when a new message arrived in the channel. IoT Analytics updates this value at most once per minute for one channel. Hence, the lastMessageArrivalTime value is an approximation. This feature only applies to messages that arrived in the data store after October 23, 2020.
        public var lastMessageArrivalTime: ClientRuntime.Date?
        /// When the channel was last updated.
        public var lastUpdateTime: ClientRuntime.Date?
        /// The name of the channel.
        public var name: Swift.String?
        /// How long, in days, message data is kept for the channel.
        public var retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod?
        /// The status of the channel.
        public var status: IoTAnalyticsClientTypes.ChannelStatus?
        /// Where channel data is stored. You can choose one of serviceManagedS3 or customerManagedS3 storage. If not specified, the default is serviceManagedS3. You can't change this storage option after the channel is created.
        public var storage: IoTAnalyticsClientTypes.ChannelStorage?

        public init (
            arn: Swift.String? = nil,
            creationTime: ClientRuntime.Date? = nil,
            lastMessageArrivalTime: ClientRuntime.Date? = nil,
            lastUpdateTime: ClientRuntime.Date? = nil,
            name: Swift.String? = nil,
            retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod? = nil,
            status: IoTAnalyticsClientTypes.ChannelStatus? = nil,
            storage: IoTAnalyticsClientTypes.ChannelStorage? = nil
        )
        {
            self.arn = arn
            self.creationTime = creationTime
            self.lastMessageArrivalTime = lastMessageArrivalTime
            self.lastUpdateTime = lastUpdateTime
            self.name = name
            self.retentionPeriod = retentionPeriod
            self.status = status
            self.storage = storage
        }
    }

}

extension IoTAnalyticsClientTypes.ChannelActivity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channelName
        case name
        case next
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channelName = self.channelName {
            try encodeContainer.encode(channelName, forKey: .channelName)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let next = self.next {
            try encodeContainer.encode(next, forKey: .next)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let channelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .channelName)
        channelName = channelNameDecoded
        let nextDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .next)
        next = nextDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// The activity that determines the source of the messages to be processed.
    public struct ChannelActivity: Swift.Equatable {
        /// The name of the channel from which the messages are processed.
        /// This member is required.
        public var channelName: Swift.String?
        /// The name of the channel activity.
        /// This member is required.
        public var name: Swift.String?
        /// The next activity in the pipeline.
        public var next: Swift.String?

        public init (
            channelName: Swift.String? = nil,
            name: Swift.String? = nil,
            next: Swift.String? = nil
        )
        {
            self.channelName = channelName
            self.name = name
            self.next = next
        }
    }

}

extension IoTAnalyticsClientTypes.ChannelMessages: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3Paths
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let s3Paths = s3Paths {
            var s3PathsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .s3Paths)
            for s3pathchannelmessage0 in s3Paths {
                try s3PathsContainer.encode(s3pathchannelmessage0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3PathsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .s3Paths)
        var s3PathsDecoded0:[Swift.String]? = nil
        if let s3PathsContainer = s3PathsContainer {
            s3PathsDecoded0 = [Swift.String]()
            for string0 in s3PathsContainer {
                if let string0 = string0 {
                    s3PathsDecoded0?.append(string0)
                }
            }
        }
        s3Paths = s3PathsDecoded0
    }
}

extension IoTAnalyticsClientTypes {
    /// Specifies one or more sets of channel messages.
    public struct ChannelMessages: Swift.Equatable {
        /// Specifies one or more keys that identify the Amazon Simple Storage Service (Amazon S3) objects that save your channel messages. You must use the full path for the key. Example path: channel/mychannel/__dt=2020-02-29 00:00:00/1582940490000_1582940520000_123456789012_mychannel_0_2118.0.json.gz
        public var s3Paths: [Swift.String]?

        public init (
            s3Paths: [Swift.String]? = nil
        )
        {
            self.s3Paths = s3Paths
        }
    }

}

extension IoTAnalyticsClientTypes.ChannelStatistics: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case size
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let size = self.size {
            try encodeContainer.encode(size, forKey: .size)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sizeDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.EstimatedResourceSize.self, forKey: .size)
        size = sizeDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// Statistics information about the channel.
    public struct ChannelStatistics: Swift.Equatable {
        /// The estimated size of the channel.
        public var size: IoTAnalyticsClientTypes.EstimatedResourceSize?

        public init (
            size: IoTAnalyticsClientTypes.EstimatedResourceSize? = nil
        )
        {
            self.size = size
        }
    }

}

extension IoTAnalyticsClientTypes {
    public enum ChannelStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case creating
        case deleting
        case sdkUnknown(Swift.String)

        public static var allCases: [ChannelStatus] {
            return [
                .active,
                .creating,
                .deleting,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ChannelStatus(rawValue: rawValue) ?? ChannelStatus.sdkUnknown(rawValue)
        }
    }
}

extension IoTAnalyticsClientTypes.ChannelStorage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customerManagedS3
        case serviceManagedS3
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customerManagedS3 = self.customerManagedS3 {
            try encodeContainer.encode(customerManagedS3, forKey: .customerManagedS3)
        }
        if let serviceManagedS3 = self.serviceManagedS3 {
            try encodeContainer.encode(serviceManagedS3, forKey: .serviceManagedS3)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceManagedS3Decoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.ServiceManagedChannelS3Storage.self, forKey: .serviceManagedS3)
        serviceManagedS3 = serviceManagedS3Decoded
        let customerManagedS3Decoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.CustomerManagedChannelS3Storage.self, forKey: .customerManagedS3)
        customerManagedS3 = customerManagedS3Decoded
    }
}

extension IoTAnalyticsClientTypes {
    /// Where channel data is stored. You may choose one of serviceManagedS3, customerManagedS3 storage. If not specified, the default is serviceManagedS3. This can't be changed after creation of the channel.
    public struct ChannelStorage: Swift.Equatable {
        /// Used to store channel data in an S3 bucket that you manage. If customer managed storage is selected, the retentionPeriod parameter is ignored. You can't change the choice of S3 storage after the data store is created.
        public var customerManagedS3: IoTAnalyticsClientTypes.CustomerManagedChannelS3Storage?
        /// Used to store channel data in an S3 bucket managed by IoT Analytics. You can't change the choice of S3 storage after the data store is created.
        public var serviceManagedS3: IoTAnalyticsClientTypes.ServiceManagedChannelS3Storage?

        public init (
            customerManagedS3: IoTAnalyticsClientTypes.CustomerManagedChannelS3Storage? = nil,
            serviceManagedS3: IoTAnalyticsClientTypes.ServiceManagedChannelS3Storage? = nil
        )
        {
            self.customerManagedS3 = customerManagedS3
            self.serviceManagedS3 = serviceManagedS3
        }
    }

}

extension IoTAnalyticsClientTypes.ChannelStorageSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customerManagedS3
        case serviceManagedS3
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customerManagedS3 = self.customerManagedS3 {
            try encodeContainer.encode(customerManagedS3, forKey: .customerManagedS3)
        }
        if let serviceManagedS3 = self.serviceManagedS3 {
            try encodeContainer.encode(serviceManagedS3, forKey: .serviceManagedS3)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceManagedS3Decoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.ServiceManagedChannelS3StorageSummary.self, forKey: .serviceManagedS3)
        serviceManagedS3 = serviceManagedS3Decoded
        let customerManagedS3Decoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.CustomerManagedChannelS3StorageSummary.self, forKey: .customerManagedS3)
        customerManagedS3 = customerManagedS3Decoded
    }
}

extension IoTAnalyticsClientTypes {
    /// Where channel data is stored.
    public struct ChannelStorageSummary: Swift.Equatable {
        /// Used to store channel data in an S3 bucket that you manage.
        public var customerManagedS3: IoTAnalyticsClientTypes.CustomerManagedChannelS3StorageSummary?
        /// Used to store channel data in an S3 bucket managed by IoT Analytics.
        public var serviceManagedS3: IoTAnalyticsClientTypes.ServiceManagedChannelS3StorageSummary?

        public init (
            customerManagedS3: IoTAnalyticsClientTypes.CustomerManagedChannelS3StorageSummary? = nil,
            serviceManagedS3: IoTAnalyticsClientTypes.ServiceManagedChannelS3StorageSummary? = nil
        )
        {
            self.customerManagedS3 = customerManagedS3
            self.serviceManagedS3 = serviceManagedS3
        }
    }

}

extension IoTAnalyticsClientTypes.ChannelSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channelName
        case channelStorage
        case creationTime
        case lastMessageArrivalTime
        case lastUpdateTime
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channelName = self.channelName {
            try encodeContainer.encode(channelName, forKey: .channelName)
        }
        if let channelStorage = self.channelStorage {
            try encodeContainer.encode(channelStorage, forKey: .channelStorage)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encodeTimestamp(creationTime, format: .epochSeconds, forKey: .creationTime)
        }
        if let lastMessageArrivalTime = self.lastMessageArrivalTime {
            try encodeContainer.encodeTimestamp(lastMessageArrivalTime, format: .epochSeconds, forKey: .lastMessageArrivalTime)
        }
        if let lastUpdateTime = self.lastUpdateTime {
            try encodeContainer.encodeTimestamp(lastUpdateTime, format: .epochSeconds, forKey: .lastUpdateTime)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .channelName)
        channelName = channelNameDecoded
        let channelStorageDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.ChannelStorageSummary.self, forKey: .channelStorage)
        channelStorage = channelStorageDecoded
        let statusDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.ChannelStatus.self, forKey: .status)
        status = statusDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastUpdateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdateTime)
        lastUpdateTime = lastUpdateTimeDecoded
        let lastMessageArrivalTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastMessageArrivalTime)
        lastMessageArrivalTime = lastMessageArrivalTimeDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// A summary of information about a channel.
    public struct ChannelSummary: Swift.Equatable {
        /// The name of the channel.
        public var channelName: Swift.String?
        /// Where channel data is stored.
        public var channelStorage: IoTAnalyticsClientTypes.ChannelStorageSummary?
        /// When the channel was created.
        public var creationTime: ClientRuntime.Date?
        /// The last time when a new message arrived in the channel. IoT Analytics updates this value at most once per minute for one channel. Hence, the lastMessageArrivalTime value is an approximation. This feature only applies to messages that arrived in the data store after October 23, 2020.
        public var lastMessageArrivalTime: ClientRuntime.Date?
        /// The last time the channel was updated.
        public var lastUpdateTime: ClientRuntime.Date?
        /// The status of the channel.
        public var status: IoTAnalyticsClientTypes.ChannelStatus?

        public init (
            channelName: Swift.String? = nil,
            channelStorage: IoTAnalyticsClientTypes.ChannelStorageSummary? = nil,
            creationTime: ClientRuntime.Date? = nil,
            lastMessageArrivalTime: ClientRuntime.Date? = nil,
            lastUpdateTime: ClientRuntime.Date? = nil,
            status: IoTAnalyticsClientTypes.ChannelStatus? = nil
        )
        {
            self.channelName = channelName
            self.channelStorage = channelStorage
            self.creationTime = creationTime
            self.lastMessageArrivalTime = lastMessageArrivalTime
            self.lastUpdateTime = lastUpdateTime
            self.status = status
        }
    }

}

extension IoTAnalyticsClientTypes.Column: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let type = self.type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// Contains information about a column that stores your data.
    public struct Column: Swift.Equatable {
        /// The name of the column.
        /// This member is required.
        public var name: Swift.String?
        /// The type of data. For more information about the supported data types, see [Common data types](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-common.html) in the Glue Developer Guide.
        /// This member is required.
        public var type: Swift.String?

        public init (
            name: Swift.String? = nil,
            type: Swift.String? = nil
        )
        {
            self.name = name
            self.type = type
        }
    }

}

extension IoTAnalyticsClientTypes {
    public enum ComputeType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case acu1
        case acu2
        case sdkUnknown(Swift.String)

        public static var allCases: [ComputeType] {
            return [
                .acu1,
                .acu2,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .acu1: return "ACU_1"
            case .acu2: return "ACU_2"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ComputeType(rawValue: rawValue) ?? ComputeType.sdkUnknown(rawValue)
        }
    }
}

extension IoTAnalyticsClientTypes.ContainerDatasetAction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case executionRoleArn
        case image
        case resourceConfiguration
        case variables
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let executionRoleArn = self.executionRoleArn {
            try encodeContainer.encode(executionRoleArn, forKey: .executionRoleArn)
        }
        if let image = self.image {
            try encodeContainer.encode(image, forKey: .image)
        }
        if let resourceConfiguration = self.resourceConfiguration {
            try encodeContainer.encode(resourceConfiguration, forKey: .resourceConfiguration)
        }
        if let variables = variables {
            var variablesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .variables)
            for variable0 in variables {
                try variablesContainer.encode(variable0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .image)
        image = imageDecoded
        let executionRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionRoleArn)
        executionRoleArn = executionRoleArnDecoded
        let resourceConfigurationDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.ResourceConfiguration.self, forKey: .resourceConfiguration)
        resourceConfiguration = resourceConfigurationDecoded
        let variablesContainer = try containerValues.decodeIfPresent([IoTAnalyticsClientTypes.Variable?].self, forKey: .variables)
        var variablesDecoded0:[IoTAnalyticsClientTypes.Variable]? = nil
        if let variablesContainer = variablesContainer {
            variablesDecoded0 = [IoTAnalyticsClientTypes.Variable]()
            for structure0 in variablesContainer {
                if let structure0 = structure0 {
                    variablesDecoded0?.append(structure0)
                }
            }
        }
        variables = variablesDecoded0
    }
}

extension IoTAnalyticsClientTypes {
    /// Information required to run the containerAction to produce dataset contents.
    public struct ContainerDatasetAction: Swift.Equatable {
        /// The ARN of the role that gives permission to the system to access required resources to run the containerAction. This includes, at minimum, permission to retrieve the dataset contents that are the input to the containerized application.
        /// This member is required.
        public var executionRoleArn: Swift.String?
        /// The ARN of the Docker container stored in your account. The Docker container contains an application and required support libraries and is used to generate dataset contents.
        /// This member is required.
        public var image: Swift.String?
        /// Configuration of the resource that executes the containerAction.
        /// This member is required.
        public var resourceConfiguration: IoTAnalyticsClientTypes.ResourceConfiguration?
        /// The values of variables used in the context of the execution of the containerized application (basically, parameters passed to the application). Each variable must have a name and a value given by one of stringValue, datasetContentVersionValue, or outputFileUriValue.
        public var variables: [IoTAnalyticsClientTypes.Variable]?

        public init (
            executionRoleArn: Swift.String? = nil,
            image: Swift.String? = nil,
            resourceConfiguration: IoTAnalyticsClientTypes.ResourceConfiguration? = nil,
            variables: [IoTAnalyticsClientTypes.Variable]? = nil
        )
        {
            self.executionRoleArn = executionRoleArn
            self.image = image
            self.resourceConfiguration = resourceConfiguration
            self.variables = variables
        }
    }

}

extension CreateChannelInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channelName
        case channelStorage
        case retentionPeriod
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channelName = self.channelName {
            try encodeContainer.encode(channelName, forKey: .channelName)
        }
        if let channelStorage = self.channelStorage {
            try encodeContainer.encode(channelStorage, forKey: .channelStorage)
        }
        if let retentionPeriod = self.retentionPeriod {
            try encodeContainer.encode(retentionPeriod, forKey: .retentionPeriod)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateChannelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/channels"
    }
}

public struct CreateChannelInput: Swift.Equatable {
    /// The name of the channel.
    /// This member is required.
    public var channelName: Swift.String?
    /// Where channel data is stored. You can choose one of serviceManagedS3 or customerManagedS3 storage. If not specified, the default is serviceManagedS3. You can't change this storage option after the channel is created.
    public var channelStorage: IoTAnalyticsClientTypes.ChannelStorage?
    /// How long, in days, message data is kept for the channel. When customerManagedS3 storage is selected, this parameter is ignored.
    public var retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod?
    /// Metadata which can be used to manage the channel.
    public var tags: [IoTAnalyticsClientTypes.Tag]?

    public init (
        channelName: Swift.String? = nil,
        channelStorage: IoTAnalyticsClientTypes.ChannelStorage? = nil,
        retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod? = nil,
        tags: [IoTAnalyticsClientTypes.Tag]? = nil
    )
    {
        self.channelName = channelName
        self.channelStorage = channelStorage
        self.retentionPeriod = retentionPeriod
        self.tags = tags
    }
}

struct CreateChannelInputBody: Swift.Equatable {
    let channelName: Swift.String?
    let channelStorage: IoTAnalyticsClientTypes.ChannelStorage?
    let retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod?
    let tags: [IoTAnalyticsClientTypes.Tag]?
}

extension CreateChannelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channelName
        case channelStorage
        case retentionPeriod
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .channelName)
        channelName = channelNameDecoded
        let channelStorageDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.ChannelStorage.self, forKey: .channelStorage)
        channelStorage = channelStorageDecoded
        let retentionPeriodDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.RetentionPeriod.self, forKey: .retentionPeriod)
        retentionPeriod = retentionPeriodDecoded
        let tagsContainer = try containerValues.decodeIfPresent([IoTAnalyticsClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[IoTAnalyticsClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [IoTAnalyticsClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateChannelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateChannelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateChannelOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateChannelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateChannelOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.channelArn = output.channelArn
            self.channelName = output.channelName
            self.retentionPeriod = output.retentionPeriod
        } else {
            self.channelArn = nil
            self.channelName = nil
            self.retentionPeriod = nil
        }
    }
}

public struct CreateChannelOutputResponse: Swift.Equatable {
    /// The ARN of the channel.
    public var channelArn: Swift.String?
    /// The name of the channel.
    public var channelName: Swift.String?
    /// How long, in days, message data is kept for the channel.
    public var retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod?

    public init (
        channelArn: Swift.String? = nil,
        channelName: Swift.String? = nil,
        retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod? = nil
    )
    {
        self.channelArn = channelArn
        self.channelName = channelName
        self.retentionPeriod = retentionPeriod
    }
}

struct CreateChannelOutputResponseBody: Swift.Equatable {
    let channelName: Swift.String?
    let channelArn: Swift.String?
    let retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod?
}

extension CreateChannelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channelArn
        case channelName
        case retentionPeriod
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .channelName)
        channelName = channelNameDecoded
        let channelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .channelArn)
        channelArn = channelArnDecoded
        let retentionPeriodDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.RetentionPeriod.self, forKey: .retentionPeriod)
        retentionPeriod = retentionPeriodDecoded
    }
}

extension CreateDatasetContentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case versionId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let versionId = self.versionId {
            try encodeContainer.encode(versionId, forKey: .versionId)
        }
    }
}

extension CreateDatasetContentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let datasetName = datasetName else {
            return nil
        }
        return "/datasets/\(datasetName.urlPercentEncoding())/content"
    }
}

public struct CreateDatasetContentInput: Swift.Equatable {
    /// The name of the dataset.
    /// This member is required.
    public var datasetName: Swift.String?
    /// The version ID of the dataset content. To specify versionId for a dataset content, the dataset must use a [DeltaTimer](https://docs.aws.amazon.com/iotanalytics/latest/APIReference/API_DeltaTime.html) filter.
    public var versionId: Swift.String?

    public init (
        datasetName: Swift.String? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.datasetName = datasetName
        self.versionId = versionId
    }
}

struct CreateDatasetContentInputBody: Swift.Equatable {
    let versionId: Swift.String?
}

extension CreateDatasetContentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case versionId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let versionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionId)
        versionId = versionIdDecoded
    }
}

extension CreateDatasetContentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDatasetContentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateDatasetContentOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDatasetContentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateDatasetContentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.versionId = output.versionId
        } else {
            self.versionId = nil
        }
    }
}

public struct CreateDatasetContentOutputResponse: Swift.Equatable {
    /// The version ID of the dataset contents that are being created.
    public var versionId: Swift.String?

    public init (
        versionId: Swift.String? = nil
    )
    {
        self.versionId = versionId
    }
}

struct CreateDatasetContentOutputResponseBody: Swift.Equatable {
    let versionId: Swift.String?
}

extension CreateDatasetContentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case versionId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let versionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionId)
        versionId = versionIdDecoded
    }
}

extension CreateDatasetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions
        case contentDeliveryRules
        case datasetName
        case lateDataRules
        case retentionPeriod
        case tags
        case triggers
        case versioningConfiguration
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actions = actions {
            var actionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .actions)
            for datasetaction0 in actions {
                try actionsContainer.encode(datasetaction0)
            }
        }
        if let contentDeliveryRules = contentDeliveryRules {
            var contentDeliveryRulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .contentDeliveryRules)
            for datasetcontentdeliveryrule0 in contentDeliveryRules {
                try contentDeliveryRulesContainer.encode(datasetcontentdeliveryrule0)
            }
        }
        if let datasetName = self.datasetName {
            try encodeContainer.encode(datasetName, forKey: .datasetName)
        }
        if let lateDataRules = lateDataRules {
            var lateDataRulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lateDataRules)
            for latedatarule0 in lateDataRules {
                try lateDataRulesContainer.encode(latedatarule0)
            }
        }
        if let retentionPeriod = self.retentionPeriod {
            try encodeContainer.encode(retentionPeriod, forKey: .retentionPeriod)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let triggers = triggers {
            var triggersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .triggers)
            for datasettrigger0 in triggers {
                try triggersContainer.encode(datasettrigger0)
            }
        }
        if let versioningConfiguration = self.versioningConfiguration {
            try encodeContainer.encode(versioningConfiguration, forKey: .versioningConfiguration)
        }
    }
}

extension CreateDatasetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/datasets"
    }
}

public struct CreateDatasetInput: Swift.Equatable {
    /// A list of actions that create the dataset contents.
    /// This member is required.
    public var actions: [IoTAnalyticsClientTypes.DatasetAction]?
    /// When dataset contents are created, they are delivered to destinations specified here.
    public var contentDeliveryRules: [IoTAnalyticsClientTypes.DatasetContentDeliveryRule]?
    /// The name of the dataset.
    /// This member is required.
    public var datasetName: Swift.String?
    /// A list of data rules that send notifications to CloudWatch, when data arrives late. To specify lateDataRules, the dataset must use a [DeltaTimer](https://docs.aws.amazon.com/iotanalytics/latest/APIReference/API_DeltaTime.html) filter.
    public var lateDataRules: [IoTAnalyticsClientTypes.LateDataRule]?
    /// Optional. How long, in days, versions of dataset contents are kept for the dataset. If not specified or set to null, versions of dataset contents are retained for at most 90 days. The number of versions of dataset contents retained is determined by the versioningConfiguration parameter. For more information, see [ Keeping Multiple Versions of IoT Analytics datasets](https://docs.aws.amazon.com/iotanalytics/latest/userguide/getting-started.html#aws-iot-analytics-dataset-versions) in the IoT Analytics User Guide.
    public var retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod?
    /// Metadata which can be used to manage the dataset.
    public var tags: [IoTAnalyticsClientTypes.Tag]?
    /// A list of triggers. A trigger causes dataset contents to be populated at a specified time interval or when another dataset's contents are created. The list of triggers can be empty or contain up to five DataSetTrigger objects.
    public var triggers: [IoTAnalyticsClientTypes.DatasetTrigger]?
    /// Optional. How many versions of dataset contents are kept. If not specified or set to null, only the latest version plus the latest succeeded version (if they are different) are kept for the time period specified by the retentionPeriod parameter. For more information, see [Keeping Multiple Versions of IoT Analytics datasets](https://docs.aws.amazon.com/iotanalytics/latest/userguide/getting-started.html#aws-iot-analytics-dataset-versions) in the IoT Analytics User Guide.
    public var versioningConfiguration: IoTAnalyticsClientTypes.VersioningConfiguration?

    public init (
        actions: [IoTAnalyticsClientTypes.DatasetAction]? = nil,
        contentDeliveryRules: [IoTAnalyticsClientTypes.DatasetContentDeliveryRule]? = nil,
        datasetName: Swift.String? = nil,
        lateDataRules: [IoTAnalyticsClientTypes.LateDataRule]? = nil,
        retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod? = nil,
        tags: [IoTAnalyticsClientTypes.Tag]? = nil,
        triggers: [IoTAnalyticsClientTypes.DatasetTrigger]? = nil,
        versioningConfiguration: IoTAnalyticsClientTypes.VersioningConfiguration? = nil
    )
    {
        self.actions = actions
        self.contentDeliveryRules = contentDeliveryRules
        self.datasetName = datasetName
        self.lateDataRules = lateDataRules
        self.retentionPeriod = retentionPeriod
        self.tags = tags
        self.triggers = triggers
        self.versioningConfiguration = versioningConfiguration
    }
}

struct CreateDatasetInputBody: Swift.Equatable {
    let datasetName: Swift.String?
    let actions: [IoTAnalyticsClientTypes.DatasetAction]?
    let triggers: [IoTAnalyticsClientTypes.DatasetTrigger]?
    let contentDeliveryRules: [IoTAnalyticsClientTypes.DatasetContentDeliveryRule]?
    let retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod?
    let versioningConfiguration: IoTAnalyticsClientTypes.VersioningConfiguration?
    let tags: [IoTAnalyticsClientTypes.Tag]?
    let lateDataRules: [IoTAnalyticsClientTypes.LateDataRule]?
}

extension CreateDatasetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions
        case contentDeliveryRules
        case datasetName
        case lateDataRules
        case retentionPeriod
        case tags
        case triggers
        case versioningConfiguration
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let actionsContainer = try containerValues.decodeIfPresent([IoTAnalyticsClientTypes.DatasetAction?].self, forKey: .actions)
        var actionsDecoded0:[IoTAnalyticsClientTypes.DatasetAction]? = nil
        if let actionsContainer = actionsContainer {
            actionsDecoded0 = [IoTAnalyticsClientTypes.DatasetAction]()
            for structure0 in actionsContainer {
                if let structure0 = structure0 {
                    actionsDecoded0?.append(structure0)
                }
            }
        }
        actions = actionsDecoded0
        let triggersContainer = try containerValues.decodeIfPresent([IoTAnalyticsClientTypes.DatasetTrigger?].self, forKey: .triggers)
        var triggersDecoded0:[IoTAnalyticsClientTypes.DatasetTrigger]? = nil
        if let triggersContainer = triggersContainer {
            triggersDecoded0 = [IoTAnalyticsClientTypes.DatasetTrigger]()
            for structure0 in triggersContainer {
                if let structure0 = structure0 {
                    triggersDecoded0?.append(structure0)
                }
            }
        }
        triggers = triggersDecoded0
        let contentDeliveryRulesContainer = try containerValues.decodeIfPresent([IoTAnalyticsClientTypes.DatasetContentDeliveryRule?].self, forKey: .contentDeliveryRules)
        var contentDeliveryRulesDecoded0:[IoTAnalyticsClientTypes.DatasetContentDeliveryRule]? = nil
        if let contentDeliveryRulesContainer = contentDeliveryRulesContainer {
            contentDeliveryRulesDecoded0 = [IoTAnalyticsClientTypes.DatasetContentDeliveryRule]()
            for structure0 in contentDeliveryRulesContainer {
                if let structure0 = structure0 {
                    contentDeliveryRulesDecoded0?.append(structure0)
                }
            }
        }
        contentDeliveryRules = contentDeliveryRulesDecoded0
        let retentionPeriodDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.RetentionPeriod.self, forKey: .retentionPeriod)
        retentionPeriod = retentionPeriodDecoded
        let versioningConfigurationDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.VersioningConfiguration.self, forKey: .versioningConfiguration)
        versioningConfiguration = versioningConfigurationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([IoTAnalyticsClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[IoTAnalyticsClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [IoTAnalyticsClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let lateDataRulesContainer = try containerValues.decodeIfPresent([IoTAnalyticsClientTypes.LateDataRule?].self, forKey: .lateDataRules)
        var lateDataRulesDecoded0:[IoTAnalyticsClientTypes.LateDataRule]? = nil
        if let lateDataRulesContainer = lateDataRulesContainer {
            lateDataRulesDecoded0 = [IoTAnalyticsClientTypes.LateDataRule]()
            for structure0 in lateDataRulesContainer {
                if let structure0 = structure0 {
                    lateDataRulesDecoded0?.append(structure0)
                }
            }
        }
        lateDataRules = lateDataRulesDecoded0
    }
}

extension CreateDatasetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDatasetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateDatasetOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDatasetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateDatasetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.datasetArn = output.datasetArn
            self.datasetName = output.datasetName
            self.retentionPeriod = output.retentionPeriod
        } else {
            self.datasetArn = nil
            self.datasetName = nil
            self.retentionPeriod = nil
        }
    }
}

public struct CreateDatasetOutputResponse: Swift.Equatable {
    /// The ARN of the dataset.
    public var datasetArn: Swift.String?
    /// The name of the dataset.
    public var datasetName: Swift.String?
    /// How long, in days, dataset contents are kept for the dataset.
    public var retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod?

    public init (
        datasetArn: Swift.String? = nil,
        datasetName: Swift.String? = nil,
        retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod? = nil
    )
    {
        self.datasetArn = datasetArn
        self.datasetName = datasetName
        self.retentionPeriod = retentionPeriod
    }
}

struct CreateDatasetOutputResponseBody: Swift.Equatable {
    let datasetName: Swift.String?
    let datasetArn: Swift.String?
    let retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod?
}

extension CreateDatasetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetArn
        case datasetName
        case retentionPeriod
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let datasetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetArn)
        datasetArn = datasetArnDecoded
        let retentionPeriodDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.RetentionPeriod.self, forKey: .retentionPeriod)
        retentionPeriod = retentionPeriodDecoded
    }
}

extension CreateDatastoreInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datastoreName
        case datastorePartitions
        case datastoreStorage
        case fileFormatConfiguration
        case retentionPeriod
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let datastoreName = self.datastoreName {
            try encodeContainer.encode(datastoreName, forKey: .datastoreName)
        }
        if let datastorePartitions = self.datastorePartitions {
            try encodeContainer.encode(datastorePartitions, forKey: .datastorePartitions)
        }
        if let datastoreStorage = self.datastoreStorage {
            try encodeContainer.encode(datastoreStorage, forKey: .datastoreStorage)
        }
        if let fileFormatConfiguration = self.fileFormatConfiguration {
            try encodeContainer.encode(fileFormatConfiguration, forKey: .fileFormatConfiguration)
        }
        if let retentionPeriod = self.retentionPeriod {
            try encodeContainer.encode(retentionPeriod, forKey: .retentionPeriod)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateDatastoreInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/datastores"
    }
}

public struct CreateDatastoreInput: Swift.Equatable {
    /// The name of the data store.
    /// This member is required.
    public var datastoreName: Swift.String?
    /// Contains information about the partition dimensions in a data store.
    public var datastorePartitions: IoTAnalyticsClientTypes.DatastorePartitions?
    /// Where data in a data store is stored.. You can choose serviceManagedS3 storage, customerManagedS3 storage, or iotSiteWiseMultiLayerStorage storage. The default is serviceManagedS3. You can't change the choice of Amazon S3 storage after your data store is created.
    public var datastoreStorage: IoTAnalyticsClientTypes.DatastoreStorage?
    /// Contains the configuration information of file formats. IoT Analytics data stores support JSON and [Parquet](https://parquet.apache.org/). The default file format is JSON. You can specify only one format. You can't change the file format after you create the data store.
    public var fileFormatConfiguration: IoTAnalyticsClientTypes.FileFormatConfiguration?
    /// How long, in days, message data is kept for the data store. When customerManagedS3 storage is selected, this parameter is ignored.
    public var retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod?
    /// Metadata which can be used to manage the data store.
    public var tags: [IoTAnalyticsClientTypes.Tag]?

    public init (
        datastoreName: Swift.String? = nil,
        datastorePartitions: IoTAnalyticsClientTypes.DatastorePartitions? = nil,
        datastoreStorage: IoTAnalyticsClientTypes.DatastoreStorage? = nil,
        fileFormatConfiguration: IoTAnalyticsClientTypes.FileFormatConfiguration? = nil,
        retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod? = nil,
        tags: [IoTAnalyticsClientTypes.Tag]? = nil
    )
    {
        self.datastoreName = datastoreName
        self.datastorePartitions = datastorePartitions
        self.datastoreStorage = datastoreStorage
        self.fileFormatConfiguration = fileFormatConfiguration
        self.retentionPeriod = retentionPeriod
        self.tags = tags
    }
}

struct CreateDatastoreInputBody: Swift.Equatable {
    let datastoreName: Swift.String?
    let datastoreStorage: IoTAnalyticsClientTypes.DatastoreStorage?
    let retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod?
    let tags: [IoTAnalyticsClientTypes.Tag]?
    let fileFormatConfiguration: IoTAnalyticsClientTypes.FileFormatConfiguration?
    let datastorePartitions: IoTAnalyticsClientTypes.DatastorePartitions?
}

extension CreateDatastoreInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datastoreName
        case datastorePartitions
        case datastoreStorage
        case fileFormatConfiguration
        case retentionPeriod
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datastoreNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datastoreName)
        datastoreName = datastoreNameDecoded
        let datastoreStorageDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.DatastoreStorage.self, forKey: .datastoreStorage)
        datastoreStorage = datastoreStorageDecoded
        let retentionPeriodDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.RetentionPeriod.self, forKey: .retentionPeriod)
        retentionPeriod = retentionPeriodDecoded
        let tagsContainer = try containerValues.decodeIfPresent([IoTAnalyticsClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[IoTAnalyticsClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [IoTAnalyticsClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let fileFormatConfigurationDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.FileFormatConfiguration.self, forKey: .fileFormatConfiguration)
        fileFormatConfiguration = fileFormatConfigurationDecoded
        let datastorePartitionsDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.DatastorePartitions.self, forKey: .datastorePartitions)
        datastorePartitions = datastorePartitionsDecoded
    }
}

extension CreateDatastoreOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDatastoreOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateDatastoreOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDatastoreOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateDatastoreOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.datastoreArn = output.datastoreArn
            self.datastoreName = output.datastoreName
            self.retentionPeriod = output.retentionPeriod
        } else {
            self.datastoreArn = nil
            self.datastoreName = nil
            self.retentionPeriod = nil
        }
    }
}

public struct CreateDatastoreOutputResponse: Swift.Equatable {
    /// The ARN of the data store.
    public var datastoreArn: Swift.String?
    /// The name of the data store.
    public var datastoreName: Swift.String?
    /// How long, in days, message data is kept for the data store.
    public var retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod?

    public init (
        datastoreArn: Swift.String? = nil,
        datastoreName: Swift.String? = nil,
        retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod? = nil
    )
    {
        self.datastoreArn = datastoreArn
        self.datastoreName = datastoreName
        self.retentionPeriod = retentionPeriod
    }
}

struct CreateDatastoreOutputResponseBody: Swift.Equatable {
    let datastoreName: Swift.String?
    let datastoreArn: Swift.String?
    let retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod?
}

extension CreateDatastoreOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datastoreArn
        case datastoreName
        case retentionPeriod
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datastoreNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datastoreName)
        datastoreName = datastoreNameDecoded
        let datastoreArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datastoreArn)
        datastoreArn = datastoreArnDecoded
        let retentionPeriodDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.RetentionPeriod.self, forKey: .retentionPeriod)
        retentionPeriod = retentionPeriodDecoded
    }
}

extension CreatePipelineInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineActivities
        case pipelineName
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pipelineActivities = pipelineActivities {
            var pipelineActivitiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pipelineActivities)
            for pipelineactivity0 in pipelineActivities {
                try pipelineActivitiesContainer.encode(pipelineactivity0)
            }
        }
        if let pipelineName = self.pipelineName {
            try encodeContainer.encode(pipelineName, forKey: .pipelineName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreatePipelineInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/pipelines"
    }
}

public struct CreatePipelineInput: Swift.Equatable {
    /// A list of PipelineActivity objects. Activities perform transformations on your messages, such as removing, renaming or adding message attributes; filtering messages based on attribute values; invoking your Lambda unctions on messages for advanced processing; or performing mathematical transformations to normalize device data. The list can be 2-25 PipelineActivity objects and must contain both a channel and a datastore activity. Each entry in the list must contain only one activity. For example: pipelineActivities = [ { "channel": { ... } }, { "lambda": { ... } }, ... ]
    /// This member is required.
    public var pipelineActivities: [IoTAnalyticsClientTypes.PipelineActivity]?
    /// The name of the pipeline.
    /// This member is required.
    public var pipelineName: Swift.String?
    /// Metadata which can be used to manage the pipeline.
    public var tags: [IoTAnalyticsClientTypes.Tag]?

    public init (
        pipelineActivities: [IoTAnalyticsClientTypes.PipelineActivity]? = nil,
        pipelineName: Swift.String? = nil,
        tags: [IoTAnalyticsClientTypes.Tag]? = nil
    )
    {
        self.pipelineActivities = pipelineActivities
        self.pipelineName = pipelineName
        self.tags = tags
    }
}

struct CreatePipelineInputBody: Swift.Equatable {
    let pipelineName: Swift.String?
    let pipelineActivities: [IoTAnalyticsClientTypes.PipelineActivity]?
    let tags: [IoTAnalyticsClientTypes.Tag]?
}

extension CreatePipelineInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineActivities
        case pipelineName
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineName)
        pipelineName = pipelineNameDecoded
        let pipelineActivitiesContainer = try containerValues.decodeIfPresent([IoTAnalyticsClientTypes.PipelineActivity?].self, forKey: .pipelineActivities)
        var pipelineActivitiesDecoded0:[IoTAnalyticsClientTypes.PipelineActivity]? = nil
        if let pipelineActivitiesContainer = pipelineActivitiesContainer {
            pipelineActivitiesDecoded0 = [IoTAnalyticsClientTypes.PipelineActivity]()
            for structure0 in pipelineActivitiesContainer {
                if let structure0 = structure0 {
                    pipelineActivitiesDecoded0?.append(structure0)
                }
            }
        }
        pipelineActivities = pipelineActivitiesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([IoTAnalyticsClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[IoTAnalyticsClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [IoTAnalyticsClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreatePipelineOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreatePipelineOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreatePipelineOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreatePipelineOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreatePipelineOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.pipelineArn = output.pipelineArn
            self.pipelineName = output.pipelineName
        } else {
            self.pipelineArn = nil
            self.pipelineName = nil
        }
    }
}

public struct CreatePipelineOutputResponse: Swift.Equatable {
    /// The ARN of the pipeline.
    public var pipelineArn: Swift.String?
    /// The name of the pipeline.
    public var pipelineName: Swift.String?

    public init (
        pipelineArn: Swift.String? = nil,
        pipelineName: Swift.String? = nil
    )
    {
        self.pipelineArn = pipelineArn
        self.pipelineName = pipelineName
    }
}

struct CreatePipelineOutputResponseBody: Swift.Equatable {
    let pipelineName: Swift.String?
    let pipelineArn: Swift.String?
}

extension CreatePipelineOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineArn
        case pipelineName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineName)
        pipelineName = pipelineNameDecoded
        let pipelineArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineArn)
        pipelineArn = pipelineArnDecoded
    }
}

extension IoTAnalyticsClientTypes.CustomerManagedChannelS3Storage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket
        case keyPrefix
        case roleArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucket = self.bucket {
            try encodeContainer.encode(bucket, forKey: .bucket)
        }
        if let keyPrefix = self.keyPrefix {
            try encodeContainer.encode(keyPrefix, forKey: .keyPrefix)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let keyPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyPrefix)
        keyPrefix = keyPrefixDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// Used to store channel data in an S3 bucket that you manage. If customer-managed storage is selected, the retentionPeriod parameter is ignored. You can't change the choice of S3 storage after the data store is created.
    public struct CustomerManagedChannelS3Storage: Swift.Equatable {
        /// The name of the S3 bucket in which channel data is stored.
        /// This member is required.
        public var bucket: Swift.String?
        /// (Optional) The prefix used to create the keys of the channel data objects. Each object in an S3 bucket has a key that is its unique identifier in the bucket. Each object in a bucket has exactly one key. The prefix must end with a forward slash (/).
        public var keyPrefix: Swift.String?
        /// The ARN of the role that grants IoT Analytics permission to interact with your Amazon S3 resources.
        /// This member is required.
        public var roleArn: Swift.String?

        public init (
            bucket: Swift.String? = nil,
            keyPrefix: Swift.String? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.keyPrefix = keyPrefix
            self.roleArn = roleArn
        }
    }

}

extension IoTAnalyticsClientTypes.CustomerManagedChannelS3StorageSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket
        case keyPrefix
        case roleArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucket = self.bucket {
            try encodeContainer.encode(bucket, forKey: .bucket)
        }
        if let keyPrefix = self.keyPrefix {
            try encodeContainer.encode(keyPrefix, forKey: .keyPrefix)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let keyPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyPrefix)
        keyPrefix = keyPrefixDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// Used to store channel data in an S3 bucket that you manage.
    public struct CustomerManagedChannelS3StorageSummary: Swift.Equatable {
        /// The name of the S3 bucket in which channel data is stored.
        public var bucket: Swift.String?
        /// (Optional) The prefix used to create the keys of the channel data objects. Each object in an S3 bucket has a key that is its unique identifier within the bucket (each object in a bucket has exactly one key). The prefix must end with a forward slash (/).
        public var keyPrefix: Swift.String?
        /// The ARN of the role that grants IoT Analytics permission to interact with your Amazon S3 resources.
        public var roleArn: Swift.String?

        public init (
            bucket: Swift.String? = nil,
            keyPrefix: Swift.String? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.keyPrefix = keyPrefix
            self.roleArn = roleArn
        }
    }

}

extension IoTAnalyticsClientTypes.CustomerManagedDatastoreS3Storage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket
        case keyPrefix
        case roleArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucket = self.bucket {
            try encodeContainer.encode(bucket, forKey: .bucket)
        }
        if let keyPrefix = self.keyPrefix {
            try encodeContainer.encode(keyPrefix, forKey: .keyPrefix)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let keyPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyPrefix)
        keyPrefix = keyPrefixDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// S3-customer-managed; When you choose customer-managed storage, the retentionPeriod parameter is ignored. You can't change the choice of Amazon S3 storage after your data store is created.
    public struct CustomerManagedDatastoreS3Storage: Swift.Equatable {
        /// The name of the Amazon S3 bucket where your data is stored.
        /// This member is required.
        public var bucket: Swift.String?
        /// (Optional) The prefix used to create the keys of the data store data objects. Each object in an Amazon S3 bucket has a key that is its unique identifier in the bucket. Each object in a bucket has exactly one key. The prefix must end with a forward slash (/).
        public var keyPrefix: Swift.String?
        /// The ARN of the role that grants IoT Analytics permission to interact with your Amazon S3 resources.
        /// This member is required.
        public var roleArn: Swift.String?

        public init (
            bucket: Swift.String? = nil,
            keyPrefix: Swift.String? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.keyPrefix = keyPrefix
            self.roleArn = roleArn
        }
    }

}

extension IoTAnalyticsClientTypes.CustomerManagedDatastoreS3StorageSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket
        case keyPrefix
        case roleArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucket = self.bucket {
            try encodeContainer.encode(bucket, forKey: .bucket)
        }
        if let keyPrefix = self.keyPrefix {
            try encodeContainer.encode(keyPrefix, forKey: .keyPrefix)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let keyPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyPrefix)
        keyPrefix = keyPrefixDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// Contains information about the data store that you manage.
    public struct CustomerManagedDatastoreS3StorageSummary: Swift.Equatable {
        /// The name of the Amazon S3 bucket where your data is stored.
        public var bucket: Swift.String?
        /// (Optional) The prefix used to create the keys of the data store data objects. Each object in an Amazon S3 bucket has a key that is its unique identifier in the bucket. Each object in a bucket has exactly one key. The prefix must end with a forward slash (/).
        public var keyPrefix: Swift.String?
        /// The ARN of the role that grants IoT Analytics permission to interact with your Amazon S3 resources.
        public var roleArn: Swift.String?

        public init (
            bucket: Swift.String? = nil,
            keyPrefix: Swift.String? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.keyPrefix = keyPrefix
            self.roleArn = roleArn
        }
    }

}

extension IoTAnalyticsClientTypes.Dataset: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions
        case arn
        case contentDeliveryRules
        case creationTime
        case lastUpdateTime
        case lateDataRules
        case name
        case retentionPeriod
        case status
        case triggers
        case versioningConfiguration
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actions = actions {
            var actionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .actions)
            for datasetaction0 in actions {
                try actionsContainer.encode(datasetaction0)
            }
        }
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let contentDeliveryRules = contentDeliveryRules {
            var contentDeliveryRulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .contentDeliveryRules)
            for datasetcontentdeliveryrule0 in contentDeliveryRules {
                try contentDeliveryRulesContainer.encode(datasetcontentdeliveryrule0)
            }
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encodeTimestamp(creationTime, format: .epochSeconds, forKey: .creationTime)
        }
        if let lastUpdateTime = self.lastUpdateTime {
            try encodeContainer.encodeTimestamp(lastUpdateTime, format: .epochSeconds, forKey: .lastUpdateTime)
        }
        if let lateDataRules = lateDataRules {
            var lateDataRulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lateDataRules)
            for latedatarule0 in lateDataRules {
                try lateDataRulesContainer.encode(latedatarule0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let retentionPeriod = self.retentionPeriod {
            try encodeContainer.encode(retentionPeriod, forKey: .retentionPeriod)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let triggers = triggers {
            var triggersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .triggers)
            for datasettrigger0 in triggers {
                try triggersContainer.encode(datasettrigger0)
            }
        }
        if let versioningConfiguration = self.versioningConfiguration {
            try encodeContainer.encode(versioningConfiguration, forKey: .versioningConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let actionsContainer = try containerValues.decodeIfPresent([IoTAnalyticsClientTypes.DatasetAction?].self, forKey: .actions)
        var actionsDecoded0:[IoTAnalyticsClientTypes.DatasetAction]? = nil
        if let actionsContainer = actionsContainer {
            actionsDecoded0 = [IoTAnalyticsClientTypes.DatasetAction]()
            for structure0 in actionsContainer {
                if let structure0 = structure0 {
                    actionsDecoded0?.append(structure0)
                }
            }
        }
        actions = actionsDecoded0
        let triggersContainer = try containerValues.decodeIfPresent([IoTAnalyticsClientTypes.DatasetTrigger?].self, forKey: .triggers)
        var triggersDecoded0:[IoTAnalyticsClientTypes.DatasetTrigger]? = nil
        if let triggersContainer = triggersContainer {
            triggersDecoded0 = [IoTAnalyticsClientTypes.DatasetTrigger]()
            for structure0 in triggersContainer {
                if let structure0 = structure0 {
                    triggersDecoded0?.append(structure0)
                }
            }
        }
        triggers = triggersDecoded0
        let contentDeliveryRulesContainer = try containerValues.decodeIfPresent([IoTAnalyticsClientTypes.DatasetContentDeliveryRule?].self, forKey: .contentDeliveryRules)
        var contentDeliveryRulesDecoded0:[IoTAnalyticsClientTypes.DatasetContentDeliveryRule]? = nil
        if let contentDeliveryRulesContainer = contentDeliveryRulesContainer {
            contentDeliveryRulesDecoded0 = [IoTAnalyticsClientTypes.DatasetContentDeliveryRule]()
            for structure0 in contentDeliveryRulesContainer {
                if let structure0 = structure0 {
                    contentDeliveryRulesDecoded0?.append(structure0)
                }
            }
        }
        contentDeliveryRules = contentDeliveryRulesDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.DatasetStatus.self, forKey: .status)
        status = statusDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastUpdateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdateTime)
        lastUpdateTime = lastUpdateTimeDecoded
        let retentionPeriodDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.RetentionPeriod.self, forKey: .retentionPeriod)
        retentionPeriod = retentionPeriodDecoded
        let versioningConfigurationDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.VersioningConfiguration.self, forKey: .versioningConfiguration)
        versioningConfiguration = versioningConfigurationDecoded
        let lateDataRulesContainer = try containerValues.decodeIfPresent([IoTAnalyticsClientTypes.LateDataRule?].self, forKey: .lateDataRules)
        var lateDataRulesDecoded0:[IoTAnalyticsClientTypes.LateDataRule]? = nil
        if let lateDataRulesContainer = lateDataRulesContainer {
            lateDataRulesDecoded0 = [IoTAnalyticsClientTypes.LateDataRule]()
            for structure0 in lateDataRulesContainer {
                if let structure0 = structure0 {
                    lateDataRulesDecoded0?.append(structure0)
                }
            }
        }
        lateDataRules = lateDataRulesDecoded0
    }
}

extension IoTAnalyticsClientTypes {
    /// Information about a dataset.
    public struct Dataset: Swift.Equatable {
        /// The DatasetAction objects that automatically create the dataset contents.
        public var actions: [IoTAnalyticsClientTypes.DatasetAction]?
        /// The ARN of the dataset.
        public var arn: Swift.String?
        /// When dataset contents are created they are delivered to destinations specified here.
        public var contentDeliveryRules: [IoTAnalyticsClientTypes.DatasetContentDeliveryRule]?
        /// When the dataset was created.
        public var creationTime: ClientRuntime.Date?
        /// The last time the dataset was updated.
        public var lastUpdateTime: ClientRuntime.Date?
        /// A list of data rules that send notifications to CloudWatch, when data arrives late. To specify lateDataRules, the dataset must use a [DeltaTimer](https://docs.aws.amazon.com/iotanalytics/latest/APIReference/API_DeltaTime.html) filter.
        public var lateDataRules: [IoTAnalyticsClientTypes.LateDataRule]?
        /// The name of the dataset.
        public var name: Swift.String?
        /// Optional. How long, in days, message data is kept for the dataset.
        public var retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod?
        /// The status of the dataset.
        public var status: IoTAnalyticsClientTypes.DatasetStatus?
        /// The DatasetTrigger objects that specify when the dataset is automatically updated.
        public var triggers: [IoTAnalyticsClientTypes.DatasetTrigger]?
        /// Optional. How many versions of dataset contents are kept. If not specified or set to null, only the latest version plus the latest succeeded version (if they are different) are kept for the time period specified by the retentionPeriod parameter. For more information, see [ Keeping Multiple Versions of IoT Analytics datasets](https://docs.aws.amazon.com/iotanalytics/latest/userguide/getting-started.html#aws-iot-analytics-dataset-versions) in the IoT Analytics User Guide.
        public var versioningConfiguration: IoTAnalyticsClientTypes.VersioningConfiguration?

        public init (
            actions: [IoTAnalyticsClientTypes.DatasetAction]? = nil,
            arn: Swift.String? = nil,
            contentDeliveryRules: [IoTAnalyticsClientTypes.DatasetContentDeliveryRule]? = nil,
            creationTime: ClientRuntime.Date? = nil,
            lastUpdateTime: ClientRuntime.Date? = nil,
            lateDataRules: [IoTAnalyticsClientTypes.LateDataRule]? = nil,
            name: Swift.String? = nil,
            retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod? = nil,
            status: IoTAnalyticsClientTypes.DatasetStatus? = nil,
            triggers: [IoTAnalyticsClientTypes.DatasetTrigger]? = nil,
            versioningConfiguration: IoTAnalyticsClientTypes.VersioningConfiguration? = nil
        )
        {
            self.actions = actions
            self.arn = arn
            self.contentDeliveryRules = contentDeliveryRules
            self.creationTime = creationTime
            self.lastUpdateTime = lastUpdateTime
            self.lateDataRules = lateDataRules
            self.name = name
            self.retentionPeriod = retentionPeriod
            self.status = status
            self.triggers = triggers
            self.versioningConfiguration = versioningConfiguration
        }
    }

}

extension IoTAnalyticsClientTypes.DatasetAction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionName
        case containerAction
        case queryAction
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionName = self.actionName {
            try encodeContainer.encode(actionName, forKey: .actionName)
        }
        if let containerAction = self.containerAction {
            try encodeContainer.encode(containerAction, forKey: .containerAction)
        }
        if let queryAction = self.queryAction {
            try encodeContainer.encode(queryAction, forKey: .queryAction)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionName)
        actionName = actionNameDecoded
        let queryActionDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.SqlQueryDatasetAction.self, forKey: .queryAction)
        queryAction = queryActionDecoded
        let containerActionDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.ContainerDatasetAction.self, forKey: .containerAction)
        containerAction = containerActionDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// A DatasetAction object that specifies how dataset contents are automatically created.
    public struct DatasetAction: Swift.Equatable {
        /// The name of the dataset action by which dataset contents are automatically created.
        public var actionName: Swift.String?
        /// Information that allows the system to run a containerized application to create the dataset contents. The application must be in a Docker container along with any required support libraries.
        public var containerAction: IoTAnalyticsClientTypes.ContainerDatasetAction?
        /// An SqlQueryDatasetAction object that uses an SQL query to automatically create dataset contents.
        public var queryAction: IoTAnalyticsClientTypes.SqlQueryDatasetAction?

        public init (
            actionName: Swift.String? = nil,
            containerAction: IoTAnalyticsClientTypes.ContainerDatasetAction? = nil,
            queryAction: IoTAnalyticsClientTypes.SqlQueryDatasetAction? = nil
        )
        {
            self.actionName = actionName
            self.containerAction = containerAction
            self.queryAction = queryAction
        }
    }

}

extension IoTAnalyticsClientTypes.DatasetActionSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionName
        case actionType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionName = self.actionName {
            try encodeContainer.encode(actionName, forKey: .actionName)
        }
        if let actionType = self.actionType {
            try encodeContainer.encode(actionType.rawValue, forKey: .actionType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionName)
        actionName = actionNameDecoded
        let actionTypeDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.DatasetActionType.self, forKey: .actionType)
        actionType = actionTypeDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// Information about the action that automatically creates the dataset's contents.
    public struct DatasetActionSummary: Swift.Equatable {
        /// The name of the action that automatically creates the dataset's contents.
        public var actionName: Swift.String?
        /// The type of action by which the dataset's contents are automatically created.
        public var actionType: IoTAnalyticsClientTypes.DatasetActionType?

        public init (
            actionName: Swift.String? = nil,
            actionType: IoTAnalyticsClientTypes.DatasetActionType? = nil
        )
        {
            self.actionName = actionName
            self.actionType = actionType
        }
    }

}

extension IoTAnalyticsClientTypes {
    public enum DatasetActionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case container
        case query
        case sdkUnknown(Swift.String)

        public static var allCases: [DatasetActionType] {
            return [
                .container,
                .query,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .container: return "CONTAINER"
            case .query: return "QUERY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DatasetActionType(rawValue: rawValue) ?? DatasetActionType.sdkUnknown(rawValue)
        }
    }
}

extension IoTAnalyticsClientTypes.DatasetContentDeliveryDestination: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case iotEventsDestinationConfiguration
        case s3DestinationConfiguration
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let iotEventsDestinationConfiguration = self.iotEventsDestinationConfiguration {
            try encodeContainer.encode(iotEventsDestinationConfiguration, forKey: .iotEventsDestinationConfiguration)
        }
        if let s3DestinationConfiguration = self.s3DestinationConfiguration {
            try encodeContainer.encode(s3DestinationConfiguration, forKey: .s3DestinationConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let iotEventsDestinationConfigurationDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.IotEventsDestinationConfiguration.self, forKey: .iotEventsDestinationConfiguration)
        iotEventsDestinationConfiguration = iotEventsDestinationConfigurationDecoded
        let s3DestinationConfigurationDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.S3DestinationConfiguration.self, forKey: .s3DestinationConfiguration)
        s3DestinationConfiguration = s3DestinationConfigurationDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// The destination to which dataset contents are delivered.
    public struct DatasetContentDeliveryDestination: Swift.Equatable {
        /// Configuration information for delivery of dataset contents to IoT Events.
        public var iotEventsDestinationConfiguration: IoTAnalyticsClientTypes.IotEventsDestinationConfiguration?
        /// Configuration information for delivery of dataset contents to Amazon S3.
        public var s3DestinationConfiguration: IoTAnalyticsClientTypes.S3DestinationConfiguration?

        public init (
            iotEventsDestinationConfiguration: IoTAnalyticsClientTypes.IotEventsDestinationConfiguration? = nil,
            s3DestinationConfiguration: IoTAnalyticsClientTypes.S3DestinationConfiguration? = nil
        )
        {
            self.iotEventsDestinationConfiguration = iotEventsDestinationConfiguration
            self.s3DestinationConfiguration = s3DestinationConfiguration
        }
    }

}

extension IoTAnalyticsClientTypes.DatasetContentDeliveryRule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destination
        case entryName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destination = self.destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let entryName = self.entryName {
            try encodeContainer.encode(entryName, forKey: .entryName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let entryNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .entryName)
        entryName = entryNameDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.DatasetContentDeliveryDestination.self, forKey: .destination)
        destination = destinationDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// When dataset contents are created, they are delivered to destination specified here.
    public struct DatasetContentDeliveryRule: Swift.Equatable {
        /// The destination to which dataset contents are delivered.
        /// This member is required.
        public var destination: IoTAnalyticsClientTypes.DatasetContentDeliveryDestination?
        /// The name of the dataset content delivery rules entry.
        public var entryName: Swift.String?

        public init (
            destination: IoTAnalyticsClientTypes.DatasetContentDeliveryDestination? = nil,
            entryName: Swift.String? = nil
        )
        {
            self.destination = destination
            self.entryName = entryName
        }
    }

}

extension IoTAnalyticsClientTypes {
    public enum DatasetContentState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creating
        case failed
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [DatasetContentState] {
            return [
                .creating,
                .failed,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creating: return "CREATING"
            case .failed: return "FAILED"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DatasetContentState(rawValue: rawValue) ?? DatasetContentState.sdkUnknown(rawValue)
        }
    }
}

extension IoTAnalyticsClientTypes.DatasetContentStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case reason
        case state
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let reason = self.reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.DatasetContentState.self, forKey: .state)
        state = stateDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reason)
        reason = reasonDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// The state of the dataset contents and the reason they are in this state.
    public struct DatasetContentStatus: Swift.Equatable {
        /// The reason the dataset contents are in this state.
        public var reason: Swift.String?
        /// The state of the dataset contents. Can be one of READY, CREATING, SUCCEEDED, or FAILED.
        public var state: IoTAnalyticsClientTypes.DatasetContentState?

        public init (
            reason: Swift.String? = nil,
            state: IoTAnalyticsClientTypes.DatasetContentState? = nil
        )
        {
            self.reason = reason
            self.state = state
        }
    }

}

extension IoTAnalyticsClientTypes.DatasetContentSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case completionTime
        case creationTime
        case scheduleTime
        case status
        case version
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let completionTime = self.completionTime {
            try encodeContainer.encodeTimestamp(completionTime, format: .epochSeconds, forKey: .completionTime)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encodeTimestamp(creationTime, format: .epochSeconds, forKey: .creationTime)
        }
        if let scheduleTime = self.scheduleTime {
            try encodeContainer.encodeTimestamp(scheduleTime, format: .epochSeconds, forKey: .scheduleTime)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.DatasetContentStatus.self, forKey: .status)
        status = statusDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let scheduleTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .scheduleTime)
        scheduleTime = scheduleTimeDecoded
        let completionTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .completionTime)
        completionTime = completionTimeDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// Summary information about dataset contents.
    public struct DatasetContentSummary: Swift.Equatable {
        /// The time the dataset content status was updated to SUCCEEDED or FAILED.
        public var completionTime: ClientRuntime.Date?
        /// The actual time the creation of the dataset contents was started.
        public var creationTime: ClientRuntime.Date?
        /// The time the creation of the dataset contents was scheduled to start.
        public var scheduleTime: ClientRuntime.Date?
        /// The status of the dataset contents.
        public var status: IoTAnalyticsClientTypes.DatasetContentStatus?
        /// The version of the dataset contents.
        public var version: Swift.String?

        public init (
            completionTime: ClientRuntime.Date? = nil,
            creationTime: ClientRuntime.Date? = nil,
            scheduleTime: ClientRuntime.Date? = nil,
            status: IoTAnalyticsClientTypes.DatasetContentStatus? = nil,
            version: Swift.String? = nil
        )
        {
            self.completionTime = completionTime
            self.creationTime = creationTime
            self.scheduleTime = scheduleTime
            self.status = status
            self.version = version
        }
    }

}

extension IoTAnalyticsClientTypes.DatasetContentVersionValue: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let datasetName = self.datasetName {
            try encodeContainer.encode(datasetName, forKey: .datasetName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// The dataset whose latest contents are used as input to the notebook or application.
    public struct DatasetContentVersionValue: Swift.Equatable {
        /// The name of the dataset whose latest contents are used as input to the notebook or application.
        /// This member is required.
        public var datasetName: Swift.String?

        public init (
            datasetName: Swift.String? = nil
        )
        {
            self.datasetName = datasetName
        }
    }

}

extension IoTAnalyticsClientTypes.DatasetEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataURI
        case entryName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataURI = self.dataURI {
            try encodeContainer.encode(dataURI, forKey: .dataURI)
        }
        if let entryName = self.entryName {
            try encodeContainer.encode(entryName, forKey: .entryName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let entryNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .entryName)
        entryName = entryNameDecoded
        let dataURIDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataURI)
        dataURI = dataURIDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// The reference to a dataset entry.
    public struct DatasetEntry: Swift.Equatable {
        /// The presigned URI of the dataset item.
        public var dataURI: Swift.String?
        /// The name of the dataset item.
        public var entryName: Swift.String?

        public init (
            dataURI: Swift.String? = nil,
            entryName: Swift.String? = nil
        )
        {
            self.dataURI = dataURI
            self.entryName = entryName
        }
    }

}

extension IoTAnalyticsClientTypes {
    public enum DatasetStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case creating
        case deleting
        case sdkUnknown(Swift.String)

        public static var allCases: [DatasetStatus] {
            return [
                .active,
                .creating,
                .deleting,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DatasetStatus(rawValue: rawValue) ?? DatasetStatus.sdkUnknown(rawValue)
        }
    }
}

extension IoTAnalyticsClientTypes.DatasetSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions
        case creationTime
        case datasetName
        case lastUpdateTime
        case status
        case triggers
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actions = actions {
            var actionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .actions)
            for datasetactionsummary0 in actions {
                try actionsContainer.encode(datasetactionsummary0)
            }
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encodeTimestamp(creationTime, format: .epochSeconds, forKey: .creationTime)
        }
        if let datasetName = self.datasetName {
            try encodeContainer.encode(datasetName, forKey: .datasetName)
        }
        if let lastUpdateTime = self.lastUpdateTime {
            try encodeContainer.encodeTimestamp(lastUpdateTime, format: .epochSeconds, forKey: .lastUpdateTime)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let triggers = triggers {
            var triggersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .triggers)
            for datasettrigger0 in triggers {
                try triggersContainer.encode(datasettrigger0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.DatasetStatus.self, forKey: .status)
        status = statusDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastUpdateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdateTime)
        lastUpdateTime = lastUpdateTimeDecoded
        let triggersContainer = try containerValues.decodeIfPresent([IoTAnalyticsClientTypes.DatasetTrigger?].self, forKey: .triggers)
        var triggersDecoded0:[IoTAnalyticsClientTypes.DatasetTrigger]? = nil
        if let triggersContainer = triggersContainer {
            triggersDecoded0 = [IoTAnalyticsClientTypes.DatasetTrigger]()
            for structure0 in triggersContainer {
                if let structure0 = structure0 {
                    triggersDecoded0?.append(structure0)
                }
            }
        }
        triggers = triggersDecoded0
        let actionsContainer = try containerValues.decodeIfPresent([IoTAnalyticsClientTypes.DatasetActionSummary?].self, forKey: .actions)
        var actionsDecoded0:[IoTAnalyticsClientTypes.DatasetActionSummary]? = nil
        if let actionsContainer = actionsContainer {
            actionsDecoded0 = [IoTAnalyticsClientTypes.DatasetActionSummary]()
            for structure0 in actionsContainer {
                if let structure0 = structure0 {
                    actionsDecoded0?.append(structure0)
                }
            }
        }
        actions = actionsDecoded0
    }
}

extension IoTAnalyticsClientTypes {
    /// A summary of information about a dataset.
    public struct DatasetSummary: Swift.Equatable {
        /// A list of DataActionSummary objects.
        public var actions: [IoTAnalyticsClientTypes.DatasetActionSummary]?
        /// The time the dataset was created.
        public var creationTime: ClientRuntime.Date?
        /// The name of the dataset.
        public var datasetName: Swift.String?
        /// The last time the dataset was updated.
        public var lastUpdateTime: ClientRuntime.Date?
        /// The status of the dataset.
        public var status: IoTAnalyticsClientTypes.DatasetStatus?
        /// A list of triggers. A trigger causes dataset content to be populated at a specified time interval or when another dataset is populated. The list of triggers can be empty or contain up to five DataSetTrigger objects
        public var triggers: [IoTAnalyticsClientTypes.DatasetTrigger]?

        public init (
            actions: [IoTAnalyticsClientTypes.DatasetActionSummary]? = nil,
            creationTime: ClientRuntime.Date? = nil,
            datasetName: Swift.String? = nil,
            lastUpdateTime: ClientRuntime.Date? = nil,
            status: IoTAnalyticsClientTypes.DatasetStatus? = nil,
            triggers: [IoTAnalyticsClientTypes.DatasetTrigger]? = nil
        )
        {
            self.actions = actions
            self.creationTime = creationTime
            self.datasetName = datasetName
            self.lastUpdateTime = lastUpdateTime
            self.status = status
            self.triggers = triggers
        }
    }

}

extension IoTAnalyticsClientTypes.DatasetTrigger: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataset
        case schedule
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataset = self.dataset {
            try encodeContainer.encode(dataset, forKey: .dataset)
        }
        if let schedule = self.schedule {
            try encodeContainer.encode(schedule, forKey: .schedule)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduleDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.Schedule.self, forKey: .schedule)
        schedule = scheduleDecoded
        let datasetDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.TriggeringDataset.self, forKey: .dataset)
        dataset = datasetDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// The DatasetTrigger that specifies when the dataset is automatically updated.
    public struct DatasetTrigger: Swift.Equatable {
        /// The dataset whose content creation triggers the creation of this dataset's contents.
        public var dataset: IoTAnalyticsClientTypes.TriggeringDataset?
        /// The Schedule when the trigger is initiated.
        public var schedule: IoTAnalyticsClientTypes.Schedule?

        public init (
            dataset: IoTAnalyticsClientTypes.TriggeringDataset? = nil,
            schedule: IoTAnalyticsClientTypes.Schedule? = nil
        )
        {
            self.dataset = dataset
            self.schedule = schedule
        }
    }

}

extension IoTAnalyticsClientTypes.Datastore: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case creationTime
        case datastorePartitions
        case fileFormatConfiguration
        case lastMessageArrivalTime
        case lastUpdateTime
        case name
        case retentionPeriod
        case status
        case storage
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encodeTimestamp(creationTime, format: .epochSeconds, forKey: .creationTime)
        }
        if let datastorePartitions = self.datastorePartitions {
            try encodeContainer.encode(datastorePartitions, forKey: .datastorePartitions)
        }
        if let fileFormatConfiguration = self.fileFormatConfiguration {
            try encodeContainer.encode(fileFormatConfiguration, forKey: .fileFormatConfiguration)
        }
        if let lastMessageArrivalTime = self.lastMessageArrivalTime {
            try encodeContainer.encodeTimestamp(lastMessageArrivalTime, format: .epochSeconds, forKey: .lastMessageArrivalTime)
        }
        if let lastUpdateTime = self.lastUpdateTime {
            try encodeContainer.encodeTimestamp(lastUpdateTime, format: .epochSeconds, forKey: .lastUpdateTime)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let retentionPeriod = self.retentionPeriod {
            try encodeContainer.encode(retentionPeriod, forKey: .retentionPeriod)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let storage = self.storage {
            try encodeContainer.encode(storage, forKey: .storage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let storageDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.DatastoreStorage.self, forKey: .storage)
        storage = storageDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.DatastoreStatus.self, forKey: .status)
        status = statusDecoded
        let retentionPeriodDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.RetentionPeriod.self, forKey: .retentionPeriod)
        retentionPeriod = retentionPeriodDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastUpdateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdateTime)
        lastUpdateTime = lastUpdateTimeDecoded
        let lastMessageArrivalTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastMessageArrivalTime)
        lastMessageArrivalTime = lastMessageArrivalTimeDecoded
        let fileFormatConfigurationDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.FileFormatConfiguration.self, forKey: .fileFormatConfiguration)
        fileFormatConfiguration = fileFormatConfigurationDecoded
        let datastorePartitionsDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.DatastorePartitions.self, forKey: .datastorePartitions)
        datastorePartitions = datastorePartitionsDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// Information about a data store.
    public struct Datastore: Swift.Equatable {
        /// The ARN of the data store.
        public var arn: Swift.String?
        /// When the data store was created.
        public var creationTime: ClientRuntime.Date?
        /// Contains information about the partition dimensions in a data store.
        public var datastorePartitions: IoTAnalyticsClientTypes.DatastorePartitions?
        /// Contains the configuration information of file formats. IoT Analytics data stores support JSON and [Parquet](https://parquet.apache.org/). The default file format is JSON. You can specify only one format. You can't change the file format after you create the data store.
        public var fileFormatConfiguration: IoTAnalyticsClientTypes.FileFormatConfiguration?
        /// The last time when a new message arrived in the data store. IoT Analytics updates this value at most once per minute for Amazon Simple Storage Service one data store. Hence, the lastMessageArrivalTime value is an approximation. This feature only applies to messages that arrived in the data store after October 23, 2020.
        public var lastMessageArrivalTime: ClientRuntime.Date?
        /// The last time the data store was updated.
        public var lastUpdateTime: ClientRuntime.Date?
        /// The name of the data store.
        public var name: Swift.String?
        /// How long, in days, message data is kept for the data store. When customerManagedS3 storage is selected, this parameter is ignored.
        public var retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod?
        /// The status of a data store: CREATING The data store is being created. ACTIVE The data store has been created and can be used. DELETING The data store is being deleted.
        public var status: IoTAnalyticsClientTypes.DatastoreStatus?
        /// Where data in a data store is stored.. You can choose serviceManagedS3 storage, customerManagedS3 storage, or iotSiteWiseMultiLayerStorage storage. The default is serviceManagedS3. You can't change the choice of Amazon S3 storage after your data store is created.
        public var storage: IoTAnalyticsClientTypes.DatastoreStorage?

        public init (
            arn: Swift.String? = nil,
            creationTime: ClientRuntime.Date? = nil,
            datastorePartitions: IoTAnalyticsClientTypes.DatastorePartitions? = nil,
            fileFormatConfiguration: IoTAnalyticsClientTypes.FileFormatConfiguration? = nil,
            lastMessageArrivalTime: ClientRuntime.Date? = nil,
            lastUpdateTime: ClientRuntime.Date? = nil,
            name: Swift.String? = nil,
            retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod? = nil,
            status: IoTAnalyticsClientTypes.DatastoreStatus? = nil,
            storage: IoTAnalyticsClientTypes.DatastoreStorage? = nil
        )
        {
            self.arn = arn
            self.creationTime = creationTime
            self.datastorePartitions = datastorePartitions
            self.fileFormatConfiguration = fileFormatConfiguration
            self.lastMessageArrivalTime = lastMessageArrivalTime
            self.lastUpdateTime = lastUpdateTime
            self.name = name
            self.retentionPeriod = retentionPeriod
            self.status = status
            self.storage = storage
        }
    }

}

extension IoTAnalyticsClientTypes.DatastoreActivity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datastoreName
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let datastoreName = self.datastoreName {
            try encodeContainer.encode(datastoreName, forKey: .datastoreName)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let datastoreNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datastoreName)
        datastoreName = datastoreNameDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// The datastore activity that specifies where to store the processed data.
    public struct DatastoreActivity: Swift.Equatable {
        /// The name of the data store where processed messages are stored.
        /// This member is required.
        public var datastoreName: Swift.String?
        /// The name of the datastore activity.
        /// This member is required.
        public var name: Swift.String?

        public init (
            datastoreName: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.datastoreName = datastoreName
            self.name = name
        }
    }

}

extension IoTAnalyticsClientTypes.DatastoreIotSiteWiseMultiLayerStorage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customerManagedS3Storage
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customerManagedS3Storage = self.customerManagedS3Storage {
            try encodeContainer.encode(customerManagedS3Storage, forKey: .customerManagedS3Storage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customerManagedS3StorageDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.IotSiteWiseCustomerManagedDatastoreS3Storage.self, forKey: .customerManagedS3Storage)
        customerManagedS3Storage = customerManagedS3StorageDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// Used to store data used by IoT SiteWise in an Amazon S3 bucket that you manage. You can't change the choice of Amazon S3 storage after your data store is created.
    public struct DatastoreIotSiteWiseMultiLayerStorage: Swift.Equatable {
        /// Used to store data used by IoT SiteWise in an Amazon S3 bucket that you manage.
        /// This member is required.
        public var customerManagedS3Storage: IoTAnalyticsClientTypes.IotSiteWiseCustomerManagedDatastoreS3Storage?

        public init (
            customerManagedS3Storage: IoTAnalyticsClientTypes.IotSiteWiseCustomerManagedDatastoreS3Storage? = nil
        )
        {
            self.customerManagedS3Storage = customerManagedS3Storage
        }
    }

}

extension IoTAnalyticsClientTypes.DatastoreIotSiteWiseMultiLayerStorageSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customerManagedS3Storage
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customerManagedS3Storage = self.customerManagedS3Storage {
            try encodeContainer.encode(customerManagedS3Storage, forKey: .customerManagedS3Storage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customerManagedS3StorageDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.IotSiteWiseCustomerManagedDatastoreS3StorageSummary.self, forKey: .customerManagedS3Storage)
        customerManagedS3Storage = customerManagedS3StorageDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// Contains information about the data store that you manage, which stores data used by IoT SiteWise.
    public struct DatastoreIotSiteWiseMultiLayerStorageSummary: Swift.Equatable {
        /// Used to store data used by IoT SiteWise in an Amazon S3 bucket that you manage.
        public var customerManagedS3Storage: IoTAnalyticsClientTypes.IotSiteWiseCustomerManagedDatastoreS3StorageSummary?

        public init (
            customerManagedS3Storage: IoTAnalyticsClientTypes.IotSiteWiseCustomerManagedDatastoreS3StorageSummary? = nil
        )
        {
            self.customerManagedS3Storage = customerManagedS3Storage
        }
    }

}

extension IoTAnalyticsClientTypes.DatastorePartition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributePartition
        case timestampPartition
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributePartition = self.attributePartition {
            try encodeContainer.encode(attributePartition, forKey: .attributePartition)
        }
        if let timestampPartition = self.timestampPartition {
            try encodeContainer.encode(timestampPartition, forKey: .timestampPartition)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributePartitionDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.Partition.self, forKey: .attributePartition)
        attributePartition = attributePartitionDecoded
        let timestampPartitionDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.TimestampPartition.self, forKey: .timestampPartition)
        timestampPartition = timestampPartitionDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// A single dimension to partition a data store. The dimension must be an AttributePartition or a TimestampPartition.
    public struct DatastorePartition: Swift.Equatable {
        /// A partition dimension defined by an attributeName.
        public var attributePartition: IoTAnalyticsClientTypes.Partition?
        /// A partition dimension defined by a timestamp attribute.
        public var timestampPartition: IoTAnalyticsClientTypes.TimestampPartition?

        public init (
            attributePartition: IoTAnalyticsClientTypes.Partition? = nil,
            timestampPartition: IoTAnalyticsClientTypes.TimestampPartition? = nil
        )
        {
            self.attributePartition = attributePartition
            self.timestampPartition = timestampPartition
        }
    }

}

extension IoTAnalyticsClientTypes.DatastorePartitions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case partitions
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let partitions = partitions {
            var partitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .partitions)
            for datastorepartition0 in partitions {
                try partitionsContainer.encode(datastorepartition0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let partitionsContainer = try containerValues.decodeIfPresent([IoTAnalyticsClientTypes.DatastorePartition?].self, forKey: .partitions)
        var partitionsDecoded0:[IoTAnalyticsClientTypes.DatastorePartition]? = nil
        if let partitionsContainer = partitionsContainer {
            partitionsDecoded0 = [IoTAnalyticsClientTypes.DatastorePartition]()
            for structure0 in partitionsContainer {
                if let structure0 = structure0 {
                    partitionsDecoded0?.append(structure0)
                }
            }
        }
        partitions = partitionsDecoded0
    }
}

extension IoTAnalyticsClientTypes {
    /// Contains information about the partition dimensions in a data store.
    public struct DatastorePartitions: Swift.Equatable {
        /// A list of partition dimensions in a data store.
        public var partitions: [IoTAnalyticsClientTypes.DatastorePartition]?

        public init (
            partitions: [IoTAnalyticsClientTypes.DatastorePartition]? = nil
        )
        {
            self.partitions = partitions
        }
    }

}

extension IoTAnalyticsClientTypes.DatastoreStatistics: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case size
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let size = self.size {
            try encodeContainer.encode(size, forKey: .size)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sizeDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.EstimatedResourceSize.self, forKey: .size)
        size = sizeDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// Statistical information about the data store.
    public struct DatastoreStatistics: Swift.Equatable {
        /// The estimated size of the data store.
        public var size: IoTAnalyticsClientTypes.EstimatedResourceSize?

        public init (
            size: IoTAnalyticsClientTypes.EstimatedResourceSize? = nil
        )
        {
            self.size = size
        }
    }

}

extension IoTAnalyticsClientTypes {
    public enum DatastoreStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case creating
        case deleting
        case sdkUnknown(Swift.String)

        public static var allCases: [DatastoreStatus] {
            return [
                .active,
                .creating,
                .deleting,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DatastoreStatus(rawValue: rawValue) ?? DatastoreStatus.sdkUnknown(rawValue)
        }
    }
}

extension IoTAnalyticsClientTypes.DatastoreStorage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customermanageds3 = "customerManagedS3"
        case iotsitewisemultilayerstorage = "iotSiteWiseMultiLayerStorage"
        case sdkUnknown
        case servicemanageds3 = "serviceManagedS3"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .customermanageds3(customermanageds3):
                try container.encode(customermanageds3, forKey: .customermanageds3)
            case let .iotsitewisemultilayerstorage(iotsitewisemultilayerstorage):
                try container.encode(iotsitewisemultilayerstorage, forKey: .iotsitewisemultilayerstorage)
            case let .servicemanageds3(servicemanageds3):
                try container.encode(servicemanageds3, forKey: .servicemanageds3)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let servicemanageds3Decoded = try values.decodeIfPresent(IoTAnalyticsClientTypes.ServiceManagedDatastoreS3Storage.self, forKey: .servicemanageds3)
        if let servicemanageds3 = servicemanageds3Decoded {
            self = .servicemanageds3(servicemanageds3)
            return
        }
        let customermanageds3Decoded = try values.decodeIfPresent(IoTAnalyticsClientTypes.CustomerManagedDatastoreS3Storage.self, forKey: .customermanageds3)
        if let customermanageds3 = customermanageds3Decoded {
            self = .customermanageds3(customermanageds3)
            return
        }
        let iotsitewisemultilayerstorageDecoded = try values.decodeIfPresent(IoTAnalyticsClientTypes.DatastoreIotSiteWiseMultiLayerStorage.self, forKey: .iotsitewisemultilayerstorage)
        if let iotsitewisemultilayerstorage = iotsitewisemultilayerstorageDecoded {
            self = .iotsitewisemultilayerstorage(iotsitewisemultilayerstorage)
            return
        }
        self = .sdkUnknown("")
    }
}

extension IoTAnalyticsClientTypes {
    /// Where data in a data store is stored.. You can choose serviceManagedS3 storage, customerManagedS3 storage, or iotSiteWiseMultiLayerStorage storage. The default is serviceManagedS3. You can't change the choice of Amazon S3 storage after your data store is created.
    public enum DatastoreStorage: Swift.Equatable {
        /// Used to store data in an Amazon S3 bucket managed by IoT Analytics. You can't change the choice of Amazon S3 storage after your data store is created.
        case servicemanageds3(IoTAnalyticsClientTypes.ServiceManagedDatastoreS3Storage)
        /// S3-customer-managed; When you choose customer-managed storage, the retentionPeriod parameter is ignored. You can't change the choice of Amazon S3 storage after your data store is created.
        case customermanageds3(IoTAnalyticsClientTypes.CustomerManagedDatastoreS3Storage)
        /// Used to store data used by IoT SiteWise in an Amazon S3 bucket that you manage. You can't change the choice of Amazon S3 storage after your data store is created.
        case iotsitewisemultilayerstorage(IoTAnalyticsClientTypes.DatastoreIotSiteWiseMultiLayerStorage)
        case sdkUnknown(Swift.String)
    }

}

extension IoTAnalyticsClientTypes.DatastoreStorageSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customerManagedS3
        case iotSiteWiseMultiLayerStorage
        case serviceManagedS3
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customerManagedS3 = self.customerManagedS3 {
            try encodeContainer.encode(customerManagedS3, forKey: .customerManagedS3)
        }
        if let iotSiteWiseMultiLayerStorage = self.iotSiteWiseMultiLayerStorage {
            try encodeContainer.encode(iotSiteWiseMultiLayerStorage, forKey: .iotSiteWiseMultiLayerStorage)
        }
        if let serviceManagedS3 = self.serviceManagedS3 {
            try encodeContainer.encode(serviceManagedS3, forKey: .serviceManagedS3)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceManagedS3Decoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.ServiceManagedDatastoreS3StorageSummary.self, forKey: .serviceManagedS3)
        serviceManagedS3 = serviceManagedS3Decoded
        let customerManagedS3Decoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.CustomerManagedDatastoreS3StorageSummary.self, forKey: .customerManagedS3)
        customerManagedS3 = customerManagedS3Decoded
        let iotSiteWiseMultiLayerStorageDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.DatastoreIotSiteWiseMultiLayerStorageSummary.self, forKey: .iotSiteWiseMultiLayerStorage)
        iotSiteWiseMultiLayerStorage = iotSiteWiseMultiLayerStorageDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// Contains information about your data store.
    public struct DatastoreStorageSummary: Swift.Equatable {
        /// Used to store data in an Amazon S3 bucket managed by IoT Analytics.
        public var customerManagedS3: IoTAnalyticsClientTypes.CustomerManagedDatastoreS3StorageSummary?
        /// Used to store data used by IoT SiteWise in an Amazon S3 bucket that you manage.
        public var iotSiteWiseMultiLayerStorage: IoTAnalyticsClientTypes.DatastoreIotSiteWiseMultiLayerStorageSummary?
        /// Used to store data in an Amazon S3 bucket managed by IoT Analytics.
        public var serviceManagedS3: IoTAnalyticsClientTypes.ServiceManagedDatastoreS3StorageSummary?

        public init (
            customerManagedS3: IoTAnalyticsClientTypes.CustomerManagedDatastoreS3StorageSummary? = nil,
            iotSiteWiseMultiLayerStorage: IoTAnalyticsClientTypes.DatastoreIotSiteWiseMultiLayerStorageSummary? = nil,
            serviceManagedS3: IoTAnalyticsClientTypes.ServiceManagedDatastoreS3StorageSummary? = nil
        )
        {
            self.customerManagedS3 = customerManagedS3
            self.iotSiteWiseMultiLayerStorage = iotSiteWiseMultiLayerStorage
            self.serviceManagedS3 = serviceManagedS3
        }
    }

}

extension IoTAnalyticsClientTypes.DatastoreSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime
        case datastoreName
        case datastorePartitions
        case datastoreStorage
        case fileFormatType
        case lastMessageArrivalTime
        case lastUpdateTime
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = self.creationTime {
            try encodeContainer.encodeTimestamp(creationTime, format: .epochSeconds, forKey: .creationTime)
        }
        if let datastoreName = self.datastoreName {
            try encodeContainer.encode(datastoreName, forKey: .datastoreName)
        }
        if let datastorePartitions = self.datastorePartitions {
            try encodeContainer.encode(datastorePartitions, forKey: .datastorePartitions)
        }
        if let datastoreStorage = self.datastoreStorage {
            try encodeContainer.encode(datastoreStorage, forKey: .datastoreStorage)
        }
        if let fileFormatType = self.fileFormatType {
            try encodeContainer.encode(fileFormatType.rawValue, forKey: .fileFormatType)
        }
        if let lastMessageArrivalTime = self.lastMessageArrivalTime {
            try encodeContainer.encodeTimestamp(lastMessageArrivalTime, format: .epochSeconds, forKey: .lastMessageArrivalTime)
        }
        if let lastUpdateTime = self.lastUpdateTime {
            try encodeContainer.encodeTimestamp(lastUpdateTime, format: .epochSeconds, forKey: .lastUpdateTime)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datastoreNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datastoreName)
        datastoreName = datastoreNameDecoded
        let datastoreStorageDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.DatastoreStorageSummary.self, forKey: .datastoreStorage)
        datastoreStorage = datastoreStorageDecoded
        let statusDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.DatastoreStatus.self, forKey: .status)
        status = statusDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastUpdateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdateTime)
        lastUpdateTime = lastUpdateTimeDecoded
        let lastMessageArrivalTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastMessageArrivalTime)
        lastMessageArrivalTime = lastMessageArrivalTimeDecoded
        let fileFormatTypeDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.FileFormatType.self, forKey: .fileFormatType)
        fileFormatType = fileFormatTypeDecoded
        let datastorePartitionsDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.DatastorePartitions.self, forKey: .datastorePartitions)
        datastorePartitions = datastorePartitionsDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// A summary of information about a data store.
    public struct DatastoreSummary: Swift.Equatable {
        /// When the data store was created.
        public var creationTime: ClientRuntime.Date?
        /// The name of the data store.
        public var datastoreName: Swift.String?
        /// Contains information about the partition dimensions in a data store.
        public var datastorePartitions: IoTAnalyticsClientTypes.DatastorePartitions?
        /// Where data in a data store is stored.
        public var datastoreStorage: IoTAnalyticsClientTypes.DatastoreStorageSummary?
        /// The file format of the data in the data store.
        public var fileFormatType: IoTAnalyticsClientTypes.FileFormatType?
        /// The last time when a new message arrived in the data store. IoT Analytics updates this value at most once per minute for Amazon Simple Storage Service one data store. Hence, the lastMessageArrivalTime value is an approximation. This feature only applies to messages that arrived in the data store after October 23, 2020.
        public var lastMessageArrivalTime: ClientRuntime.Date?
        /// The last time the data store was updated.
        public var lastUpdateTime: ClientRuntime.Date?
        /// The status of the data store.
        public var status: IoTAnalyticsClientTypes.DatastoreStatus?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            datastoreName: Swift.String? = nil,
            datastorePartitions: IoTAnalyticsClientTypes.DatastorePartitions? = nil,
            datastoreStorage: IoTAnalyticsClientTypes.DatastoreStorageSummary? = nil,
            fileFormatType: IoTAnalyticsClientTypes.FileFormatType? = nil,
            lastMessageArrivalTime: ClientRuntime.Date? = nil,
            lastUpdateTime: ClientRuntime.Date? = nil,
            status: IoTAnalyticsClientTypes.DatastoreStatus? = nil
        )
        {
            self.creationTime = creationTime
            self.datastoreName = datastoreName
            self.datastorePartitions = datastorePartitions
            self.datastoreStorage = datastoreStorage
            self.fileFormatType = fileFormatType
            self.lastMessageArrivalTime = lastMessageArrivalTime
            self.lastUpdateTime = lastUpdateTime
            self.status = status
        }
    }

}

extension DeleteChannelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let channelName = channelName else {
            return nil
        }
        return "/channels/\(channelName.urlPercentEncoding())"
    }
}

public struct DeleteChannelInput: Swift.Equatable {
    /// The name of the channel to delete.
    /// This member is required.
    public var channelName: Swift.String?

    public init (
        channelName: Swift.String? = nil
    )
    {
        self.channelName = channelName
    }
}

struct DeleteChannelInputBody: Swift.Equatable {
}

extension DeleteChannelInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteChannelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteChannelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteChannelOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteChannelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteChannelOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteDatasetContentInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let versionId = versionId {
                let versionIdQueryItem = ClientRuntime.URLQueryItem(name: "versionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
                items.append(versionIdQueryItem)
            }
            return items
        }
    }
}

extension DeleteDatasetContentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let datasetName = datasetName else {
            return nil
        }
        return "/datasets/\(datasetName.urlPercentEncoding())/content"
    }
}

public struct DeleteDatasetContentInput: Swift.Equatable {
    /// The name of the dataset whose content is deleted.
    /// This member is required.
    public var datasetName: Swift.String?
    /// The version of the dataset whose content is deleted. You can also use the strings "$LATEST" or "$LATEST_SUCCEEDED" to delete the latest or latest successfully completed data set. If not specified, "$LATEST_SUCCEEDED" is the default.
    public var versionId: Swift.String?

    public init (
        datasetName: Swift.String? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.datasetName = datasetName
        self.versionId = versionId
    }
}

struct DeleteDatasetContentInputBody: Swift.Equatable {
}

extension DeleteDatasetContentInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteDatasetContentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteDatasetContentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteDatasetContentOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDatasetContentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteDatasetContentOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteDatasetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let datasetName = datasetName else {
            return nil
        }
        return "/datasets/\(datasetName.urlPercentEncoding())"
    }
}

public struct DeleteDatasetInput: Swift.Equatable {
    /// The name of the dataset to delete.
    /// This member is required.
    public var datasetName: Swift.String?

    public init (
        datasetName: Swift.String? = nil
    )
    {
        self.datasetName = datasetName
    }
}

struct DeleteDatasetInputBody: Swift.Equatable {
}

extension DeleteDatasetInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteDatasetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteDatasetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteDatasetOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDatasetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteDatasetOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteDatastoreInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let datastoreName = datastoreName else {
            return nil
        }
        return "/datastores/\(datastoreName.urlPercentEncoding())"
    }
}

public struct DeleteDatastoreInput: Swift.Equatable {
    /// The name of the data store to delete.
    /// This member is required.
    public var datastoreName: Swift.String?

    public init (
        datastoreName: Swift.String? = nil
    )
    {
        self.datastoreName = datastoreName
    }
}

struct DeleteDatastoreInputBody: Swift.Equatable {
}

extension DeleteDatastoreInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteDatastoreOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteDatastoreOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteDatastoreOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDatastoreOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteDatastoreOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeletePipelineInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let pipelineName = pipelineName else {
            return nil
        }
        return "/pipelines/\(pipelineName.urlPercentEncoding())"
    }
}

public struct DeletePipelineInput: Swift.Equatable {
    /// The name of the pipeline to delete.
    /// This member is required.
    public var pipelineName: Swift.String?

    public init (
        pipelineName: Swift.String? = nil
    )
    {
        self.pipelineName = pipelineName
    }
}

struct DeletePipelineInputBody: Swift.Equatable {
}

extension DeletePipelineInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeletePipelineOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeletePipelineOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeletePipelineOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeletePipelineOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeletePipelineOutputResponse: Swift.Equatable {

    public init () { }
}

extension IoTAnalyticsClientTypes.DeltaTime: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case offsetSeconds
        case timeExpression
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let offsetSeconds = self.offsetSeconds {
            try encodeContainer.encode(offsetSeconds, forKey: .offsetSeconds)
        }
        if let timeExpression = self.timeExpression {
            try encodeContainer.encode(timeExpression, forKey: .timeExpression)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let offsetSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .offsetSeconds)
        offsetSeconds = offsetSecondsDecoded
        let timeExpressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timeExpression)
        timeExpression = timeExpressionDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// Used to limit data to that which has arrived since the last execution of the action.
    public struct DeltaTime: Swift.Equatable {
        /// The number of seconds of estimated in-flight lag time of message data. When you create dataset contents using message data from a specified timeframe, some message data might still be in flight when processing begins, and so do not arrive in time to be processed. Use this field to make allowances for the in flight time of your message data, so that data not processed from a previous timeframe is included with the next timeframe. Otherwise, missed message data would be excluded from processing during the next timeframe too, because its timestamp places it within the previous timeframe.
        /// This member is required.
        public var offsetSeconds: Swift.Int?
        /// An expression by which the time of the message data might be determined. This can be the name of a timestamp field or a SQL expression that is used to derive the time the message data was generated.
        /// This member is required.
        public var timeExpression: Swift.String?

        public init (
            offsetSeconds: Swift.Int? = nil,
            timeExpression: Swift.String? = nil
        )
        {
            self.offsetSeconds = offsetSeconds
            self.timeExpression = timeExpression
        }
    }

}

extension IoTAnalyticsClientTypes.DeltaTimeSessionWindowConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case timeoutInMinutes
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let timeoutInMinutes = self.timeoutInMinutes {
            try encodeContainer.encode(timeoutInMinutes, forKey: .timeoutInMinutes)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timeoutInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeoutInMinutes)
        timeoutInMinutes = timeoutInMinutesDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// A structure that contains the configuration information of a delta time session window. [DeltaTime](https://docs.aws.amazon.com/iotanalytics/latest/APIReference/API_DeltaTime.html) specifies a time interval. You can use DeltaTime to create dataset contents with data that has arrived in the data store since the last execution. For an example of DeltaTime, see [ Creating a SQL dataset with a delta window (CLI)](https://docs.aws.amazon.com/iotanalytics/latest/userguide/automate-create-dataset.html#automate-example6) in the IoT Analytics User Guide.
    public struct DeltaTimeSessionWindowConfiguration: Swift.Equatable {
        /// A time interval. You can use timeoutInMinutes so that IoT Analytics can batch up late data notifications that have been generated since the last execution. IoT Analytics sends one batch of notifications to Amazon CloudWatch Events at one time. For more information about how to write a timestamp expression, see [Date and Time Functions and Operators](https://prestodb.io/docs/0.172/functions/datetime.html), in the Presto 0.172 Documentation.
        /// This member is required.
        public var timeoutInMinutes: Swift.Int?

        public init (
            timeoutInMinutes: Swift.Int? = nil
        )
        {
            self.timeoutInMinutes = timeoutInMinutes
        }
    }

}

extension DescribeChannelInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if includeStatistics != false {
                let includeStatisticsQueryItem = ClientRuntime.URLQueryItem(name: "includeStatistics".urlPercentEncoding(), value: Swift.String(includeStatistics).urlPercentEncoding())
                items.append(includeStatisticsQueryItem)
            }
            return items
        }
    }
}

extension DescribeChannelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let channelName = channelName else {
            return nil
        }
        return "/channels/\(channelName.urlPercentEncoding())"
    }
}

public struct DescribeChannelInput: Swift.Equatable {
    /// The name of the channel whose information is retrieved.
    /// This member is required.
    public var channelName: Swift.String?
    /// If true, additional statistical information about the channel is included in the response. This feature can't be used with a channel whose S3 storage is customer-managed.
    public var includeStatistics: Swift.Bool

    public init (
        channelName: Swift.String? = nil,
        includeStatistics: Swift.Bool = false
    )
    {
        self.channelName = channelName
        self.includeStatistics = includeStatistics
    }
}

struct DescribeChannelInputBody: Swift.Equatable {
}

extension DescribeChannelInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeChannelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeChannelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeChannelOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeChannelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeChannelOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.channel = output.channel
            self.statistics = output.statistics
        } else {
            self.channel = nil
            self.statistics = nil
        }
    }
}

public struct DescribeChannelOutputResponse: Swift.Equatable {
    /// An object that contains information about the channel.
    public var channel: IoTAnalyticsClientTypes.Channel?
    /// Statistics about the channel. Included if the includeStatistics parameter is set to true in the request.
    public var statistics: IoTAnalyticsClientTypes.ChannelStatistics?

    public init (
        channel: IoTAnalyticsClientTypes.Channel? = nil,
        statistics: IoTAnalyticsClientTypes.ChannelStatistics? = nil
    )
    {
        self.channel = channel
        self.statistics = statistics
    }
}

struct DescribeChannelOutputResponseBody: Swift.Equatable {
    let channel: IoTAnalyticsClientTypes.Channel?
    let statistics: IoTAnalyticsClientTypes.ChannelStatistics?
}

extension DescribeChannelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channel
        case statistics
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.Channel.self, forKey: .channel)
        channel = channelDecoded
        let statisticsDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.ChannelStatistics.self, forKey: .statistics)
        statistics = statisticsDecoded
    }
}

extension DescribeDatasetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let datasetName = datasetName else {
            return nil
        }
        return "/datasets/\(datasetName.urlPercentEncoding())"
    }
}

public struct DescribeDatasetInput: Swift.Equatable {
    /// The name of the dataset whose information is retrieved.
    /// This member is required.
    public var datasetName: Swift.String?

    public init (
        datasetName: Swift.String? = nil
    )
    {
        self.datasetName = datasetName
    }
}

struct DescribeDatasetInputBody: Swift.Equatable {
}

extension DescribeDatasetInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeDatasetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeDatasetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeDatasetOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeDatasetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeDatasetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dataset = output.dataset
        } else {
            self.dataset = nil
        }
    }
}

public struct DescribeDatasetOutputResponse: Swift.Equatable {
    /// An object that contains information about the dataset.
    public var dataset: IoTAnalyticsClientTypes.Dataset?

    public init (
        dataset: IoTAnalyticsClientTypes.Dataset? = nil
    )
    {
        self.dataset = dataset
    }
}

struct DescribeDatasetOutputResponseBody: Swift.Equatable {
    let dataset: IoTAnalyticsClientTypes.Dataset?
}

extension DescribeDatasetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataset
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.Dataset.self, forKey: .dataset)
        dataset = datasetDecoded
    }
}

extension DescribeDatastoreInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if includeStatistics != false {
                let includeStatisticsQueryItem = ClientRuntime.URLQueryItem(name: "includeStatistics".urlPercentEncoding(), value: Swift.String(includeStatistics).urlPercentEncoding())
                items.append(includeStatisticsQueryItem)
            }
            return items
        }
    }
}

extension DescribeDatastoreInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let datastoreName = datastoreName else {
            return nil
        }
        return "/datastores/\(datastoreName.urlPercentEncoding())"
    }
}

public struct DescribeDatastoreInput: Swift.Equatable {
    /// The name of the data store
    /// This member is required.
    public var datastoreName: Swift.String?
    /// If true, additional statistical information about the data store is included in the response. This feature can't be used with a data store whose S3 storage is customer-managed.
    public var includeStatistics: Swift.Bool

    public init (
        datastoreName: Swift.String? = nil,
        includeStatistics: Swift.Bool = false
    )
    {
        self.datastoreName = datastoreName
        self.includeStatistics = includeStatistics
    }
}

struct DescribeDatastoreInputBody: Swift.Equatable {
}

extension DescribeDatastoreInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeDatastoreOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeDatastoreOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeDatastoreOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeDatastoreOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeDatastoreOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.datastore = output.datastore
            self.statistics = output.statistics
        } else {
            self.datastore = nil
            self.statistics = nil
        }
    }
}

public struct DescribeDatastoreOutputResponse: Swift.Equatable {
    /// Information about the data store.
    public var datastore: IoTAnalyticsClientTypes.Datastore?
    /// Additional statistical information about the data store. Included if the includeStatistics parameter is set to true in the request.
    public var statistics: IoTAnalyticsClientTypes.DatastoreStatistics?

    public init (
        datastore: IoTAnalyticsClientTypes.Datastore? = nil,
        statistics: IoTAnalyticsClientTypes.DatastoreStatistics? = nil
    )
    {
        self.datastore = datastore
        self.statistics = statistics
    }
}

struct DescribeDatastoreOutputResponseBody: Swift.Equatable {
    let datastore: IoTAnalyticsClientTypes.Datastore?
    let statistics: IoTAnalyticsClientTypes.DatastoreStatistics?
}

extension DescribeDatastoreOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datastore
        case statistics
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datastoreDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.Datastore.self, forKey: .datastore)
        datastore = datastoreDecoded
        let statisticsDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.DatastoreStatistics.self, forKey: .statistics)
        statistics = statisticsDecoded
    }
}

extension DescribeLoggingOptionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/logging"
    }
}

public struct DescribeLoggingOptionsInput: Swift.Equatable {

    public init () { }
}

struct DescribeLoggingOptionsInputBody: Swift.Equatable {
}

extension DescribeLoggingOptionsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeLoggingOptionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeLoggingOptionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeLoggingOptionsOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeLoggingOptionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeLoggingOptionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.loggingOptions = output.loggingOptions
        } else {
            self.loggingOptions = nil
        }
    }
}

public struct DescribeLoggingOptionsOutputResponse: Swift.Equatable {
    /// The current settings of the IoT Analytics logging options.
    public var loggingOptions: IoTAnalyticsClientTypes.LoggingOptions?

    public init (
        loggingOptions: IoTAnalyticsClientTypes.LoggingOptions? = nil
    )
    {
        self.loggingOptions = loggingOptions
    }
}

struct DescribeLoggingOptionsOutputResponseBody: Swift.Equatable {
    let loggingOptions: IoTAnalyticsClientTypes.LoggingOptions?
}

extension DescribeLoggingOptionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loggingOptions
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loggingOptionsDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.LoggingOptions.self, forKey: .loggingOptions)
        loggingOptions = loggingOptionsDecoded
    }
}

extension DescribePipelineInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let pipelineName = pipelineName else {
            return nil
        }
        return "/pipelines/\(pipelineName.urlPercentEncoding())"
    }
}

public struct DescribePipelineInput: Swift.Equatable {
    /// The name of the pipeline whose information is retrieved.
    /// This member is required.
    public var pipelineName: Swift.String?

    public init (
        pipelineName: Swift.String? = nil
    )
    {
        self.pipelineName = pipelineName
    }
}

struct DescribePipelineInputBody: Swift.Equatable {
}

extension DescribePipelineInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribePipelineOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribePipelineOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribePipelineOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribePipelineOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribePipelineOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.pipeline = output.pipeline
        } else {
            self.pipeline = nil
        }
    }
}

public struct DescribePipelineOutputResponse: Swift.Equatable {
    /// A Pipeline object that contains information about the pipeline.
    public var pipeline: IoTAnalyticsClientTypes.Pipeline?

    public init (
        pipeline: IoTAnalyticsClientTypes.Pipeline? = nil
    )
    {
        self.pipeline = pipeline
    }
}

struct DescribePipelineOutputResponseBody: Swift.Equatable {
    let pipeline: IoTAnalyticsClientTypes.Pipeline?
}

extension DescribePipelineOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipeline
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.Pipeline.self, forKey: .pipeline)
        pipeline = pipelineDecoded
    }
}

extension IoTAnalyticsClientTypes.DeviceRegistryEnrichActivity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attribute
        case name
        case next
        case roleArn
        case thingName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attribute = self.attribute {
            try encodeContainer.encode(attribute, forKey: .attribute)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let next = self.next {
            try encodeContainer.encode(next, forKey: .next)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let thingName = self.thingName {
            try encodeContainer.encode(thingName, forKey: .thingName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let attributeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attribute)
        attribute = attributeDecoded
        let thingNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingName)
        thingName = thingNameDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let nextDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .next)
        next = nextDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// An activity that adds data from the IoT device registry to your message.
    public struct DeviceRegistryEnrichActivity: Swift.Equatable {
        /// The name of the attribute that is added to the message.
        /// This member is required.
        public var attribute: Swift.String?
        /// The name of the deviceRegistryEnrich activity.
        /// This member is required.
        public var name: Swift.String?
        /// The next activity in the pipeline.
        public var next: Swift.String?
        /// The ARN of the role that allows access to the device's registry information.
        /// This member is required.
        public var roleArn: Swift.String?
        /// The name of the IoT device whose registry information is added to the message.
        /// This member is required.
        public var thingName: Swift.String?

        public init (
            attribute: Swift.String? = nil,
            name: Swift.String? = nil,
            next: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            thingName: Swift.String? = nil
        )
        {
            self.attribute = attribute
            self.name = name
            self.next = next
            self.roleArn = roleArn
            self.thingName = thingName
        }
    }

}

extension IoTAnalyticsClientTypes.DeviceShadowEnrichActivity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attribute
        case name
        case next
        case roleArn
        case thingName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attribute = self.attribute {
            try encodeContainer.encode(attribute, forKey: .attribute)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let next = self.next {
            try encodeContainer.encode(next, forKey: .next)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let thingName = self.thingName {
            try encodeContainer.encode(thingName, forKey: .thingName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let attributeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attribute)
        attribute = attributeDecoded
        let thingNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingName)
        thingName = thingNameDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let nextDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .next)
        next = nextDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// An activity that adds information from the IoT Device Shadow service to a message.
    public struct DeviceShadowEnrichActivity: Swift.Equatable {
        /// The name of the attribute that is added to the message.
        /// This member is required.
        public var attribute: Swift.String?
        /// The name of the deviceShadowEnrich activity.
        /// This member is required.
        public var name: Swift.String?
        /// The next activity in the pipeline.
        public var next: Swift.String?
        /// The ARN of the role that allows access to the device's shadow.
        /// This member is required.
        public var roleArn: Swift.String?
        /// The name of the IoT device whose shadow information is added to the message.
        /// This member is required.
        public var thingName: Swift.String?

        public init (
            attribute: Swift.String? = nil,
            name: Swift.String? = nil,
            next: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            thingName: Swift.String? = nil
        )
        {
            self.attribute = attribute
            self.name = name
            self.next = next
            self.roleArn = roleArn
            self.thingName = thingName
        }
    }

}

extension IoTAnalyticsClientTypes.EstimatedResourceSize: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case estimatedOn
        case estimatedSizeInBytes
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let estimatedOn = self.estimatedOn {
            try encodeContainer.encodeTimestamp(estimatedOn, format: .epochSeconds, forKey: .estimatedOn)
        }
        if let estimatedSizeInBytes = self.estimatedSizeInBytes {
            try encodeContainer.encode(estimatedSizeInBytes, forKey: .estimatedSizeInBytes)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let estimatedSizeInBytesDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .estimatedSizeInBytes)
        estimatedSizeInBytes = estimatedSizeInBytesDecoded
        let estimatedOnDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .estimatedOn)
        estimatedOn = estimatedOnDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// The estimated size of the resource.
    public struct EstimatedResourceSize: Swift.Equatable {
        /// The time when the estimate of the size of the resource was made.
        public var estimatedOn: ClientRuntime.Date?
        /// The estimated size of the resource, in bytes.
        public var estimatedSizeInBytes: Swift.Double?

        public init (
            estimatedOn: ClientRuntime.Date? = nil,
            estimatedSizeInBytes: Swift.Double? = nil
        )
        {
            self.estimatedOn = estimatedOn
            self.estimatedSizeInBytes = estimatedSizeInBytes
        }
    }

}

extension IoTAnalyticsClientTypes.FileFormatConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jsonConfiguration
        case parquetConfiguration
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jsonConfiguration = self.jsonConfiguration {
            try encodeContainer.encode(jsonConfiguration, forKey: .jsonConfiguration)
        }
        if let parquetConfiguration = self.parquetConfiguration {
            try encodeContainer.encode(parquetConfiguration, forKey: .parquetConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jsonConfigurationDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.JsonConfiguration.self, forKey: .jsonConfiguration)
        jsonConfiguration = jsonConfigurationDecoded
        let parquetConfigurationDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.ParquetConfiguration.self, forKey: .parquetConfiguration)
        parquetConfiguration = parquetConfigurationDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// Contains the configuration information of file formats. IoT Analytics data stores support JSON and [Parquet](https://parquet.apache.org/). The default file format is JSON. You can specify only one format. You can't change the file format after you create the data store.
    public struct FileFormatConfiguration: Swift.Equatable {
        /// Contains the configuration information of the JSON format.
        public var jsonConfiguration: IoTAnalyticsClientTypes.JsonConfiguration?
        /// Contains the configuration information of the Parquet format.
        public var parquetConfiguration: IoTAnalyticsClientTypes.ParquetConfiguration?

        public init (
            jsonConfiguration: IoTAnalyticsClientTypes.JsonConfiguration? = nil,
            parquetConfiguration: IoTAnalyticsClientTypes.ParquetConfiguration? = nil
        )
        {
            self.jsonConfiguration = jsonConfiguration
            self.parquetConfiguration = parquetConfiguration
        }
    }

}

extension IoTAnalyticsClientTypes {
    public enum FileFormatType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case json
        case parquet
        case sdkUnknown(Swift.String)

        public static var allCases: [FileFormatType] {
            return [
                .json,
                .parquet,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .json: return "JSON"
            case .parquet: return "PARQUET"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FileFormatType(rawValue: rawValue) ?? FileFormatType.sdkUnknown(rawValue)
        }
    }
}

extension IoTAnalyticsClientTypes.FilterActivity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter
        case name
        case next
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filter = self.filter {
            try encodeContainer.encode(filter, forKey: .filter)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let next = self.next {
            try encodeContainer.encode(next, forKey: .next)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let filterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filter)
        filter = filterDecoded
        let nextDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .next)
        next = nextDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// An activity that filters a message based on its attributes.
    public struct FilterActivity: Swift.Equatable {
        /// An expression that looks like a SQL WHERE clause that must return a Boolean value. Messages that satisfy the condition are passed to the next activity.
        /// This member is required.
        public var filter: Swift.String?
        /// The name of the filter activity.
        /// This member is required.
        public var name: Swift.String?
        /// The next activity in the pipeline.
        public var next: Swift.String?

        public init (
            filter: Swift.String? = nil,
            name: Swift.String? = nil,
            next: Swift.String? = nil
        )
        {
            self.filter = filter
            self.name = name
            self.next = next
        }
    }

}

extension GetDatasetContentInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let versionId = versionId {
                let versionIdQueryItem = ClientRuntime.URLQueryItem(name: "versionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
                items.append(versionIdQueryItem)
            }
            return items
        }
    }
}

extension GetDatasetContentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let datasetName = datasetName else {
            return nil
        }
        return "/datasets/\(datasetName.urlPercentEncoding())/content"
    }
}

public struct GetDatasetContentInput: Swift.Equatable {
    /// The name of the dataset whose contents are retrieved.
    /// This member is required.
    public var datasetName: Swift.String?
    /// The version of the dataset whose contents are retrieved. You can also use the strings "$LATEST" or "$LATEST_SUCCEEDED" to retrieve the contents of the latest or latest successfully completed dataset. If not specified, "$LATEST_SUCCEEDED" is the default.
    public var versionId: Swift.String?

    public init (
        datasetName: Swift.String? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.datasetName = datasetName
        self.versionId = versionId
    }
}

struct GetDatasetContentInputBody: Swift.Equatable {
}

extension GetDatasetContentInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetDatasetContentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDatasetContentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetDatasetContentOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDatasetContentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetDatasetContentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.entries = output.entries
            self.status = output.status
            self.timestamp = output.timestamp
        } else {
            self.entries = nil
            self.status = nil
            self.timestamp = nil
        }
    }
}

public struct GetDatasetContentOutputResponse: Swift.Equatable {
    /// A list of DatasetEntry objects.
    public var entries: [IoTAnalyticsClientTypes.DatasetEntry]?
    /// The status of the dataset content.
    public var status: IoTAnalyticsClientTypes.DatasetContentStatus?
    /// The time when the request was made.
    public var timestamp: ClientRuntime.Date?

    public init (
        entries: [IoTAnalyticsClientTypes.DatasetEntry]? = nil,
        status: IoTAnalyticsClientTypes.DatasetContentStatus? = nil,
        timestamp: ClientRuntime.Date? = nil
    )
    {
        self.entries = entries
        self.status = status
        self.timestamp = timestamp
    }
}

struct GetDatasetContentOutputResponseBody: Swift.Equatable {
    let entries: [IoTAnalyticsClientTypes.DatasetEntry]?
    let timestamp: ClientRuntime.Date?
    let status: IoTAnalyticsClientTypes.DatasetContentStatus?
}

extension GetDatasetContentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entries
        case status
        case timestamp
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let entriesContainer = try containerValues.decodeIfPresent([IoTAnalyticsClientTypes.DatasetEntry?].self, forKey: .entries)
        var entriesDecoded0:[IoTAnalyticsClientTypes.DatasetEntry]? = nil
        if let entriesContainer = entriesContainer {
            entriesDecoded0 = [IoTAnalyticsClientTypes.DatasetEntry]()
            for structure0 in entriesContainer {
                if let structure0 = structure0 {
                    entriesDecoded0?.append(structure0)
                }
            }
        }
        entries = entriesDecoded0
        let timestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .timestamp)
        timestamp = timestampDecoded
        let statusDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.DatasetContentStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension IoTAnalyticsClientTypes.GlueConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case databaseName
        case tableName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let databaseName = self.databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// Configuration information for coordination with Glue, a fully managed extract, transform and load (ETL) service.
    public struct GlueConfiguration: Swift.Equatable {
        /// The name of the database in your Glue Data Catalog in which the table is located. An Glue Data Catalog database contains metadata tables.
        /// This member is required.
        public var databaseName: Swift.String?
        /// The name of the table in your Glue Data Catalog that is used to perform the ETL operations. An Glue Data Catalog table contains partitioned data and descriptions of data sources and targets.
        /// This member is required.
        public var tableName: Swift.String?

        public init (
            databaseName: Swift.String? = nil,
            tableName: Swift.String? = nil
        )
        {
            self.databaseName = databaseName
            self.tableName = tableName
        }
    }

}

extension InternalFailureException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InternalFailureExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// There was an internal failure.
public struct InternalFailureException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InternalFailureExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InternalFailureExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidRequestException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidRequestExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was not valid.
public struct InvalidRequestException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidRequestExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidRequestExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IoTAnalyticsClientTypes.IotEventsDestinationConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inputName
        case roleArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inputName = self.inputName {
            try encodeContainer.encode(inputName, forKey: .inputName)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputName)
        inputName = inputNameDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// Configuration information for delivery of dataset contents to IoT Events.
    public struct IotEventsDestinationConfiguration: Swift.Equatable {
        /// The name of the IoT Events input to which dataset contents are delivered.
        /// This member is required.
        public var inputName: Swift.String?
        /// The ARN of the role that grants IoT Analytics permission to deliver dataset contents to an IoT Events input.
        /// This member is required.
        public var roleArn: Swift.String?

        public init (
            inputName: Swift.String? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.inputName = inputName
            self.roleArn = roleArn
        }
    }

}

extension IoTAnalyticsClientTypes.IotSiteWiseCustomerManagedDatastoreS3Storage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket
        case keyPrefix
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucket = self.bucket {
            try encodeContainer.encode(bucket, forKey: .bucket)
        }
        if let keyPrefix = self.keyPrefix {
            try encodeContainer.encode(keyPrefix, forKey: .keyPrefix)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let keyPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyPrefix)
        keyPrefix = keyPrefixDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// Used to store data used by IoT SiteWise in an Amazon S3 bucket that you manage. You can't change the choice of Amazon S3 storage after your data store is created.
    public struct IotSiteWiseCustomerManagedDatastoreS3Storage: Swift.Equatable {
        /// The name of the Amazon S3 bucket where your data is stored.
        /// This member is required.
        public var bucket: Swift.String?
        /// (Optional) The prefix used to create the keys of the data store data objects. Each object in an Amazon S3 bucket has a key that is its unique identifier in the bucket. Each object in a bucket has exactly one key. The prefix must end with a forward slash (/).
        public var keyPrefix: Swift.String?

        public init (
            bucket: Swift.String? = nil,
            keyPrefix: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.keyPrefix = keyPrefix
        }
    }

}

extension IoTAnalyticsClientTypes.IotSiteWiseCustomerManagedDatastoreS3StorageSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket
        case keyPrefix
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucket = self.bucket {
            try encodeContainer.encode(bucket, forKey: .bucket)
        }
        if let keyPrefix = self.keyPrefix {
            try encodeContainer.encode(keyPrefix, forKey: .keyPrefix)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let keyPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyPrefix)
        keyPrefix = keyPrefixDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// Contains information about the data store that you manage, which stores data used by IoT SiteWise.
    public struct IotSiteWiseCustomerManagedDatastoreS3StorageSummary: Swift.Equatable {
        /// The name of the Amazon S3 bucket where your data is stored.
        public var bucket: Swift.String?
        /// (Optional) The prefix used to create the keys of the data store data objects. Each object in an Amazon S3 bucket has a key that is its unique identifier in the bucket. Each object in a bucket has exactly one key. The prefix must end with a forward slash (/).
        public var keyPrefix: Swift.String?

        public init (
            bucket: Swift.String? = nil,
            keyPrefix: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.keyPrefix = keyPrefix
        }
    }

}

extension IoTAnalyticsClientTypes.JsonConfiguration: Swift.Codable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension IoTAnalyticsClientTypes {
    /// Contains the configuration information of the JSON format.
    public struct JsonConfiguration: Swift.Equatable {

        public init () { }
    }

}

extension IoTAnalyticsClientTypes.LambdaActivity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchSize
        case lambdaName
        case name
        case next
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let batchSize = self.batchSize {
            try encodeContainer.encode(batchSize, forKey: .batchSize)
        }
        if let lambdaName = self.lambdaName {
            try encodeContainer.encode(lambdaName, forKey: .lambdaName)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let next = self.next {
            try encodeContainer.encode(next, forKey: .next)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let lambdaNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lambdaName)
        lambdaName = lambdaNameDecoded
        let batchSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .batchSize)
        batchSize = batchSizeDecoded
        let nextDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .next)
        next = nextDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// An activity that runs a Lambda function to modify the message.
    public struct LambdaActivity: Swift.Equatable {
        /// The number of messages passed to the Lambda function for processing. The Lambda function must be able to process all of these messages within five minutes, which is the maximum timeout duration for Lambda functions.
        /// This member is required.
        public var batchSize: Swift.Int?
        /// The name of the Lambda function that is run on the message.
        /// This member is required.
        public var lambdaName: Swift.String?
        /// The name of the lambda activity.
        /// This member is required.
        public var name: Swift.String?
        /// The next activity in the pipeline.
        public var next: Swift.String?

        public init (
            batchSize: Swift.Int? = nil,
            lambdaName: Swift.String? = nil,
            name: Swift.String? = nil,
            next: Swift.String? = nil
        )
        {
            self.batchSize = batchSize
            self.lambdaName = lambdaName
            self.name = name
            self.next = next
        }
    }

}

extension IoTAnalyticsClientTypes.LateDataRule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleConfiguration
        case ruleName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ruleConfiguration = self.ruleConfiguration {
            try encodeContainer.encode(ruleConfiguration, forKey: .ruleConfiguration)
        }
        if let ruleName = self.ruleName {
            try encodeContainer.encode(ruleName, forKey: .ruleName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleName)
        ruleName = ruleNameDecoded
        let ruleConfigurationDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.LateDataRuleConfiguration.self, forKey: .ruleConfiguration)
        ruleConfiguration = ruleConfigurationDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// A structure that contains the name and configuration information of a late data rule.
    public struct LateDataRule: Swift.Equatable {
        /// The information needed to configure the late data rule.
        /// This member is required.
        public var ruleConfiguration: IoTAnalyticsClientTypes.LateDataRuleConfiguration?
        /// The name of the late data rule.
        public var ruleName: Swift.String?

        public init (
            ruleConfiguration: IoTAnalyticsClientTypes.LateDataRuleConfiguration? = nil,
            ruleName: Swift.String? = nil
        )
        {
            self.ruleConfiguration = ruleConfiguration
            self.ruleName = ruleName
        }
    }

}

extension IoTAnalyticsClientTypes.LateDataRuleConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deltaTimeSessionWindowConfiguration
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deltaTimeSessionWindowConfiguration = self.deltaTimeSessionWindowConfiguration {
            try encodeContainer.encode(deltaTimeSessionWindowConfiguration, forKey: .deltaTimeSessionWindowConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deltaTimeSessionWindowConfigurationDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.DeltaTimeSessionWindowConfiguration.self, forKey: .deltaTimeSessionWindowConfiguration)
        deltaTimeSessionWindowConfiguration = deltaTimeSessionWindowConfigurationDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// The information needed to configure a delta time session window.
    public struct LateDataRuleConfiguration: Swift.Equatable {
        /// The information needed to configure a delta time session window.
        public var deltaTimeSessionWindowConfiguration: IoTAnalyticsClientTypes.DeltaTimeSessionWindowConfiguration?

        public init (
            deltaTimeSessionWindowConfiguration: IoTAnalyticsClientTypes.DeltaTimeSessionWindowConfiguration? = nil
        )
        {
            self.deltaTimeSessionWindowConfiguration = deltaTimeSessionWindowConfiguration
        }
    }

}

extension LimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: LimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The command caused an internal limit to be exceeded.
public struct LimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LimitExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension LimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ListChannelsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            return items
        }
    }
}

extension ListChannelsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/channels"
    }
}

public struct ListChannelsInput: Swift.Equatable {
    /// The maximum number of results to return in this request. The default value is 100.
    public var maxResults: Swift.Int?
    /// The token for the next set of results.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListChannelsInputBody: Swift.Equatable {
}

extension ListChannelsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListChannelsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListChannelsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListChannelsOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListChannelsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListChannelsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.channelSummaries = output.channelSummaries
            self.nextToken = output.nextToken
        } else {
            self.channelSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListChannelsOutputResponse: Swift.Equatable {
    /// A list of ChannelSummary objects.
    public var channelSummaries: [IoTAnalyticsClientTypes.ChannelSummary]?
    /// The token to retrieve the next set of results, or null if there are no more results.
    public var nextToken: Swift.String?

    public init (
        channelSummaries: [IoTAnalyticsClientTypes.ChannelSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.channelSummaries = channelSummaries
        self.nextToken = nextToken
    }
}

struct ListChannelsOutputResponseBody: Swift.Equatable {
    let channelSummaries: [IoTAnalyticsClientTypes.ChannelSummary]?
    let nextToken: Swift.String?
}

extension ListChannelsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channelSummaries
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelSummariesContainer = try containerValues.decodeIfPresent([IoTAnalyticsClientTypes.ChannelSummary?].self, forKey: .channelSummaries)
        var channelSummariesDecoded0:[IoTAnalyticsClientTypes.ChannelSummary]? = nil
        if let channelSummariesContainer = channelSummariesContainer {
            channelSummariesDecoded0 = [IoTAnalyticsClientTypes.ChannelSummary]()
            for structure0 in channelSummariesContainer {
                if let structure0 = structure0 {
                    channelSummariesDecoded0?.append(structure0)
                }
            }
        }
        channelSummaries = channelSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListDatasetContentsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            if let scheduledOnOrAfter = scheduledOnOrAfter {
                let scheduledOnOrAfterQueryItem = ClientRuntime.URLQueryItem(name: "scheduledOnOrAfter".urlPercentEncoding(), value: Swift.String(TimestampFormatter(format: .dateTime).string(from: scheduledOnOrAfter)).urlPercentEncoding())
                items.append(scheduledOnOrAfterQueryItem)
            }
            if let scheduledBefore = scheduledBefore {
                let scheduledBeforeQueryItem = ClientRuntime.URLQueryItem(name: "scheduledBefore".urlPercentEncoding(), value: Swift.String(TimestampFormatter(format: .dateTime).string(from: scheduledBefore)).urlPercentEncoding())
                items.append(scheduledBeforeQueryItem)
            }
            return items
        }
    }
}

extension ListDatasetContentsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let datasetName = datasetName else {
            return nil
        }
        return "/datasets/\(datasetName.urlPercentEncoding())/contents"
    }
}

public struct ListDatasetContentsInput: Swift.Equatable {
    /// The name of the dataset whose contents information you want to list.
    /// This member is required.
    public var datasetName: Swift.String?
    /// The maximum number of results to return in this request.
    public var maxResults: Swift.Int?
    /// The token for the next set of results.
    public var nextToken: Swift.String?
    /// A filter to limit results to those dataset contents whose creation is scheduled before the given time. See the field triggers.schedule in the CreateDataset request. (timestamp)
    public var scheduledBefore: ClientRuntime.Date?
    /// A filter to limit results to those dataset contents whose creation is scheduled on or after the given time. See the field triggers.schedule in the CreateDataset request. (timestamp)
    public var scheduledOnOrAfter: ClientRuntime.Date?

    public init (
        datasetName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        scheduledBefore: ClientRuntime.Date? = nil,
        scheduledOnOrAfter: ClientRuntime.Date? = nil
    )
    {
        self.datasetName = datasetName
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.scheduledBefore = scheduledBefore
        self.scheduledOnOrAfter = scheduledOnOrAfter
    }
}

struct ListDatasetContentsInputBody: Swift.Equatable {
}

extension ListDatasetContentsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListDatasetContentsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDatasetContentsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListDatasetContentsOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDatasetContentsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListDatasetContentsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.datasetContentSummaries = output.datasetContentSummaries
            self.nextToken = output.nextToken
        } else {
            self.datasetContentSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListDatasetContentsOutputResponse: Swift.Equatable {
    /// Summary information about dataset contents that have been created.
    public var datasetContentSummaries: [IoTAnalyticsClientTypes.DatasetContentSummary]?
    /// The token to retrieve the next set of results, or null if there are no more results.
    public var nextToken: Swift.String?

    public init (
        datasetContentSummaries: [IoTAnalyticsClientTypes.DatasetContentSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.datasetContentSummaries = datasetContentSummaries
        self.nextToken = nextToken
    }
}

struct ListDatasetContentsOutputResponseBody: Swift.Equatable {
    let datasetContentSummaries: [IoTAnalyticsClientTypes.DatasetContentSummary]?
    let nextToken: Swift.String?
}

extension ListDatasetContentsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetContentSummaries
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetContentSummariesContainer = try containerValues.decodeIfPresent([IoTAnalyticsClientTypes.DatasetContentSummary?].self, forKey: .datasetContentSummaries)
        var datasetContentSummariesDecoded0:[IoTAnalyticsClientTypes.DatasetContentSummary]? = nil
        if let datasetContentSummariesContainer = datasetContentSummariesContainer {
            datasetContentSummariesDecoded0 = [IoTAnalyticsClientTypes.DatasetContentSummary]()
            for structure0 in datasetContentSummariesContainer {
                if let structure0 = structure0 {
                    datasetContentSummariesDecoded0?.append(structure0)
                }
            }
        }
        datasetContentSummaries = datasetContentSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListDatasetsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            return items
        }
    }
}

extension ListDatasetsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/datasets"
    }
}

public struct ListDatasetsInput: Swift.Equatable {
    /// The maximum number of results to return in this request. The default value is 100.
    public var maxResults: Swift.Int?
    /// The token for the next set of results.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListDatasetsInputBody: Swift.Equatable {
}

extension ListDatasetsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListDatasetsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDatasetsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListDatasetsOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDatasetsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListDatasetsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.datasetSummaries = output.datasetSummaries
            self.nextToken = output.nextToken
        } else {
            self.datasetSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListDatasetsOutputResponse: Swift.Equatable {
    /// A list of DatasetSummary objects.
    public var datasetSummaries: [IoTAnalyticsClientTypes.DatasetSummary]?
    /// The token to retrieve the next set of results, or null if there are no more results.
    public var nextToken: Swift.String?

    public init (
        datasetSummaries: [IoTAnalyticsClientTypes.DatasetSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.datasetSummaries = datasetSummaries
        self.nextToken = nextToken
    }
}

struct ListDatasetsOutputResponseBody: Swift.Equatable {
    let datasetSummaries: [IoTAnalyticsClientTypes.DatasetSummary]?
    let nextToken: Swift.String?
}

extension ListDatasetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetSummaries
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetSummariesContainer = try containerValues.decodeIfPresent([IoTAnalyticsClientTypes.DatasetSummary?].self, forKey: .datasetSummaries)
        var datasetSummariesDecoded0:[IoTAnalyticsClientTypes.DatasetSummary]? = nil
        if let datasetSummariesContainer = datasetSummariesContainer {
            datasetSummariesDecoded0 = [IoTAnalyticsClientTypes.DatasetSummary]()
            for structure0 in datasetSummariesContainer {
                if let structure0 = structure0 {
                    datasetSummariesDecoded0?.append(structure0)
                }
            }
        }
        datasetSummaries = datasetSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListDatastoresInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            return items
        }
    }
}

extension ListDatastoresInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/datastores"
    }
}

public struct ListDatastoresInput: Swift.Equatable {
    /// The maximum number of results to return in this request. The default value is 100.
    public var maxResults: Swift.Int?
    /// The token for the next set of results.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListDatastoresInputBody: Swift.Equatable {
}

extension ListDatastoresInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListDatastoresOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDatastoresOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListDatastoresOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDatastoresOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListDatastoresOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.datastoreSummaries = output.datastoreSummaries
            self.nextToken = output.nextToken
        } else {
            self.datastoreSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListDatastoresOutputResponse: Swift.Equatable {
    /// A list of DatastoreSummary objects.
    public var datastoreSummaries: [IoTAnalyticsClientTypes.DatastoreSummary]?
    /// The token to retrieve the next set of results, or null if there are no more results.
    public var nextToken: Swift.String?

    public init (
        datastoreSummaries: [IoTAnalyticsClientTypes.DatastoreSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.datastoreSummaries = datastoreSummaries
        self.nextToken = nextToken
    }
}

struct ListDatastoresOutputResponseBody: Swift.Equatable {
    let datastoreSummaries: [IoTAnalyticsClientTypes.DatastoreSummary]?
    let nextToken: Swift.String?
}

extension ListDatastoresOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datastoreSummaries
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datastoreSummariesContainer = try containerValues.decodeIfPresent([IoTAnalyticsClientTypes.DatastoreSummary?].self, forKey: .datastoreSummaries)
        var datastoreSummariesDecoded0:[IoTAnalyticsClientTypes.DatastoreSummary]? = nil
        if let datastoreSummariesContainer = datastoreSummariesContainer {
            datastoreSummariesDecoded0 = [IoTAnalyticsClientTypes.DatastoreSummary]()
            for structure0 in datastoreSummariesContainer {
                if let structure0 = structure0 {
                    datastoreSummariesDecoded0?.append(structure0)
                }
            }
        }
        datastoreSummaries = datastoreSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListPipelinesInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            return items
        }
    }
}

extension ListPipelinesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/pipelines"
    }
}

public struct ListPipelinesInput: Swift.Equatable {
    /// The maximum number of results to return in this request. The default value is 100.
    public var maxResults: Swift.Int?
    /// The token for the next set of results.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListPipelinesInputBody: Swift.Equatable {
}

extension ListPipelinesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListPipelinesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListPipelinesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListPipelinesOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListPipelinesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListPipelinesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.pipelineSummaries = output.pipelineSummaries
        } else {
            self.nextToken = nil
            self.pipelineSummaries = nil
        }
    }
}

public struct ListPipelinesOutputResponse: Swift.Equatable {
    /// The token to retrieve the next set of results, or null if there are no more results.
    public var nextToken: Swift.String?
    /// A list of PipelineSummary objects.
    public var pipelineSummaries: [IoTAnalyticsClientTypes.PipelineSummary]?

    public init (
        nextToken: Swift.String? = nil,
        pipelineSummaries: [IoTAnalyticsClientTypes.PipelineSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.pipelineSummaries = pipelineSummaries
    }
}

struct ListPipelinesOutputResponseBody: Swift.Equatable {
    let pipelineSummaries: [IoTAnalyticsClientTypes.PipelineSummary]?
    let nextToken: Swift.String?
}

extension ListPipelinesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case pipelineSummaries
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineSummariesContainer = try containerValues.decodeIfPresent([IoTAnalyticsClientTypes.PipelineSummary?].self, forKey: .pipelineSummaries)
        var pipelineSummariesDecoded0:[IoTAnalyticsClientTypes.PipelineSummary]? = nil
        if let pipelineSummariesContainer = pipelineSummariesContainer {
            pipelineSummariesDecoded0 = [IoTAnalyticsClientTypes.PipelineSummary]()
            for structure0 in pipelineSummariesContainer {
                if let structure0 = structure0 {
                    pipelineSummariesDecoded0?.append(structure0)
                }
            }
        }
        pipelineSummaries = pipelineSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTagsForResourceInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            guard let resourceArn = resourceArn else {
                let message = "Creating a URL Query Item failed. resourceArn is required and must not be nil."
                throw ClientRuntime.ClientError.queryItemCreationFailed(message)
            }
            let resourceArnQueryItem = ClientRuntime.URLQueryItem(name: "resourceArn".urlPercentEncoding(), value: Swift.String(resourceArn).urlPercentEncoding())
            items.append(resourceArnQueryItem)
            return items
        }
    }
}

extension ListTagsForResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/tags"
    }
}

public struct ListTagsForResourceInput: Swift.Equatable {
    /// The ARN of the resource whose tags you want to list.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
}

extension ListTagsForResourceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tags = output.tags
        } else {
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// The tags (metadata) that you have assigned to the resource.
    public var tags: [IoTAnalyticsClientTypes.Tag]?

    public init (
        tags: [IoTAnalyticsClientTypes.Tag]? = nil
    )
    {
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    let tags: [IoTAnalyticsClientTypes.Tag]?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([IoTAnalyticsClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[IoTAnalyticsClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [IoTAnalyticsClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension IoTAnalyticsClientTypes {
    public enum LoggingLevel: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case error
        case sdkUnknown(Swift.String)

        public static var allCases: [LoggingLevel] {
            return [
                .error,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .error: return "ERROR"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LoggingLevel(rawValue: rawValue) ?? LoggingLevel.sdkUnknown(rawValue)
        }
    }
}

extension IoTAnalyticsClientTypes.LoggingOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled
        case level
        case roleArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if enabled != false {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let level = self.level {
            try encodeContainer.encode(level.rawValue, forKey: .level)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let levelDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.LoggingLevel.self, forKey: .level)
        level = levelDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled) ?? false
        enabled = enabledDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// Information about logging options.
    public struct LoggingOptions: Swift.Equatable {
        /// If true, logging is enabled for IoT Analytics.
        /// This member is required.
        public var enabled: Swift.Bool
        /// The logging level. Currently, only ERROR is supported.
        /// This member is required.
        public var level: IoTAnalyticsClientTypes.LoggingLevel?
        /// The ARN of the role that grants permission to IoT Analytics to perform logging.
        /// This member is required.
        public var roleArn: Swift.String?

        public init (
            enabled: Swift.Bool = false,
            level: IoTAnalyticsClientTypes.LoggingLevel? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.enabled = enabled
            self.level = level
            self.roleArn = roleArn
        }
    }

}

extension IoTAnalyticsClientTypes.MathActivity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attribute
        case math
        case name
        case next
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attribute = self.attribute {
            try encodeContainer.encode(attribute, forKey: .attribute)
        }
        if let math = self.math {
            try encodeContainer.encode(math, forKey: .math)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let next = self.next {
            try encodeContainer.encode(next, forKey: .next)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let attributeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attribute)
        attribute = attributeDecoded
        let mathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .math)
        math = mathDecoded
        let nextDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .next)
        next = nextDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// An activity that computes an arithmetic expression using the message's attributes.
    public struct MathActivity: Swift.Equatable {
        /// The name of the attribute that contains the result of the math operation.
        /// This member is required.
        public var attribute: Swift.String?
        /// An expression that uses one or more existing attributes and must return an integer value.
        /// This member is required.
        public var math: Swift.String?
        /// The name of the math activity.
        /// This member is required.
        public var name: Swift.String?
        /// The next activity in the pipeline.
        public var next: Swift.String?

        public init (
            attribute: Swift.String? = nil,
            math: Swift.String? = nil,
            name: Swift.String? = nil,
            next: Swift.String? = nil
        )
        {
            self.attribute = attribute
            self.math = math
            self.name = name
            self.next = next
        }
    }

}

extension IoTAnalyticsClientTypes.Message: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messageId
        case payload
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let messageId = self.messageId {
            try encodeContainer.encode(messageId, forKey: .messageId)
        }
        if let payload = self.payload {
            try encodeContainer.encode(payload.base64EncodedString(), forKey: .payload)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageId)
        messageId = messageIdDecoded
        let payloadDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .payload)
        payload = payloadDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// Information about a message.
    public struct Message: Swift.Equatable {
        /// The ID you want to assign to the message. Each messageId must be unique within each batch sent.
        /// This member is required.
        public var messageId: Swift.String?
        /// The payload of the message. This can be a JSON string or a base64-encoded string representing binary data, in which case you must decode it by means of a pipeline activity.
        /// This member is required.
        public var payload: ClientRuntime.Data?

        public init (
            messageId: Swift.String? = nil,
            payload: ClientRuntime.Data? = nil
        )
        {
            self.messageId = messageId
            self.payload = payload
        }
    }

}

extension IoTAnalyticsClientTypes.OutputFileUriValue: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fileName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fileName = self.fileName {
            try encodeContainer.encode(fileName, forKey: .fileName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fileNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileName)
        fileName = fileNameDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// The value of the variable as a structure that specifies an output file URI.
    public struct OutputFileUriValue: Swift.Equatable {
        /// The URI of the location where dataset contents are stored, usually the URI of a file in an S3 bucket.
        /// This member is required.
        public var fileName: Swift.String?

        public init (
            fileName: Swift.String? = nil
        )
        {
            self.fileName = fileName
        }
    }

}

extension IoTAnalyticsClientTypes.ParquetConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case schemaDefinition
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let schemaDefinition = self.schemaDefinition {
            try encodeContainer.encode(schemaDefinition, forKey: .schemaDefinition)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let schemaDefinitionDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.SchemaDefinition.self, forKey: .schemaDefinition)
        schemaDefinition = schemaDefinitionDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// Contains the configuration information of the Parquet format.
    public struct ParquetConfiguration: Swift.Equatable {
        /// Information needed to define a schema.
        public var schemaDefinition: IoTAnalyticsClientTypes.SchemaDefinition?

        public init (
            schemaDefinition: IoTAnalyticsClientTypes.SchemaDefinition? = nil
        )
        {
            self.schemaDefinition = schemaDefinition
        }
    }

}

extension IoTAnalyticsClientTypes.Partition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributeName = self.attributeName {
            try encodeContainer.encode(attributeName, forKey: .attributeName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attributeName)
        attributeName = attributeNameDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// A partition dimension defined by an attribute.
    public struct Partition: Swift.Equatable {
        /// The name of the attribute that defines a partition dimension.
        /// This member is required.
        public var attributeName: Swift.String?

        public init (
            attributeName: Swift.String? = nil
        )
        {
            self.attributeName = attributeName
        }
    }

}

extension IoTAnalyticsClientTypes.Pipeline: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activities
        case arn
        case creationTime
        case lastUpdateTime
        case name
        case reprocessingSummaries
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activities = activities {
            var activitiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .activities)
            for pipelineactivity0 in activities {
                try activitiesContainer.encode(pipelineactivity0)
            }
        }
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encodeTimestamp(creationTime, format: .epochSeconds, forKey: .creationTime)
        }
        if let lastUpdateTime = self.lastUpdateTime {
            try encodeContainer.encodeTimestamp(lastUpdateTime, format: .epochSeconds, forKey: .lastUpdateTime)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let reprocessingSummaries = reprocessingSummaries {
            var reprocessingSummariesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .reprocessingSummaries)
            for reprocessingsummary0 in reprocessingSummaries {
                try reprocessingSummariesContainer.encode(reprocessingsummary0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let activitiesContainer = try containerValues.decodeIfPresent([IoTAnalyticsClientTypes.PipelineActivity?].self, forKey: .activities)
        var activitiesDecoded0:[IoTAnalyticsClientTypes.PipelineActivity]? = nil
        if let activitiesContainer = activitiesContainer {
            activitiesDecoded0 = [IoTAnalyticsClientTypes.PipelineActivity]()
            for structure0 in activitiesContainer {
                if let structure0 = structure0 {
                    activitiesDecoded0?.append(structure0)
                }
            }
        }
        activities = activitiesDecoded0
        let reprocessingSummariesContainer = try containerValues.decodeIfPresent([IoTAnalyticsClientTypes.ReprocessingSummary?].self, forKey: .reprocessingSummaries)
        var reprocessingSummariesDecoded0:[IoTAnalyticsClientTypes.ReprocessingSummary]? = nil
        if let reprocessingSummariesContainer = reprocessingSummariesContainer {
            reprocessingSummariesDecoded0 = [IoTAnalyticsClientTypes.ReprocessingSummary]()
            for structure0 in reprocessingSummariesContainer {
                if let structure0 = structure0 {
                    reprocessingSummariesDecoded0?.append(structure0)
                }
            }
        }
        reprocessingSummaries = reprocessingSummariesDecoded0
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastUpdateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdateTime)
        lastUpdateTime = lastUpdateTimeDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// Contains information about a pipeline.
    public struct Pipeline: Swift.Equatable {
        /// The activities that perform transformations on the messages.
        public var activities: [IoTAnalyticsClientTypes.PipelineActivity]?
        /// The ARN of the pipeline.
        public var arn: Swift.String?
        /// When the pipeline was created.
        public var creationTime: ClientRuntime.Date?
        /// The last time the pipeline was updated.
        public var lastUpdateTime: ClientRuntime.Date?
        /// The name of the pipeline.
        public var name: Swift.String?
        /// A summary of information about the pipeline reprocessing.
        public var reprocessingSummaries: [IoTAnalyticsClientTypes.ReprocessingSummary]?

        public init (
            activities: [IoTAnalyticsClientTypes.PipelineActivity]? = nil,
            arn: Swift.String? = nil,
            creationTime: ClientRuntime.Date? = nil,
            lastUpdateTime: ClientRuntime.Date? = nil,
            name: Swift.String? = nil,
            reprocessingSummaries: [IoTAnalyticsClientTypes.ReprocessingSummary]? = nil
        )
        {
            self.activities = activities
            self.arn = arn
            self.creationTime = creationTime
            self.lastUpdateTime = lastUpdateTime
            self.name = name
            self.reprocessingSummaries = reprocessingSummaries
        }
    }

}

extension IoTAnalyticsClientTypes.PipelineActivity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addAttributes
        case channel
        case datastore
        case deviceRegistryEnrich
        case deviceShadowEnrich
        case filter
        case lambda
        case math
        case removeAttributes
        case selectAttributes
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addAttributes = self.addAttributes {
            try encodeContainer.encode(addAttributes, forKey: .addAttributes)
        }
        if let channel = self.channel {
            try encodeContainer.encode(channel, forKey: .channel)
        }
        if let datastore = self.datastore {
            try encodeContainer.encode(datastore, forKey: .datastore)
        }
        if let deviceRegistryEnrich = self.deviceRegistryEnrich {
            try encodeContainer.encode(deviceRegistryEnrich, forKey: .deviceRegistryEnrich)
        }
        if let deviceShadowEnrich = self.deviceShadowEnrich {
            try encodeContainer.encode(deviceShadowEnrich, forKey: .deviceShadowEnrich)
        }
        if let filter = self.filter {
            try encodeContainer.encode(filter, forKey: .filter)
        }
        if let lambda = self.lambda {
            try encodeContainer.encode(lambda, forKey: .lambda)
        }
        if let math = self.math {
            try encodeContainer.encode(math, forKey: .math)
        }
        if let removeAttributes = self.removeAttributes {
            try encodeContainer.encode(removeAttributes, forKey: .removeAttributes)
        }
        if let selectAttributes = self.selectAttributes {
            try encodeContainer.encode(selectAttributes, forKey: .selectAttributes)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.ChannelActivity.self, forKey: .channel)
        channel = channelDecoded
        let lambdaDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.LambdaActivity.self, forKey: .lambda)
        lambda = lambdaDecoded
        let datastoreDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.DatastoreActivity.self, forKey: .datastore)
        datastore = datastoreDecoded
        let addAttributesDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.AddAttributesActivity.self, forKey: .addAttributes)
        addAttributes = addAttributesDecoded
        let removeAttributesDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.RemoveAttributesActivity.self, forKey: .removeAttributes)
        removeAttributes = removeAttributesDecoded
        let selectAttributesDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.SelectAttributesActivity.self, forKey: .selectAttributes)
        selectAttributes = selectAttributesDecoded
        let filterDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.FilterActivity.self, forKey: .filter)
        filter = filterDecoded
        let mathDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.MathActivity.self, forKey: .math)
        math = mathDecoded
        let deviceRegistryEnrichDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.DeviceRegistryEnrichActivity.self, forKey: .deviceRegistryEnrich)
        deviceRegistryEnrich = deviceRegistryEnrichDecoded
        let deviceShadowEnrichDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.DeviceShadowEnrichActivity.self, forKey: .deviceShadowEnrich)
        deviceShadowEnrich = deviceShadowEnrichDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// An activity that performs a transformation on a message.
    public struct PipelineActivity: Swift.Equatable {
        /// Adds other attributes based on existing attributes in the message.
        public var addAttributes: IoTAnalyticsClientTypes.AddAttributesActivity?
        /// Determines the source of the messages to be processed.
        public var channel: IoTAnalyticsClientTypes.ChannelActivity?
        /// Specifies where to store the processed message data.
        public var datastore: IoTAnalyticsClientTypes.DatastoreActivity?
        /// Adds data from the IoT device registry to your message.
        public var deviceRegistryEnrich: IoTAnalyticsClientTypes.DeviceRegistryEnrichActivity?
        /// Adds information from the IoT Device Shadow service to a message.
        public var deviceShadowEnrich: IoTAnalyticsClientTypes.DeviceShadowEnrichActivity?
        /// Filters a message based on its attributes.
        public var filter: IoTAnalyticsClientTypes.FilterActivity?
        /// Runs a Lambda function to modify the message.
        public var lambda: IoTAnalyticsClientTypes.LambdaActivity?
        /// Computes an arithmetic expression using the message's attributes and adds it to the message.
        public var math: IoTAnalyticsClientTypes.MathActivity?
        /// Removes attributes from a message.
        public var removeAttributes: IoTAnalyticsClientTypes.RemoveAttributesActivity?
        /// Used to create a new message using only the specified attributes from the original message.
        public var selectAttributes: IoTAnalyticsClientTypes.SelectAttributesActivity?

        public init (
            addAttributes: IoTAnalyticsClientTypes.AddAttributesActivity? = nil,
            channel: IoTAnalyticsClientTypes.ChannelActivity? = nil,
            datastore: IoTAnalyticsClientTypes.DatastoreActivity? = nil,
            deviceRegistryEnrich: IoTAnalyticsClientTypes.DeviceRegistryEnrichActivity? = nil,
            deviceShadowEnrich: IoTAnalyticsClientTypes.DeviceShadowEnrichActivity? = nil,
            filter: IoTAnalyticsClientTypes.FilterActivity? = nil,
            lambda: IoTAnalyticsClientTypes.LambdaActivity? = nil,
            math: IoTAnalyticsClientTypes.MathActivity? = nil,
            removeAttributes: IoTAnalyticsClientTypes.RemoveAttributesActivity? = nil,
            selectAttributes: IoTAnalyticsClientTypes.SelectAttributesActivity? = nil
        )
        {
            self.addAttributes = addAttributes
            self.channel = channel
            self.datastore = datastore
            self.deviceRegistryEnrich = deviceRegistryEnrich
            self.deviceShadowEnrich = deviceShadowEnrich
            self.filter = filter
            self.lambda = lambda
            self.math = math
            self.removeAttributes = removeAttributes
            self.selectAttributes = selectAttributes
        }
    }

}

extension IoTAnalyticsClientTypes.PipelineSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime
        case lastUpdateTime
        case pipelineName
        case reprocessingSummaries
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = self.creationTime {
            try encodeContainer.encodeTimestamp(creationTime, format: .epochSeconds, forKey: .creationTime)
        }
        if let lastUpdateTime = self.lastUpdateTime {
            try encodeContainer.encodeTimestamp(lastUpdateTime, format: .epochSeconds, forKey: .lastUpdateTime)
        }
        if let pipelineName = self.pipelineName {
            try encodeContainer.encode(pipelineName, forKey: .pipelineName)
        }
        if let reprocessingSummaries = reprocessingSummaries {
            var reprocessingSummariesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .reprocessingSummaries)
            for reprocessingsummary0 in reprocessingSummaries {
                try reprocessingSummariesContainer.encode(reprocessingsummary0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineName)
        pipelineName = pipelineNameDecoded
        let reprocessingSummariesContainer = try containerValues.decodeIfPresent([IoTAnalyticsClientTypes.ReprocessingSummary?].self, forKey: .reprocessingSummaries)
        var reprocessingSummariesDecoded0:[IoTAnalyticsClientTypes.ReprocessingSummary]? = nil
        if let reprocessingSummariesContainer = reprocessingSummariesContainer {
            reprocessingSummariesDecoded0 = [IoTAnalyticsClientTypes.ReprocessingSummary]()
            for structure0 in reprocessingSummariesContainer {
                if let structure0 = structure0 {
                    reprocessingSummariesDecoded0?.append(structure0)
                }
            }
        }
        reprocessingSummaries = reprocessingSummariesDecoded0
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastUpdateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdateTime)
        lastUpdateTime = lastUpdateTimeDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// A summary of information about a pipeline.
    public struct PipelineSummary: Swift.Equatable {
        /// When the pipeline was created.
        public var creationTime: ClientRuntime.Date?
        /// When the pipeline was last updated.
        public var lastUpdateTime: ClientRuntime.Date?
        /// The name of the pipeline.
        public var pipelineName: Swift.String?
        /// A summary of information about the pipeline reprocessing.
        public var reprocessingSummaries: [IoTAnalyticsClientTypes.ReprocessingSummary]?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            lastUpdateTime: ClientRuntime.Date? = nil,
            pipelineName: Swift.String? = nil,
            reprocessingSummaries: [IoTAnalyticsClientTypes.ReprocessingSummary]? = nil
        )
        {
            self.creationTime = creationTime
            self.lastUpdateTime = lastUpdateTime
            self.pipelineName = pipelineName
            self.reprocessingSummaries = reprocessingSummaries
        }
    }

}

extension PutLoggingOptionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loggingOptions
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let loggingOptions = self.loggingOptions {
            try encodeContainer.encode(loggingOptions, forKey: .loggingOptions)
        }
    }
}

extension PutLoggingOptionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/logging"
    }
}

public struct PutLoggingOptionsInput: Swift.Equatable {
    /// The new values of the IoT Analytics logging options.
    /// This member is required.
    public var loggingOptions: IoTAnalyticsClientTypes.LoggingOptions?

    public init (
        loggingOptions: IoTAnalyticsClientTypes.LoggingOptions? = nil
    )
    {
        self.loggingOptions = loggingOptions
    }
}

struct PutLoggingOptionsInputBody: Swift.Equatable {
    let loggingOptions: IoTAnalyticsClientTypes.LoggingOptions?
}

extension PutLoggingOptionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loggingOptions
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loggingOptionsDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.LoggingOptions.self, forKey: .loggingOptions)
        loggingOptions = loggingOptionsDecoded
    }
}

extension PutLoggingOptionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutLoggingOptionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutLoggingOptionsOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutLoggingOptionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutLoggingOptionsOutputResponse: Swift.Equatable {

    public init () { }
}

extension IoTAnalyticsClientTypes.QueryFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deltaTime
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deltaTime = self.deltaTime {
            try encodeContainer.encode(deltaTime, forKey: .deltaTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deltaTimeDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.DeltaTime.self, forKey: .deltaTime)
        deltaTime = deltaTimeDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// Information that is used to filter message data, to segregate it according to the timeframe in which it arrives.
    public struct QueryFilter: Swift.Equatable {
        /// Used to limit data to that which has arrived since the last execution of the action.
        public var deltaTime: IoTAnalyticsClientTypes.DeltaTime?

        public init (
            deltaTime: IoTAnalyticsClientTypes.DeltaTime? = nil
        )
        {
            self.deltaTime = deltaTime
        }
    }

}

extension IoTAnalyticsClientTypes.RemoveAttributesActivity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes
        case name
        case next
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributes)
            for attributename0 in attributes {
                try attributesContainer.encode(attributename0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let next = self.next {
            try encodeContainer.encode(next, forKey: .next)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let attributesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .attributes)
        var attributesDecoded0:[Swift.String]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [Swift.String]()
            for string0 in attributesContainer {
                if let string0 = string0 {
                    attributesDecoded0?.append(string0)
                }
            }
        }
        attributes = attributesDecoded0
        let nextDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .next)
        next = nextDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// An activity that removes attributes from a message.
    public struct RemoveAttributesActivity: Swift.Equatable {
        /// A list of 1-50 attributes to remove from the message.
        /// This member is required.
        public var attributes: [Swift.String]?
        /// The name of the removeAttributes activity.
        /// This member is required.
        public var name: Swift.String?
        /// The next activity in the pipeline.
        public var next: Swift.String?

        public init (
            attributes: [Swift.String]? = nil,
            name: Swift.String? = nil,
            next: Swift.String? = nil
        )
        {
            self.attributes = attributes
            self.name = name
            self.next = next
        }
    }

}

extension IoTAnalyticsClientTypes {
    public enum ReprocessingStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cancelled
        case failed
        case running
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [ReprocessingStatus] {
            return [
                .cancelled,
                .failed,
                .running,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "CANCELLED"
            case .failed: return "FAILED"
            case .running: return "RUNNING"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReprocessingStatus(rawValue: rawValue) ?? ReprocessingStatus.sdkUnknown(rawValue)
        }
    }
}

extension IoTAnalyticsClientTypes.ReprocessingSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime
        case id
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = self.creationTime {
            try encodeContainer.encodeTimestamp(creationTime, format: .epochSeconds, forKey: .creationTime)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let statusDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.ReprocessingStatus.self, forKey: .status)
        status = statusDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// Information about pipeline reprocessing.
    public struct ReprocessingSummary: Swift.Equatable {
        /// The time the pipeline reprocessing was created.
        public var creationTime: ClientRuntime.Date?
        /// The reprocessingId returned by StartPipelineReprocessing.
        public var id: Swift.String?
        /// The status of the pipeline reprocessing.
        public var status: IoTAnalyticsClientTypes.ReprocessingStatus?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            id: Swift.String? = nil,
            status: IoTAnalyticsClientTypes.ReprocessingStatus? = nil
        )
        {
            self.creationTime = creationTime
            self.id = id
            self.status = status
        }
    }

}

extension ResourceAlreadyExistsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ResourceAlreadyExistsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.resourceArn = output.resourceArn
            self.resourceId = output.resourceId
        } else {
            self.message = nil
            self.resourceArn = nil
            self.resourceId = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A resource with the same name already exists.
public struct ResourceAlreadyExistsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?
    /// The ARN of the resource.
    public var resourceArn: Swift.String?
    /// The ID of the resource.
    public var resourceId: Swift.String?

    public init (
        message: Swift.String? = nil,
        resourceArn: Swift.String? = nil,
        resourceId: Swift.String? = nil
    )
    {
        self.message = message
        self.resourceArn = resourceArn
        self.resourceId = resourceId
    }
}

struct ResourceAlreadyExistsExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let resourceId: Swift.String?
    let resourceArn: Swift.String?
}

extension ResourceAlreadyExistsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
        case resourceArn
        case resourceId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension IoTAnalyticsClientTypes.ResourceConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeType
        case volumeSizeInGB
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let computeType = self.computeType {
            try encodeContainer.encode(computeType.rawValue, forKey: .computeType)
        }
        if volumeSizeInGB != 0 {
            try encodeContainer.encode(volumeSizeInGB, forKey: .volumeSizeInGB)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let computeTypeDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.ComputeType.self, forKey: .computeType)
        computeType = computeTypeDecoded
        let volumeSizeInGBDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .volumeSizeInGB) ?? 0
        volumeSizeInGB = volumeSizeInGBDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// The configuration of the resource used to execute the containerAction.
    public struct ResourceConfiguration: Swift.Equatable {
        /// The type of the compute resource used to execute the containerAction. Possible values are: ACU_1 (vCPU=4, memory=16 GiB) or ACU_2 (vCPU=8, memory=32 GiB).
        /// This member is required.
        public var computeType: IoTAnalyticsClientTypes.ComputeType?
        /// The size, in GB, of the persistent storage available to the resource instance used to execute the containerAction (min: 1, max: 50).
        /// This member is required.
        public var volumeSizeInGB: Swift.Int

        public init (
            computeType: IoTAnalyticsClientTypes.ComputeType? = nil,
            volumeSizeInGB: Swift.Int = 0
        )
        {
            self.computeType = computeType
            self.volumeSizeInGB = volumeSizeInGB
        }
    }

}

extension ResourceNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A resource with the specified name could not be found.
public struct ResourceNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IoTAnalyticsClientTypes.RetentionPeriod: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case numberOfDays
        case unlimited
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let numberOfDays = self.numberOfDays {
            try encodeContainer.encode(numberOfDays, forKey: .numberOfDays)
        }
        if unlimited != false {
            try encodeContainer.encode(unlimited, forKey: .unlimited)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let unlimitedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .unlimited) ?? false
        unlimited = unlimitedDecoded
        let numberOfDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfDays)
        numberOfDays = numberOfDaysDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// How long, in days, message data is kept.
    public struct RetentionPeriod: Swift.Equatable {
        /// The number of days that message data is kept. The unlimited parameter must be false.
        public var numberOfDays: Swift.Int?
        /// If true, message data is kept indefinitely.
        public var unlimited: Swift.Bool

        public init (
            numberOfDays: Swift.Int? = nil,
            unlimited: Swift.Bool = false
        )
        {
            self.numberOfDays = numberOfDays
            self.unlimited = unlimited
        }
    }

}

extension RunPipelineActivityInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case payloads
        case pipelineActivity
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let payloads = payloads {
            var payloadsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .payloads)
            for messagepayload0 in payloads {
                try payloadsContainer.encode(messagepayload0.base64EncodedString())
            }
        }
        if let pipelineActivity = self.pipelineActivity {
            try encodeContainer.encode(pipelineActivity, forKey: .pipelineActivity)
        }
    }
}

extension RunPipelineActivityInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/pipelineactivities/run"
    }
}

public struct RunPipelineActivityInput: Swift.Equatable {
    /// The sample message payloads on which the pipeline activity is run.
    /// This member is required.
    public var payloads: [ClientRuntime.Data]?
    /// The pipeline activity that is run. This must not be a channel activity or a data store activity because these activities are used in a pipeline only to load the original message and to store the (possibly) transformed message. If a Lambda activity is specified, only short-running Lambda functions (those with a timeout of less than 30 seconds or less) can be used.
    /// This member is required.
    public var pipelineActivity: IoTAnalyticsClientTypes.PipelineActivity?

    public init (
        payloads: [ClientRuntime.Data]? = nil,
        pipelineActivity: IoTAnalyticsClientTypes.PipelineActivity? = nil
    )
    {
        self.payloads = payloads
        self.pipelineActivity = pipelineActivity
    }
}

struct RunPipelineActivityInputBody: Swift.Equatable {
    let pipelineActivity: IoTAnalyticsClientTypes.PipelineActivity?
    let payloads: [ClientRuntime.Data]?
}

extension RunPipelineActivityInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case payloads
        case pipelineActivity
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineActivityDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.PipelineActivity.self, forKey: .pipelineActivity)
        pipelineActivity = pipelineActivityDecoded
        let payloadsContainer = try containerValues.decodeIfPresent([ClientRuntime.Data?].self, forKey: .payloads)
        var payloadsDecoded0:[ClientRuntime.Data]? = nil
        if let payloadsContainer = payloadsContainer {
            payloadsDecoded0 = [ClientRuntime.Data]()
            for blob0 in payloadsContainer {
                if let blob0 = blob0 {
                    payloadsDecoded0?.append(blob0)
                }
            }
        }
        payloads = payloadsDecoded0
    }
}

extension RunPipelineActivityOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RunPipelineActivityOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RunPipelineActivityOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RunPipelineActivityOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: RunPipelineActivityOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.logResult = output.logResult
            self.payloads = output.payloads
        } else {
            self.logResult = nil
            self.payloads = nil
        }
    }
}

public struct RunPipelineActivityOutputResponse: Swift.Equatable {
    /// In case the pipeline activity fails, the log message that is generated.
    public var logResult: Swift.String?
    /// The enriched or transformed sample message payloads as base64-encoded strings. (The results of running the pipeline activity on each input sample message payload, encoded in base64.)
    public var payloads: [ClientRuntime.Data]?

    public init (
        logResult: Swift.String? = nil,
        payloads: [ClientRuntime.Data]? = nil
    )
    {
        self.logResult = logResult
        self.payloads = payloads
    }
}

struct RunPipelineActivityOutputResponseBody: Swift.Equatable {
    let payloads: [ClientRuntime.Data]?
    let logResult: Swift.String?
}

extension RunPipelineActivityOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logResult
        case payloads
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let payloadsContainer = try containerValues.decodeIfPresent([ClientRuntime.Data?].self, forKey: .payloads)
        var payloadsDecoded0:[ClientRuntime.Data]? = nil
        if let payloadsContainer = payloadsContainer {
            payloadsDecoded0 = [ClientRuntime.Data]()
            for blob0 in payloadsContainer {
                if let blob0 = blob0 {
                    payloadsDecoded0?.append(blob0)
                }
            }
        }
        payloads = payloadsDecoded0
        let logResultDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logResult)
        logResult = logResultDecoded
    }
}

extension IoTAnalyticsClientTypes.S3DestinationConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket
        case glueConfiguration
        case key
        case roleArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucket = self.bucket {
            try encodeContainer.encode(bucket, forKey: .bucket)
        }
        if let glueConfiguration = self.glueConfiguration {
            try encodeContainer.encode(glueConfiguration, forKey: .glueConfiguration)
        }
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let glueConfigurationDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.GlueConfiguration.self, forKey: .glueConfiguration)
        glueConfiguration = glueConfigurationDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// Configuration information for delivery of dataset contents to Amazon Simple Storage Service (Amazon S3).
    public struct S3DestinationConfiguration: Swift.Equatable {
        /// The name of the S3 bucket to which dataset contents are delivered.
        /// This member is required.
        public var bucket: Swift.String?
        /// Configuration information for coordination with Glue, a fully managed extract, transform and load (ETL) service.
        public var glueConfiguration: IoTAnalyticsClientTypes.GlueConfiguration?
        /// The key of the dataset contents object in an S3 bucket. Each object has a key that is a unique identifier. Each object has exactly one key. You can create a unique key with the following options:
        ///
        /// * Use !{iotanalytics:scheduleTime} to insert the time of a scheduled SQL query run.
        ///
        /// * Use !{iotanalytics:versionId} to insert a unique hash that identifies a dataset content.
        ///
        /// * Use !{iotanalytics:creationTime} to insert the creation time of a dataset content.
        ///
        ///
        /// The following example creates a unique key for a CSV file: dataset/mydataset/!{iotanalytics:scheduleTime}/!{iotanalytics:versionId}.csv If you don't use !{iotanalytics:versionId} to specify the key, you might get duplicate keys. For example, you might have two dataset contents with the same scheduleTime but different versionIds. This means that one dataset content overwrites the other.
        /// This member is required.
        public var key: Swift.String?
        /// The ARN of the role that grants IoT Analytics permission to interact with your Amazon S3 and Glue resources.
        /// This member is required.
        public var roleArn: Swift.String?

        public init (
            bucket: Swift.String? = nil,
            glueConfiguration: IoTAnalyticsClientTypes.GlueConfiguration? = nil,
            key: Swift.String? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.glueConfiguration = glueConfiguration
            self.key = key
            self.roleArn = roleArn
        }
    }

}

extension SampleChannelDataInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let maxMessages = maxMessages {
                let maxMessagesQueryItem = ClientRuntime.URLQueryItem(name: "maxMessages".urlPercentEncoding(), value: Swift.String(maxMessages).urlPercentEncoding())
                items.append(maxMessagesQueryItem)
            }
            if let startTime = startTime {
                let startTimeQueryItem = ClientRuntime.URLQueryItem(name: "startTime".urlPercentEncoding(), value: Swift.String(TimestampFormatter(format: .dateTime).string(from: startTime)).urlPercentEncoding())
                items.append(startTimeQueryItem)
            }
            if let endTime = endTime {
                let endTimeQueryItem = ClientRuntime.URLQueryItem(name: "endTime".urlPercentEncoding(), value: Swift.String(TimestampFormatter(format: .dateTime).string(from: endTime)).urlPercentEncoding())
                items.append(endTimeQueryItem)
            }
            return items
        }
    }
}

extension SampleChannelDataInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let channelName = channelName else {
            return nil
        }
        return "/channels/\(channelName.urlPercentEncoding())/sample"
    }
}

public struct SampleChannelDataInput: Swift.Equatable {
    /// The name of the channel whose message samples are retrieved.
    /// This member is required.
    public var channelName: Swift.String?
    /// The end of the time window from which sample messages are retrieved.
    public var endTime: ClientRuntime.Date?
    /// The number of sample messages to be retrieved. The limit is 10. The default is also 10.
    public var maxMessages: Swift.Int?
    /// The start of the time window from which sample messages are retrieved.
    public var startTime: ClientRuntime.Date?

    public init (
        channelName: Swift.String? = nil,
        endTime: ClientRuntime.Date? = nil,
        maxMessages: Swift.Int? = nil,
        startTime: ClientRuntime.Date? = nil
    )
    {
        self.channelName = channelName
        self.endTime = endTime
        self.maxMessages = maxMessages
        self.startTime = startTime
    }
}

struct SampleChannelDataInputBody: Swift.Equatable {
}

extension SampleChannelDataInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension SampleChannelDataOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SampleChannelDataOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SampleChannelDataOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SampleChannelDataOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: SampleChannelDataOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.payloads = output.payloads
        } else {
            self.payloads = nil
        }
    }
}

public struct SampleChannelDataOutputResponse: Swift.Equatable {
    /// The list of message samples. Each sample message is returned as a base64-encoded string.
    public var payloads: [ClientRuntime.Data]?

    public init (
        payloads: [ClientRuntime.Data]? = nil
    )
    {
        self.payloads = payloads
    }
}

struct SampleChannelDataOutputResponseBody: Swift.Equatable {
    let payloads: [ClientRuntime.Data]?
}

extension SampleChannelDataOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case payloads
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let payloadsContainer = try containerValues.decodeIfPresent([ClientRuntime.Data?].self, forKey: .payloads)
        var payloadsDecoded0:[ClientRuntime.Data]? = nil
        if let payloadsContainer = payloadsContainer {
            payloadsDecoded0 = [ClientRuntime.Data]()
            for blob0 in payloadsContainer {
                if let blob0 = blob0 {
                    payloadsDecoded0?.append(blob0)
                }
            }
        }
        payloads = payloadsDecoded0
    }
}

extension IoTAnalyticsClientTypes.Schedule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expression
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let expression = self.expression {
            try encodeContainer.encode(expression, forKey: .expression)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let expressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expression)
        expression = expressionDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// The schedule for when to trigger an update.
    public struct Schedule: Swift.Equatable {
        /// The expression that defines when to trigger an update. For more information, see [Schedule Expressions for Rules](https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html) in the Amazon CloudWatch Events User Guide.
        public var expression: Swift.String?

        public init (
            expression: Swift.String? = nil
        )
        {
            self.expression = expression
        }
    }

}

extension IoTAnalyticsClientTypes.SchemaDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case columns
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let columns = columns {
            var columnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .columns)
            for column0 in columns {
                try columnsContainer.encode(column0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let columnsContainer = try containerValues.decodeIfPresent([IoTAnalyticsClientTypes.Column?].self, forKey: .columns)
        var columnsDecoded0:[IoTAnalyticsClientTypes.Column]? = nil
        if let columnsContainer = columnsContainer {
            columnsDecoded0 = [IoTAnalyticsClientTypes.Column]()
            for structure0 in columnsContainer {
                if let structure0 = structure0 {
                    columnsDecoded0?.append(structure0)
                }
            }
        }
        columns = columnsDecoded0
    }
}

extension IoTAnalyticsClientTypes {
    /// Information needed to define a schema.
    public struct SchemaDefinition: Swift.Equatable {
        /// Specifies one or more columns that store your data. Each schema can have up to 100 columns. Each column can have up to 100 nested types.
        public var columns: [IoTAnalyticsClientTypes.Column]?

        public init (
            columns: [IoTAnalyticsClientTypes.Column]? = nil
        )
        {
            self.columns = columns
        }
    }

}

extension IoTAnalyticsClientTypes.SelectAttributesActivity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes
        case name
        case next
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributes)
            for attributename0 in attributes {
                try attributesContainer.encode(attributename0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let next = self.next {
            try encodeContainer.encode(next, forKey: .next)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let attributesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .attributes)
        var attributesDecoded0:[Swift.String]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [Swift.String]()
            for string0 in attributesContainer {
                if let string0 = string0 {
                    attributesDecoded0?.append(string0)
                }
            }
        }
        attributes = attributesDecoded0
        let nextDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .next)
        next = nextDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// Used to create a new message using only the specified attributes from the original message.
    public struct SelectAttributesActivity: Swift.Equatable {
        /// A list of the attributes to select from the message.
        /// This member is required.
        public var attributes: [Swift.String]?
        /// The name of the selectAttributes activity.
        /// This member is required.
        public var name: Swift.String?
        /// The next activity in the pipeline.
        public var next: Swift.String?

        public init (
            attributes: [Swift.String]? = nil,
            name: Swift.String? = nil,
            next: Swift.String? = nil
        )
        {
            self.attributes = attributes
            self.name = name
            self.next = next
        }
    }

}

extension IoTAnalyticsClientTypes.ServiceManagedChannelS3Storage: Swift.Codable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension IoTAnalyticsClientTypes {
    /// Used to store channel data in an S3 bucket managed by IoT Analytics. You can't change the choice of S3 storage after the data store is created.
    public struct ServiceManagedChannelS3Storage: Swift.Equatable {

        public init () { }
    }

}

extension IoTAnalyticsClientTypes.ServiceManagedChannelS3StorageSummary: Swift.Codable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension IoTAnalyticsClientTypes {
    /// Used to store channel data in an S3 bucket managed by IoT Analytics.
    public struct ServiceManagedChannelS3StorageSummary: Swift.Equatable {

        public init () { }
    }

}

extension IoTAnalyticsClientTypes.ServiceManagedDatastoreS3Storage: Swift.Codable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension IoTAnalyticsClientTypes {
    /// Used to store data in an Amazon S3 bucket managed by IoT Analytics. You can't change the choice of Amazon S3 storage after your data store is created.
    public struct ServiceManagedDatastoreS3Storage: Swift.Equatable {

        public init () { }
    }

}

extension IoTAnalyticsClientTypes.ServiceManagedDatastoreS3StorageSummary: Swift.Codable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension IoTAnalyticsClientTypes {
    /// Contains information about the data store that is managed by IoT Analytics.
    public struct ServiceManagedDatastoreS3StorageSummary: Swift.Equatable {

        public init () { }
    }

}

extension ServiceUnavailableException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ServiceUnavailableExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The service is temporarily unavailable.
public struct ServiceUnavailableException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ServiceUnavailableExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ServiceUnavailableExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IoTAnalyticsClientTypes.SqlQueryDatasetAction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters
        case sqlQuery
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for queryfilter0 in filters {
                try filtersContainer.encode(queryfilter0)
            }
        }
        if let sqlQuery = self.sqlQuery {
            try encodeContainer.encode(sqlQuery, forKey: .sqlQuery)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sqlQueryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sqlQuery)
        sqlQuery = sqlQueryDecoded
        let filtersContainer = try containerValues.decodeIfPresent([IoTAnalyticsClientTypes.QueryFilter?].self, forKey: .filters)
        var filtersDecoded0:[IoTAnalyticsClientTypes.QueryFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [IoTAnalyticsClientTypes.QueryFilter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
    }
}

extension IoTAnalyticsClientTypes {
    /// The SQL query to modify the message.
    public struct SqlQueryDatasetAction: Swift.Equatable {
        /// Prefilters applied to message data.
        public var filters: [IoTAnalyticsClientTypes.QueryFilter]?
        /// A SQL query string.
        /// This member is required.
        public var sqlQuery: Swift.String?

        public init (
            filters: [IoTAnalyticsClientTypes.QueryFilter]? = nil,
            sqlQuery: Swift.String? = nil
        )
        {
            self.filters = filters
            self.sqlQuery = sqlQuery
        }
    }

}

extension StartPipelineReprocessingInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channelMessages
        case endTime
        case startTime
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channelMessages = self.channelMessages {
            try encodeContainer.encode(channelMessages, forKey: .channelMessages)
        }
        if let endTime = self.endTime {
            try encodeContainer.encodeTimestamp(endTime, format: .epochSeconds, forKey: .endTime)
        }
        if let startTime = self.startTime {
            try encodeContainer.encodeTimestamp(startTime, format: .epochSeconds, forKey: .startTime)
        }
    }
}

extension StartPipelineReprocessingInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let pipelineName = pipelineName else {
            return nil
        }
        return "/pipelines/\(pipelineName.urlPercentEncoding())/reprocessing"
    }
}

public struct StartPipelineReprocessingInput: Swift.Equatable {
    /// Specifies one or more sets of channel messages that you want to reprocess. If you use the channelMessages object, you must not specify a value for startTime and endTime.
    public var channelMessages: IoTAnalyticsClientTypes.ChannelMessages?
    /// The end time (exclusive) of raw message data that is reprocessed. If you specify a value for the endTime parameter, you must not use the channelMessages object.
    public var endTime: ClientRuntime.Date?
    /// The name of the pipeline on which to start reprocessing.
    /// This member is required.
    public var pipelineName: Swift.String?
    /// The start time (inclusive) of raw message data that is reprocessed. If you specify a value for the startTime parameter, you must not use the channelMessages object.
    public var startTime: ClientRuntime.Date?

    public init (
        channelMessages: IoTAnalyticsClientTypes.ChannelMessages? = nil,
        endTime: ClientRuntime.Date? = nil,
        pipelineName: Swift.String? = nil,
        startTime: ClientRuntime.Date? = nil
    )
    {
        self.channelMessages = channelMessages
        self.endTime = endTime
        self.pipelineName = pipelineName
        self.startTime = startTime
    }
}

struct StartPipelineReprocessingInputBody: Swift.Equatable {
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
    let channelMessages: IoTAnalyticsClientTypes.ChannelMessages?
}

extension StartPipelineReprocessingInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channelMessages
        case endTime
        case startTime
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endTime)
        endTime = endTimeDecoded
        let channelMessagesDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.ChannelMessages.self, forKey: .channelMessages)
        channelMessages = channelMessagesDecoded
    }
}

extension StartPipelineReprocessingOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartPipelineReprocessingOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartPipelineReprocessingOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartPipelineReprocessingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartPipelineReprocessingOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.reprocessingId = output.reprocessingId
        } else {
            self.reprocessingId = nil
        }
    }
}

public struct StartPipelineReprocessingOutputResponse: Swift.Equatable {
    /// The ID of the pipeline reprocessing activity that was started.
    public var reprocessingId: Swift.String?

    public init (
        reprocessingId: Swift.String? = nil
    )
    {
        self.reprocessingId = reprocessingId
    }
}

struct StartPipelineReprocessingOutputResponseBody: Swift.Equatable {
    let reprocessingId: Swift.String?
}

extension StartPipelineReprocessingOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case reprocessingId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reprocessingIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reprocessingId)
        reprocessingId = reprocessingIdDecoded
    }
}

extension IoTAnalyticsClientTypes.Tag: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// A set of key-value pairs that are used to manage the resource.
    public struct Tag: Swift.Equatable {
        /// The tag's key.
        /// This member is required.
        public var key: Swift.String?
        /// The tag's value.
        /// This member is required.
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension TagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension TagResourceInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            guard let resourceArn = resourceArn else {
                let message = "Creating a URL Query Item failed. resourceArn is required and must not be nil."
                throw ClientRuntime.ClientError.queryItemCreationFailed(message)
            }
            let resourceArnQueryItem = ClientRuntime.URLQueryItem(name: "resourceArn".urlPercentEncoding(), value: Swift.String(resourceArn).urlPercentEncoding())
            items.append(resourceArnQueryItem)
            return items
        }
    }
}

extension TagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/tags"
    }
}

public struct TagResourceInput: Swift.Equatable {
    /// The ARN of the resource whose tags you want to modify.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The new or modified tags for the resource.
    /// This member is required.
    public var tags: [IoTAnalyticsClientTypes.Tag]?

    public init (
        resourceArn: Swift.String? = nil,
        tags: [IoTAnalyticsClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    let tags: [IoTAnalyticsClientTypes.Tag]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([IoTAnalyticsClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[IoTAnalyticsClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [IoTAnalyticsClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension ThrottlingException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ThrottlingExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was denied due to request throttling.
public struct ThrottlingException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ThrottlingExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ThrottlingExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IoTAnalyticsClientTypes.TimestampPartition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeName
        case timestampFormat
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributeName = self.attributeName {
            try encodeContainer.encode(attributeName, forKey: .attributeName)
        }
        if let timestampFormat = self.timestampFormat {
            try encodeContainer.encode(timestampFormat, forKey: .timestampFormat)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attributeName)
        attributeName = attributeNameDecoded
        let timestampFormatDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timestampFormat)
        timestampFormat = timestampFormatDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// A partition dimension defined by a timestamp attribute.
    public struct TimestampPartition: Swift.Equatable {
        /// The attribute name of the partition defined by a timestamp.
        /// This member is required.
        public var attributeName: Swift.String?
        /// The timestamp format of a partition defined by a timestamp. The default format is seconds since epoch (January 1, 1970 at midnight UTC time).
        public var timestampFormat: Swift.String?

        public init (
            attributeName: Swift.String? = nil,
            timestampFormat: Swift.String? = nil
        )
        {
            self.attributeName = attributeName
            self.timestampFormat = timestampFormat
        }
    }

}

extension IoTAnalyticsClientTypes.TriggeringDataset: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// Information about the dataset whose content generation triggers the new dataset content generation.
    public struct TriggeringDataset: Swift.Equatable {
        /// The name of the dataset whose content generation triggers the new dataset content generation.
        /// This member is required.
        public var name: Swift.String?

        public init (
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension UntagResourceInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            guard let tagKeys = tagKeys else {
                let message = "Creating a URL Query Item failed. tagKeys is required and must not be nil."
                throw ClientRuntime.ClientError.queryItemCreationFailed(message)
            }
            tagKeys.forEach { queryItemValue in
                let queryItem = ClientRuntime.URLQueryItem(name: "tagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
                items.append(queryItem)
            }
            guard let resourceArn = resourceArn else {
                let message = "Creating a URL Query Item failed. resourceArn is required and must not be nil."
                throw ClientRuntime.ClientError.queryItemCreationFailed(message)
            }
            let resourceArnQueryItem = ClientRuntime.URLQueryItem(name: "resourceArn".urlPercentEncoding(), value: Swift.String(resourceArn).urlPercentEncoding())
            items.append(resourceArnQueryItem)
            return items
        }
    }
}

extension UntagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/tags"
    }
}

public struct UntagResourceInput: Swift.Equatable {
    /// The ARN of the resource whose tags you want to remove.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The keys of those tags which you want to remove.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
}

extension UntagResourceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateChannelInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channelStorage
        case retentionPeriod
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channelStorage = self.channelStorage {
            try encodeContainer.encode(channelStorage, forKey: .channelStorage)
        }
        if let retentionPeriod = self.retentionPeriod {
            try encodeContainer.encode(retentionPeriod, forKey: .retentionPeriod)
        }
    }
}

extension UpdateChannelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let channelName = channelName else {
            return nil
        }
        return "/channels/\(channelName.urlPercentEncoding())"
    }
}

public struct UpdateChannelInput: Swift.Equatable {
    /// The name of the channel to be updated.
    /// This member is required.
    public var channelName: Swift.String?
    /// Where channel data is stored. You can choose one of serviceManagedS3 or customerManagedS3 storage. If not specified, the default is serviceManagedS3. You can't change this storage option after the channel is created.
    public var channelStorage: IoTAnalyticsClientTypes.ChannelStorage?
    /// How long, in days, message data is kept for the channel. The retention period can't be updated if the channel's Amazon S3 storage is customer-managed.
    public var retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod?

    public init (
        channelName: Swift.String? = nil,
        channelStorage: IoTAnalyticsClientTypes.ChannelStorage? = nil,
        retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod? = nil
    )
    {
        self.channelName = channelName
        self.channelStorage = channelStorage
        self.retentionPeriod = retentionPeriod
    }
}

struct UpdateChannelInputBody: Swift.Equatable {
    let channelStorage: IoTAnalyticsClientTypes.ChannelStorage?
    let retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod?
}

extension UpdateChannelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channelStorage
        case retentionPeriod
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelStorageDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.ChannelStorage.self, forKey: .channelStorage)
        channelStorage = channelStorageDecoded
        let retentionPeriodDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.RetentionPeriod.self, forKey: .retentionPeriod)
        retentionPeriod = retentionPeriodDecoded
    }
}

extension UpdateChannelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateChannelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateChannelOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateChannelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateChannelOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateDatasetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions
        case contentDeliveryRules
        case lateDataRules
        case retentionPeriod
        case triggers
        case versioningConfiguration
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actions = actions {
            var actionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .actions)
            for datasetaction0 in actions {
                try actionsContainer.encode(datasetaction0)
            }
        }
        if let contentDeliveryRules = contentDeliveryRules {
            var contentDeliveryRulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .contentDeliveryRules)
            for datasetcontentdeliveryrule0 in contentDeliveryRules {
                try contentDeliveryRulesContainer.encode(datasetcontentdeliveryrule0)
            }
        }
        if let lateDataRules = lateDataRules {
            var lateDataRulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lateDataRules)
            for latedatarule0 in lateDataRules {
                try lateDataRulesContainer.encode(latedatarule0)
            }
        }
        if let retentionPeriod = self.retentionPeriod {
            try encodeContainer.encode(retentionPeriod, forKey: .retentionPeriod)
        }
        if let triggers = triggers {
            var triggersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .triggers)
            for datasettrigger0 in triggers {
                try triggersContainer.encode(datasettrigger0)
            }
        }
        if let versioningConfiguration = self.versioningConfiguration {
            try encodeContainer.encode(versioningConfiguration, forKey: .versioningConfiguration)
        }
    }
}

extension UpdateDatasetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let datasetName = datasetName else {
            return nil
        }
        return "/datasets/\(datasetName.urlPercentEncoding())"
    }
}

public struct UpdateDatasetInput: Swift.Equatable {
    /// A list of DatasetAction objects.
    /// This member is required.
    public var actions: [IoTAnalyticsClientTypes.DatasetAction]?
    /// When dataset contents are created, they are delivered to destinations specified here.
    public var contentDeliveryRules: [IoTAnalyticsClientTypes.DatasetContentDeliveryRule]?
    /// The name of the dataset to update.
    /// This member is required.
    public var datasetName: Swift.String?
    /// A list of data rules that send notifications to CloudWatch, when data arrives late. To specify lateDataRules, the dataset must use a [DeltaTimer](https://docs.aws.amazon.com/iotanalytics/latest/APIReference/API_DeltaTime.html) filter.
    public var lateDataRules: [IoTAnalyticsClientTypes.LateDataRule]?
    /// How long, in days, dataset contents are kept for the dataset.
    public var retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod?
    /// A list of DatasetTrigger objects. The list can be empty or can contain up to five DatasetTrigger objects.
    public var triggers: [IoTAnalyticsClientTypes.DatasetTrigger]?
    /// Optional. How many versions of dataset contents are kept. If not specified or set to null, only the latest version plus the latest succeeded version (if they are different) are kept for the time period specified by the retentionPeriod parameter. For more information, see [Keeping Multiple Versions of IoT Analytics datasets](https://docs.aws.amazon.com/iotanalytics/latest/userguide/getting-started.html#aws-iot-analytics-dataset-versions) in the IoT Analytics User Guide.
    public var versioningConfiguration: IoTAnalyticsClientTypes.VersioningConfiguration?

    public init (
        actions: [IoTAnalyticsClientTypes.DatasetAction]? = nil,
        contentDeliveryRules: [IoTAnalyticsClientTypes.DatasetContentDeliveryRule]? = nil,
        datasetName: Swift.String? = nil,
        lateDataRules: [IoTAnalyticsClientTypes.LateDataRule]? = nil,
        retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod? = nil,
        triggers: [IoTAnalyticsClientTypes.DatasetTrigger]? = nil,
        versioningConfiguration: IoTAnalyticsClientTypes.VersioningConfiguration? = nil
    )
    {
        self.actions = actions
        self.contentDeliveryRules = contentDeliveryRules
        self.datasetName = datasetName
        self.lateDataRules = lateDataRules
        self.retentionPeriod = retentionPeriod
        self.triggers = triggers
        self.versioningConfiguration = versioningConfiguration
    }
}

struct UpdateDatasetInputBody: Swift.Equatable {
    let actions: [IoTAnalyticsClientTypes.DatasetAction]?
    let triggers: [IoTAnalyticsClientTypes.DatasetTrigger]?
    let contentDeliveryRules: [IoTAnalyticsClientTypes.DatasetContentDeliveryRule]?
    let retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod?
    let versioningConfiguration: IoTAnalyticsClientTypes.VersioningConfiguration?
    let lateDataRules: [IoTAnalyticsClientTypes.LateDataRule]?
}

extension UpdateDatasetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions
        case contentDeliveryRules
        case lateDataRules
        case retentionPeriod
        case triggers
        case versioningConfiguration
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionsContainer = try containerValues.decodeIfPresent([IoTAnalyticsClientTypes.DatasetAction?].self, forKey: .actions)
        var actionsDecoded0:[IoTAnalyticsClientTypes.DatasetAction]? = nil
        if let actionsContainer = actionsContainer {
            actionsDecoded0 = [IoTAnalyticsClientTypes.DatasetAction]()
            for structure0 in actionsContainer {
                if let structure0 = structure0 {
                    actionsDecoded0?.append(structure0)
                }
            }
        }
        actions = actionsDecoded0
        let triggersContainer = try containerValues.decodeIfPresent([IoTAnalyticsClientTypes.DatasetTrigger?].self, forKey: .triggers)
        var triggersDecoded0:[IoTAnalyticsClientTypes.DatasetTrigger]? = nil
        if let triggersContainer = triggersContainer {
            triggersDecoded0 = [IoTAnalyticsClientTypes.DatasetTrigger]()
            for structure0 in triggersContainer {
                if let structure0 = structure0 {
                    triggersDecoded0?.append(structure0)
                }
            }
        }
        triggers = triggersDecoded0
        let contentDeliveryRulesContainer = try containerValues.decodeIfPresent([IoTAnalyticsClientTypes.DatasetContentDeliveryRule?].self, forKey: .contentDeliveryRules)
        var contentDeliveryRulesDecoded0:[IoTAnalyticsClientTypes.DatasetContentDeliveryRule]? = nil
        if let contentDeliveryRulesContainer = contentDeliveryRulesContainer {
            contentDeliveryRulesDecoded0 = [IoTAnalyticsClientTypes.DatasetContentDeliveryRule]()
            for structure0 in contentDeliveryRulesContainer {
                if let structure0 = structure0 {
                    contentDeliveryRulesDecoded0?.append(structure0)
                }
            }
        }
        contentDeliveryRules = contentDeliveryRulesDecoded0
        let retentionPeriodDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.RetentionPeriod.self, forKey: .retentionPeriod)
        retentionPeriod = retentionPeriodDecoded
        let versioningConfigurationDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.VersioningConfiguration.self, forKey: .versioningConfiguration)
        versioningConfiguration = versioningConfigurationDecoded
        let lateDataRulesContainer = try containerValues.decodeIfPresent([IoTAnalyticsClientTypes.LateDataRule?].self, forKey: .lateDataRules)
        var lateDataRulesDecoded0:[IoTAnalyticsClientTypes.LateDataRule]? = nil
        if let lateDataRulesContainer = lateDataRulesContainer {
            lateDataRulesDecoded0 = [IoTAnalyticsClientTypes.LateDataRule]()
            for structure0 in lateDataRulesContainer {
                if let structure0 = structure0 {
                    lateDataRulesDecoded0?.append(structure0)
                }
            }
        }
        lateDataRules = lateDataRulesDecoded0
    }
}

extension UpdateDatasetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateDatasetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateDatasetOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateDatasetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateDatasetOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateDatastoreInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datastoreStorage
        case fileFormatConfiguration
        case retentionPeriod
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let datastoreStorage = self.datastoreStorage {
            try encodeContainer.encode(datastoreStorage, forKey: .datastoreStorage)
        }
        if let fileFormatConfiguration = self.fileFormatConfiguration {
            try encodeContainer.encode(fileFormatConfiguration, forKey: .fileFormatConfiguration)
        }
        if let retentionPeriod = self.retentionPeriod {
            try encodeContainer.encode(retentionPeriod, forKey: .retentionPeriod)
        }
    }
}

extension UpdateDatastoreInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let datastoreName = datastoreName else {
            return nil
        }
        return "/datastores/\(datastoreName.urlPercentEncoding())"
    }
}

public struct UpdateDatastoreInput: Swift.Equatable {
    /// The name of the data store to be updated.
    /// This member is required.
    public var datastoreName: Swift.String?
    /// Where data in a data store is stored.. You can choose serviceManagedS3 storage, customerManagedS3 storage, or iotSiteWiseMultiLayerStorage storage. The default is serviceManagedS3. You can't change the choice of Amazon S3 storage after your data store is created.
    public var datastoreStorage: IoTAnalyticsClientTypes.DatastoreStorage?
    /// Contains the configuration information of file formats. IoT Analytics data stores support JSON and [Parquet](https://parquet.apache.org/). The default file format is JSON. You can specify only one format. You can't change the file format after you create the data store.
    public var fileFormatConfiguration: IoTAnalyticsClientTypes.FileFormatConfiguration?
    /// How long, in days, message data is kept for the data store. The retention period can't be updated if the data store's Amazon S3 storage is customer-managed.
    public var retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod?

    public init (
        datastoreName: Swift.String? = nil,
        datastoreStorage: IoTAnalyticsClientTypes.DatastoreStorage? = nil,
        fileFormatConfiguration: IoTAnalyticsClientTypes.FileFormatConfiguration? = nil,
        retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod? = nil
    )
    {
        self.datastoreName = datastoreName
        self.datastoreStorage = datastoreStorage
        self.fileFormatConfiguration = fileFormatConfiguration
        self.retentionPeriod = retentionPeriod
    }
}

struct UpdateDatastoreInputBody: Swift.Equatable {
    let retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod?
    let datastoreStorage: IoTAnalyticsClientTypes.DatastoreStorage?
    let fileFormatConfiguration: IoTAnalyticsClientTypes.FileFormatConfiguration?
}

extension UpdateDatastoreInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datastoreStorage
        case fileFormatConfiguration
        case retentionPeriod
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let retentionPeriodDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.RetentionPeriod.self, forKey: .retentionPeriod)
        retentionPeriod = retentionPeriodDecoded
        let datastoreStorageDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.DatastoreStorage.self, forKey: .datastoreStorage)
        datastoreStorage = datastoreStorageDecoded
        let fileFormatConfigurationDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.FileFormatConfiguration.self, forKey: .fileFormatConfiguration)
        fileFormatConfiguration = fileFormatConfigurationDecoded
    }
}

extension UpdateDatastoreOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateDatastoreOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateDatastoreOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateDatastoreOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateDatastoreOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdatePipelineInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineActivities
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pipelineActivities = pipelineActivities {
            var pipelineActivitiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pipelineActivities)
            for pipelineactivity0 in pipelineActivities {
                try pipelineActivitiesContainer.encode(pipelineactivity0)
            }
        }
    }
}

extension UpdatePipelineInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let pipelineName = pipelineName else {
            return nil
        }
        return "/pipelines/\(pipelineName.urlPercentEncoding())"
    }
}

public struct UpdatePipelineInput: Swift.Equatable {
    /// A list of PipelineActivity objects. Activities perform transformations on your messages, such as removing, renaming or adding message attributes; filtering messages based on attribute values; invoking your Lambda functions on messages for advanced processing; or performing mathematical transformations to normalize device data. The list can be 2-25 PipelineActivity objects and must contain both a channel and a datastore activity. Each entry in the list must contain only one activity. For example: pipelineActivities = [ { "channel": { ... } }, { "lambda": { ... } }, ... ]
    /// This member is required.
    public var pipelineActivities: [IoTAnalyticsClientTypes.PipelineActivity]?
    /// The name of the pipeline to update.
    /// This member is required.
    public var pipelineName: Swift.String?

    public init (
        pipelineActivities: [IoTAnalyticsClientTypes.PipelineActivity]? = nil,
        pipelineName: Swift.String? = nil
    )
    {
        self.pipelineActivities = pipelineActivities
        self.pipelineName = pipelineName
    }
}

struct UpdatePipelineInputBody: Swift.Equatable {
    let pipelineActivities: [IoTAnalyticsClientTypes.PipelineActivity]?
}

extension UpdatePipelineInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineActivities
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineActivitiesContainer = try containerValues.decodeIfPresent([IoTAnalyticsClientTypes.PipelineActivity?].self, forKey: .pipelineActivities)
        var pipelineActivitiesDecoded0:[IoTAnalyticsClientTypes.PipelineActivity]? = nil
        if let pipelineActivitiesContainer = pipelineActivitiesContainer {
            pipelineActivitiesDecoded0 = [IoTAnalyticsClientTypes.PipelineActivity]()
            for structure0 in pipelineActivitiesContainer {
                if let structure0 = structure0 {
                    pipelineActivitiesDecoded0?.append(structure0)
                }
            }
        }
        pipelineActivities = pipelineActivitiesDecoded0
    }
}

extension UpdatePipelineOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdatePipelineOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdatePipelineOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdatePipelineOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdatePipelineOutputResponse: Swift.Equatable {

    public init () { }
}

extension IoTAnalyticsClientTypes.Variable: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetContentVersionValue
        case doubleValue
        case name
        case outputFileUriValue
        case stringValue
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let datasetContentVersionValue = self.datasetContentVersionValue {
            try encodeContainer.encode(datasetContentVersionValue, forKey: .datasetContentVersionValue)
        }
        if let doubleValue = self.doubleValue {
            try encodeContainer.encode(doubleValue, forKey: .doubleValue)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let outputFileUriValue = self.outputFileUriValue {
            try encodeContainer.encode(outputFileUriValue, forKey: .outputFileUriValue)
        }
        if let stringValue = self.stringValue {
            try encodeContainer.encode(stringValue, forKey: .stringValue)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let stringValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stringValue)
        stringValue = stringValueDecoded
        let doubleValueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .doubleValue)
        doubleValue = doubleValueDecoded
        let datasetContentVersionValueDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.DatasetContentVersionValue.self, forKey: .datasetContentVersionValue)
        datasetContentVersionValue = datasetContentVersionValueDecoded
        let outputFileUriValueDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.OutputFileUriValue.self, forKey: .outputFileUriValue)
        outputFileUriValue = outputFileUriValueDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// An instance of a variable to be passed to the containerAction execution. Each variable must have a name and a value given by one of stringValue, datasetContentVersionValue, or outputFileUriValue.
    public struct Variable: Swift.Equatable {
        /// The value of the variable as a structure that specifies a dataset content version.
        public var datasetContentVersionValue: IoTAnalyticsClientTypes.DatasetContentVersionValue?
        /// The value of the variable as a double (numeric).
        public var doubleValue: Swift.Double?
        /// The name of the variable.
        /// This member is required.
        public var name: Swift.String?
        /// The value of the variable as a structure that specifies an output file URI.
        public var outputFileUriValue: IoTAnalyticsClientTypes.OutputFileUriValue?
        /// The value of the variable as a string.
        public var stringValue: Swift.String?

        public init (
            datasetContentVersionValue: IoTAnalyticsClientTypes.DatasetContentVersionValue? = nil,
            doubleValue: Swift.Double? = nil,
            name: Swift.String? = nil,
            outputFileUriValue: IoTAnalyticsClientTypes.OutputFileUriValue? = nil,
            stringValue: Swift.String? = nil
        )
        {
            self.datasetContentVersionValue = datasetContentVersionValue
            self.doubleValue = doubleValue
            self.name = name
            self.outputFileUriValue = outputFileUriValue
            self.stringValue = stringValue
        }
    }

}

extension IoTAnalyticsClientTypes.VersioningConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxVersions
        case unlimited
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxVersions = self.maxVersions {
            try encodeContainer.encode(maxVersions, forKey: .maxVersions)
        }
        if unlimited != false {
            try encodeContainer.encode(unlimited, forKey: .unlimited)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let unlimitedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .unlimited) ?? false
        unlimited = unlimitedDecoded
        let maxVersionsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxVersions)
        maxVersions = maxVersionsDecoded
    }
}

extension IoTAnalyticsClientTypes {
    /// Information about the versioning of dataset contents.
    public struct VersioningConfiguration: Swift.Equatable {
        /// How many versions of dataset contents are kept. The unlimited parameter must be false.
        public var maxVersions: Swift.Int?
        /// If true, unlimited versions of dataset contents are kept.
        public var unlimited: Swift.Bool

        public init (
            maxVersions: Swift.Int? = nil,
            unlimited: Swift.Bool = false
        )
        {
            self.maxVersions = maxVersions
            self.unlimited = unlimited
        }
    }

}
