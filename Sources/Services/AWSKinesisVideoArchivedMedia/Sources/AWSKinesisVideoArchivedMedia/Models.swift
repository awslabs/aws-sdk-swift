//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum Smithy.ByteStream
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError

/// Kinesis Video Streams has throttled the request because you have exceeded a limit. Try making the call later. For information about limits, see [Kinesis Video Streams Limits](http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/limits.html).
public struct ClientLimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ClientLimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// A specified parameter exceeds its restrictions, is not supported, or can't be used.
public struct InvalidArgumentException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidArgumentException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The codec private data in at least one of the tracks of the video stream is not valid for this operation.
public struct InvalidCodecPrivateDataException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidCodecPrivateDataException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// One or more frames in the requested clip could not be parsed based on the specified codec.
public struct InvalidMediaFrameException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidMediaFrameException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// No codec private data was found in at least one of tracks of the video stream.
public struct MissingCodecPrivateDataException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "MissingCodecPrivateDataException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// GetImages was requested for a stream that does not retain data (that is, has a DataRetentionInHours of 0).
public struct NoDataRetentionException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NoDataRetentionException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Status Code: 403, The caller is not authorized to perform an operation on the given stream, or the token has expired.
public struct NotAuthorizedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NotAuthorizedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// GetImages will throw this error when Kinesis Video Streams can't find the stream that you specified. GetHLSStreamingSessionURL and GetDASHStreamingSessionURL throw this error if a session with a PlaybackMode of ON_DEMAND or LIVE_REPLAYis requested for a stream that has no fragments within the requested time range, or if a session with a PlaybackMode of LIVE is requested for a stream that has no fragments within the last 30 seconds.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The type of the media (for example, h.264 or h.265 video or ACC or G.711 audio) could not be determined from the codec IDs of the tracks in the first fragment for a playback session. The codec ID for track 1 should be V_MPEG/ISO/AVC and, optionally, the codec ID for track 2 should be A_AAC.
public struct UnsupportedStreamMediaTypeException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnsupportedStreamMediaTypeException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension KinesisVideoArchivedMediaClientTypes {

    public enum ClipFragmentSelectorType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case producerTimestamp
        case serverTimestamp
        case sdkUnknown(Swift.String)

        public static var allCases: [ClipFragmentSelectorType] {
            return [
                .producerTimestamp,
                .serverTimestamp
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .producerTimestamp: return "PRODUCER_TIMESTAMP"
            case .serverTimestamp: return "SERVER_TIMESTAMP"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KinesisVideoArchivedMediaClientTypes {

    /// The range of timestamps for which to return fragments.
    public struct ClipTimestampRange: Swift.Sendable {
        /// The end of the timestamp range for the requested media. This value must be within 24 hours of the specified StartTimestamp, and it must be later than the StartTimestamp value. If FragmentSelectorType for the request is SERVER_TIMESTAMP, this value must be in the past. This value is inclusive. The EndTimestamp is compared to the (starting) timestamp of the fragment. Fragments that start before the EndTimestamp value and continue past it are included in the session.
        /// This member is required.
        public var endTimestamp: Foundation.Date?
        /// The starting timestamp in the range of timestamps for which to return fragments. Only fragments that start exactly at or after StartTimestamp are included in the session. Fragments that start before StartTimestamp and continue past it aren't included in the session. If FragmentSelectorType is SERVER_TIMESTAMP, the StartTimestamp must be later than the stream head.
        /// This member is required.
        public var startTimestamp: Foundation.Date?

        public init(
            endTimestamp: Foundation.Date? = nil,
            startTimestamp: Foundation.Date? = nil
        )
        {
            self.endTimestamp = endTimestamp
            self.startTimestamp = startTimestamp
        }
    }
}

extension KinesisVideoArchivedMediaClientTypes {

    /// Describes the timestamp range and timestamp origin of a range of fragments. Fragments that have duplicate producer timestamps are deduplicated. This means that if producers are producing a stream of fragments with producer timestamps that are approximately equal to the true clock time, the clip will contain all of the fragments within the requested timestamp range. If some fragments are ingested within the same time range and very different points in time, only the oldest ingested collection of fragments are returned.
    public struct ClipFragmentSelector: Swift.Sendable {
        /// The origin of the timestamps to use (Server or Producer).
        /// This member is required.
        public var fragmentSelectorType: KinesisVideoArchivedMediaClientTypes.ClipFragmentSelectorType?
        /// The range of timestamps to return.
        /// This member is required.
        public var timestampRange: KinesisVideoArchivedMediaClientTypes.ClipTimestampRange?

        public init(
            fragmentSelectorType: KinesisVideoArchivedMediaClientTypes.ClipFragmentSelectorType? = nil,
            timestampRange: KinesisVideoArchivedMediaClientTypes.ClipTimestampRange? = nil
        )
        {
            self.fragmentSelectorType = fragmentSelectorType
            self.timestampRange = timestampRange
        }
    }
}

public struct GetClipInput: Swift.Sendable {
    /// The time range of the requested clip and the source of the timestamps.
    /// This member is required.
    public var clipFragmentSelector: KinesisVideoArchivedMediaClientTypes.ClipFragmentSelector?
    /// The Amazon Resource Name (ARN) of the stream for which to retrieve the media clip. You must specify either the StreamName or the StreamARN.
    public var streamARN: Swift.String?
    /// The name of the stream for which to retrieve the media clip. You must specify either the StreamName or the StreamARN.
    public var streamName: Swift.String?

    public init(
        clipFragmentSelector: KinesisVideoArchivedMediaClientTypes.ClipFragmentSelector? = nil,
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil
    )
    {
        self.clipFragmentSelector = clipFragmentSelector
        self.streamARN = streamARN
        self.streamName = streamName
    }
}

public struct GetClipOutput: Swift.Sendable {
    /// The content type of the media in the requested clip.
    public var contentType: Swift.String?
    /// Traditional MP4 file that contains the media clip from the specified video stream. The output will contain the first 100 MB or the first 200 fragments from the specified start timestamp. For more information, see [Kinesis Video Streams Limits](https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/limits.html).
    public var payload: Smithy.ByteStream?

    public init(
        contentType: Swift.String? = nil,
        payload: Smithy.ByteStream? = Smithy.ByteStream.data(Foundation.Data("".utf8))
    )
    {
        self.contentType = contentType
        self.payload = payload
    }
}

extension KinesisVideoArchivedMediaClientTypes {

    public enum DASHFragmentSelectorType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case producerTimestamp
        case serverTimestamp
        case sdkUnknown(Swift.String)

        public static var allCases: [DASHFragmentSelectorType] {
            return [
                .producerTimestamp,
                .serverTimestamp
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .producerTimestamp: return "PRODUCER_TIMESTAMP"
            case .serverTimestamp: return "SERVER_TIMESTAMP"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KinesisVideoArchivedMediaClientTypes {

    /// The start and end of the timestamp range for the requested media. This value should not be present if PlaybackType is LIVE. The values in DASHimestampRange are inclusive. Fragments that start exactly at or after the start time are included in the session. Fragments that start before the start time and continue past it are not included in the session.
    public struct DASHTimestampRange: Swift.Sendable {
        /// The end of the timestamp range for the requested media. This value must be within 24 hours of the specified StartTimestamp, and it must be later than the StartTimestamp value. If FragmentSelectorType for the request is SERVER_TIMESTAMP, this value must be in the past. The EndTimestamp value is required for ON_DEMAND mode, but optional for LIVE_REPLAY mode. If the EndTimestamp is not set for LIVE_REPLAY mode then the session will continue to include newly ingested fragments until the session expires. This value is inclusive. The EndTimestamp is compared to the (starting) timestamp of the fragment. Fragments that start before the EndTimestamp value and continue past it are included in the session.
        public var endTimestamp: Foundation.Date?
        /// The start of the timestamp range for the requested media. If the DASHTimestampRange value is specified, the StartTimestamp value is required. Only fragments that start exactly at or after StartTimestamp are included in the session. Fragments that start before StartTimestamp and continue past it aren't included in the session. If FragmentSelectorType is SERVER_TIMESTAMP, the StartTimestamp must be later than the stream head.
        public var startTimestamp: Foundation.Date?

        public init(
            endTimestamp: Foundation.Date? = nil,
            startTimestamp: Foundation.Date? = nil
        )
        {
            self.endTimestamp = endTimestamp
            self.startTimestamp = startTimestamp
        }
    }
}

extension KinesisVideoArchivedMediaClientTypes {

    /// Contains the range of timestamps for the requested media, and the source of the timestamps.
    public struct DASHFragmentSelector: Swift.Sendable {
        /// The source of the timestamps for the requested media. When FragmentSelectorType is set to PRODUCER_TIMESTAMP and [GetDASHStreamingSessionURLInput$PlaybackMode] is ON_DEMAND or LIVE_REPLAY, the first fragment ingested with a producer timestamp within the specified [FragmentSelector$TimestampRange] is included in the media playlist. In addition, the fragments with producer timestamps within the TimestampRange ingested immediately following the first fragment (up to the [GetDASHStreamingSessionURLInput$MaxManifestFragmentResults] value) are included. Fragments that have duplicate producer timestamps are deduplicated. This means that if producers are producing a stream of fragments with producer timestamps that are approximately equal to the true clock time, the MPEG-DASH manifest will contain all of the fragments within the requested timestamp range. If some fragments are ingested within the same time range and very different points in time, only the oldest ingested collection of fragments are returned. When FragmentSelectorType is set to PRODUCER_TIMESTAMP and [GetDASHStreamingSessionURLInput$PlaybackMode] is LIVE, the producer timestamps are used in the MP4 fragments and for deduplication. But the most recently ingested fragments based on server timestamps are included in the MPEG-DASH manifest. This means that even if fragments ingested in the past have producer timestamps with values now, they are not included in the HLS media playlist. The default is SERVER_TIMESTAMP.
        public var fragmentSelectorType: KinesisVideoArchivedMediaClientTypes.DASHFragmentSelectorType?
        /// The start and end of the timestamp range for the requested media. This value should not be present if PlaybackType is LIVE.
        public var timestampRange: KinesisVideoArchivedMediaClientTypes.DASHTimestampRange?

        public init(
            fragmentSelectorType: KinesisVideoArchivedMediaClientTypes.DASHFragmentSelectorType? = nil,
            timestampRange: KinesisVideoArchivedMediaClientTypes.DASHTimestampRange? = nil
        )
        {
            self.fragmentSelectorType = fragmentSelectorType
            self.timestampRange = timestampRange
        }
    }
}

extension KinesisVideoArchivedMediaClientTypes {

    public enum DASHDisplayFragmentNumber: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case always
        case never
        case sdkUnknown(Swift.String)

        public static var allCases: [DASHDisplayFragmentNumber] {
            return [
                .always,
                .never
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .always: return "ALWAYS"
            case .never: return "NEVER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KinesisVideoArchivedMediaClientTypes {

    public enum DASHDisplayFragmentTimestamp: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case always
        case never
        case sdkUnknown(Swift.String)

        public static var allCases: [DASHDisplayFragmentTimestamp] {
            return [
                .always,
                .never
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .always: return "ALWAYS"
            case .never: return "NEVER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KinesisVideoArchivedMediaClientTypes {

    public enum DASHPlaybackMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case live
        case liveReplay
        case onDemand
        case sdkUnknown(Swift.String)

        public static var allCases: [DASHPlaybackMode] {
            return [
                .live,
                .liveReplay,
                .onDemand
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .live: return "LIVE"
            case .liveReplay: return "LIVE_REPLAY"
            case .onDemand: return "ON_DEMAND"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetDASHStreamingSessionURLInput: Swift.Sendable {
    /// The time range of the requested fragment and the source of the timestamps. This parameter is required if PlaybackMode is ON_DEMAND or LIVE_REPLAY. This parameter is optional if PlaybackMode isLIVE. If PlaybackMode is LIVE, the FragmentSelectorType can be set, but the TimestampRange should not be set. If PlaybackMode is ON_DEMAND or LIVE_REPLAY, both FragmentSelectorType and TimestampRange must be set.
    public var dashFragmentSelector: KinesisVideoArchivedMediaClientTypes.DASHFragmentSelector?
    /// Fragments are identified in the manifest file based on their sequence number in the session. If DisplayFragmentNumber is set to ALWAYS, the Kinesis Video Streams fragment number is added to each S element in the manifest file with the attribute name “kvs:fn”. These fragment numbers can be used for logging or for use with other APIs (e.g. GetMedia and GetMediaForFragmentList). A custom MPEG-DASH media player is necessary to leverage these this custom attribute. The default value is NEVER.
    public var displayFragmentNumber: KinesisVideoArchivedMediaClientTypes.DASHDisplayFragmentNumber?
    /// Per the MPEG-DASH specification, the wall-clock time of fragments in the manifest file can be derived using attributes in the manifest itself. However, typically, MPEG-DASH compatible media players do not properly handle gaps in the media timeline. Kinesis Video Streams adjusts the media timeline in the manifest file to enable playback of media with discontinuities. Therefore, the wall-clock time derived from the manifest file may be inaccurate. If DisplayFragmentTimestamp is set to ALWAYS, the accurate fragment timestamp is added to each S element in the manifest file with the attribute name “kvs:ts”. A custom MPEG-DASH media player is necessary to leverage this custom attribute. The default value is NEVER. When [DASHFragmentSelector] is SERVER_TIMESTAMP, the timestamps will be the server start timestamps. Similarly, when [DASHFragmentSelector] is PRODUCER_TIMESTAMP, the timestamps will be the producer start timestamps.
    public var displayFragmentTimestamp: KinesisVideoArchivedMediaClientTypes.DASHDisplayFragmentTimestamp?
    /// The time in seconds until the requested session expires. This value can be between 300 (5 minutes) and 43200 (12 hours). When a session expires, no new calls to GetDashManifest, GetMP4InitFragment, or GetMP4MediaFragment can be made for that session. The default is 300 (5 minutes).
    public var expires: Swift.Int?
    /// The maximum number of fragments that are returned in the MPEG-DASH manifest. When the PlaybackMode is LIVE, the most recent fragments are returned up to this value. When the PlaybackMode is ON_DEMAND, the oldest fragments are returned, up to this maximum number. When there are a higher number of fragments available in a live MPEG-DASH manifest, video players often buffer content before starting playback. Increasing the buffer size increases the playback latency, but it decreases the likelihood that rebuffering will occur during playback. We recommend that a live MPEG-DASH manifest have a minimum of 3 fragments and a maximum of 10 fragments. The default is 5 fragments if PlaybackMode is LIVE or LIVE_REPLAY, and 1,000 if PlaybackMode is ON_DEMAND. The maximum value of 1,000 fragments corresponds to more than 16 minutes of video on streams with 1-second fragments, and more than 2 1/2 hours of video on streams with 10-second fragments.
    public var maxManifestFragmentResults: Swift.Int?
    /// Whether to retrieve live, live replay, or archived, on-demand data. Features of the three types of sessions include the following:
    ///
    /// * LIVE : For sessions of this type, the MPEG-DASH manifest is continually updated with the latest fragments as they become available. We recommend that the media player retrieve a new manifest on a one-second interval. When this type of session is played in a media player, the user interface typically displays a "live" notification, with no scrubber control for choosing the position in the playback window to display. In LIVE mode, the newest available fragments are included in an MPEG-DASH manifest, even if there is a gap between fragments (that is, if a fragment is missing). A gap like this might cause a media player to halt or cause a jump in playback. In this mode, fragments are not added to the MPEG-DASH manifest if they are older than the newest fragment in the playlist. If the missing fragment becomes available after a subsequent fragment is added to the manifest, the older fragment is not added, and the gap is not filled.
    ///
    /// * LIVE_REPLAY : For sessions of this type, the MPEG-DASH manifest is updated similarly to how it is updated for LIVE mode except that it starts by including fragments from a given start time. Instead of fragments being added as they are ingested, fragments are added as the duration of the next fragment elapses. For example, if the fragments in the session are two seconds long, then a new fragment is added to the manifest every two seconds. This mode is useful to be able to start playback from when an event is detected and continue live streaming media that has not yet been ingested as of the time of the session creation. This mode is also useful to stream previously archived media without being limited by the 1,000 fragment limit in the ON_DEMAND mode.
    ///
    /// * ON_DEMAND : For sessions of this type, the MPEG-DASH manifest contains all the fragments for the session, up to the number that is specified in MaxManifestFragmentResults. The manifest must be retrieved only once for each session. When this type of session is played in a media player, the user interface typically displays a scrubber control for choosing the position in the playback window to display.
    ///
    ///
    /// In all playback modes, if FragmentSelectorType is PRODUCER_TIMESTAMP, and if there are multiple fragments with the same start timestamp, the fragment that has the larger fragment number (that is, the newer fragment) is included in the MPEG-DASH manifest. The other fragments are not included. Fragments that have different timestamps but have overlapping durations are still included in the MPEG-DASH manifest. This can lead to unexpected behavior in the media player. The default is LIVE.
    public var playbackMode: KinesisVideoArchivedMediaClientTypes.DASHPlaybackMode?
    /// The Amazon Resource Name (ARN) of the stream for which to retrieve the MPEG-DASH manifest URL. You must specify either the StreamName or the StreamARN.
    public var streamARN: Swift.String?
    /// The name of the stream for which to retrieve the MPEG-DASH manifest URL. You must specify either the StreamName or the StreamARN.
    public var streamName: Swift.String?

    public init(
        dashFragmentSelector: KinesisVideoArchivedMediaClientTypes.DASHFragmentSelector? = nil,
        displayFragmentNumber: KinesisVideoArchivedMediaClientTypes.DASHDisplayFragmentNumber? = nil,
        displayFragmentTimestamp: KinesisVideoArchivedMediaClientTypes.DASHDisplayFragmentTimestamp? = nil,
        expires: Swift.Int? = nil,
        maxManifestFragmentResults: Swift.Int? = nil,
        playbackMode: KinesisVideoArchivedMediaClientTypes.DASHPlaybackMode? = nil,
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil
    )
    {
        self.dashFragmentSelector = dashFragmentSelector
        self.displayFragmentNumber = displayFragmentNumber
        self.displayFragmentTimestamp = displayFragmentTimestamp
        self.expires = expires
        self.maxManifestFragmentResults = maxManifestFragmentResults
        self.playbackMode = playbackMode
        self.streamARN = streamARN
        self.streamName = streamName
    }
}

public struct GetDASHStreamingSessionURLOutput: Swift.Sendable {
    /// The URL (containing the session token) that a media player can use to retrieve the MPEG-DASH manifest.
    public var dashStreamingSessionURL: Swift.String?

    public init(
        dashStreamingSessionURL: Swift.String? = nil
    )
    {
        self.dashStreamingSessionURL = dashStreamingSessionURL
    }
}

extension KinesisVideoArchivedMediaClientTypes {

    public enum ContainerFormat: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case fragmentedMp4
        case mpegTs
        case sdkUnknown(Swift.String)

        public static var allCases: [ContainerFormat] {
            return [
                .fragmentedMp4,
                .mpegTs
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .fragmentedMp4: return "FRAGMENTED_MP4"
            case .mpegTs: return "MPEG_TS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KinesisVideoArchivedMediaClientTypes {

    public enum HLSDiscontinuityMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case always
        case never
        case onDiscontinuity
        case sdkUnknown(Swift.String)

        public static var allCases: [HLSDiscontinuityMode] {
            return [
                .always,
                .never,
                .onDiscontinuity
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .always: return "ALWAYS"
            case .never: return "NEVER"
            case .onDiscontinuity: return "ON_DISCONTINUITY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KinesisVideoArchivedMediaClientTypes {

    public enum HLSDisplayFragmentTimestamp: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case always
        case never
        case sdkUnknown(Swift.String)

        public static var allCases: [HLSDisplayFragmentTimestamp] {
            return [
                .always,
                .never
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .always: return "ALWAYS"
            case .never: return "NEVER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KinesisVideoArchivedMediaClientTypes {

    public enum HLSFragmentSelectorType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case producerTimestamp
        case serverTimestamp
        case sdkUnknown(Swift.String)

        public static var allCases: [HLSFragmentSelectorType] {
            return [
                .producerTimestamp,
                .serverTimestamp
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .producerTimestamp: return "PRODUCER_TIMESTAMP"
            case .serverTimestamp: return "SERVER_TIMESTAMP"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KinesisVideoArchivedMediaClientTypes {

    /// The start and end of the timestamp range for the requested media. This value should not be present if PlaybackType is LIVE.
    public struct HLSTimestampRange: Swift.Sendable {
        /// The end of the timestamp range for the requested media. This value must be within 24 hours of the specified StartTimestamp, and it must be later than the StartTimestamp value. If FragmentSelectorType for the request is SERVER_TIMESTAMP, this value must be in the past. The EndTimestamp value is required for ON_DEMAND mode, but optional for LIVE_REPLAY mode. If the EndTimestamp is not set for LIVE_REPLAY mode then the session will continue to include newly ingested fragments until the session expires. This value is inclusive. The EndTimestamp is compared to the (starting) timestamp of the fragment. Fragments that start before the EndTimestamp value and continue past it are included in the session.
        public var endTimestamp: Foundation.Date?
        /// The start of the timestamp range for the requested media. If the HLSTimestampRange value is specified, the StartTimestamp value is required. Only fragments that start exactly at or after StartTimestamp are included in the session. Fragments that start before StartTimestamp and continue past it aren't included in the session. If FragmentSelectorType is SERVER_TIMESTAMP, the StartTimestamp must be later than the stream head.
        public var startTimestamp: Foundation.Date?

        public init(
            endTimestamp: Foundation.Date? = nil,
            startTimestamp: Foundation.Date? = nil
        )
        {
            self.endTimestamp = endTimestamp
            self.startTimestamp = startTimestamp
        }
    }
}

extension KinesisVideoArchivedMediaClientTypes {

    /// Contains the range of timestamps for the requested media, and the source of the timestamps.
    public struct HLSFragmentSelector: Swift.Sendable {
        /// The source of the timestamps for the requested media. When FragmentSelectorType is set to PRODUCER_TIMESTAMP and [GetHLSStreamingSessionURLInput$PlaybackMode] is ON_DEMAND or LIVE_REPLAY, the first fragment ingested with a producer timestamp within the specified [FragmentSelector$TimestampRange] is included in the media playlist. In addition, the fragments with producer timestamps within the TimestampRange ingested immediately following the first fragment (up to the [GetHLSStreamingSessionURLInput$MaxMediaPlaylistFragmentResults] value) are included. Fragments that have duplicate producer timestamps are deduplicated. This means that if producers are producing a stream of fragments with producer timestamps that are approximately equal to the true clock time, the HLS media playlists will contain all of the fragments within the requested timestamp range. If some fragments are ingested within the same time range and very different points in time, only the oldest ingested collection of fragments are returned. When FragmentSelectorType is set to PRODUCER_TIMESTAMP and [GetHLSStreamingSessionURLInput$PlaybackMode] is LIVE, the producer timestamps are used in the MP4 fragments and for deduplication. But the most recently ingested fragments based on server timestamps are included in the HLS media playlist. This means that even if fragments ingested in the past have producer timestamps with values now, they are not included in the HLS media playlist. The default is SERVER_TIMESTAMP.
        public var fragmentSelectorType: KinesisVideoArchivedMediaClientTypes.HLSFragmentSelectorType?
        /// The start and end of the timestamp range for the requested media. This value should not be present if PlaybackType is LIVE.
        public var timestampRange: KinesisVideoArchivedMediaClientTypes.HLSTimestampRange?

        public init(
            fragmentSelectorType: KinesisVideoArchivedMediaClientTypes.HLSFragmentSelectorType? = nil,
            timestampRange: KinesisVideoArchivedMediaClientTypes.HLSTimestampRange? = nil
        )
        {
            self.fragmentSelectorType = fragmentSelectorType
            self.timestampRange = timestampRange
        }
    }
}

extension KinesisVideoArchivedMediaClientTypes {

    public enum HLSPlaybackMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case live
        case liveReplay
        case onDemand
        case sdkUnknown(Swift.String)

        public static var allCases: [HLSPlaybackMode] {
            return [
                .live,
                .liveReplay,
                .onDemand
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .live: return "LIVE"
            case .liveReplay: return "LIVE_REPLAY"
            case .onDemand: return "ON_DEMAND"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetHLSStreamingSessionURLInput: Swift.Sendable {
    /// Specifies which format should be used for packaging the media. Specifying the FRAGMENTED_MP4 container format packages the media into MP4 fragments (fMP4 or CMAF). This is the recommended packaging because there is minimal packaging overhead. The other container format option is MPEG_TS. HLS has supported MPEG TS chunks since it was released and is sometimes the only supported packaging on older HLS players. MPEG TS typically has a 5-25 percent packaging overhead. This means MPEG TS typically requires 5-25 percent more bandwidth and cost than fMP4. The default is FRAGMENTED_MP4.
    public var containerFormat: KinesisVideoArchivedMediaClientTypes.ContainerFormat?
    /// Specifies when flags marking discontinuities between fragments are added to the media playlists. Media players typically build a timeline of media content to play, based on the timestamps of each fragment. This means that if there is any overlap or gap between fragments (as is typical if [HLSFragmentSelector] is set to SERVER_TIMESTAMP), the media player timeline will also have small gaps between fragments in some places, and will overwrite frames in other places. Gaps in the media player timeline can cause playback to stall and overlaps can cause playback to be jittery. When there are discontinuity flags between fragments, the media player is expected to reset the timeline, resulting in the next fragment being played immediately after the previous fragment. The following modes are supported:
    ///
    /// * ALWAYS: a discontinuity marker is placed between every fragment in the HLS media playlist. It is recommended to use a value of ALWAYS if the fragment timestamps are not accurate.
    ///
    /// * NEVER: no discontinuity markers are placed anywhere. It is recommended to use a value of NEVER to ensure the media player timeline most accurately maps to the producer timestamps.
    ///
    /// * ON_DISCONTINUITY: a discontinuity marker is placed between fragments that have a gap or overlap of more than 50 milliseconds. For most playback scenarios, it is recommended to use a value of ON_DISCONTINUITY so that the media player timeline is only reset when there is a significant issue with the media timeline (e.g. a missing fragment).
    ///
    ///
    /// The default is ALWAYS when [HLSFragmentSelector] is set to SERVER_TIMESTAMP, and NEVER when it is set to PRODUCER_TIMESTAMP.
    public var discontinuityMode: KinesisVideoArchivedMediaClientTypes.HLSDiscontinuityMode?
    /// Specifies when the fragment start timestamps should be included in the HLS media playlist. Typically, media players report the playhead position as a time relative to the start of the first fragment in the playback session. However, when the start timestamps are included in the HLS media playlist, some media players might report the current playhead as an absolute time based on the fragment timestamps. This can be useful for creating a playback experience that shows viewers the wall-clock time of the media. The default is NEVER. When [HLSFragmentSelector] is SERVER_TIMESTAMP, the timestamps will be the server start timestamps. Similarly, when [HLSFragmentSelector] is PRODUCER_TIMESTAMP, the timestamps will be the producer start timestamps.
    public var displayFragmentTimestamp: KinesisVideoArchivedMediaClientTypes.HLSDisplayFragmentTimestamp?
    /// The time in seconds until the requested session expires. This value can be between 300 (5 minutes) and 43200 (12 hours). When a session expires, no new calls to GetHLSMasterPlaylist, GetHLSMediaPlaylist, GetMP4InitFragment, GetMP4MediaFragment, or GetTSFragment can be made for that session. The default is 300 (5 minutes).
    public var expires: Swift.Int?
    /// The time range of the requested fragment and the source of the timestamps. This parameter is required if PlaybackMode is ON_DEMAND or LIVE_REPLAY. This parameter is optional if PlaybackMode isLIVE. If PlaybackMode is LIVE, the FragmentSelectorType can be set, but the TimestampRange should not be set. If PlaybackMode is ON_DEMAND or LIVE_REPLAY, both FragmentSelectorType and TimestampRange must be set.
    public var hlsFragmentSelector: KinesisVideoArchivedMediaClientTypes.HLSFragmentSelector?
    /// The maximum number of fragments that are returned in the HLS media playlists. When the PlaybackMode is LIVE, the most recent fragments are returned up to this value. When the PlaybackMode is ON_DEMAND, the oldest fragments are returned, up to this maximum number. When there are a higher number of fragments available in a live HLS media playlist, video players often buffer content before starting playback. Increasing the buffer size increases the playback latency, but it decreases the likelihood that rebuffering will occur during playback. We recommend that a live HLS media playlist have a minimum of 3 fragments and a maximum of 10 fragments. The default is 5 fragments if PlaybackMode is LIVE or LIVE_REPLAY, and 1,000 if PlaybackMode is ON_DEMAND. The maximum value of 5,000 fragments corresponds to more than 80 minutes of video on streams with 1-second fragments, and more than 13 hours of video on streams with 10-second fragments.
    public var maxMediaPlaylistFragmentResults: Swift.Int?
    /// Whether to retrieve live, live replay, or archived, on-demand data. Features of the three types of sessions include the following:
    ///
    /// * LIVE : For sessions of this type, the HLS media playlist is continually updated with the latest fragments as they become available. We recommend that the media player retrieve a new playlist on a one-second interval. When this type of session is played in a media player, the user interface typically displays a "live" notification, with no scrubber control for choosing the position in the playback window to display. In LIVE mode, the newest available fragments are included in an HLS media playlist, even if there is a gap between fragments (that is, if a fragment is missing). A gap like this might cause a media player to halt or cause a jump in playback. In this mode, fragments are not added to the HLS media playlist if they are older than the newest fragment in the playlist. If the missing fragment becomes available after a subsequent fragment is added to the playlist, the older fragment is not added, and the gap is not filled.
    ///
    /// * LIVE_REPLAY : For sessions of this type, the HLS media playlist is updated similarly to how it is updated for LIVE mode except that it starts by including fragments from a given start time. Instead of fragments being added as they are ingested, fragments are added as the duration of the next fragment elapses. For example, if the fragments in the session are two seconds long, then a new fragment is added to the media playlist every two seconds. This mode is useful to be able to start playback from when an event is detected and continue live streaming media that has not yet been ingested as of the time of the session creation. This mode is also useful to stream previously archived media without being limited by the 1,000 fragment limit in the ON_DEMAND mode.
    ///
    /// * ON_DEMAND : For sessions of this type, the HLS media playlist contains all the fragments for the session, up to the number that is specified in MaxMediaPlaylistFragmentResults. The playlist must be retrieved only once for each session. When this type of session is played in a media player, the user interface typically displays a scrubber control for choosing the position in the playback window to display.
    ///
    ///
    /// In all playback modes, if FragmentSelectorType is PRODUCER_TIMESTAMP, and if there are multiple fragments with the same start timestamp, the fragment that has the largest fragment number (that is, the newest fragment) is included in the HLS media playlist. The other fragments are not included. Fragments that have different timestamps but have overlapping durations are still included in the HLS media playlist. This can lead to unexpected behavior in the media player. The default is LIVE.
    public var playbackMode: KinesisVideoArchivedMediaClientTypes.HLSPlaybackMode?
    /// The Amazon Resource Name (ARN) of the stream for which to retrieve the HLS master playlist URL. You must specify either the StreamName or the StreamARN.
    public var streamARN: Swift.String?
    /// The name of the stream for which to retrieve the HLS master playlist URL. You must specify either the StreamName or the StreamARN.
    public var streamName: Swift.String?

    public init(
        containerFormat: KinesisVideoArchivedMediaClientTypes.ContainerFormat? = nil,
        discontinuityMode: KinesisVideoArchivedMediaClientTypes.HLSDiscontinuityMode? = nil,
        displayFragmentTimestamp: KinesisVideoArchivedMediaClientTypes.HLSDisplayFragmentTimestamp? = nil,
        expires: Swift.Int? = nil,
        hlsFragmentSelector: KinesisVideoArchivedMediaClientTypes.HLSFragmentSelector? = nil,
        maxMediaPlaylistFragmentResults: Swift.Int? = nil,
        playbackMode: KinesisVideoArchivedMediaClientTypes.HLSPlaybackMode? = nil,
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil
    )
    {
        self.containerFormat = containerFormat
        self.discontinuityMode = discontinuityMode
        self.displayFragmentTimestamp = displayFragmentTimestamp
        self.expires = expires
        self.hlsFragmentSelector = hlsFragmentSelector
        self.maxMediaPlaylistFragmentResults = maxMediaPlaylistFragmentResults
        self.playbackMode = playbackMode
        self.streamARN = streamARN
        self.streamName = streamName
    }
}

public struct GetHLSStreamingSessionURLOutput: Swift.Sendable {
    /// The URL (containing the session token) that a media player can use to retrieve the HLS master playlist.
    public var hlsStreamingSessionURL: Swift.String?

    public init(
        hlsStreamingSessionURL: Swift.String? = nil
    )
    {
        self.hlsStreamingSessionURL = hlsStreamingSessionURL
    }
}

extension KinesisVideoArchivedMediaClientTypes {

    public enum Format: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case jpeg
        case png
        case sdkUnknown(Swift.String)

        public static var allCases: [Format] {
            return [
                .jpeg,
                .png
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .jpeg: return "JPEG"
            case .png: return "PNG"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KinesisVideoArchivedMediaClientTypes {

    public enum FormatConfigKey: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case jpegquality
        case sdkUnknown(Swift.String)

        public static var allCases: [FormatConfigKey] {
            return [
                .jpegquality
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .jpegquality: return "JPEGQuality"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KinesisVideoArchivedMediaClientTypes {

    public enum ImageSelectorType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case producerTimestamp
        case serverTimestamp
        case sdkUnknown(Swift.String)

        public static var allCases: [ImageSelectorType] {
            return [
                .producerTimestamp,
                .serverTimestamp
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .producerTimestamp: return "PRODUCER_TIMESTAMP"
            case .serverTimestamp: return "SERVER_TIMESTAMP"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetImagesInput: Swift.Sendable {
    /// The end timestamp for the range of images to be generated. If the time range between StartTimestamp and EndTimestamp is more than 300 seconds above StartTimestamp, you will receive an IllegalArgumentException.
    /// This member is required.
    public var endTimestamp: Foundation.Date?
    /// The format that will be used to encode the image.
    /// This member is required.
    public var format: KinesisVideoArchivedMediaClientTypes.Format?
    /// The list of a key-value pair structure that contains extra parameters that can be applied when the image is generated. The FormatConfig key is the JPEGQuality, which indicates the JPEG quality key to be used to generate the image. The FormatConfig value accepts ints from 1 to 100. If the value is 1, the image will be generated with less quality and the best compression. If the value is 100, the image will be generated with the best quality and less compression. If no value is provided, the default value of the JPEGQuality key will be set to 80.
    public var formatConfig: [Swift.String: Swift.String]?
    /// The height of the output image that is used in conjunction with the WidthPixels parameter. When both HeightPixels and WidthPixels parameters are provided, the image will be stretched to fit the specified aspect ratio. If only the HeightPixels parameter is provided, its original aspect ratio will be used to calculate the WidthPixels ratio. If neither parameter is provided, the original image size will be returned.
    public var heightPixels: Swift.Int?
    /// The origin of the Server or Producer timestamps to use to generate the images.
    /// This member is required.
    public var imageSelectorType: KinesisVideoArchivedMediaClientTypes.ImageSelectorType?
    /// The maximum number of images to be returned by the API. The default limit is 25 images per API response. Providing a MaxResults greater than this value will result in a page size of 25. Any additional results will be paginated.
    public var maxResults: Swift.Int?
    /// A token that specifies where to start paginating the next set of Images. This is the GetImages:NextToken from a previously truncated response.
    public var nextToken: Swift.String?
    /// The time interval in milliseconds (ms) at which the images need to be generated from the stream. The minimum value that can be provided is 200 ms (5 images per second). If the timestamp range is less than the sampling interval, the image from the startTimestamp will be returned if available.
    public var samplingInterval: Swift.Int?
    /// The starting point from which the images should be generated. This StartTimestamp must be within an inclusive range of timestamps for an image to be returned.
    /// This member is required.
    public var startTimestamp: Foundation.Date?
    /// The Amazon Resource Name (ARN) of the stream from which to retrieve the images. You must specify either the StreamName or the StreamARN.
    public var streamARN: Swift.String?
    /// The name of the stream from which to retrieve the images. You must specify either the StreamName or the StreamARN.
    public var streamName: Swift.String?
    /// The width of the output image that is used in conjunction with the HeightPixels parameter. When both WidthPixels and HeightPixels parameters are provided, the image will be stretched to fit the specified aspect ratio. If only the WidthPixels parameter is provided or if only the HeightPixels is provided, a ValidationException will be thrown. If neither parameter is provided, the original image size from the stream will be returned.
    public var widthPixels: Swift.Int?

    public init(
        endTimestamp: Foundation.Date? = nil,
        format: KinesisVideoArchivedMediaClientTypes.Format? = nil,
        formatConfig: [Swift.String: Swift.String]? = nil,
        heightPixels: Swift.Int? = nil,
        imageSelectorType: KinesisVideoArchivedMediaClientTypes.ImageSelectorType? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        samplingInterval: Swift.Int? = nil,
        startTimestamp: Foundation.Date? = nil,
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil,
        widthPixels: Swift.Int? = nil
    )
    {
        self.endTimestamp = endTimestamp
        self.format = format
        self.formatConfig = formatConfig
        self.heightPixels = heightPixels
        self.imageSelectorType = imageSelectorType
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.samplingInterval = samplingInterval
        self.startTimestamp = startTimestamp
        self.streamARN = streamARN
        self.streamName = streamName
        self.widthPixels = widthPixels
    }
}

extension KinesisVideoArchivedMediaClientTypes {

    public enum ImageError: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case mediaError
        case noMedia
        case sdkUnknown(Swift.String)

        public static var allCases: [ImageError] {
            return [
                .mediaError,
                .noMedia
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .mediaError: return "MEDIA_ERROR"
            case .noMedia: return "NO_MEDIA"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KinesisVideoArchivedMediaClientTypes {

    /// A structure that contains the Timestamp, Error, and ImageContent.
    public struct Image: Swift.Sendable {
        /// The error message shown when the image for the provided timestamp was not extracted due to a non-tryable error. An error will be returned if:
        ///
        /// * There is no media that exists for the specified Timestamp.
        ///
        ///
        ///
        ///
        /// * The media for the specified time does not allow an image to be extracted. In this case the media is audio only, or the incorrect media has been ingested.
        public var error: KinesisVideoArchivedMediaClientTypes.ImageError?
        /// An attribute of the Image object that is Base64 encoded.
        public var imageContent: Swift.String?
        /// An attribute of the Image object that is used to extract an image from the video stream. This field is used to manage gaps on images or to better understand the pagination window.
        public var timeStamp: Foundation.Date?

        public init(
            error: KinesisVideoArchivedMediaClientTypes.ImageError? = nil,
            imageContent: Swift.String? = nil,
            timeStamp: Foundation.Date? = nil
        )
        {
            self.error = error
            self.imageContent = imageContent
            self.timeStamp = timeStamp
        }
    }
}

public struct GetImagesOutput: Swift.Sendable {
    /// The list of images generated from the video stream. If there is no media available for the given timestamp, the NO_MEDIA error will be listed in the output. If an error occurs while the image is being generated, the MEDIA_ERROR will be listed in the output as the cause of the missing image.
    public var images: [KinesisVideoArchivedMediaClientTypes.Image]?
    /// The encrypted token that was used in the request to get more images.
    public var nextToken: Swift.String?

    public init(
        images: [KinesisVideoArchivedMediaClientTypes.Image]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.images = images
        self.nextToken = nextToken
    }
}

public struct GetMediaForFragmentListInput: Swift.Sendable {
    /// A list of the numbers of fragments for which to retrieve media. You retrieve these values with [ListFragments].
    /// This member is required.
    public var fragments: [Swift.String]?
    /// The Amazon Resource Name (ARN) of the stream from which to retrieve fragment media. Specify either this parameter or the StreamName parameter.
    public var streamARN: Swift.String?
    /// The name of the stream from which to retrieve fragment media. Specify either this parameter or the StreamARN parameter.
    public var streamName: Swift.String?

    public init(
        fragments: [Swift.String]? = nil,
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil
    )
    {
        self.fragments = fragments
        self.streamARN = streamARN
        self.streamName = streamName
    }
}

public struct GetMediaForFragmentListOutput: Swift.Sendable {
    /// The content type of the requested media.
    public var contentType: Swift.String?
    /// The payload that Kinesis Video Streams returns is a sequence of chunks from the specified stream. For information about the chunks, see [PutMedia](http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/API_dataplane_PutMedia.html). The chunks that Kinesis Video Streams returns in the GetMediaForFragmentList call also include the following additional Matroska (MKV) tags:
    ///
    /// * AWS_KINESISVIDEO_FRAGMENT_NUMBER - Fragment number returned in the chunk.
    ///
    /// * AWS_KINESISVIDEO_SERVER_SIDE_TIMESTAMP - Server-side timestamp of the fragment.
    ///
    /// * AWS_KINESISVIDEO_PRODUCER_SIDE_TIMESTAMP - Producer-side timestamp of the fragment.
    ///
    ///
    /// The following tags will be included if an exception occurs:
    ///
    /// * AWS_KINESISVIDEO_FRAGMENT_NUMBER - The number of the fragment that threw the exception
    ///
    /// * AWS_KINESISVIDEO_EXCEPTION_ERROR_CODE - The integer code of the
    ///
    /// * AWS_KINESISVIDEO_EXCEPTION_MESSAGE - A text description of the exception
    public var payload: Smithy.ByteStream?

    public init(
        contentType: Swift.String? = nil,
        payload: Smithy.ByteStream? = Smithy.ByteStream.data(Foundation.Data("".utf8))
    )
    {
        self.contentType = contentType
        self.payload = payload
    }
}

extension KinesisVideoArchivedMediaClientTypes {

    public enum FragmentSelectorType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case producerTimestamp
        case serverTimestamp
        case sdkUnknown(Swift.String)

        public static var allCases: [FragmentSelectorType] {
            return [
                .producerTimestamp,
                .serverTimestamp
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .producerTimestamp: return "PRODUCER_TIMESTAMP"
            case .serverTimestamp: return "SERVER_TIMESTAMP"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension KinesisVideoArchivedMediaClientTypes {

    /// The range of timestamps for which to return fragments.
    public struct TimestampRange: Swift.Sendable {
        /// The ending timestamp in the range of timestamps for which to return fragments.
        /// This member is required.
        public var endTimestamp: Foundation.Date?
        /// The starting timestamp in the range of timestamps for which to return fragments.
        /// This member is required.
        public var startTimestamp: Foundation.Date?

        public init(
            endTimestamp: Foundation.Date? = nil,
            startTimestamp: Foundation.Date? = nil
        )
        {
            self.endTimestamp = endTimestamp
            self.startTimestamp = startTimestamp
        }
    }
}

extension KinesisVideoArchivedMediaClientTypes {

    /// Describes the timestamp range and timestamp origin of a range of fragments. Only fragments with a start timestamp greater than or equal to the given start time and less than or equal to the end time are returned. For example, if a stream contains fragments with the following start timestamps:
    ///
    /// * 00:00:00
    ///
    /// * 00:00:02
    ///
    /// * 00:00:04
    ///
    /// * 00:00:06
    ///
    ///
    /// A fragment selector range with a start time of 00:00:01 and end time of 00:00:04 would return the fragments with start times of 00:00:02 and 00:00:04.
    public struct FragmentSelector: Swift.Sendable {
        /// The origin of the timestamps to use (Server or Producer).
        /// This member is required.
        public var fragmentSelectorType: KinesisVideoArchivedMediaClientTypes.FragmentSelectorType?
        /// The range of timestamps to return.
        /// This member is required.
        public var timestampRange: KinesisVideoArchivedMediaClientTypes.TimestampRange?

        public init(
            fragmentSelectorType: KinesisVideoArchivedMediaClientTypes.FragmentSelectorType? = nil,
            timestampRange: KinesisVideoArchivedMediaClientTypes.TimestampRange? = nil
        )
        {
            self.fragmentSelectorType = fragmentSelectorType
            self.timestampRange = timestampRange
        }
    }
}

public struct ListFragmentsInput: Swift.Sendable {
    /// Describes the timestamp range and timestamp origin for the range of fragments to return. This is only required when the NextToken isn't passed in the API.
    public var fragmentSelector: KinesisVideoArchivedMediaClientTypes.FragmentSelector?
    /// The total number of fragments to return. If the total number of fragments available is more than the value specified in max-results, then a [ListFragmentsOutput$NextToken] is provided in the output that you can use to resume pagination.
    public var maxResults: Swift.Int?
    /// A token to specify where to start paginating. This is the [ListFragmentsOutput$NextToken] from a previously truncated response.
    public var nextToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the stream from which to retrieve a fragment list. Specify either this parameter or the StreamName parameter.
    public var streamARN: Swift.String?
    /// The name of the stream from which to retrieve a fragment list. Specify either this parameter or the StreamARN parameter.
    public var streamName: Swift.String?

    public init(
        fragmentSelector: KinesisVideoArchivedMediaClientTypes.FragmentSelector? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        streamARN: Swift.String? = nil,
        streamName: Swift.String? = nil
    )
    {
        self.fragmentSelector = fragmentSelector
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.streamARN = streamARN
        self.streamName = streamName
    }
}

extension KinesisVideoArchivedMediaClientTypes {

    /// Represents a segment of video or other time-delimited data.
    public struct Fragment: Swift.Sendable {
        /// The playback duration or other time value associated with the fragment.
        public var fragmentLengthInMilliseconds: Swift.Int
        /// The unique identifier of the fragment. This value monotonically increases based on the ingestion order.
        public var fragmentNumber: Swift.String?
        /// The total fragment size, including information about the fragment and contained media data.
        public var fragmentSizeInBytes: Swift.Int
        /// The timestamp from the producer corresponding to the fragment.
        public var producerTimestamp: Foundation.Date?
        /// The timestamp from the Amazon Web Services server corresponding to the fragment.
        public var serverTimestamp: Foundation.Date?

        public init(
            fragmentLengthInMilliseconds: Swift.Int = 0,
            fragmentNumber: Swift.String? = nil,
            fragmentSizeInBytes: Swift.Int = 0,
            producerTimestamp: Foundation.Date? = nil,
            serverTimestamp: Foundation.Date? = nil
        )
        {
            self.fragmentLengthInMilliseconds = fragmentLengthInMilliseconds
            self.fragmentNumber = fragmentNumber
            self.fragmentSizeInBytes = fragmentSizeInBytes
            self.producerTimestamp = producerTimestamp
            self.serverTimestamp = serverTimestamp
        }
    }
}

public struct ListFragmentsOutput: Swift.Sendable {
    /// A list of archived [Fragment] objects from the stream that meet the selector criteria. Results are in no specific order, even across pages.
    public var fragments: [KinesisVideoArchivedMediaClientTypes.Fragment]?
    /// If the returned list is truncated, the operation returns this token to use to retrieve the next page of results. This value is null when there are no more results to return.
    public var nextToken: Swift.String?

    public init(
        fragments: [KinesisVideoArchivedMediaClientTypes.Fragment]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.fragments = fragments
        self.nextToken = nextToken
    }
}

extension GetClipInput {

    static func urlPathProvider(_ value: GetClipInput) -> Swift.String? {
        return "/getClip"
    }
}

extension GetDASHStreamingSessionURLInput {

    static func urlPathProvider(_ value: GetDASHStreamingSessionURLInput) -> Swift.String? {
        return "/getDASHStreamingSessionURL"
    }
}

extension GetHLSStreamingSessionURLInput {

    static func urlPathProvider(_ value: GetHLSStreamingSessionURLInput) -> Swift.String? {
        return "/getHLSStreamingSessionURL"
    }
}

extension GetImagesInput {

    static func urlPathProvider(_ value: GetImagesInput) -> Swift.String? {
        return "/getImages"
    }
}

extension GetMediaForFragmentListInput {

    static func urlPathProvider(_ value: GetMediaForFragmentListInput) -> Swift.String? {
        return "/getMediaForFragmentList"
    }
}

extension ListFragmentsInput {

    static func urlPathProvider(_ value: ListFragmentsInput) -> Swift.String? {
        return "/listFragments"
    }
}

extension GetClipInput {

    static func write(value: GetClipInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClipFragmentSelector"].write(value.clipFragmentSelector, with: KinesisVideoArchivedMediaClientTypes.ClipFragmentSelector.write(value:to:))
        try writer["StreamARN"].write(value.streamARN)
        try writer["StreamName"].write(value.streamName)
    }
}

extension GetDASHStreamingSessionURLInput {

    static func write(value: GetDASHStreamingSessionURLInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DASHFragmentSelector"].write(value.dashFragmentSelector, with: KinesisVideoArchivedMediaClientTypes.DASHFragmentSelector.write(value:to:))
        try writer["DisplayFragmentNumber"].write(value.displayFragmentNumber)
        try writer["DisplayFragmentTimestamp"].write(value.displayFragmentTimestamp)
        try writer["Expires"].write(value.expires)
        try writer["MaxManifestFragmentResults"].write(value.maxManifestFragmentResults)
        try writer["PlaybackMode"].write(value.playbackMode)
        try writer["StreamARN"].write(value.streamARN)
        try writer["StreamName"].write(value.streamName)
    }
}

extension GetHLSStreamingSessionURLInput {

    static func write(value: GetHLSStreamingSessionURLInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ContainerFormat"].write(value.containerFormat)
        try writer["DiscontinuityMode"].write(value.discontinuityMode)
        try writer["DisplayFragmentTimestamp"].write(value.displayFragmentTimestamp)
        try writer["Expires"].write(value.expires)
        try writer["HLSFragmentSelector"].write(value.hlsFragmentSelector, with: KinesisVideoArchivedMediaClientTypes.HLSFragmentSelector.write(value:to:))
        try writer["MaxMediaPlaylistFragmentResults"].write(value.maxMediaPlaylistFragmentResults)
        try writer["PlaybackMode"].write(value.playbackMode)
        try writer["StreamARN"].write(value.streamARN)
        try writer["StreamName"].write(value.streamName)
    }
}

extension GetImagesInput {

    static func write(value: GetImagesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EndTimestamp"].writeTimestamp(value.endTimestamp, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["Format"].write(value.format)
        try writer["FormatConfig"].writeMap(value.formatConfig, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["HeightPixels"].write(value.heightPixels)
        try writer["ImageSelectorType"].write(value.imageSelectorType)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["SamplingInterval"].write(value.samplingInterval)
        try writer["StartTimestamp"].writeTimestamp(value.startTimestamp, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["StreamARN"].write(value.streamARN)
        try writer["StreamName"].write(value.streamName)
        try writer["WidthPixels"].write(value.widthPixels)
    }
}

extension GetMediaForFragmentListInput {

    static func write(value: GetMediaForFragmentListInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Fragments"].writeList(value.fragments, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["StreamARN"].write(value.streamARN)
        try writer["StreamName"].write(value.streamName)
    }
}

extension ListFragmentsInput {

    static func write(value: ListFragmentsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FragmentSelector"].write(value.fragmentSelector, with: KinesisVideoArchivedMediaClientTypes.FragmentSelector.write(value:to:))
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["StreamARN"].write(value.streamARN)
        try writer["StreamName"].write(value.streamName)
    }
}

extension GetClipOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetClipOutput {
        var value = GetClipOutput()
        if let contentTypeHeaderValue = httpResponse.headers.value(for: "Content-Type") {
            value.contentType = contentTypeHeaderValue
        }
        switch httpResponse.body {
        case .data(let data):
            value.payload = .data(data)
        case .stream(let stream):
            value.payload = .stream(stream)
        case .noStream:
            value.payload = nil
        }
        return value
    }
}

extension GetDASHStreamingSessionURLOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDASHStreamingSessionURLOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDASHStreamingSessionURLOutput()
        value.dashStreamingSessionURL = try reader["DASHStreamingSessionURL"].readIfPresent()
        return value
    }
}

extension GetHLSStreamingSessionURLOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetHLSStreamingSessionURLOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetHLSStreamingSessionURLOutput()
        value.hlsStreamingSessionURL = try reader["HLSStreamingSessionURL"].readIfPresent()
        return value
    }
}

extension GetImagesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetImagesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetImagesOutput()
        value.images = try reader["Images"].readListIfPresent(memberReadingClosure: KinesisVideoArchivedMediaClientTypes.Image.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension GetMediaForFragmentListOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetMediaForFragmentListOutput {
        var value = GetMediaForFragmentListOutput()
        if let contentTypeHeaderValue = httpResponse.headers.value(for: "Content-Type") {
            value.contentType = contentTypeHeaderValue
        }
        switch httpResponse.body {
        case .data(let data):
            value.payload = .data(data)
        case .stream(let stream):
            value.payload = .stream(stream)
        case .noStream:
            value.payload = nil
        }
        return value
    }
}

extension ListFragmentsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListFragmentsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListFragmentsOutput()
        value.fragments = try reader["Fragments"].readListIfPresent(memberReadingClosure: KinesisVideoArchivedMediaClientTypes.Fragment.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

enum GetClipOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientLimitExceededException": return try ClientLimitExceededException.makeError(baseError: baseError)
            case "InvalidArgumentException": return try InvalidArgumentException.makeError(baseError: baseError)
            case "InvalidCodecPrivateDataException": return try InvalidCodecPrivateDataException.makeError(baseError: baseError)
            case "InvalidMediaFrameException": return try InvalidMediaFrameException.makeError(baseError: baseError)
            case "MissingCodecPrivateDataException": return try MissingCodecPrivateDataException.makeError(baseError: baseError)
            case "NoDataRetentionException": return try NoDataRetentionException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "UnsupportedStreamMediaTypeException": return try UnsupportedStreamMediaTypeException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDASHStreamingSessionURLOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientLimitExceededException": return try ClientLimitExceededException.makeError(baseError: baseError)
            case "InvalidArgumentException": return try InvalidArgumentException.makeError(baseError: baseError)
            case "InvalidCodecPrivateDataException": return try InvalidCodecPrivateDataException.makeError(baseError: baseError)
            case "MissingCodecPrivateDataException": return try MissingCodecPrivateDataException.makeError(baseError: baseError)
            case "NoDataRetentionException": return try NoDataRetentionException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "UnsupportedStreamMediaTypeException": return try UnsupportedStreamMediaTypeException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetHLSStreamingSessionURLOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientLimitExceededException": return try ClientLimitExceededException.makeError(baseError: baseError)
            case "InvalidArgumentException": return try InvalidArgumentException.makeError(baseError: baseError)
            case "InvalidCodecPrivateDataException": return try InvalidCodecPrivateDataException.makeError(baseError: baseError)
            case "MissingCodecPrivateDataException": return try MissingCodecPrivateDataException.makeError(baseError: baseError)
            case "NoDataRetentionException": return try NoDataRetentionException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "UnsupportedStreamMediaTypeException": return try UnsupportedStreamMediaTypeException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetImagesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientLimitExceededException": return try ClientLimitExceededException.makeError(baseError: baseError)
            case "InvalidArgumentException": return try InvalidArgumentException.makeError(baseError: baseError)
            case "NoDataRetentionException": return try NoDataRetentionException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetMediaForFragmentListOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientLimitExceededException": return try ClientLimitExceededException.makeError(baseError: baseError)
            case "InvalidArgumentException": return try InvalidArgumentException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListFragmentsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ClientLimitExceededException": return try ClientLimitExceededException.makeError(baseError: baseError)
            case "InvalidArgumentException": return try InvalidArgumentException.makeError(baseError: baseError)
            case "NotAuthorizedException": return try NotAuthorizedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ClientLimitExceededException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ClientLimitExceededException {
        let reader = baseError.errorBodyReader
        var value = ClientLimitExceededException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidCodecPrivateDataException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InvalidCodecPrivateDataException {
        let reader = baseError.errorBodyReader
        var value = InvalidCodecPrivateDataException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UnsupportedStreamMediaTypeException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> UnsupportedStreamMediaTypeException {
        let reader = baseError.errorBodyReader
        var value = UnsupportedStreamMediaTypeException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidArgumentException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InvalidArgumentException {
        let reader = baseError.errorBodyReader
        var value = InvalidArgumentException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidMediaFrameException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InvalidMediaFrameException {
        let reader = baseError.errorBodyReader
        var value = InvalidMediaFrameException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension NotAuthorizedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> NotAuthorizedException {
        let reader = baseError.errorBodyReader
        var value = NotAuthorizedException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension NoDataRetentionException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> NoDataRetentionException {
        let reader = baseError.errorBodyReader
        var value = NoDataRetentionException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension MissingCodecPrivateDataException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> MissingCodecPrivateDataException {
        let reader = baseError.errorBodyReader
        var value = MissingCodecPrivateDataException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension KinesisVideoArchivedMediaClientTypes.Image {

    static func read(from reader: SmithyJSON.Reader) throws -> KinesisVideoArchivedMediaClientTypes.Image {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KinesisVideoArchivedMediaClientTypes.Image()
        value.timeStamp = try reader["TimeStamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.error = try reader["Error"].readIfPresent()
        value.imageContent = try reader["ImageContent"].readIfPresent()
        return value
    }
}

extension KinesisVideoArchivedMediaClientTypes.Fragment {

    static func read(from reader: SmithyJSON.Reader) throws -> KinesisVideoArchivedMediaClientTypes.Fragment {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = KinesisVideoArchivedMediaClientTypes.Fragment()
        value.fragmentNumber = try reader["FragmentNumber"].readIfPresent()
        value.fragmentSizeInBytes = try reader["FragmentSizeInBytes"].readIfPresent() ?? 0
        value.producerTimestamp = try reader["ProducerTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.serverTimestamp = try reader["ServerTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.fragmentLengthInMilliseconds = try reader["FragmentLengthInMilliseconds"].readIfPresent() ?? 0
        return value
    }
}

extension KinesisVideoArchivedMediaClientTypes.ClipFragmentSelector {

    static func write(value: KinesisVideoArchivedMediaClientTypes.ClipFragmentSelector?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FragmentSelectorType"].write(value.fragmentSelectorType)
        try writer["TimestampRange"].write(value.timestampRange, with: KinesisVideoArchivedMediaClientTypes.ClipTimestampRange.write(value:to:))
    }
}

extension KinesisVideoArchivedMediaClientTypes.ClipTimestampRange {

    static func write(value: KinesisVideoArchivedMediaClientTypes.ClipTimestampRange?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EndTimestamp"].writeTimestamp(value.endTimestamp, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["StartTimestamp"].writeTimestamp(value.startTimestamp, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

extension KinesisVideoArchivedMediaClientTypes.DASHFragmentSelector {

    static func write(value: KinesisVideoArchivedMediaClientTypes.DASHFragmentSelector?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FragmentSelectorType"].write(value.fragmentSelectorType)
        try writer["TimestampRange"].write(value.timestampRange, with: KinesisVideoArchivedMediaClientTypes.DASHTimestampRange.write(value:to:))
    }
}

extension KinesisVideoArchivedMediaClientTypes.DASHTimestampRange {

    static func write(value: KinesisVideoArchivedMediaClientTypes.DASHTimestampRange?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EndTimestamp"].writeTimestamp(value.endTimestamp, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["StartTimestamp"].writeTimestamp(value.startTimestamp, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

extension KinesisVideoArchivedMediaClientTypes.HLSFragmentSelector {

    static func write(value: KinesisVideoArchivedMediaClientTypes.HLSFragmentSelector?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FragmentSelectorType"].write(value.fragmentSelectorType)
        try writer["TimestampRange"].write(value.timestampRange, with: KinesisVideoArchivedMediaClientTypes.HLSTimestampRange.write(value:to:))
    }
}

extension KinesisVideoArchivedMediaClientTypes.HLSTimestampRange {

    static func write(value: KinesisVideoArchivedMediaClientTypes.HLSTimestampRange?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EndTimestamp"].writeTimestamp(value.endTimestamp, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["StartTimestamp"].writeTimestamp(value.startTimestamp, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

extension KinesisVideoArchivedMediaClientTypes.FragmentSelector {

    static func write(value: KinesisVideoArchivedMediaClientTypes.FragmentSelector?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FragmentSelectorType"].write(value.fragmentSelectorType)
        try writer["TimestampRange"].write(value.timestampRange, with: KinesisVideoArchivedMediaClientTypes.TimestampRange.write(value:to:))
    }
}

extension KinesisVideoArchivedMediaClientTypes.TimestampRange {

    static func write(value: KinesisVideoArchivedMediaClientTypes.TimestampRange?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EndTimestamp"].writeTimestamp(value.endTimestamp, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["StartTimestamp"].writeTimestamp(value.startTimestamp, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

public enum KinesisVideoArchivedMediaClientTypes {}
