// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension KinesisVideoArchivedMediaClient {
    /// Paginate over `[GetImagesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetImagesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetImagesOutput`
    public func getImagesPaginated(input: GetImagesInput) -> ClientRuntime.PaginatorSequence<GetImagesInput, GetImagesOutput> {
        return ClientRuntime.PaginatorSequence<GetImagesInput, GetImagesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.getImages(input:))
    }
}

extension GetImagesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetImagesInput {
        return GetImagesInput(
            endTimestamp: self.endTimestamp,
            format: self.format,
            formatConfig: self.formatConfig,
            heightPixels: self.heightPixels,
            imageSelectorType: self.imageSelectorType,
            maxResults: self.maxResults,
            nextToken: token,
            samplingInterval: self.samplingInterval,
            startTimestamp: self.startTimestamp,
            streamARN: self.streamARN,
            streamName: self.streamName,
            widthPixels: self.widthPixels
        )}
}

extension PaginatorSequence where OperationStackInput == GetImagesInput, OperationStackOutput == GetImagesOutput {
    /// This paginator transforms the `AsyncSequence` returned by `getImagesPaginated`
    /// to access the nested member `[KinesisVideoArchivedMediaClientTypes.Image]`
    /// - Returns: `[KinesisVideoArchivedMediaClientTypes.Image]`
    public func images() async throws -> [KinesisVideoArchivedMediaClientTypes.Image] {
        return try await self.asyncCompactMap { item in item.images }
    }
}
extension KinesisVideoArchivedMediaClient {
    /// Paginate over `[ListFragmentsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListFragmentsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListFragmentsOutput`
    public func listFragmentsPaginated(input: ListFragmentsInput) -> ClientRuntime.PaginatorSequence<ListFragmentsInput, ListFragmentsOutput> {
        return ClientRuntime.PaginatorSequence<ListFragmentsInput, ListFragmentsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listFragments(input:))
    }
}

extension ListFragmentsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListFragmentsInput {
        return ListFragmentsInput(
            fragmentSelector: self.fragmentSelector,
            maxResults: self.maxResults,
            nextToken: token,
            streamARN: self.streamARN,
            streamName: self.streamName
        )}
}

extension PaginatorSequence where OperationStackInput == ListFragmentsInput, OperationStackOutput == ListFragmentsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listFragmentsPaginated`
    /// to access the nested member `[KinesisVideoArchivedMediaClientTypes.Fragment]`
    /// - Returns: `[KinesisVideoArchivedMediaClientTypes.Fragment]`
    public func fragments() async throws -> [KinesisVideoArchivedMediaClientTypes.Fragment] {
        return try await self.asyncCompactMap { item in item.fragments }
    }
}
