//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError

public struct TagResourceOutput {

    public init() { }
}

public struct UntagResourceOutput {

    public init() { }
}

/// You do not have sufficient access to perform this action.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request conflicts with an existing resource in Timestream for InfluxDB.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
        /// The identifier for the Timestream for InfluxDB resource associated with the request.
        /// This member is required.
        public internal(set) var resourceId: Swift.String? = nil
        /// The type of Timestream for InfluxDB resource associated with the request.
        /// This member is required.
        public internal(set) var resourceType: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        resourceId: Swift.String? = nil,
        resourceType: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.resourceId = resourceId
        self.properties.resourceType = resourceType
    }
}

/// The request processing has failed because of an unknown error, exception or failure.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { true }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The requested resource was not found or does not exist.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
        /// The identifier for the Timestream for InfluxDB resource associated with the request.
        /// This member is required.
        public internal(set) var resourceId: Swift.String? = nil
        /// The type of Timestream for InfluxDB resource associated with the request.
        /// This member is required.
        public internal(set) var resourceType: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        resourceId: Swift.String? = nil,
        resourceType: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.resourceId = resourceId
        self.properties.resourceType = resourceType
    }
}

/// The request exceeds the service quota.
public struct ServiceQuotaExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceQuotaExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was denied due to request throttling.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
        /// The number of seconds the caller should wait before retrying.
        public internal(set) var retryAfterSeconds: Swift.Int? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { true }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        retryAfterSeconds: Swift.Int? = nil
    )
    {
        self.properties.message = message
        self.properties.retryAfterSeconds = retryAfterSeconds
    }
}

extension TimestreamInfluxDBClientTypes {

    public enum ValidationExceptionReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case fieldValidationFailed
        case other
        case sdkUnknown(Swift.String)

        public static var allCases: [ValidationExceptionReason] {
            return [
                .fieldValidationFailed,
                .other
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .fieldValidationFailed: return "FIELD_VALIDATION_FAILED"
            case .other: return "OTHER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// The input fails to satisfy the constraints specified by Timestream for InfluxDB.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
        /// The reason that validation failed.
        /// This member is required.
        public internal(set) var reason: TimestreamInfluxDBClientTypes.ValidationExceptionReason? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        reason: TimestreamInfluxDBClientTypes.ValidationExceptionReason? = nil
    )
    {
        self.properties.message = message
        self.properties.reason = reason
    }
}

extension TimestreamInfluxDBClientTypes {

    public enum DbInstanceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case dbInflux12xlarge
        case dbInflux16xlarge
        case dbInflux2xlarge
        case dbInflux4xlarge
        case dbInflux8xlarge
        case dbInfluxLarge
        case dbInfluxMedium
        case dbInfluxXlarge
        case sdkUnknown(Swift.String)

        public static var allCases: [DbInstanceType] {
            return [
                .dbInflux12xlarge,
                .dbInflux16xlarge,
                .dbInflux2xlarge,
                .dbInflux4xlarge,
                .dbInflux8xlarge,
                .dbInfluxLarge,
                .dbInfluxMedium,
                .dbInfluxXlarge
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .dbInflux12xlarge: return "db.influx.12xlarge"
            case .dbInflux16xlarge: return "db.influx.16xlarge"
            case .dbInflux2xlarge: return "db.influx.2xlarge"
            case .dbInflux4xlarge: return "db.influx.4xlarge"
            case .dbInflux8xlarge: return "db.influx.8xlarge"
            case .dbInfluxLarge: return "db.influx.large"
            case .dbInfluxMedium: return "db.influx.medium"
            case .dbInfluxXlarge: return "db.influx.xlarge"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension TimestreamInfluxDBClientTypes {

    public enum DbStorageType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case influxIoIncludedT1
        case influxIoIncludedT2
        case influxIoIncludedT3
        case sdkUnknown(Swift.String)

        public static var allCases: [DbStorageType] {
            return [
                .influxIoIncludedT1,
                .influxIoIncludedT2,
                .influxIoIncludedT3
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .influxIoIncludedT1: return "InfluxIOIncludedT1"
            case .influxIoIncludedT2: return "InfluxIOIncludedT2"
            case .influxIoIncludedT3: return "InfluxIOIncludedT3"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension TimestreamInfluxDBClientTypes {

    public enum DeploymentType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case singleAz
        case withMultiazStandby
        case sdkUnknown(Swift.String)

        public static var allCases: [DeploymentType] {
            return [
                .singleAz,
                .withMultiazStandby
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .singleAz: return "SINGLE_AZ"
            case .withMultiazStandby: return "WITH_MULTIAZ_STANDBY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension TimestreamInfluxDBClientTypes {
    /// Configuration for S3 bucket log delivery.
    public struct S3Configuration {
        /// The name of the S3 bucket to deliver logs to.
        /// This member is required.
        public var bucketName: Swift.String?
        /// Indicates whether log delivery to the S3 bucket is enabled.
        /// This member is required.
        public var enabled: Swift.Bool?

        public init(
            bucketName: Swift.String? = nil,
            enabled: Swift.Bool? = nil
        )
        {
            self.bucketName = bucketName
            self.enabled = enabled
        }
    }

}

extension TimestreamInfluxDBClientTypes {
    /// Configuration for sending InfluxDB engine logs to send to specified S3 bucket.
    public struct LogDeliveryConfiguration {
        /// Configuration for S3 bucket log delivery.
        /// This member is required.
        public var s3Configuration: TimestreamInfluxDBClientTypes.S3Configuration?

        public init(
            s3Configuration: TimestreamInfluxDBClientTypes.S3Configuration? = nil
        )
        {
            self.s3Configuration = s3Configuration
        }
    }

}

public struct CreateDbInstanceInput {
    /// The amount of storage to allocate for your DB storage type in GiB (gibibytes).
    /// This member is required.
    public var allocatedStorage: Swift.Int?
    /// The name of the initial InfluxDB bucket. All InfluxDB data is stored in a bucket. A bucket combines the concept of a database and a retention period (the duration of time that each data point persists). A bucket belongs to an organization.
    public var bucket: Swift.String?
    /// The Timestream for InfluxDB DB instance type to run InfluxDB on.
    /// This member is required.
    public var dbInstanceType: TimestreamInfluxDBClientTypes.DbInstanceType?
    /// The id of the DB parameter group to assign to your DB instance. DB parameter groups specify how the database is configured. For example, DB parameter groups can specify the limit for query concurrency.
    public var dbParameterGroupIdentifier: Swift.String?
    /// The Timestream for InfluxDB DB storage type to read and write InfluxDB data. You can choose between 3 different types of provisioned Influx IOPS included storage according to your workloads requirements:
    ///
    /// * Influx IO Included 3000 IOPS
    ///
    /// * Influx IO Included 12000 IOPS
    ///
    /// * Influx IO Included 16000 IOPS
    public var dbStorageType: TimestreamInfluxDBClientTypes.DbStorageType?
    /// Specifies whether the DB instance will be deployed as a standalone instance or with a Multi-AZ standby for high availability.
    public var deploymentType: TimestreamInfluxDBClientTypes.DeploymentType?
    /// Configuration for sending InfluxDB engine logs to a specified S3 bucket.
    public var logDeliveryConfiguration: TimestreamInfluxDBClientTypes.LogDeliveryConfiguration?
    /// The name that uniquely identifies the DB instance when interacting with the Amazon Timestream for InfluxDB API and CLI commands. This name will also be a prefix included in the endpoint. DB instance names must be unique per customer and per region.
    /// This member is required.
    public var name: Swift.String?
    /// The name of the initial organization for the initial admin user in InfluxDB. An InfluxDB organization is a workspace for a group of users.
    public var organization: Swift.String?
    /// The password of the initial admin user created in InfluxDB. This password will allow you to access the InfluxDB UI to perform various administrative tasks and also use the InfluxDB CLI to create an operator token. These attributes will be stored in a Secret created in AWS SecretManager in your account.
    /// This member is required.
    public var password: Swift.String?
    /// Configures the DB instance with a public IP to facilitate access.
    public var publiclyAccessible: Swift.Bool?
    /// A list of key-value pairs to associate with the DB instance.
    public var tags: [Swift.String: Swift.String]?
    /// The username of the initial admin user created in InfluxDB. Must start with a letter and can't end with a hyphen or contain two consecutive hyphens. For example, my-user1. This username will allow you to access the InfluxDB UI to perform various administrative tasks and also use the InfluxDB CLI to create an operator token. These attributes will be stored in a Secret created in Amazon Secrets Manager in your account.
    public var username: Swift.String?
    /// A list of VPC security group IDs to associate with the DB instance.
    /// This member is required.
    public var vpcSecurityGroupIds: [Swift.String]?
    /// A list of VPC subnet IDs to associate with the DB instance. Provide at least two VPC subnet IDs in different availability zones when deploying with a Multi-AZ standby.
    /// This member is required.
    public var vpcSubnetIds: [Swift.String]?

    public init(
        allocatedStorage: Swift.Int? = nil,
        bucket: Swift.String? = nil,
        dbInstanceType: TimestreamInfluxDBClientTypes.DbInstanceType? = nil,
        dbParameterGroupIdentifier: Swift.String? = nil,
        dbStorageType: TimestreamInfluxDBClientTypes.DbStorageType? = nil,
        deploymentType: TimestreamInfluxDBClientTypes.DeploymentType? = nil,
        logDeliveryConfiguration: TimestreamInfluxDBClientTypes.LogDeliveryConfiguration? = nil,
        name: Swift.String? = nil,
        organization: Swift.String? = nil,
        password: Swift.String? = nil,
        publiclyAccessible: Swift.Bool? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        username: Swift.String? = nil,
        vpcSecurityGroupIds: [Swift.String]? = nil,
        vpcSubnetIds: [Swift.String]? = nil
    )
    {
        self.allocatedStorage = allocatedStorage
        self.bucket = bucket
        self.dbInstanceType = dbInstanceType
        self.dbParameterGroupIdentifier = dbParameterGroupIdentifier
        self.dbStorageType = dbStorageType
        self.deploymentType = deploymentType
        self.logDeliveryConfiguration = logDeliveryConfiguration
        self.name = name
        self.organization = organization
        self.password = password
        self.publiclyAccessible = publiclyAccessible
        self.tags = tags
        self.username = username
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
        self.vpcSubnetIds = vpcSubnetIds
    }
}

extension CreateDbInstanceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateDbInstanceInput(allocatedStorage: \(Swift.String(describing: allocatedStorage)), bucket: \(Swift.String(describing: bucket)), dbInstanceType: \(Swift.String(describing: dbInstanceType)), dbParameterGroupIdentifier: \(Swift.String(describing: dbParameterGroupIdentifier)), dbStorageType: \(Swift.String(describing: dbStorageType)), deploymentType: \(Swift.String(describing: deploymentType)), logDeliveryConfiguration: \(Swift.String(describing: logDeliveryConfiguration)), name: \(Swift.String(describing: name)), organization: \(Swift.String(describing: organization)), publiclyAccessible: \(Swift.String(describing: publiclyAccessible)), tags: \(Swift.String(describing: tags)), vpcSecurityGroupIds: \(Swift.String(describing: vpcSecurityGroupIds)), vpcSubnetIds: \(Swift.String(describing: vpcSubnetIds)), password: \"CONTENT_REDACTED\", username: \"CONTENT_REDACTED\")"}
}

extension TimestreamInfluxDBClientTypes {

    public enum Status: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case available
        case creating
        case deleted
        case deleting
        case failed
        case modifying
        case updating
        case updatingDeploymentType
        case updatingInstanceType
        case sdkUnknown(Swift.String)

        public static var allCases: [Status] {
            return [
                .available,
                .creating,
                .deleted,
                .deleting,
                .failed,
                .modifying,
                .updating,
                .updatingDeploymentType,
                .updatingInstanceType
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .available: return "AVAILABLE"
            case .creating: return "CREATING"
            case .deleted: return "DELETED"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case .modifying: return "MODIFYING"
            case .updating: return "UPDATING"
            case .updatingDeploymentType: return "UPDATING_DEPLOYMENT_TYPE"
            case .updatingInstanceType: return "UPDATING_INSTANCE_TYPE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateDbInstanceOutput {
    /// The amount of storage allocated for your DB storage type (in gibibytes).
    public var allocatedStorage: Swift.Int?
    /// The Amazon Resource Name (ARN) of the DB instance.
    /// This member is required.
    public var arn: Swift.String?
    /// The Availability Zone in which the DB instance resides.
    public var availabilityZone: Swift.String?
    /// The Timestream for InfluxDB instance type that InfluxDB runs on.
    public var dbInstanceType: TimestreamInfluxDBClientTypes.DbInstanceType?
    /// The id of the DB parameter group assigned to your DB instance.
    public var dbParameterGroupIdentifier: Swift.String?
    /// The Timestream for InfluxDB DB storage type that InfluxDB stores data on.
    public var dbStorageType: TimestreamInfluxDBClientTypes.DbStorageType?
    /// Specifies whether the Timestream for InfluxDB is deployed as Single-AZ or with a MultiAZ Standby for High availability.
    public var deploymentType: TimestreamInfluxDBClientTypes.DeploymentType?
    /// The endpoint used to connect to InfluxDB. The default InfluxDB port is 8086.
    public var endpoint: Swift.String?
    /// A service-generated unique identifier.
    /// This member is required.
    public var id: Swift.String?
    /// The Amazon Resource Name (ARN) of the AWS Secrets Manager secret containing the initial InfluxDB authorization parameters. The secret value is a JSON formatted key-value pair holding InfluxDB authorization values: organization, bucket, username, and password.
    public var influxAuthParametersSecretArn: Swift.String?
    /// Configuration for sending InfluxDB engine logs to send to specified S3 bucket.
    public var logDeliveryConfiguration: TimestreamInfluxDBClientTypes.LogDeliveryConfiguration?
    /// The customer-supplied name that uniquely identifies the DB instance when interacting with the Amazon Timestream for InfluxDB API and CLI commands.
    /// This member is required.
    public var name: Swift.String?
    /// Indicates if the DB instance has a public IP to facilitate access.
    public var publiclyAccessible: Swift.Bool?
    /// The Availability Zone in which the standby instance is located when deploying with a MultiAZ standby instance.
    public var secondaryAvailabilityZone: Swift.String?
    /// The status of the DB instance.
    public var status: TimestreamInfluxDBClientTypes.Status?
    /// A list of VPC security group IDs associated with the DB instance.
    public var vpcSecurityGroupIds: [Swift.String]?
    /// A list of VPC subnet IDs associated with the DB instance.
    /// This member is required.
    public var vpcSubnetIds: [Swift.String]?

    public init(
        allocatedStorage: Swift.Int? = nil,
        arn: Swift.String? = nil,
        availabilityZone: Swift.String? = nil,
        dbInstanceType: TimestreamInfluxDBClientTypes.DbInstanceType? = nil,
        dbParameterGroupIdentifier: Swift.String? = nil,
        dbStorageType: TimestreamInfluxDBClientTypes.DbStorageType? = nil,
        deploymentType: TimestreamInfluxDBClientTypes.DeploymentType? = nil,
        endpoint: Swift.String? = nil,
        id: Swift.String? = nil,
        influxAuthParametersSecretArn: Swift.String? = nil,
        logDeliveryConfiguration: TimestreamInfluxDBClientTypes.LogDeliveryConfiguration? = nil,
        name: Swift.String? = nil,
        publiclyAccessible: Swift.Bool? = nil,
        secondaryAvailabilityZone: Swift.String? = nil,
        status: TimestreamInfluxDBClientTypes.Status? = nil,
        vpcSecurityGroupIds: [Swift.String]? = nil,
        vpcSubnetIds: [Swift.String]? = nil
    )
    {
        self.allocatedStorage = allocatedStorage
        self.arn = arn
        self.availabilityZone = availabilityZone
        self.dbInstanceType = dbInstanceType
        self.dbParameterGroupIdentifier = dbParameterGroupIdentifier
        self.dbStorageType = dbStorageType
        self.deploymentType = deploymentType
        self.endpoint = endpoint
        self.id = id
        self.influxAuthParametersSecretArn = influxAuthParametersSecretArn
        self.logDeliveryConfiguration = logDeliveryConfiguration
        self.name = name
        self.publiclyAccessible = publiclyAccessible
        self.secondaryAvailabilityZone = secondaryAvailabilityZone
        self.status = status
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
        self.vpcSubnetIds = vpcSubnetIds
    }
}

public struct DeleteDbInstanceInput {
    /// The id of the DB instance.
    /// This member is required.
    public var identifier: Swift.String?

    public init(
        identifier: Swift.String? = nil
    )
    {
        self.identifier = identifier
    }
}

public struct DeleteDbInstanceOutput {
    /// The amount of storage allocated for your DB storage type (in gibibytes).
    public var allocatedStorage: Swift.Int?
    /// The Amazon Resource Name (ARN) of the DB instance.
    /// This member is required.
    public var arn: Swift.String?
    /// The Availability Zone in which the DB instance resides.
    public var availabilityZone: Swift.String?
    /// The Timestream for InfluxDB instance type that InfluxDB runs on.
    public var dbInstanceType: TimestreamInfluxDBClientTypes.DbInstanceType?
    /// The id of the DB parameter group assigned to your DB instance.
    public var dbParameterGroupIdentifier: Swift.String?
    /// The Timestream for InfluxDB DB storage type that InfluxDB stores data on.
    public var dbStorageType: TimestreamInfluxDBClientTypes.DbStorageType?
    /// Specifies whether the Timestream for InfluxDB is deployed as Single-AZ or with a MultiAZ Standby for High availability.
    public var deploymentType: TimestreamInfluxDBClientTypes.DeploymentType?
    /// The endpoint used to connect to InfluxDB. The default InfluxDB port is 8086.
    public var endpoint: Swift.String?
    /// A service-generated unique identifier.
    /// This member is required.
    public var id: Swift.String?
    /// The Amazon Resource Name (ARN) of the AWS Secrets Manager secret containing the initial InfluxDB authorization parameters. The secret value is a JSON formatted key-value pair holding InfluxDB authorization values: organization, bucket, username, and password.
    public var influxAuthParametersSecretArn: Swift.String?
    /// Configuration for sending InfluxDB engine logs to send to specified S3 bucket.
    public var logDeliveryConfiguration: TimestreamInfluxDBClientTypes.LogDeliveryConfiguration?
    /// The customer-supplied name that uniquely identifies the DB instance when interacting with the Amazon Timestream for InfluxDB API and CLI commands.
    /// This member is required.
    public var name: Swift.String?
    /// Indicates if the DB instance has a public IP to facilitate access.
    public var publiclyAccessible: Swift.Bool?
    /// The Availability Zone in which the standby instance is located when deploying with a MultiAZ standby instance.
    public var secondaryAvailabilityZone: Swift.String?
    /// The status of the DB instance.
    public var status: TimestreamInfluxDBClientTypes.Status?
    /// A list of VPC security group IDs associated with the DB instance.
    public var vpcSecurityGroupIds: [Swift.String]?
    /// A list of VPC subnet IDs associated with the DB instance.
    /// This member is required.
    public var vpcSubnetIds: [Swift.String]?

    public init(
        allocatedStorage: Swift.Int? = nil,
        arn: Swift.String? = nil,
        availabilityZone: Swift.String? = nil,
        dbInstanceType: TimestreamInfluxDBClientTypes.DbInstanceType? = nil,
        dbParameterGroupIdentifier: Swift.String? = nil,
        dbStorageType: TimestreamInfluxDBClientTypes.DbStorageType? = nil,
        deploymentType: TimestreamInfluxDBClientTypes.DeploymentType? = nil,
        endpoint: Swift.String? = nil,
        id: Swift.String? = nil,
        influxAuthParametersSecretArn: Swift.String? = nil,
        logDeliveryConfiguration: TimestreamInfluxDBClientTypes.LogDeliveryConfiguration? = nil,
        name: Swift.String? = nil,
        publiclyAccessible: Swift.Bool? = nil,
        secondaryAvailabilityZone: Swift.String? = nil,
        status: TimestreamInfluxDBClientTypes.Status? = nil,
        vpcSecurityGroupIds: [Swift.String]? = nil,
        vpcSubnetIds: [Swift.String]? = nil
    )
    {
        self.allocatedStorage = allocatedStorage
        self.arn = arn
        self.availabilityZone = availabilityZone
        self.dbInstanceType = dbInstanceType
        self.dbParameterGroupIdentifier = dbParameterGroupIdentifier
        self.dbStorageType = dbStorageType
        self.deploymentType = deploymentType
        self.endpoint = endpoint
        self.id = id
        self.influxAuthParametersSecretArn = influxAuthParametersSecretArn
        self.logDeliveryConfiguration = logDeliveryConfiguration
        self.name = name
        self.publiclyAccessible = publiclyAccessible
        self.secondaryAvailabilityZone = secondaryAvailabilityZone
        self.status = status
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
        self.vpcSubnetIds = vpcSubnetIds
    }
}

public struct GetDbInstanceInput {
    /// The id of the DB instance.
    /// This member is required.
    public var identifier: Swift.String?

    public init(
        identifier: Swift.String? = nil
    )
    {
        self.identifier = identifier
    }
}

public struct GetDbInstanceOutput {
    /// The amount of storage allocated for your DB storage type (in gibibytes).
    public var allocatedStorage: Swift.Int?
    /// The Amazon Resource Name (ARN) of the DB instance.
    /// This member is required.
    public var arn: Swift.String?
    /// The Availability Zone in which the DB instance resides.
    public var availabilityZone: Swift.String?
    /// The Timestream for InfluxDB instance type that InfluxDB runs on.
    public var dbInstanceType: TimestreamInfluxDBClientTypes.DbInstanceType?
    /// The id of the DB parameter group assigned to your DB instance.
    public var dbParameterGroupIdentifier: Swift.String?
    /// The Timestream for InfluxDB DB storage type that InfluxDB stores data on.
    public var dbStorageType: TimestreamInfluxDBClientTypes.DbStorageType?
    /// Specifies whether the Timestream for InfluxDB is deployed as Single-AZ or with a MultiAZ Standby for High availability.
    public var deploymentType: TimestreamInfluxDBClientTypes.DeploymentType?
    /// The endpoint used to connect to InfluxDB. The default InfluxDB port is 8086.
    public var endpoint: Swift.String?
    /// A service-generated unique identifier.
    /// This member is required.
    public var id: Swift.String?
    /// The Amazon Resource Name (ARN) of the AWS Secrets Manager secret containing the initial InfluxDB authorization parameters. The secret value is a JSON formatted key-value pair holding InfluxDB authorization values: organization, bucket, username, and password.
    public var influxAuthParametersSecretArn: Swift.String?
    /// Configuration for sending InfluxDB engine logs to send to specified S3 bucket.
    public var logDeliveryConfiguration: TimestreamInfluxDBClientTypes.LogDeliveryConfiguration?
    /// The customer-supplied name that uniquely identifies the DB instance when interacting with the Amazon Timestream for InfluxDB API and CLI commands.
    /// This member is required.
    public var name: Swift.String?
    /// Indicates if the DB instance has a public IP to facilitate access.
    public var publiclyAccessible: Swift.Bool?
    /// The Availability Zone in which the standby instance is located when deploying with a MultiAZ standby instance.
    public var secondaryAvailabilityZone: Swift.String?
    /// The status of the DB instance.
    public var status: TimestreamInfluxDBClientTypes.Status?
    /// A list of VPC security group IDs associated with the DB instance.
    public var vpcSecurityGroupIds: [Swift.String]?
    /// A list of VPC subnet IDs associated with the DB instance.
    /// This member is required.
    public var vpcSubnetIds: [Swift.String]?

    public init(
        allocatedStorage: Swift.Int? = nil,
        arn: Swift.String? = nil,
        availabilityZone: Swift.String? = nil,
        dbInstanceType: TimestreamInfluxDBClientTypes.DbInstanceType? = nil,
        dbParameterGroupIdentifier: Swift.String? = nil,
        dbStorageType: TimestreamInfluxDBClientTypes.DbStorageType? = nil,
        deploymentType: TimestreamInfluxDBClientTypes.DeploymentType? = nil,
        endpoint: Swift.String? = nil,
        id: Swift.String? = nil,
        influxAuthParametersSecretArn: Swift.String? = nil,
        logDeliveryConfiguration: TimestreamInfluxDBClientTypes.LogDeliveryConfiguration? = nil,
        name: Swift.String? = nil,
        publiclyAccessible: Swift.Bool? = nil,
        secondaryAvailabilityZone: Swift.String? = nil,
        status: TimestreamInfluxDBClientTypes.Status? = nil,
        vpcSecurityGroupIds: [Swift.String]? = nil,
        vpcSubnetIds: [Swift.String]? = nil
    )
    {
        self.allocatedStorage = allocatedStorage
        self.arn = arn
        self.availabilityZone = availabilityZone
        self.dbInstanceType = dbInstanceType
        self.dbParameterGroupIdentifier = dbParameterGroupIdentifier
        self.dbStorageType = dbStorageType
        self.deploymentType = deploymentType
        self.endpoint = endpoint
        self.id = id
        self.influxAuthParametersSecretArn = influxAuthParametersSecretArn
        self.logDeliveryConfiguration = logDeliveryConfiguration
        self.name = name
        self.publiclyAccessible = publiclyAccessible
        self.secondaryAvailabilityZone = secondaryAvailabilityZone
        self.status = status
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
        self.vpcSubnetIds = vpcSubnetIds
    }
}

public struct ListDbInstancesInput {
    /// The maximum number of items to return in the output. If the total number of items available is more than the value specified, a NextToken is provided in the output. To resume pagination, provide the NextToken value as argument of a subsequent API invocation.
    public var maxResults: Swift.Int?
    /// The pagination token. To resume pagination, provide the NextToken value as argument of a subsequent API invocation.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension TimestreamInfluxDBClientTypes {
    /// Contains a summary of a DB instance.
    public struct DbInstanceSummary {
        /// The amount of storage to allocate for your DbStorageType in GiB (gibibytes).
        public var allocatedStorage: Swift.Int?
        /// The Amazon Resource Name (ARN) of the DB instance.
        /// This member is required.
        public var arn: Swift.String?
        /// The Timestream for InfluxDB instance type to run InfluxDB on.
        public var dbInstanceType: TimestreamInfluxDBClientTypes.DbInstanceType?
        /// The storage type for your DB instance.
        public var dbStorageType: TimestreamInfluxDBClientTypes.DbStorageType?
        /// Single-Instance or with a MultiAZ Standby for High availability.
        public var deploymentType: TimestreamInfluxDBClientTypes.DeploymentType?
        /// The endpoint used to connect to InfluxDB. The default InfluxDB port is 8086.
        public var endpoint: Swift.String?
        /// The service-generated unique identifier of the DB instance.
        /// This member is required.
        public var id: Swift.String?
        /// This customer-supplied name uniquely identifies the DB instance when interacting with the Amazon Timestream for InfluxDB API and AWS CLI commands.
        /// This member is required.
        public var name: Swift.String?
        /// The status of the DB instance.
        public var status: TimestreamInfluxDBClientTypes.Status?

        public init(
            allocatedStorage: Swift.Int? = nil,
            arn: Swift.String? = nil,
            dbInstanceType: TimestreamInfluxDBClientTypes.DbInstanceType? = nil,
            dbStorageType: TimestreamInfluxDBClientTypes.DbStorageType? = nil,
            deploymentType: TimestreamInfluxDBClientTypes.DeploymentType? = nil,
            endpoint: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            status: TimestreamInfluxDBClientTypes.Status? = nil
        )
        {
            self.allocatedStorage = allocatedStorage
            self.arn = arn
            self.dbInstanceType = dbInstanceType
            self.dbStorageType = dbStorageType
            self.deploymentType = deploymentType
            self.endpoint = endpoint
            self.id = id
            self.name = name
            self.status = status
        }
    }

}

public struct ListDbInstancesOutput {
    /// A list of Timestream for InfluxDB DB instance summaries.
    /// This member is required.
    public var items: [TimestreamInfluxDBClientTypes.DbInstanceSummary]?
    /// Token from a previous call of the operation. When this value is provided, the service returns results from where the previous response left off.
    public var nextToken: Swift.String?

    public init(
        items: [TimestreamInfluxDBClientTypes.DbInstanceSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.items = items
        self.nextToken = nextToken
    }
}

public struct UpdateDbInstanceInput {
    /// The Timestream for InfluxDB DB instance type to run InfluxDB on.
    public var dbInstanceType: TimestreamInfluxDBClientTypes.DbInstanceType?
    /// The id of the DB parameter group to assign to your DB instance. DB parameter groups specify how the database is configured. For example, DB parameter groups can specify the limit for query concurrency.
    public var dbParameterGroupIdentifier: Swift.String?
    /// Specifies whether the DB instance will be deployed as a standalone instance or with a Multi-AZ standby for high availability.
    public var deploymentType: TimestreamInfluxDBClientTypes.DeploymentType?
    /// The id of the DB instance.
    /// This member is required.
    public var identifier: Swift.String?
    /// Configuration for sending InfluxDB engine logs to send to specified S3 bucket.
    public var logDeliveryConfiguration: TimestreamInfluxDBClientTypes.LogDeliveryConfiguration?

    public init(
        dbInstanceType: TimestreamInfluxDBClientTypes.DbInstanceType? = nil,
        dbParameterGroupIdentifier: Swift.String? = nil,
        deploymentType: TimestreamInfluxDBClientTypes.DeploymentType? = nil,
        identifier: Swift.String? = nil,
        logDeliveryConfiguration: TimestreamInfluxDBClientTypes.LogDeliveryConfiguration? = nil
    )
    {
        self.dbInstanceType = dbInstanceType
        self.dbParameterGroupIdentifier = dbParameterGroupIdentifier
        self.deploymentType = deploymentType
        self.identifier = identifier
        self.logDeliveryConfiguration = logDeliveryConfiguration
    }
}

public struct UpdateDbInstanceOutput {
    /// The amount of storage allocated for your DB storage type (in gibibytes).
    public var allocatedStorage: Swift.Int?
    /// The Amazon Resource Name (ARN) of the DB instance.
    /// This member is required.
    public var arn: Swift.String?
    /// The Availability Zone in which the DB instance resides.
    public var availabilityZone: Swift.String?
    /// The Timestream for InfluxDB instance type that InfluxDB runs on.
    public var dbInstanceType: TimestreamInfluxDBClientTypes.DbInstanceType?
    /// The id of the DB parameter group assigned to your DB instance.
    public var dbParameterGroupIdentifier: Swift.String?
    /// The Timestream for InfluxDB DB storage type that InfluxDB stores data on.
    public var dbStorageType: TimestreamInfluxDBClientTypes.DbStorageType?
    /// Specifies whether the Timestream for InfluxDB is deployed as Single-AZ or with a MultiAZ Standby for High availability.
    public var deploymentType: TimestreamInfluxDBClientTypes.DeploymentType?
    /// The endpoint used to connect to InfluxDB. The default InfluxDB port is 8086.
    public var endpoint: Swift.String?
    /// A service-generated unique identifier.
    /// This member is required.
    public var id: Swift.String?
    /// The Amazon Resource Name (ARN) of the AWS Secrets Manager secret containing the initial InfluxDB authorization parameters. The secret value is a JSON formatted key-value pair holding InfluxDB authorization values: organization, bucket, username, and password.
    public var influxAuthParametersSecretArn: Swift.String?
    /// Configuration for sending InfluxDB engine logs to send to specified S3 bucket.
    public var logDeliveryConfiguration: TimestreamInfluxDBClientTypes.LogDeliveryConfiguration?
    /// This customer-supplied name uniquely identifies the DB instance when interacting with the Amazon Timestream for InfluxDB API and AWS CLI commands.
    /// This member is required.
    public var name: Swift.String?
    /// Indicates if the DB instance has a public IP to facilitate access.
    public var publiclyAccessible: Swift.Bool?
    /// The Availability Zone in which the standby instance is located when deploying with a MultiAZ standby instance.
    public var secondaryAvailabilityZone: Swift.String?
    /// The status of the DB instance.
    public var status: TimestreamInfluxDBClientTypes.Status?
    /// A list of VPC security group IDs associated with the DB instance.
    public var vpcSecurityGroupIds: [Swift.String]?
    /// A list of VPC subnet IDs associated with the DB instance.
    /// This member is required.
    public var vpcSubnetIds: [Swift.String]?

    public init(
        allocatedStorage: Swift.Int? = nil,
        arn: Swift.String? = nil,
        availabilityZone: Swift.String? = nil,
        dbInstanceType: TimestreamInfluxDBClientTypes.DbInstanceType? = nil,
        dbParameterGroupIdentifier: Swift.String? = nil,
        dbStorageType: TimestreamInfluxDBClientTypes.DbStorageType? = nil,
        deploymentType: TimestreamInfluxDBClientTypes.DeploymentType? = nil,
        endpoint: Swift.String? = nil,
        id: Swift.String? = nil,
        influxAuthParametersSecretArn: Swift.String? = nil,
        logDeliveryConfiguration: TimestreamInfluxDBClientTypes.LogDeliveryConfiguration? = nil,
        name: Swift.String? = nil,
        publiclyAccessible: Swift.Bool? = nil,
        secondaryAvailabilityZone: Swift.String? = nil,
        status: TimestreamInfluxDBClientTypes.Status? = nil,
        vpcSecurityGroupIds: [Swift.String]? = nil,
        vpcSubnetIds: [Swift.String]? = nil
    )
    {
        self.allocatedStorage = allocatedStorage
        self.arn = arn
        self.availabilityZone = availabilityZone
        self.dbInstanceType = dbInstanceType
        self.dbParameterGroupIdentifier = dbParameterGroupIdentifier
        self.dbStorageType = dbStorageType
        self.deploymentType = deploymentType
        self.endpoint = endpoint
        self.id = id
        self.influxAuthParametersSecretArn = influxAuthParametersSecretArn
        self.logDeliveryConfiguration = logDeliveryConfiguration
        self.name = name
        self.publiclyAccessible = publiclyAccessible
        self.secondaryAvailabilityZone = secondaryAvailabilityZone
        self.status = status
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
        self.vpcSubnetIds = vpcSubnetIds
    }
}

extension TimestreamInfluxDBClientTypes {

    public enum LogLevel: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case debug
        case error
        case info
        case sdkUnknown(Swift.String)

        public static var allCases: [LogLevel] {
            return [
                .debug,
                .error,
                .info
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .debug: return "debug"
            case .error: return "error"
            case .info: return "info"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension TimestreamInfluxDBClientTypes {

    public enum TracingType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case jaeger
        case log
        case sdkUnknown(Swift.String)

        public static var allCases: [TracingType] {
            return [
                .jaeger,
                .log
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .jaeger: return "jaeger"
            case .log: return "log"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension TimestreamInfluxDBClientTypes {
    /// All the customer-modifiable InfluxDB v2 parameters in Timestream for InfluxDB.
    public struct InfluxDBv2Parameters {
        /// Include option to show detailed logs for Flux queries. Default: false
        public var fluxLogEnabled: Swift.Bool?
        /// Log output level. InfluxDB outputs log entries with severity levels greater than or equal to the level specified. Default: info
        public var logLevel: TimestreamInfluxDBClientTypes.LogLevel?
        /// Disable the HTTP /metrics endpoint which exposes [internal InfluxDB metrics](https://docs.influxdata.com/influxdb/v2/reference/internals/metrics/). Default: false
        public var metricsDisabled: Swift.Bool?
        /// Disable the task scheduler. If problematic tasks prevent InfluxDB from starting, use this option to start InfluxDB without scheduling or executing tasks. Default: false
        public var noTasks: Swift.Bool?
        /// Number of queries allowed to execute concurrently. Setting to 0 allows an unlimited number of concurrent queries. Default: 0
        public var queryConcurrency: Swift.Int?
        /// Maximum number of queries allowed in execution queue. When queue limit is reached, new queries are rejected. Setting to 0 allows an unlimited number of queries in the queue. Default: 0
        public var queryQueueSize: Swift.Int?
        /// Enable tracing in InfluxDB and specifies the tracing type. Tracing is disabled by default.
        public var tracingType: TimestreamInfluxDBClientTypes.TracingType?

        public init(
            fluxLogEnabled: Swift.Bool? = nil,
            logLevel: TimestreamInfluxDBClientTypes.LogLevel? = nil,
            metricsDisabled: Swift.Bool? = nil,
            noTasks: Swift.Bool? = nil,
            queryConcurrency: Swift.Int? = nil,
            queryQueueSize: Swift.Int? = nil,
            tracingType: TimestreamInfluxDBClientTypes.TracingType? = nil
        )
        {
            self.fluxLogEnabled = fluxLogEnabled
            self.logLevel = logLevel
            self.metricsDisabled = metricsDisabled
            self.noTasks = noTasks
            self.queryConcurrency = queryConcurrency
            self.queryQueueSize = queryQueueSize
            self.tracingType = tracingType
        }
    }

}

extension TimestreamInfluxDBClientTypes {
    /// The parameters that comprise the parameter group.
    public enum Parameters {
        /// All the customer-modifiable InfluxDB v2 parameters in Timestream for InfluxDB.
        case influxdbv2(TimestreamInfluxDBClientTypes.InfluxDBv2Parameters)
        case sdkUnknown(Swift.String)
    }

}

public struct CreateDbParameterGroupInput {
    /// A description of the DB parameter group.
    public var description: Swift.String?
    /// The name of the DB parameter group. The name must be unique per customer and per region.
    /// This member is required.
    public var name: Swift.String?
    /// A list of the parameters that comprise the DB parameter group.
    public var parameters: TimestreamInfluxDBClientTypes.Parameters?
    /// A list of key-value pairs to associate with the DB parameter group.
    public var tags: [Swift.String: Swift.String]?

    public init(
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        parameters: TimestreamInfluxDBClientTypes.Parameters? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.description = description
        self.name = name
        self.parameters = parameters
        self.tags = tags
    }
}

public struct CreateDbParameterGroupOutput {
    /// The Amazon Resource Name (ARM) of the DB parameter group.
    /// This member is required.
    public var arn: Swift.String?
    /// The description of the DB parameter group.
    public var description: Swift.String?
    /// A service-generated unique identifier.
    /// This member is required.
    public var id: Swift.String?
    /// The customer-supplied name that uniquely identifies the DB parameter group when interacting with the Amazon Timestream for InfluxDB API and CLI commands.
    /// This member is required.
    public var name: Swift.String?
    /// A list of the parameters that comprise the DB parameter group.
    public var parameters: TimestreamInfluxDBClientTypes.Parameters?

    public init(
        arn: Swift.String? = nil,
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        name: Swift.String? = nil,
        parameters: TimestreamInfluxDBClientTypes.Parameters? = nil
    )
    {
        self.arn = arn
        self.description = description
        self.id = id
        self.name = name
        self.parameters = parameters
    }
}

public struct GetDbParameterGroupInput {
    /// The id of the DB parameter group.
    /// This member is required.
    public var identifier: Swift.String?

    public init(
        identifier: Swift.String? = nil
    )
    {
        self.identifier = identifier
    }
}

public struct GetDbParameterGroupOutput {
    /// The Amazon Resource Name (ARN) of the DB parameter group.
    /// This member is required.
    public var arn: Swift.String?
    /// A description of the DB parameter group.
    public var description: Swift.String?
    /// A service-generated unique identifier.
    /// This member is required.
    public var id: Swift.String?
    /// The customer-supplied name that uniquely identifies the DB parameter group when interacting with the Amazon Timestream for InfluxDB API and CLI commands.
    /// This member is required.
    public var name: Swift.String?
    /// The parameters that comprise the DB parameter group.
    public var parameters: TimestreamInfluxDBClientTypes.Parameters?

    public init(
        arn: Swift.String? = nil,
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        name: Swift.String? = nil,
        parameters: TimestreamInfluxDBClientTypes.Parameters? = nil
    )
    {
        self.arn = arn
        self.description = description
        self.id = id
        self.name = name
        self.parameters = parameters
    }
}

public struct ListDbParameterGroupsInput {
    /// The maximum number of items to return in the output. If the total number of items available is more than the value specified, a NextToken is provided in the output. To resume pagination, provide the NextToken value as argument of a subsequent API invocation.
    public var maxResults: Swift.Int?
    /// The pagination token. To resume pagination, provide the NextToken value as argument of a subsequent API invocation.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension TimestreamInfluxDBClientTypes {
    /// Contains a summary of a DB parameter group.
    public struct DbParameterGroupSummary {
        /// The Amazon Resource Name (ARN) of the DB parameter group.
        /// This member is required.
        public var arn: Swift.String?
        /// A description of the DB parameter group.
        public var description: Swift.String?
        /// A service-generated unique identifier.
        /// This member is required.
        public var id: Swift.String?
        /// This customer-supplied name uniquely identifies the parameter group.
        /// This member is required.
        public var name: Swift.String?

        public init(
            arn: Swift.String? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.arn = arn
            self.description = description
            self.id = id
            self.name = name
        }
    }

}

public struct ListDbParameterGroupsOutput {
    /// A list of Timestream for InfluxDB DB parameter group summaries.
    /// This member is required.
    public var items: [TimestreamInfluxDBClientTypes.DbParameterGroupSummary]?
    /// Token from a previous call of the operation. When this value is provided, the service returns results from where the previous response left off.
    public var nextToken: Swift.String?

    public init(
        items: [TimestreamInfluxDBClientTypes.DbParameterGroupSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.items = items
        self.nextToken = nextToken
    }
}

public struct ListTagsForResourceInput {
    /// The Amazon Resource Name (ARN) of the tagged resource.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct ListTagsForResourceOutput {
    /// A list of tags used to categorize and track resources.
    public var tags: [Swift.String: Swift.String]?

    public init(
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

public struct TagResourceInput {
    /// The Amazon Resource Name (ARN) of the tagged resource.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// A list of tags used to categorize and track resources.
    /// This member is required.
    public var tags: [Swift.String: Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

public struct UntagResourceInput {
    /// The Amazon Resource Name (ARN) of the tagged resource.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The keys used to identify the tags.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

extension CreateDbInstanceInput {

    static func urlPathProvider(_ value: CreateDbInstanceInput) -> Swift.String? {
        return "/"
    }
}

extension CreateDbParameterGroupInput {

    static func urlPathProvider(_ value: CreateDbParameterGroupInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteDbInstanceInput {

    static func urlPathProvider(_ value: DeleteDbInstanceInput) -> Swift.String? {
        return "/"
    }
}

extension GetDbInstanceInput {

    static func urlPathProvider(_ value: GetDbInstanceInput) -> Swift.String? {
        return "/"
    }
}

extension GetDbParameterGroupInput {

    static func urlPathProvider(_ value: GetDbParameterGroupInput) -> Swift.String? {
        return "/"
    }
}

extension ListDbInstancesInput {

    static func urlPathProvider(_ value: ListDbInstancesInput) -> Swift.String? {
        return "/"
    }
}

extension ListDbParameterGroupsInput {

    static func urlPathProvider(_ value: ListDbParameterGroupsInput) -> Swift.String? {
        return "/"
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        return "/"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateDbInstanceInput {

    static func urlPathProvider(_ value: UpdateDbInstanceInput) -> Swift.String? {
        return "/"
    }
}

extension CreateDbInstanceInput {

    static func write(value: CreateDbInstanceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["allocatedStorage"].write(value.allocatedStorage)
        try writer["bucket"].write(value.bucket)
        try writer["dbInstanceType"].write(value.dbInstanceType)
        try writer["dbParameterGroupIdentifier"].write(value.dbParameterGroupIdentifier)
        try writer["dbStorageType"].write(value.dbStorageType)
        try writer["deploymentType"].write(value.deploymentType)
        try writer["logDeliveryConfiguration"].write(value.logDeliveryConfiguration, with: TimestreamInfluxDBClientTypes.LogDeliveryConfiguration.write(value:to:))
        try writer["name"].write(value.name)
        try writer["organization"].write(value.organization)
        try writer["password"].write(value.password)
        try writer["publiclyAccessible"].write(value.publiclyAccessible)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["username"].write(value.username)
        try writer["vpcSecurityGroupIds"].writeList(value.vpcSecurityGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["vpcSubnetIds"].writeList(value.vpcSubnetIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateDbParameterGroupInput {

    static func write(value: CreateDbParameterGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["description"].write(value.description)
        try writer["name"].write(value.name)
        try writer["parameters"].write(value.parameters, with: TimestreamInfluxDBClientTypes.Parameters.write(value:to:))
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension DeleteDbInstanceInput {

    static func write(value: DeleteDbInstanceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["identifier"].write(value.identifier)
    }
}

extension GetDbInstanceInput {

    static func write(value: GetDbInstanceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["identifier"].write(value.identifier)
    }
}

extension GetDbParameterGroupInput {

    static func write(value: GetDbParameterGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["identifier"].write(value.identifier)
    }
}

extension ListDbInstancesInput {

    static func write(value: ListDbInstancesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension ListDbParameterGroupsInput {

    static func write(value: ListDbParameterGroupsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension ListTagsForResourceInput {

    static func write(value: ListTagsForResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resourceArn"].write(value.resourceArn)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resourceArn"].write(value.resourceArn)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension UntagResourceInput {

    static func write(value: UntagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["tagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateDbInstanceInput {

    static func write(value: UpdateDbInstanceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["dbInstanceType"].write(value.dbInstanceType)
        try writer["dbParameterGroupIdentifier"].write(value.dbParameterGroupIdentifier)
        try writer["deploymentType"].write(value.deploymentType)
        try writer["identifier"].write(value.identifier)
        try writer["logDeliveryConfiguration"].write(value.logDeliveryConfiguration, with: TimestreamInfluxDBClientTypes.LogDeliveryConfiguration.write(value:to:))
    }
}

extension CreateDbInstanceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDbInstanceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateDbInstanceOutput()
        value.allocatedStorage = try reader["allocatedStorage"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.availabilityZone = try reader["availabilityZone"].readIfPresent()
        value.dbInstanceType = try reader["dbInstanceType"].readIfPresent()
        value.dbParameterGroupIdentifier = try reader["dbParameterGroupIdentifier"].readIfPresent()
        value.dbStorageType = try reader["dbStorageType"].readIfPresent()
        value.deploymentType = try reader["deploymentType"].readIfPresent()
        value.endpoint = try reader["endpoint"].readIfPresent()
        value.id = try reader["id"].readIfPresent() ?? ""
        value.influxAuthParametersSecretArn = try reader["influxAuthParametersSecretArn"].readIfPresent()
        value.logDeliveryConfiguration = try reader["logDeliveryConfiguration"].readIfPresent(with: TimestreamInfluxDBClientTypes.LogDeliveryConfiguration.read(from:))
        value.name = try reader["name"].readIfPresent() ?? ""
        value.publiclyAccessible = try reader["publiclyAccessible"].readIfPresent()
        value.secondaryAvailabilityZone = try reader["secondaryAvailabilityZone"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.vpcSecurityGroupIds = try reader["vpcSecurityGroupIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.vpcSubnetIds = try reader["vpcSubnetIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension CreateDbParameterGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDbParameterGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateDbParameterGroupOutput()
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.description = try reader["description"].readIfPresent()
        value.id = try reader["id"].readIfPresent() ?? ""
        value.name = try reader["name"].readIfPresent() ?? ""
        value.parameters = try reader["parameters"].readIfPresent(with: TimestreamInfluxDBClientTypes.Parameters.read(from:))
        return value
    }
}

extension DeleteDbInstanceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteDbInstanceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteDbInstanceOutput()
        value.allocatedStorage = try reader["allocatedStorage"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.availabilityZone = try reader["availabilityZone"].readIfPresent()
        value.dbInstanceType = try reader["dbInstanceType"].readIfPresent()
        value.dbParameterGroupIdentifier = try reader["dbParameterGroupIdentifier"].readIfPresent()
        value.dbStorageType = try reader["dbStorageType"].readIfPresent()
        value.deploymentType = try reader["deploymentType"].readIfPresent()
        value.endpoint = try reader["endpoint"].readIfPresent()
        value.id = try reader["id"].readIfPresent() ?? ""
        value.influxAuthParametersSecretArn = try reader["influxAuthParametersSecretArn"].readIfPresent()
        value.logDeliveryConfiguration = try reader["logDeliveryConfiguration"].readIfPresent(with: TimestreamInfluxDBClientTypes.LogDeliveryConfiguration.read(from:))
        value.name = try reader["name"].readIfPresent() ?? ""
        value.publiclyAccessible = try reader["publiclyAccessible"].readIfPresent()
        value.secondaryAvailabilityZone = try reader["secondaryAvailabilityZone"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.vpcSecurityGroupIds = try reader["vpcSecurityGroupIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.vpcSubnetIds = try reader["vpcSubnetIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension GetDbInstanceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDbInstanceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDbInstanceOutput()
        value.allocatedStorage = try reader["allocatedStorage"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.availabilityZone = try reader["availabilityZone"].readIfPresent()
        value.dbInstanceType = try reader["dbInstanceType"].readIfPresent()
        value.dbParameterGroupIdentifier = try reader["dbParameterGroupIdentifier"].readIfPresent()
        value.dbStorageType = try reader["dbStorageType"].readIfPresent()
        value.deploymentType = try reader["deploymentType"].readIfPresent()
        value.endpoint = try reader["endpoint"].readIfPresent()
        value.id = try reader["id"].readIfPresent() ?? ""
        value.influxAuthParametersSecretArn = try reader["influxAuthParametersSecretArn"].readIfPresent()
        value.logDeliveryConfiguration = try reader["logDeliveryConfiguration"].readIfPresent(with: TimestreamInfluxDBClientTypes.LogDeliveryConfiguration.read(from:))
        value.name = try reader["name"].readIfPresent() ?? ""
        value.publiclyAccessible = try reader["publiclyAccessible"].readIfPresent()
        value.secondaryAvailabilityZone = try reader["secondaryAvailabilityZone"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.vpcSecurityGroupIds = try reader["vpcSecurityGroupIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.vpcSubnetIds = try reader["vpcSubnetIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension GetDbParameterGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDbParameterGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDbParameterGroupOutput()
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.description = try reader["description"].readIfPresent()
        value.id = try reader["id"].readIfPresent() ?? ""
        value.name = try reader["name"].readIfPresent() ?? ""
        value.parameters = try reader["parameters"].readIfPresent(with: TimestreamInfluxDBClientTypes.Parameters.read(from:))
        return value
    }
}

extension ListDbInstancesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDbInstancesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDbInstancesOutput()
        value.items = try reader["items"].readListIfPresent(memberReadingClosure: TimestreamInfluxDBClientTypes.DbInstanceSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListDbParameterGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDbParameterGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDbParameterGroupsOutput()
        value.items = try reader["items"].readListIfPresent(memberReadingClosure: TimestreamInfluxDBClientTypes.DbParameterGroupSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateDbInstanceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateDbInstanceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateDbInstanceOutput()
        value.allocatedStorage = try reader["allocatedStorage"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.availabilityZone = try reader["availabilityZone"].readIfPresent()
        value.dbInstanceType = try reader["dbInstanceType"].readIfPresent()
        value.dbParameterGroupIdentifier = try reader["dbParameterGroupIdentifier"].readIfPresent()
        value.dbStorageType = try reader["dbStorageType"].readIfPresent()
        value.deploymentType = try reader["deploymentType"].readIfPresent()
        value.endpoint = try reader["endpoint"].readIfPresent()
        value.id = try reader["id"].readIfPresent() ?? ""
        value.influxAuthParametersSecretArn = try reader["influxAuthParametersSecretArn"].readIfPresent()
        value.logDeliveryConfiguration = try reader["logDeliveryConfiguration"].readIfPresent(with: TimestreamInfluxDBClientTypes.LogDeliveryConfiguration.read(from:))
        value.name = try reader["name"].readIfPresent() ?? ""
        value.publiclyAccessible = try reader["publiclyAccessible"].readIfPresent()
        value.secondaryAvailabilityZone = try reader["secondaryAvailabilityZone"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.vpcSecurityGroupIds = try reader["vpcSecurityGroupIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.vpcSubnetIds = try reader["vpcSubnetIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

enum CreateDbInstanceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateDbParameterGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteDbInstanceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDbInstanceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDbParameterGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDbInstancesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDbParameterGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateDbInstanceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.properties.reason = try reader["reason"].readIfPresent() ?? .sdkUnknown("")
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.properties.resourceId = try reader["resourceId"].readIfPresent() ?? ""
        value.properties.resourceType = try reader["resourceType"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ThrottlingException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ThrottlingException {
        let reader = baseError.errorBodyReader
        let httpResponse = baseError.httpResponse
        var value = ThrottlingException()
        if let retryAfterSecondsHeaderValue = httpResponse.headers.value(for: "Retry-After") {
            value.properties.retryAfterSeconds = Swift.Int(retryAfterSecondsHeaderValue) ?? 0
        }
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServerException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InternalServerException {
        let reader = baseError.errorBodyReader
        var value = InternalServerException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.properties.resourceId = try reader["resourceId"].readIfPresent() ?? ""
        value.properties.resourceType = try reader["resourceType"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceQuotaExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ServiceQuotaExceededException {
        let reader = baseError.errorBodyReader
        var value = ServiceQuotaExceededException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TimestreamInfluxDBClientTypes.LogDeliveryConfiguration {

    static func write(value: TimestreamInfluxDBClientTypes.LogDeliveryConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["s3Configuration"].write(value.s3Configuration, with: TimestreamInfluxDBClientTypes.S3Configuration.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> TimestreamInfluxDBClientTypes.LogDeliveryConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TimestreamInfluxDBClientTypes.LogDeliveryConfiguration()
        value.s3Configuration = try reader["s3Configuration"].readIfPresent(with: TimestreamInfluxDBClientTypes.S3Configuration.read(from:))
        return value
    }
}

extension TimestreamInfluxDBClientTypes.S3Configuration {

    static func write(value: TimestreamInfluxDBClientTypes.S3Configuration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bucketName"].write(value.bucketName)
        try writer["enabled"].write(value.enabled)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> TimestreamInfluxDBClientTypes.S3Configuration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TimestreamInfluxDBClientTypes.S3Configuration()
        value.bucketName = try reader["bucketName"].readIfPresent() ?? ""
        value.enabled = try reader["enabled"].readIfPresent() ?? false
        return value
    }
}

extension TimestreamInfluxDBClientTypes.Parameters {

    static func write(value: TimestreamInfluxDBClientTypes.Parameters?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        switch value {
            case let .influxdbv2(influxdbv2):
                try writer["InfluxDBv2"].write(influxdbv2, with: TimestreamInfluxDBClientTypes.InfluxDBv2Parameters.write(value:to:))
            case let .sdkUnknown(sdkUnknown):
                try writer["sdkUnknown"].write(sdkUnknown)
        }
    }

    static func read(from reader: SmithyJSON.Reader) throws -> TimestreamInfluxDBClientTypes.Parameters {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        let name = reader.children.filter { $0.hasContent && $0.nodeInfo.name != "__type" }.first?.nodeInfo.name
        switch name {
            case "InfluxDBv2":
                return .influxdbv2(try reader["InfluxDBv2"].read(with: TimestreamInfluxDBClientTypes.InfluxDBv2Parameters.read(from:)))
            default:
                return .sdkUnknown(name ?? "")
        }
    }
}

extension TimestreamInfluxDBClientTypes.InfluxDBv2Parameters {

    static func write(value: TimestreamInfluxDBClientTypes.InfluxDBv2Parameters?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["fluxLogEnabled"].write(value.fluxLogEnabled)
        try writer["logLevel"].write(value.logLevel)
        try writer["metricsDisabled"].write(value.metricsDisabled)
        try writer["noTasks"].write(value.noTasks)
        try writer["queryConcurrency"].write(value.queryConcurrency)
        try writer["queryQueueSize"].write(value.queryQueueSize)
        try writer["tracingType"].write(value.tracingType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> TimestreamInfluxDBClientTypes.InfluxDBv2Parameters {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TimestreamInfluxDBClientTypes.InfluxDBv2Parameters()
        value.fluxLogEnabled = try reader["fluxLogEnabled"].readIfPresent()
        value.logLevel = try reader["logLevel"].readIfPresent()
        value.noTasks = try reader["noTasks"].readIfPresent()
        value.queryConcurrency = try reader["queryConcurrency"].readIfPresent()
        value.queryQueueSize = try reader["queryQueueSize"].readIfPresent()
        value.tracingType = try reader["tracingType"].readIfPresent()
        value.metricsDisabled = try reader["metricsDisabled"].readIfPresent()
        return value
    }
}

extension TimestreamInfluxDBClientTypes.DbInstanceSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> TimestreamInfluxDBClientTypes.DbInstanceSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TimestreamInfluxDBClientTypes.DbInstanceSummary()
        value.id = try reader["id"].readIfPresent() ?? ""
        value.name = try reader["name"].readIfPresent() ?? ""
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.status = try reader["status"].readIfPresent()
        value.endpoint = try reader["endpoint"].readIfPresent()
        value.dbInstanceType = try reader["dbInstanceType"].readIfPresent()
        value.dbStorageType = try reader["dbStorageType"].readIfPresent()
        value.allocatedStorage = try reader["allocatedStorage"].readIfPresent()
        value.deploymentType = try reader["deploymentType"].readIfPresent()
        return value
    }
}

extension TimestreamInfluxDBClientTypes.DbParameterGroupSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> TimestreamInfluxDBClientTypes.DbParameterGroupSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TimestreamInfluxDBClientTypes.DbParameterGroupSummary()
        value.id = try reader["id"].readIfPresent() ?? ""
        value.name = try reader["name"].readIfPresent() ?? ""
        value.arn = try reader["arn"].readIfPresent() ?? ""
        value.description = try reader["description"].readIfPresent()
        return value
    }
}

public enum TimestreamInfluxDBClientTypes {}
