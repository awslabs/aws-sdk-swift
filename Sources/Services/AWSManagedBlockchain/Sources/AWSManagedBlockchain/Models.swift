//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum Smithy.ClientError
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.URIQueryItem

/// You don't have sufficient access to perform this action.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ManagedBlockchainClientTypes {

    public enum AccessorNetworkType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ethereumGoerli
        case ethereumMainnet
        case ethereumMainnetAndGoerli
        case polygonMainnet
        case polygonMumbai
        case sdkUnknown(Swift.String)

        public static var allCases: [AccessorNetworkType] {
            return [
                .ethereumGoerli,
                .ethereumMainnet,
                .ethereumMainnetAndGoerli,
                .polygonMainnet,
                .polygonMumbai
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ethereumGoerli: return "ETHEREUM_GOERLI"
            case .ethereumMainnet: return "ETHEREUM_MAINNET"
            case .ethereumMainnetAndGoerli: return "ETHEREUM_MAINNET_AND_GOERLI"
            case .polygonMainnet: return "POLYGON_MAINNET"
            case .polygonMumbai: return "POLYGON_MUMBAI"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ManagedBlockchainClientTypes {

    public enum AccessorStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case available
        case deleted
        case pendingDeletion
        case sdkUnknown(Swift.String)

        public static var allCases: [AccessorStatus] {
            return [
                .available,
                .deleted,
                .pendingDeletion
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .available: return "AVAILABLE"
            case .deleted: return "DELETED"
            case .pendingDeletion: return "PENDING_DELETION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ManagedBlockchainClientTypes {

    public enum AccessorType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case billingToken
        case sdkUnknown(Swift.String)

        public static var allCases: [AccessorType] {
            return [
                .billingToken
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .billingToken: return "BILLING_TOKEN"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ManagedBlockchainClientTypes {

    /// The properties of the Accessor.
    public struct Accessor: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the accessor. For more information about ARNs and their format, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
        public var arn: Swift.String?
        /// The billing token is a property of the Accessor. Use this token to when making calls to the blockchain network. The billing token is used to track your accessor token for billing requests.
        public var billingToken: Swift.String?
        /// The creation date and time of the accessor.
        public var creationDate: Foundation.Date?
        /// The unique identifier of the accessor.
        public var id: Swift.String?
        /// The blockchain network that the Accessor token is created for.
        public var networkType: ManagedBlockchainClientTypes.AccessorNetworkType?
        /// The current status of the accessor.
        public var status: ManagedBlockchainClientTypes.AccessorStatus?
        /// The tags assigned to the Accessor. For more information about tags, see [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html) in the Amazon Managed Blockchain Ethereum Developer Guide, or [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html) in the Amazon Managed Blockchain Hyperledger Fabric Developer Guide.
        public var tags: [Swift.String: Swift.String]?
        /// The type of the accessor. Currently, accessor type is restricted to BILLING_TOKEN.
        public var type: ManagedBlockchainClientTypes.AccessorType?

        public init(
            arn: Swift.String? = nil,
            billingToken: Swift.String? = nil,
            creationDate: Foundation.Date? = nil,
            id: Swift.String? = nil,
            networkType: ManagedBlockchainClientTypes.AccessorNetworkType? = nil,
            status: ManagedBlockchainClientTypes.AccessorStatus? = nil,
            tags: [Swift.String: Swift.String]? = nil,
            type: ManagedBlockchainClientTypes.AccessorType? = nil
        )
        {
            self.arn = arn
            self.billingToken = billingToken
            self.creationDate = creationDate
            self.id = id
            self.networkType = networkType
            self.status = status
            self.tags = tags
            self.type = type
        }
    }
}

extension ManagedBlockchainClientTypes {

    /// A summary of accessor properties.
    public struct AccessorSummary: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the accessor. For more information about ARNs and their format, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
        public var arn: Swift.String?
        /// The creation date and time of the accessor.
        public var creationDate: Foundation.Date?
        /// The unique identifier of the accessor.
        public var id: Swift.String?
        /// The blockchain network that the Accessor token is created for.
        public var networkType: ManagedBlockchainClientTypes.AccessorNetworkType?
        /// The current status of the accessor.
        public var status: ManagedBlockchainClientTypes.AccessorStatus?
        /// The type of the accessor. Currently accessor type is restricted to BILLING_TOKEN.
        public var type: ManagedBlockchainClientTypes.AccessorType?

        public init(
            arn: Swift.String? = nil,
            creationDate: Foundation.Date? = nil,
            id: Swift.String? = nil,
            networkType: ManagedBlockchainClientTypes.AccessorNetworkType? = nil,
            status: ManagedBlockchainClientTypes.AccessorStatus? = nil,
            type: ManagedBlockchainClientTypes.AccessorType? = nil
        )
        {
            self.arn = arn
            self.creationDate = creationDate
            self.id = id
            self.networkType = networkType
            self.status = status
            self.type = type
        }
    }
}

extension ManagedBlockchainClientTypes {

    public enum ThresholdComparator: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case greaterThan
        case greaterThanOrEqualTo
        case sdkUnknown(Swift.String)

        public static var allCases: [ThresholdComparator] {
            return [
                .greaterThan,
                .greaterThanOrEqualTo
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .greaterThan: return "GREATER_THAN"
            case .greaterThanOrEqualTo: return "GREATER_THAN_OR_EQUAL_TO"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ManagedBlockchainClientTypes {

    /// A policy type that defines the voting rules for the network. The rules decide if a proposal is approved. Approval may be based on criteria such as the percentage of YES votes and the duration of the proposal. The policy applies to all proposals and is specified when the network is created. Applies only to Hyperledger Fabric.
    public struct ApprovalThresholdPolicy: Swift.Sendable {
        /// The duration from the time that a proposal is created until it expires. If members cast neither the required number of YES votes to approve the proposal nor the number of NO votes required to reject it before the duration expires, the proposal is EXPIRED and ProposalActions aren't carried out.
        public var proposalDurationInHours: Swift.Int?
        /// Determines whether the vote percentage must be greater than the ThresholdPercentage or must be greater than or equal to the ThresholdPercentage to be approved.
        public var thresholdComparator: ManagedBlockchainClientTypes.ThresholdComparator?
        /// The percentage of votes among all members that must be YES for a proposal to be approved. For example, a ThresholdPercentage value of 50 indicates 50%. The ThresholdComparator determines the precise comparison. If a ThresholdPercentage value of 50 is specified on a network with 10 members, along with a ThresholdComparator value of GREATER_THAN, this indicates that 6 YES votes are required for the proposal to be approved.
        public var thresholdPercentage: Swift.Int?

        public init(
            proposalDurationInHours: Swift.Int? = nil,
            thresholdComparator: ManagedBlockchainClientTypes.ThresholdComparator? = nil,
            thresholdPercentage: Swift.Int? = nil
        )
        {
            self.proposalDurationInHours = proposalDurationInHours
            self.thresholdComparator = thresholdComparator
            self.thresholdPercentage = thresholdPercentage
        }
    }
}

/// The request processing has failed because of an unknown error, exception or failure.
public struct InternalServiceErrorException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {
    public static var typeName: Swift.String { "InternalServiceErrorException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init() { }
}

/// The action or operation requested is invalid. Verify that the action is typed correctly.
public struct InvalidRequestException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidRequestException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// A resource request is issued for a resource that already exists.
public struct ResourceAlreadyExistsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceAlreadyExistsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The maximum number of resources of that type already exist. Ensure the resources requested are within the boundaries of the service edition and your account limits.
public struct ResourceLimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceLimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request or operation couldn't be performed because a service is throttling requests. The most common source of throttling errors is creating resources that exceed your service limit for this resource type. Request a limit increase or delete unused resources if possible.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init() { }
}

///
public struct TooManyTagsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        ///
        public internal(set) var resourceName: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyTagsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.resourceName = resourceName
    }
}

public struct CreateAccessorInput: Swift.Sendable {
    /// The type of accessor. Currently, accessor type is restricted to BILLING_TOKEN.
    /// This member is required.
    public var accessorType: ManagedBlockchainClientTypes.AccessorType?
    /// This is a unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than once. This identifier is required only if you make a service request directly using an HTTP client. It is generated automatically if you use an Amazon Web Services SDK or the Amazon Web Services CLI.
    /// This member is required.
    public var clientRequestToken: Swift.String?
    /// The blockchain network that the Accessor token is created for.
    ///
    /// * Use the actual networkType value for the blockchain network that you are creating the Accessor token for.
    ///
    /// * With the shut down of the Ethereum Goerli and Polygon Mumbai Testnet networks the following networkType values are no longer available for selection and use.
    ///
    /// * ETHEREUM_MAINNET_AND_GOERLI
    ///
    /// * ETHEREUM_GOERLI
    ///
    /// * POLYGON_MUMBAI
    ///
    ///
    /// However, your existing Accessor tokens with these networkType values will remain unchanged.
    public var networkType: ManagedBlockchainClientTypes.AccessorNetworkType?
    /// Tags to assign to the Accessor. Each tag consists of a key and an optional value. You can specify multiple key-value pairs in a single request with an overall maximum of 50 tags allowed per resource. For more information about tags, see [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html) in the Amazon Managed Blockchain Ethereum Developer Guide, or [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html) in the Amazon Managed Blockchain Hyperledger Fabric Developer Guide.
    public var tags: [Swift.String: Swift.String]?

    public init(
        accessorType: ManagedBlockchainClientTypes.AccessorType? = nil,
        clientRequestToken: Swift.String? = nil,
        networkType: ManagedBlockchainClientTypes.AccessorNetworkType? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.accessorType = accessorType
        self.clientRequestToken = clientRequestToken
        self.networkType = networkType
        self.tags = tags
    }
}

public struct CreateAccessorOutput: Swift.Sendable {
    /// The unique identifier of the accessor.
    public var accessorId: Swift.String?
    /// The billing token is a property of the Accessor. Use this token to when making calls to the blockchain network. The billing token is used to track your accessor token for billing requests.
    public var billingToken: Swift.String?
    /// The blockchain network that the accessor token is created for.
    public var networkType: ManagedBlockchainClientTypes.AccessorNetworkType?

    public init(
        accessorId: Swift.String? = nil,
        billingToken: Swift.String? = nil,
        networkType: ManagedBlockchainClientTypes.AccessorNetworkType? = nil
    )
    {
        self.accessorId = accessorId
        self.billingToken = billingToken
        self.networkType = networkType
    }
}

/// A requested resource doesn't exist. It may have been deleted or referenced incorrectly.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        /// A requested resource doesn't exist. It may have been deleted or referenced inaccurately.
        public internal(set) var resourceName: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.resourceName = resourceName
    }
}

/// The requested resource exists but isn't in a status that can complete the operation.
public struct ResourceNotReadyException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotReadyException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ManagedBlockchainClientTypes {

    /// Configuration properties for Hyperledger Fabric for a member in a Managed Blockchain network that is using the Hyperledger Fabric framework.
    public struct MemberFabricConfiguration: Swift.Sendable {
        /// The password for the member's initial administrative user. The AdminPassword must be at least 8 characters long and no more than 32 characters. It must contain at least one uppercase letter, one lowercase letter, and one digit. It cannot have a single quotation mark (‘), a double quotation marks (“), a forward slash(/), a backward slash(\), @, or a space.
        /// This member is required.
        public var adminPassword: Swift.String?
        /// The user name for the member's initial administrative user.
        /// This member is required.
        public var adminUsername: Swift.String?

        public init(
            adminPassword: Swift.String? = nil,
            adminUsername: Swift.String? = nil
        )
        {
            self.adminPassword = adminPassword
            self.adminUsername = adminUsername
        }
    }
}

extension ManagedBlockchainClientTypes.MemberFabricConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MemberFabricConfiguration(adminUsername: \(Swift.String(describing: adminUsername)), adminPassword: \"CONTENT_REDACTED\")"}
}

extension ManagedBlockchainClientTypes {

    /// Configuration properties relevant to a member for the blockchain framework that the Managed Blockchain network uses.
    public struct MemberFrameworkConfiguration: Swift.Sendable {
        /// Attributes of Hyperledger Fabric for a member on a Managed Blockchain network that uses Hyperledger Fabric.
        public var fabric: ManagedBlockchainClientTypes.MemberFabricConfiguration?

        public init(
            fabric: ManagedBlockchainClientTypes.MemberFabricConfiguration? = nil
        )
        {
            self.fabric = fabric
        }
    }
}

extension ManagedBlockchainClientTypes {

    /// A configuration for logging events.
    public struct LogConfiguration: Swift.Sendable {
        /// Indicates whether logging is enabled.
        public var enabled: Swift.Bool?

        public init(
            enabled: Swift.Bool? = nil
        )
        {
            self.enabled = enabled
        }
    }
}

extension ManagedBlockchainClientTypes {

    /// A collection of log configurations.
    public struct LogConfigurations: Swift.Sendable {
        /// Parameters for publishing logs to Amazon CloudWatch Logs.
        public var cloudwatch: ManagedBlockchainClientTypes.LogConfiguration?

        public init(
            cloudwatch: ManagedBlockchainClientTypes.LogConfiguration? = nil
        )
        {
            self.cloudwatch = cloudwatch
        }
    }
}

extension ManagedBlockchainClientTypes {

    /// Configuration properties for logging events associated with a member of a Managed Blockchain network using the Hyperledger Fabric framework.
    public struct MemberFabricLogPublishingConfiguration: Swift.Sendable {
        /// Configuration properties for logging events associated with a member's Certificate Authority (CA). CA logs help you determine when a member in your account joins the network, or when new peers register with a member CA.
        public var caLogs: ManagedBlockchainClientTypes.LogConfigurations?

        public init(
            caLogs: ManagedBlockchainClientTypes.LogConfigurations? = nil
        )
        {
            self.caLogs = caLogs
        }
    }
}

extension ManagedBlockchainClientTypes {

    /// Configuration properties for logging events associated with a member of a Managed Blockchain network.
    public struct MemberLogPublishingConfiguration: Swift.Sendable {
        /// Configuration properties for logging events associated with a member of a Managed Blockchain network using the Hyperledger Fabric framework.
        public var fabric: ManagedBlockchainClientTypes.MemberFabricLogPublishingConfiguration?

        public init(
            fabric: ManagedBlockchainClientTypes.MemberFabricLogPublishingConfiguration? = nil
        )
        {
            self.fabric = fabric
        }
    }
}

extension ManagedBlockchainClientTypes {

    /// Configuration properties of the member. Applies only to Hyperledger Fabric.
    public struct MemberConfiguration: Swift.Sendable {
        /// An optional description of the member.
        public var description: Swift.String?
        /// Configuration properties of the blockchain framework relevant to the member.
        /// This member is required.
        public var frameworkConfiguration: ManagedBlockchainClientTypes.MemberFrameworkConfiguration?
        /// The Amazon Resource Name (ARN) of the customer managed key in Key Management Service (KMS) to use for encryption at rest in the member. This parameter is inherited by any nodes that this member creates. For more information, see [Encryption at Rest](https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/managed-blockchain-encryption-at-rest.html) in the Amazon Managed Blockchain Hyperledger Fabric Developer Guide. Use one of the following options to specify this parameter:
        ///
        /// * Undefined or empty string - By default, use an KMS key that is owned and managed by Amazon Web Services on your behalf.
        ///
        /// * A valid symmetric customer managed KMS key - Use the specified KMS key in your account that you create, own, and manage. Amazon Managed Blockchain doesn't support asymmetric keys. For more information, see [Using symmetric and asymmetric keys](https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html) in the Key Management Service Developer Guide. The following is an example of a KMS key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
        public var kmsKeyArn: Swift.String?
        /// Configuration properties for logging events associated with a member of a Managed Blockchain network.
        public var logPublishingConfiguration: ManagedBlockchainClientTypes.MemberLogPublishingConfiguration?
        /// The name of the member.
        /// This member is required.
        public var name: Swift.String?
        /// Tags assigned to the member. Tags consist of a key and optional value. When specifying tags during creation, you can specify multiple key-value pairs in a single request, with an overall maximum of 50 tags added to each resource. For more information about tags, see [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html) in the Amazon Managed Blockchain Ethereum Developer Guide, or [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html) in the Amazon Managed Blockchain Hyperledger Fabric Developer Guide.
        public var tags: [Swift.String: Swift.String]?

        public init(
            description: Swift.String? = nil,
            frameworkConfiguration: ManagedBlockchainClientTypes.MemberFrameworkConfiguration? = nil,
            kmsKeyArn: Swift.String? = nil,
            logPublishingConfiguration: ManagedBlockchainClientTypes.MemberLogPublishingConfiguration? = nil,
            name: Swift.String? = nil,
            tags: [Swift.String: Swift.String]? = nil
        )
        {
            self.description = description
            self.frameworkConfiguration = frameworkConfiguration
            self.kmsKeyArn = kmsKeyArn
            self.logPublishingConfiguration = logPublishingConfiguration
            self.name = name
            self.tags = tags
        }
    }
}

public struct CreateMemberInput: Swift.Sendable {
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time. This identifier is required only if you make a service request directly using an HTTP client. It is generated automatically if you use an Amazon Web Services SDK or the CLI.
    /// This member is required.
    public var clientRequestToken: Swift.String?
    /// The unique identifier of the invitation that is sent to the member to join the network.
    /// This member is required.
    public var invitationId: Swift.String?
    /// Member configuration parameters.
    /// This member is required.
    public var memberConfiguration: ManagedBlockchainClientTypes.MemberConfiguration?
    /// The unique identifier of the network in which the member is created.
    /// This member is required.
    public var networkId: Swift.String?

    public init(
        clientRequestToken: Swift.String? = nil,
        invitationId: Swift.String? = nil,
        memberConfiguration: ManagedBlockchainClientTypes.MemberConfiguration? = nil,
        networkId: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.invitationId = invitationId
        self.memberConfiguration = memberConfiguration
        self.networkId = networkId
    }
}

public struct CreateMemberOutput: Swift.Sendable {
    /// The unique identifier of the member.
    public var memberId: Swift.String?

    public init(
        memberId: Swift.String? = nil
    )
    {
        self.memberId = memberId
    }
}

extension ManagedBlockchainClientTypes {

    public enum Framework: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ethereum
        case hyperledgerFabric
        case sdkUnknown(Swift.String)

        public static var allCases: [Framework] {
            return [
                .ethereum,
                .hyperledgerFabric
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ethereum: return "ETHEREUM"
            case .hyperledgerFabric: return "HYPERLEDGER_FABRIC"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ManagedBlockchainClientTypes {

    public enum Edition: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case standard
        case starter
        case sdkUnknown(Swift.String)

        public static var allCases: [Edition] {
            return [
                .standard,
                .starter
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .standard: return "STANDARD"
            case .starter: return "STARTER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ManagedBlockchainClientTypes {

    /// Hyperledger Fabric configuration properties for the network.
    public struct NetworkFabricConfiguration: Swift.Sendable {
        /// The edition of Amazon Managed Blockchain that the network uses. For more information, see [Amazon Managed Blockchain Pricing](http://aws.amazon.com/managed-blockchain/pricing/).
        /// This member is required.
        public var edition: ManagedBlockchainClientTypes.Edition?

        public init(
            edition: ManagedBlockchainClientTypes.Edition? = nil
        )
        {
            self.edition = edition
        }
    }
}

extension ManagedBlockchainClientTypes {

    /// Configuration properties relevant to the network for the blockchain framework that the network uses.
    public struct NetworkFrameworkConfiguration: Swift.Sendable {
        /// Hyperledger Fabric configuration properties for a Managed Blockchain network that uses Hyperledger Fabric.
        public var fabric: ManagedBlockchainClientTypes.NetworkFabricConfiguration?

        public init(
            fabric: ManagedBlockchainClientTypes.NetworkFabricConfiguration? = nil
        )
        {
            self.fabric = fabric
        }
    }
}

extension ManagedBlockchainClientTypes {

    /// The voting rules for the network to decide if a proposal is accepted Applies only to Hyperledger Fabric.
    public struct VotingPolicy: Swift.Sendable {
        /// Defines the rules for the network for voting on proposals, such as the percentage of YES votes required for the proposal to be approved and the duration of the proposal. The policy applies to all proposals and is specified when the network is created.
        public var approvalThresholdPolicy: ManagedBlockchainClientTypes.ApprovalThresholdPolicy?

        public init(
            approvalThresholdPolicy: ManagedBlockchainClientTypes.ApprovalThresholdPolicy? = nil
        )
        {
            self.approvalThresholdPolicy = approvalThresholdPolicy
        }
    }
}

public struct CreateNetworkInput: Swift.Sendable {
    /// This is a unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than once. This identifier is required only if you make a service request directly using an HTTP client. It is generated automatically if you use an Amazon Web Services SDK or the Amazon Web Services CLI.
    /// This member is required.
    public var clientRequestToken: Swift.String?
    /// An optional description for the network.
    public var description: Swift.String?
    /// The blockchain framework that the network uses.
    /// This member is required.
    public var framework: ManagedBlockchainClientTypes.Framework?
    /// Configuration properties of the blockchain framework relevant to the network configuration.
    public var frameworkConfiguration: ManagedBlockchainClientTypes.NetworkFrameworkConfiguration?
    /// The version of the blockchain framework that the network uses.
    /// This member is required.
    public var frameworkVersion: Swift.String?
    /// Configuration properties for the first member within the network.
    /// This member is required.
    public var memberConfiguration: ManagedBlockchainClientTypes.MemberConfiguration?
    /// The name of the network.
    /// This member is required.
    public var name: Swift.String?
    /// Tags to assign to the network. Each tag consists of a key and an optional value. You can specify multiple key-value pairs in a single request with an overall maximum of 50 tags allowed per resource. For more information about tags, see [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html) in the Amazon Managed Blockchain Ethereum Developer Guide, or [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html) in the Amazon Managed Blockchain Hyperledger Fabric Developer Guide.
    public var tags: [Swift.String: Swift.String]?
    /// The voting rules used by the network to determine if a proposal is approved.
    /// This member is required.
    public var votingPolicy: ManagedBlockchainClientTypes.VotingPolicy?

    public init(
        clientRequestToken: Swift.String? = nil,
        description: Swift.String? = nil,
        framework: ManagedBlockchainClientTypes.Framework? = nil,
        frameworkConfiguration: ManagedBlockchainClientTypes.NetworkFrameworkConfiguration? = nil,
        frameworkVersion: Swift.String? = nil,
        memberConfiguration: ManagedBlockchainClientTypes.MemberConfiguration? = nil,
        name: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        votingPolicy: ManagedBlockchainClientTypes.VotingPolicy? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.description = description
        self.framework = framework
        self.frameworkConfiguration = frameworkConfiguration
        self.frameworkVersion = frameworkVersion
        self.memberConfiguration = memberConfiguration
        self.name = name
        self.tags = tags
        self.votingPolicy = votingPolicy
    }
}

public struct CreateNetworkOutput: Swift.Sendable {
    /// The unique identifier for the first member within the network.
    public var memberId: Swift.String?
    /// The unique identifier for the network.
    public var networkId: Swift.String?

    public init(
        memberId: Swift.String? = nil,
        networkId: Swift.String? = nil
    )
    {
        self.memberId = memberId
        self.networkId = networkId
    }
}

extension ManagedBlockchainClientTypes {

    /// Configuration properties for logging events associated with a peer node owned by a member in a Managed Blockchain network.
    public struct NodeFabricLogPublishingConfiguration: Swift.Sendable {
        /// Configuration properties for logging events associated with chaincode execution on a peer node. Chaincode logs contain the results of instantiating, invoking, and querying the chaincode. A peer can run multiple instances of chaincode. When enabled, a log stream is created for all chaincodes, with an individual log stream for each chaincode.
        public var chaincodeLogs: ManagedBlockchainClientTypes.LogConfigurations?
        /// Configuration properties for a peer node log. Peer node logs contain messages generated when your client submits transaction proposals to peer nodes, requests to join channels, enrolls an admin peer, and lists the chaincode instances on a peer node.
        public var peerLogs: ManagedBlockchainClientTypes.LogConfigurations?

        public init(
            chaincodeLogs: ManagedBlockchainClientTypes.LogConfigurations? = nil,
            peerLogs: ManagedBlockchainClientTypes.LogConfigurations? = nil
        )
        {
            self.chaincodeLogs = chaincodeLogs
            self.peerLogs = peerLogs
        }
    }
}

extension ManagedBlockchainClientTypes {

    /// Configuration properties for logging events associated with a peer node on a Hyperledger Fabric network on Managed Blockchain.
    public struct NodeLogPublishingConfiguration: Swift.Sendable {
        /// Configuration properties for logging events associated with a node that is owned by a member of a Managed Blockchain network using the Hyperledger Fabric framework.
        public var fabric: ManagedBlockchainClientTypes.NodeFabricLogPublishingConfiguration?

        public init(
            fabric: ManagedBlockchainClientTypes.NodeFabricLogPublishingConfiguration? = nil
        )
        {
            self.fabric = fabric
        }
    }
}

extension ManagedBlockchainClientTypes {

    public enum StateDBType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case couchdb
        case leveldb
        case sdkUnknown(Swift.String)

        public static var allCases: [StateDBType] {
            return [
                .couchdb,
                .leveldb
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .couchdb: return "CouchDB"
            case .leveldb: return "LevelDB"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ManagedBlockchainClientTypes {

    /// Configuration properties of a node.
    public struct NodeConfiguration: Swift.Sendable {
        /// The Availability Zone in which the node exists. Required for Ethereum nodes.
        public var availabilityZone: Swift.String?
        /// The Amazon Managed Blockchain instance type for the node.
        /// This member is required.
        public var instanceType: Swift.String?
        /// Configuration properties for logging events associated with a peer node on a Hyperledger Fabric network on Managed Blockchain.
        public var logPublishingConfiguration: ManagedBlockchainClientTypes.NodeLogPublishingConfiguration?
        /// The state database that the node uses. Values are LevelDB or CouchDB. When using an Amazon Managed Blockchain network with Hyperledger Fabric version 1.4 or later, the default is CouchDB. Applies only to Hyperledger Fabric.
        public var stateDB: ManagedBlockchainClientTypes.StateDBType?

        public init(
            availabilityZone: Swift.String? = nil,
            instanceType: Swift.String? = nil,
            logPublishingConfiguration: ManagedBlockchainClientTypes.NodeLogPublishingConfiguration? = nil,
            stateDB: ManagedBlockchainClientTypes.StateDBType? = nil
        )
        {
            self.availabilityZone = availabilityZone
            self.instanceType = instanceType
            self.logPublishingConfiguration = logPublishingConfiguration
            self.stateDB = stateDB
        }
    }
}

public struct CreateNodeInput: Swift.Sendable {
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time. This identifier is required only if you make a service request directly using an HTTP client. It is generated automatically if you use an Amazon Web Services SDK or the CLI.
    /// This member is required.
    public var clientRequestToken: Swift.String?
    /// The unique identifier of the member that owns this node. Applies only to Hyperledger Fabric.
    public var memberId: Swift.String?
    /// The unique identifier of the network for the node. Ethereum public networks have the following NetworkIds:
    ///
    /// * n-ethereum-mainnet
    /// This member is required.
    public var networkId: Swift.String?
    /// The properties of a node configuration.
    /// This member is required.
    public var nodeConfiguration: ManagedBlockchainClientTypes.NodeConfiguration?
    /// Tags to assign to the node. Each tag consists of a key and an optional value. You can specify multiple key-value pairs in a single request with an overall maximum of 50 tags allowed per resource. For more information about tags, see [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html) in the Amazon Managed Blockchain Ethereum Developer Guide, or [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html) in the Amazon Managed Blockchain Hyperledger Fabric Developer Guide.
    public var tags: [Swift.String: Swift.String]?

    public init(
        clientRequestToken: Swift.String? = nil,
        memberId: Swift.String? = nil,
        networkId: Swift.String? = nil,
        nodeConfiguration: ManagedBlockchainClientTypes.NodeConfiguration? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.memberId = memberId
        self.networkId = networkId
        self.nodeConfiguration = nodeConfiguration
        self.tags = tags
    }
}

public struct CreateNodeOutput: Swift.Sendable {
    /// The unique identifier of the node.
    public var nodeId: Swift.String?

    public init(
        nodeId: Swift.String? = nil
    )
    {
        self.nodeId = nodeId
    }
}

extension ManagedBlockchainClientTypes {

    /// An action to invite a specific Amazon Web Services account to create a member and join the network. The InviteAction is carried out when a Proposal is APPROVED. Applies only to Hyperledger Fabric.
    public struct InviteAction: Swift.Sendable {
        /// The Amazon Web Services account ID to invite.
        /// This member is required.
        public var principal: Swift.String?

        public init(
            principal: Swift.String? = nil
        )
        {
            self.principal = principal
        }
    }
}

extension ManagedBlockchainClientTypes {

    /// An action to remove a member from a Managed Blockchain network as the result of a removal proposal that is APPROVED. The member and all associated resources are deleted from the network. Applies only to Hyperledger Fabric.
    public struct RemoveAction: Swift.Sendable {
        /// The unique identifier of the member to remove.
        /// This member is required.
        public var memberId: Swift.String?

        public init(
            memberId: Swift.String? = nil
        )
        {
            self.memberId = memberId
        }
    }
}

extension ManagedBlockchainClientTypes {

    /// The actions to carry out if a proposal is APPROVED. Applies only to Hyperledger Fabric.
    public struct ProposalActions: Swift.Sendable {
        /// The actions to perform for an APPROVED proposal to invite an Amazon Web Services account to create a member and join the network.
        public var invitations: [ManagedBlockchainClientTypes.InviteAction]?
        /// The actions to perform for an APPROVED proposal to remove a member from the network, which deletes the member and all associated member resources from the network.
        public var removals: [ManagedBlockchainClientTypes.RemoveAction]?

        public init(
            invitations: [ManagedBlockchainClientTypes.InviteAction]? = nil,
            removals: [ManagedBlockchainClientTypes.RemoveAction]? = nil
        )
        {
            self.invitations = invitations
            self.removals = removals
        }
    }
}

public struct CreateProposalInput: Swift.Sendable {
    /// The type of actions proposed, such as inviting a member or removing a member. The types of Actions in a proposal are mutually exclusive. For example, a proposal with Invitations actions cannot also contain Removals actions.
    /// This member is required.
    public var actions: ManagedBlockchainClientTypes.ProposalActions?
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time. This identifier is required only if you make a service request directly using an HTTP client. It is generated automatically if you use an Amazon Web Services SDK or the CLI.
    /// This member is required.
    public var clientRequestToken: Swift.String?
    /// A description for the proposal that is visible to voting members, for example, "Proposal to add Example Corp. as member."
    public var description: Swift.String?
    /// The unique identifier of the member that is creating the proposal. This identifier is especially useful for identifying the member making the proposal when multiple members exist in a single Amazon Web Services account.
    /// This member is required.
    public var memberId: Swift.String?
    /// The unique identifier of the network for which the proposal is made.
    /// This member is required.
    public var networkId: Swift.String?
    /// Tags to assign to the proposal. Each tag consists of a key and an optional value. You can specify multiple key-value pairs in a single request with an overall maximum of 50 tags allowed per resource. For more information about tags, see [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html) in the Amazon Managed Blockchain Ethereum Developer Guide, or [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html) in the Amazon Managed Blockchain Hyperledger Fabric Developer Guide.
    public var tags: [Swift.String: Swift.String]?

    public init(
        actions: ManagedBlockchainClientTypes.ProposalActions? = nil,
        clientRequestToken: Swift.String? = nil,
        description: Swift.String? = nil,
        memberId: Swift.String? = nil,
        networkId: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.actions = actions
        self.clientRequestToken = clientRequestToken
        self.description = description
        self.memberId = memberId
        self.networkId = networkId
        self.tags = tags
    }
}

public struct CreateProposalOutput: Swift.Sendable {
    /// The unique identifier of the proposal.
    public var proposalId: Swift.String?

    public init(
        proposalId: Swift.String? = nil
    )
    {
        self.proposalId = proposalId
    }
}

public struct DeleteAccessorInput: Swift.Sendable {
    /// The unique identifier of the accessor.
    /// This member is required.
    public var accessorId: Swift.String?

    public init(
        accessorId: Swift.String? = nil
    )
    {
        self.accessorId = accessorId
    }
}

public struct DeleteAccessorOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteMemberInput: Swift.Sendable {
    /// The unique identifier of the member to remove.
    /// This member is required.
    public var memberId: Swift.String?
    /// The unique identifier of the network from which the member is removed.
    /// This member is required.
    public var networkId: Swift.String?

    public init(
        memberId: Swift.String? = nil,
        networkId: Swift.String? = nil
    )
    {
        self.memberId = memberId
        self.networkId = networkId
    }
}

public struct DeleteMemberOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteNodeInput: Swift.Sendable {
    /// The unique identifier of the member that owns this node. Applies only to Hyperledger Fabric and is required for Hyperledger Fabric.
    public var memberId: Swift.String?
    /// The unique identifier of the network that the node is on. Ethereum public networks have the following NetworkIds:
    ///
    /// * n-ethereum-mainnet
    /// This member is required.
    public var networkId: Swift.String?
    /// The unique identifier of the node.
    /// This member is required.
    public var nodeId: Swift.String?

    public init(
        memberId: Swift.String? = nil,
        networkId: Swift.String? = nil,
        nodeId: Swift.String? = nil
    )
    {
        self.memberId = memberId
        self.networkId = networkId
        self.nodeId = nodeId
    }
}

public struct DeleteNodeOutput: Swift.Sendable {

    public init() { }
}

public struct GetAccessorInput: Swift.Sendable {
    /// The unique identifier of the accessor.
    /// This member is required.
    public var accessorId: Swift.String?

    public init(
        accessorId: Swift.String? = nil
    )
    {
        self.accessorId = accessorId
    }
}

public struct GetAccessorOutput: Swift.Sendable {
    /// The properties of the accessor.
    public var accessor: ManagedBlockchainClientTypes.Accessor?

    public init(
        accessor: ManagedBlockchainClientTypes.Accessor? = nil
    )
    {
        self.accessor = accessor
    }
}

public struct GetMemberInput: Swift.Sendable {
    /// The unique identifier of the member.
    /// This member is required.
    public var memberId: Swift.String?
    /// The unique identifier of the network to which the member belongs.
    /// This member is required.
    public var networkId: Swift.String?

    public init(
        memberId: Swift.String? = nil,
        networkId: Swift.String? = nil
    )
    {
        self.memberId = memberId
        self.networkId = networkId
    }
}

extension ManagedBlockchainClientTypes {

    /// Attributes of Hyperledger Fabric for a member in a Managed Blockchain network using the Hyperledger Fabric framework.
    public struct MemberFabricAttributes: Swift.Sendable {
        /// The user name for the initial administrator user for the member.
        public var adminUsername: Swift.String?
        /// The endpoint used to access the member's certificate authority.
        public var caEndpoint: Swift.String?

        public init(
            adminUsername: Swift.String? = nil,
            caEndpoint: Swift.String? = nil
        )
        {
            self.adminUsername = adminUsername
            self.caEndpoint = caEndpoint
        }
    }
}

extension ManagedBlockchainClientTypes {

    /// Attributes relevant to a member for the blockchain framework that the Managed Blockchain network uses.
    public struct MemberFrameworkAttributes: Swift.Sendable {
        /// Attributes of Hyperledger Fabric relevant to a member on a Managed Blockchain network that uses Hyperledger Fabric.
        public var fabric: ManagedBlockchainClientTypes.MemberFabricAttributes?

        public init(
            fabric: ManagedBlockchainClientTypes.MemberFabricAttributes? = nil
        )
        {
            self.fabric = fabric
        }
    }
}

extension ManagedBlockchainClientTypes {

    public enum MemberStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case available
        case createFailed
        case creating
        case deleted
        case deleting
        case inaccessibleEncryptionKey
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [MemberStatus] {
            return [
                .available,
                .createFailed,
                .creating,
                .deleted,
                .deleting,
                .inaccessibleEncryptionKey,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .available: return "AVAILABLE"
            case .createFailed: return "CREATE_FAILED"
            case .creating: return "CREATING"
            case .deleted: return "DELETED"
            case .deleting: return "DELETING"
            case .inaccessibleEncryptionKey: return "INACCESSIBLE_ENCRYPTION_KEY"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ManagedBlockchainClientTypes {

    /// Member configuration properties. Applies only to Hyperledger Fabric.
    public struct Member: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the member. For more information about ARNs and their format, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
        public var arn: Swift.String?
        /// The date and time that the member was created.
        public var creationDate: Foundation.Date?
        /// An optional description for the member.
        public var description: Swift.String?
        /// Attributes relevant to a member for the blockchain framework that the Managed Blockchain network uses.
        public var frameworkAttributes: ManagedBlockchainClientTypes.MemberFrameworkAttributes?
        /// The unique identifier of the member.
        public var id: Swift.String?
        /// The Amazon Resource Name (ARN) of the customer managed key in Key Management Service (KMS) that the member uses for encryption at rest. If the value of this parameter is "AWS Owned KMS Key", the member uses an Amazon Web Services owned KMS key for encryption. This parameter is inherited by the nodes that this member owns. For more information, see [Encryption at Rest](https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/managed-blockchain-encryption-at-rest.html) in the Amazon Managed Blockchain Hyperledger Fabric Developer Guide.
        public var kmsKeyArn: Swift.String?
        /// Configuration properties for logging events associated with a member.
        public var logPublishingConfiguration: ManagedBlockchainClientTypes.MemberLogPublishingConfiguration?
        /// The name of the member.
        public var name: Swift.String?
        /// The unique identifier of the network to which the member belongs.
        public var networkId: Swift.String?
        /// The status of a member.
        ///
        /// * CREATING - The Amazon Web Services account is in the process of creating a member.
        ///
        /// * AVAILABLE - The member has been created and can participate in the network.
        ///
        /// * CREATE_FAILED - The Amazon Web Services account attempted to create a member and creation failed.
        ///
        /// * UPDATING - The member is in the process of being updated.
        ///
        /// * DELETING - The member and all associated resources are in the process of being deleted. Either the Amazon Web Services account that owns the member deleted it, or the member is being deleted as the result of an APPROVEDPROPOSAL to remove the member.
        ///
        /// * DELETED - The member can no longer participate on the network and all associated resources are deleted. Either the Amazon Web Services account that owns the member deleted it, or the member is being deleted as the result of an APPROVEDPROPOSAL to remove the member.
        ///
        /// * INACCESSIBLE_ENCRYPTION_KEY - The member is impaired and might not function as expected because it cannot access the specified customer managed key in KMS for encryption at rest. Either the KMS key was disabled or deleted, or the grants on the key were revoked. The effect of disabling or deleting a key or of revoking a grant isn't immediate. It might take some time for the member resource to discover that the key is inaccessible. When a resource is in this state, we recommend deleting and recreating the resource.
        public var status: ManagedBlockchainClientTypes.MemberStatus?
        /// Tags assigned to the member. Tags consist of a key and optional value. For more information about tags, see [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html) in the Amazon Managed Blockchain Ethereum Developer Guide, or [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html) in the Amazon Managed Blockchain Hyperledger Fabric Developer Guide.
        public var tags: [Swift.String: Swift.String]?

        public init(
            arn: Swift.String? = nil,
            creationDate: Foundation.Date? = nil,
            description: Swift.String? = nil,
            frameworkAttributes: ManagedBlockchainClientTypes.MemberFrameworkAttributes? = nil,
            id: Swift.String? = nil,
            kmsKeyArn: Swift.String? = nil,
            logPublishingConfiguration: ManagedBlockchainClientTypes.MemberLogPublishingConfiguration? = nil,
            name: Swift.String? = nil,
            networkId: Swift.String? = nil,
            status: ManagedBlockchainClientTypes.MemberStatus? = nil,
            tags: [Swift.String: Swift.String]? = nil
        )
        {
            self.arn = arn
            self.creationDate = creationDate
            self.description = description
            self.frameworkAttributes = frameworkAttributes
            self.id = id
            self.kmsKeyArn = kmsKeyArn
            self.logPublishingConfiguration = logPublishingConfiguration
            self.name = name
            self.networkId = networkId
            self.status = status
            self.tags = tags
        }
    }
}

public struct GetMemberOutput: Swift.Sendable {
    /// The properties of a member.
    public var member: ManagedBlockchainClientTypes.Member?

    public init(
        member: ManagedBlockchainClientTypes.Member? = nil
    )
    {
        self.member = member
    }
}

public struct GetNetworkInput: Swift.Sendable {
    /// The unique identifier of the network to get information about.
    /// This member is required.
    public var networkId: Swift.String?

    public init(
        networkId: Swift.String? = nil
    )
    {
        self.networkId = networkId
    }
}

extension ManagedBlockchainClientTypes {

    /// Attributes of Ethereum for a network.
    public struct NetworkEthereumAttributes: Swift.Sendable {
        /// The Ethereum CHAIN_ID associated with the Ethereum network. Chain IDs are as follows:
        ///
        /// * mainnet = 1
        public var chainId: Swift.String?

        public init(
            chainId: Swift.String? = nil
        )
        {
            self.chainId = chainId
        }
    }
}

extension ManagedBlockchainClientTypes {

    /// Attributes of Hyperledger Fabric for a network.
    public struct NetworkFabricAttributes: Swift.Sendable {
        /// The edition of Amazon Managed Blockchain that Hyperledger Fabric uses. For more information, see [Amazon Managed Blockchain Pricing](http://aws.amazon.com/managed-blockchain/pricing/).
        public var edition: ManagedBlockchainClientTypes.Edition?
        /// The endpoint of the ordering service for the network.
        public var orderingServiceEndpoint: Swift.String?

        public init(
            edition: ManagedBlockchainClientTypes.Edition? = nil,
            orderingServiceEndpoint: Swift.String? = nil
        )
        {
            self.edition = edition
            self.orderingServiceEndpoint = orderingServiceEndpoint
        }
    }
}

extension ManagedBlockchainClientTypes {

    /// Attributes relevant to the network for the blockchain framework that the network uses.
    public struct NetworkFrameworkAttributes: Swift.Sendable {
        /// Attributes of an Ethereum network for Managed Blockchain resources participating in an Ethereum network.
        public var ethereum: ManagedBlockchainClientTypes.NetworkEthereumAttributes?
        /// Attributes of Hyperledger Fabric for a Managed Blockchain network that uses Hyperledger Fabric.
        public var fabric: ManagedBlockchainClientTypes.NetworkFabricAttributes?

        public init(
            ethereum: ManagedBlockchainClientTypes.NetworkEthereumAttributes? = nil,
            fabric: ManagedBlockchainClientTypes.NetworkFabricAttributes? = nil
        )
        {
            self.ethereum = ethereum
            self.fabric = fabric
        }
    }
}

extension ManagedBlockchainClientTypes {

    public enum NetworkStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case available
        case createFailed
        case creating
        case deleted
        case deleting
        case sdkUnknown(Swift.String)

        public static var allCases: [NetworkStatus] {
            return [
                .available,
                .createFailed,
                .creating,
                .deleted,
                .deleting
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .available: return "AVAILABLE"
            case .createFailed: return "CREATE_FAILED"
            case .creating: return "CREATING"
            case .deleted: return "DELETED"
            case .deleting: return "DELETING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ManagedBlockchainClientTypes {

    /// Network configuration properties.
    public struct Network: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the network. For more information about ARNs and their format, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
        public var arn: Swift.String?
        /// The date and time that the network was created.
        public var creationDate: Foundation.Date?
        /// Attributes of the blockchain framework for the network.
        public var description: Swift.String?
        /// The blockchain framework that the network uses.
        public var framework: ManagedBlockchainClientTypes.Framework?
        /// Attributes of the blockchain framework that the network uses.
        public var frameworkAttributes: ManagedBlockchainClientTypes.NetworkFrameworkAttributes?
        /// The version of the blockchain framework that the network uses.
        public var frameworkVersion: Swift.String?
        /// The unique identifier of the network.
        public var id: Swift.String?
        /// The name of the network.
        public var name: Swift.String?
        /// The current status of the network.
        public var status: ManagedBlockchainClientTypes.NetworkStatus?
        /// Tags assigned to the network. Each tag consists of a key and optional value. For more information about tags, see [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html) in the Amazon Managed Blockchain Ethereum Developer Guide, or [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html) in the Amazon Managed Blockchain Hyperledger Fabric Developer Guide.
        public var tags: [Swift.String: Swift.String]?
        /// The voting rules that the network uses to decide if a proposal is accepted.
        public var votingPolicy: ManagedBlockchainClientTypes.VotingPolicy?
        /// The VPC endpoint service name of the VPC endpoint service of the network. Members use the VPC endpoint service name to create a VPC endpoint to access network resources.
        public var vpcEndpointServiceName: Swift.String?

        public init(
            arn: Swift.String? = nil,
            creationDate: Foundation.Date? = nil,
            description: Swift.String? = nil,
            framework: ManagedBlockchainClientTypes.Framework? = nil,
            frameworkAttributes: ManagedBlockchainClientTypes.NetworkFrameworkAttributes? = nil,
            frameworkVersion: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            status: ManagedBlockchainClientTypes.NetworkStatus? = nil,
            tags: [Swift.String: Swift.String]? = nil,
            votingPolicy: ManagedBlockchainClientTypes.VotingPolicy? = nil,
            vpcEndpointServiceName: Swift.String? = nil
        )
        {
            self.arn = arn
            self.creationDate = creationDate
            self.description = description
            self.framework = framework
            self.frameworkAttributes = frameworkAttributes
            self.frameworkVersion = frameworkVersion
            self.id = id
            self.name = name
            self.status = status
            self.tags = tags
            self.votingPolicy = votingPolicy
            self.vpcEndpointServiceName = vpcEndpointServiceName
        }
    }
}

public struct GetNetworkOutput: Swift.Sendable {
    /// An object containing network configuration parameters.
    public var network: ManagedBlockchainClientTypes.Network?

    public init(
        network: ManagedBlockchainClientTypes.Network? = nil
    )
    {
        self.network = network
    }
}

public struct GetNodeInput: Swift.Sendable {
    /// The unique identifier of the member that owns the node. Applies only to Hyperledger Fabric and is required for Hyperledger Fabric.
    public var memberId: Swift.String?
    /// The unique identifier of the network that the node is on.
    /// This member is required.
    public var networkId: Swift.String?
    /// The unique identifier of the node.
    /// This member is required.
    public var nodeId: Swift.String?

    public init(
        memberId: Swift.String? = nil,
        networkId: Swift.String? = nil,
        nodeId: Swift.String? = nil
    )
    {
        self.memberId = memberId
        self.networkId = networkId
        self.nodeId = nodeId
    }
}

extension ManagedBlockchainClientTypes {

    /// Attributes of an Ethereum node.
    public struct NodeEthereumAttributes: Swift.Sendable {
        /// The endpoint on which the Ethereum node listens to run Ethereum API methods over HTTP connections from a client. Use this endpoint in client code for smart contracts when using an HTTP connection. Connections to this endpoint are authenticated using [Signature Version 4](https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html).
        public var httpEndpoint: Swift.String?
        /// The endpoint on which the Ethereum node listens to run Ethereum JSON-RPC methods over WebSocket connections from a client. Use this endpoint in client code for smart contracts when using a WebSocket connection. Connections to this endpoint are authenticated using [Signature Version 4](https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html).
        public var webSocketEndpoint: Swift.String?

        public init(
            httpEndpoint: Swift.String? = nil,
            webSocketEndpoint: Swift.String? = nil
        )
        {
            self.httpEndpoint = httpEndpoint
            self.webSocketEndpoint = webSocketEndpoint
        }
    }
}

extension ManagedBlockchainClientTypes {

    /// Attributes of Hyperledger Fabric for a peer node on a Hyperledger Fabric network on Managed Blockchain.
    public struct NodeFabricAttributes: Swift.Sendable {
        /// The endpoint that identifies the peer node for all services except peer channel-based event services.
        public var peerEndpoint: Swift.String?
        /// The endpoint that identifies the peer node for peer channel-based event services.
        public var peerEventEndpoint: Swift.String?

        public init(
            peerEndpoint: Swift.String? = nil,
            peerEventEndpoint: Swift.String? = nil
        )
        {
            self.peerEndpoint = peerEndpoint
            self.peerEventEndpoint = peerEventEndpoint
        }
    }
}

extension ManagedBlockchainClientTypes {

    /// Attributes relevant to a node on a Managed Blockchain network for the blockchain framework that the network uses.
    public struct NodeFrameworkAttributes: Swift.Sendable {
        /// Attributes of Ethereum for a node on a Managed Blockchain network that uses Ethereum.
        public var ethereum: ManagedBlockchainClientTypes.NodeEthereumAttributes?
        /// Attributes of Hyperledger Fabric for a peer node on a Managed Blockchain network that uses Hyperledger Fabric.
        public var fabric: ManagedBlockchainClientTypes.NodeFabricAttributes?

        public init(
            ethereum: ManagedBlockchainClientTypes.NodeEthereumAttributes? = nil,
            fabric: ManagedBlockchainClientTypes.NodeFabricAttributes? = nil
        )
        {
            self.ethereum = ethereum
            self.fabric = fabric
        }
    }
}

extension ManagedBlockchainClientTypes {

    public enum NodeStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case available
        case createFailed
        case creating
        case deleted
        case deleting
        case failed
        case inaccessibleEncryptionKey
        case unhealthy
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [NodeStatus] {
            return [
                .available,
                .createFailed,
                .creating,
                .deleted,
                .deleting,
                .failed,
                .inaccessibleEncryptionKey,
                .unhealthy,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .available: return "AVAILABLE"
            case .createFailed: return "CREATE_FAILED"
            case .creating: return "CREATING"
            case .deleted: return "DELETED"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case .inaccessibleEncryptionKey: return "INACCESSIBLE_ENCRYPTION_KEY"
            case .unhealthy: return "UNHEALTHY"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ManagedBlockchainClientTypes {

    /// Configuration properties of a node.
    public struct Node: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the node. For more information about ARNs and their format, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
        public var arn: Swift.String?
        /// The Availability Zone in which the node exists. Required for Ethereum nodes.
        public var availabilityZone: Swift.String?
        /// The date and time that the node was created.
        public var creationDate: Foundation.Date?
        /// Attributes of the blockchain framework being used.
        public var frameworkAttributes: ManagedBlockchainClientTypes.NodeFrameworkAttributes?
        /// The unique identifier of the node.
        public var id: Swift.String?
        /// The instance type of the node.
        public var instanceType: Swift.String?
        /// The Amazon Resource Name (ARN) of the customer managed key in Key Management Service (KMS) that the node uses for encryption at rest. If the value of this parameter is "AWS Owned KMS Key", the node uses an Amazon Web Services owned KMS key for encryption. The node inherits this parameter from the member that it belongs to. For more information, see [Encryption at Rest](https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/managed-blockchain-encryption-at-rest.html) in the Amazon Managed Blockchain Hyperledger Fabric Developer Guide. Applies only to Hyperledger Fabric.
        public var kmsKeyArn: Swift.String?
        /// Configuration properties for logging events associated with a peer node on a Hyperledger Fabric network on Managed Blockchain.
        public var logPublishingConfiguration: ManagedBlockchainClientTypes.NodeLogPublishingConfiguration?
        /// The unique identifier of the member to which the node belongs. Applies only to Hyperledger Fabric.
        public var memberId: Swift.String?
        /// The unique identifier of the network that the node is on.
        public var networkId: Swift.String?
        /// The state database that the node uses. Values are LevelDB or CouchDB. Applies only to Hyperledger Fabric.
        public var stateDB: ManagedBlockchainClientTypes.StateDBType?
        /// The status of the node.
        ///
        /// * CREATING - The Amazon Web Services account is in the process of creating a node.
        ///
        /// * AVAILABLE - The node has been created and can participate in the network.
        ///
        /// * UNHEALTHY - The node is impaired and might not function as expected. Amazon Managed Blockchain automatically finds nodes in this state and tries to recover them. If a node is recoverable, it returns to AVAILABLE. Otherwise, it moves to FAILED status.
        ///
        /// * CREATE_FAILED - The Amazon Web Services account attempted to create a node and creation failed.
        ///
        /// * UPDATING - The node is in the process of being updated.
        ///
        /// * DELETING - The node is in the process of being deleted.
        ///
        /// * DELETED - The node can no longer participate on the network.
        ///
        /// * FAILED - The node is no longer functional, cannot be recovered, and must be deleted.
        ///
        /// * INACCESSIBLE_ENCRYPTION_KEY - The node is impaired and might not function as expected because it cannot access the specified customer managed key in KMS for encryption at rest. Either the KMS key was disabled or deleted, or the grants on the key were revoked. The effect of disabling or deleting a key or of revoking a grant isn't immediate. It might take some time for the node resource to discover that the key is inaccessible. When a resource is in this state, we recommend deleting and recreating the resource.
        public var status: ManagedBlockchainClientTypes.NodeStatus?
        /// Tags assigned to the node. Each tag consists of a key and optional value. For more information about tags, see [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html) in the Amazon Managed Blockchain Ethereum Developer Guide, or [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html) in the Amazon Managed Blockchain Hyperledger Fabric Developer Guide.
        public var tags: [Swift.String: Swift.String]?

        public init(
            arn: Swift.String? = nil,
            availabilityZone: Swift.String? = nil,
            creationDate: Foundation.Date? = nil,
            frameworkAttributes: ManagedBlockchainClientTypes.NodeFrameworkAttributes? = nil,
            id: Swift.String? = nil,
            instanceType: Swift.String? = nil,
            kmsKeyArn: Swift.String? = nil,
            logPublishingConfiguration: ManagedBlockchainClientTypes.NodeLogPublishingConfiguration? = nil,
            memberId: Swift.String? = nil,
            networkId: Swift.String? = nil,
            stateDB: ManagedBlockchainClientTypes.StateDBType? = nil,
            status: ManagedBlockchainClientTypes.NodeStatus? = nil,
            tags: [Swift.String: Swift.String]? = nil
        )
        {
            self.arn = arn
            self.availabilityZone = availabilityZone
            self.creationDate = creationDate
            self.frameworkAttributes = frameworkAttributes
            self.id = id
            self.instanceType = instanceType
            self.kmsKeyArn = kmsKeyArn
            self.logPublishingConfiguration = logPublishingConfiguration
            self.memberId = memberId
            self.networkId = networkId
            self.stateDB = stateDB
            self.status = status
            self.tags = tags
        }
    }
}

public struct GetNodeOutput: Swift.Sendable {
    /// Properties of the node configuration.
    public var node: ManagedBlockchainClientTypes.Node?

    public init(
        node: ManagedBlockchainClientTypes.Node? = nil
    )
    {
        self.node = node
    }
}

public struct GetProposalInput: Swift.Sendable {
    /// The unique identifier of the network for which the proposal is made.
    /// This member is required.
    public var networkId: Swift.String?
    /// The unique identifier of the proposal.
    /// This member is required.
    public var proposalId: Swift.String?

    public init(
        networkId: Swift.String? = nil,
        proposalId: Swift.String? = nil
    )
    {
        self.networkId = networkId
        self.proposalId = proposalId
    }
}

extension ManagedBlockchainClientTypes {

    public enum ProposalStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case actionFailed
        case approved
        case expired
        case inProgress
        case rejected
        case sdkUnknown(Swift.String)

        public static var allCases: [ProposalStatus] {
            return [
                .actionFailed,
                .approved,
                .expired,
                .inProgress,
                .rejected
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .actionFailed: return "ACTION_FAILED"
            case .approved: return "APPROVED"
            case .expired: return "EXPIRED"
            case .inProgress: return "IN_PROGRESS"
            case .rejected: return "REJECTED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ManagedBlockchainClientTypes {

    /// Properties of a proposal on a Managed Blockchain network. Applies only to Hyperledger Fabric.
    public struct Proposal: Swift.Sendable {
        /// The actions to perform on the network if the proposal is APPROVED.
        public var actions: ManagedBlockchainClientTypes.ProposalActions?
        /// The Amazon Resource Name (ARN) of the proposal. For more information about ARNs and their format, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
        public var arn: Swift.String?
        /// The date and time that the proposal was created.
        public var creationDate: Foundation.Date?
        /// The description of the proposal.
        public var description: Swift.String?
        /// The date and time that the proposal expires. This is the CreationDate plus the ProposalDurationInHours that is specified in the ProposalThresholdPolicy. After this date and time, if members haven't cast enough votes to determine the outcome according to the voting policy, the proposal is EXPIRED and Actions aren't carried out.
        public var expirationDate: Foundation.Date?
        /// The unique identifier of the network for which the proposal is made.
        public var networkId: Swift.String?
        /// The current total of NO votes cast on the proposal by members.
        public var noVoteCount: Swift.Int?
        /// The number of votes remaining to be cast on the proposal by members. In other words, the number of members minus the sum of YES votes and NO votes.
        public var outstandingVoteCount: Swift.Int?
        /// The unique identifier of the proposal.
        public var proposalId: Swift.String?
        /// The unique identifier of the member that created the proposal.
        public var proposedByMemberId: Swift.String?
        /// The name of the member that created the proposal.
        public var proposedByMemberName: Swift.String?
        /// The status of the proposal. Values are as follows:
        ///
        /// * IN_PROGRESS - The proposal is active and open for member voting.
        ///
        /// * APPROVED - The proposal was approved with sufficient YES votes among members according to the VotingPolicy specified for the Network. The specified proposal actions are carried out.
        ///
        /// * REJECTED - The proposal was rejected with insufficient YES votes among members according to the VotingPolicy specified for the Network. The specified ProposalActions aren't carried out.
        ///
        /// * EXPIRED - Members didn't cast the number of votes required to determine the proposal outcome before the proposal expired. The specified ProposalActions aren't carried out.
        ///
        /// * ACTION_FAILED - One or more of the specified ProposalActions in a proposal that was approved couldn't be completed because of an error. The ACTION_FAILED status occurs even if only one ProposalAction fails and other actions are successful.
        public var status: ManagedBlockchainClientTypes.ProposalStatus?
        /// Tags assigned to the proposal. Each tag consists of a key and optional value. For more information about tags, see [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html) in the Amazon Managed Blockchain Ethereum Developer Guide, or [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html) in the Amazon Managed Blockchain Hyperledger Fabric Developer Guide.
        public var tags: [Swift.String: Swift.String]?
        /// The current total of YES votes cast on the proposal by members.
        public var yesVoteCount: Swift.Int?

        public init(
            actions: ManagedBlockchainClientTypes.ProposalActions? = nil,
            arn: Swift.String? = nil,
            creationDate: Foundation.Date? = nil,
            description: Swift.String? = nil,
            expirationDate: Foundation.Date? = nil,
            networkId: Swift.String? = nil,
            noVoteCount: Swift.Int? = nil,
            outstandingVoteCount: Swift.Int? = nil,
            proposalId: Swift.String? = nil,
            proposedByMemberId: Swift.String? = nil,
            proposedByMemberName: Swift.String? = nil,
            status: ManagedBlockchainClientTypes.ProposalStatus? = nil,
            tags: [Swift.String: Swift.String]? = nil,
            yesVoteCount: Swift.Int? = nil
        )
        {
            self.actions = actions
            self.arn = arn
            self.creationDate = creationDate
            self.description = description
            self.expirationDate = expirationDate
            self.networkId = networkId
            self.noVoteCount = noVoteCount
            self.outstandingVoteCount = outstandingVoteCount
            self.proposalId = proposalId
            self.proposedByMemberId = proposedByMemberId
            self.proposedByMemberName = proposedByMemberName
            self.status = status
            self.tags = tags
            self.yesVoteCount = yesVoteCount
        }
    }
}

public struct GetProposalOutput: Swift.Sendable {
    /// Information about a proposal.
    public var proposal: ManagedBlockchainClientTypes.Proposal?

    public init(
        proposal: ManagedBlockchainClientTypes.Proposal? = nil
    )
    {
        self.proposal = proposal
    }
}

///
public struct IllegalActionException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "IllegalActionException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ManagedBlockchainClientTypes {

    /// A summary of network configuration properties.
    public struct NetworkSummary: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the network. For more information about ARNs and their format, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
        public var arn: Swift.String?
        /// The date and time that the network was created.
        public var creationDate: Foundation.Date?
        /// An optional description of the network.
        public var description: Swift.String?
        /// The blockchain framework that the network uses.
        public var framework: ManagedBlockchainClientTypes.Framework?
        /// The version of the blockchain framework that the network uses.
        public var frameworkVersion: Swift.String?
        /// The unique identifier of the network.
        public var id: Swift.String?
        /// The name of the network.
        public var name: Swift.String?
        /// The current status of the network.
        public var status: ManagedBlockchainClientTypes.NetworkStatus?

        public init(
            arn: Swift.String? = nil,
            creationDate: Foundation.Date? = nil,
            description: Swift.String? = nil,
            framework: ManagedBlockchainClientTypes.Framework? = nil,
            frameworkVersion: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            status: ManagedBlockchainClientTypes.NetworkStatus? = nil
        )
        {
            self.arn = arn
            self.creationDate = creationDate
            self.description = description
            self.framework = framework
            self.frameworkVersion = frameworkVersion
            self.id = id
            self.name = name
            self.status = status
        }
    }
}

extension ManagedBlockchainClientTypes {

    public enum InvitationStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accepted
        case accepting
        case expired
        case pending
        case rejected
        case sdkUnknown(Swift.String)

        public static var allCases: [InvitationStatus] {
            return [
                .accepted,
                .accepting,
                .expired,
                .pending,
                .rejected
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accepted: return "ACCEPTED"
            case .accepting: return "ACCEPTING"
            case .expired: return "EXPIRED"
            case .pending: return "PENDING"
            case .rejected: return "REJECTED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ManagedBlockchainClientTypes {

    /// An invitation to an Amazon Web Services account to create a member and join the network. Applies only to Hyperledger Fabric.
    public struct Invitation: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the invitation. For more information about ARNs and their format, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
        public var arn: Swift.String?
        /// The date and time that the invitation was created.
        public var creationDate: Foundation.Date?
        /// The date and time that the invitation expires. This is the CreationDate plus the ProposalDurationInHours that is specified in the ProposalThresholdPolicy. After this date and time, the invitee can no longer create a member and join the network using this InvitationId.
        public var expirationDate: Foundation.Date?
        /// The unique identifier for the invitation.
        public var invitationId: Swift.String?
        /// A summary of network configuration properties.
        public var networkSummary: ManagedBlockchainClientTypes.NetworkSummary?
        /// The status of the invitation:
        ///
        /// * PENDING - The invitee hasn't created a member to join the network, and the invitation hasn't yet expired.
        ///
        /// * ACCEPTING - The invitee has begun creating a member, and creation hasn't yet completed.
        ///
        /// * ACCEPTED - The invitee created a member and joined the network using the InvitationID.
        ///
        /// * REJECTED - The invitee rejected the invitation.
        ///
        /// * EXPIRED - The invitee neither created a member nor rejected the invitation before the ExpirationDate.
        public var status: ManagedBlockchainClientTypes.InvitationStatus?

        public init(
            arn: Swift.String? = nil,
            creationDate: Foundation.Date? = nil,
            expirationDate: Foundation.Date? = nil,
            invitationId: Swift.String? = nil,
            networkSummary: ManagedBlockchainClientTypes.NetworkSummary? = nil,
            status: ManagedBlockchainClientTypes.InvitationStatus? = nil
        )
        {
            self.arn = arn
            self.creationDate = creationDate
            self.expirationDate = expirationDate
            self.invitationId = invitationId
            self.networkSummary = networkSummary
            self.status = status
        }
    }
}

public struct ListAccessorsInput: Swift.Sendable {
    /// The maximum number of accessors to list.
    public var maxResults: Swift.Int?
    /// The blockchain network that the Accessor token is created for. Use the value ETHEREUM_MAINNET_AND_GOERLI for all existing Accessors tokens that were created before the networkType property was introduced.
    public var networkType: ManagedBlockchainClientTypes.AccessorNetworkType?
    /// The pagination token that indicates the next set of results to retrieve.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        networkType: ManagedBlockchainClientTypes.AccessorNetworkType? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.networkType = networkType
        self.nextToken = nextToken
    }
}

public struct ListAccessorsOutput: Swift.Sendable {
    /// An array of AccessorSummary objects that contain configuration properties for each accessor.
    public var accessors: [ManagedBlockchainClientTypes.AccessorSummary]?
    /// The pagination token that indicates the next set of results to retrieve.
    public var nextToken: Swift.String?

    public init(
        accessors: [ManagedBlockchainClientTypes.AccessorSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.accessors = accessors
        self.nextToken = nextToken
    }
}

public struct ListInvitationsInput: Swift.Sendable {
    /// The maximum number of invitations to return.
    public var maxResults: Swift.Int?
    /// The pagination token that indicates the next set of results to retrieve.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListInvitationsOutput: Swift.Sendable {
    /// The invitations for the network.
    public var invitations: [ManagedBlockchainClientTypes.Invitation]?
    /// The pagination token that indicates the next set of results to retrieve.
    public var nextToken: Swift.String?

    public init(
        invitations: [ManagedBlockchainClientTypes.Invitation]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.invitations = invitations
        self.nextToken = nextToken
    }
}

public struct ListMembersInput: Swift.Sendable {
    /// An optional Boolean value. If provided, the request is limited either to members that the current Amazon Web Services account owns (true) or that other Amazon Web Services accountsn own (false). If omitted, all members are listed.
    public var isOwned: Swift.Bool?
    /// The maximum number of members to return in the request.
    public var maxResults: Swift.Int?
    /// The optional name of the member to list.
    public var name: Swift.String?
    /// The unique identifier of the network for which to list members.
    /// This member is required.
    public var networkId: Swift.String?
    /// The pagination token that indicates the next set of results to retrieve.
    public var nextToken: Swift.String?
    /// An optional status specifier. If provided, only members currently in this status are listed.
    public var status: ManagedBlockchainClientTypes.MemberStatus?

    public init(
        isOwned: Swift.Bool? = nil,
        maxResults: Swift.Int? = nil,
        name: Swift.String? = nil,
        networkId: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        status: ManagedBlockchainClientTypes.MemberStatus? = nil
    )
    {
        self.isOwned = isOwned
        self.maxResults = maxResults
        self.name = name
        self.networkId = networkId
        self.nextToken = nextToken
        self.status = status
    }
}

extension ManagedBlockchainClientTypes {

    /// A summary of configuration properties for a member. Applies only to Hyperledger Fabric.
    public struct MemberSummary: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the member. For more information about ARNs and their format, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
        public var arn: Swift.String?
        /// The date and time that the member was created.
        public var creationDate: Foundation.Date?
        /// An optional description of the member.
        public var description: Swift.String?
        /// The unique identifier of the member.
        public var id: Swift.String?
        /// An indicator of whether the member is owned by your Amazon Web Services account or a different Amazon Web Services account.
        public var isOwned: Swift.Bool?
        /// The name of the member.
        public var name: Swift.String?
        /// The status of the member.
        ///
        /// * CREATING - The Amazon Web Services account is in the process of creating a member.
        ///
        /// * AVAILABLE - The member has been created and can participate in the network.
        ///
        /// * CREATE_FAILED - The Amazon Web Services account attempted to create a member and creation failed.
        ///
        /// * UPDATING - The member is in the process of being updated.
        ///
        /// * DELETING - The member and all associated resources are in the process of being deleted. Either the Amazon Web Services account that owns the member deleted it, or the member is being deleted as the result of an APPROVEDPROPOSAL to remove the member.
        ///
        /// * DELETED - The member can no longer participate on the network and all associated resources are deleted. Either the Amazon Web Services account that owns the member deleted it, or the member is being deleted as the result of an APPROVEDPROPOSAL to remove the member.
        ///
        /// * INACCESSIBLE_ENCRYPTION_KEY - The member is impaired and might not function as expected because it cannot access the specified customer managed key in Key Management Service (KMS) for encryption at rest. Either the KMS key was disabled or deleted, or the grants on the key were revoked. The effect of disabling or deleting a key or of revoking a grant isn't immediate. It might take some time for the member resource to discover that the key is inaccessible. When a resource is in this state, we recommend deleting and recreating the resource.
        public var status: ManagedBlockchainClientTypes.MemberStatus?

        public init(
            arn: Swift.String? = nil,
            creationDate: Foundation.Date? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            isOwned: Swift.Bool? = nil,
            name: Swift.String? = nil,
            status: ManagedBlockchainClientTypes.MemberStatus? = nil
        )
        {
            self.arn = arn
            self.creationDate = creationDate
            self.description = description
            self.id = id
            self.isOwned = isOwned
            self.name = name
            self.status = status
        }
    }
}

public struct ListMembersOutput: Swift.Sendable {
    /// An array of MemberSummary objects. Each object contains details about a network member.
    public var members: [ManagedBlockchainClientTypes.MemberSummary]?
    /// The pagination token that indicates the next set of results to retrieve.
    public var nextToken: Swift.String?

    public init(
        members: [ManagedBlockchainClientTypes.MemberSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.members = members
        self.nextToken = nextToken
    }
}

public struct ListNetworksInput: Swift.Sendable {
    /// An optional framework specifier. If provided, only networks of this framework type are listed.
    public var framework: ManagedBlockchainClientTypes.Framework?
    /// The maximum number of networks to list.
    public var maxResults: Swift.Int?
    /// The name of the network.
    public var name: Swift.String?
    /// The pagination token that indicates the next set of results to retrieve.
    public var nextToken: Swift.String?
    /// An optional status specifier. If provided, only networks currently in this status are listed. Applies only to Hyperledger Fabric.
    public var status: ManagedBlockchainClientTypes.NetworkStatus?

    public init(
        framework: ManagedBlockchainClientTypes.Framework? = nil,
        maxResults: Swift.Int? = nil,
        name: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        status: ManagedBlockchainClientTypes.NetworkStatus? = nil
    )
    {
        self.framework = framework
        self.maxResults = maxResults
        self.name = name
        self.nextToken = nextToken
        self.status = status
    }
}

public struct ListNetworksOutput: Swift.Sendable {
    /// An array of NetworkSummary objects that contain configuration properties for each network.
    public var networks: [ManagedBlockchainClientTypes.NetworkSummary]?
    /// The pagination token that indicates the next set of results to retrieve.
    public var nextToken: Swift.String?

    public init(
        networks: [ManagedBlockchainClientTypes.NetworkSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.networks = networks
        self.nextToken = nextToken
    }
}

public struct ListNodesInput: Swift.Sendable {
    /// The maximum number of nodes to list.
    public var maxResults: Swift.Int?
    /// The unique identifier of the member who owns the nodes to list. Applies only to Hyperledger Fabric and is required for Hyperledger Fabric.
    public var memberId: Swift.String?
    /// The unique identifier of the network for which to list nodes.
    /// This member is required.
    public var networkId: Swift.String?
    /// The pagination token that indicates the next set of results to retrieve.
    public var nextToken: Swift.String?
    /// An optional status specifier. If provided, only nodes currently in this status are listed.
    public var status: ManagedBlockchainClientTypes.NodeStatus?

    public init(
        maxResults: Swift.Int? = nil,
        memberId: Swift.String? = nil,
        networkId: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        status: ManagedBlockchainClientTypes.NodeStatus? = nil
    )
    {
        self.maxResults = maxResults
        self.memberId = memberId
        self.networkId = networkId
        self.nextToken = nextToken
        self.status = status
    }
}

extension ManagedBlockchainClientTypes {

    /// A summary of configuration properties for a node.
    public struct NodeSummary: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the node. For more information about ARNs and their format, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
        public var arn: Swift.String?
        /// The Availability Zone in which the node exists.
        public var availabilityZone: Swift.String?
        /// The date and time that the node was created.
        public var creationDate: Foundation.Date?
        /// The unique identifier of the node.
        public var id: Swift.String?
        /// The EC2 instance type for the node.
        public var instanceType: Swift.String?
        /// The status of the node.
        public var status: ManagedBlockchainClientTypes.NodeStatus?

        public init(
            arn: Swift.String? = nil,
            availabilityZone: Swift.String? = nil,
            creationDate: Foundation.Date? = nil,
            id: Swift.String? = nil,
            instanceType: Swift.String? = nil,
            status: ManagedBlockchainClientTypes.NodeStatus? = nil
        )
        {
            self.arn = arn
            self.availabilityZone = availabilityZone
            self.creationDate = creationDate
            self.id = id
            self.instanceType = instanceType
            self.status = status
        }
    }
}

public struct ListNodesOutput: Swift.Sendable {
    /// The pagination token that indicates the next set of results to retrieve.
    public var nextToken: Swift.String?
    /// An array of NodeSummary objects that contain configuration properties for each node.
    public var nodes: [ManagedBlockchainClientTypes.NodeSummary]?

    public init(
        nextToken: Swift.String? = nil,
        nodes: [ManagedBlockchainClientTypes.NodeSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.nodes = nodes
    }
}

public struct ListProposalsInput: Swift.Sendable {
    /// The maximum number of proposals to return.
    public var maxResults: Swift.Int?
    /// The unique identifier of the network.
    /// This member is required.
    public var networkId: Swift.String?
    /// The pagination token that indicates the next set of results to retrieve.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        networkId: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.networkId = networkId
        self.nextToken = nextToken
    }
}

extension ManagedBlockchainClientTypes {

    /// Properties of a proposal. Applies only to Hyperledger Fabric.
    public struct ProposalSummary: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the proposal. For more information about ARNs and their format, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
        public var arn: Swift.String?
        /// The date and time that the proposal was created.
        public var creationDate: Foundation.Date?
        /// The description of the proposal.
        public var description: Swift.String?
        /// The date and time that the proposal expires. This is the CreationDate plus the ProposalDurationInHours that is specified in the ProposalThresholdPolicy. After this date and time, if members haven't cast enough votes to determine the outcome according to the voting policy, the proposal is EXPIRED and Actions aren't carried out.
        public var expirationDate: Foundation.Date?
        /// The unique identifier of the proposal.
        public var proposalId: Swift.String?
        /// The unique identifier of the member that created the proposal.
        public var proposedByMemberId: Swift.String?
        /// The name of the member that created the proposal.
        public var proposedByMemberName: Swift.String?
        /// The status of the proposal. Values are as follows:
        ///
        /// * IN_PROGRESS - The proposal is active and open for member voting.
        ///
        /// * APPROVED - The proposal was approved with sufficient YES votes among members according to the VotingPolicy specified for the Network. The specified proposal actions are carried out.
        ///
        /// * REJECTED - The proposal was rejected with insufficient YES votes among members according to the VotingPolicy specified for the Network. The specified ProposalActions aren't carried out.
        ///
        /// * EXPIRED - Members didn't cast the number of votes required to determine the proposal outcome before the proposal expired. The specified ProposalActions aren't carried out.
        ///
        /// * ACTION_FAILED - One or more of the specified ProposalActions in a proposal that was approved couldn't be completed because of an error.
        public var status: ManagedBlockchainClientTypes.ProposalStatus?

        public init(
            arn: Swift.String? = nil,
            creationDate: Foundation.Date? = nil,
            description: Swift.String? = nil,
            expirationDate: Foundation.Date? = nil,
            proposalId: Swift.String? = nil,
            proposedByMemberId: Swift.String? = nil,
            proposedByMemberName: Swift.String? = nil,
            status: ManagedBlockchainClientTypes.ProposalStatus? = nil
        )
        {
            self.arn = arn
            self.creationDate = creationDate
            self.description = description
            self.expirationDate = expirationDate
            self.proposalId = proposalId
            self.proposedByMemberId = proposedByMemberId
            self.proposedByMemberName = proposedByMemberName
            self.status = status
        }
    }
}

public struct ListProposalsOutput: Swift.Sendable {
    /// The pagination token that indicates the next set of results to retrieve.
    public var nextToken: Swift.String?
    /// The summary of each proposal made on the network.
    public var proposals: [ManagedBlockchainClientTypes.ProposalSummary]?

    public init(
        nextToken: Swift.String? = nil,
        proposals: [ManagedBlockchainClientTypes.ProposalSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.proposals = proposals
    }
}

public struct ListProposalVotesInput: Swift.Sendable {
    /// The maximum number of votes to return.
    public var maxResults: Swift.Int?
    /// The unique identifier of the network.
    /// This member is required.
    public var networkId: Swift.String?
    /// The pagination token that indicates the next set of results to retrieve.
    public var nextToken: Swift.String?
    /// The unique identifier of the proposal.
    /// This member is required.
    public var proposalId: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        networkId: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        proposalId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.networkId = networkId
        self.nextToken = nextToken
        self.proposalId = proposalId
    }
}

extension ManagedBlockchainClientTypes {

    public enum VoteValue: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case no
        case yes
        case sdkUnknown(Swift.String)

        public static var allCases: [VoteValue] {
            return [
                .no,
                .yes
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .no: return "NO"
            case .yes: return "YES"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ManagedBlockchainClientTypes {

    /// Properties of an individual vote that a member cast for a proposal. Applies only to Hyperledger Fabric.
    public struct VoteSummary: Swift.Sendable {
        /// The unique identifier of the member that cast the vote.
        public var memberId: Swift.String?
        /// The name of the member that cast the vote.
        public var memberName: Swift.String?
        /// The vote value, either YES or NO.
        public var vote: ManagedBlockchainClientTypes.VoteValue?

        public init(
            memberId: Swift.String? = nil,
            memberName: Swift.String? = nil,
            vote: ManagedBlockchainClientTypes.VoteValue? = nil
        )
        {
            self.memberId = memberId
            self.memberName = memberName
            self.vote = vote
        }
    }
}

public struct ListProposalVotesOutput: Swift.Sendable {
    /// The pagination token that indicates the next set of results to retrieve.
    public var nextToken: Swift.String?
    /// The list of votes.
    public var proposalVotes: [ManagedBlockchainClientTypes.VoteSummary]?

    public init(
        nextToken: Swift.String? = nil,
        proposalVotes: [ManagedBlockchainClientTypes.VoteSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.proposalVotes = proposalVotes
    }
}

public struct ListTagsForResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the resource. For more information about ARNs and their format, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct ListTagsForResourceOutput: Swift.Sendable {
    /// The tags assigned to the resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

public struct RejectInvitationInput: Swift.Sendable {
    /// The unique identifier of the invitation to reject.
    /// This member is required.
    public var invitationId: Swift.String?

    public init(
        invitationId: Swift.String? = nil
    )
    {
        self.invitationId = invitationId
    }
}

public struct RejectInvitationOutput: Swift.Sendable {

    public init() { }
}

public struct TagResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the resource. For more information about ARNs and their format, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The tags to assign to the specified resource. Tag values can be empty, for example, "MyTagKey" : "". You can specify multiple key-value pairs in a single request, with an overall maximum of 50 tags added to each resource.
    /// This member is required.
    public var tags: [Swift.String: Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

public struct TagResourceOutput: Swift.Sendable {

    public init() { }
}

public struct UntagResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the resource. For more information about ARNs and their format, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The tag keys.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

public struct UntagResourceOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateMemberInput: Swift.Sendable {
    /// Configuration properties for publishing to Amazon CloudWatch Logs.
    public var logPublishingConfiguration: ManagedBlockchainClientTypes.MemberLogPublishingConfiguration?
    /// The unique identifier of the member.
    /// This member is required.
    public var memberId: Swift.String?
    /// The unique identifier of the Managed Blockchain network to which the member belongs.
    /// This member is required.
    public var networkId: Swift.String?

    public init(
        logPublishingConfiguration: ManagedBlockchainClientTypes.MemberLogPublishingConfiguration? = nil,
        memberId: Swift.String? = nil,
        networkId: Swift.String? = nil
    )
    {
        self.logPublishingConfiguration = logPublishingConfiguration
        self.memberId = memberId
        self.networkId = networkId
    }
}

public struct UpdateMemberOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateNodeInput: Swift.Sendable {
    /// Configuration properties for publishing to Amazon CloudWatch Logs.
    public var logPublishingConfiguration: ManagedBlockchainClientTypes.NodeLogPublishingConfiguration?
    /// The unique identifier of the member that owns the node. Applies only to Hyperledger Fabric.
    public var memberId: Swift.String?
    /// The unique identifier of the network that the node is on.
    /// This member is required.
    public var networkId: Swift.String?
    /// The unique identifier of the node.
    /// This member is required.
    public var nodeId: Swift.String?

    public init(
        logPublishingConfiguration: ManagedBlockchainClientTypes.NodeLogPublishingConfiguration? = nil,
        memberId: Swift.String? = nil,
        networkId: Swift.String? = nil,
        nodeId: Swift.String? = nil
    )
    {
        self.logPublishingConfiguration = logPublishingConfiguration
        self.memberId = memberId
        self.networkId = networkId
        self.nodeId = nodeId
    }
}

public struct UpdateNodeOutput: Swift.Sendable {

    public init() { }
}

public struct VoteOnProposalInput: Swift.Sendable {
    /// The unique identifier of the network.
    /// This member is required.
    public var networkId: Swift.String?
    /// The unique identifier of the proposal.
    /// This member is required.
    public var proposalId: Swift.String?
    /// The value of the vote.
    /// This member is required.
    public var vote: ManagedBlockchainClientTypes.VoteValue?
    /// The unique identifier of the member casting the vote.
    /// This member is required.
    public var voterMemberId: Swift.String?

    public init(
        networkId: Swift.String? = nil,
        proposalId: Swift.String? = nil,
        vote: ManagedBlockchainClientTypes.VoteValue? = nil,
        voterMemberId: Swift.String? = nil
    )
    {
        self.networkId = networkId
        self.proposalId = proposalId
        self.vote = vote
        self.voterMemberId = voterMemberId
    }
}

public struct VoteOnProposalOutput: Swift.Sendable {

    public init() { }
}

extension CreateAccessorInput {

    static func urlPathProvider(_ value: CreateAccessorInput) -> Swift.String? {
        return "/accessors"
    }
}

extension CreateMemberInput {

    static func urlPathProvider(_ value: CreateMemberInput) -> Swift.String? {
        guard let networkId = value.networkId else {
            return nil
        }
        return "/networks/\(networkId.urlPercentEncoding())/members"
    }
}

extension CreateNetworkInput {

    static func urlPathProvider(_ value: CreateNetworkInput) -> Swift.String? {
        return "/networks"
    }
}

extension CreateNodeInput {

    static func urlPathProvider(_ value: CreateNodeInput) -> Swift.String? {
        guard let networkId = value.networkId else {
            return nil
        }
        return "/networks/\(networkId.urlPercentEncoding())/nodes"
    }
}

extension CreateProposalInput {

    static func urlPathProvider(_ value: CreateProposalInput) -> Swift.String? {
        guard let networkId = value.networkId else {
            return nil
        }
        return "/networks/\(networkId.urlPercentEncoding())/proposals"
    }
}

extension DeleteAccessorInput {

    static func urlPathProvider(_ value: DeleteAccessorInput) -> Swift.String? {
        guard let accessorId = value.accessorId else {
            return nil
        }
        return "/accessors/\(accessorId.urlPercentEncoding())"
    }
}

extension DeleteMemberInput {

    static func urlPathProvider(_ value: DeleteMemberInput) -> Swift.String? {
        guard let networkId = value.networkId else {
            return nil
        }
        guard let memberId = value.memberId else {
            return nil
        }
        return "/networks/\(networkId.urlPercentEncoding())/members/\(memberId.urlPercentEncoding())"
    }
}

extension DeleteNodeInput {

    static func urlPathProvider(_ value: DeleteNodeInput) -> Swift.String? {
        guard let networkId = value.networkId else {
            return nil
        }
        guard let nodeId = value.nodeId else {
            return nil
        }
        return "/networks/\(networkId.urlPercentEncoding())/nodes/\(nodeId.urlPercentEncoding())"
    }
}

extension DeleteNodeInput {

    static func queryItemProvider(_ value: DeleteNodeInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let memberId = value.memberId {
            let memberIdQueryItem = Smithy.URIQueryItem(name: "memberId".urlPercentEncoding(), value: Swift.String(memberId).urlPercentEncoding())
            items.append(memberIdQueryItem)
        }
        return items
    }
}

extension GetAccessorInput {

    static func urlPathProvider(_ value: GetAccessorInput) -> Swift.String? {
        guard let accessorId = value.accessorId else {
            return nil
        }
        return "/accessors/\(accessorId.urlPercentEncoding())"
    }
}

extension GetMemberInput {

    static func urlPathProvider(_ value: GetMemberInput) -> Swift.String? {
        guard let networkId = value.networkId else {
            return nil
        }
        guard let memberId = value.memberId else {
            return nil
        }
        return "/networks/\(networkId.urlPercentEncoding())/members/\(memberId.urlPercentEncoding())"
    }
}

extension GetNetworkInput {

    static func urlPathProvider(_ value: GetNetworkInput) -> Swift.String? {
        guard let networkId = value.networkId else {
            return nil
        }
        return "/networks/\(networkId.urlPercentEncoding())"
    }
}

extension GetNodeInput {

    static func urlPathProvider(_ value: GetNodeInput) -> Swift.String? {
        guard let networkId = value.networkId else {
            return nil
        }
        guard let nodeId = value.nodeId else {
            return nil
        }
        return "/networks/\(networkId.urlPercentEncoding())/nodes/\(nodeId.urlPercentEncoding())"
    }
}

extension GetNodeInput {

    static func queryItemProvider(_ value: GetNodeInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let memberId = value.memberId {
            let memberIdQueryItem = Smithy.URIQueryItem(name: "memberId".urlPercentEncoding(), value: Swift.String(memberId).urlPercentEncoding())
            items.append(memberIdQueryItem)
        }
        return items
    }
}

extension GetProposalInput {

    static func urlPathProvider(_ value: GetProposalInput) -> Swift.String? {
        guard let networkId = value.networkId else {
            return nil
        }
        guard let proposalId = value.proposalId else {
            return nil
        }
        return "/networks/\(networkId.urlPercentEncoding())/proposals/\(proposalId.urlPercentEncoding())"
    }
}

extension ListAccessorsInput {

    static func urlPathProvider(_ value: ListAccessorsInput) -> Swift.String? {
        return "/accessors"
    }
}

extension ListAccessorsInput {

    static func queryItemProvider(_ value: ListAccessorsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let networkType = value.networkType {
            let networkTypeQueryItem = Smithy.URIQueryItem(name: "networkType".urlPercentEncoding(), value: Swift.String(networkType.rawValue).urlPercentEncoding())
            items.append(networkTypeQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListInvitationsInput {

    static func urlPathProvider(_ value: ListInvitationsInput) -> Swift.String? {
        return "/invitations"
    }
}

extension ListInvitationsInput {

    static func queryItemProvider(_ value: ListInvitationsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListMembersInput {

    static func urlPathProvider(_ value: ListMembersInput) -> Swift.String? {
        guard let networkId = value.networkId else {
            return nil
        }
        return "/networks/\(networkId.urlPercentEncoding())/members"
    }
}

extension ListMembersInput {

    static func queryItemProvider(_ value: ListMembersInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let status = value.status {
            let statusQueryItem = Smithy.URIQueryItem(name: "status".urlPercentEncoding(), value: Swift.String(status.rawValue).urlPercentEncoding())
            items.append(statusQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let isOwned = value.isOwned {
            let isOwnedQueryItem = Smithy.URIQueryItem(name: "isOwned".urlPercentEncoding(), value: Swift.String(isOwned).urlPercentEncoding())
            items.append(isOwnedQueryItem)
        }
        if let name = value.name {
            let nameQueryItem = Smithy.URIQueryItem(name: "name".urlPercentEncoding(), value: Swift.String(name).urlPercentEncoding())
            items.append(nameQueryItem)
        }
        return items
    }
}

extension ListNetworksInput {

    static func urlPathProvider(_ value: ListNetworksInput) -> Swift.String? {
        return "/networks"
    }
}

extension ListNetworksInput {

    static func queryItemProvider(_ value: ListNetworksInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let status = value.status {
            let statusQueryItem = Smithy.URIQueryItem(name: "status".urlPercentEncoding(), value: Swift.String(status.rawValue).urlPercentEncoding())
            items.append(statusQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let framework = value.framework {
            let frameworkQueryItem = Smithy.URIQueryItem(name: "framework".urlPercentEncoding(), value: Swift.String(framework.rawValue).urlPercentEncoding())
            items.append(frameworkQueryItem)
        }
        if let name = value.name {
            let nameQueryItem = Smithy.URIQueryItem(name: "name".urlPercentEncoding(), value: Swift.String(name).urlPercentEncoding())
            items.append(nameQueryItem)
        }
        return items
    }
}

extension ListNodesInput {

    static func urlPathProvider(_ value: ListNodesInput) -> Swift.String? {
        guard let networkId = value.networkId else {
            return nil
        }
        return "/networks/\(networkId.urlPercentEncoding())/nodes"
    }
}

extension ListNodesInput {

    static func queryItemProvider(_ value: ListNodesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let status = value.status {
            let statusQueryItem = Smithy.URIQueryItem(name: "status".urlPercentEncoding(), value: Swift.String(status.rawValue).urlPercentEncoding())
            items.append(statusQueryItem)
        }
        if let memberId = value.memberId {
            let memberIdQueryItem = Smithy.URIQueryItem(name: "memberId".urlPercentEncoding(), value: Swift.String(memberId).urlPercentEncoding())
            items.append(memberIdQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListProposalsInput {

    static func urlPathProvider(_ value: ListProposalsInput) -> Swift.String? {
        guard let networkId = value.networkId else {
            return nil
        }
        return "/networks/\(networkId.urlPercentEncoding())/proposals"
    }
}

extension ListProposalsInput {

    static func queryItemProvider(_ value: ListProposalsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListProposalVotesInput {

    static func urlPathProvider(_ value: ListProposalVotesInput) -> Swift.String? {
        guard let networkId = value.networkId else {
            return nil
        }
        guard let proposalId = value.proposalId else {
            return nil
        }
        return "/networks/\(networkId.urlPercentEncoding())/proposals/\(proposalId.urlPercentEncoding())/votes"
    }
}

extension ListProposalVotesInput {

    static func queryItemProvider(_ value: ListProposalVotesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension RejectInvitationInput {

    static func urlPathProvider(_ value: RejectInvitationInput) -> Swift.String? {
        guard let invitationId = value.invitationId else {
            return nil
        }
        return "/invitations/\(invitationId.urlPercentEncoding())"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func queryItemProvider(_ value: UntagResourceInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let tagKeys = value.tagKeys else {
            let message = "Creating a URL Query Item failed. tagKeys is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        tagKeys.forEach { queryItemValue in
            let queryItem = Smithy.URIQueryItem(name: "tagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
            items.append(queryItem)
        }
        return items
    }
}

extension UpdateMemberInput {

    static func urlPathProvider(_ value: UpdateMemberInput) -> Swift.String? {
        guard let networkId = value.networkId else {
            return nil
        }
        guard let memberId = value.memberId else {
            return nil
        }
        return "/networks/\(networkId.urlPercentEncoding())/members/\(memberId.urlPercentEncoding())"
    }
}

extension UpdateNodeInput {

    static func urlPathProvider(_ value: UpdateNodeInput) -> Swift.String? {
        guard let networkId = value.networkId else {
            return nil
        }
        guard let nodeId = value.nodeId else {
            return nil
        }
        return "/networks/\(networkId.urlPercentEncoding())/nodes/\(nodeId.urlPercentEncoding())"
    }
}

extension VoteOnProposalInput {

    static func urlPathProvider(_ value: VoteOnProposalInput) -> Swift.String? {
        guard let networkId = value.networkId else {
            return nil
        }
        guard let proposalId = value.proposalId else {
            return nil
        }
        return "/networks/\(networkId.urlPercentEncoding())/proposals/\(proposalId.urlPercentEncoding())/votes"
    }
}

extension CreateAccessorInput {

    static func write(value: CreateAccessorInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccessorType"].write(value.accessorType)
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["NetworkType"].write(value.networkType)
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateMemberInput {

    static func write(value: CreateMemberInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["InvitationId"].write(value.invitationId)
        try writer["MemberConfiguration"].write(value.memberConfiguration, with: ManagedBlockchainClientTypes.MemberConfiguration.write(value:to:))
    }
}

extension CreateNetworkInput {

    static func write(value: CreateNetworkInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["Description"].write(value.description)
        try writer["Framework"].write(value.framework)
        try writer["FrameworkConfiguration"].write(value.frameworkConfiguration, with: ManagedBlockchainClientTypes.NetworkFrameworkConfiguration.write(value:to:))
        try writer["FrameworkVersion"].write(value.frameworkVersion)
        try writer["MemberConfiguration"].write(value.memberConfiguration, with: ManagedBlockchainClientTypes.MemberConfiguration.write(value:to:))
        try writer["Name"].write(value.name)
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["VotingPolicy"].write(value.votingPolicy, with: ManagedBlockchainClientTypes.VotingPolicy.write(value:to:))
    }
}

extension CreateNodeInput {

    static func write(value: CreateNodeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["MemberId"].write(value.memberId)
        try writer["NodeConfiguration"].write(value.nodeConfiguration, with: ManagedBlockchainClientTypes.NodeConfiguration.write(value:to:))
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateProposalInput {

    static func write(value: CreateProposalInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Actions"].write(value.actions, with: ManagedBlockchainClientTypes.ProposalActions.write(value:to:))
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["Description"].write(value.description)
        try writer["MemberId"].write(value.memberId)
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension UpdateMemberInput {

    static func write(value: UpdateMemberInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LogPublishingConfiguration"].write(value.logPublishingConfiguration, with: ManagedBlockchainClientTypes.MemberLogPublishingConfiguration.write(value:to:))
    }
}

extension UpdateNodeInput {

    static func write(value: UpdateNodeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LogPublishingConfiguration"].write(value.logPublishingConfiguration, with: ManagedBlockchainClientTypes.NodeLogPublishingConfiguration.write(value:to:))
        try writer["MemberId"].write(value.memberId)
    }
}

extension VoteOnProposalInput {

    static func write(value: VoteOnProposalInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Vote"].write(value.vote)
        try writer["VoterMemberId"].write(value.voterMemberId)
    }
}

extension CreateAccessorOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateAccessorOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateAccessorOutput()
        value.accessorId = try reader["AccessorId"].readIfPresent()
        value.billingToken = try reader["BillingToken"].readIfPresent()
        value.networkType = try reader["NetworkType"].readIfPresent()
        return value
    }
}

extension CreateMemberOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateMemberOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateMemberOutput()
        value.memberId = try reader["MemberId"].readIfPresent()
        return value
    }
}

extension CreateNetworkOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateNetworkOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateNetworkOutput()
        value.memberId = try reader["MemberId"].readIfPresent()
        value.networkId = try reader["NetworkId"].readIfPresent()
        return value
    }
}

extension CreateNodeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateNodeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateNodeOutput()
        value.nodeId = try reader["NodeId"].readIfPresent()
        return value
    }
}

extension CreateProposalOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateProposalOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateProposalOutput()
        value.proposalId = try reader["ProposalId"].readIfPresent()
        return value
    }
}

extension DeleteAccessorOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteAccessorOutput {
        return DeleteAccessorOutput()
    }
}

extension DeleteMemberOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteMemberOutput {
        return DeleteMemberOutput()
    }
}

extension DeleteNodeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteNodeOutput {
        return DeleteNodeOutput()
    }
}

extension GetAccessorOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetAccessorOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetAccessorOutput()
        value.accessor = try reader["Accessor"].readIfPresent(with: ManagedBlockchainClientTypes.Accessor.read(from:))
        return value
    }
}

extension GetMemberOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetMemberOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetMemberOutput()
        value.member = try reader["Member"].readIfPresent(with: ManagedBlockchainClientTypes.Member.read(from:))
        return value
    }
}

extension GetNetworkOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetNetworkOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetNetworkOutput()
        value.network = try reader["Network"].readIfPresent(with: ManagedBlockchainClientTypes.Network.read(from:))
        return value
    }
}

extension GetNodeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetNodeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetNodeOutput()
        value.node = try reader["Node"].readIfPresent(with: ManagedBlockchainClientTypes.Node.read(from:))
        return value
    }
}

extension GetProposalOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetProposalOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetProposalOutput()
        value.proposal = try reader["Proposal"].readIfPresent(with: ManagedBlockchainClientTypes.Proposal.read(from:))
        return value
    }
}

extension ListAccessorsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAccessorsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAccessorsOutput()
        value.accessors = try reader["Accessors"].readListIfPresent(memberReadingClosure: ManagedBlockchainClientTypes.AccessorSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListInvitationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListInvitationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListInvitationsOutput()
        value.invitations = try reader["Invitations"].readListIfPresent(memberReadingClosure: ManagedBlockchainClientTypes.Invitation.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListMembersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListMembersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListMembersOutput()
        value.members = try reader["Members"].readListIfPresent(memberReadingClosure: ManagedBlockchainClientTypes.MemberSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListNetworksOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListNetworksOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListNetworksOutput()
        value.networks = try reader["Networks"].readListIfPresent(memberReadingClosure: ManagedBlockchainClientTypes.NetworkSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListNodesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListNodesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListNodesOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.nodes = try reader["Nodes"].readListIfPresent(memberReadingClosure: ManagedBlockchainClientTypes.NodeSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListProposalsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListProposalsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListProposalsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.proposals = try reader["Proposals"].readListIfPresent(memberReadingClosure: ManagedBlockchainClientTypes.ProposalSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListProposalVotesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListProposalVotesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListProposalVotesOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.proposalVotes = try reader["ProposalVotes"].readListIfPresent(memberReadingClosure: ManagedBlockchainClientTypes.VoteSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension RejectInvitationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RejectInvitationOutput {
        return RejectInvitationOutput()
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateMemberOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateMemberOutput {
        return UpdateMemberOutput()
    }
}

extension UpdateNodeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateNodeOutput {
        return UpdateNodeOutput()
    }
}

extension VoteOnProposalOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> VoteOnProposalOutput {
        return VoteOnProposalOutput()
    }
}

enum CreateAccessorOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServiceErrorException": return try InternalServiceErrorException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceAlreadyExistsException": return try ResourceAlreadyExistsException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "TooManyTagsException": return try TooManyTagsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateMemberOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServiceErrorException": return try InternalServiceErrorException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceAlreadyExistsException": return try ResourceAlreadyExistsException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ResourceNotReadyException": return try ResourceNotReadyException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "TooManyTagsException": return try TooManyTagsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateNetworkOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServiceErrorException": return try InternalServiceErrorException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceAlreadyExistsException": return try ResourceAlreadyExistsException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "TooManyTagsException": return try TooManyTagsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateNodeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServiceErrorException": return try InternalServiceErrorException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceAlreadyExistsException": return try ResourceAlreadyExistsException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ResourceNotReadyException": return try ResourceNotReadyException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "TooManyTagsException": return try TooManyTagsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateProposalOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServiceErrorException": return try InternalServiceErrorException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ResourceNotReadyException": return try ResourceNotReadyException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "TooManyTagsException": return try TooManyTagsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteAccessorOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServiceErrorException": return try InternalServiceErrorException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteMemberOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServiceErrorException": return try InternalServiceErrorException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ResourceNotReadyException": return try ResourceNotReadyException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteNodeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServiceErrorException": return try InternalServiceErrorException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ResourceNotReadyException": return try ResourceNotReadyException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetAccessorOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServiceErrorException": return try InternalServiceErrorException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetMemberOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServiceErrorException": return try InternalServiceErrorException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetNetworkOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServiceErrorException": return try InternalServiceErrorException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetNodeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServiceErrorException": return try InternalServiceErrorException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetProposalOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServiceErrorException": return try InternalServiceErrorException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAccessorsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServiceErrorException": return try InternalServiceErrorException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListInvitationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServiceErrorException": return try InternalServiceErrorException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListMembersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServiceErrorException": return try InternalServiceErrorException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListNetworksOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServiceErrorException": return try InternalServiceErrorException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListNodesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServiceErrorException": return try InternalServiceErrorException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListProposalsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServiceErrorException": return try InternalServiceErrorException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListProposalVotesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServiceErrorException": return try InternalServiceErrorException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceErrorException": return try InternalServiceErrorException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ResourceNotReadyException": return try ResourceNotReadyException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RejectInvitationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "IllegalActionException": return try IllegalActionException.makeError(baseError: baseError)
            case "InternalServiceErrorException": return try InternalServiceErrorException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceErrorException": return try InternalServiceErrorException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ResourceNotReadyException": return try ResourceNotReadyException.makeError(baseError: baseError)
            case "TooManyTagsException": return try TooManyTagsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceErrorException": return try InternalServiceErrorException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ResourceNotReadyException": return try ResourceNotReadyException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateMemberOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServiceErrorException": return try InternalServiceErrorException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateNodeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServiceErrorException": return try InternalServiceErrorException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum VoteOnProposalOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "IllegalActionException": return try IllegalActionException.makeError(baseError: baseError)
            case "InternalServiceErrorException": return try InternalServiceErrorException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ResourceLimitExceededException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceLimitExceededException {
        let reader = baseError.errorBodyReader
        var value = ResourceLimitExceededException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ThrottlingException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ThrottlingException {
        var value = ThrottlingException()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServiceErrorException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalServiceErrorException {
        var value = InternalServiceErrorException()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidRequestException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InvalidRequestException {
        let reader = baseError.errorBodyReader
        var value = InvalidRequestException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TooManyTagsException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> TooManyTagsException {
        let reader = baseError.errorBodyReader
        var value = TooManyTagsException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.properties.resourceName = try reader["ResourceName"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceAlreadyExistsException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceAlreadyExistsException {
        let reader = baseError.errorBodyReader
        var value = ResourceAlreadyExistsException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.properties.resourceName = try reader["ResourceName"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotReadyException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceNotReadyException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotReadyException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension IllegalActionException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> IllegalActionException {
        let reader = baseError.errorBodyReader
        var value = IllegalActionException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ManagedBlockchainClientTypes.Accessor {

    static func read(from reader: SmithyJSON.Reader) throws -> ManagedBlockchainClientTypes.Accessor {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ManagedBlockchainClientTypes.Accessor()
        value.id = try reader["Id"].readIfPresent()
        value.type = try reader["Type"].readIfPresent()
        value.billingToken = try reader["BillingToken"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.creationDate = try reader["CreationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.arn = try reader["Arn"].readIfPresent()
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.networkType = try reader["NetworkType"].readIfPresent()
        return value
    }
}

extension ManagedBlockchainClientTypes.Member {

    static func read(from reader: SmithyJSON.Reader) throws -> ManagedBlockchainClientTypes.Member {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ManagedBlockchainClientTypes.Member()
        value.networkId = try reader["NetworkId"].readIfPresent()
        value.id = try reader["Id"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.frameworkAttributes = try reader["FrameworkAttributes"].readIfPresent(with: ManagedBlockchainClientTypes.MemberFrameworkAttributes.read(from:))
        value.logPublishingConfiguration = try reader["LogPublishingConfiguration"].readIfPresent(with: ManagedBlockchainClientTypes.MemberLogPublishingConfiguration.read(from:))
        value.status = try reader["Status"].readIfPresent()
        value.creationDate = try reader["CreationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.arn = try reader["Arn"].readIfPresent()
        value.kmsKeyArn = try reader["KmsKeyArn"].readIfPresent()
        return value
    }
}

extension ManagedBlockchainClientTypes.MemberLogPublishingConfiguration {

    static func write(value: ManagedBlockchainClientTypes.MemberLogPublishingConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Fabric"].write(value.fabric, with: ManagedBlockchainClientTypes.MemberFabricLogPublishingConfiguration.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ManagedBlockchainClientTypes.MemberLogPublishingConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ManagedBlockchainClientTypes.MemberLogPublishingConfiguration()
        value.fabric = try reader["Fabric"].readIfPresent(with: ManagedBlockchainClientTypes.MemberFabricLogPublishingConfiguration.read(from:))
        return value
    }
}

extension ManagedBlockchainClientTypes.MemberFabricLogPublishingConfiguration {

    static func write(value: ManagedBlockchainClientTypes.MemberFabricLogPublishingConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CaLogs"].write(value.caLogs, with: ManagedBlockchainClientTypes.LogConfigurations.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ManagedBlockchainClientTypes.MemberFabricLogPublishingConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ManagedBlockchainClientTypes.MemberFabricLogPublishingConfiguration()
        value.caLogs = try reader["CaLogs"].readIfPresent(with: ManagedBlockchainClientTypes.LogConfigurations.read(from:))
        return value
    }
}

extension ManagedBlockchainClientTypes.LogConfigurations {

    static func write(value: ManagedBlockchainClientTypes.LogConfigurations?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Cloudwatch"].write(value.cloudwatch, with: ManagedBlockchainClientTypes.LogConfiguration.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ManagedBlockchainClientTypes.LogConfigurations {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ManagedBlockchainClientTypes.LogConfigurations()
        value.cloudwatch = try reader["Cloudwatch"].readIfPresent(with: ManagedBlockchainClientTypes.LogConfiguration.read(from:))
        return value
    }
}

extension ManagedBlockchainClientTypes.LogConfiguration {

    static func write(value: ManagedBlockchainClientTypes.LogConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Enabled"].write(value.enabled)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ManagedBlockchainClientTypes.LogConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ManagedBlockchainClientTypes.LogConfiguration()
        value.enabled = try reader["Enabled"].readIfPresent()
        return value
    }
}

extension ManagedBlockchainClientTypes.MemberFrameworkAttributes {

    static func read(from reader: SmithyJSON.Reader) throws -> ManagedBlockchainClientTypes.MemberFrameworkAttributes {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ManagedBlockchainClientTypes.MemberFrameworkAttributes()
        value.fabric = try reader["Fabric"].readIfPresent(with: ManagedBlockchainClientTypes.MemberFabricAttributes.read(from:))
        return value
    }
}

extension ManagedBlockchainClientTypes.MemberFabricAttributes {

    static func read(from reader: SmithyJSON.Reader) throws -> ManagedBlockchainClientTypes.MemberFabricAttributes {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ManagedBlockchainClientTypes.MemberFabricAttributes()
        value.adminUsername = try reader["AdminUsername"].readIfPresent()
        value.caEndpoint = try reader["CaEndpoint"].readIfPresent()
        return value
    }
}

extension ManagedBlockchainClientTypes.Network {

    static func read(from reader: SmithyJSON.Reader) throws -> ManagedBlockchainClientTypes.Network {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ManagedBlockchainClientTypes.Network()
        value.id = try reader["Id"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.framework = try reader["Framework"].readIfPresent()
        value.frameworkVersion = try reader["FrameworkVersion"].readIfPresent()
        value.frameworkAttributes = try reader["FrameworkAttributes"].readIfPresent(with: ManagedBlockchainClientTypes.NetworkFrameworkAttributes.read(from:))
        value.vpcEndpointServiceName = try reader["VpcEndpointServiceName"].readIfPresent()
        value.votingPolicy = try reader["VotingPolicy"].readIfPresent(with: ManagedBlockchainClientTypes.VotingPolicy.read(from:))
        value.status = try reader["Status"].readIfPresent()
        value.creationDate = try reader["CreationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.arn = try reader["Arn"].readIfPresent()
        return value
    }
}

extension ManagedBlockchainClientTypes.VotingPolicy {

    static func write(value: ManagedBlockchainClientTypes.VotingPolicy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ApprovalThresholdPolicy"].write(value.approvalThresholdPolicy, with: ManagedBlockchainClientTypes.ApprovalThresholdPolicy.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ManagedBlockchainClientTypes.VotingPolicy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ManagedBlockchainClientTypes.VotingPolicy()
        value.approvalThresholdPolicy = try reader["ApprovalThresholdPolicy"].readIfPresent(with: ManagedBlockchainClientTypes.ApprovalThresholdPolicy.read(from:))
        return value
    }
}

extension ManagedBlockchainClientTypes.ApprovalThresholdPolicy {

    static func write(value: ManagedBlockchainClientTypes.ApprovalThresholdPolicy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ProposalDurationInHours"].write(value.proposalDurationInHours)
        try writer["ThresholdComparator"].write(value.thresholdComparator)
        try writer["ThresholdPercentage"].write(value.thresholdPercentage)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ManagedBlockchainClientTypes.ApprovalThresholdPolicy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ManagedBlockchainClientTypes.ApprovalThresholdPolicy()
        value.thresholdPercentage = try reader["ThresholdPercentage"].readIfPresent()
        value.proposalDurationInHours = try reader["ProposalDurationInHours"].readIfPresent()
        value.thresholdComparator = try reader["ThresholdComparator"].readIfPresent()
        return value
    }
}

extension ManagedBlockchainClientTypes.NetworkFrameworkAttributes {

    static func read(from reader: SmithyJSON.Reader) throws -> ManagedBlockchainClientTypes.NetworkFrameworkAttributes {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ManagedBlockchainClientTypes.NetworkFrameworkAttributes()
        value.fabric = try reader["Fabric"].readIfPresent(with: ManagedBlockchainClientTypes.NetworkFabricAttributes.read(from:))
        value.ethereum = try reader["Ethereum"].readIfPresent(with: ManagedBlockchainClientTypes.NetworkEthereumAttributes.read(from:))
        return value
    }
}

extension ManagedBlockchainClientTypes.NetworkEthereumAttributes {

    static func read(from reader: SmithyJSON.Reader) throws -> ManagedBlockchainClientTypes.NetworkEthereumAttributes {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ManagedBlockchainClientTypes.NetworkEthereumAttributes()
        value.chainId = try reader["ChainId"].readIfPresent()
        return value
    }
}

extension ManagedBlockchainClientTypes.NetworkFabricAttributes {

    static func read(from reader: SmithyJSON.Reader) throws -> ManagedBlockchainClientTypes.NetworkFabricAttributes {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ManagedBlockchainClientTypes.NetworkFabricAttributes()
        value.orderingServiceEndpoint = try reader["OrderingServiceEndpoint"].readIfPresent()
        value.edition = try reader["Edition"].readIfPresent()
        return value
    }
}

extension ManagedBlockchainClientTypes.Node {

    static func read(from reader: SmithyJSON.Reader) throws -> ManagedBlockchainClientTypes.Node {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ManagedBlockchainClientTypes.Node()
        value.networkId = try reader["NetworkId"].readIfPresent()
        value.memberId = try reader["MemberId"].readIfPresent()
        value.id = try reader["Id"].readIfPresent()
        value.instanceType = try reader["InstanceType"].readIfPresent()
        value.availabilityZone = try reader["AvailabilityZone"].readIfPresent()
        value.frameworkAttributes = try reader["FrameworkAttributes"].readIfPresent(with: ManagedBlockchainClientTypes.NodeFrameworkAttributes.read(from:))
        value.logPublishingConfiguration = try reader["LogPublishingConfiguration"].readIfPresent(with: ManagedBlockchainClientTypes.NodeLogPublishingConfiguration.read(from:))
        value.stateDB = try reader["StateDB"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.creationDate = try reader["CreationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.arn = try reader["Arn"].readIfPresent()
        value.kmsKeyArn = try reader["KmsKeyArn"].readIfPresent()
        return value
    }
}

extension ManagedBlockchainClientTypes.NodeLogPublishingConfiguration {

    static func write(value: ManagedBlockchainClientTypes.NodeLogPublishingConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Fabric"].write(value.fabric, with: ManagedBlockchainClientTypes.NodeFabricLogPublishingConfiguration.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ManagedBlockchainClientTypes.NodeLogPublishingConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ManagedBlockchainClientTypes.NodeLogPublishingConfiguration()
        value.fabric = try reader["Fabric"].readIfPresent(with: ManagedBlockchainClientTypes.NodeFabricLogPublishingConfiguration.read(from:))
        return value
    }
}

extension ManagedBlockchainClientTypes.NodeFabricLogPublishingConfiguration {

    static func write(value: ManagedBlockchainClientTypes.NodeFabricLogPublishingConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChaincodeLogs"].write(value.chaincodeLogs, with: ManagedBlockchainClientTypes.LogConfigurations.write(value:to:))
        try writer["PeerLogs"].write(value.peerLogs, with: ManagedBlockchainClientTypes.LogConfigurations.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ManagedBlockchainClientTypes.NodeFabricLogPublishingConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ManagedBlockchainClientTypes.NodeFabricLogPublishingConfiguration()
        value.chaincodeLogs = try reader["ChaincodeLogs"].readIfPresent(with: ManagedBlockchainClientTypes.LogConfigurations.read(from:))
        value.peerLogs = try reader["PeerLogs"].readIfPresent(with: ManagedBlockchainClientTypes.LogConfigurations.read(from:))
        return value
    }
}

extension ManagedBlockchainClientTypes.NodeFrameworkAttributes {

    static func read(from reader: SmithyJSON.Reader) throws -> ManagedBlockchainClientTypes.NodeFrameworkAttributes {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ManagedBlockchainClientTypes.NodeFrameworkAttributes()
        value.fabric = try reader["Fabric"].readIfPresent(with: ManagedBlockchainClientTypes.NodeFabricAttributes.read(from:))
        value.ethereum = try reader["Ethereum"].readIfPresent(with: ManagedBlockchainClientTypes.NodeEthereumAttributes.read(from:))
        return value
    }
}

extension ManagedBlockchainClientTypes.NodeEthereumAttributes {

    static func read(from reader: SmithyJSON.Reader) throws -> ManagedBlockchainClientTypes.NodeEthereumAttributes {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ManagedBlockchainClientTypes.NodeEthereumAttributes()
        value.httpEndpoint = try reader["HttpEndpoint"].readIfPresent()
        value.webSocketEndpoint = try reader["WebSocketEndpoint"].readIfPresent()
        return value
    }
}

extension ManagedBlockchainClientTypes.NodeFabricAttributes {

    static func read(from reader: SmithyJSON.Reader) throws -> ManagedBlockchainClientTypes.NodeFabricAttributes {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ManagedBlockchainClientTypes.NodeFabricAttributes()
        value.peerEndpoint = try reader["PeerEndpoint"].readIfPresent()
        value.peerEventEndpoint = try reader["PeerEventEndpoint"].readIfPresent()
        return value
    }
}

extension ManagedBlockchainClientTypes.Proposal {

    static func read(from reader: SmithyJSON.Reader) throws -> ManagedBlockchainClientTypes.Proposal {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ManagedBlockchainClientTypes.Proposal()
        value.proposalId = try reader["ProposalId"].readIfPresent()
        value.networkId = try reader["NetworkId"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.actions = try reader["Actions"].readIfPresent(with: ManagedBlockchainClientTypes.ProposalActions.read(from:))
        value.proposedByMemberId = try reader["ProposedByMemberId"].readIfPresent()
        value.proposedByMemberName = try reader["ProposedByMemberName"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.creationDate = try reader["CreationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.expirationDate = try reader["ExpirationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.yesVoteCount = try reader["YesVoteCount"].readIfPresent()
        value.noVoteCount = try reader["NoVoteCount"].readIfPresent()
        value.outstandingVoteCount = try reader["OutstandingVoteCount"].readIfPresent()
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.arn = try reader["Arn"].readIfPresent()
        return value
    }
}

extension ManagedBlockchainClientTypes.ProposalActions {

    static func write(value: ManagedBlockchainClientTypes.ProposalActions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Invitations"].writeList(value.invitations, memberWritingClosure: ManagedBlockchainClientTypes.InviteAction.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Removals"].writeList(value.removals, memberWritingClosure: ManagedBlockchainClientTypes.RemoveAction.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ManagedBlockchainClientTypes.ProposalActions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ManagedBlockchainClientTypes.ProposalActions()
        value.invitations = try reader["Invitations"].readListIfPresent(memberReadingClosure: ManagedBlockchainClientTypes.InviteAction.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.removals = try reader["Removals"].readListIfPresent(memberReadingClosure: ManagedBlockchainClientTypes.RemoveAction.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ManagedBlockchainClientTypes.RemoveAction {

    static func write(value: ManagedBlockchainClientTypes.RemoveAction?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MemberId"].write(value.memberId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ManagedBlockchainClientTypes.RemoveAction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ManagedBlockchainClientTypes.RemoveAction()
        value.memberId = try reader["MemberId"].readIfPresent() ?? ""
        return value
    }
}

extension ManagedBlockchainClientTypes.InviteAction {

    static func write(value: ManagedBlockchainClientTypes.InviteAction?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Principal"].write(value.principal)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ManagedBlockchainClientTypes.InviteAction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ManagedBlockchainClientTypes.InviteAction()
        value.principal = try reader["Principal"].readIfPresent() ?? ""
        return value
    }
}

extension ManagedBlockchainClientTypes.AccessorSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> ManagedBlockchainClientTypes.AccessorSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ManagedBlockchainClientTypes.AccessorSummary()
        value.id = try reader["Id"].readIfPresent()
        value.type = try reader["Type"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.creationDate = try reader["CreationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.arn = try reader["Arn"].readIfPresent()
        value.networkType = try reader["NetworkType"].readIfPresent()
        return value
    }
}

extension ManagedBlockchainClientTypes.Invitation {

    static func read(from reader: SmithyJSON.Reader) throws -> ManagedBlockchainClientTypes.Invitation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ManagedBlockchainClientTypes.Invitation()
        value.invitationId = try reader["InvitationId"].readIfPresent()
        value.creationDate = try reader["CreationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.expirationDate = try reader["ExpirationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.status = try reader["Status"].readIfPresent()
        value.networkSummary = try reader["NetworkSummary"].readIfPresent(with: ManagedBlockchainClientTypes.NetworkSummary.read(from:))
        value.arn = try reader["Arn"].readIfPresent()
        return value
    }
}

extension ManagedBlockchainClientTypes.NetworkSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> ManagedBlockchainClientTypes.NetworkSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ManagedBlockchainClientTypes.NetworkSummary()
        value.id = try reader["Id"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.framework = try reader["Framework"].readIfPresent()
        value.frameworkVersion = try reader["FrameworkVersion"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.creationDate = try reader["CreationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.arn = try reader["Arn"].readIfPresent()
        return value
    }
}

extension ManagedBlockchainClientTypes.MemberSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> ManagedBlockchainClientTypes.MemberSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ManagedBlockchainClientTypes.MemberSummary()
        value.id = try reader["Id"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.creationDate = try reader["CreationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.isOwned = try reader["IsOwned"].readIfPresent()
        value.arn = try reader["Arn"].readIfPresent()
        return value
    }
}

extension ManagedBlockchainClientTypes.NodeSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> ManagedBlockchainClientTypes.NodeSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ManagedBlockchainClientTypes.NodeSummary()
        value.id = try reader["Id"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.creationDate = try reader["CreationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.availabilityZone = try reader["AvailabilityZone"].readIfPresent()
        value.instanceType = try reader["InstanceType"].readIfPresent()
        value.arn = try reader["Arn"].readIfPresent()
        return value
    }
}

extension ManagedBlockchainClientTypes.ProposalSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> ManagedBlockchainClientTypes.ProposalSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ManagedBlockchainClientTypes.ProposalSummary()
        value.proposalId = try reader["ProposalId"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.proposedByMemberId = try reader["ProposedByMemberId"].readIfPresent()
        value.proposedByMemberName = try reader["ProposedByMemberName"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.creationDate = try reader["CreationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.expirationDate = try reader["ExpirationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.arn = try reader["Arn"].readIfPresent()
        return value
    }
}

extension ManagedBlockchainClientTypes.VoteSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> ManagedBlockchainClientTypes.VoteSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ManagedBlockchainClientTypes.VoteSummary()
        value.vote = try reader["Vote"].readIfPresent()
        value.memberName = try reader["MemberName"].readIfPresent()
        value.memberId = try reader["MemberId"].readIfPresent()
        return value
    }
}

extension ManagedBlockchainClientTypes.MemberConfiguration {

    static func write(value: ManagedBlockchainClientTypes.MemberConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["FrameworkConfiguration"].write(value.frameworkConfiguration, with: ManagedBlockchainClientTypes.MemberFrameworkConfiguration.write(value:to:))
        try writer["KmsKeyArn"].write(value.kmsKeyArn)
        try writer["LogPublishingConfiguration"].write(value.logPublishingConfiguration, with: ManagedBlockchainClientTypes.MemberLogPublishingConfiguration.write(value:to:))
        try writer["Name"].write(value.name)
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension ManagedBlockchainClientTypes.MemberFrameworkConfiguration {

    static func write(value: ManagedBlockchainClientTypes.MemberFrameworkConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Fabric"].write(value.fabric, with: ManagedBlockchainClientTypes.MemberFabricConfiguration.write(value:to:))
    }
}

extension ManagedBlockchainClientTypes.MemberFabricConfiguration {

    static func write(value: ManagedBlockchainClientTypes.MemberFabricConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AdminPassword"].write(value.adminPassword)
        try writer["AdminUsername"].write(value.adminUsername)
    }
}

extension ManagedBlockchainClientTypes.NetworkFrameworkConfiguration {

    static func write(value: ManagedBlockchainClientTypes.NetworkFrameworkConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Fabric"].write(value.fabric, with: ManagedBlockchainClientTypes.NetworkFabricConfiguration.write(value:to:))
    }
}

extension ManagedBlockchainClientTypes.NetworkFabricConfiguration {

    static func write(value: ManagedBlockchainClientTypes.NetworkFabricConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Edition"].write(value.edition)
    }
}

extension ManagedBlockchainClientTypes.NodeConfiguration {

    static func write(value: ManagedBlockchainClientTypes.NodeConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AvailabilityZone"].write(value.availabilityZone)
        try writer["InstanceType"].write(value.instanceType)
        try writer["LogPublishingConfiguration"].write(value.logPublishingConfiguration, with: ManagedBlockchainClientTypes.NodeLogPublishingConfiguration.write(value:to:))
        try writer["StateDB"].write(value.stateDB)
    }
}

public enum ManagedBlockchainClientTypes {}
