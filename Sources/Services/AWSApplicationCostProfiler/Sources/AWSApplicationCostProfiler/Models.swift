//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.URIQueryItem
@_spi(SmithyTimestamps) import struct SmithyTimestamps.TimestampFormatter

/// You do not have permission to perform this action.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// An internal server error occurred. Retry your request.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The calls to AWS Application Cost Profiler API are throttled. The request was denied.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The input fails to satisfy the constraints for the API.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteReportDefinitionInput: Swift.Sendable {
    /// Required. ID of the report to delete.
    /// This member is required.
    public var reportId: Swift.String?

    public init(
        reportId: Swift.String? = nil
    )
    {
        self.reportId = reportId
    }
}

public struct DeleteReportDefinitionOutput: Swift.Sendable {
    /// ID of the report that was deleted.
    public var reportId: Swift.String?

    public init(
        reportId: Swift.String? = nil
    )
    {
        self.reportId = reportId
    }
}

public struct GetReportDefinitionInput: Swift.Sendable {
    /// ID of the report to retrieve.
    /// This member is required.
    public var reportId: Swift.String?

    public init(
        reportId: Swift.String? = nil
    )
    {
        self.reportId = reportId
    }
}

extension ApplicationCostProfilerClientTypes {

    /// Represents the Amazon Simple Storage Service (Amazon S3) location where AWS Application Cost Profiler reports are generated and then written to.
    public struct S3Location: Swift.Sendable {
        /// Name of the S3 bucket.
        /// This member is required.
        public var bucket: Swift.String?
        /// Prefix for the location to write to.
        /// This member is required.
        public var `prefix`: Swift.String?

        public init(
            bucket: Swift.String? = nil,
            `prefix`: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.`prefix` = `prefix`
        }
    }
}

extension ApplicationCostProfilerClientTypes {

    public enum Format: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case csv
        case parquet
        case sdkUnknown(Swift.String)

        public static var allCases: [Format] {
            return [
                .csv,
                .parquet
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .csv: return "CSV"
            case .parquet: return "PARQUET"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ApplicationCostProfilerClientTypes {

    public enum ReportFrequency: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case all
        case daily
        case monthly
        case sdkUnknown(Swift.String)

        public static var allCases: [ReportFrequency] {
            return [
                .all,
                .daily,
                .monthly
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case .daily: return "DAILY"
            case .monthly: return "MONTHLY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetReportDefinitionOutput: Swift.Sendable {
    /// Timestamp (milliseconds) when this report definition was created.
    /// This member is required.
    public var createdAt: Foundation.Date?
    /// Amazon Simple Storage Service (Amazon S3) location where the report is uploaded.
    /// This member is required.
    public var destinationS3Location: ApplicationCostProfilerClientTypes.S3Location?
    /// Format of the generated report.
    /// This member is required.
    public var format: ApplicationCostProfilerClientTypes.Format?
    /// Timestamp (milliseconds) when this report definition was last updated.
    /// This member is required.
    public var lastUpdated: Foundation.Date?
    /// Description of the report.
    /// This member is required.
    public var reportDescription: Swift.String?
    /// Cadence used to generate the report.
    /// This member is required.
    public var reportFrequency: ApplicationCostProfilerClientTypes.ReportFrequency?
    /// ID of the report retrieved.
    /// This member is required.
    public var reportId: Swift.String?

    public init(
        createdAt: Foundation.Date? = nil,
        destinationS3Location: ApplicationCostProfilerClientTypes.S3Location? = nil,
        format: ApplicationCostProfilerClientTypes.Format? = nil,
        lastUpdated: Foundation.Date? = nil,
        reportDescription: Swift.String? = nil,
        reportFrequency: ApplicationCostProfilerClientTypes.ReportFrequency? = nil,
        reportId: Swift.String? = nil
    )
    {
        self.createdAt = createdAt
        self.destinationS3Location = destinationS3Location
        self.format = format
        self.lastUpdated = lastUpdated
        self.reportDescription = reportDescription
        self.reportFrequency = reportFrequency
        self.reportId = reportId
    }
}

extension ApplicationCostProfilerClientTypes {

    public enum S3BucketRegion: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case afSouth1
        case apEast1
        case euSouth1
        case meSouth1
        case sdkUnknown(Swift.String)

        public static var allCases: [S3BucketRegion] {
            return [
                .afSouth1,
                .apEast1,
                .euSouth1,
                .meSouth1
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .afSouth1: return "af-south-1"
            case .apEast1: return "ap-east-1"
            case .euSouth1: return "eu-south-1"
            case .meSouth1: return "me-south-1"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ApplicationCostProfilerClientTypes {

    /// Represents the Amazon Simple Storage Service (Amazon S3) location where usage data is read from.
    public struct SourceS3Location: Swift.Sendable {
        /// Name of the bucket.
        /// This member is required.
        public var bucket: Swift.String?
        /// Key of the object.
        /// This member is required.
        public var key: Swift.String?
        /// Region of the bucket. Only required for Regions that are disabled by default. For more infomration about Regions that are disabled by default, see [ Enabling a Region](https://docs.aws.amazon.com/general/latest/gr/rande-manage.html#rande-manage-enable) in the AWS General Reference guide.
        public var region: ApplicationCostProfilerClientTypes.S3BucketRegion?

        public init(
            bucket: Swift.String? = nil,
            key: Swift.String? = nil,
            region: ApplicationCostProfilerClientTypes.S3BucketRegion? = nil
        )
        {
            self.bucket = bucket
            self.key = key
            self.region = region
        }
    }
}

public struct ImportApplicationUsageInput: Swift.Sendable {
    /// Amazon S3 location to import application usage data from.
    /// This member is required.
    public var sourceS3Location: ApplicationCostProfilerClientTypes.SourceS3Location?

    public init(
        sourceS3Location: ApplicationCostProfilerClientTypes.SourceS3Location? = nil
    )
    {
        self.sourceS3Location = sourceS3Location
    }
}

public struct ImportApplicationUsageOutput: Swift.Sendable {
    /// ID of the import request.
    /// This member is required.
    public var importId: Swift.String?

    public init(
        importId: Swift.String? = nil
    )
    {
        self.importId = importId
    }
}

public struct ListReportDefinitionsInput: Swift.Sendable {
    /// The maximum number of results to return.
    public var maxResults: Swift.Int?
    /// The token value from a previous call to access the next page of results.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension ApplicationCostProfilerClientTypes {

    /// The configuration of a report in AWS Application Cost Profiler.
    public struct ReportDefinition: Swift.Sendable {
        /// Timestamp (milliseconds) when this report definition was created.
        public var createdAt: Foundation.Date?
        /// The location in Amazon Simple Storage Service (Amazon S3) the reports should be saved to.
        public var destinationS3Location: ApplicationCostProfilerClientTypes.S3Location?
        /// The format used for the generated reports.
        public var format: ApplicationCostProfilerClientTypes.Format?
        /// Timestamp (milliseconds) when this report definition was last updated.
        public var lastUpdatedAt: Foundation.Date?
        /// Description of the report
        public var reportDescription: Swift.String?
        /// The cadence at which the report is generated.
        public var reportFrequency: ApplicationCostProfilerClientTypes.ReportFrequency?
        /// The ID of the report.
        public var reportId: Swift.String?

        public init(
            createdAt: Foundation.Date? = nil,
            destinationS3Location: ApplicationCostProfilerClientTypes.S3Location? = nil,
            format: ApplicationCostProfilerClientTypes.Format? = nil,
            lastUpdatedAt: Foundation.Date? = nil,
            reportDescription: Swift.String? = nil,
            reportFrequency: ApplicationCostProfilerClientTypes.ReportFrequency? = nil,
            reportId: Swift.String? = nil
        )
        {
            self.createdAt = createdAt
            self.destinationS3Location = destinationS3Location
            self.format = format
            self.lastUpdatedAt = lastUpdatedAt
            self.reportDescription = reportDescription
            self.reportFrequency = reportFrequency
            self.reportId = reportId
        }
    }
}

public struct ListReportDefinitionsOutput: Swift.Sendable {
    /// The value of the next token, if it exists. Null if there are no more results.
    public var nextToken: Swift.String?
    /// The retrieved reports.
    public var reportDefinitions: [ApplicationCostProfilerClientTypes.ReportDefinition]?

    public init(
        nextToken: Swift.String? = nil,
        reportDefinitions: [ApplicationCostProfilerClientTypes.ReportDefinition]? = nil
    )
    {
        self.nextToken = nextToken
        self.reportDefinitions = reportDefinitions
    }
}

/// Your request exceeds one or more of the service quotas.
public struct ServiceQuotaExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceQuotaExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct PutReportDefinitionInput: Swift.Sendable {
    /// Required. Amazon Simple Storage Service (Amazon S3) location where Application Cost Profiler uploads the report.
    /// This member is required.
    public var destinationS3Location: ApplicationCostProfilerClientTypes.S3Location?
    /// Required. The format to use for the generated report.
    /// This member is required.
    public var format: ApplicationCostProfilerClientTypes.Format?
    /// Required. Description of the report.
    /// This member is required.
    public var reportDescription: Swift.String?
    /// Required. The cadence to generate the report.
    /// This member is required.
    public var reportFrequency: ApplicationCostProfilerClientTypes.ReportFrequency?
    /// Required. ID of the report. You can choose any valid string matching the pattern for the ID.
    /// This member is required.
    public var reportId: Swift.String?

    public init(
        destinationS3Location: ApplicationCostProfilerClientTypes.S3Location? = nil,
        format: ApplicationCostProfilerClientTypes.Format? = nil,
        reportDescription: Swift.String? = nil,
        reportFrequency: ApplicationCostProfilerClientTypes.ReportFrequency? = nil,
        reportId: Swift.String? = nil
    )
    {
        self.destinationS3Location = destinationS3Location
        self.format = format
        self.reportDescription = reportDescription
        self.reportFrequency = reportFrequency
        self.reportId = reportId
    }
}

public struct PutReportDefinitionOutput: Swift.Sendable {
    /// ID of the report.
    public var reportId: Swift.String?

    public init(
        reportId: Swift.String? = nil
    )
    {
        self.reportId = reportId
    }
}

public struct UpdateReportDefinitionInput: Swift.Sendable {
    /// Required. Amazon Simple Storage Service (Amazon S3) location where Application Cost Profiler uploads the report.
    /// This member is required.
    public var destinationS3Location: ApplicationCostProfilerClientTypes.S3Location?
    /// Required. The format to use for the generated report.
    /// This member is required.
    public var format: ApplicationCostProfilerClientTypes.Format?
    /// Required. Description of the report.
    /// This member is required.
    public var reportDescription: Swift.String?
    /// Required. The cadence to generate the report.
    /// This member is required.
    public var reportFrequency: ApplicationCostProfilerClientTypes.ReportFrequency?
    /// Required. ID of the report to update.
    /// This member is required.
    public var reportId: Swift.String?

    public init(
        destinationS3Location: ApplicationCostProfilerClientTypes.S3Location? = nil,
        format: ApplicationCostProfilerClientTypes.Format? = nil,
        reportDescription: Swift.String? = nil,
        reportFrequency: ApplicationCostProfilerClientTypes.ReportFrequency? = nil,
        reportId: Swift.String? = nil
    )
    {
        self.destinationS3Location = destinationS3Location
        self.format = format
        self.reportDescription = reportDescription
        self.reportFrequency = reportFrequency
        self.reportId = reportId
    }
}

public struct UpdateReportDefinitionOutput: Swift.Sendable {
    /// ID of the report.
    public var reportId: Swift.String?

    public init(
        reportId: Swift.String? = nil
    )
    {
        self.reportId = reportId
    }
}

extension DeleteReportDefinitionInput {

    static func urlPathProvider(_ value: DeleteReportDefinitionInput) -> Swift.String? {
        guard let reportId = value.reportId else {
            return nil
        }
        return "/reportDefinition/\(reportId.urlPercentEncoding())"
    }
}

extension GetReportDefinitionInput {

    static func urlPathProvider(_ value: GetReportDefinitionInput) -> Swift.String? {
        guard let reportId = value.reportId else {
            return nil
        }
        return "/reportDefinition/\(reportId.urlPercentEncoding())"
    }
}

extension ImportApplicationUsageInput {

    static func urlPathProvider(_ value: ImportApplicationUsageInput) -> Swift.String? {
        return "/importApplicationUsage"
    }
}

extension ListReportDefinitionsInput {

    static func urlPathProvider(_ value: ListReportDefinitionsInput) -> Swift.String? {
        return "/reportDefinition"
    }
}

extension ListReportDefinitionsInput {

    static func queryItemProvider(_ value: ListReportDefinitionsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension PutReportDefinitionInput {

    static func urlPathProvider(_ value: PutReportDefinitionInput) -> Swift.String? {
        return "/reportDefinition"
    }
}

extension UpdateReportDefinitionInput {

    static func urlPathProvider(_ value: UpdateReportDefinitionInput) -> Swift.String? {
        guard let reportId = value.reportId else {
            return nil
        }
        return "/reportDefinition/\(reportId.urlPercentEncoding())"
    }
}

extension ImportApplicationUsageInput {

    static func write(value: ImportApplicationUsageInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["sourceS3Location"].write(value.sourceS3Location, with: ApplicationCostProfilerClientTypes.SourceS3Location.write(value:to:))
    }
}

extension PutReportDefinitionInput {

    static func write(value: PutReportDefinitionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["destinationS3Location"].write(value.destinationS3Location, with: ApplicationCostProfilerClientTypes.S3Location.write(value:to:))
        try writer["format"].write(value.format)
        try writer["reportDescription"].write(value.reportDescription)
        try writer["reportFrequency"].write(value.reportFrequency)
        try writer["reportId"].write(value.reportId)
    }
}

extension UpdateReportDefinitionInput {

    static func write(value: UpdateReportDefinitionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["destinationS3Location"].write(value.destinationS3Location, with: ApplicationCostProfilerClientTypes.S3Location.write(value:to:))
        try writer["format"].write(value.format)
        try writer["reportDescription"].write(value.reportDescription)
        try writer["reportFrequency"].write(value.reportFrequency)
    }
}

extension DeleteReportDefinitionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteReportDefinitionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteReportDefinitionOutput()
        value.reportId = try reader["reportId"].readIfPresent()
        return value
    }
}

extension GetReportDefinitionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetReportDefinitionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetReportDefinitionOutput()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.destinationS3Location = try reader["destinationS3Location"].readIfPresent(with: ApplicationCostProfilerClientTypes.S3Location.read(from:))
        value.format = try reader["format"].readIfPresent() ?? .sdkUnknown("")
        value.lastUpdated = try reader["lastUpdated"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.reportDescription = try reader["reportDescription"].readIfPresent() ?? ""
        value.reportFrequency = try reader["reportFrequency"].readIfPresent() ?? .sdkUnknown("")
        value.reportId = try reader["reportId"].readIfPresent() ?? ""
        return value
    }
}

extension ImportApplicationUsageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ImportApplicationUsageOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ImportApplicationUsageOutput()
        value.importId = try reader["importId"].readIfPresent() ?? ""
        return value
    }
}

extension ListReportDefinitionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListReportDefinitionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListReportDefinitionsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.reportDefinitions = try reader["reportDefinitions"].readListIfPresent(memberReadingClosure: ApplicationCostProfilerClientTypes.ReportDefinition.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PutReportDefinitionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutReportDefinitionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutReportDefinitionOutput()
        value.reportId = try reader["reportId"].readIfPresent()
        return value
    }
}

extension UpdateReportDefinitionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateReportDefinitionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateReportDefinitionOutput()
        value.reportId = try reader["reportId"].readIfPresent()
        return value
    }
}

enum DeleteReportDefinitionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetReportDefinitionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ImportApplicationUsageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListReportDefinitionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutReportDefinitionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateReportDefinitionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ThrottlingException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ThrottlingException {
        let reader = baseError.errorBodyReader
        var value = ThrottlingException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServerException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalServerException {
        let reader = baseError.errorBodyReader
        var value = InternalServerException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceQuotaExceededException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ServiceQuotaExceededException {
        let reader = baseError.errorBodyReader
        var value = ServiceQuotaExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ApplicationCostProfilerClientTypes.S3Location {

    static func write(value: ApplicationCostProfilerClientTypes.S3Location?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bucket"].write(value.bucket)
        try writer["prefix"].write(value.`prefix`)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ApplicationCostProfilerClientTypes.S3Location {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ApplicationCostProfilerClientTypes.S3Location()
        value.bucket = try reader["bucket"].readIfPresent() ?? ""
        value.`prefix` = try reader["prefix"].readIfPresent() ?? ""
        return value
    }
}

extension ApplicationCostProfilerClientTypes.ReportDefinition {

    static func read(from reader: SmithyJSON.Reader) throws -> ApplicationCostProfilerClientTypes.ReportDefinition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ApplicationCostProfilerClientTypes.ReportDefinition()
        value.reportId = try reader["reportId"].readIfPresent()
        value.reportDescription = try reader["reportDescription"].readIfPresent()
        value.reportFrequency = try reader["reportFrequency"].readIfPresent()
        value.format = try reader["format"].readIfPresent()
        value.destinationS3Location = try reader["destinationS3Location"].readIfPresent(with: ApplicationCostProfilerClientTypes.S3Location.read(from:))
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdatedAt = try reader["lastUpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension ApplicationCostProfilerClientTypes.SourceS3Location {

    static func write(value: ApplicationCostProfilerClientTypes.SourceS3Location?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bucket"].write(value.bucket)
        try writer["key"].write(value.key)
        try writer["region"].write(value.region)
    }
}

public enum ApplicationCostProfilerClientTypes {}
