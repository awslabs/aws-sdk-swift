//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

import protocol ClientRuntime.PaginateToken
import struct ClientRuntime.PaginatorSequence

extension FisClient {
    /// Paginate over `[ListActionsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListActionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListActionsOutput`
    public func listActionsPaginated(input: ListActionsInput) -> ClientRuntime.PaginatorSequence<ListActionsInput, ListActionsOutput> {
        return ClientRuntime.PaginatorSequence<ListActionsInput, ListActionsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listActions(input:))
    }
}

extension ListActionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListActionsInput {
        return ListActionsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListActionsInput, OperationStackOutput == ListActionsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listActionsPaginated`
    /// to access the nested member `[FisClientTypes.ActionSummary]`
    /// - Returns: `[FisClientTypes.ActionSummary]`
    public func actions() async throws -> [FisClientTypes.ActionSummary] {
        return try await self.asyncCompactMap { item in item.actions }
    }
}
extension FisClient {
    /// Paginate over `[ListExperimentResolvedTargetsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListExperimentResolvedTargetsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListExperimentResolvedTargetsOutput`
    public func listExperimentResolvedTargetsPaginated(input: ListExperimentResolvedTargetsInput) -> ClientRuntime.PaginatorSequence<ListExperimentResolvedTargetsInput, ListExperimentResolvedTargetsOutput> {
        return ClientRuntime.PaginatorSequence<ListExperimentResolvedTargetsInput, ListExperimentResolvedTargetsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listExperimentResolvedTargets(input:))
    }
}

extension ListExperimentResolvedTargetsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListExperimentResolvedTargetsInput {
        return ListExperimentResolvedTargetsInput(
            experimentId: self.experimentId,
            maxResults: self.maxResults,
            nextToken: token,
            targetName: self.targetName
        )}
}

extension PaginatorSequence where OperationStackInput == ListExperimentResolvedTargetsInput, OperationStackOutput == ListExperimentResolvedTargetsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listExperimentResolvedTargetsPaginated`
    /// to access the nested member `[FisClientTypes.ResolvedTarget]`
    /// - Returns: `[FisClientTypes.ResolvedTarget]`
    public func resolvedTargets() async throws -> [FisClientTypes.ResolvedTarget] {
        return try await self.asyncCompactMap { item in item.resolvedTargets }
    }
}
extension FisClient {
    /// Paginate over `[ListExperimentsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListExperimentsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListExperimentsOutput`
    public func listExperimentsPaginated(input: ListExperimentsInput) -> ClientRuntime.PaginatorSequence<ListExperimentsInput, ListExperimentsOutput> {
        return ClientRuntime.PaginatorSequence<ListExperimentsInput, ListExperimentsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listExperiments(input:))
    }
}

extension ListExperimentsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListExperimentsInput {
        return ListExperimentsInput(
            experimentTemplateId: self.experimentTemplateId,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListExperimentsInput, OperationStackOutput == ListExperimentsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listExperimentsPaginated`
    /// to access the nested member `[FisClientTypes.ExperimentSummary]`
    /// - Returns: `[FisClientTypes.ExperimentSummary]`
    public func experiments() async throws -> [FisClientTypes.ExperimentSummary] {
        return try await self.asyncCompactMap { item in item.experiments }
    }
}
extension FisClient {
    /// Paginate over `[ListExperimentTemplatesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListExperimentTemplatesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListExperimentTemplatesOutput`
    public func listExperimentTemplatesPaginated(input: ListExperimentTemplatesInput) -> ClientRuntime.PaginatorSequence<ListExperimentTemplatesInput, ListExperimentTemplatesOutput> {
        return ClientRuntime.PaginatorSequence<ListExperimentTemplatesInput, ListExperimentTemplatesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listExperimentTemplates(input:))
    }
}

extension ListExperimentTemplatesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListExperimentTemplatesInput {
        return ListExperimentTemplatesInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListExperimentTemplatesInput, OperationStackOutput == ListExperimentTemplatesOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listExperimentTemplatesPaginated`
    /// to access the nested member `[FisClientTypes.ExperimentTemplateSummary]`
    /// - Returns: `[FisClientTypes.ExperimentTemplateSummary]`
    public func experimentTemplates() async throws -> [FisClientTypes.ExperimentTemplateSummary] {
        return try await self.asyncCompactMap { item in item.experimentTemplates }
    }
}
extension FisClient {
    /// Paginate over `[ListTargetAccountConfigurationsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListTargetAccountConfigurationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListTargetAccountConfigurationsOutput`
    public func listTargetAccountConfigurationsPaginated(input: ListTargetAccountConfigurationsInput) -> ClientRuntime.PaginatorSequence<ListTargetAccountConfigurationsInput, ListTargetAccountConfigurationsOutput> {
        return ClientRuntime.PaginatorSequence<ListTargetAccountConfigurationsInput, ListTargetAccountConfigurationsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listTargetAccountConfigurations(input:))
    }
}

extension ListTargetAccountConfigurationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListTargetAccountConfigurationsInput {
        return ListTargetAccountConfigurationsInput(
            experimentTemplateId: self.experimentTemplateId,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListTargetAccountConfigurationsInput, OperationStackOutput == ListTargetAccountConfigurationsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listTargetAccountConfigurationsPaginated`
    /// to access the nested member `[FisClientTypes.TargetAccountConfigurationSummary]`
    /// - Returns: `[FisClientTypes.TargetAccountConfigurationSummary]`
    public func targetAccountConfigurations() async throws -> [FisClientTypes.TargetAccountConfigurationSummary] {
        return try await self.asyncCompactMap { item in item.targetAccountConfigurations }
    }
}
extension FisClient {
    /// Paginate over `[ListTargetResourceTypesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListTargetResourceTypesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListTargetResourceTypesOutput`
    public func listTargetResourceTypesPaginated(input: ListTargetResourceTypesInput) -> ClientRuntime.PaginatorSequence<ListTargetResourceTypesInput, ListTargetResourceTypesOutput> {
        return ClientRuntime.PaginatorSequence<ListTargetResourceTypesInput, ListTargetResourceTypesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listTargetResourceTypes(input:))
    }
}

extension ListTargetResourceTypesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListTargetResourceTypesInput {
        return ListTargetResourceTypesInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListTargetResourceTypesInput, OperationStackOutput == ListTargetResourceTypesOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listTargetResourceTypesPaginated`
    /// to access the nested member `[FisClientTypes.TargetResourceTypeSummary]`
    /// - Returns: `[FisClientTypes.TargetResourceTypeSummary]`
    public func targetResourceTypes() async throws -> [FisClientTypes.TargetResourceTypeSummary] {
        return try await self.asyncCompactMap { item in item.targetResourceTypes }
    }
}
