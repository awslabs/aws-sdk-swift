// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension QLDBClient {
    /// Paginate over `[ListJournalKinesisStreamsForLedgerOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListJournalKinesisStreamsForLedgerInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListJournalKinesisStreamsForLedgerOutput`
    public func listJournalKinesisStreamsForLedgerPaginated(input: ListJournalKinesisStreamsForLedgerInput) -> ClientRuntime.PaginatorSequence<ListJournalKinesisStreamsForLedgerInput, ListJournalKinesisStreamsForLedgerOutput> {
        return ClientRuntime.PaginatorSequence<ListJournalKinesisStreamsForLedgerInput, ListJournalKinesisStreamsForLedgerOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listJournalKinesisStreamsForLedger(input:))
    }
}

extension ListJournalKinesisStreamsForLedgerInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListJournalKinesisStreamsForLedgerInput {
        return ListJournalKinesisStreamsForLedgerInput(
            ledgerName: self.ledgerName,
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension QLDBClient {
    /// Paginate over `[ListJournalS3ExportsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListJournalS3ExportsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListJournalS3ExportsOutput`
    public func listJournalS3ExportsPaginated(input: ListJournalS3ExportsInput) -> ClientRuntime.PaginatorSequence<ListJournalS3ExportsInput, ListJournalS3ExportsOutput> {
        return ClientRuntime.PaginatorSequence<ListJournalS3ExportsInput, ListJournalS3ExportsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listJournalS3Exports(input:))
    }
}

extension ListJournalS3ExportsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListJournalS3ExportsInput {
        return ListJournalS3ExportsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension QLDBClient {
    /// Paginate over `[ListJournalS3ExportsForLedgerOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListJournalS3ExportsForLedgerInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListJournalS3ExportsForLedgerOutput`
    public func listJournalS3ExportsForLedgerPaginated(input: ListJournalS3ExportsForLedgerInput) -> ClientRuntime.PaginatorSequence<ListJournalS3ExportsForLedgerInput, ListJournalS3ExportsForLedgerOutput> {
        return ClientRuntime.PaginatorSequence<ListJournalS3ExportsForLedgerInput, ListJournalS3ExportsForLedgerOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listJournalS3ExportsForLedger(input:))
    }
}

extension ListJournalS3ExportsForLedgerInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListJournalS3ExportsForLedgerInput {
        return ListJournalS3ExportsForLedgerInput(
            maxResults: self.maxResults,
            name: self.name,
            nextToken: token
        )}
}
extension QLDBClient {
    /// Paginate over `[ListLedgersOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListLedgersInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListLedgersOutput`
    public func listLedgersPaginated(input: ListLedgersInput) -> ClientRuntime.PaginatorSequence<ListLedgersInput, ListLedgersOutput> {
        return ClientRuntime.PaginatorSequence<ListLedgersInput, ListLedgersOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listLedgers(input:))
    }
}

extension ListLedgersInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListLedgersInput {
        return ListLedgersInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}
