// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AppflowClient {
    /// Paginate over `[DescribeConnectorProfilesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeConnectorProfilesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeConnectorProfilesOutput`
    public func describeConnectorProfilesPaginated(input: DescribeConnectorProfilesInput) -> ClientRuntime.PaginatorSequence<DescribeConnectorProfilesInput, DescribeConnectorProfilesOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<DescribeConnectorProfilesInput, DescribeConnectorProfilesOutput>(input: input, inputKey: \DescribeConnectorProfilesInput.nextToken, outputKey: \DescribeConnectorProfilesOutput.nextToken, paginationFunction: self.describeConnectorProfiles(input:))
=======
        return ClientRuntime.PaginatorSequence<DescribeConnectorProfilesInput, DescribeConnectorProfilesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.describeConnectorProfiles(input:))
>>>>>>> main
    }
}

extension DescribeConnectorProfilesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeConnectorProfilesInput {
        return DescribeConnectorProfilesInput(
            connectorLabel: self.connectorLabel,
            connectorProfileNames: self.connectorProfileNames,
            connectorType: self.connectorType,
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension AppflowClient {
    /// Paginate over `[DescribeConnectorsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeConnectorsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeConnectorsOutput`
    public func describeConnectorsPaginated(input: DescribeConnectorsInput) -> ClientRuntime.PaginatorSequence<DescribeConnectorsInput, DescribeConnectorsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<DescribeConnectorsInput, DescribeConnectorsOutput>(input: input, inputKey: \DescribeConnectorsInput.nextToken, outputKey: \DescribeConnectorsOutput.nextToken, paginationFunction: self.describeConnectors(input:))
=======
        return ClientRuntime.PaginatorSequence<DescribeConnectorsInput, DescribeConnectorsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.describeConnectors(input:))
>>>>>>> main
    }
}

extension DescribeConnectorsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeConnectorsInput {
        return DescribeConnectorsInput(
            connectorTypes: self.connectorTypes,
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension AppflowClient {
    /// Paginate over `[DescribeFlowExecutionRecordsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeFlowExecutionRecordsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeFlowExecutionRecordsOutput`
    public func describeFlowExecutionRecordsPaginated(input: DescribeFlowExecutionRecordsInput) -> ClientRuntime.PaginatorSequence<DescribeFlowExecutionRecordsInput, DescribeFlowExecutionRecordsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<DescribeFlowExecutionRecordsInput, DescribeFlowExecutionRecordsOutput>(input: input, inputKey: \DescribeFlowExecutionRecordsInput.nextToken, outputKey: \DescribeFlowExecutionRecordsOutput.nextToken, paginationFunction: self.describeFlowExecutionRecords(input:))
=======
        return ClientRuntime.PaginatorSequence<DescribeFlowExecutionRecordsInput, DescribeFlowExecutionRecordsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.describeFlowExecutionRecords(input:))
>>>>>>> main
    }
}

extension DescribeFlowExecutionRecordsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeFlowExecutionRecordsInput {
        return DescribeFlowExecutionRecordsInput(
            flowName: self.flowName,
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension AppflowClient {
    /// Paginate over `[ListConnectorsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListConnectorsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListConnectorsOutput`
    public func listConnectorsPaginated(input: ListConnectorsInput) -> ClientRuntime.PaginatorSequence<ListConnectorsInput, ListConnectorsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListConnectorsInput, ListConnectorsOutput>(input: input, inputKey: \ListConnectorsInput.nextToken, outputKey: \ListConnectorsOutput.nextToken, paginationFunction: self.listConnectors(input:))
=======
        return ClientRuntime.PaginatorSequence<ListConnectorsInput, ListConnectorsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listConnectors(input:))
>>>>>>> main
    }
}

extension ListConnectorsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListConnectorsInput {
        return ListConnectorsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension AppflowClient {
    /// Paginate over `[ListFlowsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListFlowsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListFlowsOutput`
    public func listFlowsPaginated(input: ListFlowsInput) -> ClientRuntime.PaginatorSequence<ListFlowsInput, ListFlowsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListFlowsInput, ListFlowsOutput>(input: input, inputKey: \ListFlowsInput.nextToken, outputKey: \ListFlowsOutput.nextToken, paginationFunction: self.listFlows(input:))
=======
        return ClientRuntime.PaginatorSequence<ListFlowsInput, ListFlowsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listFlows(input:))
>>>>>>> main
    }
}

extension ListFlowsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListFlowsInput {
        return ListFlowsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}
