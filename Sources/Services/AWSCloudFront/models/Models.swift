// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime
import SmithyReadWrite
import SmithyXML

extension AccessDenied {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> AccessDenied {
        var value = AccessDenied()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension AccessDenied {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// Access denied.
public struct AccessDenied: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDenied" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFrontClientTypes.ActiveTrustedKeyGroups {

    static func writingClosure(_ value: CloudFrontClientTypes.ActiveTrustedKeyGroups?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Enabled"].write(value.enabled)
        try writer["Items"].writeList(value.items, memberWritingClosure: CloudFrontClientTypes.KGKeyPairIds.writingClosure(_:to:), memberNodeInfo: "KeyGroup", isFlattened: false)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.ActiveTrustedKeyGroups {
        var value = CloudFrontClientTypes.ActiveTrustedKeyGroups()
        value.enabled = try reader["Enabled"].readIfPresent()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: CloudFrontClientTypes.KGKeyPairIds.readingClosure(from:), memberNodeInfo: "KeyGroup", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// A list of key groups, and the public keys in each key group, that CloudFront can use to verify the signatures of signed URLs and signed cookies.
    public struct ActiveTrustedKeyGroups: Swift.Equatable {
        /// This field is true if any of the key groups have public keys that CloudFront can use to verify the signatures of signed URLs and signed cookies. If not, this field is false.
        /// This member is required.
        public var enabled: Swift.Bool?
        /// A list of key groups, including the identifiers of the public keys in each key group that CloudFront can use to verify the signatures of signed URLs and signed cookies.
        public var items: [CloudFrontClientTypes.KGKeyPairIds]?
        /// The number of key groups in the list.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            enabled: Swift.Bool? = nil,
            items: [CloudFrontClientTypes.KGKeyPairIds]? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.enabled = enabled
            self.items = items
            self.quantity = quantity
        }
    }

}

extension CloudFrontClientTypes.ActiveTrustedSigners {

    static func writingClosure(_ value: CloudFrontClientTypes.ActiveTrustedSigners?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Enabled"].write(value.enabled)
        try writer["Items"].writeList(value.items, memberWritingClosure: CloudFrontClientTypes.Signer.writingClosure(_:to:), memberNodeInfo: "Signer", isFlattened: false)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.ActiveTrustedSigners {
        var value = CloudFrontClientTypes.ActiveTrustedSigners()
        value.enabled = try reader["Enabled"].readIfPresent()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: CloudFrontClientTypes.Signer.readingClosure(from:), memberNodeInfo: "Signer", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// A list of Amazon Web Services accounts and the active CloudFront key pairs in each account that CloudFront can use to verify the signatures of signed URLs and signed cookies.
    public struct ActiveTrustedSigners: Swift.Equatable {
        /// This field is true if any of the Amazon Web Services accounts in the list are configured as trusted signers. If not, this field is false.
        /// This member is required.
        public var enabled: Swift.Bool?
        /// A list of Amazon Web Services accounts and the identifiers of active CloudFront key pairs in each account that CloudFront can use to verify the signatures of signed URLs and signed cookies.
        public var items: [CloudFrontClientTypes.Signer]?
        /// The number of Amazon Web Services accounts in the list.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            enabled: Swift.Bool? = nil,
            items: [CloudFrontClientTypes.Signer]? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.enabled = enabled
            self.items = items
            self.quantity = quantity
        }
    }

}

extension CloudFrontClientTypes.AliasICPRecordal {

    static func writingClosure(_ value: CloudFrontClientTypes.AliasICPRecordal?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["CNAME"].write(value.cname)
        try writer["ICPRecordalStatus"].write(value.icpRecordalStatus)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.AliasICPRecordal {
        var value = CloudFrontClientTypes.AliasICPRecordal()
        value.cname = try reader["CNAME"].readIfPresent()
        value.icpRecordalStatus = try reader["ICPRecordalStatus"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// Amazon Web Services services in China customers must file for an Internet Content Provider (ICP) recordal if they want to serve content publicly on an alternate domain name, also known as a CNAME, that they've added to CloudFront. AliasICPRecordal provides the ICP recordal status for CNAMEs associated with distributions. The status is returned in the CloudFront response; you can't configure it yourself. For more information about ICP recordals, see [ Signup, Accounts, and Credentials](https://docs.amazonaws.cn/en_us/aws/latest/userguide/accounts-and-credentials.html) in Getting Started with Amazon Web Services services in China.
    public struct AliasICPRecordal: Swift.Equatable {
        /// A domain name associated with a distribution.
        public var cname: Swift.String?
        /// The Internet Content Provider (ICP) recordal status for a CNAME. The ICPRecordalStatus is set to APPROVED for all CNAMEs (aliases) in regions outside of China. The status values returned are the following:
        ///
        /// * APPROVED indicates that the associated CNAME has a valid ICP recordal number. Multiple CNAMEs can be associated with a distribution, and CNAMEs can correspond to different ICP recordals. To be marked as APPROVED, that is, valid to use with China region, a CNAME must have one ICP recordal number associated with it.
        ///
        /// * SUSPENDED indicates that the associated CNAME does not have a valid ICP recordal number.
        ///
        /// * PENDING indicates that CloudFront can't determine the ICP recordal status of the CNAME associated with the distribution because there was an error in trying to determine the status. You can try again to see if the error is resolved in which case CloudFront returns an APPROVED or SUSPENDED status.
        public var icpRecordalStatus: CloudFrontClientTypes.ICPRecordalStatus?

        public init(
            cname: Swift.String? = nil,
            icpRecordalStatus: CloudFrontClientTypes.ICPRecordalStatus? = nil
        )
        {
            self.cname = cname
            self.icpRecordalStatus = icpRecordalStatus
        }
    }

}

extension CloudFrontClientTypes.Aliases {

    static func writingClosure(_ value: CloudFrontClientTypes.Aliases?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Items"].writeList(value.items, memberWritingClosure: Swift.String.writingClosure(_:to:), memberNodeInfo: "CNAME", isFlattened: false)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.Aliases {
        var value = CloudFrontClientTypes.Aliases()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure(from:), memberNodeInfo: "CNAME", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// A complex type that contains information about CNAMEs (alternate domain names), if any, for this distribution.
    public struct Aliases: Swift.Equatable {
        /// A complex type that contains the CNAME aliases, if any, that you want to associate with this distribution.
        public var items: [Swift.String]?
        /// The number of CNAME aliases, if any, that you want to associate with this distribution.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            items: [Swift.String]? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.items = items
            self.quantity = quantity
        }
    }

}

extension CloudFrontClientTypes.AllowedMethods {

    static func writingClosure(_ value: CloudFrontClientTypes.AllowedMethods?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["CachedMethods"].write(value.cachedMethods, writingClosure: CloudFrontClientTypes.CachedMethods.writingClosure(_:to:))
        try writer["Items"].writeList(value.items, memberWritingClosure: CloudFrontClientTypes.Method.writingClosure(_:to:), memberNodeInfo: "Method", isFlattened: false)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.AllowedMethods {
        var value = CloudFrontClientTypes.AllowedMethods()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: CloudFrontClientTypes.Method.readingClosure(from:), memberNodeInfo: "Method", isFlattened: false)
        value.cachedMethods = try reader["CachedMethods"].readIfPresent(readingClosure: CloudFrontClientTypes.CachedMethods.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// A complex type that controls which HTTP methods CloudFront processes and forwards to your Amazon S3 bucket or your custom origin. There are three choices:
    ///
    /// * CloudFront forwards only GET and HEAD requests.
    ///
    /// * CloudFront forwards only GET, HEAD, and OPTIONS requests.
    ///
    /// * CloudFront forwards GET, HEAD, OPTIONS, PUT, PATCH, POST, and DELETE requests.
    ///
    ///
    /// If you pick the third choice, you may need to restrict access to your Amazon S3 bucket or to your custom origin so users can't perform operations that you don't want them to. For example, you might not want users to have permissions to delete objects from your origin.
    public struct AllowedMethods: Swift.Equatable {
        /// A complex type that controls whether CloudFront caches the response to requests using the specified HTTP methods. There are two choices:
        ///
        /// * CloudFront caches responses to GET and HEAD requests.
        ///
        /// * CloudFront caches responses to GET, HEAD, and OPTIONS requests.
        ///
        ///
        /// If you pick the second choice for your Amazon S3 Origin, you may need to forward Access-Control-Request-Method, Access-Control-Request-Headers, and Origin headers for the responses to be cached correctly.
        public var cachedMethods: CloudFrontClientTypes.CachedMethods?
        /// A complex type that contains the HTTP methods that you want CloudFront to process and forward to your origin.
        /// This member is required.
        public var items: [CloudFrontClientTypes.Method]?
        /// The number of HTTP methods that you want CloudFront to forward to your origin. Valid values are 2 (for GET and HEAD requests), 3 (for GET, HEAD, and OPTIONS requests) and 7 (for GET, HEAD, OPTIONS, PUT, PATCH, POST, and DELETE requests).
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            cachedMethods: CloudFrontClientTypes.CachedMethods? = nil,
            items: [CloudFrontClientTypes.Method]? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.cachedMethods = cachedMethods
            self.items = items
            self.quantity = quantity
        }
    }

}

extension AssociateAliasInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            guard let alias = alias else {
                let message = "Creating a URL Query Item failed. alias is required and must not be nil."
                throw ClientRuntime.ClientError.unknownError(message)
            }
            let aliasQueryItem = ClientRuntime.URLQueryItem(name: "Alias".urlPercentEncoding(), value: Swift.String(alias).urlPercentEncoding())
            items.append(aliasQueryItem)
            return items
        }
    }
}

extension AssociateAliasInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let targetDistributionId = targetDistributionId else {
            return nil
        }
        return "/2020-05-31/distribution/\(targetDistributionId.urlPercentEncoding())/associate-alias"
    }
}

public struct AssociateAliasInput: Swift.Equatable {
    /// The alias (also known as a CNAME) to add to the target distribution.
    /// This member is required.
    public var alias: Swift.String?
    /// The ID of the distribution that you're associating the alias with.
    /// This member is required.
    public var targetDistributionId: Swift.String?

    public init(
        alias: Swift.String? = nil,
        targetDistributionId: Swift.String? = nil
    )
    {
        self.alias = alias
        self.targetDistributionId = targetDistributionId
    }
}

extension AssociateAliasOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> AssociateAliasOutput {
        let reader = responseReader
        var value = AssociateAliasOutput()
        return value
    }
}

public struct AssociateAliasOutput: Swift.Equatable {

    public init() { }
}

enum AssociateAliasOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension BatchTooLarge {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> BatchTooLarge {
        var value = BatchTooLarge()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension BatchTooLarge {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// Invalidation batch specified is too large.
public struct BatchTooLarge: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "BatchTooLarge" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CNAMEAlreadyExists {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CNAMEAlreadyExists {
        var value = CNAMEAlreadyExists()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension CNAMEAlreadyExists {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The CNAME specified is already defined for CloudFront.
public struct CNAMEAlreadyExists: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CNAMEAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFrontClientTypes.CacheBehavior {

    static func writingClosure(_ value: CloudFrontClientTypes.CacheBehavior?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["AllowedMethods"].write(value.allowedMethods, writingClosure: CloudFrontClientTypes.AllowedMethods.writingClosure(_:to:))
        try writer["CachePolicyId"].write(value.cachePolicyId)
        try writer["Compress"].write(value.compress)
        try writer["DefaultTTL"].write(value.defaultTTL)
        try writer["FieldLevelEncryptionId"].write(value.fieldLevelEncryptionId)
        try writer["ForwardedValues"].write(value.forwardedValues, writingClosure: CloudFrontClientTypes.ForwardedValues.writingClosure(_:to:))
        try writer["FunctionAssociations"].write(value.functionAssociations, writingClosure: CloudFrontClientTypes.FunctionAssociations.writingClosure(_:to:))
        try writer["LambdaFunctionAssociations"].write(value.lambdaFunctionAssociations, writingClosure: CloudFrontClientTypes.LambdaFunctionAssociations.writingClosure(_:to:))
        try writer["MaxTTL"].write(value.maxTTL)
        try writer["MinTTL"].write(value.minTTL)
        try writer["OriginRequestPolicyId"].write(value.originRequestPolicyId)
        try writer["PathPattern"].write(value.pathPattern)
        try writer["RealtimeLogConfigArn"].write(value.realtimeLogConfigArn)
        try writer["ResponseHeadersPolicyId"].write(value.responseHeadersPolicyId)
        try writer["SmoothStreaming"].write(value.smoothStreaming)
        try writer["TargetOriginId"].write(value.targetOriginId)
        try writer["TrustedKeyGroups"].write(value.trustedKeyGroups, writingClosure: CloudFrontClientTypes.TrustedKeyGroups.writingClosure(_:to:))
        try writer["TrustedSigners"].write(value.trustedSigners, writingClosure: CloudFrontClientTypes.TrustedSigners.writingClosure(_:to:))
        try writer["ViewerProtocolPolicy"].write(value.viewerProtocolPolicy)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.CacheBehavior {
        var value = CloudFrontClientTypes.CacheBehavior()
        value.pathPattern = try reader["PathPattern"].readIfPresent()
        value.targetOriginId = try reader["TargetOriginId"].readIfPresent()
        value.trustedSigners = try reader["TrustedSigners"].readIfPresent(readingClosure: CloudFrontClientTypes.TrustedSigners.readingClosure(from:))
        value.trustedKeyGroups = try reader["TrustedKeyGroups"].readIfPresent(readingClosure: CloudFrontClientTypes.TrustedKeyGroups.readingClosure(from:))
        value.viewerProtocolPolicy = try reader["ViewerProtocolPolicy"].readIfPresent()
        value.allowedMethods = try reader["AllowedMethods"].readIfPresent(readingClosure: CloudFrontClientTypes.AllowedMethods.readingClosure(from:))
        value.smoothStreaming = try reader["SmoothStreaming"].readIfPresent()
        value.compress = try reader["Compress"].readIfPresent()
        value.lambdaFunctionAssociations = try reader["LambdaFunctionAssociations"].readIfPresent(readingClosure: CloudFrontClientTypes.LambdaFunctionAssociations.readingClosure(from:))
        value.functionAssociations = try reader["FunctionAssociations"].readIfPresent(readingClosure: CloudFrontClientTypes.FunctionAssociations.readingClosure(from:))
        value.fieldLevelEncryptionId = try reader["FieldLevelEncryptionId"].readIfPresent()
        value.realtimeLogConfigArn = try reader["RealtimeLogConfigArn"].readIfPresent()
        value.cachePolicyId = try reader["CachePolicyId"].readIfPresent()
        value.originRequestPolicyId = try reader["OriginRequestPolicyId"].readIfPresent()
        value.responseHeadersPolicyId = try reader["ResponseHeadersPolicyId"].readIfPresent()
        value.forwardedValues = try reader["ForwardedValues"].readIfPresent(readingClosure: CloudFrontClientTypes.ForwardedValues.readingClosure(from:))
        value.minTTL = try reader["MinTTL"].readIfPresent()
        value.defaultTTL = try reader["DefaultTTL"].readIfPresent()
        value.maxTTL = try reader["MaxTTL"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// A complex type that describes how CloudFront processes requests. You must create at least as many cache behaviors (including the default cache behavior) as you have origins if you want CloudFront to serve objects from all of the origins. Each cache behavior specifies the one origin from which you want CloudFront to get objects. If you have two origins and only the default cache behavior, the default cache behavior will cause CloudFront to get objects from one of the origins, but the other origin is never used. For the current quota (formerly known as limit) on the number of cache behaviors that you can add to a distribution, see [Quotas](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html) in the Amazon CloudFront Developer Guide. If you don't want to specify any cache behaviors, include only an empty CacheBehaviors element. Don't include an empty CacheBehavior element because this is invalid. To delete all cache behaviors in an existing distribution, update the distribution configuration and include only an empty CacheBehaviors element. To add, change, or remove one or more cache behaviors, update the distribution configuration and specify all of the cache behaviors that you want to include in the updated distribution. For more information about cache behaviors, see [Cache Behavior Settings](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesCacheBehavior) in the Amazon CloudFront Developer Guide.
    public struct CacheBehavior: Swift.Equatable {
        /// A complex type that controls which HTTP methods CloudFront processes and forwards to your Amazon S3 bucket or your custom origin. There are three choices:
        ///
        /// * CloudFront forwards only GET and HEAD requests.
        ///
        /// * CloudFront forwards only GET, HEAD, and OPTIONS requests.
        ///
        /// * CloudFront forwards GET, HEAD, OPTIONS, PUT, PATCH, POST, and DELETE requests.
        ///
        ///
        /// If you pick the third choice, you may need to restrict access to your Amazon S3 bucket or to your custom origin so users can't perform operations that you don't want them to. For example, you might not want users to have permissions to delete objects from your origin.
        public var allowedMethods: CloudFrontClientTypes.AllowedMethods?
        /// The unique identifier of the cache policy that is attached to this cache behavior. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) or [Using the managed cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html) in the Amazon CloudFront Developer Guide. A CacheBehavior must include either a CachePolicyId or ForwardedValues. We recommend that you use a CachePolicyId.
        public var cachePolicyId: Swift.String?
        /// Whether you want CloudFront to automatically compress certain files for this cache behavior. If so, specify true; if not, specify false. For more information, see [Serving Compressed Files](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/ServingCompressedFiles.html) in the Amazon CloudFront Developer Guide.
        public var compress: Swift.Bool?
        /// This field is deprecated. We recommend that you use the DefaultTTL field in a cache policy instead of this field. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) or [Using the managed cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html) in the Amazon CloudFront Developer Guide. The default amount of time that you want objects to stay in CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has been updated. The value that you specify applies only when your origin does not add HTTP headers such as Cache-Control max-age, Cache-Control s-maxage, and Expires to objects. For more information, see [Managing How Long Content Stays in an Edge Cache (Expiration)](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html) in the Amazon CloudFront Developer Guide.
        @available(*, deprecated)
        public var defaultTTL: Swift.Int?
        /// The value of ID for the field-level encryption configuration that you want CloudFront to use for encrypting specific fields of data for this cache behavior.
        public var fieldLevelEncryptionId: Swift.String?
        /// This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field. For more information, see [Working with policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/working-with-policies.html) in the Amazon CloudFront Developer Guide. If you want to include values in the cache key, use a cache policy. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) or [Using the managed cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html) in the Amazon CloudFront Developer Guide. If you want to send values to the origin but not include them in the cache key, use an origin request policy. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy) or [Using the managed origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-origin-request-policies.html) in the Amazon CloudFront Developer Guide. A CacheBehavior must include either a CachePolicyId or ForwardedValues. We recommend that you use a CachePolicyId. A complex type that specifies how CloudFront handles query strings, cookies, and HTTP headers.
        @available(*, deprecated)
        public var forwardedValues: CloudFrontClientTypes.ForwardedValues?
        /// A list of CloudFront functions that are associated with this cache behavior. CloudFront functions must be published to the LIVE stage to associate them with a cache behavior.
        public var functionAssociations: CloudFrontClientTypes.FunctionAssociations?
        /// A complex type that contains zero or more Lambda@Edge function associations for a cache behavior.
        public var lambdaFunctionAssociations: CloudFrontClientTypes.LambdaFunctionAssociations?
        /// This field is deprecated. We recommend that you use the MaxTTL field in a cache policy instead of this field. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) or [Using the managed cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html) in the Amazon CloudFront Developer Guide. The maximum amount of time that you want objects to stay in CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has been updated. The value that you specify applies only when your origin adds HTTP headers such as Cache-Control max-age, Cache-Control s-maxage, and Expires to objects. For more information, see [Managing How Long Content Stays in an Edge Cache (Expiration)](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html) in the Amazon CloudFront Developer Guide.
        @available(*, deprecated)
        public var maxTTL: Swift.Int?
        /// This field is deprecated. We recommend that you use the MinTTL field in a cache policy instead of this field. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) or [Using the managed cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html) in the Amazon CloudFront Developer Guide. The minimum amount of time that you want objects to stay in CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has been updated. For more information, see [ Managing How Long Content Stays in an Edge Cache (Expiration)](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html) in the Amazon CloudFront Developer Guide. You must specify 0 for MinTTL if you configure CloudFront to forward all headers to your origin (under Headers, if you specify 1 for Quantity and * for Name).
        @available(*, deprecated)
        public var minTTL: Swift.Int?
        /// The unique identifier of the origin request policy that is attached to this cache behavior. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy) or [Using the managed origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-origin-request-policies.html) in the Amazon CloudFront Developer Guide.
        public var originRequestPolicyId: Swift.String?
        /// The pattern (for example, images/*.jpg) that specifies which requests to apply the behavior to. When CloudFront receives a viewer request, the requested path is compared with path patterns in the order in which cache behaviors are listed in the distribution. You can optionally include a slash (/) at the beginning of the path pattern. For example, /images/*.jpg. CloudFront behavior is the same with or without the leading /. The path pattern for the default cache behavior is * and cannot be changed. If the request for an object does not match the path pattern for any cache behaviors, CloudFront applies the behavior in the default cache behavior. For more information, see [Path Pattern](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesPathPattern) in the Amazon CloudFront Developer Guide.
        /// This member is required.
        public var pathPattern: Swift.String?
        /// The Amazon Resource Name (ARN) of the real-time log configuration that is attached to this cache behavior. For more information, see [Real-time logs](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/real-time-logs.html) in the Amazon CloudFront Developer Guide.
        public var realtimeLogConfigArn: Swift.String?
        /// The identifier for a response headers policy.
        public var responseHeadersPolicyId: Swift.String?
        /// Indicates whether you want to distribute media files in the Microsoft Smooth Streaming format using the origin that is associated with this cache behavior. If so, specify true; if not, specify false. If you specify true for SmoothStreaming, you can still distribute other content using this cache behavior if the content matches the value of PathPattern.
        public var smoothStreaming: Swift.Bool?
        /// The value of ID for the origin that you want CloudFront to route requests to when they match this cache behavior.
        /// This member is required.
        public var targetOriginId: Swift.String?
        /// A list of key groups that CloudFront can use to validate signed URLs or signed cookies. When a cache behavior contains trusted key groups, CloudFront requires signed URLs or signed cookies for all requests that match the cache behavior. The URLs or cookies must be signed with a private key whose corresponding public key is in the key group. The signed URL or cookie contains information about which public key CloudFront should use to verify the signature. For more information, see [Serving private content](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html) in the Amazon CloudFront Developer Guide.
        public var trustedKeyGroups: CloudFrontClientTypes.TrustedKeyGroups?
        /// We recommend using TrustedKeyGroups instead of TrustedSigners. A list of Amazon Web Services account IDs whose public keys CloudFront can use to validate signed URLs or signed cookies. When a cache behavior contains trusted signers, CloudFront requires signed URLs or signed cookies for all requests that match the cache behavior. The URLs or cookies must be signed with the private key of a CloudFront key pair in the trusted signer's Amazon Web Services account. The signed URL or cookie contains information about which public key CloudFront should use to verify the signature. For more information, see [Serving private content](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html) in the Amazon CloudFront Developer Guide.
        public var trustedSigners: CloudFrontClientTypes.TrustedSigners?
        /// The protocol that viewers can use to access the files in the origin specified by TargetOriginId when a request matches the path pattern in PathPattern. You can specify the following options:
        ///
        /// * allow-all: Viewers can use HTTP or HTTPS.
        ///
        /// * redirect-to-https: If a viewer submits an HTTP request, CloudFront returns an HTTP status code of 301 (Moved Permanently) to the viewer along with the HTTPS URL. The viewer then resubmits the request using the new URL.
        ///
        /// * https-only: If a viewer sends an HTTP request, CloudFront returns an HTTP status code of 403 (Forbidden).
        ///
        ///
        /// For more information about requiring the HTTPS protocol, see [Requiring HTTPS Between Viewers and CloudFront](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https-viewers-to-cloudfront.html) in the Amazon CloudFront Developer Guide. The only way to guarantee that viewers retrieve an object that was fetched from the origin using HTTPS is never to use any other protocol to fetch the object. If you have recently changed from HTTP to HTTPS, we recommend that you clear your objects' cache because cached objects are protocol agnostic. That means that an edge location will return an object from the cache regardless of whether the current request protocol matches the protocol used previously. For more information, see [Managing Cache Expiration](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html) in the Amazon CloudFront Developer Guide.
        /// This member is required.
        public var viewerProtocolPolicy: CloudFrontClientTypes.ViewerProtocolPolicy?

        public init(
            allowedMethods: CloudFrontClientTypes.AllowedMethods? = nil,
            cachePolicyId: Swift.String? = nil,
            compress: Swift.Bool? = nil,
            defaultTTL: Swift.Int? = nil,
            fieldLevelEncryptionId: Swift.String? = nil,
            forwardedValues: CloudFrontClientTypes.ForwardedValues? = nil,
            functionAssociations: CloudFrontClientTypes.FunctionAssociations? = nil,
            lambdaFunctionAssociations: CloudFrontClientTypes.LambdaFunctionAssociations? = nil,
            maxTTL: Swift.Int? = nil,
            minTTL: Swift.Int? = nil,
            originRequestPolicyId: Swift.String? = nil,
            pathPattern: Swift.String? = nil,
            realtimeLogConfigArn: Swift.String? = nil,
            responseHeadersPolicyId: Swift.String? = nil,
            smoothStreaming: Swift.Bool? = nil,
            targetOriginId: Swift.String? = nil,
            trustedKeyGroups: CloudFrontClientTypes.TrustedKeyGroups? = nil,
            trustedSigners: CloudFrontClientTypes.TrustedSigners? = nil,
            viewerProtocolPolicy: CloudFrontClientTypes.ViewerProtocolPolicy? = nil
        )
        {
            self.allowedMethods = allowedMethods
            self.cachePolicyId = cachePolicyId
            self.compress = compress
            self.defaultTTL = defaultTTL
            self.fieldLevelEncryptionId = fieldLevelEncryptionId
            self.forwardedValues = forwardedValues
            self.functionAssociations = functionAssociations
            self.lambdaFunctionAssociations = lambdaFunctionAssociations
            self.maxTTL = maxTTL
            self.minTTL = minTTL
            self.originRequestPolicyId = originRequestPolicyId
            self.pathPattern = pathPattern
            self.realtimeLogConfigArn = realtimeLogConfigArn
            self.responseHeadersPolicyId = responseHeadersPolicyId
            self.smoothStreaming = smoothStreaming
            self.targetOriginId = targetOriginId
            self.trustedKeyGroups = trustedKeyGroups
            self.trustedSigners = trustedSigners
            self.viewerProtocolPolicy = viewerProtocolPolicy
        }
    }

}

extension CloudFrontClientTypes.CacheBehaviors {

    static func writingClosure(_ value: CloudFrontClientTypes.CacheBehaviors?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Items"].writeList(value.items, memberWritingClosure: CloudFrontClientTypes.CacheBehavior.writingClosure(_:to:), memberNodeInfo: "CacheBehavior", isFlattened: false)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.CacheBehaviors {
        var value = CloudFrontClientTypes.CacheBehaviors()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: CloudFrontClientTypes.CacheBehavior.readingClosure(from:), memberNodeInfo: "CacheBehavior", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// A complex type that contains zero or more CacheBehavior elements.
    public struct CacheBehaviors: Swift.Equatable {
        /// Optional: A complex type that contains cache behaviors for this distribution. If Quantity is 0, you can omit Items.
        public var items: [CloudFrontClientTypes.CacheBehavior]?
        /// The number of cache behaviors for this distribution.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            items: [CloudFrontClientTypes.CacheBehavior]? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.items = items
            self.quantity = quantity
        }
    }

}

extension CloudFrontClientTypes.CachePolicy {

    static func writingClosure(_ value: CloudFrontClientTypes.CachePolicy?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["CachePolicyConfig"].write(value.cachePolicyConfig, writingClosure: CloudFrontClientTypes.CachePolicyConfig.writingClosure(_:to:))
        try writer["Id"].write(value.id)
        try writer["LastModifiedTime"].writeTimestamp(value.lastModifiedTime, format: .dateTime)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.CachePolicy {
        var value = CloudFrontClientTypes.CachePolicy()
        value.id = try reader["Id"].readIfPresent()
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: .dateTime)
        value.cachePolicyConfig = try reader["CachePolicyConfig"].readIfPresent(readingClosure: CloudFrontClientTypes.CachePolicyConfig.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// A cache policy. When it's attached to a cache behavior, the cache policy determines the following:
    ///
    /// * The values that CloudFront includes in the cache key. These values can include HTTP headers, cookies, and URL query strings. CloudFront uses the cache key to find an object in its cache that it can return to the viewer.
    ///
    /// * The default, minimum, and maximum time to live (TTL) values that you want objects to stay in the CloudFront cache.
    ///
    ///
    /// The headers, cookies, and query strings that are included in the cache key are also included in requests that CloudFront sends to the origin. CloudFront sends a request when it can't find a valid object in its cache that matches the request's cache key. If you want to send values to the origin but not include them in the cache key, use OriginRequestPolicy.
    public struct CachePolicy: Swift.Equatable {
        /// The cache policy configuration.
        /// This member is required.
        public var cachePolicyConfig: CloudFrontClientTypes.CachePolicyConfig?
        /// The unique identifier for the cache policy.
        /// This member is required.
        public var id: Swift.String?
        /// The date and time when the cache policy was last modified.
        /// This member is required.
        public var lastModifiedTime: ClientRuntime.Date?

        public init(
            cachePolicyConfig: CloudFrontClientTypes.CachePolicyConfig? = nil,
            id: Swift.String? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil
        )
        {
            self.cachePolicyConfig = cachePolicyConfig
            self.id = id
            self.lastModifiedTime = lastModifiedTime
        }
    }

}

extension CachePolicyAlreadyExists {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CachePolicyAlreadyExists {
        var value = CachePolicyAlreadyExists()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension CachePolicyAlreadyExists {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// A cache policy with this name already exists. You must provide a unique name. To modify an existing cache policy, use UpdateCachePolicy.
public struct CachePolicyAlreadyExists: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CachePolicyAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFrontClientTypes.CachePolicyConfig {

    static func writingClosure(_ value: CloudFrontClientTypes.CachePolicyConfig?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Comment"].write(value.comment)
        try writer["DefaultTTL"].write(value.defaultTTL)
        try writer["MaxTTL"].write(value.maxTTL)
        try writer["MinTTL"].write(value.minTTL)
        try writer["Name"].write(value.name)
        try writer["ParametersInCacheKeyAndForwardedToOrigin"].write(value.parametersInCacheKeyAndForwardedToOrigin, writingClosure: CloudFrontClientTypes.ParametersInCacheKeyAndForwardedToOrigin.writingClosure(_:to:))
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.CachePolicyConfig {
        var value = CloudFrontClientTypes.CachePolicyConfig()
        value.comment = try reader["Comment"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.defaultTTL = try reader["DefaultTTL"].readIfPresent()
        value.maxTTL = try reader["MaxTTL"].readIfPresent()
        value.minTTL = try reader["MinTTL"].readIfPresent()
        value.parametersInCacheKeyAndForwardedToOrigin = try reader["ParametersInCacheKeyAndForwardedToOrigin"].readIfPresent(readingClosure: CloudFrontClientTypes.ParametersInCacheKeyAndForwardedToOrigin.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// A cache policy configuration. This configuration determines the following:
    ///
    /// * The values that CloudFront includes in the cache key. These values can include HTTP headers, cookies, and URL query strings. CloudFront uses the cache key to find an object in its cache that it can return to the viewer.
    ///
    /// * The default, minimum, and maximum time to live (TTL) values that you want objects to stay in the CloudFront cache.
    ///
    ///
    /// The headers, cookies, and query strings that are included in the cache key are also included in requests that CloudFront sends to the origin. CloudFront sends a request when it can't find a valid object in its cache that matches the request's cache key. If you want to send values to the origin but not include them in the cache key, use OriginRequestPolicy.
    public struct CachePolicyConfig: Swift.Equatable {
        /// A comment to describe the cache policy. The comment cannot be longer than 128 characters.
        public var comment: Swift.String?
        /// The default amount of time, in seconds, that you want objects to stay in the CloudFront cache before CloudFront sends another request to the origin to see if the object has been updated. CloudFront uses this value as the object's time to live (TTL) only when the origin does not send Cache-Control or Expires headers with the object. For more information, see [Managing How Long Content Stays in an Edge Cache (Expiration)](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html) in the Amazon CloudFront Developer Guide. The default value for this field is 86400 seconds (one day). If the value of MinTTL is more than 86400 seconds, then the default value for this field is the same as the value of MinTTL.
        public var defaultTTL: Swift.Int?
        /// The maximum amount of time, in seconds, that objects stay in the CloudFront cache before CloudFront sends another request to the origin to see if the object has been updated. CloudFront uses this value only when the origin sends Cache-Control or Expires headers with the object. For more information, see [Managing How Long Content Stays in an Edge Cache (Expiration)](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html) in the Amazon CloudFront Developer Guide. The default value for this field is 31536000 seconds (one year). If the value of MinTTL or DefaultTTL is more than 31536000 seconds, then the default value for this field is the same as the value of DefaultTTL.
        public var maxTTL: Swift.Int?
        /// The minimum amount of time, in seconds, that you want objects to stay in the CloudFront cache before CloudFront sends another request to the origin to see if the object has been updated. For more information, see [Managing How Long Content Stays in an Edge Cache (Expiration)](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html) in the Amazon CloudFront Developer Guide.
        /// This member is required.
        public var minTTL: Swift.Int?
        /// A unique name to identify the cache policy.
        /// This member is required.
        public var name: Swift.String?
        /// The HTTP headers, cookies, and URL query strings to include in the cache key. The values included in the cache key are also included in requests that CloudFront sends to the origin.
        public var parametersInCacheKeyAndForwardedToOrigin: CloudFrontClientTypes.ParametersInCacheKeyAndForwardedToOrigin?

        public init(
            comment: Swift.String? = nil,
            defaultTTL: Swift.Int? = nil,
            maxTTL: Swift.Int? = nil,
            minTTL: Swift.Int? = nil,
            name: Swift.String? = nil,
            parametersInCacheKeyAndForwardedToOrigin: CloudFrontClientTypes.ParametersInCacheKeyAndForwardedToOrigin? = nil
        )
        {
            self.comment = comment
            self.defaultTTL = defaultTTL
            self.maxTTL = maxTTL
            self.minTTL = minTTL
            self.name = name
            self.parametersInCacheKeyAndForwardedToOrigin = parametersInCacheKeyAndForwardedToOrigin
        }
    }

}

extension CloudFrontClientTypes {
    public enum CachePolicyCookieBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case all
        case allexcept
        case `none`
        case whitelist
        case sdkUnknown(Swift.String)

        public static var allCases: [CachePolicyCookieBehavior] {
            return [
                .all,
                .allexcept,
                .none,
                .whitelist,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .all: return "all"
            case .allexcept: return "allExcept"
            case .none: return "none"
            case .whitelist: return "whitelist"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CachePolicyCookieBehavior(rawValue: rawValue) ?? CachePolicyCookieBehavior.sdkUnknown(rawValue)
        }
    }
}

extension CloudFrontClientTypes.CachePolicyCookiesConfig {

    static func writingClosure(_ value: CloudFrontClientTypes.CachePolicyCookiesConfig?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["CookieBehavior"].write(value.cookieBehavior)
        try writer["Cookies"].write(value.cookies, writingClosure: CloudFrontClientTypes.CookieNames.writingClosure(_:to:))
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.CachePolicyCookiesConfig {
        var value = CloudFrontClientTypes.CachePolicyCookiesConfig()
        value.cookieBehavior = try reader["CookieBehavior"].readIfPresent()
        value.cookies = try reader["Cookies"].readIfPresent(readingClosure: CloudFrontClientTypes.CookieNames.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// An object that determines whether any cookies in viewer requests (and if so, which cookies) are included in the cache key and in requests that CloudFront sends to the origin.
    public struct CachePolicyCookiesConfig: Swift.Equatable {
        /// Determines whether any cookies in viewer requests are included in the cache key and in requests that CloudFront sends to the origin. Valid values are:
        ///
        /// * none – No cookies in viewer requests are included in the cache key or in requests that CloudFront sends to the origin. Even when this field is set to none, any cookies that are listed in an OriginRequestPolicy are included in origin requests.
        ///
        /// * whitelist – Only the cookies in viewer requests that are listed in the CookieNames type are included in the cache key and in requests that CloudFront sends to the origin.
        ///
        /// * allExcept – All cookies in viewer requests are included in the cache key and in requests that CloudFront sends to the origin, except for those that are listed in the CookieNames type, which are not included.
        ///
        /// * all – All cookies in viewer requests are included in the cache key and in requests that CloudFront sends to the origin.
        /// This member is required.
        public var cookieBehavior: CloudFrontClientTypes.CachePolicyCookieBehavior?
        /// Contains a list of cookie names.
        public var cookies: CloudFrontClientTypes.CookieNames?

        public init(
            cookieBehavior: CloudFrontClientTypes.CachePolicyCookieBehavior? = nil,
            cookies: CloudFrontClientTypes.CookieNames? = nil
        )
        {
            self.cookieBehavior = cookieBehavior
            self.cookies = cookies
        }
    }

}

extension CloudFrontClientTypes {
    public enum CachePolicyHeaderBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `none`
        case whitelist
        case sdkUnknown(Swift.String)

        public static var allCases: [CachePolicyHeaderBehavior] {
            return [
                .none,
                .whitelist,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .none: return "none"
            case .whitelist: return "whitelist"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CachePolicyHeaderBehavior(rawValue: rawValue) ?? CachePolicyHeaderBehavior.sdkUnknown(rawValue)
        }
    }
}

extension CloudFrontClientTypes.CachePolicyHeadersConfig {

    static func writingClosure(_ value: CloudFrontClientTypes.CachePolicyHeadersConfig?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["HeaderBehavior"].write(value.headerBehavior)
        try writer["Headers"].write(value.headers, writingClosure: CloudFrontClientTypes.Headers.writingClosure(_:to:))
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.CachePolicyHeadersConfig {
        var value = CloudFrontClientTypes.CachePolicyHeadersConfig()
        value.headerBehavior = try reader["HeaderBehavior"].readIfPresent()
        value.headers = try reader["Headers"].readIfPresent(readingClosure: CloudFrontClientTypes.Headers.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// An object that determines whether any HTTP headers (and if so, which headers) are included in the cache key and in requests that CloudFront sends to the origin.
    public struct CachePolicyHeadersConfig: Swift.Equatable {
        /// Determines whether any HTTP headers are included in the cache key and in requests that CloudFront sends to the origin. Valid values are:
        ///
        /// * none – No HTTP headers are included in the cache key or in requests that CloudFront sends to the origin. Even when this field is set to none, any headers that are listed in an OriginRequestPolicy are included in origin requests.
        ///
        /// * whitelist – Only the HTTP headers that are listed in the Headers type are included in the cache key and in requests that CloudFront sends to the origin.
        /// This member is required.
        public var headerBehavior: CloudFrontClientTypes.CachePolicyHeaderBehavior?
        /// Contains a list of HTTP header names.
        public var headers: CloudFrontClientTypes.Headers?

        public init(
            headerBehavior: CloudFrontClientTypes.CachePolicyHeaderBehavior? = nil,
            headers: CloudFrontClientTypes.Headers? = nil
        )
        {
            self.headerBehavior = headerBehavior
            self.headers = headers
        }
    }

}

extension CachePolicyInUse {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CachePolicyInUse {
        var value = CachePolicyInUse()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension CachePolicyInUse {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// Cannot delete the cache policy because it is attached to one or more cache behaviors.
public struct CachePolicyInUse: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CachePolicyInUse" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFrontClientTypes.CachePolicyList {

    static func writingClosure(_ value: CloudFrontClientTypes.CachePolicyList?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Items"].writeList(value.items, memberWritingClosure: CloudFrontClientTypes.CachePolicySummary.writingClosure(_:to:), memberNodeInfo: "CachePolicySummary", isFlattened: false)
        try writer["MaxItems"].write(value.maxItems)
        try writer["NextMarker"].write(value.nextMarker)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.CachePolicyList {
        var value = CloudFrontClientTypes.CachePolicyList()
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.maxItems = try reader["MaxItems"].readIfPresent()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: CloudFrontClientTypes.CachePolicySummary.readingClosure(from:), memberNodeInfo: "CachePolicySummary", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// A list of cache policies.
    public struct CachePolicyList: Swift.Equatable {
        /// Contains the cache policies in the list.
        public var items: [CloudFrontClientTypes.CachePolicySummary]?
        /// The maximum number of cache policies requested.
        /// This member is required.
        public var maxItems: Swift.Int?
        /// If there are more items in the list than are in this response, this element is present. It contains the value that you should use in the Marker field of a subsequent request to continue listing cache policies where you left off.
        public var nextMarker: Swift.String?
        /// The total number of cache policies returned in the response.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            items: [CloudFrontClientTypes.CachePolicySummary]? = nil,
            maxItems: Swift.Int? = nil,
            nextMarker: Swift.String? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.items = items
            self.maxItems = maxItems
            self.nextMarker = nextMarker
            self.quantity = quantity
        }
    }

}

extension CloudFrontClientTypes {
    public enum CachePolicyQueryStringBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case all
        case allexcept
        case `none`
        case whitelist
        case sdkUnknown(Swift.String)

        public static var allCases: [CachePolicyQueryStringBehavior] {
            return [
                .all,
                .allexcept,
                .none,
                .whitelist,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .all: return "all"
            case .allexcept: return "allExcept"
            case .none: return "none"
            case .whitelist: return "whitelist"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CachePolicyQueryStringBehavior(rawValue: rawValue) ?? CachePolicyQueryStringBehavior.sdkUnknown(rawValue)
        }
    }
}

extension CloudFrontClientTypes.CachePolicyQueryStringsConfig {

    static func writingClosure(_ value: CloudFrontClientTypes.CachePolicyQueryStringsConfig?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["QueryStringBehavior"].write(value.queryStringBehavior)
        try writer["QueryStrings"].write(value.queryStrings, writingClosure: CloudFrontClientTypes.QueryStringNames.writingClosure(_:to:))
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.CachePolicyQueryStringsConfig {
        var value = CloudFrontClientTypes.CachePolicyQueryStringsConfig()
        value.queryStringBehavior = try reader["QueryStringBehavior"].readIfPresent()
        value.queryStrings = try reader["QueryStrings"].readIfPresent(readingClosure: CloudFrontClientTypes.QueryStringNames.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// An object that determines whether any URL query strings in viewer requests (and if so, which query strings) are included in the cache key and in requests that CloudFront sends to the origin.
    public struct CachePolicyQueryStringsConfig: Swift.Equatable {
        /// Determines whether any URL query strings in viewer requests are included in the cache key and in requests that CloudFront sends to the origin. Valid values are:
        ///
        /// * none – No query strings in viewer requests are included in the cache key or in requests that CloudFront sends to the origin. Even when this field is set to none, any query strings that are listed in an OriginRequestPolicy are included in origin requests.
        ///
        /// * whitelist – Only the query strings in viewer requests that are listed in the QueryStringNames type are included in the cache key and in requests that CloudFront sends to the origin.
        ///
        /// * allExcept – All query strings in viewer requests are included in the cache key and in requests that CloudFront sends to the origin, except those that are listed in the QueryStringNames type, which are not included.
        ///
        /// * all – All query strings in viewer requests are included in the cache key and in requests that CloudFront sends to the origin.
        /// This member is required.
        public var queryStringBehavior: CloudFrontClientTypes.CachePolicyQueryStringBehavior?
        /// Contains the specific query strings in viewer requests that either are or are not included in the cache key and in requests that CloudFront sends to the origin. The behavior depends on whether the QueryStringBehavior field in the CachePolicyQueryStringsConfig type is set to whitelist (the listed query strings are included) or allExcept (the listed query strings are not included, but all other query strings are).
        public var queryStrings: CloudFrontClientTypes.QueryStringNames?

        public init(
            queryStringBehavior: CloudFrontClientTypes.CachePolicyQueryStringBehavior? = nil,
            queryStrings: CloudFrontClientTypes.QueryStringNames? = nil
        )
        {
            self.queryStringBehavior = queryStringBehavior
            self.queryStrings = queryStrings
        }
    }

}

extension CloudFrontClientTypes.CachePolicySummary {

    static func writingClosure(_ value: CloudFrontClientTypes.CachePolicySummary?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["CachePolicy"].write(value.cachePolicy, writingClosure: CloudFrontClientTypes.CachePolicy.writingClosure(_:to:))
        try writer["Type"].write(value.type)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.CachePolicySummary {
        var value = CloudFrontClientTypes.CachePolicySummary()
        value.type = try reader["Type"].readIfPresent()
        value.cachePolicy = try reader["CachePolicy"].readIfPresent(readingClosure: CloudFrontClientTypes.CachePolicy.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// Contains a cache policy.
    public struct CachePolicySummary: Swift.Equatable {
        /// The cache policy.
        /// This member is required.
        public var cachePolicy: CloudFrontClientTypes.CachePolicy?
        /// The type of cache policy, either managed (created by Amazon Web Services) or custom (created in this Amazon Web Services account).
        /// This member is required.
        public var type: CloudFrontClientTypes.CachePolicyType?

        public init(
            cachePolicy: CloudFrontClientTypes.CachePolicy? = nil,
            type: CloudFrontClientTypes.CachePolicyType? = nil
        )
        {
            self.cachePolicy = cachePolicy
            self.type = type
        }
    }

}

extension CloudFrontClientTypes {
    public enum CachePolicyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case custom
        case managed
        case sdkUnknown(Swift.String)

        public static var allCases: [CachePolicyType] {
            return [
                .custom,
                .managed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .custom: return "custom"
            case .managed: return "managed"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CachePolicyType(rawValue: rawValue) ?? CachePolicyType.sdkUnknown(rawValue)
        }
    }
}

extension CloudFrontClientTypes.CachedMethods {

    static func writingClosure(_ value: CloudFrontClientTypes.CachedMethods?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Items"].writeList(value.items, memberWritingClosure: CloudFrontClientTypes.Method.writingClosure(_:to:), memberNodeInfo: "Method", isFlattened: false)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.CachedMethods {
        var value = CloudFrontClientTypes.CachedMethods()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: CloudFrontClientTypes.Method.readingClosure(from:), memberNodeInfo: "Method", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// A complex type that controls whether CloudFront caches the response to requests using the specified HTTP methods. There are two choices:
    ///
    /// * CloudFront caches responses to GET and HEAD requests.
    ///
    /// * CloudFront caches responses to GET, HEAD, and OPTIONS requests.
    ///
    ///
    /// If you pick the second choice for your Amazon S3 Origin, you may need to forward Access-Control-Request-Method, Access-Control-Request-Headers, and Origin headers for the responses to be cached correctly.
    public struct CachedMethods: Swift.Equatable {
        /// A complex type that contains the HTTP methods that you want CloudFront to cache responses to.
        /// This member is required.
        public var items: [CloudFrontClientTypes.Method]?
        /// The number of HTTP methods for which you want CloudFront to cache responses. Valid values are 2 (for caching responses to GET and HEAD requests) and 3 (for caching responses to GET, HEAD, and OPTIONS requests).
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            items: [CloudFrontClientTypes.Method]? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.items = items
            self.quantity = quantity
        }
    }

}

extension CannotChangeImmutablePublicKeyFields {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CannotChangeImmutablePublicKeyFields {
        var value = CannotChangeImmutablePublicKeyFields()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension CannotChangeImmutablePublicKeyFields {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// You can't change the value of a public key.
public struct CannotChangeImmutablePublicKeyFields: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CannotChangeImmutablePublicKeyFields" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CannotDeleteEntityWhileInUse {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CannotDeleteEntityWhileInUse {
        var value = CannotDeleteEntityWhileInUse()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension CannotDeleteEntityWhileInUse {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The Key Value Store entity cannot be deleted while it is in use.
public struct CannotDeleteEntityWhileInUse: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CannotDeleteEntityWhileInUse" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFrontClientTypes {
    public enum CertificateSource: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case acm
        case cloudfront
        case iam
        case sdkUnknown(Swift.String)

        public static var allCases: [CertificateSource] {
            return [
                .acm,
                .cloudfront,
                .iam,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .acm: return "acm"
            case .cloudfront: return "cloudfront"
            case .iam: return "iam"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CertificateSource(rawValue: rawValue) ?? CertificateSource.sdkUnknown(rawValue)
        }
    }
}

extension CloudFrontClientTypes.CloudFrontOriginAccessIdentity {

    static func writingClosure(_ value: CloudFrontClientTypes.CloudFrontOriginAccessIdentity?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["CloudFrontOriginAccessIdentityConfig"].write(value.cloudFrontOriginAccessIdentityConfig, writingClosure: CloudFrontClientTypes.CloudFrontOriginAccessIdentityConfig.writingClosure(_:to:))
        try writer["Id"].write(value.id)
        try writer["S3CanonicalUserId"].write(value.s3CanonicalUserId)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.CloudFrontOriginAccessIdentity {
        var value = CloudFrontClientTypes.CloudFrontOriginAccessIdentity()
        value.id = try reader["Id"].readIfPresent()
        value.s3CanonicalUserId = try reader["S3CanonicalUserId"].readIfPresent()
        value.cloudFrontOriginAccessIdentityConfig = try reader["CloudFrontOriginAccessIdentityConfig"].readIfPresent(readingClosure: CloudFrontClientTypes.CloudFrontOriginAccessIdentityConfig.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// CloudFront origin access identity.
    public struct CloudFrontOriginAccessIdentity: Swift.Equatable {
        /// The current configuration information for the identity.
        public var cloudFrontOriginAccessIdentityConfig: CloudFrontClientTypes.CloudFrontOriginAccessIdentityConfig?
        /// The ID for the origin access identity, for example, E74FTE3AJFJ256A.
        /// This member is required.
        public var id: Swift.String?
        /// The Amazon S3 canonical user ID for the origin access identity, used when giving the origin access identity read permission to an object in Amazon S3.
        /// This member is required.
        public var s3CanonicalUserId: Swift.String?

        public init(
            cloudFrontOriginAccessIdentityConfig: CloudFrontClientTypes.CloudFrontOriginAccessIdentityConfig? = nil,
            id: Swift.String? = nil,
            s3CanonicalUserId: Swift.String? = nil
        )
        {
            self.cloudFrontOriginAccessIdentityConfig = cloudFrontOriginAccessIdentityConfig
            self.id = id
            self.s3CanonicalUserId = s3CanonicalUserId
        }
    }

}

extension CloudFrontOriginAccessIdentityAlreadyExists {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontOriginAccessIdentityAlreadyExists {
        var value = CloudFrontOriginAccessIdentityAlreadyExists()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension CloudFrontOriginAccessIdentityAlreadyExists {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// If the CallerReference is a value you already sent in a previous request to create an identity but the content of the CloudFrontOriginAccessIdentityConfig is different from the original request, CloudFront returns a CloudFrontOriginAccessIdentityAlreadyExists error.
public struct CloudFrontOriginAccessIdentityAlreadyExists: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CloudFrontOriginAccessIdentityAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFrontClientTypes.CloudFrontOriginAccessIdentityConfig {

    static func writingClosure(_ value: CloudFrontClientTypes.CloudFrontOriginAccessIdentityConfig?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["CallerReference"].write(value.callerReference)
        try writer["Comment"].write(value.comment)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.CloudFrontOriginAccessIdentityConfig {
        var value = CloudFrontClientTypes.CloudFrontOriginAccessIdentityConfig()
        value.callerReference = try reader["CallerReference"].readIfPresent()
        value.comment = try reader["Comment"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// Origin access identity configuration. Send a GET request to the /CloudFront API version/CloudFront/identity ID/config resource.
    public struct CloudFrontOriginAccessIdentityConfig: Swift.Equatable {
        /// A unique value (for example, a date-time stamp) that ensures that the request can't be replayed. If the value of CallerReference is new (regardless of the content of the CloudFrontOriginAccessIdentityConfig object), a new origin access identity is created. If the CallerReference is a value already sent in a previous identity request, and the content of the CloudFrontOriginAccessIdentityConfig is identical to the original request (ignoring white space), the response includes the same information returned to the original request. If the CallerReference is a value you already sent in a previous request to create an identity, but the content of the CloudFrontOriginAccessIdentityConfig is different from the original request, CloudFront returns a CloudFrontOriginAccessIdentityAlreadyExists error.
        /// This member is required.
        public var callerReference: Swift.String?
        /// A comment to describe the origin access identity. The comment cannot be longer than 128 characters.
        /// This member is required.
        public var comment: Swift.String?

        public init(
            callerReference: Swift.String? = nil,
            comment: Swift.String? = nil
        )
        {
            self.callerReference = callerReference
            self.comment = comment
        }
    }

}

extension CloudFrontOriginAccessIdentityInUse {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontOriginAccessIdentityInUse {
        var value = CloudFrontOriginAccessIdentityInUse()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension CloudFrontOriginAccessIdentityInUse {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The Origin Access Identity specified is already in use.
public struct CloudFrontOriginAccessIdentityInUse: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CloudFrontOriginAccessIdentityInUse" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFrontClientTypes.CloudFrontOriginAccessIdentityList {

    static func writingClosure(_ value: CloudFrontClientTypes.CloudFrontOriginAccessIdentityList?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["IsTruncated"].write(value.isTruncated)
        try writer["Items"].writeList(value.items, memberWritingClosure: CloudFrontClientTypes.CloudFrontOriginAccessIdentitySummary.writingClosure(_:to:), memberNodeInfo: "CloudFrontOriginAccessIdentitySummary", isFlattened: false)
        try writer["Marker"].write(value.marker)
        try writer["MaxItems"].write(value.maxItems)
        try writer["NextMarker"].write(value.nextMarker)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.CloudFrontOriginAccessIdentityList {
        var value = CloudFrontClientTypes.CloudFrontOriginAccessIdentityList()
        value.marker = try reader["Marker"].readIfPresent()
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.maxItems = try reader["MaxItems"].readIfPresent()
        value.isTruncated = try reader["IsTruncated"].readIfPresent()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: CloudFrontClientTypes.CloudFrontOriginAccessIdentitySummary.readingClosure(from:), memberNodeInfo: "CloudFrontOriginAccessIdentitySummary", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// Lists the origin access identities for CloudFront.Send a GET request to the /CloudFront API version/origin-access-identity/cloudfront resource. The response includes a CloudFrontOriginAccessIdentityList element with zero or more CloudFrontOriginAccessIdentitySummary child elements. By default, your entire list of origin access identities is returned in one single page. If the list is long, you can paginate it using the MaxItems and Marker parameters.
    public struct CloudFrontOriginAccessIdentityList: Swift.Equatable {
        /// A flag that indicates whether more origin access identities remain to be listed. If your results were truncated, you can make a follow-up pagination request using the Marker request parameter to retrieve more items in the list.
        /// This member is required.
        public var isTruncated: Swift.Bool?
        /// A complex type that contains one CloudFrontOriginAccessIdentitySummary element for each origin access identity that was created by the current Amazon Web Services account.
        public var items: [CloudFrontClientTypes.CloudFrontOriginAccessIdentitySummary]?
        /// Use this when paginating results to indicate where to begin in your list of origin access identities. The results include identities in the list that occur after the marker. To get the next page of results, set the Marker to the value of the NextMarker from the current page's response (which is also the ID of the last identity on that page).
        /// This member is required.
        public var marker: Swift.String?
        /// The maximum number of origin access identities you want in the response body.
        /// This member is required.
        public var maxItems: Swift.Int?
        /// If IsTruncated is true, this element is present and contains the value you can use for the Marker request parameter to continue listing your origin access identities where they left off.
        public var nextMarker: Swift.String?
        /// The number of CloudFront origin access identities that were created by the current Amazon Web Services account.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            isTruncated: Swift.Bool? = nil,
            items: [CloudFrontClientTypes.CloudFrontOriginAccessIdentitySummary]? = nil,
            marker: Swift.String? = nil,
            maxItems: Swift.Int? = nil,
            nextMarker: Swift.String? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.isTruncated = isTruncated
            self.items = items
            self.marker = marker
            self.maxItems = maxItems
            self.nextMarker = nextMarker
            self.quantity = quantity
        }
    }

}

extension CloudFrontClientTypes.CloudFrontOriginAccessIdentitySummary {

    static func writingClosure(_ value: CloudFrontClientTypes.CloudFrontOriginAccessIdentitySummary?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Comment"].write(value.comment)
        try writer["Id"].write(value.id)
        try writer["S3CanonicalUserId"].write(value.s3CanonicalUserId)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.CloudFrontOriginAccessIdentitySummary {
        var value = CloudFrontClientTypes.CloudFrontOriginAccessIdentitySummary()
        value.id = try reader["Id"].readIfPresent()
        value.s3CanonicalUserId = try reader["S3CanonicalUserId"].readIfPresent()
        value.comment = try reader["Comment"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// Summary of the information about a CloudFront origin access identity.
    public struct CloudFrontOriginAccessIdentitySummary: Swift.Equatable {
        /// The comment for this origin access identity, as originally specified when created.
        /// This member is required.
        public var comment: Swift.String?
        /// The ID for the origin access identity. For example: E74FTE3AJFJ256A.
        /// This member is required.
        public var id: Swift.String?
        /// The Amazon S3 canonical user ID for the origin access identity, which you use when giving the origin access identity read permission to an object in Amazon S3.
        /// This member is required.
        public var s3CanonicalUserId: Swift.String?

        public init(
            comment: Swift.String? = nil,
            id: Swift.String? = nil,
            s3CanonicalUserId: Swift.String? = nil
        )
        {
            self.comment = comment
            self.id = id
            self.s3CanonicalUserId = s3CanonicalUserId
        }
    }

}

extension CloudFrontClientTypes.ConflictingAlias {

    static func writingClosure(_ value: CloudFrontClientTypes.ConflictingAlias?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["AccountId"].write(value.accountId)
        try writer["Alias"].write(value.alias)
        try writer["DistributionId"].write(value.distributionId)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.ConflictingAlias {
        var value = CloudFrontClientTypes.ConflictingAlias()
        value.alias = try reader["Alias"].readIfPresent()
        value.distributionId = try reader["DistributionId"].readIfPresent()
        value.accountId = try reader["AccountId"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// An alias (also called a CNAME) and the CloudFront distribution and Amazon Web Services account ID that it's associated with. The distribution and account IDs are partially hidden, which allows you to identify the distributions and accounts that you own, but helps to protect the information of ones that you don't own.
    public struct ConflictingAlias: Swift.Equatable {
        /// The (partially hidden) ID of the Amazon Web Services account that owns the distribution that's associated with the alias.
        public var accountId: Swift.String?
        /// An alias (also called a CNAME).
        public var alias: Swift.String?
        /// The (partially hidden) ID of the CloudFront distribution associated with the alias.
        public var distributionId: Swift.String?

        public init(
            accountId: Swift.String? = nil,
            alias: Swift.String? = nil,
            distributionId: Swift.String? = nil
        )
        {
            self.accountId = accountId
            self.alias = alias
            self.distributionId = distributionId
        }
    }

}

extension CloudFrontClientTypes.ConflictingAliasesList {

    static func writingClosure(_ value: CloudFrontClientTypes.ConflictingAliasesList?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Items"].writeList(value.items, memberWritingClosure: CloudFrontClientTypes.ConflictingAlias.writingClosure(_:to:), memberNodeInfo: "ConflictingAlias", isFlattened: false)
        try writer["MaxItems"].write(value.maxItems)
        try writer["NextMarker"].write(value.nextMarker)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.ConflictingAliasesList {
        var value = CloudFrontClientTypes.ConflictingAliasesList()
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.maxItems = try reader["MaxItems"].readIfPresent()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: CloudFrontClientTypes.ConflictingAlias.readingClosure(from:), memberNodeInfo: "ConflictingAlias", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// A list of aliases (also called CNAMEs) and the CloudFront distributions and Amazon Web Services accounts that they are associated with. In the list, the distribution and account IDs are partially hidden, which allows you to identify the distributions and accounts that you own, but helps to protect the information of ones that you don't own.
    public struct ConflictingAliasesList: Swift.Equatable {
        /// Contains the conflicting aliases in the list.
        public var items: [CloudFrontClientTypes.ConflictingAlias]?
        /// The maximum number of conflicting aliases requested.
        public var maxItems: Swift.Int?
        /// If there are more items in the list than are in this response, this element is present. It contains the value that you should use in the Marker field of a subsequent request to continue listing conflicting aliases where you left off.
        public var nextMarker: Swift.String?
        /// The number of conflicting aliases returned in the response.
        public var quantity: Swift.Int?

        public init(
            items: [CloudFrontClientTypes.ConflictingAlias]? = nil,
            maxItems: Swift.Int? = nil,
            nextMarker: Swift.String? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.items = items
            self.maxItems = maxItems
            self.nextMarker = nextMarker
            self.quantity = quantity
        }
    }

}

extension CloudFrontClientTypes.ContentTypeProfile {

    static func writingClosure(_ value: CloudFrontClientTypes.ContentTypeProfile?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["ContentType"].write(value.contentType)
        try writer["Format"].write(value.format)
        try writer["ProfileId"].write(value.profileId)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.ContentTypeProfile {
        var value = CloudFrontClientTypes.ContentTypeProfile()
        value.format = try reader["Format"].readIfPresent()
        value.profileId = try reader["ProfileId"].readIfPresent()
        value.contentType = try reader["ContentType"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// A field-level encryption content type profile.
    public struct ContentTypeProfile: Swift.Equatable {
        /// The content type for a field-level encryption content type-profile mapping.
        /// This member is required.
        public var contentType: Swift.String?
        /// The format for a field-level encryption content type-profile mapping.
        /// This member is required.
        public var format: CloudFrontClientTypes.Format?
        /// The profile ID for a field-level encryption content type-profile mapping.
        public var profileId: Swift.String?

        public init(
            contentType: Swift.String? = nil,
            format: CloudFrontClientTypes.Format? = nil,
            profileId: Swift.String? = nil
        )
        {
            self.contentType = contentType
            self.format = format
            self.profileId = profileId
        }
    }

}

extension CloudFrontClientTypes.ContentTypeProfileConfig {

    static func writingClosure(_ value: CloudFrontClientTypes.ContentTypeProfileConfig?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["ContentTypeProfiles"].write(value.contentTypeProfiles, writingClosure: CloudFrontClientTypes.ContentTypeProfiles.writingClosure(_:to:))
        try writer["ForwardWhenContentTypeIsUnknown"].write(value.forwardWhenContentTypeIsUnknown)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.ContentTypeProfileConfig {
        var value = CloudFrontClientTypes.ContentTypeProfileConfig()
        value.forwardWhenContentTypeIsUnknown = try reader["ForwardWhenContentTypeIsUnknown"].readIfPresent()
        value.contentTypeProfiles = try reader["ContentTypeProfiles"].readIfPresent(readingClosure: CloudFrontClientTypes.ContentTypeProfiles.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// The configuration for a field-level encryption content type-profile mapping.
    public struct ContentTypeProfileConfig: Swift.Equatable {
        /// The configuration for a field-level encryption content type-profile.
        public var contentTypeProfiles: CloudFrontClientTypes.ContentTypeProfiles?
        /// The setting in a field-level encryption content type-profile mapping that specifies what to do when an unknown content type is provided for the profile. If true, content is forwarded without being encrypted when the content type is unknown. If false (the default), an error is returned when the content type is unknown.
        /// This member is required.
        public var forwardWhenContentTypeIsUnknown: Swift.Bool?

        public init(
            contentTypeProfiles: CloudFrontClientTypes.ContentTypeProfiles? = nil,
            forwardWhenContentTypeIsUnknown: Swift.Bool? = nil
        )
        {
            self.contentTypeProfiles = contentTypeProfiles
            self.forwardWhenContentTypeIsUnknown = forwardWhenContentTypeIsUnknown
        }
    }

}

extension CloudFrontClientTypes.ContentTypeProfiles {

    static func writingClosure(_ value: CloudFrontClientTypes.ContentTypeProfiles?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Items"].writeList(value.items, memberWritingClosure: CloudFrontClientTypes.ContentTypeProfile.writingClosure(_:to:), memberNodeInfo: "ContentTypeProfile", isFlattened: false)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.ContentTypeProfiles {
        var value = CloudFrontClientTypes.ContentTypeProfiles()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: CloudFrontClientTypes.ContentTypeProfile.readingClosure(from:), memberNodeInfo: "ContentTypeProfile", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// Field-level encryption content type-profile.
    public struct ContentTypeProfiles: Swift.Equatable {
        /// Items in a field-level encryption content type-profile mapping.
        public var items: [CloudFrontClientTypes.ContentTypeProfile]?
        /// The number of field-level encryption content type-profile mappings.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            items: [CloudFrontClientTypes.ContentTypeProfile]? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.items = items
            self.quantity = quantity
        }
    }

}

extension CloudFrontClientTypes.ContinuousDeploymentPolicy {

    static func writingClosure(_ value: CloudFrontClientTypes.ContinuousDeploymentPolicy?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["ContinuousDeploymentPolicyConfig"].write(value.continuousDeploymentPolicyConfig, writingClosure: CloudFrontClientTypes.ContinuousDeploymentPolicyConfig.writingClosure(_:to:))
        try writer["Id"].write(value.id)
        try writer["LastModifiedTime"].writeTimestamp(value.lastModifiedTime, format: .dateTime)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.ContinuousDeploymentPolicy {
        var value = CloudFrontClientTypes.ContinuousDeploymentPolicy()
        value.id = try reader["Id"].readIfPresent()
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: .dateTime)
        value.continuousDeploymentPolicyConfig = try reader["ContinuousDeploymentPolicyConfig"].readIfPresent(readingClosure: CloudFrontClientTypes.ContinuousDeploymentPolicyConfig.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// A continuous deployment policy.
    public struct ContinuousDeploymentPolicy: Swift.Equatable {
        /// Contains the configuration for a continuous deployment policy.
        /// This member is required.
        public var continuousDeploymentPolicyConfig: CloudFrontClientTypes.ContinuousDeploymentPolicyConfig?
        /// The identifier of the continuous deployment policy.
        /// This member is required.
        public var id: Swift.String?
        /// The date and time the continuous deployment policy was last modified.
        /// This member is required.
        public var lastModifiedTime: ClientRuntime.Date?

        public init(
            continuousDeploymentPolicyConfig: CloudFrontClientTypes.ContinuousDeploymentPolicyConfig? = nil,
            id: Swift.String? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil
        )
        {
            self.continuousDeploymentPolicyConfig = continuousDeploymentPolicyConfig
            self.id = id
            self.lastModifiedTime = lastModifiedTime
        }
    }

}

extension ContinuousDeploymentPolicyAlreadyExists {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> ContinuousDeploymentPolicyAlreadyExists {
        var value = ContinuousDeploymentPolicyAlreadyExists()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension ContinuousDeploymentPolicyAlreadyExists {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// A continuous deployment policy with this configuration already exists.
public struct ContinuousDeploymentPolicyAlreadyExists: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ContinuousDeploymentPolicyAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFrontClientTypes.ContinuousDeploymentPolicyConfig {

    static func writingClosure(_ value: CloudFrontClientTypes.ContinuousDeploymentPolicyConfig?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Enabled"].write(value.enabled)
        try writer["StagingDistributionDnsNames"].write(value.stagingDistributionDnsNames, writingClosure: CloudFrontClientTypes.StagingDistributionDnsNames.writingClosure(_:to:))
        try writer["TrafficConfig"].write(value.trafficConfig, writingClosure: CloudFrontClientTypes.TrafficConfig.writingClosure(_:to:))
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.ContinuousDeploymentPolicyConfig {
        var value = CloudFrontClientTypes.ContinuousDeploymentPolicyConfig()
        value.stagingDistributionDnsNames = try reader["StagingDistributionDnsNames"].readIfPresent(readingClosure: CloudFrontClientTypes.StagingDistributionDnsNames.readingClosure(from:))
        value.enabled = try reader["Enabled"].readIfPresent()
        value.trafficConfig = try reader["TrafficConfig"].readIfPresent(readingClosure: CloudFrontClientTypes.TrafficConfig.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// Contains the configuration for a continuous deployment policy.
    public struct ContinuousDeploymentPolicyConfig: Swift.Equatable {
        /// A Boolean that indicates whether this continuous deployment policy is enabled (in effect). When this value is true, this policy is enabled and in effect. When this value is false, this policy is not enabled and has no effect.
        /// This member is required.
        public var enabled: Swift.Bool?
        /// The CloudFront domain name of the staging distribution. For example: d111111abcdef8.cloudfront.net.
        /// This member is required.
        public var stagingDistributionDnsNames: CloudFrontClientTypes.StagingDistributionDnsNames?
        /// Contains the parameters for routing production traffic from your primary to staging distributions.
        public var trafficConfig: CloudFrontClientTypes.TrafficConfig?

        public init(
            enabled: Swift.Bool? = nil,
            stagingDistributionDnsNames: CloudFrontClientTypes.StagingDistributionDnsNames? = nil,
            trafficConfig: CloudFrontClientTypes.TrafficConfig? = nil
        )
        {
            self.enabled = enabled
            self.stagingDistributionDnsNames = stagingDistributionDnsNames
            self.trafficConfig = trafficConfig
        }
    }

}

extension ContinuousDeploymentPolicyInUse {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> ContinuousDeploymentPolicyInUse {
        var value = ContinuousDeploymentPolicyInUse()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension ContinuousDeploymentPolicyInUse {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// You cannot delete a continuous deployment policy that is associated with a primary distribution.
public struct ContinuousDeploymentPolicyInUse: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ContinuousDeploymentPolicyInUse" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFrontClientTypes.ContinuousDeploymentPolicyList {

    static func writingClosure(_ value: CloudFrontClientTypes.ContinuousDeploymentPolicyList?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Items"].writeList(value.items, memberWritingClosure: CloudFrontClientTypes.ContinuousDeploymentPolicySummary.writingClosure(_:to:), memberNodeInfo: "ContinuousDeploymentPolicySummary", isFlattened: false)
        try writer["MaxItems"].write(value.maxItems)
        try writer["NextMarker"].write(value.nextMarker)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.ContinuousDeploymentPolicyList {
        var value = CloudFrontClientTypes.ContinuousDeploymentPolicyList()
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.maxItems = try reader["MaxItems"].readIfPresent()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: CloudFrontClientTypes.ContinuousDeploymentPolicySummary.readingClosure(from:), memberNodeInfo: "ContinuousDeploymentPolicySummary", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// Contains a list of continuous deployment policies.
    public struct ContinuousDeploymentPolicyList: Swift.Equatable {
        /// A list of continuous deployment policy items.
        public var items: [CloudFrontClientTypes.ContinuousDeploymentPolicySummary]?
        /// The maximum number of continuous deployment policies that were specified in your request.
        /// This member is required.
        public var maxItems: Swift.Int?
        /// Indicates the next page of continuous deployment policies. To get the next page of the list, use this value in the Marker field of your request.
        public var nextMarker: Swift.String?
        /// The total number of continuous deployment policies in your Amazon Web Services account, regardless of the MaxItems value.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            items: [CloudFrontClientTypes.ContinuousDeploymentPolicySummary]? = nil,
            maxItems: Swift.Int? = nil,
            nextMarker: Swift.String? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.items = items
            self.maxItems = maxItems
            self.nextMarker = nextMarker
            self.quantity = quantity
        }
    }

}

extension CloudFrontClientTypes.ContinuousDeploymentPolicySummary {

    static func writingClosure(_ value: CloudFrontClientTypes.ContinuousDeploymentPolicySummary?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["ContinuousDeploymentPolicy"].write(value.continuousDeploymentPolicy, writingClosure: CloudFrontClientTypes.ContinuousDeploymentPolicy.writingClosure(_:to:))
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.ContinuousDeploymentPolicySummary {
        var value = CloudFrontClientTypes.ContinuousDeploymentPolicySummary()
        value.continuousDeploymentPolicy = try reader["ContinuousDeploymentPolicy"].readIfPresent(readingClosure: CloudFrontClientTypes.ContinuousDeploymentPolicy.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// A summary of the information about your continuous deployment policies.
    public struct ContinuousDeploymentPolicySummary: Swift.Equatable {
        /// The continuous deployment policy.
        /// This member is required.
        public var continuousDeploymentPolicy: CloudFrontClientTypes.ContinuousDeploymentPolicy?

        public init(
            continuousDeploymentPolicy: CloudFrontClientTypes.ContinuousDeploymentPolicy? = nil
        )
        {
            self.continuousDeploymentPolicy = continuousDeploymentPolicy
        }
    }

}

extension CloudFrontClientTypes {
    public enum ContinuousDeploymentPolicyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case singleheader
        case singleweight
        case sdkUnknown(Swift.String)

        public static var allCases: [ContinuousDeploymentPolicyType] {
            return [
                .singleheader,
                .singleweight,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .singleheader: return "SingleHeader"
            case .singleweight: return "SingleWeight"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ContinuousDeploymentPolicyType(rawValue: rawValue) ?? ContinuousDeploymentPolicyType.sdkUnknown(rawValue)
        }
    }
}

extension CloudFrontClientTypes.ContinuousDeploymentSingleHeaderConfig {

    static func writingClosure(_ value: CloudFrontClientTypes.ContinuousDeploymentSingleHeaderConfig?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Header"].write(value.header)
        try writer["Value"].write(value.value)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.ContinuousDeploymentSingleHeaderConfig {
        var value = CloudFrontClientTypes.ContinuousDeploymentSingleHeaderConfig()
        value.header = try reader["Header"].readIfPresent()
        value.value = try reader["Value"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// This configuration determines which HTTP requests are sent to the staging distribution. If the HTTP request contains a header and value that matches what you specify here, the request is sent to the staging distribution. Otherwise the request is sent to the primary distribution.
    public struct ContinuousDeploymentSingleHeaderConfig: Swift.Equatable {
        /// The request header name that you want CloudFront to send to your staging distribution. The header must contain the prefix aws-cf-cd-.
        /// This member is required.
        public var header: Swift.String?
        /// The request header value.
        /// This member is required.
        public var value: Swift.String?

        public init(
            header: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.header = header
            self.value = value
        }
    }

}

extension CloudFrontClientTypes.ContinuousDeploymentSingleWeightConfig {

    static func writingClosure(_ value: CloudFrontClientTypes.ContinuousDeploymentSingleWeightConfig?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["SessionStickinessConfig"].write(value.sessionStickinessConfig, writingClosure: CloudFrontClientTypes.SessionStickinessConfig.writingClosure(_:to:))
        try writer["Weight"].write(value.weight)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.ContinuousDeploymentSingleWeightConfig {
        var value = CloudFrontClientTypes.ContinuousDeploymentSingleWeightConfig()
        value.weight = try reader["Weight"].readIfPresent()
        value.sessionStickinessConfig = try reader["SessionStickinessConfig"].readIfPresent(readingClosure: CloudFrontClientTypes.SessionStickinessConfig.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// Contains the percentage of traffic to send to a staging distribution.
    public struct ContinuousDeploymentSingleWeightConfig: Swift.Equatable {
        /// Session stickiness provides the ability to define multiple requests from a single viewer as a single session. This prevents the potentially inconsistent experience of sending some of a given user's requests to your staging distribution, while others are sent to your primary distribution. Define the session duration using TTL values.
        public var sessionStickinessConfig: CloudFrontClientTypes.SessionStickinessConfig?
        /// The percentage of traffic to send to a staging distribution, expressed as a decimal number between 0 and .15.
        /// This member is required.
        public var weight: Swift.Float?

        public init(
            sessionStickinessConfig: CloudFrontClientTypes.SessionStickinessConfig? = nil,
            weight: Swift.Float? = nil
        )
        {
            self.sessionStickinessConfig = sessionStickinessConfig
            self.weight = weight
        }
    }

}

extension CloudFrontClientTypes.CookieNames {

    static func writingClosure(_ value: CloudFrontClientTypes.CookieNames?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Items"].writeList(value.items, memberWritingClosure: Swift.String.writingClosure(_:to:), memberNodeInfo: "Name", isFlattened: false)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.CookieNames {
        var value = CloudFrontClientTypes.CookieNames()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure(from:), memberNodeInfo: "Name", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// Contains a list of cookie names.
    public struct CookieNames: Swift.Equatable {
        /// A list of cookie names.
        public var items: [Swift.String]?
        /// The number of cookie names in the Items list.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            items: [Swift.String]? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.items = items
            self.quantity = quantity
        }
    }

}

extension CloudFrontClientTypes.CookiePreference {

    static func writingClosure(_ value: CloudFrontClientTypes.CookiePreference?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Forward"].write(value.forward)
        try writer["WhitelistedNames"].write(value.whitelistedNames, writingClosure: CloudFrontClientTypes.CookieNames.writingClosure(_:to:))
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.CookiePreference {
        var value = CloudFrontClientTypes.CookiePreference()
        value.forward = try reader["Forward"].readIfPresent()
        value.whitelistedNames = try reader["WhitelistedNames"].readIfPresent(readingClosure: CloudFrontClientTypes.CookieNames.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field. If you want to include cookies in the cache key, use CookiesConfig in a cache policy. See CachePolicy. If you want to send cookies to the origin but not include them in the cache key, use CookiesConfig in an origin request policy. See OriginRequestPolicy. A complex type that specifies whether you want CloudFront to forward cookies to the origin and, if so, which ones. For more information about forwarding cookies to the origin, see [Caching Content Based on Cookies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Cookies.html) in the Amazon CloudFront Developer Guide.
    public struct CookiePreference: Swift.Equatable {
        /// This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field. If you want to include cookies in the cache key, use a cache policy. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) in the Amazon CloudFront Developer Guide. If you want to send cookies to the origin but not include them in the cache key, use origin request policy. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy) in the Amazon CloudFront Developer Guide. Specifies which cookies to forward to the origin for this cache behavior: all, none, or the list of cookies specified in the WhitelistedNames complex type. Amazon S3 doesn't process cookies. When the cache behavior is forwarding requests to an Amazon S3 origin, specify none for the Forward element.
        /// This member is required.
        public var forward: CloudFrontClientTypes.ItemSelection?
        /// This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field. If you want to include cookies in the cache key, use a cache policy. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) in the Amazon CloudFront Developer Guide. If you want to send cookies to the origin but not include them in the cache key, use an origin request policy. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy) in the Amazon CloudFront Developer Guide. Required if you specify whitelist for the value of Forward. A complex type that specifies how many different cookies you want CloudFront to forward to the origin for this cache behavior and, if you want to forward selected cookies, the names of those cookies. If you specify all or none for the value of Forward, omit WhitelistedNames. If you change the value of Forward from whitelist to all or none and you don't delete the WhitelistedNames element and its child elements, CloudFront deletes them automatically. For the current limit on the number of cookie names that you can whitelist for each cache behavior, see [ CloudFront Limits](https://docs.aws.amazon.com/general/latest/gr/xrefaws_service_limits.html#limits_cloudfront) in the Amazon Web Services General Reference.
        public var whitelistedNames: CloudFrontClientTypes.CookieNames?

        public init(
            forward: CloudFrontClientTypes.ItemSelection? = nil,
            whitelistedNames: CloudFrontClientTypes.CookieNames? = nil
        )
        {
            self.forward = forward
            self.whitelistedNames = whitelistedNames
        }
    }

}

extension CopyDistributionInput {
    static func writingClosure(_ value: CopyDistributionInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["CallerReference"].write(value.callerReference)
        try writer["Enabled"].write(value.enabled)
    }
}

extension CopyDistributionInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let ifMatch = ifMatch {
            items.add(Header(name: "If-Match", value: Swift.String(ifMatch)))
        }
        if let staging = staging {
            items.add(Header(name: "Staging", value: Swift.String(staging)))
        }
        return items
    }
}

extension CopyDistributionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let primaryDistributionId = primaryDistributionId else {
            return nil
        }
        return "/2020-05-31/distribution/\(primaryDistributionId.urlPercentEncoding())/copy"
    }
}

public struct CopyDistributionInput: Swift.Equatable {
    /// A value that uniquely identifies a request to create a resource. This helps to prevent CloudFront from creating a duplicate resource if you accidentally resubmit an identical request.
    /// This member is required.
    public var callerReference: Swift.String?
    /// A Boolean flag to specify the state of the staging distribution when it's created. When you set this value to True, the staging distribution is enabled. When you set this value to False, the staging distribution is disabled. If you omit this field, the default value is True.
    public var enabled: Swift.Bool?
    /// The version identifier of the primary distribution whose configuration you are copying. This is the ETag value returned in the response to GetDistribution and GetDistributionConfig.
    public var ifMatch: Swift.String?
    /// The identifier of the primary distribution whose configuration you are copying. To get a distribution ID, use ListDistributions.
    /// This member is required.
    public var primaryDistributionId: Swift.String?
    /// The type of distribution that your primary distribution will be copied to. The only valid value is True, indicating that you are copying to a staging distribution.
    public var staging: Swift.Bool?

    public init(
        callerReference: Swift.String? = nil,
        enabled: Swift.Bool? = nil,
        ifMatch: Swift.String? = nil,
        primaryDistributionId: Swift.String? = nil,
        staging: Swift.Bool? = nil
    )
    {
        self.callerReference = callerReference
        self.enabled = enabled
        self.ifMatch = ifMatch
        self.primaryDistributionId = primaryDistributionId
        self.staging = staging
    }
}

extension CopyDistributionOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> CopyDistributionOutput {
        let reader = responseReader
        var value = CopyDistributionOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        if let locationHeaderValue = httpResponse.headers.value(for: "Location") {
            value.location = locationHeaderValue
        } else {
            value.location = nil
        }
        value.distribution = try reader.read(readingClosure: CloudFrontClientTypes.Distribution.readingClosure(from:))
        return value
    }
}

public struct CopyDistributionOutput: Swift.Equatable {
    /// A distribution tells CloudFront where you want content to be delivered from, and the details about how to track and manage content delivery.
    public var distribution: CloudFrontClientTypes.Distribution?
    /// The version identifier for the current version of the staging distribution.
    public var eTag: Swift.String?
    /// The URL of the staging distribution.
    public var location: Swift.String?

    public init(
        distribution: CloudFrontClientTypes.Distribution? = nil,
        eTag: Swift.String? = nil,
        location: Swift.String? = nil
    )
    {
        self.distribution = distribution
        self.eTag = eTag
        self.location = location
    }
}

enum CopyDistributionOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension CreateCachePolicyInput {
    static func writingClosure(_ value: CreateCachePolicyInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["CachePolicyConfig"].write(value.cachePolicyConfig, writingClosure: CloudFrontClientTypes.CachePolicyConfig.writingClosure(_:to:))
    }
}

extension CreateCachePolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2020-05-31/cache-policy"
    }
}

public struct CreateCachePolicyInput: Swift.Equatable {
    /// A cache policy configuration.
    /// This member is required.
    public var cachePolicyConfig: CloudFrontClientTypes.CachePolicyConfig?

    public init(
        cachePolicyConfig: CloudFrontClientTypes.CachePolicyConfig? = nil
    )
    {
        self.cachePolicyConfig = cachePolicyConfig
    }
}

extension CreateCachePolicyOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> CreateCachePolicyOutput {
        let reader = responseReader
        var value = CreateCachePolicyOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        if let locationHeaderValue = httpResponse.headers.value(for: "Location") {
            value.location = locationHeaderValue
        } else {
            value.location = nil
        }
        value.cachePolicy = try reader.read(readingClosure: CloudFrontClientTypes.CachePolicy.readingClosure(from:))
        return value
    }
}

public struct CreateCachePolicyOutput: Swift.Equatable {
    /// A cache policy.
    public var cachePolicy: CloudFrontClientTypes.CachePolicy?
    /// The current version of the cache policy.
    public var eTag: Swift.String?
    /// The fully qualified URI of the cache policy just created.
    public var location: Swift.String?

    public init(
        cachePolicy: CloudFrontClientTypes.CachePolicy? = nil,
        eTag: Swift.String? = nil,
        location: Swift.String? = nil
    )
    {
        self.cachePolicy = cachePolicy
        self.eTag = eTag
        self.location = location
    }
}

enum CreateCachePolicyOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension CreateCloudFrontOriginAccessIdentityInput {
    static func writingClosure(_ value: CreateCloudFrontOriginAccessIdentityInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["CloudFrontOriginAccessIdentityConfig"].write(value.cloudFrontOriginAccessIdentityConfig, writingClosure: CloudFrontClientTypes.CloudFrontOriginAccessIdentityConfig.writingClosure(_:to:))
    }
}

extension CreateCloudFrontOriginAccessIdentityInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2020-05-31/origin-access-identity/cloudfront"
    }
}

/// The request to create a new origin access identity (OAI). An origin access identity is a special CloudFront user that you can associate with Amazon S3 origins, so that you can secure all or just some of your Amazon S3 content. For more information, see [ Restricting Access to Amazon S3 Content by Using an Origin Access Identity](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html) in the Amazon CloudFront Developer Guide.
public struct CreateCloudFrontOriginAccessIdentityInput: Swift.Equatable {
    /// The current configuration information for the identity.
    /// This member is required.
    public var cloudFrontOriginAccessIdentityConfig: CloudFrontClientTypes.CloudFrontOriginAccessIdentityConfig?

    public init(
        cloudFrontOriginAccessIdentityConfig: CloudFrontClientTypes.CloudFrontOriginAccessIdentityConfig? = nil
    )
    {
        self.cloudFrontOriginAccessIdentityConfig = cloudFrontOriginAccessIdentityConfig
    }
}

extension CreateCloudFrontOriginAccessIdentityOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> CreateCloudFrontOriginAccessIdentityOutput {
        let reader = responseReader
        var value = CreateCloudFrontOriginAccessIdentityOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        if let locationHeaderValue = httpResponse.headers.value(for: "Location") {
            value.location = locationHeaderValue
        } else {
            value.location = nil
        }
        value.cloudFrontOriginAccessIdentity = try reader.read(readingClosure: CloudFrontClientTypes.CloudFrontOriginAccessIdentity.readingClosure(from:))
        return value
    }
}

/// The returned result of the corresponding request.
public struct CreateCloudFrontOriginAccessIdentityOutput: Swift.Equatable {
    /// The origin access identity's information.
    public var cloudFrontOriginAccessIdentity: CloudFrontClientTypes.CloudFrontOriginAccessIdentity?
    /// The current version of the origin access identity created.
    public var eTag: Swift.String?
    /// The fully qualified URI of the new origin access identity just created.
    public var location: Swift.String?

    public init(
        cloudFrontOriginAccessIdentity: CloudFrontClientTypes.CloudFrontOriginAccessIdentity? = nil,
        eTag: Swift.String? = nil,
        location: Swift.String? = nil
    )
    {
        self.cloudFrontOriginAccessIdentity = cloudFrontOriginAccessIdentity
        self.eTag = eTag
        self.location = location
    }
}

enum CreateCloudFrontOriginAccessIdentityOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension CreateContinuousDeploymentPolicyInput {
    static func writingClosure(_ value: CreateContinuousDeploymentPolicyInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["ContinuousDeploymentPolicyConfig"].write(value.continuousDeploymentPolicyConfig, writingClosure: CloudFrontClientTypes.ContinuousDeploymentPolicyConfig.writingClosure(_:to:))
    }
}

extension CreateContinuousDeploymentPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2020-05-31/continuous-deployment-policy"
    }
}

public struct CreateContinuousDeploymentPolicyInput: Swift.Equatable {
    /// Contains the configuration for a continuous deployment policy.
    /// This member is required.
    public var continuousDeploymentPolicyConfig: CloudFrontClientTypes.ContinuousDeploymentPolicyConfig?

    public init(
        continuousDeploymentPolicyConfig: CloudFrontClientTypes.ContinuousDeploymentPolicyConfig? = nil
    )
    {
        self.continuousDeploymentPolicyConfig = continuousDeploymentPolicyConfig
    }
}

extension CreateContinuousDeploymentPolicyOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> CreateContinuousDeploymentPolicyOutput {
        let reader = responseReader
        var value = CreateContinuousDeploymentPolicyOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        if let locationHeaderValue = httpResponse.headers.value(for: "Location") {
            value.location = locationHeaderValue
        } else {
            value.location = nil
        }
        value.continuousDeploymentPolicy = try reader.read(readingClosure: CloudFrontClientTypes.ContinuousDeploymentPolicy.readingClosure(from:))
        return value
    }
}

public struct CreateContinuousDeploymentPolicyOutput: Swift.Equatable {
    /// A continuous deployment policy.
    public var continuousDeploymentPolicy: CloudFrontClientTypes.ContinuousDeploymentPolicy?
    /// The version identifier for the current version of the continuous deployment policy.
    public var eTag: Swift.String?
    /// The location of the continuous deployment policy.
    public var location: Swift.String?

    public init(
        continuousDeploymentPolicy: CloudFrontClientTypes.ContinuousDeploymentPolicy? = nil,
        eTag: Swift.String? = nil,
        location: Swift.String? = nil
    )
    {
        self.continuousDeploymentPolicy = continuousDeploymentPolicy
        self.eTag = eTag
        self.location = location
    }
}

enum CreateContinuousDeploymentPolicyOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension CreateDistributionInput {
    static func writingClosure(_ value: CreateDistributionInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["DistributionConfig"].write(value.distributionConfig, writingClosure: CloudFrontClientTypes.DistributionConfig.writingClosure(_:to:))
    }
}

extension CreateDistributionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2020-05-31/distribution"
    }
}

/// The request to create a new distribution.
public struct CreateDistributionInput: Swift.Equatable {
    /// The distribution's configuration information.
    /// This member is required.
    public var distributionConfig: CloudFrontClientTypes.DistributionConfig?

    public init(
        distributionConfig: CloudFrontClientTypes.DistributionConfig? = nil
    )
    {
        self.distributionConfig = distributionConfig
    }
}

extension CreateDistributionOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> CreateDistributionOutput {
        let reader = responseReader
        var value = CreateDistributionOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        if let locationHeaderValue = httpResponse.headers.value(for: "Location") {
            value.location = locationHeaderValue
        } else {
            value.location = nil
        }
        value.distribution = try reader.read(readingClosure: CloudFrontClientTypes.Distribution.readingClosure(from:))
        return value
    }
}

/// The returned result of the corresponding request.
public struct CreateDistributionOutput: Swift.Equatable {
    /// The distribution's information.
    public var distribution: CloudFrontClientTypes.Distribution?
    /// The current version of the distribution created.
    public var eTag: Swift.String?
    /// The fully qualified URI of the new distribution resource just created.
    public var location: Swift.String?

    public init(
        distribution: CloudFrontClientTypes.Distribution? = nil,
        eTag: Swift.String? = nil,
        location: Swift.String? = nil
    )
    {
        self.distribution = distribution
        self.eTag = eTag
        self.location = location
    }
}

enum CreateDistributionOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension CreateDistributionWithTagsInput {
    static func writingClosure(_ value: CreateDistributionWithTagsInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["DistributionConfigWithTags"].write(value.distributionConfigWithTags, writingClosure: CloudFrontClientTypes.DistributionConfigWithTags.writingClosure(_:to:))
    }
}

extension CreateDistributionWithTagsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "WithTags", value: nil))
            return items
        }
    }
}

extension CreateDistributionWithTagsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2020-05-31/distribution"
    }
}

/// The request to create a new distribution with tags.
public struct CreateDistributionWithTagsInput: Swift.Equatable {
    /// The distribution's configuration information.
    /// This member is required.
    public var distributionConfigWithTags: CloudFrontClientTypes.DistributionConfigWithTags?

    public init(
        distributionConfigWithTags: CloudFrontClientTypes.DistributionConfigWithTags? = nil
    )
    {
        self.distributionConfigWithTags = distributionConfigWithTags
    }
}

extension CreateDistributionWithTagsOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> CreateDistributionWithTagsOutput {
        let reader = responseReader
        var value = CreateDistributionWithTagsOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        if let locationHeaderValue = httpResponse.headers.value(for: "Location") {
            value.location = locationHeaderValue
        } else {
            value.location = nil
        }
        value.distribution = try reader.read(readingClosure: CloudFrontClientTypes.Distribution.readingClosure(from:))
        return value
    }
}

/// The returned result of the corresponding request.
public struct CreateDistributionWithTagsOutput: Swift.Equatable {
    /// The distribution's information.
    public var distribution: CloudFrontClientTypes.Distribution?
    /// The current version of the distribution created.
    public var eTag: Swift.String?
    /// The fully qualified URI of the new distribution resource just created.
    public var location: Swift.String?

    public init(
        distribution: CloudFrontClientTypes.Distribution? = nil,
        eTag: Swift.String? = nil,
        location: Swift.String? = nil
    )
    {
        self.distribution = distribution
        self.eTag = eTag
        self.location = location
    }
}

enum CreateDistributionWithTagsOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension CreateFieldLevelEncryptionConfigInput {
    static func writingClosure(_ value: CreateFieldLevelEncryptionConfigInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["FieldLevelEncryptionConfig"].write(value.fieldLevelEncryptionConfig, writingClosure: CloudFrontClientTypes.FieldLevelEncryptionConfig.writingClosure(_:to:))
    }
}

extension CreateFieldLevelEncryptionConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2020-05-31/field-level-encryption"
    }
}

public struct CreateFieldLevelEncryptionConfigInput: Swift.Equatable {
    /// The request to create a new field-level encryption configuration.
    /// This member is required.
    public var fieldLevelEncryptionConfig: CloudFrontClientTypes.FieldLevelEncryptionConfig?

    public init(
        fieldLevelEncryptionConfig: CloudFrontClientTypes.FieldLevelEncryptionConfig? = nil
    )
    {
        self.fieldLevelEncryptionConfig = fieldLevelEncryptionConfig
    }
}

extension CreateFieldLevelEncryptionConfigOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> CreateFieldLevelEncryptionConfigOutput {
        let reader = responseReader
        var value = CreateFieldLevelEncryptionConfigOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        if let locationHeaderValue = httpResponse.headers.value(for: "Location") {
            value.location = locationHeaderValue
        } else {
            value.location = nil
        }
        value.fieldLevelEncryption = try reader.read(readingClosure: CloudFrontClientTypes.FieldLevelEncryption.readingClosure(from:))
        return value
    }
}

public struct CreateFieldLevelEncryptionConfigOutput: Swift.Equatable {
    /// The current version of the field level encryption configuration. For example: E2QWRUHAPOMQZL.
    public var eTag: Swift.String?
    /// Returned when you create a new field-level encryption configuration.
    public var fieldLevelEncryption: CloudFrontClientTypes.FieldLevelEncryption?
    /// The fully qualified URI of the new configuration resource just created.
    public var location: Swift.String?

    public init(
        eTag: Swift.String? = nil,
        fieldLevelEncryption: CloudFrontClientTypes.FieldLevelEncryption? = nil,
        location: Swift.String? = nil
    )
    {
        self.eTag = eTag
        self.fieldLevelEncryption = fieldLevelEncryption
        self.location = location
    }
}

enum CreateFieldLevelEncryptionConfigOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension CreateFieldLevelEncryptionProfileInput {
    static func writingClosure(_ value: CreateFieldLevelEncryptionProfileInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["FieldLevelEncryptionProfileConfig"].write(value.fieldLevelEncryptionProfileConfig, writingClosure: CloudFrontClientTypes.FieldLevelEncryptionProfileConfig.writingClosure(_:to:))
    }
}

extension CreateFieldLevelEncryptionProfileInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2020-05-31/field-level-encryption-profile"
    }
}

public struct CreateFieldLevelEncryptionProfileInput: Swift.Equatable {
    /// The request to create a field-level encryption profile.
    /// This member is required.
    public var fieldLevelEncryptionProfileConfig: CloudFrontClientTypes.FieldLevelEncryptionProfileConfig?

    public init(
        fieldLevelEncryptionProfileConfig: CloudFrontClientTypes.FieldLevelEncryptionProfileConfig? = nil
    )
    {
        self.fieldLevelEncryptionProfileConfig = fieldLevelEncryptionProfileConfig
    }
}

extension CreateFieldLevelEncryptionProfileOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> CreateFieldLevelEncryptionProfileOutput {
        let reader = responseReader
        var value = CreateFieldLevelEncryptionProfileOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        if let locationHeaderValue = httpResponse.headers.value(for: "Location") {
            value.location = locationHeaderValue
        } else {
            value.location = nil
        }
        value.fieldLevelEncryptionProfile = try reader.read(readingClosure: CloudFrontClientTypes.FieldLevelEncryptionProfile.readingClosure(from:))
        return value
    }
}

public struct CreateFieldLevelEncryptionProfileOutput: Swift.Equatable {
    /// The current version of the field level encryption profile. For example: E2QWRUHAPOMQZL.
    public var eTag: Swift.String?
    /// Returned when you create a new field-level encryption profile.
    public var fieldLevelEncryptionProfile: CloudFrontClientTypes.FieldLevelEncryptionProfile?
    /// The fully qualified URI of the new profile resource just created.
    public var location: Swift.String?

    public init(
        eTag: Swift.String? = nil,
        fieldLevelEncryptionProfile: CloudFrontClientTypes.FieldLevelEncryptionProfile? = nil,
        location: Swift.String? = nil
    )
    {
        self.eTag = eTag
        self.fieldLevelEncryptionProfile = fieldLevelEncryptionProfile
        self.location = location
    }
}

enum CreateFieldLevelEncryptionProfileOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension CreateFunctionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateFunctionInput(functionConfig: \(Swift.String(describing: functionConfig)), name: \(Swift.String(describing: name)), functionCode: \"CONTENT_REDACTED\")"}
}

extension CreateFunctionInput {
    static func writingClosure(_ value: CreateFunctionInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["FunctionCode"].write(value.functionCode)
        try writer["FunctionConfig"].write(value.functionConfig, writingClosure: CloudFrontClientTypes.FunctionConfig.writingClosure(_:to:))
        try writer["Name"].write(value.name)
    }
}

extension CreateFunctionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2020-05-31/function"
    }
}

public struct CreateFunctionInput: Swift.Equatable {
    /// The function code. For more information about writing a CloudFront function, see [Writing function code for CloudFront Functions](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/writing-function-code.html) in the Amazon CloudFront Developer Guide.
    /// This member is required.
    public var functionCode: ClientRuntime.Data?
    /// Configuration information about the function, including an optional comment and the function's runtime.
    /// This member is required.
    public var functionConfig: CloudFrontClientTypes.FunctionConfig?
    /// A name to identify the function.
    /// This member is required.
    public var name: Swift.String?

    public init(
        functionCode: ClientRuntime.Data? = nil,
        functionConfig: CloudFrontClientTypes.FunctionConfig? = nil,
        name: Swift.String? = nil
    )
    {
        self.functionCode = functionCode
        self.functionConfig = functionConfig
        self.name = name
    }
}

extension CreateFunctionOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> CreateFunctionOutput {
        let reader = responseReader
        var value = CreateFunctionOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        if let locationHeaderValue = httpResponse.headers.value(for: "Location") {
            value.location = locationHeaderValue
        } else {
            value.location = nil
        }
        value.functionSummary = try reader.read(readingClosure: CloudFrontClientTypes.FunctionSummary.readingClosure(from:))
        return value
    }
}

public struct CreateFunctionOutput: Swift.Equatable {
    /// The version identifier for the current version of the CloudFront function.
    public var eTag: Swift.String?
    /// Contains configuration information and metadata about a CloudFront function.
    public var functionSummary: CloudFrontClientTypes.FunctionSummary?
    /// The URL of the CloudFront function. Use the URL to manage the function with the CloudFront API.
    public var location: Swift.String?

    public init(
        eTag: Swift.String? = nil,
        functionSummary: CloudFrontClientTypes.FunctionSummary? = nil,
        location: Swift.String? = nil
    )
    {
        self.eTag = eTag
        self.functionSummary = functionSummary
        self.location = location
    }
}

enum CreateFunctionOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension CreateInvalidationInput {
    static func writingClosure(_ value: CreateInvalidationInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["InvalidationBatch"].write(value.invalidationBatch, writingClosure: CloudFrontClientTypes.InvalidationBatch.writingClosure(_:to:))
    }
}

extension CreateInvalidationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let distributionId = distributionId else {
            return nil
        }
        return "/2020-05-31/distribution/\(distributionId.urlPercentEncoding())/invalidation"
    }
}

/// The request to create an invalidation.
public struct CreateInvalidationInput: Swift.Equatable {
    /// The distribution's id.
    /// This member is required.
    public var distributionId: Swift.String?
    /// The batch information for the invalidation.
    /// This member is required.
    public var invalidationBatch: CloudFrontClientTypes.InvalidationBatch?

    public init(
        distributionId: Swift.String? = nil,
        invalidationBatch: CloudFrontClientTypes.InvalidationBatch? = nil
    )
    {
        self.distributionId = distributionId
        self.invalidationBatch = invalidationBatch
    }
}

extension CreateInvalidationOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> CreateInvalidationOutput {
        let reader = responseReader
        var value = CreateInvalidationOutput()
        if let locationHeaderValue = httpResponse.headers.value(for: "Location") {
            value.location = locationHeaderValue
        } else {
            value.location = nil
        }
        value.invalidation = try reader.read(readingClosure: CloudFrontClientTypes.Invalidation.readingClosure(from:))
        return value
    }
}

/// The returned result of the corresponding request.
public struct CreateInvalidationOutput: Swift.Equatable {
    /// The invalidation's information.
    public var invalidation: CloudFrontClientTypes.Invalidation?
    /// The fully qualified URI of the distribution and invalidation batch request, including the Invalidation ID.
    public var location: Swift.String?

    public init(
        invalidation: CloudFrontClientTypes.Invalidation? = nil,
        location: Swift.String? = nil
    )
    {
        self.invalidation = invalidation
        self.location = location
    }
}

enum CreateInvalidationOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension CreateKeyGroupInput {
    static func writingClosure(_ value: CreateKeyGroupInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["KeyGroupConfig"].write(value.keyGroupConfig, writingClosure: CloudFrontClientTypes.KeyGroupConfig.writingClosure(_:to:))
    }
}

extension CreateKeyGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2020-05-31/key-group"
    }
}

public struct CreateKeyGroupInput: Swift.Equatable {
    /// A key group configuration.
    /// This member is required.
    public var keyGroupConfig: CloudFrontClientTypes.KeyGroupConfig?

    public init(
        keyGroupConfig: CloudFrontClientTypes.KeyGroupConfig? = nil
    )
    {
        self.keyGroupConfig = keyGroupConfig
    }
}

extension CreateKeyGroupOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> CreateKeyGroupOutput {
        let reader = responseReader
        var value = CreateKeyGroupOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        if let locationHeaderValue = httpResponse.headers.value(for: "Location") {
            value.location = locationHeaderValue
        } else {
            value.location = nil
        }
        value.keyGroup = try reader.read(readingClosure: CloudFrontClientTypes.KeyGroup.readingClosure(from:))
        return value
    }
}

public struct CreateKeyGroupOutput: Swift.Equatable {
    /// The identifier for this version of the key group.
    public var eTag: Swift.String?
    /// The key group that was just created.
    public var keyGroup: CloudFrontClientTypes.KeyGroup?
    /// The URL of the key group.
    public var location: Swift.String?

    public init(
        eTag: Swift.String? = nil,
        keyGroup: CloudFrontClientTypes.KeyGroup? = nil,
        location: Swift.String? = nil
    )
    {
        self.eTag = eTag
        self.keyGroup = keyGroup
        self.location = location
    }
}

enum CreateKeyGroupOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension CreateKeyValueStoreInput {
    static func writingClosure(_ value: CreateKeyValueStoreInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Comment"].write(value.comment)
        try writer["ImportSource"].write(value.importSource, writingClosure: CloudFrontClientTypes.ImportSource.writingClosure(_:to:))
        try writer["Name"].write(value.name)
    }
}

extension CreateKeyValueStoreInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2020-05-31/key-value-store"
    }
}

public struct CreateKeyValueStoreInput: Swift.Equatable {
    /// The comment of the Key Value Store.
    public var comment: Swift.String?
    /// The S3 bucket that provides the source for the import. The source must be in a valid JSON format.
    public var importSource: CloudFrontClientTypes.ImportSource?
    /// The name of the Key Value Store. The maximum length of the name is 32 characters.
    /// This member is required.
    public var name: Swift.String?

    public init(
        comment: Swift.String? = nil,
        importSource: CloudFrontClientTypes.ImportSource? = nil,
        name: Swift.String? = nil
    )
    {
        self.comment = comment
        self.importSource = importSource
        self.name = name
    }
}

extension CreateKeyValueStoreOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> CreateKeyValueStoreOutput {
        let reader = responseReader
        var value = CreateKeyValueStoreOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        if let locationHeaderValue = httpResponse.headers.value(for: "Location") {
            value.location = locationHeaderValue
        } else {
            value.location = nil
        }
        value.keyValueStore = try reader.read(readingClosure: CloudFrontClientTypes.KeyValueStore.readingClosure(from:))
        return value
    }
}

public struct CreateKeyValueStoreOutput: Swift.Equatable {
    /// The ETag in the resulting Key Value Store.
    public var eTag: Swift.String?
    /// The resulting Key Value Store.
    public var keyValueStore: CloudFrontClientTypes.KeyValueStore?
    /// The location of the resulting Key Value Store.
    public var location: Swift.String?

    public init(
        eTag: Swift.String? = nil,
        keyValueStore: CloudFrontClientTypes.KeyValueStore? = nil,
        location: Swift.String? = nil
    )
    {
        self.eTag = eTag
        self.keyValueStore = keyValueStore
        self.location = location
    }
}

enum CreateKeyValueStoreOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension CreateMonitoringSubscriptionInput {
    static func writingClosure(_ value: CreateMonitoringSubscriptionInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["MonitoringSubscription"].write(value.monitoringSubscription, writingClosure: CloudFrontClientTypes.MonitoringSubscription.writingClosure(_:to:))
    }
}

extension CreateMonitoringSubscriptionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let distributionId = distributionId else {
            return nil
        }
        return "/2020-05-31/distributions/\(distributionId.urlPercentEncoding())/monitoring-subscription"
    }
}

public struct CreateMonitoringSubscriptionInput: Swift.Equatable {
    /// The ID of the distribution that you are enabling metrics for.
    /// This member is required.
    public var distributionId: Swift.String?
    /// A monitoring subscription. This structure contains information about whether additional CloudWatch metrics are enabled for a given CloudFront distribution.
    /// This member is required.
    public var monitoringSubscription: CloudFrontClientTypes.MonitoringSubscription?

    public init(
        distributionId: Swift.String? = nil,
        monitoringSubscription: CloudFrontClientTypes.MonitoringSubscription? = nil
    )
    {
        self.distributionId = distributionId
        self.monitoringSubscription = monitoringSubscription
    }
}

extension CreateMonitoringSubscriptionOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> CreateMonitoringSubscriptionOutput {
        let reader = responseReader
        var value = CreateMonitoringSubscriptionOutput()
        value.monitoringSubscription = try reader.read(readingClosure: CloudFrontClientTypes.MonitoringSubscription.readingClosure(from:))
        return value
    }
}

public struct CreateMonitoringSubscriptionOutput: Swift.Equatable {
    /// A monitoring subscription. This structure contains information about whether additional CloudWatch metrics are enabled for a given CloudFront distribution.
    public var monitoringSubscription: CloudFrontClientTypes.MonitoringSubscription?

    public init(
        monitoringSubscription: CloudFrontClientTypes.MonitoringSubscription? = nil
    )
    {
        self.monitoringSubscription = monitoringSubscription
    }
}

enum CreateMonitoringSubscriptionOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension CreateOriginAccessControlInput {
    static func writingClosure(_ value: CreateOriginAccessControlInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["OriginAccessControlConfig"].write(value.originAccessControlConfig, writingClosure: CloudFrontClientTypes.OriginAccessControlConfig.writingClosure(_:to:))
    }
}

extension CreateOriginAccessControlInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2020-05-31/origin-access-control"
    }
}

public struct CreateOriginAccessControlInput: Swift.Equatable {
    /// Contains the origin access control.
    /// This member is required.
    public var originAccessControlConfig: CloudFrontClientTypes.OriginAccessControlConfig?

    public init(
        originAccessControlConfig: CloudFrontClientTypes.OriginAccessControlConfig? = nil
    )
    {
        self.originAccessControlConfig = originAccessControlConfig
    }
}

extension CreateOriginAccessControlOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> CreateOriginAccessControlOutput {
        let reader = responseReader
        var value = CreateOriginAccessControlOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        if let locationHeaderValue = httpResponse.headers.value(for: "Location") {
            value.location = locationHeaderValue
        } else {
            value.location = nil
        }
        value.originAccessControl = try reader.read(readingClosure: CloudFrontClientTypes.OriginAccessControl.readingClosure(from:))
        return value
    }
}

public struct CreateOriginAccessControlOutput: Swift.Equatable {
    /// The version identifier for the current version of the origin access control.
    public var eTag: Swift.String?
    /// The URL of the origin access control.
    public var location: Swift.String?
    /// Contains an origin access control.
    public var originAccessControl: CloudFrontClientTypes.OriginAccessControl?

    public init(
        eTag: Swift.String? = nil,
        location: Swift.String? = nil,
        originAccessControl: CloudFrontClientTypes.OriginAccessControl? = nil
    )
    {
        self.eTag = eTag
        self.location = location
        self.originAccessControl = originAccessControl
    }
}

enum CreateOriginAccessControlOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension CreateOriginRequestPolicyInput {
    static func writingClosure(_ value: CreateOriginRequestPolicyInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["OriginRequestPolicyConfig"].write(value.originRequestPolicyConfig, writingClosure: CloudFrontClientTypes.OriginRequestPolicyConfig.writingClosure(_:to:))
    }
}

extension CreateOriginRequestPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2020-05-31/origin-request-policy"
    }
}

public struct CreateOriginRequestPolicyInput: Swift.Equatable {
    /// An origin request policy configuration.
    /// This member is required.
    public var originRequestPolicyConfig: CloudFrontClientTypes.OriginRequestPolicyConfig?

    public init(
        originRequestPolicyConfig: CloudFrontClientTypes.OriginRequestPolicyConfig? = nil
    )
    {
        self.originRequestPolicyConfig = originRequestPolicyConfig
    }
}

extension CreateOriginRequestPolicyOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> CreateOriginRequestPolicyOutput {
        let reader = responseReader
        var value = CreateOriginRequestPolicyOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        if let locationHeaderValue = httpResponse.headers.value(for: "Location") {
            value.location = locationHeaderValue
        } else {
            value.location = nil
        }
        value.originRequestPolicy = try reader.read(readingClosure: CloudFrontClientTypes.OriginRequestPolicy.readingClosure(from:))
        return value
    }
}

public struct CreateOriginRequestPolicyOutput: Swift.Equatable {
    /// The current version of the origin request policy.
    public var eTag: Swift.String?
    /// The fully qualified URI of the origin request policy just created.
    public var location: Swift.String?
    /// An origin request policy.
    public var originRequestPolicy: CloudFrontClientTypes.OriginRequestPolicy?

    public init(
        eTag: Swift.String? = nil,
        location: Swift.String? = nil,
        originRequestPolicy: CloudFrontClientTypes.OriginRequestPolicy? = nil
    )
    {
        self.eTag = eTag
        self.location = location
        self.originRequestPolicy = originRequestPolicy
    }
}

enum CreateOriginRequestPolicyOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension CreatePublicKeyInput {
    static func writingClosure(_ value: CreatePublicKeyInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["PublicKeyConfig"].write(value.publicKeyConfig, writingClosure: CloudFrontClientTypes.PublicKeyConfig.writingClosure(_:to:))
    }
}

extension CreatePublicKeyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2020-05-31/public-key"
    }
}

public struct CreatePublicKeyInput: Swift.Equatable {
    /// A CloudFront public key configuration.
    /// This member is required.
    public var publicKeyConfig: CloudFrontClientTypes.PublicKeyConfig?

    public init(
        publicKeyConfig: CloudFrontClientTypes.PublicKeyConfig? = nil
    )
    {
        self.publicKeyConfig = publicKeyConfig
    }
}

extension CreatePublicKeyOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> CreatePublicKeyOutput {
        let reader = responseReader
        var value = CreatePublicKeyOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        if let locationHeaderValue = httpResponse.headers.value(for: "Location") {
            value.location = locationHeaderValue
        } else {
            value.location = nil
        }
        value.publicKey = try reader.read(readingClosure: CloudFrontClientTypes.PublicKey.readingClosure(from:))
        return value
    }
}

public struct CreatePublicKeyOutput: Swift.Equatable {
    /// The identifier for this version of the public key.
    public var eTag: Swift.String?
    /// The URL of the public key.
    public var location: Swift.String?
    /// The public key.
    public var publicKey: CloudFrontClientTypes.PublicKey?

    public init(
        eTag: Swift.String? = nil,
        location: Swift.String? = nil,
        publicKey: CloudFrontClientTypes.PublicKey? = nil
    )
    {
        self.eTag = eTag
        self.location = location
        self.publicKey = publicKey
    }
}

enum CreatePublicKeyOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension CreateRealtimeLogConfigInput {
    static func writingClosure(_ value: CreateRealtimeLogConfigInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["EndPoints"].writeList(value.endPoints, memberWritingClosure: CloudFrontClientTypes.EndPoint.writingClosure(_:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Fields"].writeList(value.fields, memberWritingClosure: Swift.String.writingClosure(_:to:), memberNodeInfo: "Field", isFlattened: false)
        try writer["Name"].write(value.name)
        try writer["SamplingRate"].write(value.samplingRate)
    }
}

extension CreateRealtimeLogConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2020-05-31/realtime-log-config"
    }
}

public struct CreateRealtimeLogConfigInput: Swift.Equatable {
    /// Contains information about the Amazon Kinesis data stream where you are sending real-time log data.
    /// This member is required.
    public var endPoints: [CloudFrontClientTypes.EndPoint]?
    /// A list of fields to include in each real-time log record. For more information about fields, see [Real-time log configuration fields](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/real-time-logs.html#understand-real-time-log-config-fields) in the Amazon CloudFront Developer Guide.
    /// This member is required.
    public var fields: [Swift.String]?
    /// A unique name to identify this real-time log configuration.
    /// This member is required.
    public var name: Swift.String?
    /// The sampling rate for this real-time log configuration. The sampling rate determines the percentage of viewer requests that are represented in the real-time log data. You must provide an integer between 1 and 100, inclusive.
    /// This member is required.
    public var samplingRate: Swift.Int?

    public init(
        endPoints: [CloudFrontClientTypes.EndPoint]? = nil,
        fields: [Swift.String]? = nil,
        name: Swift.String? = nil,
        samplingRate: Swift.Int? = nil
    )
    {
        self.endPoints = endPoints
        self.fields = fields
        self.name = name
        self.samplingRate = samplingRate
    }
}

extension CreateRealtimeLogConfigOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> CreateRealtimeLogConfigOutput {
        let reader = responseReader
        var value = CreateRealtimeLogConfigOutput()
        value.realtimeLogConfig = try reader["RealtimeLogConfig"].readIfPresent(readingClosure: CloudFrontClientTypes.RealtimeLogConfig.readingClosure(from:))
        return value
    }
}

public struct CreateRealtimeLogConfigOutput: Swift.Equatable {
    /// A real-time log configuration.
    public var realtimeLogConfig: CloudFrontClientTypes.RealtimeLogConfig?

    public init(
        realtimeLogConfig: CloudFrontClientTypes.RealtimeLogConfig? = nil
    )
    {
        self.realtimeLogConfig = realtimeLogConfig
    }
}

enum CreateRealtimeLogConfigOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension CreateResponseHeadersPolicyInput {
    static func writingClosure(_ value: CreateResponseHeadersPolicyInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["ResponseHeadersPolicyConfig"].write(value.responseHeadersPolicyConfig, writingClosure: CloudFrontClientTypes.ResponseHeadersPolicyConfig.writingClosure(_:to:))
    }
}

extension CreateResponseHeadersPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2020-05-31/response-headers-policy"
    }
}

public struct CreateResponseHeadersPolicyInput: Swift.Equatable {
    /// Contains metadata about the response headers policy, and a set of configurations that specify the HTTP headers.
    /// This member is required.
    public var responseHeadersPolicyConfig: CloudFrontClientTypes.ResponseHeadersPolicyConfig?

    public init(
        responseHeadersPolicyConfig: CloudFrontClientTypes.ResponseHeadersPolicyConfig? = nil
    )
    {
        self.responseHeadersPolicyConfig = responseHeadersPolicyConfig
    }
}

extension CreateResponseHeadersPolicyOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> CreateResponseHeadersPolicyOutput {
        let reader = responseReader
        var value = CreateResponseHeadersPolicyOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        if let locationHeaderValue = httpResponse.headers.value(for: "Location") {
            value.location = locationHeaderValue
        } else {
            value.location = nil
        }
        value.responseHeadersPolicy = try reader.read(readingClosure: CloudFrontClientTypes.ResponseHeadersPolicy.readingClosure(from:))
        return value
    }
}

public struct CreateResponseHeadersPolicyOutput: Swift.Equatable {
    /// The version identifier for the current version of the response headers policy.
    public var eTag: Swift.String?
    /// The URL of the response headers policy.
    public var location: Swift.String?
    /// Contains a response headers policy.
    public var responseHeadersPolicy: CloudFrontClientTypes.ResponseHeadersPolicy?

    public init(
        eTag: Swift.String? = nil,
        location: Swift.String? = nil,
        responseHeadersPolicy: CloudFrontClientTypes.ResponseHeadersPolicy? = nil
    )
    {
        self.eTag = eTag
        self.location = location
        self.responseHeadersPolicy = responseHeadersPolicy
    }
}

enum CreateResponseHeadersPolicyOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension CreateStreamingDistributionInput {
    static func writingClosure(_ value: CreateStreamingDistributionInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["StreamingDistributionConfig"].write(value.streamingDistributionConfig, writingClosure: CloudFrontClientTypes.StreamingDistributionConfig.writingClosure(_:to:))
    }
}

extension CreateStreamingDistributionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2020-05-31/streaming-distribution"
    }
}

/// The request to create a new streaming distribution.
public struct CreateStreamingDistributionInput: Swift.Equatable {
    /// The streaming distribution's configuration information.
    /// This member is required.
    public var streamingDistributionConfig: CloudFrontClientTypes.StreamingDistributionConfig?

    public init(
        streamingDistributionConfig: CloudFrontClientTypes.StreamingDistributionConfig? = nil
    )
    {
        self.streamingDistributionConfig = streamingDistributionConfig
    }
}

extension CreateStreamingDistributionOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> CreateStreamingDistributionOutput {
        let reader = responseReader
        var value = CreateStreamingDistributionOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        if let locationHeaderValue = httpResponse.headers.value(for: "Location") {
            value.location = locationHeaderValue
        } else {
            value.location = nil
        }
        value.streamingDistribution = try reader.read(readingClosure: CloudFrontClientTypes.StreamingDistribution.readingClosure(from:))
        return value
    }
}

/// The returned result of the corresponding request.
public struct CreateStreamingDistributionOutput: Swift.Equatable {
    /// The current version of the streaming distribution created.
    public var eTag: Swift.String?
    /// The fully qualified URI of the new streaming distribution resource just created.
    public var location: Swift.String?
    /// The streaming distribution's information.
    public var streamingDistribution: CloudFrontClientTypes.StreamingDistribution?

    public init(
        eTag: Swift.String? = nil,
        location: Swift.String? = nil,
        streamingDistribution: CloudFrontClientTypes.StreamingDistribution? = nil
    )
    {
        self.eTag = eTag
        self.location = location
        self.streamingDistribution = streamingDistribution
    }
}

enum CreateStreamingDistributionOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension CreateStreamingDistributionWithTagsInput {
    static func writingClosure(_ value: CreateStreamingDistributionWithTagsInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["StreamingDistributionConfigWithTags"].write(value.streamingDistributionConfigWithTags, writingClosure: CloudFrontClientTypes.StreamingDistributionConfigWithTags.writingClosure(_:to:))
    }
}

extension CreateStreamingDistributionWithTagsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "WithTags", value: nil))
            return items
        }
    }
}

extension CreateStreamingDistributionWithTagsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2020-05-31/streaming-distribution"
    }
}

/// The request to create a new streaming distribution with tags.
public struct CreateStreamingDistributionWithTagsInput: Swift.Equatable {
    /// The streaming distribution's configuration information.
    /// This member is required.
    public var streamingDistributionConfigWithTags: CloudFrontClientTypes.StreamingDistributionConfigWithTags?

    public init(
        streamingDistributionConfigWithTags: CloudFrontClientTypes.StreamingDistributionConfigWithTags? = nil
    )
    {
        self.streamingDistributionConfigWithTags = streamingDistributionConfigWithTags
    }
}

extension CreateStreamingDistributionWithTagsOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> CreateStreamingDistributionWithTagsOutput {
        let reader = responseReader
        var value = CreateStreamingDistributionWithTagsOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        if let locationHeaderValue = httpResponse.headers.value(for: "Location") {
            value.location = locationHeaderValue
        } else {
            value.location = nil
        }
        value.streamingDistribution = try reader.read(readingClosure: CloudFrontClientTypes.StreamingDistribution.readingClosure(from:))
        return value
    }
}

/// The returned result of the corresponding request.
public struct CreateStreamingDistributionWithTagsOutput: Swift.Equatable {
    /// The current version of the distribution created.
    public var eTag: Swift.String?
    /// The fully qualified URI of the new streaming distribution resource just created.
    public var location: Swift.String?
    /// The streaming distribution's information.
    public var streamingDistribution: CloudFrontClientTypes.StreamingDistribution?

    public init(
        eTag: Swift.String? = nil,
        location: Swift.String? = nil,
        streamingDistribution: CloudFrontClientTypes.StreamingDistribution? = nil
    )
    {
        self.eTag = eTag
        self.location = location
        self.streamingDistribution = streamingDistribution
    }
}

enum CreateStreamingDistributionWithTagsOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension CloudFrontClientTypes.CustomErrorResponse {

    static func writingClosure(_ value: CloudFrontClientTypes.CustomErrorResponse?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["ErrorCachingMinTTL"].write(value.errorCachingMinTTL)
        try writer["ErrorCode"].write(value.errorCode)
        try writer["ResponseCode"].write(value.responseCode)
        try writer["ResponsePagePath"].write(value.responsePagePath)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.CustomErrorResponse {
        var value = CloudFrontClientTypes.CustomErrorResponse()
        value.errorCode = try reader["ErrorCode"].readIfPresent()
        value.responsePagePath = try reader["ResponsePagePath"].readIfPresent()
        value.responseCode = try reader["ResponseCode"].readIfPresent()
        value.errorCachingMinTTL = try reader["ErrorCachingMinTTL"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// A complex type that controls:
    ///
    /// * Whether CloudFront replaces HTTP status codes in the 4xx and 5xx range with custom error messages before returning the response to the viewer.
    ///
    /// * How long CloudFront caches HTTP status codes in the 4xx and 5xx range.
    ///
    ///
    /// For more information about custom error pages, see [Customizing Error Responses](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/custom-error-pages.html) in the Amazon CloudFront Developer Guide.
    public struct CustomErrorResponse: Swift.Equatable {
        /// The minimum amount of time, in seconds, that you want CloudFront to cache the HTTP status code specified in ErrorCode. When this time period has elapsed, CloudFront queries your origin to see whether the problem that caused the error has been resolved and the requested object is now available. For more information, see [Customizing Error Responses](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/custom-error-pages.html) in the Amazon CloudFront Developer Guide.
        public var errorCachingMinTTL: Swift.Int?
        /// The HTTP status code for which you want to specify a custom error page and/or a caching duration.
        /// This member is required.
        public var errorCode: Swift.Int?
        /// The HTTP status code that you want CloudFront to return to the viewer along with the custom error page. There are a variety of reasons that you might want CloudFront to return a status code different from the status code that your origin returned to CloudFront, for example:
        ///
        /// * Some Internet devices (some firewalls and corporate proxies, for example) intercept HTTP 4xx and 5xx and prevent the response from being returned to the viewer. If you substitute 200, the response typically won't be intercepted.
        ///
        /// * If you don't care about distinguishing among different client errors or server errors, you can specify 400 or 500 as the ResponseCode for all 4xx or 5xx errors.
        ///
        /// * You might want to return a 200 status code (OK) and static website so your customers don't know that your website is down.
        ///
        ///
        /// If you specify a value for ResponseCode, you must also specify a value for ResponsePagePath.
        public var responseCode: Swift.String?
        /// The path to the custom error page that you want CloudFront to return to a viewer when your origin returns the HTTP status code specified by ErrorCode, for example, /4xx-errors/403-forbidden.html. If you want to store your objects and your custom error pages in different locations, your distribution must include a cache behavior for which the following is true:
        ///
        /// * The value of PathPattern matches the path to your custom error messages. For example, suppose you saved custom error pages for 4xx errors in an Amazon S3 bucket in a directory named /4xx-errors. Your distribution must include a cache behavior for which the path pattern routes requests for your custom error pages to that location, for example, /4xx-errors/*.
        ///
        /// * The value of TargetOriginId specifies the value of the ID element for the origin that contains your custom error pages.
        ///
        ///
        /// If you specify a value for ResponsePagePath, you must also specify a value for ResponseCode. We recommend that you store custom error pages in an Amazon S3 bucket. If you store custom error pages on an HTTP server and the server starts to return 5xx errors, CloudFront can't get the files that you want to return to viewers because the origin server is unavailable.
        public var responsePagePath: Swift.String?

        public init(
            errorCachingMinTTL: Swift.Int? = nil,
            errorCode: Swift.Int? = nil,
            responseCode: Swift.String? = nil,
            responsePagePath: Swift.String? = nil
        )
        {
            self.errorCachingMinTTL = errorCachingMinTTL
            self.errorCode = errorCode
            self.responseCode = responseCode
            self.responsePagePath = responsePagePath
        }
    }

}

extension CloudFrontClientTypes.CustomErrorResponses {

    static func writingClosure(_ value: CloudFrontClientTypes.CustomErrorResponses?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Items"].writeList(value.items, memberWritingClosure: CloudFrontClientTypes.CustomErrorResponse.writingClosure(_:to:), memberNodeInfo: "CustomErrorResponse", isFlattened: false)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.CustomErrorResponses {
        var value = CloudFrontClientTypes.CustomErrorResponses()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: CloudFrontClientTypes.CustomErrorResponse.readingClosure(from:), memberNodeInfo: "CustomErrorResponse", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// A complex type that controls:
    ///
    /// * Whether CloudFront replaces HTTP status codes in the 4xx and 5xx range with custom error messages before returning the response to the viewer.
    ///
    /// * How long CloudFront caches HTTP status codes in the 4xx and 5xx range.
    ///
    ///
    /// For more information about custom error pages, see [Customizing Error Responses](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/custom-error-pages.html) in the Amazon CloudFront Developer Guide.
    public struct CustomErrorResponses: Swift.Equatable {
        /// A complex type that contains a CustomErrorResponse element for each HTTP status code for which you want to specify a custom error page and/or a caching duration.
        public var items: [CloudFrontClientTypes.CustomErrorResponse]?
        /// The number of HTTP status codes for which you want to specify a custom error page and/or a caching duration. If Quantity is 0, you can omit Items.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            items: [CloudFrontClientTypes.CustomErrorResponse]? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.items = items
            self.quantity = quantity
        }
    }

}

extension CloudFrontClientTypes.CustomHeaders {

    static func writingClosure(_ value: CloudFrontClientTypes.CustomHeaders?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Items"].writeList(value.items, memberWritingClosure: CloudFrontClientTypes.OriginCustomHeader.writingClosure(_:to:), memberNodeInfo: "OriginCustomHeader", isFlattened: false)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.CustomHeaders {
        var value = CloudFrontClientTypes.CustomHeaders()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: CloudFrontClientTypes.OriginCustomHeader.readingClosure(from:), memberNodeInfo: "OriginCustomHeader", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// A complex type that contains the list of Custom Headers for each origin.
    public struct CustomHeaders: Swift.Equatable {
        /// Optional: A list that contains one OriginCustomHeader element for each custom header that you want CloudFront to forward to the origin. If Quantity is 0, omit Items.
        public var items: [CloudFrontClientTypes.OriginCustomHeader]?
        /// The number of custom headers, if any, for this distribution.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            items: [CloudFrontClientTypes.OriginCustomHeader]? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.items = items
            self.quantity = quantity
        }
    }

}

extension CloudFrontClientTypes.CustomOriginConfig {

    static func writingClosure(_ value: CloudFrontClientTypes.CustomOriginConfig?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["HTTPPort"].write(value.httpPort)
        try writer["HTTPSPort"].write(value.httpsPort)
        try writer["OriginKeepaliveTimeout"].write(value.originKeepaliveTimeout)
        try writer["OriginProtocolPolicy"].write(value.originProtocolPolicy)
        try writer["OriginReadTimeout"].write(value.originReadTimeout)
        try writer["OriginSslProtocols"].write(value.originSslProtocols, writingClosure: CloudFrontClientTypes.OriginSslProtocols.writingClosure(_:to:))
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.CustomOriginConfig {
        var value = CloudFrontClientTypes.CustomOriginConfig()
        value.httpPort = try reader["HTTPPort"].readIfPresent()
        value.httpsPort = try reader["HTTPSPort"].readIfPresent()
        value.originProtocolPolicy = try reader["OriginProtocolPolicy"].readIfPresent()
        value.originSslProtocols = try reader["OriginSslProtocols"].readIfPresent(readingClosure: CloudFrontClientTypes.OriginSslProtocols.readingClosure(from:))
        value.originReadTimeout = try reader["OriginReadTimeout"].readIfPresent()
        value.originKeepaliveTimeout = try reader["OriginKeepaliveTimeout"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// A custom origin. A custom origin is any origin that is not an Amazon S3 bucket, with one exception. An Amazon S3 bucket that is [configured with static website hosting](https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html) is a custom origin.
    public struct CustomOriginConfig: Swift.Equatable {
        /// The HTTP port that CloudFront uses to connect to the origin. Specify the HTTP port that the origin listens on.
        /// This member is required.
        public var httpPort: Swift.Int?
        /// The HTTPS port that CloudFront uses to connect to the origin. Specify the HTTPS port that the origin listens on.
        /// This member is required.
        public var httpsPort: Swift.Int?
        /// Specifies how long, in seconds, CloudFront persists its connection to the origin. The minimum timeout is 1 second, the maximum is 60 seconds, and the default (if you don't specify otherwise) is 5 seconds. For more information, see [Origin Keep-alive Timeout](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesOriginKeepaliveTimeout) in the Amazon CloudFront Developer Guide.
        public var originKeepaliveTimeout: Swift.Int?
        /// Specifies the protocol (HTTP or HTTPS) that CloudFront uses to connect to the origin. Valid values are:
        ///
        /// * http-only – CloudFront always uses HTTP to connect to the origin.
        ///
        /// * match-viewer – CloudFront connects to the origin using the same protocol that the viewer used to connect to CloudFront.
        ///
        /// * https-only – CloudFront always uses HTTPS to connect to the origin.
        /// This member is required.
        public var originProtocolPolicy: CloudFrontClientTypes.OriginProtocolPolicy?
        /// Specifies how long, in seconds, CloudFront waits for a response from the origin. This is also known as the origin response timeout. The minimum timeout is 1 second, the maximum is 60 seconds, and the default (if you don't specify otherwise) is 30 seconds. For more information, see [Origin Response Timeout](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesOriginResponseTimeout) in the Amazon CloudFront Developer Guide.
        public var originReadTimeout: Swift.Int?
        /// Specifies the minimum SSL/TLS protocol that CloudFront uses when connecting to your origin over HTTPS. Valid values include SSLv3, TLSv1, TLSv1.1, and TLSv1.2. For more information, see [Minimum Origin SSL Protocol](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesOriginSSLProtocols) in the Amazon CloudFront Developer Guide.
        public var originSslProtocols: CloudFrontClientTypes.OriginSslProtocols?

        public init(
            httpPort: Swift.Int? = nil,
            httpsPort: Swift.Int? = nil,
            originKeepaliveTimeout: Swift.Int? = nil,
            originProtocolPolicy: CloudFrontClientTypes.OriginProtocolPolicy? = nil,
            originReadTimeout: Swift.Int? = nil,
            originSslProtocols: CloudFrontClientTypes.OriginSslProtocols? = nil
        )
        {
            self.httpPort = httpPort
            self.httpsPort = httpsPort
            self.originKeepaliveTimeout = originKeepaliveTimeout
            self.originProtocolPolicy = originProtocolPolicy
            self.originReadTimeout = originReadTimeout
            self.originSslProtocols = originSslProtocols
        }
    }

}

extension CloudFrontClientTypes.DefaultCacheBehavior {

    static func writingClosure(_ value: CloudFrontClientTypes.DefaultCacheBehavior?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["AllowedMethods"].write(value.allowedMethods, writingClosure: CloudFrontClientTypes.AllowedMethods.writingClosure(_:to:))
        try writer["CachePolicyId"].write(value.cachePolicyId)
        try writer["Compress"].write(value.compress)
        try writer["DefaultTTL"].write(value.defaultTTL)
        try writer["FieldLevelEncryptionId"].write(value.fieldLevelEncryptionId)
        try writer["ForwardedValues"].write(value.forwardedValues, writingClosure: CloudFrontClientTypes.ForwardedValues.writingClosure(_:to:))
        try writer["FunctionAssociations"].write(value.functionAssociations, writingClosure: CloudFrontClientTypes.FunctionAssociations.writingClosure(_:to:))
        try writer["LambdaFunctionAssociations"].write(value.lambdaFunctionAssociations, writingClosure: CloudFrontClientTypes.LambdaFunctionAssociations.writingClosure(_:to:))
        try writer["MaxTTL"].write(value.maxTTL)
        try writer["MinTTL"].write(value.minTTL)
        try writer["OriginRequestPolicyId"].write(value.originRequestPolicyId)
        try writer["RealtimeLogConfigArn"].write(value.realtimeLogConfigArn)
        try writer["ResponseHeadersPolicyId"].write(value.responseHeadersPolicyId)
        try writer["SmoothStreaming"].write(value.smoothStreaming)
        try writer["TargetOriginId"].write(value.targetOriginId)
        try writer["TrustedKeyGroups"].write(value.trustedKeyGroups, writingClosure: CloudFrontClientTypes.TrustedKeyGroups.writingClosure(_:to:))
        try writer["TrustedSigners"].write(value.trustedSigners, writingClosure: CloudFrontClientTypes.TrustedSigners.writingClosure(_:to:))
        try writer["ViewerProtocolPolicy"].write(value.viewerProtocolPolicy)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.DefaultCacheBehavior {
        var value = CloudFrontClientTypes.DefaultCacheBehavior()
        value.targetOriginId = try reader["TargetOriginId"].readIfPresent()
        value.trustedSigners = try reader["TrustedSigners"].readIfPresent(readingClosure: CloudFrontClientTypes.TrustedSigners.readingClosure(from:))
        value.trustedKeyGroups = try reader["TrustedKeyGroups"].readIfPresent(readingClosure: CloudFrontClientTypes.TrustedKeyGroups.readingClosure(from:))
        value.viewerProtocolPolicy = try reader["ViewerProtocolPolicy"].readIfPresent()
        value.allowedMethods = try reader["AllowedMethods"].readIfPresent(readingClosure: CloudFrontClientTypes.AllowedMethods.readingClosure(from:))
        value.smoothStreaming = try reader["SmoothStreaming"].readIfPresent()
        value.compress = try reader["Compress"].readIfPresent()
        value.lambdaFunctionAssociations = try reader["LambdaFunctionAssociations"].readIfPresent(readingClosure: CloudFrontClientTypes.LambdaFunctionAssociations.readingClosure(from:))
        value.functionAssociations = try reader["FunctionAssociations"].readIfPresent(readingClosure: CloudFrontClientTypes.FunctionAssociations.readingClosure(from:))
        value.fieldLevelEncryptionId = try reader["FieldLevelEncryptionId"].readIfPresent()
        value.realtimeLogConfigArn = try reader["RealtimeLogConfigArn"].readIfPresent()
        value.cachePolicyId = try reader["CachePolicyId"].readIfPresent()
        value.originRequestPolicyId = try reader["OriginRequestPolicyId"].readIfPresent()
        value.responseHeadersPolicyId = try reader["ResponseHeadersPolicyId"].readIfPresent()
        value.forwardedValues = try reader["ForwardedValues"].readIfPresent(readingClosure: CloudFrontClientTypes.ForwardedValues.readingClosure(from:))
        value.minTTL = try reader["MinTTL"].readIfPresent()
        value.defaultTTL = try reader["DefaultTTL"].readIfPresent()
        value.maxTTL = try reader["MaxTTL"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// A complex type that describes the default cache behavior if you don't specify a CacheBehavior element or if request URLs don't match any of the values of PathPattern in CacheBehavior elements. You must create exactly one default cache behavior.
    public struct DefaultCacheBehavior: Swift.Equatable {
        /// A complex type that controls which HTTP methods CloudFront processes and forwards to your Amazon S3 bucket or your custom origin. There are three choices:
        ///
        /// * CloudFront forwards only GET and HEAD requests.
        ///
        /// * CloudFront forwards only GET, HEAD, and OPTIONS requests.
        ///
        /// * CloudFront forwards GET, HEAD, OPTIONS, PUT, PATCH, POST, and DELETE requests.
        ///
        ///
        /// If you pick the third choice, you may need to restrict access to your Amazon S3 bucket or to your custom origin so users can't perform operations that you don't want them to. For example, you might not want users to have permissions to delete objects from your origin.
        public var allowedMethods: CloudFrontClientTypes.AllowedMethods?
        /// The unique identifier of the cache policy that is attached to the default cache behavior. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) or [Using the managed cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html) in the Amazon CloudFront Developer Guide. A DefaultCacheBehavior must include either a CachePolicyId or ForwardedValues. We recommend that you use a CachePolicyId.
        public var cachePolicyId: Swift.String?
        /// Whether you want CloudFront to automatically compress certain files for this cache behavior. If so, specify true; if not, specify false. For more information, see [Serving Compressed Files](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/ServingCompressedFiles.html) in the Amazon CloudFront Developer Guide.
        public var compress: Swift.Bool?
        /// This field is deprecated. We recommend that you use the DefaultTTL field in a cache policy instead of this field. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) or [Using the managed cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html) in the Amazon CloudFront Developer Guide. The default amount of time that you want objects to stay in CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has been updated. The value that you specify applies only when your origin does not add HTTP headers such as Cache-Control max-age, Cache-Control s-maxage, and Expires to objects. For more information, see [Managing How Long Content Stays in an Edge Cache (Expiration)](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html) in the Amazon CloudFront Developer Guide.
        @available(*, deprecated)
        public var defaultTTL: Swift.Int?
        /// The value of ID for the field-level encryption configuration that you want CloudFront to use for encrypting specific fields of data for the default cache behavior.
        public var fieldLevelEncryptionId: Swift.String?
        /// This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field. For more information, see [Working with policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/working-with-policies.html) in the Amazon CloudFront Developer Guide. If you want to include values in the cache key, use a cache policy. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) or [Using the managed cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html) in the Amazon CloudFront Developer Guide. If you want to send values to the origin but not include them in the cache key, use an origin request policy. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy) or [Using the managed origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-origin-request-policies.html) in the Amazon CloudFront Developer Guide. A DefaultCacheBehavior must include either a CachePolicyId or ForwardedValues. We recommend that you use a CachePolicyId. A complex type that specifies how CloudFront handles query strings, cookies, and HTTP headers.
        @available(*, deprecated)
        public var forwardedValues: CloudFrontClientTypes.ForwardedValues?
        /// A list of CloudFront functions that are associated with this cache behavior. CloudFront functions must be published to the LIVE stage to associate them with a cache behavior.
        public var functionAssociations: CloudFrontClientTypes.FunctionAssociations?
        /// A complex type that contains zero or more Lambda@Edge function associations for a cache behavior.
        public var lambdaFunctionAssociations: CloudFrontClientTypes.LambdaFunctionAssociations?
        /// This field is deprecated. We recommend that you use the MaxTTL field in a cache policy instead of this field. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) or [Using the managed cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html) in the Amazon CloudFront Developer Guide. The maximum amount of time that you want objects to stay in CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has been updated. The value that you specify applies only when your origin adds HTTP headers such as Cache-Control max-age, Cache-Control s-maxage, and Expires to objects. For more information, see [Managing How Long Content Stays in an Edge Cache (Expiration)](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html) in the Amazon CloudFront Developer Guide.
        @available(*, deprecated)
        public var maxTTL: Swift.Int?
        /// This field is deprecated. We recommend that you use the MinTTL field in a cache policy instead of this field. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) or [Using the managed cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html) in the Amazon CloudFront Developer Guide. The minimum amount of time that you want objects to stay in CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has been updated. For more information, see [Managing How Long Content Stays in an Edge Cache (Expiration)](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html) in the Amazon CloudFront Developer Guide. You must specify 0 for MinTTL if you configure CloudFront to forward all headers to your origin (under Headers, if you specify 1 for Quantity and * for Name).
        @available(*, deprecated)
        public var minTTL: Swift.Int?
        /// The unique identifier of the origin request policy that is attached to the default cache behavior. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy) or [Using the managed origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-origin-request-policies.html) in the Amazon CloudFront Developer Guide.
        public var originRequestPolicyId: Swift.String?
        /// The Amazon Resource Name (ARN) of the real-time log configuration that is attached to this cache behavior. For more information, see [Real-time logs](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/real-time-logs.html) in the Amazon CloudFront Developer Guide.
        public var realtimeLogConfigArn: Swift.String?
        /// The identifier for a response headers policy.
        public var responseHeadersPolicyId: Swift.String?
        /// Indicates whether you want to distribute media files in the Microsoft Smooth Streaming format using the origin that is associated with this cache behavior. If so, specify true; if not, specify false. If you specify true for SmoothStreaming, you can still distribute other content using this cache behavior if the content matches the value of PathPattern.
        public var smoothStreaming: Swift.Bool?
        /// The value of ID for the origin that you want CloudFront to route requests to when they use the default cache behavior.
        /// This member is required.
        public var targetOriginId: Swift.String?
        /// A list of key groups that CloudFront can use to validate signed URLs or signed cookies. When a cache behavior contains trusted key groups, CloudFront requires signed URLs or signed cookies for all requests that match the cache behavior. The URLs or cookies must be signed with a private key whose corresponding public key is in the key group. The signed URL or cookie contains information about which public key CloudFront should use to verify the signature. For more information, see [Serving private content](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html) in the Amazon CloudFront Developer Guide.
        public var trustedKeyGroups: CloudFrontClientTypes.TrustedKeyGroups?
        /// We recommend using TrustedKeyGroups instead of TrustedSigners. A list of Amazon Web Services account IDs whose public keys CloudFront can use to validate signed URLs or signed cookies. When a cache behavior contains trusted signers, CloudFront requires signed URLs or signed cookies for all requests that match the cache behavior. The URLs or cookies must be signed with the private key of a CloudFront key pair in a trusted signer's Amazon Web Services account. The signed URL or cookie contains information about which public key CloudFront should use to verify the signature. For more information, see [Serving private content](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html) in the Amazon CloudFront Developer Guide.
        public var trustedSigners: CloudFrontClientTypes.TrustedSigners?
        /// The protocol that viewers can use to access the files in the origin specified by TargetOriginId when a request matches the path pattern in PathPattern. You can specify the following options:
        ///
        /// * allow-all: Viewers can use HTTP or HTTPS.
        ///
        /// * redirect-to-https: If a viewer submits an HTTP request, CloudFront returns an HTTP status code of 301 (Moved Permanently) to the viewer along with the HTTPS URL. The viewer then resubmits the request using the new URL.
        ///
        /// * https-only: If a viewer sends an HTTP request, CloudFront returns an HTTP status code of 403 (Forbidden).
        ///
        ///
        /// For more information about requiring the HTTPS protocol, see [Requiring HTTPS Between Viewers and CloudFront](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https-viewers-to-cloudfront.html) in the Amazon CloudFront Developer Guide. The only way to guarantee that viewers retrieve an object that was fetched from the origin using HTTPS is never to use any other protocol to fetch the object. If you have recently changed from HTTP to HTTPS, we recommend that you clear your objects' cache because cached objects are protocol agnostic. That means that an edge location will return an object from the cache regardless of whether the current request protocol matches the protocol used previously. For more information, see [Managing Cache Expiration](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html) in the Amazon CloudFront Developer Guide.
        /// This member is required.
        public var viewerProtocolPolicy: CloudFrontClientTypes.ViewerProtocolPolicy?

        public init(
            allowedMethods: CloudFrontClientTypes.AllowedMethods? = nil,
            cachePolicyId: Swift.String? = nil,
            compress: Swift.Bool? = nil,
            defaultTTL: Swift.Int? = nil,
            fieldLevelEncryptionId: Swift.String? = nil,
            forwardedValues: CloudFrontClientTypes.ForwardedValues? = nil,
            functionAssociations: CloudFrontClientTypes.FunctionAssociations? = nil,
            lambdaFunctionAssociations: CloudFrontClientTypes.LambdaFunctionAssociations? = nil,
            maxTTL: Swift.Int? = nil,
            minTTL: Swift.Int? = nil,
            originRequestPolicyId: Swift.String? = nil,
            realtimeLogConfigArn: Swift.String? = nil,
            responseHeadersPolicyId: Swift.String? = nil,
            smoothStreaming: Swift.Bool? = nil,
            targetOriginId: Swift.String? = nil,
            trustedKeyGroups: CloudFrontClientTypes.TrustedKeyGroups? = nil,
            trustedSigners: CloudFrontClientTypes.TrustedSigners? = nil,
            viewerProtocolPolicy: CloudFrontClientTypes.ViewerProtocolPolicy? = nil
        )
        {
            self.allowedMethods = allowedMethods
            self.cachePolicyId = cachePolicyId
            self.compress = compress
            self.defaultTTL = defaultTTL
            self.fieldLevelEncryptionId = fieldLevelEncryptionId
            self.forwardedValues = forwardedValues
            self.functionAssociations = functionAssociations
            self.lambdaFunctionAssociations = lambdaFunctionAssociations
            self.maxTTL = maxTTL
            self.minTTL = minTTL
            self.originRequestPolicyId = originRequestPolicyId
            self.realtimeLogConfigArn = realtimeLogConfigArn
            self.responseHeadersPolicyId = responseHeadersPolicyId
            self.smoothStreaming = smoothStreaming
            self.targetOriginId = targetOriginId
            self.trustedKeyGroups = trustedKeyGroups
            self.trustedSigners = trustedSigners
            self.viewerProtocolPolicy = viewerProtocolPolicy
        }
    }

}

extension DeleteCachePolicyInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let ifMatch = ifMatch {
            items.add(Header(name: "If-Match", value: Swift.String(ifMatch)))
        }
        return items
    }
}

extension DeleteCachePolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/cache-policy/\(id.urlPercentEncoding())"
    }
}

public struct DeleteCachePolicyInput: Swift.Equatable {
    /// The unique identifier for the cache policy that you are deleting. To get the identifier, you can use ListCachePolicies.
    /// This member is required.
    public var id: Swift.String?
    /// The version of the cache policy that you are deleting. The version is the cache policy's ETag value, which you can get using ListCachePolicies, GetCachePolicy, or GetCachePolicyConfig.
    public var ifMatch: Swift.String?

    public init(
        id: Swift.String? = nil,
        ifMatch: Swift.String? = nil
    )
    {
        self.id = id
        self.ifMatch = ifMatch
    }
}

extension DeleteCachePolicyOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> DeleteCachePolicyOutput {
        let reader = responseReader
        var value = DeleteCachePolicyOutput()
        return value
    }
}

public struct DeleteCachePolicyOutput: Swift.Equatable {

    public init() { }
}

enum DeleteCachePolicyOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension DeleteCloudFrontOriginAccessIdentityInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let ifMatch = ifMatch {
            items.add(Header(name: "If-Match", value: Swift.String(ifMatch)))
        }
        return items
    }
}

extension DeleteCloudFrontOriginAccessIdentityInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/origin-access-identity/cloudfront/\(id.urlPercentEncoding())"
    }
}

/// Deletes a origin access identity.
public struct DeleteCloudFrontOriginAccessIdentityInput: Swift.Equatable {
    /// The origin access identity's ID.
    /// This member is required.
    public var id: Swift.String?
    /// The value of the ETag header you received from a previous GET or PUT request. For example: E2QWRUHAPOMQZL.
    public var ifMatch: Swift.String?

    public init(
        id: Swift.String? = nil,
        ifMatch: Swift.String? = nil
    )
    {
        self.id = id
        self.ifMatch = ifMatch
    }
}

extension DeleteCloudFrontOriginAccessIdentityOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> DeleteCloudFrontOriginAccessIdentityOutput {
        let reader = responseReader
        var value = DeleteCloudFrontOriginAccessIdentityOutput()
        return value
    }
}

public struct DeleteCloudFrontOriginAccessIdentityOutput: Swift.Equatable {

    public init() { }
}

enum DeleteCloudFrontOriginAccessIdentityOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension DeleteContinuousDeploymentPolicyInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let ifMatch = ifMatch {
            items.add(Header(name: "If-Match", value: Swift.String(ifMatch)))
        }
        return items
    }
}

extension DeleteContinuousDeploymentPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/continuous-deployment-policy/\(id.urlPercentEncoding())"
    }
}

public struct DeleteContinuousDeploymentPolicyInput: Swift.Equatable {
    /// The identifier of the continuous deployment policy that you are deleting.
    /// This member is required.
    public var id: Swift.String?
    /// The current version (ETag value) of the continuous deployment policy that you are deleting.
    public var ifMatch: Swift.String?

    public init(
        id: Swift.String? = nil,
        ifMatch: Swift.String? = nil
    )
    {
        self.id = id
        self.ifMatch = ifMatch
    }
}

extension DeleteContinuousDeploymentPolicyOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> DeleteContinuousDeploymentPolicyOutput {
        let reader = responseReader
        var value = DeleteContinuousDeploymentPolicyOutput()
        return value
    }
}

public struct DeleteContinuousDeploymentPolicyOutput: Swift.Equatable {

    public init() { }
}

enum DeleteContinuousDeploymentPolicyOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension DeleteDistributionInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let ifMatch = ifMatch {
            items.add(Header(name: "If-Match", value: Swift.String(ifMatch)))
        }
        return items
    }
}

extension DeleteDistributionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/distribution/\(id.urlPercentEncoding())"
    }
}

/// This action deletes a web distribution. To delete a web distribution using the CloudFront API, perform the following steps. To delete a web distribution using the CloudFront API:
///
/// * Disable the web distribution
///
/// * Submit a GET Distribution Config request to get the current configuration and the Etag header for the distribution.
///
/// * Update the XML document that was returned in the response to your GET Distribution Config request to change the value of Enabled to false.
///
/// * Submit a PUT Distribution Config request to update the configuration for your distribution. In the request body, include the XML document that you updated in Step 3. Set the value of the HTTP If-Match header to the value of the ETag header that CloudFront returned when you submitted the GET Distribution Config request in Step 2.
///
/// * Review the response to the PUT Distribution Config request to confirm that the distribution was successfully disabled.
///
/// * Submit a GET Distribution request to confirm that your changes have propagated. When propagation is complete, the value of Status is Deployed.
///
/// * Submit a DELETE Distribution request. Set the value of the HTTP If-Match header to the value of the ETag header that CloudFront returned when you submitted the GET Distribution Config request in Step 6.
///
/// * Review the response to your DELETE Distribution request to confirm that the distribution was successfully deleted.
///
///
/// For information about deleting a distribution using the CloudFront console, see [Deleting a Distribution](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/HowToDeleteDistribution.html) in the Amazon CloudFront Developer Guide.
public struct DeleteDistributionInput: Swift.Equatable {
    /// The distribution ID.
    /// This member is required.
    public var id: Swift.String?
    /// The value of the ETag header that you received when you disabled the distribution. For example: E2QWRUHAPOMQZL.
    public var ifMatch: Swift.String?

    public init(
        id: Swift.String? = nil,
        ifMatch: Swift.String? = nil
    )
    {
        self.id = id
        self.ifMatch = ifMatch
    }
}

extension DeleteDistributionOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> DeleteDistributionOutput {
        let reader = responseReader
        var value = DeleteDistributionOutput()
        return value
    }
}

public struct DeleteDistributionOutput: Swift.Equatable {

    public init() { }
}

enum DeleteDistributionOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension DeleteFieldLevelEncryptionConfigInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let ifMatch = ifMatch {
            items.add(Header(name: "If-Match", value: Swift.String(ifMatch)))
        }
        return items
    }
}

extension DeleteFieldLevelEncryptionConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/field-level-encryption/\(id.urlPercentEncoding())"
    }
}

public struct DeleteFieldLevelEncryptionConfigInput: Swift.Equatable {
    /// The ID of the configuration you want to delete from CloudFront.
    /// This member is required.
    public var id: Swift.String?
    /// The value of the ETag header that you received when retrieving the configuration identity to delete. For example: E2QWRUHAPOMQZL.
    public var ifMatch: Swift.String?

    public init(
        id: Swift.String? = nil,
        ifMatch: Swift.String? = nil
    )
    {
        self.id = id
        self.ifMatch = ifMatch
    }
}

extension DeleteFieldLevelEncryptionConfigOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> DeleteFieldLevelEncryptionConfigOutput {
        let reader = responseReader
        var value = DeleteFieldLevelEncryptionConfigOutput()
        return value
    }
}

public struct DeleteFieldLevelEncryptionConfigOutput: Swift.Equatable {

    public init() { }
}

enum DeleteFieldLevelEncryptionConfigOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension DeleteFieldLevelEncryptionProfileInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let ifMatch = ifMatch {
            items.add(Header(name: "If-Match", value: Swift.String(ifMatch)))
        }
        return items
    }
}

extension DeleteFieldLevelEncryptionProfileInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/field-level-encryption-profile/\(id.urlPercentEncoding())"
    }
}

public struct DeleteFieldLevelEncryptionProfileInput: Swift.Equatable {
    /// Request the ID of the profile you want to delete from CloudFront.
    /// This member is required.
    public var id: Swift.String?
    /// The value of the ETag header that you received when retrieving the profile to delete. For example: E2QWRUHAPOMQZL.
    public var ifMatch: Swift.String?

    public init(
        id: Swift.String? = nil,
        ifMatch: Swift.String? = nil
    )
    {
        self.id = id
        self.ifMatch = ifMatch
    }
}

extension DeleteFieldLevelEncryptionProfileOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> DeleteFieldLevelEncryptionProfileOutput {
        let reader = responseReader
        var value = DeleteFieldLevelEncryptionProfileOutput()
        return value
    }
}

public struct DeleteFieldLevelEncryptionProfileOutput: Swift.Equatable {

    public init() { }
}

enum DeleteFieldLevelEncryptionProfileOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension DeleteFunctionInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let ifMatch = ifMatch {
            items.add(Header(name: "If-Match", value: Swift.String(ifMatch)))
        }
        return items
    }
}

extension DeleteFunctionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let name = name else {
            return nil
        }
        return "/2020-05-31/function/\(name.urlPercentEncoding())"
    }
}

public struct DeleteFunctionInput: Swift.Equatable {
    /// The current version (ETag value) of the function that you are deleting, which you can get using DescribeFunction.
    /// This member is required.
    public var ifMatch: Swift.String?
    /// The name of the function that you are deleting.
    /// This member is required.
    public var name: Swift.String?

    public init(
        ifMatch: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.ifMatch = ifMatch
        self.name = name
    }
}

extension DeleteFunctionOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> DeleteFunctionOutput {
        let reader = responseReader
        var value = DeleteFunctionOutput()
        return value
    }
}

public struct DeleteFunctionOutput: Swift.Equatable {

    public init() { }
}

enum DeleteFunctionOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension DeleteKeyGroupInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let ifMatch = ifMatch {
            items.add(Header(name: "If-Match", value: Swift.String(ifMatch)))
        }
        return items
    }
}

extension DeleteKeyGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/key-group/\(id.urlPercentEncoding())"
    }
}

public struct DeleteKeyGroupInput: Swift.Equatable {
    /// The identifier of the key group that you are deleting. To get the identifier, use ListKeyGroups.
    /// This member is required.
    public var id: Swift.String?
    /// The version of the key group that you are deleting. The version is the key group's ETag value. To get the ETag, use GetKeyGroup or GetKeyGroupConfig.
    public var ifMatch: Swift.String?

    public init(
        id: Swift.String? = nil,
        ifMatch: Swift.String? = nil
    )
    {
        self.id = id
        self.ifMatch = ifMatch
    }
}

extension DeleteKeyGroupOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> DeleteKeyGroupOutput {
        let reader = responseReader
        var value = DeleteKeyGroupOutput()
        return value
    }
}

public struct DeleteKeyGroupOutput: Swift.Equatable {

    public init() { }
}

enum DeleteKeyGroupOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension DeleteKeyValueStoreInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let ifMatch = ifMatch {
            items.add(Header(name: "If-Match", value: Swift.String(ifMatch)))
        }
        return items
    }
}

extension DeleteKeyValueStoreInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let name = name else {
            return nil
        }
        return "/2020-05-31/key-value-store/\(name.urlPercentEncoding())"
    }
}

public struct DeleteKeyValueStoreInput: Swift.Equatable {
    /// The Key Value Store to delete, if a match occurs.
    /// This member is required.
    public var ifMatch: Swift.String?
    /// The name of the Key Value Store.
    /// This member is required.
    public var name: Swift.String?

    public init(
        ifMatch: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.ifMatch = ifMatch
        self.name = name
    }
}

extension DeleteKeyValueStoreOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> DeleteKeyValueStoreOutput {
        let reader = responseReader
        var value = DeleteKeyValueStoreOutput()
        return value
    }
}

public struct DeleteKeyValueStoreOutput: Swift.Equatable {

    public init() { }
}

enum DeleteKeyValueStoreOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension DeleteMonitoringSubscriptionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let distributionId = distributionId else {
            return nil
        }
        return "/2020-05-31/distributions/\(distributionId.urlPercentEncoding())/monitoring-subscription"
    }
}

public struct DeleteMonitoringSubscriptionInput: Swift.Equatable {
    /// The ID of the distribution that you are disabling metrics for.
    /// This member is required.
    public var distributionId: Swift.String?

    public init(
        distributionId: Swift.String? = nil
    )
    {
        self.distributionId = distributionId
    }
}

extension DeleteMonitoringSubscriptionOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> DeleteMonitoringSubscriptionOutput {
        let reader = responseReader
        var value = DeleteMonitoringSubscriptionOutput()
        return value
    }
}

public struct DeleteMonitoringSubscriptionOutput: Swift.Equatable {

    public init() { }
}

enum DeleteMonitoringSubscriptionOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension DeleteOriginAccessControlInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let ifMatch = ifMatch {
            items.add(Header(name: "If-Match", value: Swift.String(ifMatch)))
        }
        return items
    }
}

extension DeleteOriginAccessControlInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/origin-access-control/\(id.urlPercentEncoding())"
    }
}

public struct DeleteOriginAccessControlInput: Swift.Equatable {
    /// The unique identifier of the origin access control that you are deleting.
    /// This member is required.
    public var id: Swift.String?
    /// The current version (ETag value) of the origin access control that you are deleting.
    public var ifMatch: Swift.String?

    public init(
        id: Swift.String? = nil,
        ifMatch: Swift.String? = nil
    )
    {
        self.id = id
        self.ifMatch = ifMatch
    }
}

extension DeleteOriginAccessControlOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> DeleteOriginAccessControlOutput {
        let reader = responseReader
        var value = DeleteOriginAccessControlOutput()
        return value
    }
}

public struct DeleteOriginAccessControlOutput: Swift.Equatable {

    public init() { }
}

enum DeleteOriginAccessControlOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension DeleteOriginRequestPolicyInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let ifMatch = ifMatch {
            items.add(Header(name: "If-Match", value: Swift.String(ifMatch)))
        }
        return items
    }
}

extension DeleteOriginRequestPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/origin-request-policy/\(id.urlPercentEncoding())"
    }
}

public struct DeleteOriginRequestPolicyInput: Swift.Equatable {
    /// The unique identifier for the origin request policy that you are deleting. To get the identifier, you can use ListOriginRequestPolicies.
    /// This member is required.
    public var id: Swift.String?
    /// The version of the origin request policy that you are deleting. The version is the origin request policy's ETag value, which you can get using ListOriginRequestPolicies, GetOriginRequestPolicy, or GetOriginRequestPolicyConfig.
    public var ifMatch: Swift.String?

    public init(
        id: Swift.String? = nil,
        ifMatch: Swift.String? = nil
    )
    {
        self.id = id
        self.ifMatch = ifMatch
    }
}

extension DeleteOriginRequestPolicyOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> DeleteOriginRequestPolicyOutput {
        let reader = responseReader
        var value = DeleteOriginRequestPolicyOutput()
        return value
    }
}

public struct DeleteOriginRequestPolicyOutput: Swift.Equatable {

    public init() { }
}

enum DeleteOriginRequestPolicyOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension DeletePublicKeyInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let ifMatch = ifMatch {
            items.add(Header(name: "If-Match", value: Swift.String(ifMatch)))
        }
        return items
    }
}

extension DeletePublicKeyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/public-key/\(id.urlPercentEncoding())"
    }
}

public struct DeletePublicKeyInput: Swift.Equatable {
    /// The ID of the public key you want to remove from CloudFront.
    /// This member is required.
    public var id: Swift.String?
    /// The value of the ETag header that you received when retrieving the public key identity to delete. For example: E2QWRUHAPOMQZL.
    public var ifMatch: Swift.String?

    public init(
        id: Swift.String? = nil,
        ifMatch: Swift.String? = nil
    )
    {
        self.id = id
        self.ifMatch = ifMatch
    }
}

extension DeletePublicKeyOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> DeletePublicKeyOutput {
        let reader = responseReader
        var value = DeletePublicKeyOutput()
        return value
    }
}

public struct DeletePublicKeyOutput: Swift.Equatable {

    public init() { }
}

enum DeletePublicKeyOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension DeleteRealtimeLogConfigInput {
    static func writingClosure(_ value: DeleteRealtimeLogConfigInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["ARN"].write(value.arn)
        try writer["Name"].write(value.name)
    }
}

extension DeleteRealtimeLogConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2020-05-31/delete-realtime-log-config"
    }
}

public struct DeleteRealtimeLogConfigInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the real-time log configuration to delete.
    public var arn: Swift.String?
    /// The name of the real-time log configuration to delete.
    public var name: Swift.String?

    public init(
        arn: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.arn = arn
        self.name = name
    }
}

extension DeleteRealtimeLogConfigOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> DeleteRealtimeLogConfigOutput {
        let reader = responseReader
        var value = DeleteRealtimeLogConfigOutput()
        return value
    }
}

public struct DeleteRealtimeLogConfigOutput: Swift.Equatable {

    public init() { }
}

enum DeleteRealtimeLogConfigOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension DeleteResponseHeadersPolicyInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let ifMatch = ifMatch {
            items.add(Header(name: "If-Match", value: Swift.String(ifMatch)))
        }
        return items
    }
}

extension DeleteResponseHeadersPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/response-headers-policy/\(id.urlPercentEncoding())"
    }
}

public struct DeleteResponseHeadersPolicyInput: Swift.Equatable {
    /// The identifier for the response headers policy that you are deleting. To get the identifier, you can use ListResponseHeadersPolicies.
    /// This member is required.
    public var id: Swift.String?
    /// The version of the response headers policy that you are deleting. The version is the response headers policy's ETag value, which you can get using ListResponseHeadersPolicies, GetResponseHeadersPolicy, or GetResponseHeadersPolicyConfig.
    public var ifMatch: Swift.String?

    public init(
        id: Swift.String? = nil,
        ifMatch: Swift.String? = nil
    )
    {
        self.id = id
        self.ifMatch = ifMatch
    }
}

extension DeleteResponseHeadersPolicyOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> DeleteResponseHeadersPolicyOutput {
        let reader = responseReader
        var value = DeleteResponseHeadersPolicyOutput()
        return value
    }
}

public struct DeleteResponseHeadersPolicyOutput: Swift.Equatable {

    public init() { }
}

enum DeleteResponseHeadersPolicyOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension DeleteStreamingDistributionInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let ifMatch = ifMatch {
            items.add(Header(name: "If-Match", value: Swift.String(ifMatch)))
        }
        return items
    }
}

extension DeleteStreamingDistributionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/streaming-distribution/\(id.urlPercentEncoding())"
    }
}

/// The request to delete a streaming distribution.
public struct DeleteStreamingDistributionInput: Swift.Equatable {
    /// The distribution ID.
    /// This member is required.
    public var id: Swift.String?
    /// The value of the ETag header that you received when you disabled the streaming distribution. For example: E2QWRUHAPOMQZL.
    public var ifMatch: Swift.String?

    public init(
        id: Swift.String? = nil,
        ifMatch: Swift.String? = nil
    )
    {
        self.id = id
        self.ifMatch = ifMatch
    }
}

extension DeleteStreamingDistributionOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> DeleteStreamingDistributionOutput {
        let reader = responseReader
        var value = DeleteStreamingDistributionOutput()
        return value
    }
}

public struct DeleteStreamingDistributionOutput: Swift.Equatable {

    public init() { }
}

enum DeleteStreamingDistributionOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension DescribeFunctionInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let stage = stage {
                let stageQueryItem = ClientRuntime.URLQueryItem(name: "Stage".urlPercentEncoding(), value: Swift.String(stage.rawValue).urlPercentEncoding())
                items.append(stageQueryItem)
            }
            return items
        }
    }
}

extension DescribeFunctionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let name = name else {
            return nil
        }
        return "/2020-05-31/function/\(name.urlPercentEncoding())/describe"
    }
}

public struct DescribeFunctionInput: Swift.Equatable {
    /// The name of the function that you are getting information about.
    /// This member is required.
    public var name: Swift.String?
    /// The function's stage, either DEVELOPMENT or LIVE.
    public var stage: CloudFrontClientTypes.FunctionStage?

    public init(
        name: Swift.String? = nil,
        stage: CloudFrontClientTypes.FunctionStage? = nil
    )
    {
        self.name = name
        self.stage = stage
    }
}

extension DescribeFunctionOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> DescribeFunctionOutput {
        let reader = responseReader
        var value = DescribeFunctionOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        value.functionSummary = try reader.read(readingClosure: CloudFrontClientTypes.FunctionSummary.readingClosure(from:))
        return value
    }
}

public struct DescribeFunctionOutput: Swift.Equatable {
    /// The version identifier for the current version of the CloudFront function.
    public var eTag: Swift.String?
    /// Contains configuration information and metadata about a CloudFront function.
    public var functionSummary: CloudFrontClientTypes.FunctionSummary?

    public init(
        eTag: Swift.String? = nil,
        functionSummary: CloudFrontClientTypes.FunctionSummary? = nil
    )
    {
        self.eTag = eTag
        self.functionSummary = functionSummary
    }
}

enum DescribeFunctionOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension DescribeKeyValueStoreInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let name = name else {
            return nil
        }
        return "/2020-05-31/key-value-store/\(name.urlPercentEncoding())"
    }
}

public struct DescribeKeyValueStoreInput: Swift.Equatable {
    /// The name of the Key Value Store.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

extension DescribeKeyValueStoreOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> DescribeKeyValueStoreOutput {
        let reader = responseReader
        var value = DescribeKeyValueStoreOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        value.keyValueStore = try reader.read(readingClosure: CloudFrontClientTypes.KeyValueStore.readingClosure(from:))
        return value
    }
}

public struct DescribeKeyValueStoreOutput: Swift.Equatable {
    /// The ETag of the resulting Key Value Store.
    public var eTag: Swift.String?
    /// The resulting Key Value Store.
    public var keyValueStore: CloudFrontClientTypes.KeyValueStore?

    public init(
        eTag: Swift.String? = nil,
        keyValueStore: CloudFrontClientTypes.KeyValueStore? = nil
    )
    {
        self.eTag = eTag
        self.keyValueStore = keyValueStore
    }
}

enum DescribeKeyValueStoreOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension CloudFrontClientTypes.Distribution {

    static func writingClosure(_ value: CloudFrontClientTypes.Distribution?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["ARN"].write(value.arn)
        try writer["ActiveTrustedKeyGroups"].write(value.activeTrustedKeyGroups, writingClosure: CloudFrontClientTypes.ActiveTrustedKeyGroups.writingClosure(_:to:))
        try writer["ActiveTrustedSigners"].write(value.activeTrustedSigners, writingClosure: CloudFrontClientTypes.ActiveTrustedSigners.writingClosure(_:to:))
        try writer["AliasICPRecordals"].writeList(value.aliasICPRecordals, memberWritingClosure: CloudFrontClientTypes.AliasICPRecordal.writingClosure(_:to:), memberNodeInfo: "AliasICPRecordal", isFlattened: false)
        try writer["DistributionConfig"].write(value.distributionConfig, writingClosure: CloudFrontClientTypes.DistributionConfig.writingClosure(_:to:))
        try writer["DomainName"].write(value.domainName)
        try writer["Id"].write(value.id)
        try writer["InProgressInvalidationBatches"].write(value.inProgressInvalidationBatches)
        try writer["LastModifiedTime"].writeTimestamp(value.lastModifiedTime, format: .dateTime)
        try writer["Status"].write(value.status)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.Distribution {
        var value = CloudFrontClientTypes.Distribution()
        value.id = try reader["Id"].readIfPresent()
        value.arn = try reader["ARN"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: .dateTime)
        value.inProgressInvalidationBatches = try reader["InProgressInvalidationBatches"].readIfPresent()
        value.domainName = try reader["DomainName"].readIfPresent()
        value.activeTrustedSigners = try reader["ActiveTrustedSigners"].readIfPresent(readingClosure: CloudFrontClientTypes.ActiveTrustedSigners.readingClosure(from:))
        value.activeTrustedKeyGroups = try reader["ActiveTrustedKeyGroups"].readIfPresent(readingClosure: CloudFrontClientTypes.ActiveTrustedKeyGroups.readingClosure(from:))
        value.distributionConfig = try reader["DistributionConfig"].readIfPresent(readingClosure: CloudFrontClientTypes.DistributionConfig.readingClosure(from:))
        value.aliasICPRecordals = try reader["AliasICPRecordals"].readListIfPresent(memberReadingClosure: CloudFrontClientTypes.AliasICPRecordal.readingClosure(from:), memberNodeInfo: "AliasICPRecordal", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// A distribution tells CloudFront where you want content to be delivered from, and the details about how to track and manage content delivery.
    public struct Distribution: Swift.Equatable {
        /// This field contains a list of key groups and the public keys in each key group that CloudFront can use to verify the signatures of signed URLs or signed cookies.
        public var activeTrustedKeyGroups: CloudFrontClientTypes.ActiveTrustedKeyGroups?
        /// We recommend using TrustedKeyGroups instead of TrustedSigners. This field contains a list of Amazon Web Services account IDs and the active CloudFront key pairs in each account that CloudFront can use to verify the signatures of signed URLs or signed cookies.
        public var activeTrustedSigners: CloudFrontClientTypes.ActiveTrustedSigners?
        /// Amazon Web Services services in China customers must file for an Internet Content Provider (ICP) recordal if they want to serve content publicly on an alternate domain name, also known as a CNAME, that they've added to CloudFront. AliasICPRecordal provides the ICP recordal status for CNAMEs associated with distributions. For more information about ICP recordals, see [ Signup, Accounts, and Credentials](https://docs.amazonaws.cn/en_us/aws/latest/userguide/accounts-and-credentials.html) in Getting Started with Amazon Web Services services in China.
        public var aliasICPRecordals: [CloudFrontClientTypes.AliasICPRecordal]?
        /// The distribution's Amazon Resource Name (ARN).
        /// This member is required.
        public var arn: Swift.String?
        /// The distribution's configuration.
        /// This member is required.
        public var distributionConfig: CloudFrontClientTypes.DistributionConfig?
        /// The distribution's CloudFront domain name. For example: d111111abcdef8.cloudfront.net.
        /// This member is required.
        public var domainName: Swift.String?
        /// The distribution's identifier. For example: E1U5RQF7T870K0.
        /// This member is required.
        public var id: Swift.String?
        /// The number of invalidation batches currently in progress.
        /// This member is required.
        public var inProgressInvalidationBatches: Swift.Int?
        /// The date and time when the distribution was last modified.
        /// This member is required.
        public var lastModifiedTime: ClientRuntime.Date?
        /// The distribution's status. When the status is Deployed, the distribution's information is fully propagated to all CloudFront edge locations.
        /// This member is required.
        public var status: Swift.String?

        public init(
            activeTrustedKeyGroups: CloudFrontClientTypes.ActiveTrustedKeyGroups? = nil,
            activeTrustedSigners: CloudFrontClientTypes.ActiveTrustedSigners? = nil,
            aliasICPRecordals: [CloudFrontClientTypes.AliasICPRecordal]? = nil,
            arn: Swift.String? = nil,
            distributionConfig: CloudFrontClientTypes.DistributionConfig? = nil,
            domainName: Swift.String? = nil,
            id: Swift.String? = nil,
            inProgressInvalidationBatches: Swift.Int? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            status: Swift.String? = nil
        )
        {
            self.activeTrustedKeyGroups = activeTrustedKeyGroups
            self.activeTrustedSigners = activeTrustedSigners
            self.aliasICPRecordals = aliasICPRecordals
            self.arn = arn
            self.distributionConfig = distributionConfig
            self.domainName = domainName
            self.id = id
            self.inProgressInvalidationBatches = inProgressInvalidationBatches
            self.lastModifiedTime = lastModifiedTime
            self.status = status
        }
    }

}

extension DistributionAlreadyExists {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> DistributionAlreadyExists {
        var value = DistributionAlreadyExists()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension DistributionAlreadyExists {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The caller reference you attempted to create the distribution with is associated with another distribution.
public struct DistributionAlreadyExists: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DistributionAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFrontClientTypes.DistributionConfig {

    static func writingClosure(_ value: CloudFrontClientTypes.DistributionConfig?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Aliases"].write(value.aliases, writingClosure: CloudFrontClientTypes.Aliases.writingClosure(_:to:))
        try writer["CacheBehaviors"].write(value.cacheBehaviors, writingClosure: CloudFrontClientTypes.CacheBehaviors.writingClosure(_:to:))
        try writer["CallerReference"].write(value.callerReference)
        try writer["Comment"].write(value.comment)
        try writer["ContinuousDeploymentPolicyId"].write(value.continuousDeploymentPolicyId)
        try writer["CustomErrorResponses"].write(value.customErrorResponses, writingClosure: CloudFrontClientTypes.CustomErrorResponses.writingClosure(_:to:))
        try writer["DefaultCacheBehavior"].write(value.defaultCacheBehavior, writingClosure: CloudFrontClientTypes.DefaultCacheBehavior.writingClosure(_:to:))
        try writer["DefaultRootObject"].write(value.defaultRootObject)
        try writer["Enabled"].write(value.enabled)
        try writer["HttpVersion"].write(value.httpVersion)
        try writer["IsIPV6Enabled"].write(value.isIPV6Enabled)
        try writer["Logging"].write(value.logging, writingClosure: CloudFrontClientTypes.LoggingConfig.writingClosure(_:to:))
        try writer["OriginGroups"].write(value.originGroups, writingClosure: CloudFrontClientTypes.OriginGroups.writingClosure(_:to:))
        try writer["Origins"].write(value.origins, writingClosure: CloudFrontClientTypes.Origins.writingClosure(_:to:))
        try writer["PriceClass"].write(value.priceClass)
        try writer["Restrictions"].write(value.restrictions, writingClosure: CloudFrontClientTypes.Restrictions.writingClosure(_:to:))
        try writer["Staging"].write(value.staging)
        try writer["ViewerCertificate"].write(value.viewerCertificate, writingClosure: CloudFrontClientTypes.ViewerCertificate.writingClosure(_:to:))
        try writer["WebACLId"].write(value.webACLId)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.DistributionConfig {
        var value = CloudFrontClientTypes.DistributionConfig()
        value.callerReference = try reader["CallerReference"].readIfPresent()
        value.aliases = try reader["Aliases"].readIfPresent(readingClosure: CloudFrontClientTypes.Aliases.readingClosure(from:))
        value.defaultRootObject = try reader["DefaultRootObject"].readIfPresent()
        value.origins = try reader["Origins"].readIfPresent(readingClosure: CloudFrontClientTypes.Origins.readingClosure(from:))
        value.originGroups = try reader["OriginGroups"].readIfPresent(readingClosure: CloudFrontClientTypes.OriginGroups.readingClosure(from:))
        value.defaultCacheBehavior = try reader["DefaultCacheBehavior"].readIfPresent(readingClosure: CloudFrontClientTypes.DefaultCacheBehavior.readingClosure(from:))
        value.cacheBehaviors = try reader["CacheBehaviors"].readIfPresent(readingClosure: CloudFrontClientTypes.CacheBehaviors.readingClosure(from:))
        value.customErrorResponses = try reader["CustomErrorResponses"].readIfPresent(readingClosure: CloudFrontClientTypes.CustomErrorResponses.readingClosure(from:))
        value.comment = try reader["Comment"].readIfPresent()
        value.logging = try reader["Logging"].readIfPresent(readingClosure: CloudFrontClientTypes.LoggingConfig.readingClosure(from:))
        value.priceClass = try reader["PriceClass"].readIfPresent()
        value.enabled = try reader["Enabled"].readIfPresent()
        value.viewerCertificate = try reader["ViewerCertificate"].readIfPresent(readingClosure: CloudFrontClientTypes.ViewerCertificate.readingClosure(from:))
        value.restrictions = try reader["Restrictions"].readIfPresent(readingClosure: CloudFrontClientTypes.Restrictions.readingClosure(from:))
        value.webACLId = try reader["WebACLId"].readIfPresent()
        value.httpVersion = try reader["HttpVersion"].readIfPresent()
        value.isIPV6Enabled = try reader["IsIPV6Enabled"].readIfPresent()
        value.continuousDeploymentPolicyId = try reader["ContinuousDeploymentPolicyId"].readIfPresent()
        value.staging = try reader["Staging"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes.DistributionConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DistributionConfig(aliases: \(Swift.String(describing: aliases)), cacheBehaviors: \(Swift.String(describing: cacheBehaviors)), callerReference: \(Swift.String(describing: callerReference)), continuousDeploymentPolicyId: \(Swift.String(describing: continuousDeploymentPolicyId)), customErrorResponses: \(Swift.String(describing: customErrorResponses)), defaultCacheBehavior: \(Swift.String(describing: defaultCacheBehavior)), defaultRootObject: \(Swift.String(describing: defaultRootObject)), enabled: \(Swift.String(describing: enabled)), httpVersion: \(Swift.String(describing: httpVersion)), isIPV6Enabled: \(Swift.String(describing: isIPV6Enabled)), logging: \(Swift.String(describing: logging)), originGroups: \(Swift.String(describing: originGroups)), origins: \(Swift.String(describing: origins)), priceClass: \(Swift.String(describing: priceClass)), restrictions: \(Swift.String(describing: restrictions)), staging: \(Swift.String(describing: staging)), viewerCertificate: \(Swift.String(describing: viewerCertificate)), webACLId: \(Swift.String(describing: webACLId)), comment: \"CONTENT_REDACTED\")"}
}

extension CloudFrontClientTypes {
    /// A distribution configuration.
    public struct DistributionConfig: Swift.Equatable {
        /// A complex type that contains information about CNAMEs (alternate domain names), if any, for this distribution.
        public var aliases: CloudFrontClientTypes.Aliases?
        /// A complex type that contains zero or more CacheBehavior elements.
        public var cacheBehaviors: CloudFrontClientTypes.CacheBehaviors?
        /// A unique value (for example, a date-time stamp) that ensures that the request can't be replayed. If the value of CallerReference is new (regardless of the content of the DistributionConfig object), CloudFront creates a new distribution. If CallerReference is a value that you already sent in a previous request to create a distribution, CloudFront returns a DistributionAlreadyExists error.
        /// This member is required.
        public var callerReference: Swift.String?
        /// A comment to describe the distribution. The comment cannot be longer than 128 characters.
        /// This member is required.
        public var comment: Swift.String?
        /// The identifier of a continuous deployment policy. For more information, see CreateContinuousDeploymentPolicy.
        public var continuousDeploymentPolicyId: Swift.String?
        /// A complex type that controls the following:
        ///
        /// * Whether CloudFront replaces HTTP status codes in the 4xx and 5xx range with custom error messages before returning the response to the viewer.
        ///
        /// * How long CloudFront caches HTTP status codes in the 4xx and 5xx range.
        ///
        ///
        /// For more information about custom error pages, see [Customizing Error Responses](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/custom-error-pages.html) in the Amazon CloudFront Developer Guide.
        public var customErrorResponses: CloudFrontClientTypes.CustomErrorResponses?
        /// A complex type that describes the default cache behavior if you don't specify a CacheBehavior element or if files don't match any of the values of PathPattern in CacheBehavior elements. You must create exactly one default cache behavior.
        /// This member is required.
        public var defaultCacheBehavior: CloudFrontClientTypes.DefaultCacheBehavior?
        /// The object that you want CloudFront to request from your origin (for example, index.html) when a viewer requests the root URL for your distribution (https://www.example.com) instead of an object in your distribution (https://www.example.com/product-description.html). Specifying a default root object avoids exposing the contents of your distribution. Specify only the object name, for example, index.html. Don't add a / before the object name. If you don't want to specify a default root object when you create a distribution, include an empty DefaultRootObject element. To delete the default root object from an existing distribution, update the distribution configuration and include an empty DefaultRootObject element. To replace the default root object, update the distribution configuration and specify the new object. For more information about the default root object, see [Creating a Default Root Object](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/DefaultRootObject.html) in the Amazon CloudFront Developer Guide.
        public var defaultRootObject: Swift.String?
        /// From this field, you can enable or disable the selected distribution.
        /// This member is required.
        public var enabled: Swift.Bool?
        /// (Optional) Specify the maximum HTTP version(s) that you want viewers to use to communicate with CloudFront. The default value for new web distributions is http2. Viewers that don't support HTTP/2 automatically use an earlier HTTP version. For viewers and CloudFront to use HTTP/2, viewers must support TLSv1.2 or later, and must support Server Name Indication (SNI). For viewers and CloudFront to use HTTP/3, viewers must support TLSv1.3 and Server Name Indication (SNI). CloudFront supports HTTP/3 connection migration to allow the viewer to switch networks without losing connection. For more information about connection migration, see [Connection Migration](https://www.rfc-editor.org/rfc/rfc9000.html#name-connection-migration) at RFC 9000. For more information about supported TLSv1.3 ciphers, see [Supported protocols and ciphers between viewers and CloudFront](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/secure-connections-supported-viewer-protocols-ciphers.html).
        public var httpVersion: CloudFrontClientTypes.HttpVersion?
        /// If you want CloudFront to respond to IPv6 DNS requests with an IPv6 address for your distribution, specify true. If you specify false, CloudFront responds to IPv6 DNS requests with the DNS response code NOERROR and with no IP addresses. This allows viewers to submit a second request, for an IPv4 address for your distribution. In general, you should enable IPv6 if you have users on IPv6 networks who want to access your content. However, if you're using signed URLs or signed cookies to restrict access to your content, and if you're using a custom policy that includes the IpAddress parameter to restrict the IP addresses that can access your content, don't enable IPv6. If you want to restrict access to some content by IP address and not restrict access to other content (or restrict access but not by IP address), you can create two distributions. For more information, see [Creating a Signed URL Using a Custom Policy](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-creating-signed-url-custom-policy.html) in the Amazon CloudFront Developer Guide. If you're using an Route 53 Amazon Web Services Integration alias resource record set to route traffic to your CloudFront distribution, you need to create a second alias resource record set when both of the following are true:
        ///
        /// * You enable IPv6 for the distribution
        ///
        /// * You're using alternate domain names in the URLs for your objects
        ///
        ///
        /// For more information, see [Routing Traffic to an Amazon CloudFront Web Distribution by Using Your Domain Name](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-to-cloudfront-distribution.html) in the Route 53 Amazon Web Services Integration Developer Guide. If you created a CNAME resource record set, either with Route 53 Amazon Web Services Integration or with another DNS service, you don't need to make any changes. A CNAME record will route traffic to your distribution regardless of the IP address format of the viewer request.
        public var isIPV6Enabled: Swift.Bool?
        /// A complex type that controls whether access logs are written for the distribution. For more information about logging, see [Access Logs](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/AccessLogs.html) in the Amazon CloudFront Developer Guide.
        public var logging: CloudFrontClientTypes.LoggingConfig?
        /// A complex type that contains information about origin groups for this distribution.
        public var originGroups: CloudFrontClientTypes.OriginGroups?
        /// A complex type that contains information about origins for this distribution.
        /// This member is required.
        public var origins: CloudFrontClientTypes.Origins?
        /// The price class that corresponds with the maximum price that you want to pay for CloudFront service. If you specify PriceClass_All, CloudFront responds to requests for your objects from all CloudFront edge locations. If you specify a price class other than PriceClass_All, CloudFront serves your objects from the CloudFront edge location that has the lowest latency among the edge locations in your price class. Viewers who are in or near regions that are excluded from your specified price class may encounter slower performance. For more information about price classes, see [Choosing the Price Class for a CloudFront Distribution](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PriceClass.html) in the Amazon CloudFront Developer Guide. For information about CloudFront pricing, including how price classes (such as Price Class 100) map to CloudFront regions, see [Amazon CloudFront Pricing](http://aws.amazon.com/cloudfront/pricing/).
        public var priceClass: CloudFrontClientTypes.PriceClass?
        /// A complex type that identifies ways in which you want to restrict distribution of your content.
        public var restrictions: CloudFrontClientTypes.Restrictions?
        /// A Boolean that indicates whether this is a staging distribution. When this value is true, this is a staging distribution. When this value is false, this is not a staging distribution.
        public var staging: Swift.Bool?
        /// A complex type that determines the distribution's SSL/TLS configuration for communicating with viewers.
        public var viewerCertificate: CloudFrontClientTypes.ViewerCertificate?
        /// A unique identifier that specifies the WAF web ACL, if any, to associate with this distribution. To specify a web ACL created using the latest version of WAF, use the ACL ARN, for example arn:aws:wafv2:us-east-1:123456789012:global/webacl/ExampleWebACL/473e64fd-f30b-4765-81a0-62ad96dd167a. To specify a web ACL created using WAF Classic, use the ACL ID, for example 473e64fd-f30b-4765-81a0-62ad96dd167a. WAF is a web application firewall that lets you monitor the HTTP and HTTPS requests that are forwarded to CloudFront, and lets you control access to your content. Based on conditions that you specify, such as the IP addresses that requests originate from or the values of query strings, CloudFront responds to requests either with the requested content or with an HTTP 403 status code (Forbidden). You can also configure CloudFront to return a custom error page when a request is blocked. For more information about WAF, see the [WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/what-is-aws-waf.html).
        public var webACLId: Swift.String?

        public init(
            aliases: CloudFrontClientTypes.Aliases? = nil,
            cacheBehaviors: CloudFrontClientTypes.CacheBehaviors? = nil,
            callerReference: Swift.String? = nil,
            comment: Swift.String? = nil,
            continuousDeploymentPolicyId: Swift.String? = nil,
            customErrorResponses: CloudFrontClientTypes.CustomErrorResponses? = nil,
            defaultCacheBehavior: CloudFrontClientTypes.DefaultCacheBehavior? = nil,
            defaultRootObject: Swift.String? = nil,
            enabled: Swift.Bool? = nil,
            httpVersion: CloudFrontClientTypes.HttpVersion? = nil,
            isIPV6Enabled: Swift.Bool? = nil,
            logging: CloudFrontClientTypes.LoggingConfig? = nil,
            originGroups: CloudFrontClientTypes.OriginGroups? = nil,
            origins: CloudFrontClientTypes.Origins? = nil,
            priceClass: CloudFrontClientTypes.PriceClass? = nil,
            restrictions: CloudFrontClientTypes.Restrictions? = nil,
            staging: Swift.Bool? = nil,
            viewerCertificate: CloudFrontClientTypes.ViewerCertificate? = nil,
            webACLId: Swift.String? = nil
        )
        {
            self.aliases = aliases
            self.cacheBehaviors = cacheBehaviors
            self.callerReference = callerReference
            self.comment = comment
            self.continuousDeploymentPolicyId = continuousDeploymentPolicyId
            self.customErrorResponses = customErrorResponses
            self.defaultCacheBehavior = defaultCacheBehavior
            self.defaultRootObject = defaultRootObject
            self.enabled = enabled
            self.httpVersion = httpVersion
            self.isIPV6Enabled = isIPV6Enabled
            self.logging = logging
            self.originGroups = originGroups
            self.origins = origins
            self.priceClass = priceClass
            self.restrictions = restrictions
            self.staging = staging
            self.viewerCertificate = viewerCertificate
            self.webACLId = webACLId
        }
    }

}

extension CloudFrontClientTypes.DistributionConfigWithTags {

    static func writingClosure(_ value: CloudFrontClientTypes.DistributionConfigWithTags?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["DistributionConfig"].write(value.distributionConfig, writingClosure: CloudFrontClientTypes.DistributionConfig.writingClosure(_:to:))
        try writer["Tags"].write(value.tags, writingClosure: CloudFrontClientTypes.Tags.writingClosure(_:to:))
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.DistributionConfigWithTags {
        var value = CloudFrontClientTypes.DistributionConfigWithTags()
        value.distributionConfig = try reader["DistributionConfig"].readIfPresent(readingClosure: CloudFrontClientTypes.DistributionConfig.readingClosure(from:))
        value.tags = try reader["Tags"].readIfPresent(readingClosure: CloudFrontClientTypes.Tags.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// A distribution Configuration and a list of tags to be associated with the distribution.
    public struct DistributionConfigWithTags: Swift.Equatable {
        /// A distribution configuration.
        /// This member is required.
        public var distributionConfig: CloudFrontClientTypes.DistributionConfig?
        /// A complex type that contains zero or more Tag elements.
        /// This member is required.
        public var tags: CloudFrontClientTypes.Tags?

        public init(
            distributionConfig: CloudFrontClientTypes.DistributionConfig? = nil,
            tags: CloudFrontClientTypes.Tags? = nil
        )
        {
            self.distributionConfig = distributionConfig
            self.tags = tags
        }
    }

}

extension CloudFrontClientTypes.DistributionIdList {

    static func writingClosure(_ value: CloudFrontClientTypes.DistributionIdList?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["IsTruncated"].write(value.isTruncated)
        try writer["Items"].writeList(value.items, memberWritingClosure: Swift.String.writingClosure(_:to:), memberNodeInfo: "DistributionId", isFlattened: false)
        try writer["Marker"].write(value.marker)
        try writer["MaxItems"].write(value.maxItems)
        try writer["NextMarker"].write(value.nextMarker)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.DistributionIdList {
        var value = CloudFrontClientTypes.DistributionIdList()
        value.marker = try reader["Marker"].readIfPresent()
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.maxItems = try reader["MaxItems"].readIfPresent()
        value.isTruncated = try reader["IsTruncated"].readIfPresent()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure(from:), memberNodeInfo: "DistributionId", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// A list of distribution IDs.
    public struct DistributionIdList: Swift.Equatable {
        /// A flag that indicates whether more distribution IDs remain to be listed. If your results were truncated, you can make a subsequent request using the Marker request field to retrieve more distribution IDs in the list.
        /// This member is required.
        public var isTruncated: Swift.Bool?
        /// Contains the distribution IDs in the list.
        public var items: [Swift.String]?
        /// The value provided in the Marker request field.
        /// This member is required.
        public var marker: Swift.String?
        /// The maximum number of distribution IDs requested.
        /// This member is required.
        public var maxItems: Swift.Int?
        /// Contains the value that you should use in the Marker field of a subsequent request to continue listing distribution IDs where you left off.
        public var nextMarker: Swift.String?
        /// The total number of distribution IDs returned in the response.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            isTruncated: Swift.Bool? = nil,
            items: [Swift.String]? = nil,
            marker: Swift.String? = nil,
            maxItems: Swift.Int? = nil,
            nextMarker: Swift.String? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.isTruncated = isTruncated
            self.items = items
            self.marker = marker
            self.maxItems = maxItems
            self.nextMarker = nextMarker
            self.quantity = quantity
        }
    }

}

extension CloudFrontClientTypes.DistributionList {

    static func writingClosure(_ value: CloudFrontClientTypes.DistributionList?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["IsTruncated"].write(value.isTruncated)
        try writer["Items"].writeList(value.items, memberWritingClosure: CloudFrontClientTypes.DistributionSummary.writingClosure(_:to:), memberNodeInfo: "DistributionSummary", isFlattened: false)
        try writer["Marker"].write(value.marker)
        try writer["MaxItems"].write(value.maxItems)
        try writer["NextMarker"].write(value.nextMarker)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.DistributionList {
        var value = CloudFrontClientTypes.DistributionList()
        value.marker = try reader["Marker"].readIfPresent()
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.maxItems = try reader["MaxItems"].readIfPresent()
        value.isTruncated = try reader["IsTruncated"].readIfPresent()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: CloudFrontClientTypes.DistributionSummary.readingClosure(from:), memberNodeInfo: "DistributionSummary", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// A distribution list.
    public struct DistributionList: Swift.Equatable {
        /// A flag that indicates whether more distributions remain to be listed. If your results were truncated, you can make a follow-up pagination request using the Marker request parameter to retrieve more distributions in the list.
        /// This member is required.
        public var isTruncated: Swift.Bool?
        /// A complex type that contains one DistributionSummary element for each distribution that was created by the current Amazon Web Services account.
        public var items: [CloudFrontClientTypes.DistributionSummary]?
        /// The value you provided for the Marker request parameter.
        /// This member is required.
        public var marker: Swift.String?
        /// The value you provided for the MaxItems request parameter.
        /// This member is required.
        public var maxItems: Swift.Int?
        /// If IsTruncated is true, this element is present and contains the value you can use for the Marker request parameter to continue listing your distributions where they left off.
        public var nextMarker: Swift.String?
        /// The number of distributions that were created by the current Amazon Web Services account.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            isTruncated: Swift.Bool? = nil,
            items: [CloudFrontClientTypes.DistributionSummary]? = nil,
            marker: Swift.String? = nil,
            maxItems: Swift.Int? = nil,
            nextMarker: Swift.String? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.isTruncated = isTruncated
            self.items = items
            self.marker = marker
            self.maxItems = maxItems
            self.nextMarker = nextMarker
            self.quantity = quantity
        }
    }

}

extension DistributionNotDisabled {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> DistributionNotDisabled {
        var value = DistributionNotDisabled()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension DistributionNotDisabled {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The specified CloudFront distribution is not disabled. You must disable the distribution before you can delete it.
public struct DistributionNotDisabled: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DistributionNotDisabled" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFrontClientTypes.DistributionSummary {

    static func writingClosure(_ value: CloudFrontClientTypes.DistributionSummary?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["ARN"].write(value.arn)
        try writer["AliasICPRecordals"].writeList(value.aliasICPRecordals, memberWritingClosure: CloudFrontClientTypes.AliasICPRecordal.writingClosure(_:to:), memberNodeInfo: "AliasICPRecordal", isFlattened: false)
        try writer["Aliases"].write(value.aliases, writingClosure: CloudFrontClientTypes.Aliases.writingClosure(_:to:))
        try writer["CacheBehaviors"].write(value.cacheBehaviors, writingClosure: CloudFrontClientTypes.CacheBehaviors.writingClosure(_:to:))
        try writer["Comment"].write(value.comment)
        try writer["CustomErrorResponses"].write(value.customErrorResponses, writingClosure: CloudFrontClientTypes.CustomErrorResponses.writingClosure(_:to:))
        try writer["DefaultCacheBehavior"].write(value.defaultCacheBehavior, writingClosure: CloudFrontClientTypes.DefaultCacheBehavior.writingClosure(_:to:))
        try writer["DomainName"].write(value.domainName)
        try writer["Enabled"].write(value.enabled)
        try writer["HttpVersion"].write(value.httpVersion)
        try writer["Id"].write(value.id)
        try writer["IsIPV6Enabled"].write(value.isIPV6Enabled)
        try writer["LastModifiedTime"].writeTimestamp(value.lastModifiedTime, format: .dateTime)
        try writer["OriginGroups"].write(value.originGroups, writingClosure: CloudFrontClientTypes.OriginGroups.writingClosure(_:to:))
        try writer["Origins"].write(value.origins, writingClosure: CloudFrontClientTypes.Origins.writingClosure(_:to:))
        try writer["PriceClass"].write(value.priceClass)
        try writer["Restrictions"].write(value.restrictions, writingClosure: CloudFrontClientTypes.Restrictions.writingClosure(_:to:))
        try writer["Staging"].write(value.staging)
        try writer["Status"].write(value.status)
        try writer["ViewerCertificate"].write(value.viewerCertificate, writingClosure: CloudFrontClientTypes.ViewerCertificate.writingClosure(_:to:))
        try writer["WebACLId"].write(value.webACLId)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.DistributionSummary {
        var value = CloudFrontClientTypes.DistributionSummary()
        value.id = try reader["Id"].readIfPresent()
        value.arn = try reader["ARN"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: .dateTime)
        value.domainName = try reader["DomainName"].readIfPresent()
        value.aliases = try reader["Aliases"].readIfPresent(readingClosure: CloudFrontClientTypes.Aliases.readingClosure(from:))
        value.origins = try reader["Origins"].readIfPresent(readingClosure: CloudFrontClientTypes.Origins.readingClosure(from:))
        value.originGroups = try reader["OriginGroups"].readIfPresent(readingClosure: CloudFrontClientTypes.OriginGroups.readingClosure(from:))
        value.defaultCacheBehavior = try reader["DefaultCacheBehavior"].readIfPresent(readingClosure: CloudFrontClientTypes.DefaultCacheBehavior.readingClosure(from:))
        value.cacheBehaviors = try reader["CacheBehaviors"].readIfPresent(readingClosure: CloudFrontClientTypes.CacheBehaviors.readingClosure(from:))
        value.customErrorResponses = try reader["CustomErrorResponses"].readIfPresent(readingClosure: CloudFrontClientTypes.CustomErrorResponses.readingClosure(from:))
        value.comment = try reader["Comment"].readIfPresent()
        value.priceClass = try reader["PriceClass"].readIfPresent()
        value.enabled = try reader["Enabled"].readIfPresent()
        value.viewerCertificate = try reader["ViewerCertificate"].readIfPresent(readingClosure: CloudFrontClientTypes.ViewerCertificate.readingClosure(from:))
        value.restrictions = try reader["Restrictions"].readIfPresent(readingClosure: CloudFrontClientTypes.Restrictions.readingClosure(from:))
        value.webACLId = try reader["WebACLId"].readIfPresent()
        value.httpVersion = try reader["HttpVersion"].readIfPresent()
        value.isIPV6Enabled = try reader["IsIPV6Enabled"].readIfPresent()
        value.aliasICPRecordals = try reader["AliasICPRecordals"].readListIfPresent(memberReadingClosure: CloudFrontClientTypes.AliasICPRecordal.readingClosure(from:), memberNodeInfo: "AliasICPRecordal", isFlattened: false)
        value.staging = try reader["Staging"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// A summary of the information about a CloudFront distribution.
    public struct DistributionSummary: Swift.Equatable {
        /// Amazon Web Services services in China customers must file for an Internet Content Provider (ICP) recordal if they want to serve content publicly on an alternate domain name, also known as a CNAME, that they've added to CloudFront. AliasICPRecordal provides the ICP recordal status for CNAMEs associated with distributions. For more information about ICP recordals, see [ Signup, Accounts, and Credentials](https://docs.amazonaws.cn/en_us/aws/latest/userguide/accounts-and-credentials.html) in Getting Started with Amazon Web Services services in China.
        public var aliasICPRecordals: [CloudFrontClientTypes.AliasICPRecordal]?
        /// A complex type that contains information about CNAMEs (alternate domain names), if any, for this distribution.
        /// This member is required.
        public var aliases: CloudFrontClientTypes.Aliases?
        /// The ARN (Amazon Resource Name) for the distribution. For example: arn:aws:cloudfront::123456789012:distribution/EDFDVBD632BHDS5, where 123456789012 is your Amazon Web Services account ID.
        /// This member is required.
        public var arn: Swift.String?
        /// A complex type that contains zero or more CacheBehavior elements.
        /// This member is required.
        public var cacheBehaviors: CloudFrontClientTypes.CacheBehaviors?
        /// The comment originally specified when this distribution was created.
        /// This member is required.
        public var comment: Swift.String?
        /// A complex type that contains zero or more CustomErrorResponses elements.
        /// This member is required.
        public var customErrorResponses: CloudFrontClientTypes.CustomErrorResponses?
        /// A complex type that describes the default cache behavior if you don't specify a CacheBehavior element or if files don't match any of the values of PathPattern in CacheBehavior elements. You must create exactly one default cache behavior.
        /// This member is required.
        public var defaultCacheBehavior: CloudFrontClientTypes.DefaultCacheBehavior?
        /// The domain name that corresponds to the distribution, for example, d111111abcdef8.cloudfront.net.
        /// This member is required.
        public var domainName: Swift.String?
        /// Whether the distribution is enabled to accept user requests for content.
        /// This member is required.
        public var enabled: Swift.Bool?
        /// Specify the maximum HTTP version that you want viewers to use to communicate with CloudFront. The default value for new web distributions is http2. Viewers that don't support HTTP/2 will automatically use an earlier version.
        /// This member is required.
        public var httpVersion: CloudFrontClientTypes.HttpVersion?
        /// The identifier for the distribution. For example: EDFDVBD632BHDS5.
        /// This member is required.
        public var id: Swift.String?
        /// Whether CloudFront responds to IPv6 DNS requests with an IPv6 address for your distribution.
        /// This member is required.
        public var isIPV6Enabled: Swift.Bool?
        /// The date and time the distribution was last modified.
        /// This member is required.
        public var lastModifiedTime: ClientRuntime.Date?
        /// A complex type that contains information about origin groups for this distribution.
        public var originGroups: CloudFrontClientTypes.OriginGroups?
        /// A complex type that contains information about origins for this distribution.
        /// This member is required.
        public var origins: CloudFrontClientTypes.Origins?
        /// A complex type that contains information about price class for this streaming distribution.
        /// This member is required.
        public var priceClass: CloudFrontClientTypes.PriceClass?
        /// A complex type that identifies ways in which you want to restrict distribution of your content.
        /// This member is required.
        public var restrictions: CloudFrontClientTypes.Restrictions?
        /// Whether the primary distribution has a staging distribution enabled.
        /// This member is required.
        public var staging: Swift.Bool?
        /// The current status of the distribution. When the status is Deployed, the distribution's information is propagated to all CloudFront edge locations.
        /// This member is required.
        public var status: Swift.String?
        /// A complex type that determines the distribution's SSL/TLS configuration for communicating with viewers.
        /// This member is required.
        public var viewerCertificate: CloudFrontClientTypes.ViewerCertificate?
        /// The Web ACL Id (if any) associated with the distribution.
        /// This member is required.
        public var webACLId: Swift.String?

        public init(
            aliasICPRecordals: [CloudFrontClientTypes.AliasICPRecordal]? = nil,
            aliases: CloudFrontClientTypes.Aliases? = nil,
            arn: Swift.String? = nil,
            cacheBehaviors: CloudFrontClientTypes.CacheBehaviors? = nil,
            comment: Swift.String? = nil,
            customErrorResponses: CloudFrontClientTypes.CustomErrorResponses? = nil,
            defaultCacheBehavior: CloudFrontClientTypes.DefaultCacheBehavior? = nil,
            domainName: Swift.String? = nil,
            enabled: Swift.Bool? = nil,
            httpVersion: CloudFrontClientTypes.HttpVersion? = nil,
            id: Swift.String? = nil,
            isIPV6Enabled: Swift.Bool? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            originGroups: CloudFrontClientTypes.OriginGroups? = nil,
            origins: CloudFrontClientTypes.Origins? = nil,
            priceClass: CloudFrontClientTypes.PriceClass? = nil,
            restrictions: CloudFrontClientTypes.Restrictions? = nil,
            staging: Swift.Bool? = nil,
            status: Swift.String? = nil,
            viewerCertificate: CloudFrontClientTypes.ViewerCertificate? = nil,
            webACLId: Swift.String? = nil
        )
        {
            self.aliasICPRecordals = aliasICPRecordals
            self.aliases = aliases
            self.arn = arn
            self.cacheBehaviors = cacheBehaviors
            self.comment = comment
            self.customErrorResponses = customErrorResponses
            self.defaultCacheBehavior = defaultCacheBehavior
            self.domainName = domainName
            self.enabled = enabled
            self.httpVersion = httpVersion
            self.id = id
            self.isIPV6Enabled = isIPV6Enabled
            self.lastModifiedTime = lastModifiedTime
            self.originGroups = originGroups
            self.origins = origins
            self.priceClass = priceClass
            self.restrictions = restrictions
            self.staging = staging
            self.status = status
            self.viewerCertificate = viewerCertificate
            self.webACLId = webACLId
        }
    }

}

extension CloudFrontClientTypes.EncryptionEntities {

    static func writingClosure(_ value: CloudFrontClientTypes.EncryptionEntities?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Items"].writeList(value.items, memberWritingClosure: CloudFrontClientTypes.EncryptionEntity.writingClosure(_:to:), memberNodeInfo: "EncryptionEntity", isFlattened: false)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.EncryptionEntities {
        var value = CloudFrontClientTypes.EncryptionEntities()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: CloudFrontClientTypes.EncryptionEntity.readingClosure(from:), memberNodeInfo: "EncryptionEntity", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// Complex data type for field-level encryption profiles that includes all of the encryption entities.
    public struct EncryptionEntities: Swift.Equatable {
        /// An array of field patterns in a field-level encryption content type-profile mapping.
        public var items: [CloudFrontClientTypes.EncryptionEntity]?
        /// Number of field pattern items in a field-level encryption content type-profile mapping.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            items: [CloudFrontClientTypes.EncryptionEntity]? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.items = items
            self.quantity = quantity
        }
    }

}

extension CloudFrontClientTypes.EncryptionEntity {

    static func writingClosure(_ value: CloudFrontClientTypes.EncryptionEntity?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["FieldPatterns"].write(value.fieldPatterns, writingClosure: CloudFrontClientTypes.FieldPatterns.writingClosure(_:to:))
        try writer["ProviderId"].write(value.providerId)
        try writer["PublicKeyId"].write(value.publicKeyId)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.EncryptionEntity {
        var value = CloudFrontClientTypes.EncryptionEntity()
        value.publicKeyId = try reader["PublicKeyId"].readIfPresent()
        value.providerId = try reader["ProviderId"].readIfPresent()
        value.fieldPatterns = try reader["FieldPatterns"].readIfPresent(readingClosure: CloudFrontClientTypes.FieldPatterns.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// Complex data type for field-level encryption profiles that includes the encryption key and field pattern specifications.
    public struct EncryptionEntity: Swift.Equatable {
        /// Field patterns in a field-level encryption content type profile specify the fields that you want to be encrypted. You can provide the full field name, or any beginning characters followed by a wildcard (*). You can't overlap field patterns. For example, you can't have both ABC* and AB*. Note that field patterns are case-sensitive.
        /// This member is required.
        public var fieldPatterns: CloudFrontClientTypes.FieldPatterns?
        /// The provider associated with the public key being used for encryption. This value must also be provided with the private key for applications to be able to decrypt data.
        /// This member is required.
        public var providerId: Swift.String?
        /// The public key associated with a set of field-level encryption patterns, to be used when encrypting the fields that match the patterns.
        /// This member is required.
        public var publicKeyId: Swift.String?

        public init(
            fieldPatterns: CloudFrontClientTypes.FieldPatterns? = nil,
            providerId: Swift.String? = nil,
            publicKeyId: Swift.String? = nil
        )
        {
            self.fieldPatterns = fieldPatterns
            self.providerId = providerId
            self.publicKeyId = publicKeyId
        }
    }

}

extension CloudFrontClientTypes.EndPoint {

    static func writingClosure(_ value: CloudFrontClientTypes.EndPoint?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["KinesisStreamConfig"].write(value.kinesisStreamConfig, writingClosure: CloudFrontClientTypes.KinesisStreamConfig.writingClosure(_:to:))
        try writer["StreamType"].write(value.streamType)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.EndPoint {
        var value = CloudFrontClientTypes.EndPoint()
        value.streamType = try reader["StreamType"].readIfPresent()
        value.kinesisStreamConfig = try reader["KinesisStreamConfig"].readIfPresent(readingClosure: CloudFrontClientTypes.KinesisStreamConfig.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// Contains information about the Amazon Kinesis data stream where you are sending real-time log data in a real-time log configuration.
    public struct EndPoint: Swift.Equatable {
        /// Contains information about the Amazon Kinesis data stream where you are sending real-time log data.
        public var kinesisStreamConfig: CloudFrontClientTypes.KinesisStreamConfig?
        /// The type of data stream where you are sending real-time log data. The only valid value is Kinesis.
        /// This member is required.
        public var streamType: Swift.String?

        public init(
            kinesisStreamConfig: CloudFrontClientTypes.KinesisStreamConfig? = nil,
            streamType: Swift.String? = nil
        )
        {
            self.kinesisStreamConfig = kinesisStreamConfig
            self.streamType = streamType
        }
    }

}

extension EntityAlreadyExists {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> EntityAlreadyExists {
        var value = EntityAlreadyExists()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension EntityAlreadyExists {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The Key Value Store entity already exists. You must provide a unique Key Value Store entity.
public struct EntityAlreadyExists: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "EntityAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension EntityLimitExceeded {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> EntityLimitExceeded {
        var value = EntityLimitExceeded()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension EntityLimitExceeded {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The Key Value Store entity limit has been exceeded.
public struct EntityLimitExceeded: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "EntityLimitExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension EntityNotFound {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> EntityNotFound {
        var value = EntityNotFound()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension EntityNotFound {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The Key Value Store entity was not found.
public struct EntityNotFound: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "EntityNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension EntitySizeLimitExceeded {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> EntitySizeLimitExceeded {
        var value = EntitySizeLimitExceeded()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension EntitySizeLimitExceeded {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The Key Value Store entity size limit was exceeded.
public struct EntitySizeLimitExceeded: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "EntitySizeLimitExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFrontClientTypes {
    public enum EventType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case originRequest
        case originResponse
        case viewerRequest
        case viewerResponse
        case sdkUnknown(Swift.String)

        public static var allCases: [EventType] {
            return [
                .originRequest,
                .originResponse,
                .viewerRequest,
                .viewerResponse,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .originRequest: return "origin-request"
            case .originResponse: return "origin-response"
            case .viewerRequest: return "viewer-request"
            case .viewerResponse: return "viewer-response"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EventType(rawValue: rawValue) ?? EventType.sdkUnknown(rawValue)
        }
    }
}

extension CloudFrontClientTypes.FieldLevelEncryption {

    static func writingClosure(_ value: CloudFrontClientTypes.FieldLevelEncryption?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["FieldLevelEncryptionConfig"].write(value.fieldLevelEncryptionConfig, writingClosure: CloudFrontClientTypes.FieldLevelEncryptionConfig.writingClosure(_:to:))
        try writer["Id"].write(value.id)
        try writer["LastModifiedTime"].writeTimestamp(value.lastModifiedTime, format: .dateTime)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.FieldLevelEncryption {
        var value = CloudFrontClientTypes.FieldLevelEncryption()
        value.id = try reader["Id"].readIfPresent()
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: .dateTime)
        value.fieldLevelEncryptionConfig = try reader["FieldLevelEncryptionConfig"].readIfPresent(readingClosure: CloudFrontClientTypes.FieldLevelEncryptionConfig.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// A complex data type that includes the profile configurations and other options specified for field-level encryption.
    public struct FieldLevelEncryption: Swift.Equatable {
        /// A complex data type that includes the profile configurations specified for field-level encryption.
        /// This member is required.
        public var fieldLevelEncryptionConfig: CloudFrontClientTypes.FieldLevelEncryptionConfig?
        /// The configuration ID for a field-level encryption configuration which includes a set of profiles that specify certain selected data fields to be encrypted by specific public keys.
        /// This member is required.
        public var id: Swift.String?
        /// The last time the field-level encryption configuration was changed.
        /// This member is required.
        public var lastModifiedTime: ClientRuntime.Date?

        public init(
            fieldLevelEncryptionConfig: CloudFrontClientTypes.FieldLevelEncryptionConfig? = nil,
            id: Swift.String? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil
        )
        {
            self.fieldLevelEncryptionConfig = fieldLevelEncryptionConfig
            self.id = id
            self.lastModifiedTime = lastModifiedTime
        }
    }

}

extension CloudFrontClientTypes.FieldLevelEncryptionConfig {

    static func writingClosure(_ value: CloudFrontClientTypes.FieldLevelEncryptionConfig?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["CallerReference"].write(value.callerReference)
        try writer["Comment"].write(value.comment)
        try writer["ContentTypeProfileConfig"].write(value.contentTypeProfileConfig, writingClosure: CloudFrontClientTypes.ContentTypeProfileConfig.writingClosure(_:to:))
        try writer["QueryArgProfileConfig"].write(value.queryArgProfileConfig, writingClosure: CloudFrontClientTypes.QueryArgProfileConfig.writingClosure(_:to:))
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.FieldLevelEncryptionConfig {
        var value = CloudFrontClientTypes.FieldLevelEncryptionConfig()
        value.callerReference = try reader["CallerReference"].readIfPresent()
        value.comment = try reader["Comment"].readIfPresent()
        value.queryArgProfileConfig = try reader["QueryArgProfileConfig"].readIfPresent(readingClosure: CloudFrontClientTypes.QueryArgProfileConfig.readingClosure(from:))
        value.contentTypeProfileConfig = try reader["ContentTypeProfileConfig"].readIfPresent(readingClosure: CloudFrontClientTypes.ContentTypeProfileConfig.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// A complex data type that includes the profile configurations specified for field-level encryption.
    public struct FieldLevelEncryptionConfig: Swift.Equatable {
        /// A unique number that ensures the request can't be replayed.
        /// This member is required.
        public var callerReference: Swift.String?
        /// An optional comment about the configuration. The comment cannot be longer than 128 characters.
        public var comment: Swift.String?
        /// A complex data type that specifies when to forward content if a content type isn't recognized and profiles to use as by default in a request if a query argument doesn't specify a profile to use.
        public var contentTypeProfileConfig: CloudFrontClientTypes.ContentTypeProfileConfig?
        /// A complex data type that specifies when to forward content if a profile isn't found and the profile that can be provided as a query argument in a request.
        public var queryArgProfileConfig: CloudFrontClientTypes.QueryArgProfileConfig?

        public init(
            callerReference: Swift.String? = nil,
            comment: Swift.String? = nil,
            contentTypeProfileConfig: CloudFrontClientTypes.ContentTypeProfileConfig? = nil,
            queryArgProfileConfig: CloudFrontClientTypes.QueryArgProfileConfig? = nil
        )
        {
            self.callerReference = callerReference
            self.comment = comment
            self.contentTypeProfileConfig = contentTypeProfileConfig
            self.queryArgProfileConfig = queryArgProfileConfig
        }
    }

}

extension FieldLevelEncryptionConfigAlreadyExists {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> FieldLevelEncryptionConfigAlreadyExists {
        var value = FieldLevelEncryptionConfigAlreadyExists()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension FieldLevelEncryptionConfigAlreadyExists {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The specified configuration for field-level encryption already exists.
public struct FieldLevelEncryptionConfigAlreadyExists: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "FieldLevelEncryptionConfigAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension FieldLevelEncryptionConfigInUse {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> FieldLevelEncryptionConfigInUse {
        var value = FieldLevelEncryptionConfigInUse()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension FieldLevelEncryptionConfigInUse {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The specified configuration for field-level encryption is in use.
public struct FieldLevelEncryptionConfigInUse: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "FieldLevelEncryptionConfigInUse" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFrontClientTypes.FieldLevelEncryptionList {

    static func writingClosure(_ value: CloudFrontClientTypes.FieldLevelEncryptionList?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Items"].writeList(value.items, memberWritingClosure: CloudFrontClientTypes.FieldLevelEncryptionSummary.writingClosure(_:to:), memberNodeInfo: "FieldLevelEncryptionSummary", isFlattened: false)
        try writer["MaxItems"].write(value.maxItems)
        try writer["NextMarker"].write(value.nextMarker)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.FieldLevelEncryptionList {
        var value = CloudFrontClientTypes.FieldLevelEncryptionList()
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.maxItems = try reader["MaxItems"].readIfPresent()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: CloudFrontClientTypes.FieldLevelEncryptionSummary.readingClosure(from:), memberNodeInfo: "FieldLevelEncryptionSummary", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// List of field-level encryption configurations.
    public struct FieldLevelEncryptionList: Swift.Equatable {
        /// An array of field-level encryption items.
        public var items: [CloudFrontClientTypes.FieldLevelEncryptionSummary]?
        /// The maximum number of elements you want in the response body.
        /// This member is required.
        public var maxItems: Swift.Int?
        /// If there are more elements to be listed, this element is present and contains the value that you can use for the Marker request parameter to continue listing your configurations where you left off.
        public var nextMarker: Swift.String?
        /// The number of field-level encryption items.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            items: [CloudFrontClientTypes.FieldLevelEncryptionSummary]? = nil,
            maxItems: Swift.Int? = nil,
            nextMarker: Swift.String? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.items = items
            self.maxItems = maxItems
            self.nextMarker = nextMarker
            self.quantity = quantity
        }
    }

}

extension CloudFrontClientTypes.FieldLevelEncryptionProfile {

    static func writingClosure(_ value: CloudFrontClientTypes.FieldLevelEncryptionProfile?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["FieldLevelEncryptionProfileConfig"].write(value.fieldLevelEncryptionProfileConfig, writingClosure: CloudFrontClientTypes.FieldLevelEncryptionProfileConfig.writingClosure(_:to:))
        try writer["Id"].write(value.id)
        try writer["LastModifiedTime"].writeTimestamp(value.lastModifiedTime, format: .dateTime)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.FieldLevelEncryptionProfile {
        var value = CloudFrontClientTypes.FieldLevelEncryptionProfile()
        value.id = try reader["Id"].readIfPresent()
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: .dateTime)
        value.fieldLevelEncryptionProfileConfig = try reader["FieldLevelEncryptionProfileConfig"].readIfPresent(readingClosure: CloudFrontClientTypes.FieldLevelEncryptionProfileConfig.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// A complex data type for field-level encryption profiles.
    public struct FieldLevelEncryptionProfile: Swift.Equatable {
        /// A complex data type that includes the profile name and the encryption entities for the field-level encryption profile.
        /// This member is required.
        public var fieldLevelEncryptionProfileConfig: CloudFrontClientTypes.FieldLevelEncryptionProfileConfig?
        /// The ID for a field-level encryption profile configuration which includes a set of profiles that specify certain selected data fields to be encrypted by specific public keys.
        /// This member is required.
        public var id: Swift.String?
        /// The last time the field-level encryption profile was updated.
        /// This member is required.
        public var lastModifiedTime: ClientRuntime.Date?

        public init(
            fieldLevelEncryptionProfileConfig: CloudFrontClientTypes.FieldLevelEncryptionProfileConfig? = nil,
            id: Swift.String? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil
        )
        {
            self.fieldLevelEncryptionProfileConfig = fieldLevelEncryptionProfileConfig
            self.id = id
            self.lastModifiedTime = lastModifiedTime
        }
    }

}

extension FieldLevelEncryptionProfileAlreadyExists {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> FieldLevelEncryptionProfileAlreadyExists {
        var value = FieldLevelEncryptionProfileAlreadyExists()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension FieldLevelEncryptionProfileAlreadyExists {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The specified profile for field-level encryption already exists.
public struct FieldLevelEncryptionProfileAlreadyExists: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "FieldLevelEncryptionProfileAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFrontClientTypes.FieldLevelEncryptionProfileConfig {

    static func writingClosure(_ value: CloudFrontClientTypes.FieldLevelEncryptionProfileConfig?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["CallerReference"].write(value.callerReference)
        try writer["Comment"].write(value.comment)
        try writer["EncryptionEntities"].write(value.encryptionEntities, writingClosure: CloudFrontClientTypes.EncryptionEntities.writingClosure(_:to:))
        try writer["Name"].write(value.name)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.FieldLevelEncryptionProfileConfig {
        var value = CloudFrontClientTypes.FieldLevelEncryptionProfileConfig()
        value.name = try reader["Name"].readIfPresent()
        value.callerReference = try reader["CallerReference"].readIfPresent()
        value.comment = try reader["Comment"].readIfPresent()
        value.encryptionEntities = try reader["EncryptionEntities"].readIfPresent(readingClosure: CloudFrontClientTypes.EncryptionEntities.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// A complex data type of profiles for the field-level encryption.
    public struct FieldLevelEncryptionProfileConfig: Swift.Equatable {
        /// A unique number that ensures that the request can't be replayed.
        /// This member is required.
        public var callerReference: Swift.String?
        /// An optional comment for the field-level encryption profile. The comment cannot be longer than 128 characters.
        public var comment: Swift.String?
        /// A complex data type of encryption entities for the field-level encryption profile that include the public key ID, provider, and field patterns for specifying which fields to encrypt with this key.
        /// This member is required.
        public var encryptionEntities: CloudFrontClientTypes.EncryptionEntities?
        /// Profile name for the field-level encryption profile.
        /// This member is required.
        public var name: Swift.String?

        public init(
            callerReference: Swift.String? = nil,
            comment: Swift.String? = nil,
            encryptionEntities: CloudFrontClientTypes.EncryptionEntities? = nil,
            name: Swift.String? = nil
        )
        {
            self.callerReference = callerReference
            self.comment = comment
            self.encryptionEntities = encryptionEntities
            self.name = name
        }
    }

}

extension FieldLevelEncryptionProfileInUse {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> FieldLevelEncryptionProfileInUse {
        var value = FieldLevelEncryptionProfileInUse()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension FieldLevelEncryptionProfileInUse {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The specified profile for field-level encryption is in use.
public struct FieldLevelEncryptionProfileInUse: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "FieldLevelEncryptionProfileInUse" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFrontClientTypes.FieldLevelEncryptionProfileList {

    static func writingClosure(_ value: CloudFrontClientTypes.FieldLevelEncryptionProfileList?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Items"].writeList(value.items, memberWritingClosure: CloudFrontClientTypes.FieldLevelEncryptionProfileSummary.writingClosure(_:to:), memberNodeInfo: "FieldLevelEncryptionProfileSummary", isFlattened: false)
        try writer["MaxItems"].write(value.maxItems)
        try writer["NextMarker"].write(value.nextMarker)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.FieldLevelEncryptionProfileList {
        var value = CloudFrontClientTypes.FieldLevelEncryptionProfileList()
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.maxItems = try reader["MaxItems"].readIfPresent()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: CloudFrontClientTypes.FieldLevelEncryptionProfileSummary.readingClosure(from:), memberNodeInfo: "FieldLevelEncryptionProfileSummary", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// List of field-level encryption profiles.
    public struct FieldLevelEncryptionProfileList: Swift.Equatable {
        /// The field-level encryption profile items.
        public var items: [CloudFrontClientTypes.FieldLevelEncryptionProfileSummary]?
        /// The maximum number of field-level encryption profiles you want in the response body.
        /// This member is required.
        public var maxItems: Swift.Int?
        /// If there are more elements to be listed, this element is present and contains the value that you can use for the Marker request parameter to continue listing your profiles where you left off.
        public var nextMarker: Swift.String?
        /// The number of field-level encryption profiles.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            items: [CloudFrontClientTypes.FieldLevelEncryptionProfileSummary]? = nil,
            maxItems: Swift.Int? = nil,
            nextMarker: Swift.String? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.items = items
            self.maxItems = maxItems
            self.nextMarker = nextMarker
            self.quantity = quantity
        }
    }

}

extension FieldLevelEncryptionProfileSizeExceeded {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> FieldLevelEncryptionProfileSizeExceeded {
        var value = FieldLevelEncryptionProfileSizeExceeded()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension FieldLevelEncryptionProfileSizeExceeded {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The maximum size of a profile for field-level encryption was exceeded.
public struct FieldLevelEncryptionProfileSizeExceeded: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "FieldLevelEncryptionProfileSizeExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFrontClientTypes.FieldLevelEncryptionProfileSummary {

    static func writingClosure(_ value: CloudFrontClientTypes.FieldLevelEncryptionProfileSummary?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Comment"].write(value.comment)
        try writer["EncryptionEntities"].write(value.encryptionEntities, writingClosure: CloudFrontClientTypes.EncryptionEntities.writingClosure(_:to:))
        try writer["Id"].write(value.id)
        try writer["LastModifiedTime"].writeTimestamp(value.lastModifiedTime, format: .dateTime)
        try writer["Name"].write(value.name)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.FieldLevelEncryptionProfileSummary {
        var value = CloudFrontClientTypes.FieldLevelEncryptionProfileSummary()
        value.id = try reader["Id"].readIfPresent()
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: .dateTime)
        value.name = try reader["Name"].readIfPresent()
        value.encryptionEntities = try reader["EncryptionEntities"].readIfPresent(readingClosure: CloudFrontClientTypes.EncryptionEntities.readingClosure(from:))
        value.comment = try reader["Comment"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// The field-level encryption profile summary.
    public struct FieldLevelEncryptionProfileSummary: Swift.Equatable {
        /// An optional comment for the field-level encryption profile summary. The comment cannot be longer than 128 characters.
        public var comment: Swift.String?
        /// A complex data type of encryption entities for the field-level encryption profile that include the public key ID, provider, and field patterns for specifying which fields to encrypt with this key.
        /// This member is required.
        public var encryptionEntities: CloudFrontClientTypes.EncryptionEntities?
        /// ID for the field-level encryption profile summary.
        /// This member is required.
        public var id: Swift.String?
        /// The time when the field-level encryption profile summary was last updated.
        /// This member is required.
        public var lastModifiedTime: ClientRuntime.Date?
        /// Name for the field-level encryption profile summary.
        /// This member is required.
        public var name: Swift.String?

        public init(
            comment: Swift.String? = nil,
            encryptionEntities: CloudFrontClientTypes.EncryptionEntities? = nil,
            id: Swift.String? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            name: Swift.String? = nil
        )
        {
            self.comment = comment
            self.encryptionEntities = encryptionEntities
            self.id = id
            self.lastModifiedTime = lastModifiedTime
            self.name = name
        }
    }

}

extension CloudFrontClientTypes.FieldLevelEncryptionSummary {

    static func writingClosure(_ value: CloudFrontClientTypes.FieldLevelEncryptionSummary?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Comment"].write(value.comment)
        try writer["ContentTypeProfileConfig"].write(value.contentTypeProfileConfig, writingClosure: CloudFrontClientTypes.ContentTypeProfileConfig.writingClosure(_:to:))
        try writer["Id"].write(value.id)
        try writer["LastModifiedTime"].writeTimestamp(value.lastModifiedTime, format: .dateTime)
        try writer["QueryArgProfileConfig"].write(value.queryArgProfileConfig, writingClosure: CloudFrontClientTypes.QueryArgProfileConfig.writingClosure(_:to:))
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.FieldLevelEncryptionSummary {
        var value = CloudFrontClientTypes.FieldLevelEncryptionSummary()
        value.id = try reader["Id"].readIfPresent()
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: .dateTime)
        value.comment = try reader["Comment"].readIfPresent()
        value.queryArgProfileConfig = try reader["QueryArgProfileConfig"].readIfPresent(readingClosure: CloudFrontClientTypes.QueryArgProfileConfig.readingClosure(from:))
        value.contentTypeProfileConfig = try reader["ContentTypeProfileConfig"].readIfPresent(readingClosure: CloudFrontClientTypes.ContentTypeProfileConfig.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// A summary of a field-level encryption item.
    public struct FieldLevelEncryptionSummary: Swift.Equatable {
        /// An optional comment about the field-level encryption item. The comment cannot be longer than 128 characters.
        public var comment: Swift.String?
        /// A summary of a content type-profile mapping.
        public var contentTypeProfileConfig: CloudFrontClientTypes.ContentTypeProfileConfig?
        /// The unique ID of a field-level encryption item.
        /// This member is required.
        public var id: Swift.String?
        /// The last time that the summary of field-level encryption items was modified.
        /// This member is required.
        public var lastModifiedTime: ClientRuntime.Date?
        /// A summary of a query argument-profile mapping.
        public var queryArgProfileConfig: CloudFrontClientTypes.QueryArgProfileConfig?

        public init(
            comment: Swift.String? = nil,
            contentTypeProfileConfig: CloudFrontClientTypes.ContentTypeProfileConfig? = nil,
            id: Swift.String? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            queryArgProfileConfig: CloudFrontClientTypes.QueryArgProfileConfig? = nil
        )
        {
            self.comment = comment
            self.contentTypeProfileConfig = contentTypeProfileConfig
            self.id = id
            self.lastModifiedTime = lastModifiedTime
            self.queryArgProfileConfig = queryArgProfileConfig
        }
    }

}

extension CloudFrontClientTypes.FieldPatterns {

    static func writingClosure(_ value: CloudFrontClientTypes.FieldPatterns?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Items"].writeList(value.items, memberWritingClosure: Swift.String.writingClosure(_:to:), memberNodeInfo: "FieldPattern", isFlattened: false)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.FieldPatterns {
        var value = CloudFrontClientTypes.FieldPatterns()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure(from:), memberNodeInfo: "FieldPattern", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// A complex data type that includes the field patterns to match for field-level encryption.
    public struct FieldPatterns: Swift.Equatable {
        /// An array of the field-level encryption field patterns.
        public var items: [Swift.String]?
        /// The number of field-level encryption field patterns.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            items: [Swift.String]? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.items = items
            self.quantity = quantity
        }
    }

}

extension CloudFrontClientTypes {
    public enum Format: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case urlencoded
        case sdkUnknown(Swift.String)

        public static var allCases: [Format] {
            return [
                .urlencoded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .urlencoded: return "URLEncoded"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Format(rawValue: rawValue) ?? Format.sdkUnknown(rawValue)
        }
    }
}

extension CloudFrontClientTypes.ForwardedValues {

    static func writingClosure(_ value: CloudFrontClientTypes.ForwardedValues?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Cookies"].write(value.cookies, writingClosure: CloudFrontClientTypes.CookiePreference.writingClosure(_:to:))
        try writer["Headers"].write(value.headers, writingClosure: CloudFrontClientTypes.Headers.writingClosure(_:to:))
        try writer["QueryString"].write(value.queryString)
        try writer["QueryStringCacheKeys"].write(value.queryStringCacheKeys, writingClosure: CloudFrontClientTypes.QueryStringCacheKeys.writingClosure(_:to:))
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.ForwardedValues {
        var value = CloudFrontClientTypes.ForwardedValues()
        value.queryString = try reader["QueryString"].readIfPresent()
        value.cookies = try reader["Cookies"].readIfPresent(readingClosure: CloudFrontClientTypes.CookiePreference.readingClosure(from:))
        value.headers = try reader["Headers"].readIfPresent(readingClosure: CloudFrontClientTypes.Headers.readingClosure(from:))
        value.queryStringCacheKeys = try reader["QueryStringCacheKeys"].readIfPresent(readingClosure: CloudFrontClientTypes.QueryStringCacheKeys.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field. If you want to include values in the cache key, use a cache policy. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) in the Amazon CloudFront Developer Guide. If you want to send values to the origin but not include them in the cache key, use an origin request policy. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy) in the Amazon CloudFront Developer Guide. A complex type that specifies how CloudFront handles query strings, cookies, and HTTP headers.
    public struct ForwardedValues: Swift.Equatable {
        /// This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field. If you want to include cookies in the cache key, use a cache policy. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) in the Amazon CloudFront Developer Guide. If you want to send cookies to the origin but not include them in the cache key, use an origin request policy. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy) in the Amazon CloudFront Developer Guide. A complex type that specifies whether you want CloudFront to forward cookies to the origin and, if so, which ones. For more information about forwarding cookies to the origin, see [How CloudFront Forwards, Caches, and Logs Cookies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Cookies.html) in the Amazon CloudFront Developer Guide.
        /// This member is required.
        public var cookies: CloudFrontClientTypes.CookiePreference?
        /// This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field. If you want to include headers in the cache key, use a cache policy. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) in the Amazon CloudFront Developer Guide. If you want to send headers to the origin but not include them in the cache key, use an origin request policy. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy) in the Amazon CloudFront Developer Guide. A complex type that specifies the Headers, if any, that you want CloudFront to forward to the origin for this cache behavior (whitelisted headers). For the headers that you specify, CloudFront also caches separate versions of a specified object that is based on the header values in viewer requests. For more information, see [ Caching Content Based on Request Headers](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/header-caching.html) in the Amazon CloudFront Developer Guide.
        public var headers: CloudFrontClientTypes.Headers?
        /// This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field. If you want to include query strings in the cache key, use a cache policy. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) in the Amazon CloudFront Developer Guide. If you want to send query strings to the origin but not include them in the cache key, use an origin request policy. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy) in the Amazon CloudFront Developer Guide. Indicates whether you want CloudFront to forward query strings to the origin that is associated with this cache behavior and cache based on the query string parameters. CloudFront behavior depends on the value of QueryString and on the values that you specify for QueryStringCacheKeys, if any: If you specify true for QueryString and you don't specify any values for QueryStringCacheKeys, CloudFront forwards all query string parameters to the origin and caches based on all query string parameters. Depending on how many query string parameters and values you have, this can adversely affect performance because CloudFront must forward more requests to the origin. If you specify true for QueryString and you specify one or more values for QueryStringCacheKeys, CloudFront forwards all query string parameters to the origin, but it only caches based on the query string parameters that you specify. If you specify false for QueryString, CloudFront doesn't forward any query string parameters to the origin, and doesn't cache based on query string parameters. For more information, see [Configuring CloudFront to Cache Based on Query String Parameters](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/QueryStringParameters.html) in the Amazon CloudFront Developer Guide.
        /// This member is required.
        public var queryString: Swift.Bool?
        /// This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field. If you want to include query strings in the cache key, use a cache policy. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) in the Amazon CloudFront Developer Guide. If you want to send query strings to the origin but not include them in the cache key, use an origin request policy. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy) in the Amazon CloudFront Developer Guide. A complex type that contains information about the query string parameters that you want CloudFront to use for caching for this cache behavior.
        public var queryStringCacheKeys: CloudFrontClientTypes.QueryStringCacheKeys?

        public init(
            cookies: CloudFrontClientTypes.CookiePreference? = nil,
            headers: CloudFrontClientTypes.Headers? = nil,
            queryString: Swift.Bool? = nil,
            queryStringCacheKeys: CloudFrontClientTypes.QueryStringCacheKeys? = nil
        )
        {
            self.cookies = cookies
            self.headers = headers
            self.queryString = queryString
            self.queryStringCacheKeys = queryStringCacheKeys
        }
    }

}

extension CloudFrontClientTypes {
    public enum FrameOptionsList: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deny
        case sameorigin
        case sdkUnknown(Swift.String)

        public static var allCases: [FrameOptionsList] {
            return [
                .deny,
                .sameorigin,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deny: return "DENY"
            case .sameorigin: return "SAMEORIGIN"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FrameOptionsList(rawValue: rawValue) ?? FrameOptionsList.sdkUnknown(rawValue)
        }
    }
}

extension FunctionAlreadyExists {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> FunctionAlreadyExists {
        var value = FunctionAlreadyExists()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension FunctionAlreadyExists {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// A function with the same name already exists in this Amazon Web Services account. To create a function, you must provide a unique name. To update an existing function, use UpdateFunction.
public struct FunctionAlreadyExists: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "FunctionAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFrontClientTypes.FunctionAssociation {

    static func writingClosure(_ value: CloudFrontClientTypes.FunctionAssociation?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["EventType"].write(value.eventType)
        try writer["FunctionARN"].write(value.functionARN)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.FunctionAssociation {
        var value = CloudFrontClientTypes.FunctionAssociation()
        value.functionARN = try reader["FunctionARN"].readIfPresent()
        value.eventType = try reader["EventType"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// A CloudFront function that is associated with a cache behavior in a CloudFront distribution.
    public struct FunctionAssociation: Swift.Equatable {
        /// The event type of the function, either viewer-request or viewer-response. You cannot use origin-facing event types (origin-request and origin-response) with a CloudFront function.
        /// This member is required.
        public var eventType: CloudFrontClientTypes.EventType?
        /// The Amazon Resource Name (ARN) of the function.
        /// This member is required.
        public var functionARN: Swift.String?

        public init(
            eventType: CloudFrontClientTypes.EventType? = nil,
            functionARN: Swift.String? = nil
        )
        {
            self.eventType = eventType
            self.functionARN = functionARN
        }
    }

}

extension CloudFrontClientTypes.FunctionAssociations {

    static func writingClosure(_ value: CloudFrontClientTypes.FunctionAssociations?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Items"].writeList(value.items, memberWritingClosure: CloudFrontClientTypes.FunctionAssociation.writingClosure(_:to:), memberNodeInfo: "FunctionAssociation", isFlattened: false)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.FunctionAssociations {
        var value = CloudFrontClientTypes.FunctionAssociations()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: CloudFrontClientTypes.FunctionAssociation.readingClosure(from:), memberNodeInfo: "FunctionAssociation", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// A list of CloudFront functions that are associated with a cache behavior in a CloudFront distribution. CloudFront functions must be published to the LIVE stage to associate them with a cache behavior.
    public struct FunctionAssociations: Swift.Equatable {
        /// The CloudFront functions that are associated with a cache behavior in a CloudFront distribution. CloudFront functions must be published to the LIVE stage to associate them with a cache behavior.
        public var items: [CloudFrontClientTypes.FunctionAssociation]?
        /// The number of CloudFront functions in the list.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            items: [CloudFrontClientTypes.FunctionAssociation]? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.items = items
            self.quantity = quantity
        }
    }

}

extension CloudFrontClientTypes.FunctionConfig {

    static func writingClosure(_ value: CloudFrontClientTypes.FunctionConfig?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Comment"].write(value.comment)
        try writer["KeyValueStoreAssociations"].write(value.keyValueStoreAssociations, writingClosure: CloudFrontClientTypes.KeyValueStoreAssociations.writingClosure(_:to:))
        try writer["Runtime"].write(value.runtime)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.FunctionConfig {
        var value = CloudFrontClientTypes.FunctionConfig()
        value.comment = try reader["Comment"].readIfPresent()
        value.runtime = try reader["Runtime"].readIfPresent()
        value.keyValueStoreAssociations = try reader["KeyValueStoreAssociations"].readIfPresent(readingClosure: CloudFrontClientTypes.KeyValueStoreAssociations.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// Contains configuration information about a CloudFront function.
    public struct FunctionConfig: Swift.Equatable {
        /// A comment to describe the function.
        /// This member is required.
        public var comment: Swift.String?
        /// The configuration for the Key Value Store associations.
        public var keyValueStoreAssociations: CloudFrontClientTypes.KeyValueStoreAssociations?
        /// The function's runtime environment version.
        /// This member is required.
        public var runtime: CloudFrontClientTypes.FunctionRuntime?

        public init(
            comment: Swift.String? = nil,
            keyValueStoreAssociations: CloudFrontClientTypes.KeyValueStoreAssociations? = nil,
            runtime: CloudFrontClientTypes.FunctionRuntime? = nil
        )
        {
            self.comment = comment
            self.keyValueStoreAssociations = keyValueStoreAssociations
            self.runtime = runtime
        }
    }

}

extension FunctionInUse {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> FunctionInUse {
        var value = FunctionInUse()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension FunctionInUse {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// Cannot delete the function because it's attached to one or more cache behaviors.
public struct FunctionInUse: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "FunctionInUse" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFrontClientTypes.FunctionList {

    static func writingClosure(_ value: CloudFrontClientTypes.FunctionList?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Items"].writeList(value.items, memberWritingClosure: CloudFrontClientTypes.FunctionSummary.writingClosure(_:to:), memberNodeInfo: "FunctionSummary", isFlattened: false)
        try writer["MaxItems"].write(value.maxItems)
        try writer["NextMarker"].write(value.nextMarker)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.FunctionList {
        var value = CloudFrontClientTypes.FunctionList()
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.maxItems = try reader["MaxItems"].readIfPresent()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: CloudFrontClientTypes.FunctionSummary.readingClosure(from:), memberNodeInfo: "FunctionSummary", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// A list of CloudFront functions.
    public struct FunctionList: Swift.Equatable {
        /// Contains the functions in the list.
        public var items: [CloudFrontClientTypes.FunctionSummary]?
        /// The maximum number of functions requested.
        /// This member is required.
        public var maxItems: Swift.Int?
        /// If there are more items in the list than are in this response, this element is present. It contains the value that you should use in the Marker field of a subsequent request to continue listing functions where you left off.
        public var nextMarker: Swift.String?
        /// The number of functions returned in the response.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            items: [CloudFrontClientTypes.FunctionSummary]? = nil,
            maxItems: Swift.Int? = nil,
            nextMarker: Swift.String? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.items = items
            self.maxItems = maxItems
            self.nextMarker = nextMarker
            self.quantity = quantity
        }
    }

}

extension CloudFrontClientTypes.FunctionMetadata {

    static func writingClosure(_ value: CloudFrontClientTypes.FunctionMetadata?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["CreatedTime"].writeTimestamp(value.createdTime, format: .dateTime)
        try writer["FunctionARN"].write(value.functionARN)
        try writer["LastModifiedTime"].writeTimestamp(value.lastModifiedTime, format: .dateTime)
        try writer["Stage"].write(value.stage)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.FunctionMetadata {
        var value = CloudFrontClientTypes.FunctionMetadata()
        value.functionARN = try reader["FunctionARN"].readIfPresent()
        value.stage = try reader["Stage"].readIfPresent()
        value.createdTime = try reader["CreatedTime"].readTimestampIfPresent(format: .dateTime)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: .dateTime)
        return value
    }
}

extension CloudFrontClientTypes {
    /// Contains metadata about a CloudFront function.
    public struct FunctionMetadata: Swift.Equatable {
        /// The date and time when the function was created.
        public var createdTime: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the function. The ARN uniquely identifies the function.
        /// This member is required.
        public var functionARN: Swift.String?
        /// The date and time when the function was most recently updated.
        /// This member is required.
        public var lastModifiedTime: ClientRuntime.Date?
        /// The stage that the function is in, either DEVELOPMENT or LIVE. When a function is in the DEVELOPMENT stage, you can test the function with TestFunction, and update it with UpdateFunction. When a function is in the LIVE stage, you can attach the function to a distribution's cache behavior, using the function's ARN.
        public var stage: CloudFrontClientTypes.FunctionStage?

        public init(
            createdTime: ClientRuntime.Date? = nil,
            functionARN: Swift.String? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            stage: CloudFrontClientTypes.FunctionStage? = nil
        )
        {
            self.createdTime = createdTime
            self.functionARN = functionARN
            self.lastModifiedTime = lastModifiedTime
            self.stage = stage
        }
    }

}

extension CloudFrontClientTypes {
    public enum FunctionRuntime: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cloudfrontJs10
        case cloudfrontJs20
        case sdkUnknown(Swift.String)

        public static var allCases: [FunctionRuntime] {
            return [
                .cloudfrontJs10,
                .cloudfrontJs20,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cloudfrontJs10: return "cloudfront-js-1.0"
            case .cloudfrontJs20: return "cloudfront-js-2.0"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FunctionRuntime(rawValue: rawValue) ?? FunctionRuntime.sdkUnknown(rawValue)
        }
    }
}

extension FunctionSizeLimitExceeded {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> FunctionSizeLimitExceeded {
        var value = FunctionSizeLimitExceeded()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension FunctionSizeLimitExceeded {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The function is too large. For more information, see [Quotas](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html) (formerly known as limits) in the Amazon CloudFront Developer Guide.
public struct FunctionSizeLimitExceeded: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "FunctionSizeLimitExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFrontClientTypes {
    public enum FunctionStage: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case development
        case live
        case sdkUnknown(Swift.String)

        public static var allCases: [FunctionStage] {
            return [
                .development,
                .live,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .development: return "DEVELOPMENT"
            case .live: return "LIVE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FunctionStage(rawValue: rawValue) ?? FunctionStage.sdkUnknown(rawValue)
        }
    }
}

extension CloudFrontClientTypes.FunctionSummary {

    static func writingClosure(_ value: CloudFrontClientTypes.FunctionSummary?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["FunctionConfig"].write(value.functionConfig, writingClosure: CloudFrontClientTypes.FunctionConfig.writingClosure(_:to:))
        try writer["FunctionMetadata"].write(value.functionMetadata, writingClosure: CloudFrontClientTypes.FunctionMetadata.writingClosure(_:to:))
        try writer["Name"].write(value.name)
        try writer["Status"].write(value.status)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.FunctionSummary {
        var value = CloudFrontClientTypes.FunctionSummary()
        value.name = try reader["Name"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.functionConfig = try reader["FunctionConfig"].readIfPresent(readingClosure: CloudFrontClientTypes.FunctionConfig.readingClosure(from:))
        value.functionMetadata = try reader["FunctionMetadata"].readIfPresent(readingClosure: CloudFrontClientTypes.FunctionMetadata.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// Contains configuration information and metadata about a CloudFront function.
    public struct FunctionSummary: Swift.Equatable {
        /// Contains configuration information about a CloudFront function.
        /// This member is required.
        public var functionConfig: CloudFrontClientTypes.FunctionConfig?
        /// Contains metadata about a CloudFront function.
        /// This member is required.
        public var functionMetadata: CloudFrontClientTypes.FunctionMetadata?
        /// The name of the CloudFront function.
        /// This member is required.
        public var name: Swift.String?
        /// The status of the CloudFront function.
        public var status: Swift.String?

        public init(
            functionConfig: CloudFrontClientTypes.FunctionConfig? = nil,
            functionMetadata: CloudFrontClientTypes.FunctionMetadata? = nil,
            name: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.functionConfig = functionConfig
            self.functionMetadata = functionMetadata
            self.name = name
            self.status = status
        }
    }

}

extension CloudFrontClientTypes.GeoRestriction {

    static func writingClosure(_ value: CloudFrontClientTypes.GeoRestriction?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Items"].writeList(value.items, memberWritingClosure: Swift.String.writingClosure(_:to:), memberNodeInfo: "Location", isFlattened: false)
        try writer["Quantity"].write(value.quantity)
        try writer["RestrictionType"].write(value.restrictionType)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.GeoRestriction {
        var value = CloudFrontClientTypes.GeoRestriction()
        value.restrictionType = try reader["RestrictionType"].readIfPresent()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure(from:), memberNodeInfo: "Location", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// A complex type that controls the countries in which your content is distributed. CloudFront determines the location of your users using MaxMind GeoIP databases.
    public struct GeoRestriction: Swift.Equatable {
        /// A complex type that contains a Location element for each country in which you want CloudFront either to distribute your content (whitelist) or not distribute your content (blacklist). The Location element is a two-letter, uppercase country code for a country that you want to include in your blacklist or whitelist. Include one Location element for each country. CloudFront and MaxMind both use ISO 3166 country codes. For the current list of countries and the corresponding codes, see ISO 3166-1-alpha-2 code on the International Organization for Standardization website. You can also refer to the country list on the CloudFront console, which includes both country names and codes.
        public var items: [Swift.String]?
        /// When geo restriction is enabled, this is the number of countries in your whitelist or blacklist. Otherwise, when it is not enabled, Quantity is 0, and you can omit Items.
        /// This member is required.
        public var quantity: Swift.Int?
        /// The method that you want to use to restrict distribution of your content by country:
        ///
        /// * none: No geo restriction is enabled, meaning access to content is not restricted by client geo location.
        ///
        /// * blacklist: The Location elements specify the countries in which you don't want CloudFront to distribute your content.
        ///
        /// * whitelist: The Location elements specify the countries in which you want CloudFront to distribute your content.
        /// This member is required.
        public var restrictionType: CloudFrontClientTypes.GeoRestrictionType?

        public init(
            items: [Swift.String]? = nil,
            quantity: Swift.Int? = nil,
            restrictionType: CloudFrontClientTypes.GeoRestrictionType? = nil
        )
        {
            self.items = items
            self.quantity = quantity
            self.restrictionType = restrictionType
        }
    }

}

extension CloudFrontClientTypes {
    public enum GeoRestrictionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case blacklist
        case `none`
        case whitelist
        case sdkUnknown(Swift.String)

        public static var allCases: [GeoRestrictionType] {
            return [
                .blacklist,
                .none,
                .whitelist,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .blacklist: return "blacklist"
            case .none: return "none"
            case .whitelist: return "whitelist"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = GeoRestrictionType(rawValue: rawValue) ?? GeoRestrictionType.sdkUnknown(rawValue)
        }
    }
}

extension GetCachePolicyConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/cache-policy/\(id.urlPercentEncoding())/config"
    }
}

public struct GetCachePolicyConfigInput: Swift.Equatable {
    /// The unique identifier for the cache policy. If the cache policy is attached to a distribution's cache behavior, you can get the policy's identifier using ListDistributions or GetDistribution. If the cache policy is not attached to a cache behavior, you can get the identifier using ListCachePolicies.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

extension GetCachePolicyConfigOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> GetCachePolicyConfigOutput {
        let reader = responseReader
        var value = GetCachePolicyConfigOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        value.cachePolicyConfig = try reader.read(readingClosure: CloudFrontClientTypes.CachePolicyConfig.readingClosure(from:))
        return value
    }
}

public struct GetCachePolicyConfigOutput: Swift.Equatable {
    /// The cache policy configuration.
    public var cachePolicyConfig: CloudFrontClientTypes.CachePolicyConfig?
    /// The current version of the cache policy.
    public var eTag: Swift.String?

    public init(
        cachePolicyConfig: CloudFrontClientTypes.CachePolicyConfig? = nil,
        eTag: Swift.String? = nil
    )
    {
        self.cachePolicyConfig = cachePolicyConfig
        self.eTag = eTag
    }
}

enum GetCachePolicyConfigOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension GetCachePolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/cache-policy/\(id.urlPercentEncoding())"
    }
}

public struct GetCachePolicyInput: Swift.Equatable {
    /// The unique identifier for the cache policy. If the cache policy is attached to a distribution's cache behavior, you can get the policy's identifier using ListDistributions or GetDistribution. If the cache policy is not attached to a cache behavior, you can get the identifier using ListCachePolicies.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

extension GetCachePolicyOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> GetCachePolicyOutput {
        let reader = responseReader
        var value = GetCachePolicyOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        value.cachePolicy = try reader.read(readingClosure: CloudFrontClientTypes.CachePolicy.readingClosure(from:))
        return value
    }
}

public struct GetCachePolicyOutput: Swift.Equatable {
    /// The cache policy.
    public var cachePolicy: CloudFrontClientTypes.CachePolicy?
    /// The current version of the cache policy.
    public var eTag: Swift.String?

    public init(
        cachePolicy: CloudFrontClientTypes.CachePolicy? = nil,
        eTag: Swift.String? = nil
    )
    {
        self.cachePolicy = cachePolicy
        self.eTag = eTag
    }
}

enum GetCachePolicyOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension GetCloudFrontOriginAccessIdentityConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/origin-access-identity/cloudfront/\(id.urlPercentEncoding())/config"
    }
}

/// The origin access identity's configuration information. For more information, see [CloudFrontOriginAccessIdentityConfig](https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_CloudFrontOriginAccessIdentityConfig.html).
public struct GetCloudFrontOriginAccessIdentityConfigInput: Swift.Equatable {
    /// The identity's ID.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

extension GetCloudFrontOriginAccessIdentityConfigOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> GetCloudFrontOriginAccessIdentityConfigOutput {
        let reader = responseReader
        var value = GetCloudFrontOriginAccessIdentityConfigOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        value.cloudFrontOriginAccessIdentityConfig = try reader.read(readingClosure: CloudFrontClientTypes.CloudFrontOriginAccessIdentityConfig.readingClosure(from:))
        return value
    }
}

/// The returned result of the corresponding request.
public struct GetCloudFrontOriginAccessIdentityConfigOutput: Swift.Equatable {
    /// The origin access identity's configuration information.
    public var cloudFrontOriginAccessIdentityConfig: CloudFrontClientTypes.CloudFrontOriginAccessIdentityConfig?
    /// The current version of the configuration. For example: E2QWRUHAPOMQZL.
    public var eTag: Swift.String?

    public init(
        cloudFrontOriginAccessIdentityConfig: CloudFrontClientTypes.CloudFrontOriginAccessIdentityConfig? = nil,
        eTag: Swift.String? = nil
    )
    {
        self.cloudFrontOriginAccessIdentityConfig = cloudFrontOriginAccessIdentityConfig
        self.eTag = eTag
    }
}

enum GetCloudFrontOriginAccessIdentityConfigOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension GetCloudFrontOriginAccessIdentityInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/origin-access-identity/cloudfront/\(id.urlPercentEncoding())"
    }
}

/// The request to get an origin access identity's information.
public struct GetCloudFrontOriginAccessIdentityInput: Swift.Equatable {
    /// The identity's ID.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

extension GetCloudFrontOriginAccessIdentityOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> GetCloudFrontOriginAccessIdentityOutput {
        let reader = responseReader
        var value = GetCloudFrontOriginAccessIdentityOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        value.cloudFrontOriginAccessIdentity = try reader.read(readingClosure: CloudFrontClientTypes.CloudFrontOriginAccessIdentity.readingClosure(from:))
        return value
    }
}

/// The returned result of the corresponding request.
public struct GetCloudFrontOriginAccessIdentityOutput: Swift.Equatable {
    /// The origin access identity's information.
    public var cloudFrontOriginAccessIdentity: CloudFrontClientTypes.CloudFrontOriginAccessIdentity?
    /// The current version of the origin access identity's information. For example: E2QWRUHAPOMQZL.
    public var eTag: Swift.String?

    public init(
        cloudFrontOriginAccessIdentity: CloudFrontClientTypes.CloudFrontOriginAccessIdentity? = nil,
        eTag: Swift.String? = nil
    )
    {
        self.cloudFrontOriginAccessIdentity = cloudFrontOriginAccessIdentity
        self.eTag = eTag
    }
}

enum GetCloudFrontOriginAccessIdentityOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension GetContinuousDeploymentPolicyConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/continuous-deployment-policy/\(id.urlPercentEncoding())/config"
    }
}

public struct GetContinuousDeploymentPolicyConfigInput: Swift.Equatable {
    /// The identifier of the continuous deployment policy whose configuration you are getting.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

extension GetContinuousDeploymentPolicyConfigOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> GetContinuousDeploymentPolicyConfigOutput {
        let reader = responseReader
        var value = GetContinuousDeploymentPolicyConfigOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        value.continuousDeploymentPolicyConfig = try reader.read(readingClosure: CloudFrontClientTypes.ContinuousDeploymentPolicyConfig.readingClosure(from:))
        return value
    }
}

public struct GetContinuousDeploymentPolicyConfigOutput: Swift.Equatable {
    /// Contains the configuration for a continuous deployment policy.
    public var continuousDeploymentPolicyConfig: CloudFrontClientTypes.ContinuousDeploymentPolicyConfig?
    /// The version identifier for the current version of the continuous deployment policy.
    public var eTag: Swift.String?

    public init(
        continuousDeploymentPolicyConfig: CloudFrontClientTypes.ContinuousDeploymentPolicyConfig? = nil,
        eTag: Swift.String? = nil
    )
    {
        self.continuousDeploymentPolicyConfig = continuousDeploymentPolicyConfig
        self.eTag = eTag
    }
}

enum GetContinuousDeploymentPolicyConfigOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension GetContinuousDeploymentPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/continuous-deployment-policy/\(id.urlPercentEncoding())"
    }
}

public struct GetContinuousDeploymentPolicyInput: Swift.Equatable {
    /// The identifier of the continuous deployment policy that you are getting.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

extension GetContinuousDeploymentPolicyOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> GetContinuousDeploymentPolicyOutput {
        let reader = responseReader
        var value = GetContinuousDeploymentPolicyOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        value.continuousDeploymentPolicy = try reader.read(readingClosure: CloudFrontClientTypes.ContinuousDeploymentPolicy.readingClosure(from:))
        return value
    }
}

public struct GetContinuousDeploymentPolicyOutput: Swift.Equatable {
    /// A continuous deployment policy.
    public var continuousDeploymentPolicy: CloudFrontClientTypes.ContinuousDeploymentPolicy?
    /// The version identifier for the current version of the continuous deployment policy.
    public var eTag: Swift.String?

    public init(
        continuousDeploymentPolicy: CloudFrontClientTypes.ContinuousDeploymentPolicy? = nil,
        eTag: Swift.String? = nil
    )
    {
        self.continuousDeploymentPolicy = continuousDeploymentPolicy
        self.eTag = eTag
    }
}

enum GetContinuousDeploymentPolicyOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension GetDistributionConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/distribution/\(id.urlPercentEncoding())/config"
    }
}

/// The request to get a distribution configuration.
public struct GetDistributionConfigInput: Swift.Equatable {
    /// The distribution's ID. If the ID is empty, an empty distribution configuration is returned.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

extension GetDistributionConfigOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> GetDistributionConfigOutput {
        let reader = responseReader
        var value = GetDistributionConfigOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        value.distributionConfig = try reader.read(readingClosure: CloudFrontClientTypes.DistributionConfig.readingClosure(from:))
        return value
    }
}

/// The returned result of the corresponding request.
public struct GetDistributionConfigOutput: Swift.Equatable {
    /// The distribution's configuration information.
    public var distributionConfig: CloudFrontClientTypes.DistributionConfig?
    /// The current version of the configuration. For example: E2QWRUHAPOMQZL.
    public var eTag: Swift.String?

    public init(
        distributionConfig: CloudFrontClientTypes.DistributionConfig? = nil,
        eTag: Swift.String? = nil
    )
    {
        self.distributionConfig = distributionConfig
        self.eTag = eTag
    }
}

enum GetDistributionConfigOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension GetDistributionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/distribution/\(id.urlPercentEncoding())"
    }
}

/// The request to get a distribution's information.
public struct GetDistributionInput: Swift.Equatable {
    /// The distribution's ID. If the ID is empty, an empty distribution configuration is returned.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

extension GetDistributionOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> GetDistributionOutput {
        let reader = responseReader
        var value = GetDistributionOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        value.distribution = try reader.read(readingClosure: CloudFrontClientTypes.Distribution.readingClosure(from:))
        return value
    }
}

/// The returned result of the corresponding request.
public struct GetDistributionOutput: Swift.Equatable {
    /// The distribution's information.
    public var distribution: CloudFrontClientTypes.Distribution?
    /// The current version of the distribution's information. For example: E2QWRUHAPOMQZL.
    public var eTag: Swift.String?

    public init(
        distribution: CloudFrontClientTypes.Distribution? = nil,
        eTag: Swift.String? = nil
    )
    {
        self.distribution = distribution
        self.eTag = eTag
    }
}

enum GetDistributionOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension GetFieldLevelEncryptionConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/field-level-encryption/\(id.urlPercentEncoding())/config"
    }
}

public struct GetFieldLevelEncryptionConfigInput: Swift.Equatable {
    /// Request the ID for the field-level encryption configuration information.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

extension GetFieldLevelEncryptionConfigOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> GetFieldLevelEncryptionConfigOutput {
        let reader = responseReader
        var value = GetFieldLevelEncryptionConfigOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        value.fieldLevelEncryptionConfig = try reader.read(readingClosure: CloudFrontClientTypes.FieldLevelEncryptionConfig.readingClosure(from:))
        return value
    }
}

public struct GetFieldLevelEncryptionConfigOutput: Swift.Equatable {
    /// The current version of the field level encryption configuration. For example: E2QWRUHAPOMQZL.
    public var eTag: Swift.String?
    /// Return the field-level encryption configuration information.
    public var fieldLevelEncryptionConfig: CloudFrontClientTypes.FieldLevelEncryptionConfig?

    public init(
        eTag: Swift.String? = nil,
        fieldLevelEncryptionConfig: CloudFrontClientTypes.FieldLevelEncryptionConfig? = nil
    )
    {
        self.eTag = eTag
        self.fieldLevelEncryptionConfig = fieldLevelEncryptionConfig
    }
}

enum GetFieldLevelEncryptionConfigOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension GetFieldLevelEncryptionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/field-level-encryption/\(id.urlPercentEncoding())"
    }
}

public struct GetFieldLevelEncryptionInput: Swift.Equatable {
    /// Request the ID for the field-level encryption configuration information.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

extension GetFieldLevelEncryptionOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> GetFieldLevelEncryptionOutput {
        let reader = responseReader
        var value = GetFieldLevelEncryptionOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        value.fieldLevelEncryption = try reader.read(readingClosure: CloudFrontClientTypes.FieldLevelEncryption.readingClosure(from:))
        return value
    }
}

public struct GetFieldLevelEncryptionOutput: Swift.Equatable {
    /// The current version of the field level encryption configuration. For example: E2QWRUHAPOMQZL.
    public var eTag: Swift.String?
    /// Return the field-level encryption configuration information.
    public var fieldLevelEncryption: CloudFrontClientTypes.FieldLevelEncryption?

    public init(
        eTag: Swift.String? = nil,
        fieldLevelEncryption: CloudFrontClientTypes.FieldLevelEncryption? = nil
    )
    {
        self.eTag = eTag
        self.fieldLevelEncryption = fieldLevelEncryption
    }
}

enum GetFieldLevelEncryptionOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension GetFieldLevelEncryptionProfileConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/field-level-encryption-profile/\(id.urlPercentEncoding())/config"
    }
}

public struct GetFieldLevelEncryptionProfileConfigInput: Swift.Equatable {
    /// Get the ID for the field-level encryption profile configuration information.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

extension GetFieldLevelEncryptionProfileConfigOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> GetFieldLevelEncryptionProfileConfigOutput {
        let reader = responseReader
        var value = GetFieldLevelEncryptionProfileConfigOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        value.fieldLevelEncryptionProfileConfig = try reader.read(readingClosure: CloudFrontClientTypes.FieldLevelEncryptionProfileConfig.readingClosure(from:))
        return value
    }
}

public struct GetFieldLevelEncryptionProfileConfigOutput: Swift.Equatable {
    /// The current version of the field-level encryption profile configuration result. For example: E2QWRUHAPOMQZL.
    public var eTag: Swift.String?
    /// Return the field-level encryption profile configuration information.
    public var fieldLevelEncryptionProfileConfig: CloudFrontClientTypes.FieldLevelEncryptionProfileConfig?

    public init(
        eTag: Swift.String? = nil,
        fieldLevelEncryptionProfileConfig: CloudFrontClientTypes.FieldLevelEncryptionProfileConfig? = nil
    )
    {
        self.eTag = eTag
        self.fieldLevelEncryptionProfileConfig = fieldLevelEncryptionProfileConfig
    }
}

enum GetFieldLevelEncryptionProfileConfigOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension GetFieldLevelEncryptionProfileInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/field-level-encryption-profile/\(id.urlPercentEncoding())"
    }
}

public struct GetFieldLevelEncryptionProfileInput: Swift.Equatable {
    /// Get the ID for the field-level encryption profile information.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

extension GetFieldLevelEncryptionProfileOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> GetFieldLevelEncryptionProfileOutput {
        let reader = responseReader
        var value = GetFieldLevelEncryptionProfileOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        value.fieldLevelEncryptionProfile = try reader.read(readingClosure: CloudFrontClientTypes.FieldLevelEncryptionProfile.readingClosure(from:))
        return value
    }
}

public struct GetFieldLevelEncryptionProfileOutput: Swift.Equatable {
    /// The current version of the field level encryption profile. For example: E2QWRUHAPOMQZL.
    public var eTag: Swift.String?
    /// Return the field-level encryption profile information.
    public var fieldLevelEncryptionProfile: CloudFrontClientTypes.FieldLevelEncryptionProfile?

    public init(
        eTag: Swift.String? = nil,
        fieldLevelEncryptionProfile: CloudFrontClientTypes.FieldLevelEncryptionProfile? = nil
    )
    {
        self.eTag = eTag
        self.fieldLevelEncryptionProfile = fieldLevelEncryptionProfile
    }
}

enum GetFieldLevelEncryptionProfileOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension GetFunctionInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let stage = stage {
                let stageQueryItem = ClientRuntime.URLQueryItem(name: "Stage".urlPercentEncoding(), value: Swift.String(stage.rawValue).urlPercentEncoding())
                items.append(stageQueryItem)
            }
            return items
        }
    }
}

extension GetFunctionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let name = name else {
            return nil
        }
        return "/2020-05-31/function/\(name.urlPercentEncoding())"
    }
}

public struct GetFunctionInput: Swift.Equatable {
    /// The name of the function whose code you are getting.
    /// This member is required.
    public var name: Swift.String?
    /// The function's stage, either DEVELOPMENT or LIVE.
    public var stage: CloudFrontClientTypes.FunctionStage?

    public init(
        name: Swift.String? = nil,
        stage: CloudFrontClientTypes.FunctionStage? = nil
    )
    {
        self.name = name
        self.stage = stage
    }
}

extension GetFunctionOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetFunctionOutput(contentType: \(Swift.String(describing: contentType)), eTag: \(Swift.String(describing: eTag)), functionCode: \"CONTENT_REDACTED\")"}
}

extension GetFunctionOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> GetFunctionOutput {
        let reader = responseReader
        var value = GetFunctionOutput()
        if let contentTypeHeaderValue = httpResponse.headers.value(for: "Content-Type") {
            value.contentType = contentTypeHeaderValue
        } else {
            value.contentType = nil
        }
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        switch httpResponse.body {
        case .data(let data):
            value.functionCode = data
        case .stream(let stream):
            value.functionCode = try stream.readToEnd()
        case .noStream:
            value.functionCode = nil
        }
        return value
    }
}

public struct GetFunctionOutput: Swift.Equatable {
    /// The content type (media type) of the response.
    public var contentType: Swift.String?
    /// The version identifier for the current version of the CloudFront function.
    public var eTag: Swift.String?
    /// The function code of a CloudFront function.
    public var functionCode: ClientRuntime.Data?

    public init(
        contentType: Swift.String? = nil,
        eTag: Swift.String? = nil,
        functionCode: ClientRuntime.Data? = nil
    )
    {
        self.contentType = contentType
        self.eTag = eTag
        self.functionCode = functionCode
    }
}

enum GetFunctionOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension GetInvalidationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let distributionId = distributionId else {
            return nil
        }
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/distribution/\(distributionId.urlPercentEncoding())/invalidation/\(id.urlPercentEncoding())"
    }
}

/// The request to get an invalidation's information.
public struct GetInvalidationInput: Swift.Equatable {
    /// The distribution's ID.
    /// This member is required.
    public var distributionId: Swift.String?
    /// The identifier for the invalidation request, for example, IDFDVBD632BHDS5.
    /// This member is required.
    public var id: Swift.String?

    public init(
        distributionId: Swift.String? = nil,
        id: Swift.String? = nil
    )
    {
        self.distributionId = distributionId
        self.id = id
    }
}

extension GetInvalidationOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> GetInvalidationOutput {
        let reader = responseReader
        var value = GetInvalidationOutput()
        value.invalidation = try reader.read(readingClosure: CloudFrontClientTypes.Invalidation.readingClosure(from:))
        return value
    }
}

/// The returned result of the corresponding request.
public struct GetInvalidationOutput: Swift.Equatable {
    /// The invalidation's information. For more information, see [Invalidation Complex Type](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/InvalidationDatatype.html).
    public var invalidation: CloudFrontClientTypes.Invalidation?

    public init(
        invalidation: CloudFrontClientTypes.Invalidation? = nil
    )
    {
        self.invalidation = invalidation
    }
}

enum GetInvalidationOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension GetKeyGroupConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/key-group/\(id.urlPercentEncoding())/config"
    }
}

public struct GetKeyGroupConfigInput: Swift.Equatable {
    /// The identifier of the key group whose configuration you are getting. To get the identifier, use ListKeyGroups.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

extension GetKeyGroupConfigOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> GetKeyGroupConfigOutput {
        let reader = responseReader
        var value = GetKeyGroupConfigOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        value.keyGroupConfig = try reader.read(readingClosure: CloudFrontClientTypes.KeyGroupConfig.readingClosure(from:))
        return value
    }
}

public struct GetKeyGroupConfigOutput: Swift.Equatable {
    /// The identifier for this version of the key group.
    public var eTag: Swift.String?
    /// The key group configuration.
    public var keyGroupConfig: CloudFrontClientTypes.KeyGroupConfig?

    public init(
        eTag: Swift.String? = nil,
        keyGroupConfig: CloudFrontClientTypes.KeyGroupConfig? = nil
    )
    {
        self.eTag = eTag
        self.keyGroupConfig = keyGroupConfig
    }
}

enum GetKeyGroupConfigOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension GetKeyGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/key-group/\(id.urlPercentEncoding())"
    }
}

public struct GetKeyGroupInput: Swift.Equatable {
    /// The identifier of the key group that you are getting. To get the identifier, use ListKeyGroups.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

extension GetKeyGroupOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> GetKeyGroupOutput {
        let reader = responseReader
        var value = GetKeyGroupOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        value.keyGroup = try reader.read(readingClosure: CloudFrontClientTypes.KeyGroup.readingClosure(from:))
        return value
    }
}

public struct GetKeyGroupOutput: Swift.Equatable {
    /// The identifier for this version of the key group.
    public var eTag: Swift.String?
    /// The key group.
    public var keyGroup: CloudFrontClientTypes.KeyGroup?

    public init(
        eTag: Swift.String? = nil,
        keyGroup: CloudFrontClientTypes.KeyGroup? = nil
    )
    {
        self.eTag = eTag
        self.keyGroup = keyGroup
    }
}

enum GetKeyGroupOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension GetMonitoringSubscriptionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let distributionId = distributionId else {
            return nil
        }
        return "/2020-05-31/distributions/\(distributionId.urlPercentEncoding())/monitoring-subscription"
    }
}

public struct GetMonitoringSubscriptionInput: Swift.Equatable {
    /// The ID of the distribution that you are getting metrics information for.
    /// This member is required.
    public var distributionId: Swift.String?

    public init(
        distributionId: Swift.String? = nil
    )
    {
        self.distributionId = distributionId
    }
}

extension GetMonitoringSubscriptionOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> GetMonitoringSubscriptionOutput {
        let reader = responseReader
        var value = GetMonitoringSubscriptionOutput()
        value.monitoringSubscription = try reader.read(readingClosure: CloudFrontClientTypes.MonitoringSubscription.readingClosure(from:))
        return value
    }
}

public struct GetMonitoringSubscriptionOutput: Swift.Equatable {
    /// A monitoring subscription. This structure contains information about whether additional CloudWatch metrics are enabled for a given CloudFront distribution.
    public var monitoringSubscription: CloudFrontClientTypes.MonitoringSubscription?

    public init(
        monitoringSubscription: CloudFrontClientTypes.MonitoringSubscription? = nil
    )
    {
        self.monitoringSubscription = monitoringSubscription
    }
}

enum GetMonitoringSubscriptionOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension GetOriginAccessControlConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/origin-access-control/\(id.urlPercentEncoding())/config"
    }
}

public struct GetOriginAccessControlConfigInput: Swift.Equatable {
    /// The unique identifier of the origin access control.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

extension GetOriginAccessControlConfigOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> GetOriginAccessControlConfigOutput {
        let reader = responseReader
        var value = GetOriginAccessControlConfigOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        value.originAccessControlConfig = try reader.read(readingClosure: CloudFrontClientTypes.OriginAccessControlConfig.readingClosure(from:))
        return value
    }
}

public struct GetOriginAccessControlConfigOutput: Swift.Equatable {
    /// The version identifier for the current version of the origin access control.
    public var eTag: Swift.String?
    /// Contains an origin access control configuration.
    public var originAccessControlConfig: CloudFrontClientTypes.OriginAccessControlConfig?

    public init(
        eTag: Swift.String? = nil,
        originAccessControlConfig: CloudFrontClientTypes.OriginAccessControlConfig? = nil
    )
    {
        self.eTag = eTag
        self.originAccessControlConfig = originAccessControlConfig
    }
}

enum GetOriginAccessControlConfigOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension GetOriginAccessControlInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/origin-access-control/\(id.urlPercentEncoding())"
    }
}

public struct GetOriginAccessControlInput: Swift.Equatable {
    /// The unique identifier of the origin access control.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

extension GetOriginAccessControlOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> GetOriginAccessControlOutput {
        let reader = responseReader
        var value = GetOriginAccessControlOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        value.originAccessControl = try reader.read(readingClosure: CloudFrontClientTypes.OriginAccessControl.readingClosure(from:))
        return value
    }
}

public struct GetOriginAccessControlOutput: Swift.Equatable {
    /// The version identifier for the current version of the origin access control.
    public var eTag: Swift.String?
    /// Contains an origin access control, including its unique identifier.
    public var originAccessControl: CloudFrontClientTypes.OriginAccessControl?

    public init(
        eTag: Swift.String? = nil,
        originAccessControl: CloudFrontClientTypes.OriginAccessControl? = nil
    )
    {
        self.eTag = eTag
        self.originAccessControl = originAccessControl
    }
}

enum GetOriginAccessControlOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension GetOriginRequestPolicyConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/origin-request-policy/\(id.urlPercentEncoding())/config"
    }
}

public struct GetOriginRequestPolicyConfigInput: Swift.Equatable {
    /// The unique identifier for the origin request policy. If the origin request policy is attached to a distribution's cache behavior, you can get the policy's identifier using ListDistributions or GetDistribution. If the origin request policy is not attached to a cache behavior, you can get the identifier using ListOriginRequestPolicies.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

extension GetOriginRequestPolicyConfigOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> GetOriginRequestPolicyConfigOutput {
        let reader = responseReader
        var value = GetOriginRequestPolicyConfigOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        value.originRequestPolicyConfig = try reader.read(readingClosure: CloudFrontClientTypes.OriginRequestPolicyConfig.readingClosure(from:))
        return value
    }
}

public struct GetOriginRequestPolicyConfigOutput: Swift.Equatable {
    /// The current version of the origin request policy.
    public var eTag: Swift.String?
    /// The origin request policy configuration.
    public var originRequestPolicyConfig: CloudFrontClientTypes.OriginRequestPolicyConfig?

    public init(
        eTag: Swift.String? = nil,
        originRequestPolicyConfig: CloudFrontClientTypes.OriginRequestPolicyConfig? = nil
    )
    {
        self.eTag = eTag
        self.originRequestPolicyConfig = originRequestPolicyConfig
    }
}

enum GetOriginRequestPolicyConfigOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension GetOriginRequestPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/origin-request-policy/\(id.urlPercentEncoding())"
    }
}

public struct GetOriginRequestPolicyInput: Swift.Equatable {
    /// The unique identifier for the origin request policy. If the origin request policy is attached to a distribution's cache behavior, you can get the policy's identifier using ListDistributions or GetDistribution. If the origin request policy is not attached to a cache behavior, you can get the identifier using ListOriginRequestPolicies.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

extension GetOriginRequestPolicyOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> GetOriginRequestPolicyOutput {
        let reader = responseReader
        var value = GetOriginRequestPolicyOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        value.originRequestPolicy = try reader.read(readingClosure: CloudFrontClientTypes.OriginRequestPolicy.readingClosure(from:))
        return value
    }
}

public struct GetOriginRequestPolicyOutput: Swift.Equatable {
    /// The current version of the origin request policy.
    public var eTag: Swift.String?
    /// The origin request policy.
    public var originRequestPolicy: CloudFrontClientTypes.OriginRequestPolicy?

    public init(
        eTag: Swift.String? = nil,
        originRequestPolicy: CloudFrontClientTypes.OriginRequestPolicy? = nil
    )
    {
        self.eTag = eTag
        self.originRequestPolicy = originRequestPolicy
    }
}

enum GetOriginRequestPolicyOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension GetPublicKeyConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/public-key/\(id.urlPercentEncoding())/config"
    }
}

public struct GetPublicKeyConfigInput: Swift.Equatable {
    /// The identifier of the public key whose configuration you are getting.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

extension GetPublicKeyConfigOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> GetPublicKeyConfigOutput {
        let reader = responseReader
        var value = GetPublicKeyConfigOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        value.publicKeyConfig = try reader.read(readingClosure: CloudFrontClientTypes.PublicKeyConfig.readingClosure(from:))
        return value
    }
}

public struct GetPublicKeyConfigOutput: Swift.Equatable {
    /// The identifier for this version of the public key configuration.
    public var eTag: Swift.String?
    /// A public key configuration.
    public var publicKeyConfig: CloudFrontClientTypes.PublicKeyConfig?

    public init(
        eTag: Swift.String? = nil,
        publicKeyConfig: CloudFrontClientTypes.PublicKeyConfig? = nil
    )
    {
        self.eTag = eTag
        self.publicKeyConfig = publicKeyConfig
    }
}

enum GetPublicKeyConfigOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension GetPublicKeyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/public-key/\(id.urlPercentEncoding())"
    }
}

public struct GetPublicKeyInput: Swift.Equatable {
    /// The identifier of the public key you are getting.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

extension GetPublicKeyOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> GetPublicKeyOutput {
        let reader = responseReader
        var value = GetPublicKeyOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        value.publicKey = try reader.read(readingClosure: CloudFrontClientTypes.PublicKey.readingClosure(from:))
        return value
    }
}

public struct GetPublicKeyOutput: Swift.Equatable {
    /// The identifier for this version of the public key.
    public var eTag: Swift.String?
    /// The public key.
    public var publicKey: CloudFrontClientTypes.PublicKey?

    public init(
        eTag: Swift.String? = nil,
        publicKey: CloudFrontClientTypes.PublicKey? = nil
    )
    {
        self.eTag = eTag
        self.publicKey = publicKey
    }
}

enum GetPublicKeyOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension GetRealtimeLogConfigInput {
    static func writingClosure(_ value: GetRealtimeLogConfigInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["ARN"].write(value.arn)
        try writer["Name"].write(value.name)
    }
}

extension GetRealtimeLogConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2020-05-31/get-realtime-log-config"
    }
}

public struct GetRealtimeLogConfigInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the real-time log configuration to get.
    public var arn: Swift.String?
    /// The name of the real-time log configuration to get.
    public var name: Swift.String?

    public init(
        arn: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.arn = arn
        self.name = name
    }
}

extension GetRealtimeLogConfigOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> GetRealtimeLogConfigOutput {
        let reader = responseReader
        var value = GetRealtimeLogConfigOutput()
        value.realtimeLogConfig = try reader["RealtimeLogConfig"].readIfPresent(readingClosure: CloudFrontClientTypes.RealtimeLogConfig.readingClosure(from:))
        return value
    }
}

public struct GetRealtimeLogConfigOutput: Swift.Equatable {
    /// A real-time log configuration.
    public var realtimeLogConfig: CloudFrontClientTypes.RealtimeLogConfig?

    public init(
        realtimeLogConfig: CloudFrontClientTypes.RealtimeLogConfig? = nil
    )
    {
        self.realtimeLogConfig = realtimeLogConfig
    }
}

enum GetRealtimeLogConfigOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension GetResponseHeadersPolicyConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/response-headers-policy/\(id.urlPercentEncoding())/config"
    }
}

public struct GetResponseHeadersPolicyConfigInput: Swift.Equatable {
    /// The identifier for the response headers policy. If the response headers policy is attached to a distribution's cache behavior, you can get the policy's identifier using ListDistributions or GetDistribution. If the response headers policy is not attached to a cache behavior, you can get the identifier using ListResponseHeadersPolicies.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

extension GetResponseHeadersPolicyConfigOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> GetResponseHeadersPolicyConfigOutput {
        let reader = responseReader
        var value = GetResponseHeadersPolicyConfigOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        value.responseHeadersPolicyConfig = try reader.read(readingClosure: CloudFrontClientTypes.ResponseHeadersPolicyConfig.readingClosure(from:))
        return value
    }
}

public struct GetResponseHeadersPolicyConfigOutput: Swift.Equatable {
    /// The version identifier for the current version of the response headers policy.
    public var eTag: Swift.String?
    /// Contains a response headers policy.
    public var responseHeadersPolicyConfig: CloudFrontClientTypes.ResponseHeadersPolicyConfig?

    public init(
        eTag: Swift.String? = nil,
        responseHeadersPolicyConfig: CloudFrontClientTypes.ResponseHeadersPolicyConfig? = nil
    )
    {
        self.eTag = eTag
        self.responseHeadersPolicyConfig = responseHeadersPolicyConfig
    }
}

enum GetResponseHeadersPolicyConfigOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension GetResponseHeadersPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/response-headers-policy/\(id.urlPercentEncoding())"
    }
}

public struct GetResponseHeadersPolicyInput: Swift.Equatable {
    /// The identifier for the response headers policy. If the response headers policy is attached to a distribution's cache behavior, you can get the policy's identifier using ListDistributions or GetDistribution. If the response headers policy is not attached to a cache behavior, you can get the identifier using ListResponseHeadersPolicies.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

extension GetResponseHeadersPolicyOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> GetResponseHeadersPolicyOutput {
        let reader = responseReader
        var value = GetResponseHeadersPolicyOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        value.responseHeadersPolicy = try reader.read(readingClosure: CloudFrontClientTypes.ResponseHeadersPolicy.readingClosure(from:))
        return value
    }
}

public struct GetResponseHeadersPolicyOutput: Swift.Equatable {
    /// The version identifier for the current version of the response headers policy.
    public var eTag: Swift.String?
    /// Contains a response headers policy.
    public var responseHeadersPolicy: CloudFrontClientTypes.ResponseHeadersPolicy?

    public init(
        eTag: Swift.String? = nil,
        responseHeadersPolicy: CloudFrontClientTypes.ResponseHeadersPolicy? = nil
    )
    {
        self.eTag = eTag
        self.responseHeadersPolicy = responseHeadersPolicy
    }
}

enum GetResponseHeadersPolicyOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension GetStreamingDistributionConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/streaming-distribution/\(id.urlPercentEncoding())/config"
    }
}

/// To request to get a streaming distribution configuration.
public struct GetStreamingDistributionConfigInput: Swift.Equatable {
    /// The streaming distribution's ID.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

extension GetStreamingDistributionConfigOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> GetStreamingDistributionConfigOutput {
        let reader = responseReader
        var value = GetStreamingDistributionConfigOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        value.streamingDistributionConfig = try reader.read(readingClosure: CloudFrontClientTypes.StreamingDistributionConfig.readingClosure(from:))
        return value
    }
}

/// The returned result of the corresponding request.
public struct GetStreamingDistributionConfigOutput: Swift.Equatable {
    /// The current version of the configuration. For example: E2QWRUHAPOMQZL.
    public var eTag: Swift.String?
    /// The streaming distribution's configuration information.
    public var streamingDistributionConfig: CloudFrontClientTypes.StreamingDistributionConfig?

    public init(
        eTag: Swift.String? = nil,
        streamingDistributionConfig: CloudFrontClientTypes.StreamingDistributionConfig? = nil
    )
    {
        self.eTag = eTag
        self.streamingDistributionConfig = streamingDistributionConfig
    }
}

enum GetStreamingDistributionConfigOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension GetStreamingDistributionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/streaming-distribution/\(id.urlPercentEncoding())"
    }
}

/// The request to get a streaming distribution's information.
public struct GetStreamingDistributionInput: Swift.Equatable {
    /// The streaming distribution's ID.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

extension GetStreamingDistributionOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> GetStreamingDistributionOutput {
        let reader = responseReader
        var value = GetStreamingDistributionOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        value.streamingDistribution = try reader.read(readingClosure: CloudFrontClientTypes.StreamingDistribution.readingClosure(from:))
        return value
    }
}

/// The returned result of the corresponding request.
public struct GetStreamingDistributionOutput: Swift.Equatable {
    /// The current version of the streaming distribution's information. For example: E2QWRUHAPOMQZL.
    public var eTag: Swift.String?
    /// The streaming distribution's information.
    public var streamingDistribution: CloudFrontClientTypes.StreamingDistribution?

    public init(
        eTag: Swift.String? = nil,
        streamingDistribution: CloudFrontClientTypes.StreamingDistribution? = nil
    )
    {
        self.eTag = eTag
        self.streamingDistribution = streamingDistribution
    }
}

enum GetStreamingDistributionOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension CloudFrontClientTypes.Headers {

    static func writingClosure(_ value: CloudFrontClientTypes.Headers?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Items"].writeList(value.items, memberWritingClosure: Swift.String.writingClosure(_:to:), memberNodeInfo: "Name", isFlattened: false)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.Headers {
        var value = CloudFrontClientTypes.Headers()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure(from:), memberNodeInfo: "Name", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// Contains a list of HTTP header names.
    public struct Headers: Swift.Equatable {
        /// A list of HTTP header names.
        public var items: [Swift.String]?
        /// The number of header names in the Items list.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            items: [Swift.String]? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.items = items
            self.quantity = quantity
        }
    }

}

extension CloudFrontClientTypes {
    public enum HttpVersion: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case http11
        case http2
        case http2and3
        case http3
        case sdkUnknown(Swift.String)

        public static var allCases: [HttpVersion] {
            return [
                .http11,
                .http2,
                .http2and3,
                .http3,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .http11: return "http1.1"
            case .http2: return "http2"
            case .http2and3: return "http2and3"
            case .http3: return "http3"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HttpVersion(rawValue: rawValue) ?? HttpVersion.sdkUnknown(rawValue)
        }
    }
}

extension CloudFrontClientTypes {
    public enum ICPRecordalStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case approved
        case pending
        case suspended
        case sdkUnknown(Swift.String)

        public static var allCases: [ICPRecordalStatus] {
            return [
                .approved,
                .pending,
                .suspended,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .approved: return "APPROVED"
            case .pending: return "PENDING"
            case .suspended: return "SUSPENDED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ICPRecordalStatus(rawValue: rawValue) ?? ICPRecordalStatus.sdkUnknown(rawValue)
        }
    }
}

extension IllegalDelete {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> IllegalDelete {
        var value = IllegalDelete()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension IllegalDelete {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// You cannot delete a managed policy.
public struct IllegalDelete: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "IllegalDelete" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior {
        var value = IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The specified configuration for field-level encryption can't be associated with the specified cache behavior.
public struct IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension IllegalOriginAccessConfiguration {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> IllegalOriginAccessConfiguration {
        var value = IllegalOriginAccessConfiguration()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension IllegalOriginAccessConfiguration {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// An origin cannot contain both an origin access control (OAC) and an origin access identity (OAI).
public struct IllegalOriginAccessConfiguration: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "IllegalOriginAccessConfiguration" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension IllegalUpdate {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> IllegalUpdate {
        var value = IllegalUpdate()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension IllegalUpdate {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The update contains modifications that are not allowed.
public struct IllegalUpdate: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "IllegalUpdate" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFrontClientTypes.ImportSource {

    static func writingClosure(_ value: CloudFrontClientTypes.ImportSource?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["SourceARN"].write(value.sourceARN)
        try writer["SourceType"].write(value.sourceType)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.ImportSource {
        var value = CloudFrontClientTypes.ImportSource()
        value.sourceType = try reader["SourceType"].readIfPresent()
        value.sourceARN = try reader["SourceARN"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// The import source for the Key Value Store.
    public struct ImportSource: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the import source for the Key Value Store.
        /// This member is required.
        public var sourceARN: Swift.String?
        /// The source type of the import source for the Key Value Store.
        /// This member is required.
        public var sourceType: CloudFrontClientTypes.ImportSourceType?

        public init(
            sourceARN: Swift.String? = nil,
            sourceType: CloudFrontClientTypes.ImportSourceType? = nil
        )
        {
            self.sourceARN = sourceARN
            self.sourceType = sourceType
        }
    }

}

extension CloudFrontClientTypes {
    public enum ImportSourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case s3
        case sdkUnknown(Swift.String)

        public static var allCases: [ImportSourceType] {
            return [
                .s3,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .s3: return "S3"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ImportSourceType(rawValue: rawValue) ?? ImportSourceType.sdkUnknown(rawValue)
        }
    }
}

extension InconsistentQuantities {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> InconsistentQuantities {
        var value = InconsistentQuantities()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension InconsistentQuantities {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The value of Quantity and the size of Items don't match.
public struct InconsistentQuantities: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InconsistentQuantities" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidArgument {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> InvalidArgument {
        var value = InvalidArgument()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension InvalidArgument {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// An argument is invalid.
public struct InvalidArgument: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidArgument" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidDefaultRootObject {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> InvalidDefaultRootObject {
        var value = InvalidDefaultRootObject()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension InvalidDefaultRootObject {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The default root object file name is too big or contains an invalid character.
public struct InvalidDefaultRootObject: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidDefaultRootObject" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidDomainNameForOriginAccessControl {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> InvalidDomainNameForOriginAccessControl {
        var value = InvalidDomainNameForOriginAccessControl()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension InvalidDomainNameForOriginAccessControl {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// An origin access control is associated with an origin whose domain name is not supported.
public struct InvalidDomainNameForOriginAccessControl: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidDomainNameForOriginAccessControl" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidErrorCode {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> InvalidErrorCode {
        var value = InvalidErrorCode()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension InvalidErrorCode {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// An invalid error code was specified.
public struct InvalidErrorCode: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidErrorCode" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidForwardCookies {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> InvalidForwardCookies {
        var value = InvalidForwardCookies()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension InvalidForwardCookies {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// Your request contains forward cookies option which doesn't match with the expectation for the whitelisted list of cookie names. Either list of cookie names has been specified when not allowed or list of cookie names is missing when expected.
public struct InvalidForwardCookies: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidForwardCookies" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidFunctionAssociation {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> InvalidFunctionAssociation {
        var value = InvalidFunctionAssociation()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension InvalidFunctionAssociation {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// A CloudFront function association is invalid.
public struct InvalidFunctionAssociation: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidFunctionAssociation" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidGeoRestrictionParameter {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> InvalidGeoRestrictionParameter {
        var value = InvalidGeoRestrictionParameter()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension InvalidGeoRestrictionParameter {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The specified geo restriction parameter is not valid.
public struct InvalidGeoRestrictionParameter: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidGeoRestrictionParameter" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidHeadersForS3Origin {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> InvalidHeadersForS3Origin {
        var value = InvalidHeadersForS3Origin()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension InvalidHeadersForS3Origin {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The headers specified are not valid for an Amazon S3 origin.
public struct InvalidHeadersForS3Origin: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidHeadersForS3Origin" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidIfMatchVersion {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> InvalidIfMatchVersion {
        var value = InvalidIfMatchVersion()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension InvalidIfMatchVersion {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The If-Match version is missing or not valid.
public struct InvalidIfMatchVersion: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidIfMatchVersion" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidLambdaFunctionAssociation {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> InvalidLambdaFunctionAssociation {
        var value = InvalidLambdaFunctionAssociation()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension InvalidLambdaFunctionAssociation {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The specified Lambda@Edge function association is invalid.
public struct InvalidLambdaFunctionAssociation: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidLambdaFunctionAssociation" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidLocationCode {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> InvalidLocationCode {
        var value = InvalidLocationCode()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension InvalidLocationCode {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The location code specified is not valid.
public struct InvalidLocationCode: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidLocationCode" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidMinimumProtocolVersion {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> InvalidMinimumProtocolVersion {
        var value = InvalidMinimumProtocolVersion()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension InvalidMinimumProtocolVersion {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The minimum protocol version specified is not valid.
public struct InvalidMinimumProtocolVersion: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidMinimumProtocolVersion" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidOrigin {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> InvalidOrigin {
        var value = InvalidOrigin()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension InvalidOrigin {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The Amazon S3 origin server specified does not refer to a valid Amazon S3 bucket.
public struct InvalidOrigin: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidOrigin" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidOriginAccessControl {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> InvalidOriginAccessControl {
        var value = InvalidOriginAccessControl()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension InvalidOriginAccessControl {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The origin access control is not valid.
public struct InvalidOriginAccessControl: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidOriginAccessControl" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidOriginAccessIdentity {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> InvalidOriginAccessIdentity {
        var value = InvalidOriginAccessIdentity()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension InvalidOriginAccessIdentity {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The origin access identity is not valid or doesn't exist.
public struct InvalidOriginAccessIdentity: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidOriginAccessIdentity" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidOriginKeepaliveTimeout {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> InvalidOriginKeepaliveTimeout {
        var value = InvalidOriginKeepaliveTimeout()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension InvalidOriginKeepaliveTimeout {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The keep alive timeout specified for the origin is not valid.
public struct InvalidOriginKeepaliveTimeout: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidOriginKeepaliveTimeout" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidOriginReadTimeout {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> InvalidOriginReadTimeout {
        var value = InvalidOriginReadTimeout()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension InvalidOriginReadTimeout {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The read timeout specified for the origin is not valid.
public struct InvalidOriginReadTimeout: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidOriginReadTimeout" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidProtocolSettings {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> InvalidProtocolSettings {
        var value = InvalidProtocolSettings()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension InvalidProtocolSettings {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// You cannot specify SSLv3 as the minimum protocol version if you only want to support only clients that support Server Name Indication (SNI).
public struct InvalidProtocolSettings: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidProtocolSettings" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidQueryStringParameters {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> InvalidQueryStringParameters {
        var value = InvalidQueryStringParameters()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension InvalidQueryStringParameters {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The query string parameters specified are not valid.
public struct InvalidQueryStringParameters: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidQueryStringParameters" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidRelativePath {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> InvalidRelativePath {
        var value = InvalidRelativePath()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension InvalidRelativePath {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The relative path is too big, is not URL-encoded, or does not begin with a slash (/).
public struct InvalidRelativePath: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidRelativePath" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidRequiredProtocol {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> InvalidRequiredProtocol {
        var value = InvalidRequiredProtocol()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension InvalidRequiredProtocol {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// This operation requires the HTTPS protocol. Ensure that you specify the HTTPS protocol in your request, or omit the RequiredProtocols element from your distribution configuration.
public struct InvalidRequiredProtocol: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidRequiredProtocol" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidResponseCode {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> InvalidResponseCode {
        var value = InvalidResponseCode()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension InvalidResponseCode {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// A response code is not valid.
public struct InvalidResponseCode: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidResponseCode" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidTTLOrder {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> InvalidTTLOrder {
        var value = InvalidTTLOrder()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension InvalidTTLOrder {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The TTL order specified is not valid.
public struct InvalidTTLOrder: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidTTLOrder" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidTagging {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> InvalidTagging {
        var value = InvalidTagging()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension InvalidTagging {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The tagging specified is not valid.
public struct InvalidTagging: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidTagging" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidViewerCertificate {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> InvalidViewerCertificate {
        var value = InvalidViewerCertificate()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension InvalidViewerCertificate {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// A viewer certificate specified is not valid.
public struct InvalidViewerCertificate: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidViewerCertificate" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidWebACLId {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> InvalidWebACLId {
        var value = InvalidWebACLId()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension InvalidWebACLId {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// A web ACL ID specified is not valid. To specify a web ACL created using the latest version of WAF, use the ACL ARN, for example arn:aws:wafv2:us-east-1:123456789012:global/webacl/ExampleWebACL/473e64fd-f30b-4765-81a0-62ad96dd167a. To specify a web ACL created using WAF Classic, use the ACL ID, for example 473e64fd-f30b-4765-81a0-62ad96dd167a.
public struct InvalidWebACLId: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidWebACLId" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFrontClientTypes.Invalidation {

    static func writingClosure(_ value: CloudFrontClientTypes.Invalidation?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["CreateTime"].writeTimestamp(value.createTime, format: .dateTime)
        try writer["Id"].write(value.id)
        try writer["InvalidationBatch"].write(value.invalidationBatch, writingClosure: CloudFrontClientTypes.InvalidationBatch.writingClosure(_:to:))
        try writer["Status"].write(value.status)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.Invalidation {
        var value = CloudFrontClientTypes.Invalidation()
        value.id = try reader["Id"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.createTime = try reader["CreateTime"].readTimestampIfPresent(format: .dateTime)
        value.invalidationBatch = try reader["InvalidationBatch"].readIfPresent(readingClosure: CloudFrontClientTypes.InvalidationBatch.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// An invalidation.
    public struct Invalidation: Swift.Equatable {
        /// The date and time the invalidation request was first made.
        /// This member is required.
        public var createTime: ClientRuntime.Date?
        /// The identifier for the invalidation request. For example: IDFDVBD632BHDS5.
        /// This member is required.
        public var id: Swift.String?
        /// The current invalidation information for the batch request.
        /// This member is required.
        public var invalidationBatch: CloudFrontClientTypes.InvalidationBatch?
        /// The status of the invalidation request. When the invalidation batch is finished, the status is Completed.
        /// This member is required.
        public var status: Swift.String?

        public init(
            createTime: ClientRuntime.Date? = nil,
            id: Swift.String? = nil,
            invalidationBatch: CloudFrontClientTypes.InvalidationBatch? = nil,
            status: Swift.String? = nil
        )
        {
            self.createTime = createTime
            self.id = id
            self.invalidationBatch = invalidationBatch
            self.status = status
        }
    }

}

extension CloudFrontClientTypes.InvalidationBatch {

    static func writingClosure(_ value: CloudFrontClientTypes.InvalidationBatch?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["CallerReference"].write(value.callerReference)
        try writer["Paths"].write(value.paths, writingClosure: CloudFrontClientTypes.Paths.writingClosure(_:to:))
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.InvalidationBatch {
        var value = CloudFrontClientTypes.InvalidationBatch()
        value.paths = try reader["Paths"].readIfPresent(readingClosure: CloudFrontClientTypes.Paths.readingClosure(from:))
        value.callerReference = try reader["CallerReference"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// An invalidation batch.
    public struct InvalidationBatch: Swift.Equatable {
        /// A value that you specify to uniquely identify an invalidation request. CloudFront uses the value to prevent you from accidentally resubmitting an identical request. Whenever you create a new invalidation request, you must specify a new value for CallerReference and change other values in the request as applicable. One way to ensure that the value of CallerReference is unique is to use a timestamp, for example, 20120301090000. If you make a second invalidation request with the same value for CallerReference, and if the rest of the request is the same, CloudFront doesn't create a new invalidation request. Instead, CloudFront returns information about the invalidation request that you previously created with the same CallerReference. If CallerReference is a value you already sent in a previous invalidation batch request but the content of any Path is different from the original request, CloudFront returns an InvalidationBatchAlreadyExists error.
        /// This member is required.
        public var callerReference: Swift.String?
        /// A complex type that contains information about the objects that you want to invalidate. For more information, see [Specifying the Objects to Invalidate](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Invalidation.html#invalidation-specifying-objects) in the Amazon CloudFront Developer Guide.
        /// This member is required.
        public var paths: CloudFrontClientTypes.Paths?

        public init(
            callerReference: Swift.String? = nil,
            paths: CloudFrontClientTypes.Paths? = nil
        )
        {
            self.callerReference = callerReference
            self.paths = paths
        }
    }

}

extension CloudFrontClientTypes.InvalidationList {

    static func writingClosure(_ value: CloudFrontClientTypes.InvalidationList?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["IsTruncated"].write(value.isTruncated)
        try writer["Items"].writeList(value.items, memberWritingClosure: CloudFrontClientTypes.InvalidationSummary.writingClosure(_:to:), memberNodeInfo: "InvalidationSummary", isFlattened: false)
        try writer["Marker"].write(value.marker)
        try writer["MaxItems"].write(value.maxItems)
        try writer["NextMarker"].write(value.nextMarker)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.InvalidationList {
        var value = CloudFrontClientTypes.InvalidationList()
        value.marker = try reader["Marker"].readIfPresent()
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.maxItems = try reader["MaxItems"].readIfPresent()
        value.isTruncated = try reader["IsTruncated"].readIfPresent()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: CloudFrontClientTypes.InvalidationSummary.readingClosure(from:), memberNodeInfo: "InvalidationSummary", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// The InvalidationList complex type describes the list of invalidation objects. For more information about invalidation, see [Invalidating Objects (Web Distributions Only)](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Invalidation.html) in the Amazon CloudFront Developer Guide.
    public struct InvalidationList: Swift.Equatable {
        /// A flag that indicates whether more invalidation batch requests remain to be listed. If your results were truncated, you can make a follow-up pagination request using the Marker request parameter to retrieve more invalidation batches in the list.
        /// This member is required.
        public var isTruncated: Swift.Bool?
        /// A complex type that contains one InvalidationSummary element for each invalidation batch created by the current Amazon Web Services account.
        public var items: [CloudFrontClientTypes.InvalidationSummary]?
        /// The value that you provided for the Marker request parameter.
        /// This member is required.
        public var marker: Swift.String?
        /// The value that you provided for the MaxItems request parameter.
        /// This member is required.
        public var maxItems: Swift.Int?
        /// If IsTruncated is true, this element is present and contains the value that you can use for the Marker request parameter to continue listing your invalidation batches where they left off.
        public var nextMarker: Swift.String?
        /// The number of invalidation batches that were created by the current Amazon Web Services account.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            isTruncated: Swift.Bool? = nil,
            items: [CloudFrontClientTypes.InvalidationSummary]? = nil,
            marker: Swift.String? = nil,
            maxItems: Swift.Int? = nil,
            nextMarker: Swift.String? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.isTruncated = isTruncated
            self.items = items
            self.marker = marker
            self.maxItems = maxItems
            self.nextMarker = nextMarker
            self.quantity = quantity
        }
    }

}

extension CloudFrontClientTypes.InvalidationSummary {

    static func writingClosure(_ value: CloudFrontClientTypes.InvalidationSummary?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["CreateTime"].writeTimestamp(value.createTime, format: .dateTime)
        try writer["Id"].write(value.id)
        try writer["Status"].write(value.status)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.InvalidationSummary {
        var value = CloudFrontClientTypes.InvalidationSummary()
        value.id = try reader["Id"].readIfPresent()
        value.createTime = try reader["CreateTime"].readTimestampIfPresent(format: .dateTime)
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// A summary of an invalidation request.
    public struct InvalidationSummary: Swift.Equatable {
        /// The time that an invalidation request was created.
        /// This member is required.
        public var createTime: ClientRuntime.Date?
        /// The unique ID for an invalidation request.
        /// This member is required.
        public var id: Swift.String?
        /// The status of an invalidation request.
        /// This member is required.
        public var status: Swift.String?

        public init(
            createTime: ClientRuntime.Date? = nil,
            id: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.createTime = createTime
            self.id = id
            self.status = status
        }
    }

}

extension CloudFrontClientTypes {
    public enum ItemSelection: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case all
        case `none`
        case whitelist
        case sdkUnknown(Swift.String)

        public static var allCases: [ItemSelection] {
            return [
                .all,
                .none,
                .whitelist,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .all: return "all"
            case .none: return "none"
            case .whitelist: return "whitelist"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ItemSelection(rawValue: rawValue) ?? ItemSelection.sdkUnknown(rawValue)
        }
    }
}

extension CloudFrontClientTypes.KGKeyPairIds {

    static func writingClosure(_ value: CloudFrontClientTypes.KGKeyPairIds?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["KeyGroupId"].write(value.keyGroupId)
        try writer["KeyPairIds"].write(value.keyPairIds, writingClosure: CloudFrontClientTypes.KeyPairIds.writingClosure(_:to:))
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.KGKeyPairIds {
        var value = CloudFrontClientTypes.KGKeyPairIds()
        value.keyGroupId = try reader["KeyGroupId"].readIfPresent()
        value.keyPairIds = try reader["KeyPairIds"].readIfPresent(readingClosure: CloudFrontClientTypes.KeyPairIds.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// A list of identifiers for the public keys that CloudFront can use to verify the signatures of signed URLs and signed cookies.
    public struct KGKeyPairIds: Swift.Equatable {
        /// The identifier of the key group that contains the public keys.
        public var keyGroupId: Swift.String?
        /// A list of CloudFront key pair identifiers.
        public var keyPairIds: CloudFrontClientTypes.KeyPairIds?

        public init(
            keyGroupId: Swift.String? = nil,
            keyPairIds: CloudFrontClientTypes.KeyPairIds? = nil
        )
        {
            self.keyGroupId = keyGroupId
            self.keyPairIds = keyPairIds
        }
    }

}

extension CloudFrontClientTypes.KeyGroup {

    static func writingClosure(_ value: CloudFrontClientTypes.KeyGroup?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Id"].write(value.id)
        try writer["KeyGroupConfig"].write(value.keyGroupConfig, writingClosure: CloudFrontClientTypes.KeyGroupConfig.writingClosure(_:to:))
        try writer["LastModifiedTime"].writeTimestamp(value.lastModifiedTime, format: .dateTime)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.KeyGroup {
        var value = CloudFrontClientTypes.KeyGroup()
        value.id = try reader["Id"].readIfPresent()
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: .dateTime)
        value.keyGroupConfig = try reader["KeyGroupConfig"].readIfPresent(readingClosure: CloudFrontClientTypes.KeyGroupConfig.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// A key group. A key group contains a list of public keys that you can use with [CloudFront signed URLs and signed cookies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html).
    public struct KeyGroup: Swift.Equatable {
        /// The identifier for the key group.
        /// This member is required.
        public var id: Swift.String?
        /// The key group configuration.
        /// This member is required.
        public var keyGroupConfig: CloudFrontClientTypes.KeyGroupConfig?
        /// The date and time when the key group was last modified.
        /// This member is required.
        public var lastModifiedTime: ClientRuntime.Date?

        public init(
            id: Swift.String? = nil,
            keyGroupConfig: CloudFrontClientTypes.KeyGroupConfig? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil
        )
        {
            self.id = id
            self.keyGroupConfig = keyGroupConfig
            self.lastModifiedTime = lastModifiedTime
        }
    }

}

extension KeyGroupAlreadyExists {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> KeyGroupAlreadyExists {
        var value = KeyGroupAlreadyExists()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension KeyGroupAlreadyExists {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// A key group with this name already exists. You must provide a unique name. To modify an existing key group, use UpdateKeyGroup.
public struct KeyGroupAlreadyExists: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "KeyGroupAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFrontClientTypes.KeyGroupConfig {

    static func writingClosure(_ value: CloudFrontClientTypes.KeyGroupConfig?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Comment"].write(value.comment)
        try writer["Items"].writeList(value.items, memberWritingClosure: Swift.String.writingClosure(_:to:), memberNodeInfo: "PublicKey", isFlattened: false)
        try writer["Name"].write(value.name)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.KeyGroupConfig {
        var value = CloudFrontClientTypes.KeyGroupConfig()
        value.name = try reader["Name"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure(from:), memberNodeInfo: "PublicKey", isFlattened: false)
        value.comment = try reader["Comment"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// A key group configuration. A key group contains a list of public keys that you can use with [CloudFront signed URLs and signed cookies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html).
    public struct KeyGroupConfig: Swift.Equatable {
        /// A comment to describe the key group. The comment cannot be longer than 128 characters.
        public var comment: Swift.String?
        /// A list of the identifiers of the public keys in the key group.
        /// This member is required.
        public var items: [Swift.String]?
        /// A name to identify the key group.
        /// This member is required.
        public var name: Swift.String?

        public init(
            comment: Swift.String? = nil,
            items: [Swift.String]? = nil,
            name: Swift.String? = nil
        )
        {
            self.comment = comment
            self.items = items
            self.name = name
        }
    }

}

extension CloudFrontClientTypes.KeyGroupList {

    static func writingClosure(_ value: CloudFrontClientTypes.KeyGroupList?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Items"].writeList(value.items, memberWritingClosure: CloudFrontClientTypes.KeyGroupSummary.writingClosure(_:to:), memberNodeInfo: "KeyGroupSummary", isFlattened: false)
        try writer["MaxItems"].write(value.maxItems)
        try writer["NextMarker"].write(value.nextMarker)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.KeyGroupList {
        var value = CloudFrontClientTypes.KeyGroupList()
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.maxItems = try reader["MaxItems"].readIfPresent()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: CloudFrontClientTypes.KeyGroupSummary.readingClosure(from:), memberNodeInfo: "KeyGroupSummary", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// A list of key groups.
    public struct KeyGroupList: Swift.Equatable {
        /// A list of key groups.
        public var items: [CloudFrontClientTypes.KeyGroupSummary]?
        /// The maximum number of key groups requested.
        /// This member is required.
        public var maxItems: Swift.Int?
        /// If there are more items in the list than are in this response, this element is present. It contains the value that you should use in the Marker field of a subsequent request to continue listing key groups.
        public var nextMarker: Swift.String?
        /// The number of key groups returned in the response.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            items: [CloudFrontClientTypes.KeyGroupSummary]? = nil,
            maxItems: Swift.Int? = nil,
            nextMarker: Swift.String? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.items = items
            self.maxItems = maxItems
            self.nextMarker = nextMarker
            self.quantity = quantity
        }
    }

}

extension CloudFrontClientTypes.KeyGroupSummary {

    static func writingClosure(_ value: CloudFrontClientTypes.KeyGroupSummary?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["KeyGroup"].write(value.keyGroup, writingClosure: CloudFrontClientTypes.KeyGroup.writingClosure(_:to:))
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.KeyGroupSummary {
        var value = CloudFrontClientTypes.KeyGroupSummary()
        value.keyGroup = try reader["KeyGroup"].readIfPresent(readingClosure: CloudFrontClientTypes.KeyGroup.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// Contains information about a key group.
    public struct KeyGroupSummary: Swift.Equatable {
        /// A key group.
        /// This member is required.
        public var keyGroup: CloudFrontClientTypes.KeyGroup?

        public init(
            keyGroup: CloudFrontClientTypes.KeyGroup? = nil
        )
        {
            self.keyGroup = keyGroup
        }
    }

}

extension CloudFrontClientTypes.KeyPairIds {

    static func writingClosure(_ value: CloudFrontClientTypes.KeyPairIds?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Items"].writeList(value.items, memberWritingClosure: Swift.String.writingClosure(_:to:), memberNodeInfo: "KeyPairId", isFlattened: false)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.KeyPairIds {
        var value = CloudFrontClientTypes.KeyPairIds()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure(from:), memberNodeInfo: "KeyPairId", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// A list of CloudFront key pair identifiers.
    public struct KeyPairIds: Swift.Equatable {
        /// A list of CloudFront key pair identifiers.
        public var items: [Swift.String]?
        /// The number of key pair identifiers in the list.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            items: [Swift.String]? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.items = items
            self.quantity = quantity
        }
    }

}

extension CloudFrontClientTypes.KeyValueStore {

    static func writingClosure(_ value: CloudFrontClientTypes.KeyValueStore?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["ARN"].write(value.arn)
        try writer["Comment"].write(value.comment)
        try writer["Id"].write(value.id)
        try writer["LastModifiedTime"].writeTimestamp(value.lastModifiedTime, format: .dateTime)
        try writer["Name"].write(value.name)
        try writer["Status"].write(value.status)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.KeyValueStore {
        var value = CloudFrontClientTypes.KeyValueStore()
        value.name = try reader["Name"].readIfPresent()
        value.id = try reader["Id"].readIfPresent()
        value.comment = try reader["Comment"].readIfPresent()
        value.arn = try reader["ARN"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: .dateTime)
        return value
    }
}

extension CloudFrontClientTypes {
    /// The Key Value Store. Use this to separate data from function code, allowing you to update data without having to publish a new version of a function. The Key Value Store holds keys and their corresponding values.
    public struct KeyValueStore: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the Key Value Store.
        /// This member is required.
        public var arn: Swift.String?
        /// A comment for the Key Value Store.
        /// This member is required.
        public var comment: Swift.String?
        /// The unique Id for the Key Value Store.
        /// This member is required.
        public var id: Swift.String?
        /// The last-modified time of the Key Value Store.
        /// This member is required.
        public var lastModifiedTime: ClientRuntime.Date?
        /// The name of the Key Value Store.
        /// This member is required.
        public var name: Swift.String?
        /// The status of the Key Value Store.
        public var status: Swift.String?

        public init(
            arn: Swift.String? = nil,
            comment: Swift.String? = nil,
            id: Swift.String? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            name: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.arn = arn
            self.comment = comment
            self.id = id
            self.lastModifiedTime = lastModifiedTime
            self.name = name
            self.status = status
        }
    }

}

extension CloudFrontClientTypes.KeyValueStoreAssociation {

    static func writingClosure(_ value: CloudFrontClientTypes.KeyValueStoreAssociation?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["KeyValueStoreARN"].write(value.keyValueStoreARN)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.KeyValueStoreAssociation {
        var value = CloudFrontClientTypes.KeyValueStoreAssociation()
        value.keyValueStoreARN = try reader["KeyValueStoreARN"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// The Key Value Store association.
    public struct KeyValueStoreAssociation: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the Key Value Store association.
        /// This member is required.
        public var keyValueStoreARN: Swift.String?

        public init(
            keyValueStoreARN: Swift.String? = nil
        )
        {
            self.keyValueStoreARN = keyValueStoreARN
        }
    }

}

extension CloudFrontClientTypes.KeyValueStoreAssociations {

    static func writingClosure(_ value: CloudFrontClientTypes.KeyValueStoreAssociations?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Items"].writeList(value.items, memberWritingClosure: CloudFrontClientTypes.KeyValueStoreAssociation.writingClosure(_:to:), memberNodeInfo: "KeyValueStoreAssociation", isFlattened: false)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.KeyValueStoreAssociations {
        var value = CloudFrontClientTypes.KeyValueStoreAssociations()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: CloudFrontClientTypes.KeyValueStoreAssociation.readingClosure(from:), memberNodeInfo: "KeyValueStoreAssociation", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// The Key Value Store associations.
    public struct KeyValueStoreAssociations: Swift.Equatable {
        /// The items of the Key Value Store association.
        public var items: [CloudFrontClientTypes.KeyValueStoreAssociation]?
        /// The quantity of Key Value Store associations.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            items: [CloudFrontClientTypes.KeyValueStoreAssociation]? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.items = items
            self.quantity = quantity
        }
    }

}

extension CloudFrontClientTypes.KeyValueStoreList {

    static func writingClosure(_ value: CloudFrontClientTypes.KeyValueStoreList?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Items"].writeList(value.items, memberWritingClosure: CloudFrontClientTypes.KeyValueStore.writingClosure(_:to:), memberNodeInfo: "KeyValueStore", isFlattened: false)
        try writer["MaxItems"].write(value.maxItems)
        try writer["NextMarker"].write(value.nextMarker)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.KeyValueStoreList {
        var value = CloudFrontClientTypes.KeyValueStoreList()
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.maxItems = try reader["MaxItems"].readIfPresent()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: CloudFrontClientTypes.KeyValueStore.readingClosure(from:), memberNodeInfo: "KeyValueStore", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// The Key Value Store list.
    public struct KeyValueStoreList: Swift.Equatable {
        /// The items of the Key Value Store list.
        public var items: [CloudFrontClientTypes.KeyValueStore]?
        /// The maximum number of items in the Key Value Store list.
        /// This member is required.
        public var maxItems: Swift.Int?
        /// The next marker associated with the Key Value Store list.
        public var nextMarker: Swift.String?
        /// The quantity of the Key Value Store list.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            items: [CloudFrontClientTypes.KeyValueStore]? = nil,
            maxItems: Swift.Int? = nil,
            nextMarker: Swift.String? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.items = items
            self.maxItems = maxItems
            self.nextMarker = nextMarker
            self.quantity = quantity
        }
    }

}

extension CloudFrontClientTypes.KinesisStreamConfig {

    static func writingClosure(_ value: CloudFrontClientTypes.KinesisStreamConfig?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["RoleARN"].write(value.roleARN)
        try writer["StreamARN"].write(value.streamARN)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.KinesisStreamConfig {
        var value = CloudFrontClientTypes.KinesisStreamConfig()
        value.roleARN = try reader["RoleARN"].readIfPresent()
        value.streamARN = try reader["StreamARN"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// Contains information about the Amazon Kinesis data stream where you are sending real-time log data.
    public struct KinesisStreamConfig: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of an Identity and Access Management (IAM) role that CloudFront can use to send real-time log data to your Kinesis data stream. For more information the IAM role, see [Real-time log configuration IAM role](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/real-time-logs.html#understand-real-time-log-config-iam-role) in the Amazon CloudFront Developer Guide.
        /// This member is required.
        public var roleARN: Swift.String?
        /// The Amazon Resource Name (ARN) of the Kinesis data stream where you are sending real-time log data.
        /// This member is required.
        public var streamARN: Swift.String?

        public init(
            roleARN: Swift.String? = nil,
            streamARN: Swift.String? = nil
        )
        {
            self.roleARN = roleARN
            self.streamARN = streamARN
        }
    }

}

extension CloudFrontClientTypes.LambdaFunctionAssociation {

    static func writingClosure(_ value: CloudFrontClientTypes.LambdaFunctionAssociation?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["EventType"].write(value.eventType)
        try writer["IncludeBody"].write(value.includeBody)
        try writer["LambdaFunctionARN"].write(value.lambdaFunctionARN)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.LambdaFunctionAssociation {
        var value = CloudFrontClientTypes.LambdaFunctionAssociation()
        value.lambdaFunctionARN = try reader["LambdaFunctionARN"].readIfPresent()
        value.eventType = try reader["EventType"].readIfPresent()
        value.includeBody = try reader["IncludeBody"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// A complex type that contains a Lambda@Edge function association.
    public struct LambdaFunctionAssociation: Swift.Equatable {
        /// Specifies the event type that triggers a Lambda@Edge function invocation. You can specify the following values:
        ///
        /// * viewer-request: The function executes when CloudFront receives a request from a viewer and before it checks to see whether the requested object is in the edge cache.
        ///
        /// * origin-request: The function executes only when CloudFront sends a request to your origin. When the requested object is in the edge cache, the function doesn't execute.
        ///
        /// * origin-response: The function executes after CloudFront receives a response from the origin and before it caches the object in the response. When the requested object is in the edge cache, the function doesn't execute.
        ///
        /// * viewer-response: The function executes before CloudFront returns the requested object to the viewer. The function executes regardless of whether the object was already in the edge cache. If the origin returns an HTTP status code other than HTTP 200 (OK), the function doesn't execute.
        /// This member is required.
        public var eventType: CloudFrontClientTypes.EventType?
        /// A flag that allows a Lambda@Edge function to have read access to the body content. For more information, see [Accessing the Request Body by Choosing the Include Body Option](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-include-body-access.html) in the Amazon CloudFront Developer Guide.
        public var includeBody: Swift.Bool?
        /// The ARN of the Lambda@Edge function. You must specify the ARN of a function version; you can't specify an alias or $LATEST.
        /// This member is required.
        public var lambdaFunctionARN: Swift.String?

        public init(
            eventType: CloudFrontClientTypes.EventType? = nil,
            includeBody: Swift.Bool? = nil,
            lambdaFunctionARN: Swift.String? = nil
        )
        {
            self.eventType = eventType
            self.includeBody = includeBody
            self.lambdaFunctionARN = lambdaFunctionARN
        }
    }

}

extension CloudFrontClientTypes.LambdaFunctionAssociations {

    static func writingClosure(_ value: CloudFrontClientTypes.LambdaFunctionAssociations?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Items"].writeList(value.items, memberWritingClosure: CloudFrontClientTypes.LambdaFunctionAssociation.writingClosure(_:to:), memberNodeInfo: "LambdaFunctionAssociation", isFlattened: false)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.LambdaFunctionAssociations {
        var value = CloudFrontClientTypes.LambdaFunctionAssociations()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: CloudFrontClientTypes.LambdaFunctionAssociation.readingClosure(from:), memberNodeInfo: "LambdaFunctionAssociation", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// A complex type that specifies a list of Lambda@Edge functions associations for a cache behavior. If you want to invoke one or more Lambda@Edge functions triggered by requests that match the PathPattern of the cache behavior, specify the applicable values for Quantity and Items. Note that there can be up to 4 LambdaFunctionAssociation items in this list (one for each possible value of EventType) and each EventType can be associated with only one function. If you don't want to invoke any Lambda@Edge functions for the requests that match PathPattern, specify 0 for Quantity and omit Items.
    public struct LambdaFunctionAssociations: Swift.Equatable {
        /// Optional: A complex type that contains LambdaFunctionAssociation items for this cache behavior. If Quantity is 0, you can omit Items.
        public var items: [CloudFrontClientTypes.LambdaFunctionAssociation]?
        /// The number of Lambda@Edge function associations for this cache behavior.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            items: [CloudFrontClientTypes.LambdaFunctionAssociation]? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.items = items
            self.quantity = quantity
        }
    }

}

extension ListCachePoliciesInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let type = type {
                let typeQueryItem = ClientRuntime.URLQueryItem(name: "Type".urlPercentEncoding(), value: Swift.String(type.rawValue).urlPercentEncoding())
                items.append(typeQueryItem)
            }
            if let marker = marker {
                let markerQueryItem = ClientRuntime.URLQueryItem(name: "Marker".urlPercentEncoding(), value: Swift.String(marker).urlPercentEncoding())
                items.append(markerQueryItem)
            }
            if let maxItems = maxItems {
                let maxItemsQueryItem = ClientRuntime.URLQueryItem(name: "MaxItems".urlPercentEncoding(), value: Swift.String(maxItems).urlPercentEncoding())
                items.append(maxItemsQueryItem)
            }
            return items
        }
    }
}

extension ListCachePoliciesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2020-05-31/cache-policy"
    }
}

public struct ListCachePoliciesInput: Swift.Equatable {
    /// Use this field when paginating results to indicate where to begin in your list of cache policies. The response includes cache policies in the list that occur after the marker. To get the next page of the list, set this field's value to the value of NextMarker from the current page's response.
    public var marker: Swift.String?
    /// The maximum number of cache policies that you want in the response.
    public var maxItems: Swift.Int?
    /// A filter to return only the specified kinds of cache policies. Valid values are:
    ///
    /// * managed – Returns only the managed policies created by Amazon Web Services.
    ///
    /// * custom – Returns only the custom policies created in your Amazon Web Services account.
    public var type: CloudFrontClientTypes.CachePolicyType?

    public init(
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        type: CloudFrontClientTypes.CachePolicyType? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
        self.type = type
    }
}

extension ListCachePoliciesOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> ListCachePoliciesOutput {
        let reader = responseReader
        var value = ListCachePoliciesOutput()
        value.cachePolicyList = try reader.read(readingClosure: CloudFrontClientTypes.CachePolicyList.readingClosure(from:))
        return value
    }
}

public struct ListCachePoliciesOutput: Swift.Equatable {
    /// A list of cache policies.
    public var cachePolicyList: CloudFrontClientTypes.CachePolicyList?

    public init(
        cachePolicyList: CloudFrontClientTypes.CachePolicyList? = nil
    )
    {
        self.cachePolicyList = cachePolicyList
    }
}

enum ListCachePoliciesOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension ListCloudFrontOriginAccessIdentitiesInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let marker = marker {
                let markerQueryItem = ClientRuntime.URLQueryItem(name: "Marker".urlPercentEncoding(), value: Swift.String(marker).urlPercentEncoding())
                items.append(markerQueryItem)
            }
            if let maxItems = maxItems {
                let maxItemsQueryItem = ClientRuntime.URLQueryItem(name: "MaxItems".urlPercentEncoding(), value: Swift.String(maxItems).urlPercentEncoding())
                items.append(maxItemsQueryItem)
            }
            return items
        }
    }
}

extension ListCloudFrontOriginAccessIdentitiesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2020-05-31/origin-access-identity/cloudfront"
    }
}

/// The request to list origin access identities.
public struct ListCloudFrontOriginAccessIdentitiesInput: Swift.Equatable {
    /// Use this when paginating results to indicate where to begin in your list of origin access identities. The results include identities in the list that occur after the marker. To get the next page of results, set the Marker to the value of the NextMarker from the current page's response (which is also the ID of the last identity on that page).
    public var marker: Swift.String?
    /// The maximum number of origin access identities you want in the response body.
    public var maxItems: Swift.Int?

    public init(
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
    }
}

extension ListCloudFrontOriginAccessIdentitiesOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> ListCloudFrontOriginAccessIdentitiesOutput {
        let reader = responseReader
        var value = ListCloudFrontOriginAccessIdentitiesOutput()
        value.cloudFrontOriginAccessIdentityList = try reader.read(readingClosure: CloudFrontClientTypes.CloudFrontOriginAccessIdentityList.readingClosure(from:))
        return value
    }
}

/// The returned result of the corresponding request.
public struct ListCloudFrontOriginAccessIdentitiesOutput: Swift.Equatable {
    /// The CloudFrontOriginAccessIdentityList type.
    public var cloudFrontOriginAccessIdentityList: CloudFrontClientTypes.CloudFrontOriginAccessIdentityList?

    public init(
        cloudFrontOriginAccessIdentityList: CloudFrontClientTypes.CloudFrontOriginAccessIdentityList? = nil
    )
    {
        self.cloudFrontOriginAccessIdentityList = cloudFrontOriginAccessIdentityList
    }
}

enum ListCloudFrontOriginAccessIdentitiesOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension ListConflictingAliasesInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            guard let alias = alias else {
                let message = "Creating a URL Query Item failed. alias is required and must not be nil."
                throw ClientRuntime.ClientError.unknownError(message)
            }
            let aliasQueryItem = ClientRuntime.URLQueryItem(name: "Alias".urlPercentEncoding(), value: Swift.String(alias).urlPercentEncoding())
            items.append(aliasQueryItem)
            guard let distributionId = distributionId else {
                let message = "Creating a URL Query Item failed. distributionId is required and must not be nil."
                throw ClientRuntime.ClientError.unknownError(message)
            }
            let distributionIdQueryItem = ClientRuntime.URLQueryItem(name: "DistributionId".urlPercentEncoding(), value: Swift.String(distributionId).urlPercentEncoding())
            items.append(distributionIdQueryItem)
            if let marker = marker {
                let markerQueryItem = ClientRuntime.URLQueryItem(name: "Marker".urlPercentEncoding(), value: Swift.String(marker).urlPercentEncoding())
                items.append(markerQueryItem)
            }
            if let maxItems = maxItems {
                let maxItemsQueryItem = ClientRuntime.URLQueryItem(name: "MaxItems".urlPercentEncoding(), value: Swift.String(maxItems).urlPercentEncoding())
                items.append(maxItemsQueryItem)
            }
            return items
        }
    }
}

extension ListConflictingAliasesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2020-05-31/conflicting-alias"
    }
}

public struct ListConflictingAliasesInput: Swift.Equatable {
    /// The alias (also called a CNAME) to search for conflicting aliases.
    /// This member is required.
    public var alias: Swift.String?
    /// The ID of a distribution in your account that has an attached SSL/TLS certificate that includes the provided alias.
    /// This member is required.
    public var distributionId: Swift.String?
    /// Use this field when paginating results to indicate where to begin in the list of conflicting aliases. The response includes conflicting aliases in the list that occur after the marker. To get the next page of the list, set this field's value to the value of NextMarker from the current page's response.
    public var marker: Swift.String?
    /// The maximum number of conflicting aliases that you want in the response.
    public var maxItems: Swift.Int?

    public init(
        alias: Swift.String? = nil,
        distributionId: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil
    )
    {
        self.alias = alias
        self.distributionId = distributionId
        self.marker = marker
        self.maxItems = maxItems
    }
}

extension ListConflictingAliasesOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> ListConflictingAliasesOutput {
        let reader = responseReader
        var value = ListConflictingAliasesOutput()
        value.conflictingAliasesList = try reader.read(readingClosure: CloudFrontClientTypes.ConflictingAliasesList.readingClosure(from:))
        return value
    }
}

public struct ListConflictingAliasesOutput: Swift.Equatable {
    /// A list of conflicting aliases.
    public var conflictingAliasesList: CloudFrontClientTypes.ConflictingAliasesList?

    public init(
        conflictingAliasesList: CloudFrontClientTypes.ConflictingAliasesList? = nil
    )
    {
        self.conflictingAliasesList = conflictingAliasesList
    }
}

enum ListConflictingAliasesOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension ListContinuousDeploymentPoliciesInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let marker = marker {
                let markerQueryItem = ClientRuntime.URLQueryItem(name: "Marker".urlPercentEncoding(), value: Swift.String(marker).urlPercentEncoding())
                items.append(markerQueryItem)
            }
            if let maxItems = maxItems {
                let maxItemsQueryItem = ClientRuntime.URLQueryItem(name: "MaxItems".urlPercentEncoding(), value: Swift.String(maxItems).urlPercentEncoding())
                items.append(maxItemsQueryItem)
            }
            return items
        }
    }
}

extension ListContinuousDeploymentPoliciesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2020-05-31/continuous-deployment-policy"
    }
}

public struct ListContinuousDeploymentPoliciesInput: Swift.Equatable {
    /// Use this field when paginating results to indicate where to begin in your list of continuous deployment policies. The response includes policies in the list that occur after the marker. To get the next page of the list, set this field's value to the value of NextMarker from the current page's response.
    public var marker: Swift.String?
    /// The maximum number of continuous deployment policies that you want returned in the response.
    public var maxItems: Swift.Int?

    public init(
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
    }
}

extension ListContinuousDeploymentPoliciesOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> ListContinuousDeploymentPoliciesOutput {
        let reader = responseReader
        var value = ListContinuousDeploymentPoliciesOutput()
        value.continuousDeploymentPolicyList = try reader.read(readingClosure: CloudFrontClientTypes.ContinuousDeploymentPolicyList.readingClosure(from:))
        return value
    }
}

public struct ListContinuousDeploymentPoliciesOutput: Swift.Equatable {
    /// A list of continuous deployment policies.
    public var continuousDeploymentPolicyList: CloudFrontClientTypes.ContinuousDeploymentPolicyList?

    public init(
        continuousDeploymentPolicyList: CloudFrontClientTypes.ContinuousDeploymentPolicyList? = nil
    )
    {
        self.continuousDeploymentPolicyList = continuousDeploymentPolicyList
    }
}

enum ListContinuousDeploymentPoliciesOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension ListDistributionsByCachePolicyIdInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let marker = marker {
                let markerQueryItem = ClientRuntime.URLQueryItem(name: "Marker".urlPercentEncoding(), value: Swift.String(marker).urlPercentEncoding())
                items.append(markerQueryItem)
            }
            if let maxItems = maxItems {
                let maxItemsQueryItem = ClientRuntime.URLQueryItem(name: "MaxItems".urlPercentEncoding(), value: Swift.String(maxItems).urlPercentEncoding())
                items.append(maxItemsQueryItem)
            }
            return items
        }
    }
}

extension ListDistributionsByCachePolicyIdInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let cachePolicyId = cachePolicyId else {
            return nil
        }
        return "/2020-05-31/distributionsByCachePolicyId/\(cachePolicyId.urlPercentEncoding())"
    }
}

public struct ListDistributionsByCachePolicyIdInput: Swift.Equatable {
    /// The ID of the cache policy whose associated distribution IDs you want to list.
    /// This member is required.
    public var cachePolicyId: Swift.String?
    /// Use this field when paginating results to indicate where to begin in your list of distribution IDs. The response includes distribution IDs in the list that occur after the marker. To get the next page of the list, set this field's value to the value of NextMarker from the current page's response.
    public var marker: Swift.String?
    /// The maximum number of distribution IDs that you want in the response.
    public var maxItems: Swift.Int?

    public init(
        cachePolicyId: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil
    )
    {
        self.cachePolicyId = cachePolicyId
        self.marker = marker
        self.maxItems = maxItems
    }
}

extension ListDistributionsByCachePolicyIdOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> ListDistributionsByCachePolicyIdOutput {
        let reader = responseReader
        var value = ListDistributionsByCachePolicyIdOutput()
        value.distributionIdList = try reader.read(readingClosure: CloudFrontClientTypes.DistributionIdList.readingClosure(from:))
        return value
    }
}

public struct ListDistributionsByCachePolicyIdOutput: Swift.Equatable {
    /// A list of distribution IDs.
    public var distributionIdList: CloudFrontClientTypes.DistributionIdList?

    public init(
        distributionIdList: CloudFrontClientTypes.DistributionIdList? = nil
    )
    {
        self.distributionIdList = distributionIdList
    }
}

enum ListDistributionsByCachePolicyIdOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension ListDistributionsByKeyGroupInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let marker = marker {
                let markerQueryItem = ClientRuntime.URLQueryItem(name: "Marker".urlPercentEncoding(), value: Swift.String(marker).urlPercentEncoding())
                items.append(markerQueryItem)
            }
            if let maxItems = maxItems {
                let maxItemsQueryItem = ClientRuntime.URLQueryItem(name: "MaxItems".urlPercentEncoding(), value: Swift.String(maxItems).urlPercentEncoding())
                items.append(maxItemsQueryItem)
            }
            return items
        }
    }
}

extension ListDistributionsByKeyGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let keyGroupId = keyGroupId else {
            return nil
        }
        return "/2020-05-31/distributionsByKeyGroupId/\(keyGroupId.urlPercentEncoding())"
    }
}

public struct ListDistributionsByKeyGroupInput: Swift.Equatable {
    /// The ID of the key group whose associated distribution IDs you are listing.
    /// This member is required.
    public var keyGroupId: Swift.String?
    /// Use this field when paginating results to indicate where to begin in your list of distribution IDs. The response includes distribution IDs in the list that occur after the marker. To get the next page of the list, set this field's value to the value of NextMarker from the current page's response.
    public var marker: Swift.String?
    /// The maximum number of distribution IDs that you want in the response.
    public var maxItems: Swift.Int?

    public init(
        keyGroupId: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil
    )
    {
        self.keyGroupId = keyGroupId
        self.marker = marker
        self.maxItems = maxItems
    }
}

extension ListDistributionsByKeyGroupOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> ListDistributionsByKeyGroupOutput {
        let reader = responseReader
        var value = ListDistributionsByKeyGroupOutput()
        value.distributionIdList = try reader.read(readingClosure: CloudFrontClientTypes.DistributionIdList.readingClosure(from:))
        return value
    }
}

public struct ListDistributionsByKeyGroupOutput: Swift.Equatable {
    /// A list of distribution IDs.
    public var distributionIdList: CloudFrontClientTypes.DistributionIdList?

    public init(
        distributionIdList: CloudFrontClientTypes.DistributionIdList? = nil
    )
    {
        self.distributionIdList = distributionIdList
    }
}

enum ListDistributionsByKeyGroupOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension ListDistributionsByOriginRequestPolicyIdInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let marker = marker {
                let markerQueryItem = ClientRuntime.URLQueryItem(name: "Marker".urlPercentEncoding(), value: Swift.String(marker).urlPercentEncoding())
                items.append(markerQueryItem)
            }
            if let maxItems = maxItems {
                let maxItemsQueryItem = ClientRuntime.URLQueryItem(name: "MaxItems".urlPercentEncoding(), value: Swift.String(maxItems).urlPercentEncoding())
                items.append(maxItemsQueryItem)
            }
            return items
        }
    }
}

extension ListDistributionsByOriginRequestPolicyIdInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let originRequestPolicyId = originRequestPolicyId else {
            return nil
        }
        return "/2020-05-31/distributionsByOriginRequestPolicyId/\(originRequestPolicyId.urlPercentEncoding())"
    }
}

public struct ListDistributionsByOriginRequestPolicyIdInput: Swift.Equatable {
    /// Use this field when paginating results to indicate where to begin in your list of distribution IDs. The response includes distribution IDs in the list that occur after the marker. To get the next page of the list, set this field's value to the value of NextMarker from the current page's response.
    public var marker: Swift.String?
    /// The maximum number of distribution IDs that you want in the response.
    public var maxItems: Swift.Int?
    /// The ID of the origin request policy whose associated distribution IDs you want to list.
    /// This member is required.
    public var originRequestPolicyId: Swift.String?

    public init(
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        originRequestPolicyId: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
        self.originRequestPolicyId = originRequestPolicyId
    }
}

extension ListDistributionsByOriginRequestPolicyIdOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> ListDistributionsByOriginRequestPolicyIdOutput {
        let reader = responseReader
        var value = ListDistributionsByOriginRequestPolicyIdOutput()
        value.distributionIdList = try reader.read(readingClosure: CloudFrontClientTypes.DistributionIdList.readingClosure(from:))
        return value
    }
}

public struct ListDistributionsByOriginRequestPolicyIdOutput: Swift.Equatable {
    /// A list of distribution IDs.
    public var distributionIdList: CloudFrontClientTypes.DistributionIdList?

    public init(
        distributionIdList: CloudFrontClientTypes.DistributionIdList? = nil
    )
    {
        self.distributionIdList = distributionIdList
    }
}

enum ListDistributionsByOriginRequestPolicyIdOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension ListDistributionsByRealtimeLogConfigInput {
    static func writingClosure(_ value: ListDistributionsByRealtimeLogConfigInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Marker"].write(value.marker)
        try writer["MaxItems"].write(value.maxItems)
        try writer["RealtimeLogConfigArn"].write(value.realtimeLogConfigArn)
        try writer["RealtimeLogConfigName"].write(value.realtimeLogConfigName)
    }
}

extension ListDistributionsByRealtimeLogConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2020-05-31/distributionsByRealtimeLogConfig"
    }
}

public struct ListDistributionsByRealtimeLogConfigInput: Swift.Equatable {
    /// Use this field when paginating results to indicate where to begin in your list of distributions. The response includes distributions in the list that occur after the marker. To get the next page of the list, set this field's value to the value of NextMarker from the current page's response.
    public var marker: Swift.String?
    /// The maximum number of distributions that you want in the response.
    public var maxItems: Swift.Int?
    /// The Amazon Resource Name (ARN) of the real-time log configuration whose associated distributions you want to list.
    public var realtimeLogConfigArn: Swift.String?
    /// The name of the real-time log configuration whose associated distributions you want to list.
    public var realtimeLogConfigName: Swift.String?

    public init(
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        realtimeLogConfigArn: Swift.String? = nil,
        realtimeLogConfigName: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
        self.realtimeLogConfigArn = realtimeLogConfigArn
        self.realtimeLogConfigName = realtimeLogConfigName
    }
}

extension ListDistributionsByRealtimeLogConfigOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> ListDistributionsByRealtimeLogConfigOutput {
        let reader = responseReader
        var value = ListDistributionsByRealtimeLogConfigOutput()
        value.distributionList = try reader.read(readingClosure: CloudFrontClientTypes.DistributionList.readingClosure(from:))
        return value
    }
}

public struct ListDistributionsByRealtimeLogConfigOutput: Swift.Equatable {
    /// A distribution list.
    public var distributionList: CloudFrontClientTypes.DistributionList?

    public init(
        distributionList: CloudFrontClientTypes.DistributionList? = nil
    )
    {
        self.distributionList = distributionList
    }
}

enum ListDistributionsByRealtimeLogConfigOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension ListDistributionsByResponseHeadersPolicyIdInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let marker = marker {
                let markerQueryItem = ClientRuntime.URLQueryItem(name: "Marker".urlPercentEncoding(), value: Swift.String(marker).urlPercentEncoding())
                items.append(markerQueryItem)
            }
            if let maxItems = maxItems {
                let maxItemsQueryItem = ClientRuntime.URLQueryItem(name: "MaxItems".urlPercentEncoding(), value: Swift.String(maxItems).urlPercentEncoding())
                items.append(maxItemsQueryItem)
            }
            return items
        }
    }
}

extension ListDistributionsByResponseHeadersPolicyIdInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let responseHeadersPolicyId = responseHeadersPolicyId else {
            return nil
        }
        return "/2020-05-31/distributionsByResponseHeadersPolicyId/\(responseHeadersPolicyId.urlPercentEncoding())"
    }
}

public struct ListDistributionsByResponseHeadersPolicyIdInput: Swift.Equatable {
    /// Use this field when paginating results to indicate where to begin in your list of distribution IDs. The response includes distribution IDs in the list that occur after the marker. To get the next page of the list, set this field's value to the value of NextMarker from the current page's response.
    public var marker: Swift.String?
    /// The maximum number of distribution IDs that you want to get in the response.
    public var maxItems: Swift.Int?
    /// The ID of the response headers policy whose associated distribution IDs you want to list.
    /// This member is required.
    public var responseHeadersPolicyId: Swift.String?

    public init(
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        responseHeadersPolicyId: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
        self.responseHeadersPolicyId = responseHeadersPolicyId
    }
}

extension ListDistributionsByResponseHeadersPolicyIdOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> ListDistributionsByResponseHeadersPolicyIdOutput {
        let reader = responseReader
        var value = ListDistributionsByResponseHeadersPolicyIdOutput()
        value.distributionIdList = try reader.read(readingClosure: CloudFrontClientTypes.DistributionIdList.readingClosure(from:))
        return value
    }
}

public struct ListDistributionsByResponseHeadersPolicyIdOutput: Swift.Equatable {
    /// A list of distribution IDs.
    public var distributionIdList: CloudFrontClientTypes.DistributionIdList?

    public init(
        distributionIdList: CloudFrontClientTypes.DistributionIdList? = nil
    )
    {
        self.distributionIdList = distributionIdList
    }
}

enum ListDistributionsByResponseHeadersPolicyIdOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension ListDistributionsByWebACLIdInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let marker = marker {
                let markerQueryItem = ClientRuntime.URLQueryItem(name: "Marker".urlPercentEncoding(), value: Swift.String(marker).urlPercentEncoding())
                items.append(markerQueryItem)
            }
            if let maxItems = maxItems {
                let maxItemsQueryItem = ClientRuntime.URLQueryItem(name: "MaxItems".urlPercentEncoding(), value: Swift.String(maxItems).urlPercentEncoding())
                items.append(maxItemsQueryItem)
            }
            return items
        }
    }
}

extension ListDistributionsByWebACLIdInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let webACLId = webACLId else {
            return nil
        }
        return "/2020-05-31/distributionsByWebACLId/\(webACLId.urlPercentEncoding())"
    }
}

/// The request to list distributions that are associated with a specified WAF web ACL.
public struct ListDistributionsByWebACLIdInput: Swift.Equatable {
    /// Use Marker and MaxItems to control pagination of results. If you have more than MaxItems distributions that satisfy the request, the response includes a NextMarker element. To get the next page of results, submit another request. For the value of Marker, specify the value of NextMarker from the last response. (For the first request, omit Marker.)
    public var marker: Swift.String?
    /// The maximum number of distributions that you want CloudFront to return in the response body. The maximum and default values are both 100.
    public var maxItems: Swift.Int?
    /// The ID of the WAF web ACL that you want to list the associated distributions. If you specify "null" for the ID, the request returns a list of the distributions that aren't associated with a web ACL.
    /// This member is required.
    public var webACLId: Swift.String?

    public init(
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        webACLId: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
        self.webACLId = webACLId
    }
}

extension ListDistributionsByWebACLIdOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> ListDistributionsByWebACLIdOutput {
        let reader = responseReader
        var value = ListDistributionsByWebACLIdOutput()
        value.distributionList = try reader.read(readingClosure: CloudFrontClientTypes.DistributionList.readingClosure(from:))
        return value
    }
}

/// The response to a request to list the distributions that are associated with a specified WAF web ACL.
public struct ListDistributionsByWebACLIdOutput: Swift.Equatable {
    /// The DistributionList type.
    public var distributionList: CloudFrontClientTypes.DistributionList?

    public init(
        distributionList: CloudFrontClientTypes.DistributionList? = nil
    )
    {
        self.distributionList = distributionList
    }
}

enum ListDistributionsByWebACLIdOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension ListDistributionsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let marker = marker {
                let markerQueryItem = ClientRuntime.URLQueryItem(name: "Marker".urlPercentEncoding(), value: Swift.String(marker).urlPercentEncoding())
                items.append(markerQueryItem)
            }
            if let maxItems = maxItems {
                let maxItemsQueryItem = ClientRuntime.URLQueryItem(name: "MaxItems".urlPercentEncoding(), value: Swift.String(maxItems).urlPercentEncoding())
                items.append(maxItemsQueryItem)
            }
            return items
        }
    }
}

extension ListDistributionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2020-05-31/distribution"
    }
}

/// The request to list your distributions.
public struct ListDistributionsInput: Swift.Equatable {
    /// Use this when paginating results to indicate where to begin in your list of distributions. The results include distributions in the list that occur after the marker. To get the next page of results, set the Marker to the value of the NextMarker from the current page's response (which is also the ID of the last distribution on that page).
    public var marker: Swift.String?
    /// The maximum number of distributions you want in the response body.
    public var maxItems: Swift.Int?

    public init(
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
    }
}

extension ListDistributionsOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> ListDistributionsOutput {
        let reader = responseReader
        var value = ListDistributionsOutput()
        value.distributionList = try reader.read(readingClosure: CloudFrontClientTypes.DistributionList.readingClosure(from:))
        return value
    }
}

/// The returned result of the corresponding request.
public struct ListDistributionsOutput: Swift.Equatable {
    /// The DistributionList type.
    public var distributionList: CloudFrontClientTypes.DistributionList?

    public init(
        distributionList: CloudFrontClientTypes.DistributionList? = nil
    )
    {
        self.distributionList = distributionList
    }
}

enum ListDistributionsOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension ListFieldLevelEncryptionConfigsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let marker = marker {
                let markerQueryItem = ClientRuntime.URLQueryItem(name: "Marker".urlPercentEncoding(), value: Swift.String(marker).urlPercentEncoding())
                items.append(markerQueryItem)
            }
            if let maxItems = maxItems {
                let maxItemsQueryItem = ClientRuntime.URLQueryItem(name: "MaxItems".urlPercentEncoding(), value: Swift.String(maxItems).urlPercentEncoding())
                items.append(maxItemsQueryItem)
            }
            return items
        }
    }
}

extension ListFieldLevelEncryptionConfigsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2020-05-31/field-level-encryption"
    }
}

public struct ListFieldLevelEncryptionConfigsInput: Swift.Equatable {
    /// Use this when paginating results to indicate where to begin in your list of configurations. The results include configurations in the list that occur after the marker. To get the next page of results, set the Marker to the value of the NextMarker from the current page's response (which is also the ID of the last configuration on that page).
    public var marker: Swift.String?
    /// The maximum number of field-level encryption configurations you want in the response body.
    public var maxItems: Swift.Int?

    public init(
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
    }
}

extension ListFieldLevelEncryptionConfigsOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> ListFieldLevelEncryptionConfigsOutput {
        let reader = responseReader
        var value = ListFieldLevelEncryptionConfigsOutput()
        value.fieldLevelEncryptionList = try reader.read(readingClosure: CloudFrontClientTypes.FieldLevelEncryptionList.readingClosure(from:))
        return value
    }
}

public struct ListFieldLevelEncryptionConfigsOutput: Swift.Equatable {
    /// Returns a list of all field-level encryption configurations that have been created in CloudFront for this account.
    public var fieldLevelEncryptionList: CloudFrontClientTypes.FieldLevelEncryptionList?

    public init(
        fieldLevelEncryptionList: CloudFrontClientTypes.FieldLevelEncryptionList? = nil
    )
    {
        self.fieldLevelEncryptionList = fieldLevelEncryptionList
    }
}

enum ListFieldLevelEncryptionConfigsOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension ListFieldLevelEncryptionProfilesInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let marker = marker {
                let markerQueryItem = ClientRuntime.URLQueryItem(name: "Marker".urlPercentEncoding(), value: Swift.String(marker).urlPercentEncoding())
                items.append(markerQueryItem)
            }
            if let maxItems = maxItems {
                let maxItemsQueryItem = ClientRuntime.URLQueryItem(name: "MaxItems".urlPercentEncoding(), value: Swift.String(maxItems).urlPercentEncoding())
                items.append(maxItemsQueryItem)
            }
            return items
        }
    }
}

extension ListFieldLevelEncryptionProfilesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2020-05-31/field-level-encryption-profile"
    }
}

public struct ListFieldLevelEncryptionProfilesInput: Swift.Equatable {
    /// Use this when paginating results to indicate where to begin in your list of profiles. The results include profiles in the list that occur after the marker. To get the next page of results, set the Marker to the value of the NextMarker from the current page's response (which is also the ID of the last profile on that page).
    public var marker: Swift.String?
    /// The maximum number of field-level encryption profiles you want in the response body.
    public var maxItems: Swift.Int?

    public init(
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
    }
}

extension ListFieldLevelEncryptionProfilesOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> ListFieldLevelEncryptionProfilesOutput {
        let reader = responseReader
        var value = ListFieldLevelEncryptionProfilesOutput()
        value.fieldLevelEncryptionProfileList = try reader.read(readingClosure: CloudFrontClientTypes.FieldLevelEncryptionProfileList.readingClosure(from:))
        return value
    }
}

public struct ListFieldLevelEncryptionProfilesOutput: Swift.Equatable {
    /// Returns a list of the field-level encryption profiles that have been created in CloudFront for this account.
    public var fieldLevelEncryptionProfileList: CloudFrontClientTypes.FieldLevelEncryptionProfileList?

    public init(
        fieldLevelEncryptionProfileList: CloudFrontClientTypes.FieldLevelEncryptionProfileList? = nil
    )
    {
        self.fieldLevelEncryptionProfileList = fieldLevelEncryptionProfileList
    }
}

enum ListFieldLevelEncryptionProfilesOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension ListFunctionsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let stage = stage {
                let stageQueryItem = ClientRuntime.URLQueryItem(name: "Stage".urlPercentEncoding(), value: Swift.String(stage.rawValue).urlPercentEncoding())
                items.append(stageQueryItem)
            }
            if let marker = marker {
                let markerQueryItem = ClientRuntime.URLQueryItem(name: "Marker".urlPercentEncoding(), value: Swift.String(marker).urlPercentEncoding())
                items.append(markerQueryItem)
            }
            if let maxItems = maxItems {
                let maxItemsQueryItem = ClientRuntime.URLQueryItem(name: "MaxItems".urlPercentEncoding(), value: Swift.String(maxItems).urlPercentEncoding())
                items.append(maxItemsQueryItem)
            }
            return items
        }
    }
}

extension ListFunctionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2020-05-31/function"
    }
}

public struct ListFunctionsInput: Swift.Equatable {
    /// Use this field when paginating results to indicate where to begin in your list of functions. The response includes functions in the list that occur after the marker. To get the next page of the list, set this field's value to the value of NextMarker from the current page's response.
    public var marker: Swift.String?
    /// The maximum number of functions that you want in the response.
    public var maxItems: Swift.Int?
    /// An optional filter to return only the functions that are in the specified stage, either DEVELOPMENT or LIVE.
    public var stage: CloudFrontClientTypes.FunctionStage?

    public init(
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        stage: CloudFrontClientTypes.FunctionStage? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
        self.stage = stage
    }
}

extension ListFunctionsOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> ListFunctionsOutput {
        let reader = responseReader
        var value = ListFunctionsOutput()
        value.functionList = try reader.read(readingClosure: CloudFrontClientTypes.FunctionList.readingClosure(from:))
        return value
    }
}

public struct ListFunctionsOutput: Swift.Equatable {
    /// A list of CloudFront functions.
    public var functionList: CloudFrontClientTypes.FunctionList?

    public init(
        functionList: CloudFrontClientTypes.FunctionList? = nil
    )
    {
        self.functionList = functionList
    }
}

enum ListFunctionsOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension ListInvalidationsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let marker = marker {
                let markerQueryItem = ClientRuntime.URLQueryItem(name: "Marker".urlPercentEncoding(), value: Swift.String(marker).urlPercentEncoding())
                items.append(markerQueryItem)
            }
            if let maxItems = maxItems {
                let maxItemsQueryItem = ClientRuntime.URLQueryItem(name: "MaxItems".urlPercentEncoding(), value: Swift.String(maxItems).urlPercentEncoding())
                items.append(maxItemsQueryItem)
            }
            return items
        }
    }
}

extension ListInvalidationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let distributionId = distributionId else {
            return nil
        }
        return "/2020-05-31/distribution/\(distributionId.urlPercentEncoding())/invalidation"
    }
}

/// The request to list invalidations.
public struct ListInvalidationsInput: Swift.Equatable {
    /// The distribution's ID.
    /// This member is required.
    public var distributionId: Swift.String?
    /// Use this parameter when paginating results to indicate where to begin in your list of invalidation batches. Because the results are returned in decreasing order from most recent to oldest, the most recent results are on the first page, the second page will contain earlier results, and so on. To get the next page of results, set Marker to the value of the NextMarker from the current page's response. This value is the same as the ID of the last invalidation batch on that page.
    public var marker: Swift.String?
    /// The maximum number of invalidation batches that you want in the response body.
    public var maxItems: Swift.Int?

    public init(
        distributionId: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil
    )
    {
        self.distributionId = distributionId
        self.marker = marker
        self.maxItems = maxItems
    }
}

extension ListInvalidationsOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> ListInvalidationsOutput {
        let reader = responseReader
        var value = ListInvalidationsOutput()
        value.invalidationList = try reader.read(readingClosure: CloudFrontClientTypes.InvalidationList.readingClosure(from:))
        return value
    }
}

/// The returned result of the corresponding request.
public struct ListInvalidationsOutput: Swift.Equatable {
    /// Information about invalidation batches.
    public var invalidationList: CloudFrontClientTypes.InvalidationList?

    public init(
        invalidationList: CloudFrontClientTypes.InvalidationList? = nil
    )
    {
        self.invalidationList = invalidationList
    }
}

enum ListInvalidationsOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension ListKeyGroupsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let marker = marker {
                let markerQueryItem = ClientRuntime.URLQueryItem(name: "Marker".urlPercentEncoding(), value: Swift.String(marker).urlPercentEncoding())
                items.append(markerQueryItem)
            }
            if let maxItems = maxItems {
                let maxItemsQueryItem = ClientRuntime.URLQueryItem(name: "MaxItems".urlPercentEncoding(), value: Swift.String(maxItems).urlPercentEncoding())
                items.append(maxItemsQueryItem)
            }
            return items
        }
    }
}

extension ListKeyGroupsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2020-05-31/key-group"
    }
}

public struct ListKeyGroupsInput: Swift.Equatable {
    /// Use this field when paginating results to indicate where to begin in your list of key groups. The response includes key groups in the list that occur after the marker. To get the next page of the list, set this field's value to the value of NextMarker from the current page's response.
    public var marker: Swift.String?
    /// The maximum number of key groups that you want in the response.
    public var maxItems: Swift.Int?

    public init(
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
    }
}

extension ListKeyGroupsOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> ListKeyGroupsOutput {
        let reader = responseReader
        var value = ListKeyGroupsOutput()
        value.keyGroupList = try reader.read(readingClosure: CloudFrontClientTypes.KeyGroupList.readingClosure(from:))
        return value
    }
}

public struct ListKeyGroupsOutput: Swift.Equatable {
    /// A list of key groups.
    public var keyGroupList: CloudFrontClientTypes.KeyGroupList?

    public init(
        keyGroupList: CloudFrontClientTypes.KeyGroupList? = nil
    )
    {
        self.keyGroupList = keyGroupList
    }
}

enum ListKeyGroupsOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension ListKeyValueStoresInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let status = status {
                let statusQueryItem = ClientRuntime.URLQueryItem(name: "Status".urlPercentEncoding(), value: Swift.String(status).urlPercentEncoding())
                items.append(statusQueryItem)
            }
            if let marker = marker {
                let markerQueryItem = ClientRuntime.URLQueryItem(name: "Marker".urlPercentEncoding(), value: Swift.String(marker).urlPercentEncoding())
                items.append(markerQueryItem)
            }
            if let maxItems = maxItems {
                let maxItemsQueryItem = ClientRuntime.URLQueryItem(name: "MaxItems".urlPercentEncoding(), value: Swift.String(maxItems).urlPercentEncoding())
                items.append(maxItemsQueryItem)
            }
            return items
        }
    }
}

extension ListKeyValueStoresInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2020-05-31/key-value-store"
    }
}

public struct ListKeyValueStoresInput: Swift.Equatable {
    /// The marker associated with the Key Value Stores list.
    public var marker: Swift.String?
    /// The maximum number of items in the Key Value Stores list.
    public var maxItems: Swift.Int?
    /// The status of the request for the Key Value Stores list.
    public var status: Swift.String?

    public init(
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        status: Swift.String? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
        self.status = status
    }
}

extension ListKeyValueStoresOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> ListKeyValueStoresOutput {
        let reader = responseReader
        var value = ListKeyValueStoresOutput()
        value.keyValueStoreList = try reader.read(readingClosure: CloudFrontClientTypes.KeyValueStoreList.readingClosure(from:))
        return value
    }
}

public struct ListKeyValueStoresOutput: Swift.Equatable {
    /// The resulting Key Value Stores list.
    public var keyValueStoreList: CloudFrontClientTypes.KeyValueStoreList?

    public init(
        keyValueStoreList: CloudFrontClientTypes.KeyValueStoreList? = nil
    )
    {
        self.keyValueStoreList = keyValueStoreList
    }
}

enum ListKeyValueStoresOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension ListOriginAccessControlsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let marker = marker {
                let markerQueryItem = ClientRuntime.URLQueryItem(name: "Marker".urlPercentEncoding(), value: Swift.String(marker).urlPercentEncoding())
                items.append(markerQueryItem)
            }
            if let maxItems = maxItems {
                let maxItemsQueryItem = ClientRuntime.URLQueryItem(name: "MaxItems".urlPercentEncoding(), value: Swift.String(maxItems).urlPercentEncoding())
                items.append(maxItemsQueryItem)
            }
            return items
        }
    }
}

extension ListOriginAccessControlsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2020-05-31/origin-access-control"
    }
}

public struct ListOriginAccessControlsInput: Swift.Equatable {
    /// Use this field when paginating results to indicate where to begin in your list of origin access controls. The response includes the items in the list that occur after the marker. To get the next page of the list, set this field's value to the value of NextMarker from the current page's response.
    public var marker: Swift.String?
    /// The maximum number of origin access controls that you want in the response.
    public var maxItems: Swift.Int?

    public init(
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
    }
}

extension ListOriginAccessControlsOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> ListOriginAccessControlsOutput {
        let reader = responseReader
        var value = ListOriginAccessControlsOutput()
        value.originAccessControlList = try reader.read(readingClosure: CloudFrontClientTypes.OriginAccessControlList.readingClosure(from:))
        return value
    }
}

public struct ListOriginAccessControlsOutput: Swift.Equatable {
    /// A list of origin access controls.
    public var originAccessControlList: CloudFrontClientTypes.OriginAccessControlList?

    public init(
        originAccessControlList: CloudFrontClientTypes.OriginAccessControlList? = nil
    )
    {
        self.originAccessControlList = originAccessControlList
    }
}

enum ListOriginAccessControlsOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension ListOriginRequestPoliciesInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let type = type {
                let typeQueryItem = ClientRuntime.URLQueryItem(name: "Type".urlPercentEncoding(), value: Swift.String(type.rawValue).urlPercentEncoding())
                items.append(typeQueryItem)
            }
            if let marker = marker {
                let markerQueryItem = ClientRuntime.URLQueryItem(name: "Marker".urlPercentEncoding(), value: Swift.String(marker).urlPercentEncoding())
                items.append(markerQueryItem)
            }
            if let maxItems = maxItems {
                let maxItemsQueryItem = ClientRuntime.URLQueryItem(name: "MaxItems".urlPercentEncoding(), value: Swift.String(maxItems).urlPercentEncoding())
                items.append(maxItemsQueryItem)
            }
            return items
        }
    }
}

extension ListOriginRequestPoliciesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2020-05-31/origin-request-policy"
    }
}

public struct ListOriginRequestPoliciesInput: Swift.Equatable {
    /// Use this field when paginating results to indicate where to begin in your list of origin request policies. The response includes origin request policies in the list that occur after the marker. To get the next page of the list, set this field's value to the value of NextMarker from the current page's response.
    public var marker: Swift.String?
    /// The maximum number of origin request policies that you want in the response.
    public var maxItems: Swift.Int?
    /// A filter to return only the specified kinds of origin request policies. Valid values are:
    ///
    /// * managed – Returns only the managed policies created by Amazon Web Services.
    ///
    /// * custom – Returns only the custom policies created in your Amazon Web Services account.
    public var type: CloudFrontClientTypes.OriginRequestPolicyType?

    public init(
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        type: CloudFrontClientTypes.OriginRequestPolicyType? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
        self.type = type
    }
}

extension ListOriginRequestPoliciesOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> ListOriginRequestPoliciesOutput {
        let reader = responseReader
        var value = ListOriginRequestPoliciesOutput()
        value.originRequestPolicyList = try reader.read(readingClosure: CloudFrontClientTypes.OriginRequestPolicyList.readingClosure(from:))
        return value
    }
}

public struct ListOriginRequestPoliciesOutput: Swift.Equatable {
    /// A list of origin request policies.
    public var originRequestPolicyList: CloudFrontClientTypes.OriginRequestPolicyList?

    public init(
        originRequestPolicyList: CloudFrontClientTypes.OriginRequestPolicyList? = nil
    )
    {
        self.originRequestPolicyList = originRequestPolicyList
    }
}

enum ListOriginRequestPoliciesOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension ListPublicKeysInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let marker = marker {
                let markerQueryItem = ClientRuntime.URLQueryItem(name: "Marker".urlPercentEncoding(), value: Swift.String(marker).urlPercentEncoding())
                items.append(markerQueryItem)
            }
            if let maxItems = maxItems {
                let maxItemsQueryItem = ClientRuntime.URLQueryItem(name: "MaxItems".urlPercentEncoding(), value: Swift.String(maxItems).urlPercentEncoding())
                items.append(maxItemsQueryItem)
            }
            return items
        }
    }
}

extension ListPublicKeysInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2020-05-31/public-key"
    }
}

public struct ListPublicKeysInput: Swift.Equatable {
    /// Use this when paginating results to indicate where to begin in your list of public keys. The results include public keys in the list that occur after the marker. To get the next page of results, set the Marker to the value of the NextMarker from the current page's response (which is also the ID of the last public key on that page).
    public var marker: Swift.String?
    /// The maximum number of public keys you want in the response body.
    public var maxItems: Swift.Int?

    public init(
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
    }
}

extension ListPublicKeysOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> ListPublicKeysOutput {
        let reader = responseReader
        var value = ListPublicKeysOutput()
        value.publicKeyList = try reader.read(readingClosure: CloudFrontClientTypes.PublicKeyList.readingClosure(from:))
        return value
    }
}

public struct ListPublicKeysOutput: Swift.Equatable {
    /// Returns a list of all public keys that have been added to CloudFront for this account.
    public var publicKeyList: CloudFrontClientTypes.PublicKeyList?

    public init(
        publicKeyList: CloudFrontClientTypes.PublicKeyList? = nil
    )
    {
        self.publicKeyList = publicKeyList
    }
}

enum ListPublicKeysOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension ListRealtimeLogConfigsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let maxItems = maxItems {
                let maxItemsQueryItem = ClientRuntime.URLQueryItem(name: "MaxItems".urlPercentEncoding(), value: Swift.String(maxItems).urlPercentEncoding())
                items.append(maxItemsQueryItem)
            }
            if let marker = marker {
                let markerQueryItem = ClientRuntime.URLQueryItem(name: "Marker".urlPercentEncoding(), value: Swift.String(marker).urlPercentEncoding())
                items.append(markerQueryItem)
            }
            return items
        }
    }
}

extension ListRealtimeLogConfigsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2020-05-31/realtime-log-config"
    }
}

public struct ListRealtimeLogConfigsInput: Swift.Equatable {
    /// Use this field when paginating results to indicate where to begin in your list of real-time log configurations. The response includes real-time log configurations in the list that occur after the marker. To get the next page of the list, set this field's value to the value of NextMarker from the current page's response.
    public var marker: Swift.String?
    /// The maximum number of real-time log configurations that you want in the response.
    public var maxItems: Swift.Int?

    public init(
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
    }
}

extension ListRealtimeLogConfigsOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> ListRealtimeLogConfigsOutput {
        let reader = responseReader
        var value = ListRealtimeLogConfigsOutput()
        value.realtimeLogConfigs = try reader.read(readingClosure: CloudFrontClientTypes.RealtimeLogConfigs.readingClosure(from:))
        return value
    }
}

public struct ListRealtimeLogConfigsOutput: Swift.Equatable {
    /// A list of real-time log configurations.
    public var realtimeLogConfigs: CloudFrontClientTypes.RealtimeLogConfigs?

    public init(
        realtimeLogConfigs: CloudFrontClientTypes.RealtimeLogConfigs? = nil
    )
    {
        self.realtimeLogConfigs = realtimeLogConfigs
    }
}

enum ListRealtimeLogConfigsOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension ListResponseHeadersPoliciesInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let type = type {
                let typeQueryItem = ClientRuntime.URLQueryItem(name: "Type".urlPercentEncoding(), value: Swift.String(type.rawValue).urlPercentEncoding())
                items.append(typeQueryItem)
            }
            if let marker = marker {
                let markerQueryItem = ClientRuntime.URLQueryItem(name: "Marker".urlPercentEncoding(), value: Swift.String(marker).urlPercentEncoding())
                items.append(markerQueryItem)
            }
            if let maxItems = maxItems {
                let maxItemsQueryItem = ClientRuntime.URLQueryItem(name: "MaxItems".urlPercentEncoding(), value: Swift.String(maxItems).urlPercentEncoding())
                items.append(maxItemsQueryItem)
            }
            return items
        }
    }
}

extension ListResponseHeadersPoliciesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2020-05-31/response-headers-policy"
    }
}

public struct ListResponseHeadersPoliciesInput: Swift.Equatable {
    /// Use this field when paginating results to indicate where to begin in your list of response headers policies. The response includes response headers policies in the list that occur after the marker. To get the next page of the list, set this field's value to the value of NextMarker from the current page's response.
    public var marker: Swift.String?
    /// The maximum number of response headers policies that you want to get in the response.
    public var maxItems: Swift.Int?
    /// A filter to get only the specified kind of response headers policies. Valid values are:
    ///
    /// * managed – Gets only the managed policies created by Amazon Web Services.
    ///
    /// * custom – Gets only the custom policies created in your Amazon Web Services account.
    public var type: CloudFrontClientTypes.ResponseHeadersPolicyType?

    public init(
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        type: CloudFrontClientTypes.ResponseHeadersPolicyType? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
        self.type = type
    }
}

extension ListResponseHeadersPoliciesOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> ListResponseHeadersPoliciesOutput {
        let reader = responseReader
        var value = ListResponseHeadersPoliciesOutput()
        value.responseHeadersPolicyList = try reader.read(readingClosure: CloudFrontClientTypes.ResponseHeadersPolicyList.readingClosure(from:))
        return value
    }
}

public struct ListResponseHeadersPoliciesOutput: Swift.Equatable {
    /// A list of response headers policies.
    public var responseHeadersPolicyList: CloudFrontClientTypes.ResponseHeadersPolicyList?

    public init(
        responseHeadersPolicyList: CloudFrontClientTypes.ResponseHeadersPolicyList? = nil
    )
    {
        self.responseHeadersPolicyList = responseHeadersPolicyList
    }
}

enum ListResponseHeadersPoliciesOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension ListStreamingDistributionsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let marker = marker {
                let markerQueryItem = ClientRuntime.URLQueryItem(name: "Marker".urlPercentEncoding(), value: Swift.String(marker).urlPercentEncoding())
                items.append(markerQueryItem)
            }
            if let maxItems = maxItems {
                let maxItemsQueryItem = ClientRuntime.URLQueryItem(name: "MaxItems".urlPercentEncoding(), value: Swift.String(maxItems).urlPercentEncoding())
                items.append(maxItemsQueryItem)
            }
            return items
        }
    }
}

extension ListStreamingDistributionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2020-05-31/streaming-distribution"
    }
}

/// The request to list your streaming distributions.
public struct ListStreamingDistributionsInput: Swift.Equatable {
    /// The value that you provided for the Marker request parameter.
    public var marker: Swift.String?
    /// The value that you provided for the MaxItems request parameter.
    public var maxItems: Swift.Int?

    public init(
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
    }
}

extension ListStreamingDistributionsOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> ListStreamingDistributionsOutput {
        let reader = responseReader
        var value = ListStreamingDistributionsOutput()
        value.streamingDistributionList = try reader.read(readingClosure: CloudFrontClientTypes.StreamingDistributionList.readingClosure(from:))
        return value
    }
}

/// The returned result of the corresponding request.
public struct ListStreamingDistributionsOutput: Swift.Equatable {
    /// The StreamingDistributionList type.
    public var streamingDistributionList: CloudFrontClientTypes.StreamingDistributionList?

    public init(
        streamingDistributionList: CloudFrontClientTypes.StreamingDistributionList? = nil
    )
    {
        self.streamingDistributionList = streamingDistributionList
    }
}

enum ListStreamingDistributionsOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension ListTagsForResourceInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            guard let resource = resource else {
                let message = "Creating a URL Query Item failed. resource is required and must not be nil."
                throw ClientRuntime.ClientError.unknownError(message)
            }
            let resourceQueryItem = ClientRuntime.URLQueryItem(name: "Resource".urlPercentEncoding(), value: Swift.String(resource).urlPercentEncoding())
            items.append(resourceQueryItem)
            return items
        }
    }
}

extension ListTagsForResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2020-05-31/tagging"
    }
}

/// The request to list tags for a CloudFront resource.
public struct ListTagsForResourceInput: Swift.Equatable {
    /// An ARN of a CloudFront resource.
    /// This member is required.
    public var resource: Swift.String?

    public init(
        resource: Swift.String? = nil
    )
    {
        self.resource = resource
    }
}

extension ListTagsForResourceOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> ListTagsForResourceOutput {
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader.read(readingClosure: CloudFrontClientTypes.Tags.readingClosure(from:))
        return value
    }
}

/// The returned result of the corresponding request.
public struct ListTagsForResourceOutput: Swift.Equatable {
    /// A complex type that contains zero or more Tag elements.
    /// This member is required.
    public var tags: CloudFrontClientTypes.Tags?

    public init(
        tags: CloudFrontClientTypes.Tags? = nil
    )
    {
        self.tags = tags
    }
}

enum ListTagsForResourceOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension CloudFrontClientTypes.LoggingConfig {

    static func writingClosure(_ value: CloudFrontClientTypes.LoggingConfig?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Bucket"].write(value.bucket)
        try writer["Enabled"].write(value.enabled)
        try writer["IncludeCookies"].write(value.includeCookies)
        try writer["Prefix"].write(value.`prefix`)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.LoggingConfig {
        var value = CloudFrontClientTypes.LoggingConfig()
        value.enabled = try reader["Enabled"].readIfPresent()
        value.includeCookies = try reader["IncludeCookies"].readIfPresent()
        value.bucket = try reader["Bucket"].readIfPresent()
        value.`prefix` = try reader["Prefix"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// A complex type that controls whether access logs are written for the distribution.
    public struct LoggingConfig: Swift.Equatable {
        /// The Amazon S3 bucket to store the access logs in, for example, myawslogbucket.s3.amazonaws.com.
        /// This member is required.
        public var bucket: Swift.String?
        /// Specifies whether you want CloudFront to save access logs to an Amazon S3 bucket. If you don't want to enable logging when you create a distribution or if you want to disable logging for an existing distribution, specify false for Enabled, and specify empty Bucket and Prefix elements. If you specify false for Enabled but you specify values for Bucket, prefix, and IncludeCookies, the values are automatically deleted.
        /// This member is required.
        public var enabled: Swift.Bool?
        /// Specifies whether you want CloudFront to include cookies in access logs, specify true for IncludeCookies. If you choose to include cookies in logs, CloudFront logs all cookies regardless of how you configure the cache behaviors for this distribution. If you don't want to include cookies when you create a distribution or if you want to disable include cookies for an existing distribution, specify false for IncludeCookies.
        /// This member is required.
        public var includeCookies: Swift.Bool?
        /// An optional string that you want CloudFront to prefix to the access log filenames for this distribution, for example, myprefix/. If you want to enable logging, but you don't want to specify a prefix, you still must include an empty Prefix element in the Logging element.
        /// This member is required.
        public var `prefix`: Swift.String?

        public init(
            bucket: Swift.String? = nil,
            enabled: Swift.Bool? = nil,
            includeCookies: Swift.Bool? = nil,
            `prefix`: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.enabled = enabled
            self.includeCookies = includeCookies
            self.`prefix` = `prefix`
        }
    }

}

extension CloudFrontClientTypes {
    public enum Method: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case delete
        case `get`
        case head
        case options
        case patch
        case post
        case put
        case sdkUnknown(Swift.String)

        public static var allCases: [Method] {
            return [
                .delete,
                .get,
                .head,
                .options,
                .patch,
                .post,
                .put,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .delete: return "DELETE"
            case .get: return "GET"
            case .head: return "HEAD"
            case .options: return "OPTIONS"
            case .patch: return "PATCH"
            case .post: return "POST"
            case .put: return "PUT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Method(rawValue: rawValue) ?? Method.sdkUnknown(rawValue)
        }
    }
}

extension CloudFrontClientTypes {
    public enum MinimumProtocolVersion: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case sslv3
        case tlsv1
        case tlsv112016
        case tlsv12016
        case tlsv122018
        case tlsv122019
        case tlsv122021
        case sdkUnknown(Swift.String)

        public static var allCases: [MinimumProtocolVersion] {
            return [
                .sslv3,
                .tlsv1,
                .tlsv112016,
                .tlsv12016,
                .tlsv122018,
                .tlsv122019,
                .tlsv122021,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .sslv3: return "SSLv3"
            case .tlsv1: return "TLSv1"
            case .tlsv112016: return "TLSv1.1_2016"
            case .tlsv12016: return "TLSv1_2016"
            case .tlsv122018: return "TLSv1.2_2018"
            case .tlsv122019: return "TLSv1.2_2019"
            case .tlsv122021: return "TLSv1.2_2021"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MinimumProtocolVersion(rawValue: rawValue) ?? MinimumProtocolVersion.sdkUnknown(rawValue)
        }
    }
}

extension MissingBody {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> MissingBody {
        var value = MissingBody()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension MissingBody {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// This operation requires a body. Ensure that the body is present and the Content-Type header is set.
public struct MissingBody: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "MissingBody" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFrontClientTypes.MonitoringSubscription {

    static func writingClosure(_ value: CloudFrontClientTypes.MonitoringSubscription?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["RealtimeMetricsSubscriptionConfig"].write(value.realtimeMetricsSubscriptionConfig, writingClosure: CloudFrontClientTypes.RealtimeMetricsSubscriptionConfig.writingClosure(_:to:))
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.MonitoringSubscription {
        var value = CloudFrontClientTypes.MonitoringSubscription()
        value.realtimeMetricsSubscriptionConfig = try reader["RealtimeMetricsSubscriptionConfig"].readIfPresent(readingClosure: CloudFrontClientTypes.RealtimeMetricsSubscriptionConfig.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// A monitoring subscription. This structure contains information about whether additional CloudWatch metrics are enabled for a given CloudFront distribution.
    public struct MonitoringSubscription: Swift.Equatable {
        /// A subscription configuration for additional CloudWatch metrics.
        public var realtimeMetricsSubscriptionConfig: CloudFrontClientTypes.RealtimeMetricsSubscriptionConfig?

        public init(
            realtimeMetricsSubscriptionConfig: CloudFrontClientTypes.RealtimeMetricsSubscriptionConfig? = nil
        )
        {
            self.realtimeMetricsSubscriptionConfig = realtimeMetricsSubscriptionConfig
        }
    }

}

extension MonitoringSubscriptionAlreadyExists {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> MonitoringSubscriptionAlreadyExists {
        var value = MonitoringSubscriptionAlreadyExists()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension MonitoringSubscriptionAlreadyExists {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// A monitoring subscription already exists for the specified distribution.
public struct MonitoringSubscriptionAlreadyExists: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "MonitoringSubscriptionAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension NoSuchCachePolicy {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> NoSuchCachePolicy {
        var value = NoSuchCachePolicy()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension NoSuchCachePolicy {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The cache policy does not exist.
public struct NoSuchCachePolicy: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NoSuchCachePolicy" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension NoSuchCloudFrontOriginAccessIdentity {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> NoSuchCloudFrontOriginAccessIdentity {
        var value = NoSuchCloudFrontOriginAccessIdentity()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension NoSuchCloudFrontOriginAccessIdentity {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The specified origin access identity does not exist.
public struct NoSuchCloudFrontOriginAccessIdentity: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NoSuchCloudFrontOriginAccessIdentity" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension NoSuchContinuousDeploymentPolicy {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> NoSuchContinuousDeploymentPolicy {
        var value = NoSuchContinuousDeploymentPolicy()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension NoSuchContinuousDeploymentPolicy {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The continuous deployment policy doesn't exist.
public struct NoSuchContinuousDeploymentPolicy: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NoSuchContinuousDeploymentPolicy" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension NoSuchDistribution {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> NoSuchDistribution {
        var value = NoSuchDistribution()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension NoSuchDistribution {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The specified distribution does not exist.
public struct NoSuchDistribution: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NoSuchDistribution" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension NoSuchFieldLevelEncryptionConfig {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> NoSuchFieldLevelEncryptionConfig {
        var value = NoSuchFieldLevelEncryptionConfig()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension NoSuchFieldLevelEncryptionConfig {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The specified configuration for field-level encryption doesn't exist.
public struct NoSuchFieldLevelEncryptionConfig: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NoSuchFieldLevelEncryptionConfig" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension NoSuchFieldLevelEncryptionProfile {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> NoSuchFieldLevelEncryptionProfile {
        var value = NoSuchFieldLevelEncryptionProfile()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension NoSuchFieldLevelEncryptionProfile {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The specified profile for field-level encryption doesn't exist.
public struct NoSuchFieldLevelEncryptionProfile: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NoSuchFieldLevelEncryptionProfile" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension NoSuchFunctionExists {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> NoSuchFunctionExists {
        var value = NoSuchFunctionExists()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension NoSuchFunctionExists {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The function does not exist.
public struct NoSuchFunctionExists: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NoSuchFunctionExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension NoSuchInvalidation {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> NoSuchInvalidation {
        var value = NoSuchInvalidation()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension NoSuchInvalidation {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The specified invalidation does not exist.
public struct NoSuchInvalidation: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NoSuchInvalidation" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension NoSuchMonitoringSubscription {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> NoSuchMonitoringSubscription {
        var value = NoSuchMonitoringSubscription()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension NoSuchMonitoringSubscription {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// A monitoring subscription does not exist for the specified distribution.
public struct NoSuchMonitoringSubscription: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NoSuchMonitoringSubscription" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension NoSuchOrigin {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> NoSuchOrigin {
        var value = NoSuchOrigin()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension NoSuchOrigin {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// No origin exists with the specified Origin Id.
public struct NoSuchOrigin: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NoSuchOrigin" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension NoSuchOriginAccessControl {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> NoSuchOriginAccessControl {
        var value = NoSuchOriginAccessControl()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension NoSuchOriginAccessControl {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The origin access control does not exist.
public struct NoSuchOriginAccessControl: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NoSuchOriginAccessControl" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension NoSuchOriginRequestPolicy {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> NoSuchOriginRequestPolicy {
        var value = NoSuchOriginRequestPolicy()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension NoSuchOriginRequestPolicy {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The origin request policy does not exist.
public struct NoSuchOriginRequestPolicy: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NoSuchOriginRequestPolicy" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension NoSuchPublicKey {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> NoSuchPublicKey {
        var value = NoSuchPublicKey()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension NoSuchPublicKey {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The specified public key doesn't exist.
public struct NoSuchPublicKey: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NoSuchPublicKey" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension NoSuchRealtimeLogConfig {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> NoSuchRealtimeLogConfig {
        var value = NoSuchRealtimeLogConfig()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension NoSuchRealtimeLogConfig {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The real-time log configuration does not exist.
public struct NoSuchRealtimeLogConfig: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NoSuchRealtimeLogConfig" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension NoSuchResource {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> NoSuchResource {
        var value = NoSuchResource()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension NoSuchResource {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// A resource that was specified is not valid.
public struct NoSuchResource: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NoSuchResource" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension NoSuchResponseHeadersPolicy {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> NoSuchResponseHeadersPolicy {
        var value = NoSuchResponseHeadersPolicy()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension NoSuchResponseHeadersPolicy {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The response headers policy does not exist.
public struct NoSuchResponseHeadersPolicy: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NoSuchResponseHeadersPolicy" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension NoSuchStreamingDistribution {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> NoSuchStreamingDistribution {
        var value = NoSuchStreamingDistribution()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension NoSuchStreamingDistribution {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The specified streaming distribution does not exist.
public struct NoSuchStreamingDistribution: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NoSuchStreamingDistribution" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFrontClientTypes.Origin {

    static func writingClosure(_ value: CloudFrontClientTypes.Origin?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["ConnectionAttempts"].write(value.connectionAttempts)
        try writer["ConnectionTimeout"].write(value.connectionTimeout)
        try writer["CustomHeaders"].write(value.customHeaders, writingClosure: CloudFrontClientTypes.CustomHeaders.writingClosure(_:to:))
        try writer["CustomOriginConfig"].write(value.customOriginConfig, writingClosure: CloudFrontClientTypes.CustomOriginConfig.writingClosure(_:to:))
        try writer["DomainName"].write(value.domainName)
        try writer["Id"].write(value.id)
        try writer["OriginAccessControlId"].write(value.originAccessControlId)
        try writer["OriginPath"].write(value.originPath)
        try writer["OriginShield"].write(value.originShield, writingClosure: CloudFrontClientTypes.OriginShield.writingClosure(_:to:))
        try writer["S3OriginConfig"].write(value.s3OriginConfig, writingClosure: CloudFrontClientTypes.S3OriginConfig.writingClosure(_:to:))
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.Origin {
        var value = CloudFrontClientTypes.Origin()
        value.id = try reader["Id"].readIfPresent()
        value.domainName = try reader["DomainName"].readIfPresent()
        value.originPath = try reader["OriginPath"].readIfPresent()
        value.customHeaders = try reader["CustomHeaders"].readIfPresent(readingClosure: CloudFrontClientTypes.CustomHeaders.readingClosure(from:))
        value.s3OriginConfig = try reader["S3OriginConfig"].readIfPresent(readingClosure: CloudFrontClientTypes.S3OriginConfig.readingClosure(from:))
        value.customOriginConfig = try reader["CustomOriginConfig"].readIfPresent(readingClosure: CloudFrontClientTypes.CustomOriginConfig.readingClosure(from:))
        value.connectionAttempts = try reader["ConnectionAttempts"].readIfPresent()
        value.connectionTimeout = try reader["ConnectionTimeout"].readIfPresent()
        value.originShield = try reader["OriginShield"].readIfPresent(readingClosure: CloudFrontClientTypes.OriginShield.readingClosure(from:))
        value.originAccessControlId = try reader["OriginAccessControlId"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// An origin. An origin is the location where content is stored, and from which CloudFront gets content to serve to viewers. To specify an origin:
    ///
    /// * Use S3OriginConfig to specify an Amazon S3 bucket that is not configured with static website hosting.
    ///
    /// * Use CustomOriginConfig to specify all other kinds of origins, including:
    ///
    /// * An Amazon S3 bucket that is configured with static website hosting
    ///
    /// * An Elastic Load Balancing load balancer
    ///
    /// * An Elemental MediaPackage endpoint
    ///
    /// * An Elemental MediaStore container
    ///
    /// * Any other HTTP server, running on an Amazon EC2 instance or any other kind of host
    ///
    ///
    ///
    ///
    ///
    /// For the current maximum number of origins that you can specify per distribution, see [General Quotas on Web Distributions](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html#limits-web-distributions) in the Amazon CloudFront Developer Guide (quotas were formerly referred to as limits).
    public struct Origin: Swift.Equatable {
        /// The number of times that CloudFront attempts to connect to the origin. The minimum number is 1, the maximum is 3, and the default (if you don't specify otherwise) is 3. For a custom origin (including an Amazon S3 bucket that's configured with static website hosting), this value also specifies the number of times that CloudFront attempts to get a response from the origin, in the case of an [Origin Response Timeout](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesOriginResponseTimeout). For more information, see [Origin Connection Attempts](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#origin-connection-attempts) in the Amazon CloudFront Developer Guide.
        public var connectionAttempts: Swift.Int?
        /// The number of seconds that CloudFront waits when trying to establish a connection to the origin. The minimum timeout is 1 second, the maximum is 10 seconds, and the default (if you don't specify otherwise) is 10 seconds. For more information, see [Origin Connection Timeout](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#origin-connection-timeout) in the Amazon CloudFront Developer Guide.
        public var connectionTimeout: Swift.Int?
        /// A list of HTTP header names and values that CloudFront adds to the requests that it sends to the origin. For more information, see [Adding Custom Headers to Origin Requests](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/add-origin-custom-headers.html) in the Amazon CloudFront Developer Guide.
        public var customHeaders: CloudFrontClientTypes.CustomHeaders?
        /// Use this type to specify an origin that is not an Amazon S3 bucket, with one exception. If the Amazon S3 bucket is configured with static website hosting, use this type. If the Amazon S3 bucket is not configured with static website hosting, use the S3OriginConfig type instead.
        public var customOriginConfig: CloudFrontClientTypes.CustomOriginConfig?
        /// The domain name for the origin. For more information, see [Origin Domain Name](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesDomainName) in the Amazon CloudFront Developer Guide.
        /// This member is required.
        public var domainName: Swift.String?
        /// A unique identifier for the origin. This value must be unique within the distribution. Use this value to specify the TargetOriginId in a CacheBehavior or DefaultCacheBehavior.
        /// This member is required.
        public var id: Swift.String?
        /// The unique identifier of an origin access control for this origin. For more information, see [Restricting access to an Amazon S3 origin](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html) in the Amazon CloudFront Developer Guide.
        public var originAccessControlId: Swift.String?
        /// An optional path that CloudFront appends to the origin domain name when CloudFront requests content from the origin. For more information, see [Origin Path](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesOriginPath) in the Amazon CloudFront Developer Guide.
        public var originPath: Swift.String?
        /// CloudFront Origin Shield. Using Origin Shield can help reduce the load on your origin. For more information, see [Using Origin Shield](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/origin-shield.html) in the Amazon CloudFront Developer Guide.
        public var originShield: CloudFrontClientTypes.OriginShield?
        /// Use this type to specify an origin that is an Amazon S3 bucket that is not configured with static website hosting. To specify any other type of origin, including an Amazon S3 bucket that is configured with static website hosting, use the CustomOriginConfig type instead.
        public var s3OriginConfig: CloudFrontClientTypes.S3OriginConfig?

        public init(
            connectionAttempts: Swift.Int? = nil,
            connectionTimeout: Swift.Int? = nil,
            customHeaders: CloudFrontClientTypes.CustomHeaders? = nil,
            customOriginConfig: CloudFrontClientTypes.CustomOriginConfig? = nil,
            domainName: Swift.String? = nil,
            id: Swift.String? = nil,
            originAccessControlId: Swift.String? = nil,
            originPath: Swift.String? = nil,
            originShield: CloudFrontClientTypes.OriginShield? = nil,
            s3OriginConfig: CloudFrontClientTypes.S3OriginConfig? = nil
        )
        {
            self.connectionAttempts = connectionAttempts
            self.connectionTimeout = connectionTimeout
            self.customHeaders = customHeaders
            self.customOriginConfig = customOriginConfig
            self.domainName = domainName
            self.id = id
            self.originAccessControlId = originAccessControlId
            self.originPath = originPath
            self.originShield = originShield
            self.s3OriginConfig = s3OriginConfig
        }
    }

}

extension CloudFrontClientTypes.OriginAccessControl {

    static func writingClosure(_ value: CloudFrontClientTypes.OriginAccessControl?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Id"].write(value.id)
        try writer["OriginAccessControlConfig"].write(value.originAccessControlConfig, writingClosure: CloudFrontClientTypes.OriginAccessControlConfig.writingClosure(_:to:))
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.OriginAccessControl {
        var value = CloudFrontClientTypes.OriginAccessControl()
        value.id = try reader["Id"].readIfPresent()
        value.originAccessControlConfig = try reader["OriginAccessControlConfig"].readIfPresent(readingClosure: CloudFrontClientTypes.OriginAccessControlConfig.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// A CloudFront origin access control, including its unique identifier.
    public struct OriginAccessControl: Swift.Equatable {
        /// The unique identifier of the origin access control.
        /// This member is required.
        public var id: Swift.String?
        /// The origin access control.
        public var originAccessControlConfig: CloudFrontClientTypes.OriginAccessControlConfig?

        public init(
            id: Swift.String? = nil,
            originAccessControlConfig: CloudFrontClientTypes.OriginAccessControlConfig? = nil
        )
        {
            self.id = id
            self.originAccessControlConfig = originAccessControlConfig
        }
    }

}

extension OriginAccessControlAlreadyExists {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> OriginAccessControlAlreadyExists {
        var value = OriginAccessControlAlreadyExists()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension OriginAccessControlAlreadyExists {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// An origin access control with the specified parameters already exists.
public struct OriginAccessControlAlreadyExists: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "OriginAccessControlAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFrontClientTypes.OriginAccessControlConfig {

    static func writingClosure(_ value: CloudFrontClientTypes.OriginAccessControlConfig?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Description"].write(value.description)
        try writer["Name"].write(value.name)
        try writer["OriginAccessControlOriginType"].write(value.originAccessControlOriginType)
        try writer["SigningBehavior"].write(value.signingBehavior)
        try writer["SigningProtocol"].write(value.signingProtocol)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.OriginAccessControlConfig {
        var value = CloudFrontClientTypes.OriginAccessControlConfig()
        value.name = try reader["Name"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.signingProtocol = try reader["SigningProtocol"].readIfPresent()
        value.signingBehavior = try reader["SigningBehavior"].readIfPresent()
        value.originAccessControlOriginType = try reader["OriginAccessControlOriginType"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// A CloudFront origin access control configuration.
    public struct OriginAccessControlConfig: Swift.Equatable {
        /// A description of the origin access control.
        public var description: Swift.String?
        /// A name to identify the origin access control.
        /// This member is required.
        public var name: Swift.String?
        /// The type of origin that this origin access control is for.
        /// This member is required.
        public var originAccessControlOriginType: CloudFrontClientTypes.OriginAccessControlOriginTypes?
        /// Specifies which requests CloudFront signs (adds authentication information to). Specify always for the most common use case. For more information, see [origin access control advanced settings](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html#oac-advanced-settings) in the Amazon CloudFront Developer Guide. This field can have one of the following values:
        ///
        /// * always – CloudFront signs all origin requests, overwriting the Authorization header from the viewer request if one exists.
        ///
        /// * never – CloudFront doesn't sign any origin requests. This value turns off origin access control for all origins in all distributions that use this origin access control.
        ///
        /// * no-override – If the viewer request doesn't contain the Authorization header, then CloudFront signs the origin request. If the viewer request contains the Authorization header, then CloudFront doesn't sign the origin request and instead passes along the Authorization header from the viewer request. WARNING: To pass along the Authorization header from the viewer request, you must add the Authorization header to a [cache policy](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html) for all cache behaviors that use origins associated with this origin access control.
        /// This member is required.
        public var signingBehavior: CloudFrontClientTypes.OriginAccessControlSigningBehaviors?
        /// The signing protocol of the origin access control, which determines how CloudFront signs (authenticates) requests. The only valid value is sigv4.
        /// This member is required.
        public var signingProtocol: CloudFrontClientTypes.OriginAccessControlSigningProtocols?

        public init(
            description: Swift.String? = nil,
            name: Swift.String? = nil,
            originAccessControlOriginType: CloudFrontClientTypes.OriginAccessControlOriginTypes? = nil,
            signingBehavior: CloudFrontClientTypes.OriginAccessControlSigningBehaviors? = nil,
            signingProtocol: CloudFrontClientTypes.OriginAccessControlSigningProtocols? = nil
        )
        {
            self.description = description
            self.name = name
            self.originAccessControlOriginType = originAccessControlOriginType
            self.signingBehavior = signingBehavior
            self.signingProtocol = signingProtocol
        }
    }

}

extension OriginAccessControlInUse {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> OriginAccessControlInUse {
        var value = OriginAccessControlInUse()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension OriginAccessControlInUse {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// Cannot delete the origin access control because it's in use by one or more distributions.
public struct OriginAccessControlInUse: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "OriginAccessControlInUse" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFrontClientTypes.OriginAccessControlList {

    static func writingClosure(_ value: CloudFrontClientTypes.OriginAccessControlList?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["IsTruncated"].write(value.isTruncated)
        try writer["Items"].writeList(value.items, memberWritingClosure: CloudFrontClientTypes.OriginAccessControlSummary.writingClosure(_:to:), memberNodeInfo: "OriginAccessControlSummary", isFlattened: false)
        try writer["Marker"].write(value.marker)
        try writer["MaxItems"].write(value.maxItems)
        try writer["NextMarker"].write(value.nextMarker)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.OriginAccessControlList {
        var value = CloudFrontClientTypes.OriginAccessControlList()
        value.marker = try reader["Marker"].readIfPresent()
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.maxItems = try reader["MaxItems"].readIfPresent()
        value.isTruncated = try reader["IsTruncated"].readIfPresent()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: CloudFrontClientTypes.OriginAccessControlSummary.readingClosure(from:), memberNodeInfo: "OriginAccessControlSummary", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// A list of CloudFront origin access controls.
    public struct OriginAccessControlList: Swift.Equatable {
        /// If there are more items in the list than are in this response, this value is true.
        /// This member is required.
        public var isTruncated: Swift.Bool?
        /// Contains the origin access controls in the list.
        public var items: [CloudFrontClientTypes.OriginAccessControlSummary]?
        /// The value of the Marker field that was provided in the request.
        /// This member is required.
        public var marker: Swift.String?
        /// The maximum number of origin access controls requested.
        /// This member is required.
        public var maxItems: Swift.Int?
        /// If there are more items in the list than are in this response, this element is present. It contains the value to use in the Marker field of another request to continue listing origin access controls.
        public var nextMarker: Swift.String?
        /// The number of origin access controls returned in the response.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            isTruncated: Swift.Bool? = nil,
            items: [CloudFrontClientTypes.OriginAccessControlSummary]? = nil,
            marker: Swift.String? = nil,
            maxItems: Swift.Int? = nil,
            nextMarker: Swift.String? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.isTruncated = isTruncated
            self.items = items
            self.marker = marker
            self.maxItems = maxItems
            self.nextMarker = nextMarker
            self.quantity = quantity
        }
    }

}

extension CloudFrontClientTypes {
    public enum OriginAccessControlOriginTypes: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case mediastore
        case s3
        case sdkUnknown(Swift.String)

        public static var allCases: [OriginAccessControlOriginTypes] {
            return [
                .mediastore,
                .s3,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .mediastore: return "mediastore"
            case .s3: return "s3"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OriginAccessControlOriginTypes(rawValue: rawValue) ?? OriginAccessControlOriginTypes.sdkUnknown(rawValue)
        }
    }
}

extension CloudFrontClientTypes {
    public enum OriginAccessControlSigningBehaviors: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case always
        case never
        case noOverride
        case sdkUnknown(Swift.String)

        public static var allCases: [OriginAccessControlSigningBehaviors] {
            return [
                .always,
                .never,
                .noOverride,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .always: return "always"
            case .never: return "never"
            case .noOverride: return "no-override"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OriginAccessControlSigningBehaviors(rawValue: rawValue) ?? OriginAccessControlSigningBehaviors.sdkUnknown(rawValue)
        }
    }
}

extension CloudFrontClientTypes {
    public enum OriginAccessControlSigningProtocols: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case sigv4
        case sdkUnknown(Swift.String)

        public static var allCases: [OriginAccessControlSigningProtocols] {
            return [
                .sigv4,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .sigv4: return "sigv4"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OriginAccessControlSigningProtocols(rawValue: rawValue) ?? OriginAccessControlSigningProtocols.sdkUnknown(rawValue)
        }
    }
}

extension CloudFrontClientTypes.OriginAccessControlSummary {

    static func writingClosure(_ value: CloudFrontClientTypes.OriginAccessControlSummary?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Description"].write(value.description)
        try writer["Id"].write(value.id)
        try writer["Name"].write(value.name)
        try writer["OriginAccessControlOriginType"].write(value.originAccessControlOriginType)
        try writer["SigningBehavior"].write(value.signingBehavior)
        try writer["SigningProtocol"].write(value.signingProtocol)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.OriginAccessControlSummary {
        var value = CloudFrontClientTypes.OriginAccessControlSummary()
        value.id = try reader["Id"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.signingProtocol = try reader["SigningProtocol"].readIfPresent()
        value.signingBehavior = try reader["SigningBehavior"].readIfPresent()
        value.originAccessControlOriginType = try reader["OriginAccessControlOriginType"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// A CloudFront origin access control.
    public struct OriginAccessControlSummary: Swift.Equatable {
        /// A description of the origin access control.
        /// This member is required.
        public var description: Swift.String?
        /// The unique identifier of the origin access control.
        /// This member is required.
        public var id: Swift.String?
        /// A unique name that identifies the origin access control.
        /// This member is required.
        public var name: Swift.String?
        /// The type of origin that this origin access control is for.
        /// This member is required.
        public var originAccessControlOriginType: CloudFrontClientTypes.OriginAccessControlOriginTypes?
        /// A value that specifies which requests CloudFront signs (adds authentication information to). This field can have one of the following values:
        ///
        /// * never – CloudFront doesn't sign any origin requests.
        ///
        /// * always – CloudFront signs all origin requests, overwriting the Authorization header from the viewer request if necessary.
        ///
        /// * no-override – If the viewer request doesn't contain the Authorization header, CloudFront signs the origin request. If the viewer request contains the Authorization header, CloudFront doesn't sign the origin request, but instead passes along the Authorization header that it received in the viewer request.
        /// This member is required.
        public var signingBehavior: CloudFrontClientTypes.OriginAccessControlSigningBehaviors?
        /// The signing protocol of the origin access control. The signing protocol determines how CloudFront signs (authenticates) requests. The only valid value is sigv4.
        /// This member is required.
        public var signingProtocol: CloudFrontClientTypes.OriginAccessControlSigningProtocols?

        public init(
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            originAccessControlOriginType: CloudFrontClientTypes.OriginAccessControlOriginTypes? = nil,
            signingBehavior: CloudFrontClientTypes.OriginAccessControlSigningBehaviors? = nil,
            signingProtocol: CloudFrontClientTypes.OriginAccessControlSigningProtocols? = nil
        )
        {
            self.description = description
            self.id = id
            self.name = name
            self.originAccessControlOriginType = originAccessControlOriginType
            self.signingBehavior = signingBehavior
            self.signingProtocol = signingProtocol
        }
    }

}

extension CloudFrontClientTypes.OriginCustomHeader {

    static func writingClosure(_ value: CloudFrontClientTypes.OriginCustomHeader?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["HeaderName"].write(value.headerName)
        try writer["HeaderValue"].write(value.headerValue)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.OriginCustomHeader {
        var value = CloudFrontClientTypes.OriginCustomHeader()
        value.headerName = try reader["HeaderName"].readIfPresent()
        value.headerValue = try reader["HeaderValue"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes.OriginCustomHeader: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OriginCustomHeader(headerName: \(Swift.String(describing: headerName)), headerValue: \"CONTENT_REDACTED\")"}
}

extension CloudFrontClientTypes {
    /// A complex type that contains HeaderName and HeaderValue elements, if any, for this distribution.
    public struct OriginCustomHeader: Swift.Equatable {
        /// The name of a header that you want CloudFront to send to your origin. For more information, see [Adding Custom Headers to Origin Requests](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/forward-custom-headers.html) in the Amazon CloudFront Developer Guide.
        /// This member is required.
        public var headerName: Swift.String?
        /// The value for the header that you specified in the HeaderName field.
        /// This member is required.
        public var headerValue: Swift.String?

        public init(
            headerName: Swift.String? = nil,
            headerValue: Swift.String? = nil
        )
        {
            self.headerName = headerName
            self.headerValue = headerValue
        }
    }

}

extension CloudFrontClientTypes.OriginGroup {

    static func writingClosure(_ value: CloudFrontClientTypes.OriginGroup?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["FailoverCriteria"].write(value.failoverCriteria, writingClosure: CloudFrontClientTypes.OriginGroupFailoverCriteria.writingClosure(_:to:))
        try writer["Id"].write(value.id)
        try writer["Members"].write(value.members, writingClosure: CloudFrontClientTypes.OriginGroupMembers.writingClosure(_:to:))
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.OriginGroup {
        var value = CloudFrontClientTypes.OriginGroup()
        value.id = try reader["Id"].readIfPresent()
        value.failoverCriteria = try reader["FailoverCriteria"].readIfPresent(readingClosure: CloudFrontClientTypes.OriginGroupFailoverCriteria.readingClosure(from:))
        value.members = try reader["Members"].readIfPresent(readingClosure: CloudFrontClientTypes.OriginGroupMembers.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// An origin group includes two origins (a primary origin and a second origin to failover to) and a failover criteria that you specify. You create an origin group to support origin failover in CloudFront. When you create or update a distribution, you can specify the origin group instead of a single origin, and CloudFront will failover from the primary origin to the second origin under the failover conditions that you've chosen.
    public struct OriginGroup: Swift.Equatable {
        /// A complex type that contains information about the failover criteria for an origin group.
        /// This member is required.
        public var failoverCriteria: CloudFrontClientTypes.OriginGroupFailoverCriteria?
        /// The origin group's ID.
        /// This member is required.
        public var id: Swift.String?
        /// A complex type that contains information about the origins in an origin group.
        /// This member is required.
        public var members: CloudFrontClientTypes.OriginGroupMembers?

        public init(
            failoverCriteria: CloudFrontClientTypes.OriginGroupFailoverCriteria? = nil,
            id: Swift.String? = nil,
            members: CloudFrontClientTypes.OriginGroupMembers? = nil
        )
        {
            self.failoverCriteria = failoverCriteria
            self.id = id
            self.members = members
        }
    }

}

extension CloudFrontClientTypes.OriginGroupFailoverCriteria {

    static func writingClosure(_ value: CloudFrontClientTypes.OriginGroupFailoverCriteria?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["StatusCodes"].write(value.statusCodes, writingClosure: CloudFrontClientTypes.StatusCodes.writingClosure(_:to:))
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.OriginGroupFailoverCriteria {
        var value = CloudFrontClientTypes.OriginGroupFailoverCriteria()
        value.statusCodes = try reader["StatusCodes"].readIfPresent(readingClosure: CloudFrontClientTypes.StatusCodes.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// A complex data type that includes information about the failover criteria for an origin group, including the status codes for which CloudFront will failover from the primary origin to the second origin.
    public struct OriginGroupFailoverCriteria: Swift.Equatable {
        /// The status codes that, when returned from the primary origin, will trigger CloudFront to failover to the second origin.
        /// This member is required.
        public var statusCodes: CloudFrontClientTypes.StatusCodes?

        public init(
            statusCodes: CloudFrontClientTypes.StatusCodes? = nil
        )
        {
            self.statusCodes = statusCodes
        }
    }

}

extension CloudFrontClientTypes.OriginGroupMember {

    static func writingClosure(_ value: CloudFrontClientTypes.OriginGroupMember?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["OriginId"].write(value.originId)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.OriginGroupMember {
        var value = CloudFrontClientTypes.OriginGroupMember()
        value.originId = try reader["OriginId"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// An origin in an origin group.
    public struct OriginGroupMember: Swift.Equatable {
        /// The ID for an origin in an origin group.
        /// This member is required.
        public var originId: Swift.String?

        public init(
            originId: Swift.String? = nil
        )
        {
            self.originId = originId
        }
    }

}

extension CloudFrontClientTypes.OriginGroupMembers {

    static func writingClosure(_ value: CloudFrontClientTypes.OriginGroupMembers?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Items"].writeList(value.items, memberWritingClosure: CloudFrontClientTypes.OriginGroupMember.writingClosure(_:to:), memberNodeInfo: "OriginGroupMember", isFlattened: false)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.OriginGroupMembers {
        var value = CloudFrontClientTypes.OriginGroupMembers()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: CloudFrontClientTypes.OriginGroupMember.readingClosure(from:), memberNodeInfo: "OriginGroupMember", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// A complex data type for the origins included in an origin group.
    public struct OriginGroupMembers: Swift.Equatable {
        /// Items (origins) in an origin group.
        /// This member is required.
        public var items: [CloudFrontClientTypes.OriginGroupMember]?
        /// The number of origins in an origin group.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            items: [CloudFrontClientTypes.OriginGroupMember]? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.items = items
            self.quantity = quantity
        }
    }

}

extension CloudFrontClientTypes.OriginGroups {

    static func writingClosure(_ value: CloudFrontClientTypes.OriginGroups?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Items"].writeList(value.items, memberWritingClosure: CloudFrontClientTypes.OriginGroup.writingClosure(_:to:), memberNodeInfo: "OriginGroup", isFlattened: false)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.OriginGroups {
        var value = CloudFrontClientTypes.OriginGroups()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: CloudFrontClientTypes.OriginGroup.readingClosure(from:), memberNodeInfo: "OriginGroup", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// A complex data type for the origin groups specified for a distribution.
    public struct OriginGroups: Swift.Equatable {
        /// The items (origin groups) in a distribution.
        public var items: [CloudFrontClientTypes.OriginGroup]?
        /// The number of origin groups.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            items: [CloudFrontClientTypes.OriginGroup]? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.items = items
            self.quantity = quantity
        }
    }

}

extension CloudFrontClientTypes {
    public enum OriginProtocolPolicy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case httpOnly
        case httpsOnly
        case matchViewer
        case sdkUnknown(Swift.String)

        public static var allCases: [OriginProtocolPolicy] {
            return [
                .httpOnly,
                .httpsOnly,
                .matchViewer,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .httpOnly: return "http-only"
            case .httpsOnly: return "https-only"
            case .matchViewer: return "match-viewer"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OriginProtocolPolicy(rawValue: rawValue) ?? OriginProtocolPolicy.sdkUnknown(rawValue)
        }
    }
}

extension CloudFrontClientTypes.OriginRequestPolicy {

    static func writingClosure(_ value: CloudFrontClientTypes.OriginRequestPolicy?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Id"].write(value.id)
        try writer["LastModifiedTime"].writeTimestamp(value.lastModifiedTime, format: .dateTime)
        try writer["OriginRequestPolicyConfig"].write(value.originRequestPolicyConfig, writingClosure: CloudFrontClientTypes.OriginRequestPolicyConfig.writingClosure(_:to:))
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.OriginRequestPolicy {
        var value = CloudFrontClientTypes.OriginRequestPolicy()
        value.id = try reader["Id"].readIfPresent()
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: .dateTime)
        value.originRequestPolicyConfig = try reader["OriginRequestPolicyConfig"].readIfPresent(readingClosure: CloudFrontClientTypes.OriginRequestPolicyConfig.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// An origin request policy. When it's attached to a cache behavior, the origin request policy determines the values that CloudFront includes in requests that it sends to the origin. Each request that CloudFront sends to the origin includes the following:
    ///
    /// * The request body and the URL path (without the domain name) from the viewer request.
    ///
    /// * The headers that CloudFront automatically includes in every origin request, including Host, User-Agent, and X-Amz-Cf-Id.
    ///
    /// * All HTTP headers, cookies, and URL query strings that are specified in the cache policy or the origin request policy. These can include items from the viewer request and, in the case of headers, additional ones that are added by CloudFront.
    ///
    ///
    /// CloudFront sends a request when it can't find an object in its cache that matches the request. If you want to send values to the origin and also include them in the cache key, use CachePolicy.
    public struct OriginRequestPolicy: Swift.Equatable {
        /// The unique identifier for the origin request policy.
        /// This member is required.
        public var id: Swift.String?
        /// The date and time when the origin request policy was last modified.
        /// This member is required.
        public var lastModifiedTime: ClientRuntime.Date?
        /// The origin request policy configuration.
        /// This member is required.
        public var originRequestPolicyConfig: CloudFrontClientTypes.OriginRequestPolicyConfig?

        public init(
            id: Swift.String? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            originRequestPolicyConfig: CloudFrontClientTypes.OriginRequestPolicyConfig? = nil
        )
        {
            self.id = id
            self.lastModifiedTime = lastModifiedTime
            self.originRequestPolicyConfig = originRequestPolicyConfig
        }
    }

}

extension OriginRequestPolicyAlreadyExists {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> OriginRequestPolicyAlreadyExists {
        var value = OriginRequestPolicyAlreadyExists()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension OriginRequestPolicyAlreadyExists {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// An origin request policy with this name already exists. You must provide a unique name. To modify an existing origin request policy, use UpdateOriginRequestPolicy.
public struct OriginRequestPolicyAlreadyExists: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "OriginRequestPolicyAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFrontClientTypes.OriginRequestPolicyConfig {

    static func writingClosure(_ value: CloudFrontClientTypes.OriginRequestPolicyConfig?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Comment"].write(value.comment)
        try writer["CookiesConfig"].write(value.cookiesConfig, writingClosure: CloudFrontClientTypes.OriginRequestPolicyCookiesConfig.writingClosure(_:to:))
        try writer["HeadersConfig"].write(value.headersConfig, writingClosure: CloudFrontClientTypes.OriginRequestPolicyHeadersConfig.writingClosure(_:to:))
        try writer["Name"].write(value.name)
        try writer["QueryStringsConfig"].write(value.queryStringsConfig, writingClosure: CloudFrontClientTypes.OriginRequestPolicyQueryStringsConfig.writingClosure(_:to:))
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.OriginRequestPolicyConfig {
        var value = CloudFrontClientTypes.OriginRequestPolicyConfig()
        value.comment = try reader["Comment"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.headersConfig = try reader["HeadersConfig"].readIfPresent(readingClosure: CloudFrontClientTypes.OriginRequestPolicyHeadersConfig.readingClosure(from:))
        value.cookiesConfig = try reader["CookiesConfig"].readIfPresent(readingClosure: CloudFrontClientTypes.OriginRequestPolicyCookiesConfig.readingClosure(from:))
        value.queryStringsConfig = try reader["QueryStringsConfig"].readIfPresent(readingClosure: CloudFrontClientTypes.OriginRequestPolicyQueryStringsConfig.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// An origin request policy configuration. This configuration determines the values that CloudFront includes in requests that it sends to the origin. Each request that CloudFront sends to the origin includes the following:
    ///
    /// * The request body and the URL path (without the domain name) from the viewer request.
    ///
    /// * The headers that CloudFront automatically includes in every origin request, including Host, User-Agent, and X-Amz-Cf-Id.
    ///
    /// * All HTTP headers, cookies, and URL query strings that are specified in the cache policy or the origin request policy. These can include items from the viewer request and, in the case of headers, additional ones that are added by CloudFront.
    ///
    ///
    /// CloudFront sends a request when it can't find an object in its cache that matches the request. If you want to send values to the origin and also include them in the cache key, use CachePolicy.
    public struct OriginRequestPolicyConfig: Swift.Equatable {
        /// A comment to describe the origin request policy. The comment cannot be longer than 128 characters.
        public var comment: Swift.String?
        /// The cookies from viewer requests to include in origin requests.
        /// This member is required.
        public var cookiesConfig: CloudFrontClientTypes.OriginRequestPolicyCookiesConfig?
        /// The HTTP headers to include in origin requests. These can include headers from viewer requests and additional headers added by CloudFront.
        /// This member is required.
        public var headersConfig: CloudFrontClientTypes.OriginRequestPolicyHeadersConfig?
        /// A unique name to identify the origin request policy.
        /// This member is required.
        public var name: Swift.String?
        /// The URL query strings from viewer requests to include in origin requests.
        /// This member is required.
        public var queryStringsConfig: CloudFrontClientTypes.OriginRequestPolicyQueryStringsConfig?

        public init(
            comment: Swift.String? = nil,
            cookiesConfig: CloudFrontClientTypes.OriginRequestPolicyCookiesConfig? = nil,
            headersConfig: CloudFrontClientTypes.OriginRequestPolicyHeadersConfig? = nil,
            name: Swift.String? = nil,
            queryStringsConfig: CloudFrontClientTypes.OriginRequestPolicyQueryStringsConfig? = nil
        )
        {
            self.comment = comment
            self.cookiesConfig = cookiesConfig
            self.headersConfig = headersConfig
            self.name = name
            self.queryStringsConfig = queryStringsConfig
        }
    }

}

extension CloudFrontClientTypes {
    public enum OriginRequestPolicyCookieBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case all
        case allexcept
        case `none`
        case whitelist
        case sdkUnknown(Swift.String)

        public static var allCases: [OriginRequestPolicyCookieBehavior] {
            return [
                .all,
                .allexcept,
                .none,
                .whitelist,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .all: return "all"
            case .allexcept: return "allExcept"
            case .none: return "none"
            case .whitelist: return "whitelist"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OriginRequestPolicyCookieBehavior(rawValue: rawValue) ?? OriginRequestPolicyCookieBehavior.sdkUnknown(rawValue)
        }
    }
}

extension CloudFrontClientTypes.OriginRequestPolicyCookiesConfig {

    static func writingClosure(_ value: CloudFrontClientTypes.OriginRequestPolicyCookiesConfig?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["CookieBehavior"].write(value.cookieBehavior)
        try writer["Cookies"].write(value.cookies, writingClosure: CloudFrontClientTypes.CookieNames.writingClosure(_:to:))
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.OriginRequestPolicyCookiesConfig {
        var value = CloudFrontClientTypes.OriginRequestPolicyCookiesConfig()
        value.cookieBehavior = try reader["CookieBehavior"].readIfPresent()
        value.cookies = try reader["Cookies"].readIfPresent(readingClosure: CloudFrontClientTypes.CookieNames.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// An object that determines whether any cookies in viewer requests (and if so, which cookies) are included in requests that CloudFront sends to the origin.
    public struct OriginRequestPolicyCookiesConfig: Swift.Equatable {
        /// Determines whether cookies in viewer requests are included in requests that CloudFront sends to the origin. Valid values are:
        ///
        /// * none – No cookies in viewer requests are included in requests that CloudFront sends to the origin. Even when this field is set to none, any cookies that are listed in a CachePolicy are included in origin requests.
        ///
        /// * whitelist – Only the cookies in viewer requests that are listed in the CookieNames type are included in requests that CloudFront sends to the origin.
        ///
        /// * all – All cookies in viewer requests are included in requests that CloudFront sends to the origin.
        ///
        /// * allExcept – All cookies in viewer requests are included in requests that CloudFront sends to the origin, except for those listed in the CookieNames type, which are not included.
        /// This member is required.
        public var cookieBehavior: CloudFrontClientTypes.OriginRequestPolicyCookieBehavior?
        /// Contains a list of cookie names.
        public var cookies: CloudFrontClientTypes.CookieNames?

        public init(
            cookieBehavior: CloudFrontClientTypes.OriginRequestPolicyCookieBehavior? = nil,
            cookies: CloudFrontClientTypes.CookieNames? = nil
        )
        {
            self.cookieBehavior = cookieBehavior
            self.cookies = cookies
        }
    }

}

extension CloudFrontClientTypes {
    public enum OriginRequestPolicyHeaderBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case allexcept
        case allviewer
        case allviewerandwhitelistcloudfront
        case `none`
        case whitelist
        case sdkUnknown(Swift.String)

        public static var allCases: [OriginRequestPolicyHeaderBehavior] {
            return [
                .allexcept,
                .allviewer,
                .allviewerandwhitelistcloudfront,
                .none,
                .whitelist,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .allexcept: return "allExcept"
            case .allviewer: return "allViewer"
            case .allviewerandwhitelistcloudfront: return "allViewerAndWhitelistCloudFront"
            case .none: return "none"
            case .whitelist: return "whitelist"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OriginRequestPolicyHeaderBehavior(rawValue: rawValue) ?? OriginRequestPolicyHeaderBehavior.sdkUnknown(rawValue)
        }
    }
}

extension CloudFrontClientTypes.OriginRequestPolicyHeadersConfig {

    static func writingClosure(_ value: CloudFrontClientTypes.OriginRequestPolicyHeadersConfig?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["HeaderBehavior"].write(value.headerBehavior)
        try writer["Headers"].write(value.headers, writingClosure: CloudFrontClientTypes.Headers.writingClosure(_:to:))
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.OriginRequestPolicyHeadersConfig {
        var value = CloudFrontClientTypes.OriginRequestPolicyHeadersConfig()
        value.headerBehavior = try reader["HeaderBehavior"].readIfPresent()
        value.headers = try reader["Headers"].readIfPresent(readingClosure: CloudFrontClientTypes.Headers.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// An object that determines whether any HTTP headers (and if so, which headers) are included in requests that CloudFront sends to the origin.
    public struct OriginRequestPolicyHeadersConfig: Swift.Equatable {
        /// Determines whether any HTTP headers are included in requests that CloudFront sends to the origin. Valid values are:
        ///
        /// * none – No HTTP headers in viewer requests are included in requests that CloudFront sends to the origin. Even when this field is set to none, any headers that are listed in a CachePolicy are included in origin requests.
        ///
        /// * whitelist – Only the HTTP headers that are listed in the Headers type are included in requests that CloudFront sends to the origin.
        ///
        /// * allViewer – All HTTP headers in viewer requests are included in requests that CloudFront sends to the origin.
        ///
        /// * allViewerAndWhitelistCloudFront – All HTTP headers in viewer requests and the additional CloudFront headers that are listed in the Headers type are included in requests that CloudFront sends to the origin. The additional headers are added by CloudFront.
        ///
        /// * allExcept – All HTTP headers in viewer requests are included in requests that CloudFront sends to the origin, except for those listed in the Headers type, which are not included.
        /// This member is required.
        public var headerBehavior: CloudFrontClientTypes.OriginRequestPolicyHeaderBehavior?
        /// Contains a list of HTTP header names.
        public var headers: CloudFrontClientTypes.Headers?

        public init(
            headerBehavior: CloudFrontClientTypes.OriginRequestPolicyHeaderBehavior? = nil,
            headers: CloudFrontClientTypes.Headers? = nil
        )
        {
            self.headerBehavior = headerBehavior
            self.headers = headers
        }
    }

}

extension OriginRequestPolicyInUse {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> OriginRequestPolicyInUse {
        var value = OriginRequestPolicyInUse()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension OriginRequestPolicyInUse {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// Cannot delete the origin request policy because it is attached to one or more cache behaviors.
public struct OriginRequestPolicyInUse: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "OriginRequestPolicyInUse" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFrontClientTypes.OriginRequestPolicyList {

    static func writingClosure(_ value: CloudFrontClientTypes.OriginRequestPolicyList?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Items"].writeList(value.items, memberWritingClosure: CloudFrontClientTypes.OriginRequestPolicySummary.writingClosure(_:to:), memberNodeInfo: "OriginRequestPolicySummary", isFlattened: false)
        try writer["MaxItems"].write(value.maxItems)
        try writer["NextMarker"].write(value.nextMarker)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.OriginRequestPolicyList {
        var value = CloudFrontClientTypes.OriginRequestPolicyList()
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.maxItems = try reader["MaxItems"].readIfPresent()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: CloudFrontClientTypes.OriginRequestPolicySummary.readingClosure(from:), memberNodeInfo: "OriginRequestPolicySummary", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// A list of origin request policies.
    public struct OriginRequestPolicyList: Swift.Equatable {
        /// Contains the origin request policies in the list.
        public var items: [CloudFrontClientTypes.OriginRequestPolicySummary]?
        /// The maximum number of origin request policies requested.
        /// This member is required.
        public var maxItems: Swift.Int?
        /// If there are more items in the list than are in this response, this element is present. It contains the value that you should use in the Marker field of a subsequent request to continue listing origin request policies where you left off.
        public var nextMarker: Swift.String?
        /// The total number of origin request policies returned in the response.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            items: [CloudFrontClientTypes.OriginRequestPolicySummary]? = nil,
            maxItems: Swift.Int? = nil,
            nextMarker: Swift.String? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.items = items
            self.maxItems = maxItems
            self.nextMarker = nextMarker
            self.quantity = quantity
        }
    }

}

extension CloudFrontClientTypes {
    public enum OriginRequestPolicyQueryStringBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case all
        case allexcept
        case `none`
        case whitelist
        case sdkUnknown(Swift.String)

        public static var allCases: [OriginRequestPolicyQueryStringBehavior] {
            return [
                .all,
                .allexcept,
                .none,
                .whitelist,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .all: return "all"
            case .allexcept: return "allExcept"
            case .none: return "none"
            case .whitelist: return "whitelist"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OriginRequestPolicyQueryStringBehavior(rawValue: rawValue) ?? OriginRequestPolicyQueryStringBehavior.sdkUnknown(rawValue)
        }
    }
}

extension CloudFrontClientTypes.OriginRequestPolicyQueryStringsConfig {

    static func writingClosure(_ value: CloudFrontClientTypes.OriginRequestPolicyQueryStringsConfig?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["QueryStringBehavior"].write(value.queryStringBehavior)
        try writer["QueryStrings"].write(value.queryStrings, writingClosure: CloudFrontClientTypes.QueryStringNames.writingClosure(_:to:))
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.OriginRequestPolicyQueryStringsConfig {
        var value = CloudFrontClientTypes.OriginRequestPolicyQueryStringsConfig()
        value.queryStringBehavior = try reader["QueryStringBehavior"].readIfPresent()
        value.queryStrings = try reader["QueryStrings"].readIfPresent(readingClosure: CloudFrontClientTypes.QueryStringNames.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// An object that determines whether any URL query strings in viewer requests (and if so, which query strings) are included in requests that CloudFront sends to the origin.
    public struct OriginRequestPolicyQueryStringsConfig: Swift.Equatable {
        /// Determines whether any URL query strings in viewer requests are included in requests that CloudFront sends to the origin. Valid values are:
        ///
        /// * none – No query strings in viewer requests are included in requests that CloudFront sends to the origin. Even when this field is set to none, any query strings that are listed in a CachePolicy are included in origin requests.
        ///
        /// * whitelist – Only the query strings in viewer requests that are listed in the QueryStringNames type are included in requests that CloudFront sends to the origin.
        ///
        /// * all – All query strings in viewer requests are included in requests that CloudFront sends to the origin.
        ///
        /// * allExcept – All query strings in viewer requests are included in requests that CloudFront sends to the origin, except for those listed in the QueryStringNames type, which are not included.
        /// This member is required.
        public var queryStringBehavior: CloudFrontClientTypes.OriginRequestPolicyQueryStringBehavior?
        /// Contains the specific query strings in viewer requests that either are or are not included in requests that CloudFront sends to the origin. The behavior depends on whether the QueryStringBehavior field in the OriginRequestPolicyQueryStringsConfig type is set to whitelist (the listed query strings are included) or allExcept (the listed query strings are not included, but all other query strings are).
        public var queryStrings: CloudFrontClientTypes.QueryStringNames?

        public init(
            queryStringBehavior: CloudFrontClientTypes.OriginRequestPolicyQueryStringBehavior? = nil,
            queryStrings: CloudFrontClientTypes.QueryStringNames? = nil
        )
        {
            self.queryStringBehavior = queryStringBehavior
            self.queryStrings = queryStrings
        }
    }

}

extension CloudFrontClientTypes.OriginRequestPolicySummary {

    static func writingClosure(_ value: CloudFrontClientTypes.OriginRequestPolicySummary?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["OriginRequestPolicy"].write(value.originRequestPolicy, writingClosure: CloudFrontClientTypes.OriginRequestPolicy.writingClosure(_:to:))
        try writer["Type"].write(value.type)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.OriginRequestPolicySummary {
        var value = CloudFrontClientTypes.OriginRequestPolicySummary()
        value.type = try reader["Type"].readIfPresent()
        value.originRequestPolicy = try reader["OriginRequestPolicy"].readIfPresent(readingClosure: CloudFrontClientTypes.OriginRequestPolicy.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// Contains an origin request policy.
    public struct OriginRequestPolicySummary: Swift.Equatable {
        /// The origin request policy.
        /// This member is required.
        public var originRequestPolicy: CloudFrontClientTypes.OriginRequestPolicy?
        /// The type of origin request policy, either managed (created by Amazon Web Services) or custom (created in this Amazon Web Services account).
        /// This member is required.
        public var type: CloudFrontClientTypes.OriginRequestPolicyType?

        public init(
            originRequestPolicy: CloudFrontClientTypes.OriginRequestPolicy? = nil,
            type: CloudFrontClientTypes.OriginRequestPolicyType? = nil
        )
        {
            self.originRequestPolicy = originRequestPolicy
            self.type = type
        }
    }

}

extension CloudFrontClientTypes {
    public enum OriginRequestPolicyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case custom
        case managed
        case sdkUnknown(Swift.String)

        public static var allCases: [OriginRequestPolicyType] {
            return [
                .custom,
                .managed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .custom: return "custom"
            case .managed: return "managed"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OriginRequestPolicyType(rawValue: rawValue) ?? OriginRequestPolicyType.sdkUnknown(rawValue)
        }
    }
}

extension CloudFrontClientTypes.OriginShield {

    static func writingClosure(_ value: CloudFrontClientTypes.OriginShield?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Enabled"].write(value.enabled)
        try writer["OriginShieldRegion"].write(value.originShieldRegion)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.OriginShield {
        var value = CloudFrontClientTypes.OriginShield()
        value.enabled = try reader["Enabled"].readIfPresent()
        value.originShieldRegion = try reader["OriginShieldRegion"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// CloudFront Origin Shield. Using Origin Shield can help reduce the load on your origin. For more information, see [Using Origin Shield](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/origin-shield.html) in the Amazon CloudFront Developer Guide.
    public struct OriginShield: Swift.Equatable {
        /// A flag that specifies whether Origin Shield is enabled. When it's enabled, CloudFront routes all requests through Origin Shield, which can help protect your origin. When it's disabled, CloudFront might send requests directly to your origin from multiple edge locations or regional edge caches.
        /// This member is required.
        public var enabled: Swift.Bool?
        /// The Amazon Web Services Region for Origin Shield. Specify the Amazon Web Services Region that has the lowest latency to your origin. To specify a region, use the region code, not the region name. For example, specify the US East (Ohio) region as us-east-2. When you enable CloudFront Origin Shield, you must specify the Amazon Web Services Region for Origin Shield. For the list of Amazon Web Services Regions that you can specify, and for help choosing the best Region for your origin, see [Choosing the Amazon Web Services Region for Origin Shield](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/origin-shield.html#choose-origin-shield-region) in the Amazon CloudFront Developer Guide.
        public var originShieldRegion: Swift.String?

        public init(
            enabled: Swift.Bool? = nil,
            originShieldRegion: Swift.String? = nil
        )
        {
            self.enabled = enabled
            self.originShieldRegion = originShieldRegion
        }
    }

}

extension CloudFrontClientTypes.OriginSslProtocols {

    static func writingClosure(_ value: CloudFrontClientTypes.OriginSslProtocols?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Items"].writeList(value.items, memberWritingClosure: CloudFrontClientTypes.SslProtocol.writingClosure(_:to:), memberNodeInfo: "SslProtocol", isFlattened: false)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.OriginSslProtocols {
        var value = CloudFrontClientTypes.OriginSslProtocols()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: CloudFrontClientTypes.SslProtocol.readingClosure(from:), memberNodeInfo: "SslProtocol", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// A complex type that contains information about the SSL/TLS protocols that CloudFront can use when establishing an HTTPS connection with your origin.
    public struct OriginSslProtocols: Swift.Equatable {
        /// A list that contains allowed SSL/TLS protocols for this distribution.
        /// This member is required.
        public var items: [CloudFrontClientTypes.SslProtocol]?
        /// The number of SSL/TLS protocols that you want to allow CloudFront to use when establishing an HTTPS connection with this origin.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            items: [CloudFrontClientTypes.SslProtocol]? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.items = items
            self.quantity = quantity
        }
    }

}

extension CloudFrontClientTypes.Origins {

    static func writingClosure(_ value: CloudFrontClientTypes.Origins?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Items"].writeList(value.items, memberWritingClosure: CloudFrontClientTypes.Origin.writingClosure(_:to:), memberNodeInfo: "Origin", isFlattened: false)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.Origins {
        var value = CloudFrontClientTypes.Origins()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: CloudFrontClientTypes.Origin.readingClosure(from:), memberNodeInfo: "Origin", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// Contains information about the origins for this distribution.
    public struct Origins: Swift.Equatable {
        /// A list of origins.
        /// This member is required.
        public var items: [CloudFrontClientTypes.Origin]?
        /// The number of origins for this distribution.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            items: [CloudFrontClientTypes.Origin]? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.items = items
            self.quantity = quantity
        }
    }

}

extension CloudFrontClientTypes.ParametersInCacheKeyAndForwardedToOrigin {

    static func writingClosure(_ value: CloudFrontClientTypes.ParametersInCacheKeyAndForwardedToOrigin?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["CookiesConfig"].write(value.cookiesConfig, writingClosure: CloudFrontClientTypes.CachePolicyCookiesConfig.writingClosure(_:to:))
        try writer["EnableAcceptEncodingBrotli"].write(value.enableAcceptEncodingBrotli)
        try writer["EnableAcceptEncodingGzip"].write(value.enableAcceptEncodingGzip)
        try writer["HeadersConfig"].write(value.headersConfig, writingClosure: CloudFrontClientTypes.CachePolicyHeadersConfig.writingClosure(_:to:))
        try writer["QueryStringsConfig"].write(value.queryStringsConfig, writingClosure: CloudFrontClientTypes.CachePolicyQueryStringsConfig.writingClosure(_:to:))
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.ParametersInCacheKeyAndForwardedToOrigin {
        var value = CloudFrontClientTypes.ParametersInCacheKeyAndForwardedToOrigin()
        value.enableAcceptEncodingGzip = try reader["EnableAcceptEncodingGzip"].readIfPresent()
        value.enableAcceptEncodingBrotli = try reader["EnableAcceptEncodingBrotli"].readIfPresent()
        value.headersConfig = try reader["HeadersConfig"].readIfPresent(readingClosure: CloudFrontClientTypes.CachePolicyHeadersConfig.readingClosure(from:))
        value.cookiesConfig = try reader["CookiesConfig"].readIfPresent(readingClosure: CloudFrontClientTypes.CachePolicyCookiesConfig.readingClosure(from:))
        value.queryStringsConfig = try reader["QueryStringsConfig"].readIfPresent(readingClosure: CloudFrontClientTypes.CachePolicyQueryStringsConfig.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// This object determines the values that CloudFront includes in the cache key. These values can include HTTP headers, cookies, and URL query strings. CloudFront uses the cache key to find an object in its cache that it can return to the viewer. The headers, cookies, and query strings that are included in the cache key are also included in requests that CloudFront sends to the origin. CloudFront sends a request when it can't find an object in its cache that matches the request's cache key. If you want to send values to the origin but not include them in the cache key, use OriginRequestPolicy.
    public struct ParametersInCacheKeyAndForwardedToOrigin: Swift.Equatable {
        /// An object that determines whether any cookies in viewer requests (and if so, which cookies) are included in the cache key and in requests that CloudFront sends to the origin.
        /// This member is required.
        public var cookiesConfig: CloudFrontClientTypes.CachePolicyCookiesConfig?
        /// A flag that can affect whether the Accept-Encoding HTTP header is included in the cache key and included in requests that CloudFront sends to the origin. This field is related to the EnableAcceptEncodingGzip field. If one or both of these fields is true and the viewer request includes the Accept-Encoding header, then CloudFront does the following:
        ///
        /// * Normalizes the value of the viewer's Accept-Encoding header
        ///
        /// * Includes the normalized header in the cache key
        ///
        /// * Includes the normalized header in the request to the origin, if a request is necessary
        ///
        ///
        /// For more information, see [Compression support](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-policy-compressed-objects) in the Amazon CloudFront Developer Guide. If you set this value to true, and this cache behavior also has an origin request policy attached, do not include the Accept-Encoding header in the origin request policy. CloudFront always includes the Accept-Encoding header in origin requests when the value of this field is true, so including this header in an origin request policy has no effect. If both of these fields are false, then CloudFront treats the Accept-Encoding header the same as any other HTTP header in the viewer request. By default, it's not included in the cache key and it's not included in origin requests. In this case, you can manually add Accept-Encoding to the headers whitelist like any other HTTP header.
        public var enableAcceptEncodingBrotli: Swift.Bool?
        /// A flag that can affect whether the Accept-Encoding HTTP header is included in the cache key and included in requests that CloudFront sends to the origin. This field is related to the EnableAcceptEncodingBrotli field. If one or both of these fields is true and the viewer request includes the Accept-Encoding header, then CloudFront does the following:
        ///
        /// * Normalizes the value of the viewer's Accept-Encoding header
        ///
        /// * Includes the normalized header in the cache key
        ///
        /// * Includes the normalized header in the request to the origin, if a request is necessary
        ///
        ///
        /// For more information, see [Compression support](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-policy-compressed-objects) in the Amazon CloudFront Developer Guide. If you set this value to true, and this cache behavior also has an origin request policy attached, do not include the Accept-Encoding header in the origin request policy. CloudFront always includes the Accept-Encoding header in origin requests when the value of this field is true, so including this header in an origin request policy has no effect. If both of these fields are false, then CloudFront treats the Accept-Encoding header the same as any other HTTP header in the viewer request. By default, it's not included in the cache key and it's not included in origin requests. In this case, you can manually add Accept-Encoding to the headers whitelist like any other HTTP header.
        /// This member is required.
        public var enableAcceptEncodingGzip: Swift.Bool?
        /// An object that determines whether any HTTP headers (and if so, which headers) are included in the cache key and in requests that CloudFront sends to the origin.
        /// This member is required.
        public var headersConfig: CloudFrontClientTypes.CachePolicyHeadersConfig?
        /// An object that determines whether any URL query strings in viewer requests (and if so, which query strings) are included in the cache key and in requests that CloudFront sends to the origin.
        /// This member is required.
        public var queryStringsConfig: CloudFrontClientTypes.CachePolicyQueryStringsConfig?

        public init(
            cookiesConfig: CloudFrontClientTypes.CachePolicyCookiesConfig? = nil,
            enableAcceptEncodingBrotli: Swift.Bool? = nil,
            enableAcceptEncodingGzip: Swift.Bool? = nil,
            headersConfig: CloudFrontClientTypes.CachePolicyHeadersConfig? = nil,
            queryStringsConfig: CloudFrontClientTypes.CachePolicyQueryStringsConfig? = nil
        )
        {
            self.cookiesConfig = cookiesConfig
            self.enableAcceptEncodingBrotli = enableAcceptEncodingBrotli
            self.enableAcceptEncodingGzip = enableAcceptEncodingGzip
            self.headersConfig = headersConfig
            self.queryStringsConfig = queryStringsConfig
        }
    }

}

extension CloudFrontClientTypes.Paths {

    static func writingClosure(_ value: CloudFrontClientTypes.Paths?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Items"].writeList(value.items, memberWritingClosure: Swift.String.writingClosure(_:to:), memberNodeInfo: "Path", isFlattened: false)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.Paths {
        var value = CloudFrontClientTypes.Paths()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure(from:), memberNodeInfo: "Path", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// A complex type that contains information about the objects that you want to invalidate. For more information, see [Specifying the Objects to Invalidate](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Invalidation.html#invalidation-specifying-objects) in the Amazon CloudFront Developer Guide.
    public struct Paths: Swift.Equatable {
        /// A complex type that contains a list of the paths that you want to invalidate.
        public var items: [Swift.String]?
        /// The number of invalidation paths specified for the objects that you want to invalidate.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            items: [Swift.String]? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.items = items
            self.quantity = quantity
        }
    }

}

extension PreconditionFailed {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> PreconditionFailed {
        var value = PreconditionFailed()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension PreconditionFailed {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The precondition in one or more of the request fields evaluated to false.
public struct PreconditionFailed: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "PreconditionFailed" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFrontClientTypes {
    public enum PriceClass: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case priceclass100
        case priceclass200
        case priceclassAll
        case sdkUnknown(Swift.String)

        public static var allCases: [PriceClass] {
            return [
                .priceclass100,
                .priceclass200,
                .priceclassAll,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .priceclass100: return "PriceClass_100"
            case .priceclass200: return "PriceClass_200"
            case .priceclassAll: return "PriceClass_All"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PriceClass(rawValue: rawValue) ?? PriceClass.sdkUnknown(rawValue)
        }
    }
}

extension CloudFrontClientTypes.PublicKey {

    static func writingClosure(_ value: CloudFrontClientTypes.PublicKey?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["CreatedTime"].writeTimestamp(value.createdTime, format: .dateTime)
        try writer["Id"].write(value.id)
        try writer["PublicKeyConfig"].write(value.publicKeyConfig, writingClosure: CloudFrontClientTypes.PublicKeyConfig.writingClosure(_:to:))
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.PublicKey {
        var value = CloudFrontClientTypes.PublicKey()
        value.id = try reader["Id"].readIfPresent()
        value.createdTime = try reader["CreatedTime"].readTimestampIfPresent(format: .dateTime)
        value.publicKeyConfig = try reader["PublicKeyConfig"].readIfPresent(readingClosure: CloudFrontClientTypes.PublicKeyConfig.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// A public key that you can use with [signed URLs and signed cookies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html), or with [field-level encryption](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/field-level-encryption.html).
    public struct PublicKey: Swift.Equatable {
        /// The date and time when the public key was uploaded.
        /// This member is required.
        public var createdTime: ClientRuntime.Date?
        /// The identifier of the public key.
        /// This member is required.
        public var id: Swift.String?
        /// Configuration information about a public key that you can use with [signed URLs and signed cookies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html), or with [field-level encryption](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/field-level-encryption.html).
        /// This member is required.
        public var publicKeyConfig: CloudFrontClientTypes.PublicKeyConfig?

        public init(
            createdTime: ClientRuntime.Date? = nil,
            id: Swift.String? = nil,
            publicKeyConfig: CloudFrontClientTypes.PublicKeyConfig? = nil
        )
        {
            self.createdTime = createdTime
            self.id = id
            self.publicKeyConfig = publicKeyConfig
        }
    }

}

extension PublicKeyAlreadyExists {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> PublicKeyAlreadyExists {
        var value = PublicKeyAlreadyExists()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension PublicKeyAlreadyExists {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The specified public key already exists.
public struct PublicKeyAlreadyExists: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "PublicKeyAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFrontClientTypes.PublicKeyConfig {

    static func writingClosure(_ value: CloudFrontClientTypes.PublicKeyConfig?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["CallerReference"].write(value.callerReference)
        try writer["Comment"].write(value.comment)
        try writer["EncodedKey"].write(value.encodedKey)
        try writer["Name"].write(value.name)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.PublicKeyConfig {
        var value = CloudFrontClientTypes.PublicKeyConfig()
        value.callerReference = try reader["CallerReference"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.encodedKey = try reader["EncodedKey"].readIfPresent()
        value.comment = try reader["Comment"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// Configuration information about a public key that you can use with [signed URLs and signed cookies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html), or with [field-level encryption](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/field-level-encryption.html).
    public struct PublicKeyConfig: Swift.Equatable {
        /// A string included in the request to help make sure that the request can't be replayed.
        /// This member is required.
        public var callerReference: Swift.String?
        /// A comment to describe the public key. The comment cannot be longer than 128 characters.
        public var comment: Swift.String?
        /// The public key that you can use with [signed URLs and signed cookies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html), or with [field-level encryption](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/field-level-encryption.html).
        /// This member is required.
        public var encodedKey: Swift.String?
        /// A name to help identify the public key.
        /// This member is required.
        public var name: Swift.String?

        public init(
            callerReference: Swift.String? = nil,
            comment: Swift.String? = nil,
            encodedKey: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.callerReference = callerReference
            self.comment = comment
            self.encodedKey = encodedKey
            self.name = name
        }
    }

}

extension PublicKeyInUse {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> PublicKeyInUse {
        var value = PublicKeyInUse()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension PublicKeyInUse {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The specified public key is in use.
public struct PublicKeyInUse: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "PublicKeyInUse" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFrontClientTypes.PublicKeyList {

    static func writingClosure(_ value: CloudFrontClientTypes.PublicKeyList?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Items"].writeList(value.items, memberWritingClosure: CloudFrontClientTypes.PublicKeySummary.writingClosure(_:to:), memberNodeInfo: "PublicKeySummary", isFlattened: false)
        try writer["MaxItems"].write(value.maxItems)
        try writer["NextMarker"].write(value.nextMarker)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.PublicKeyList {
        var value = CloudFrontClientTypes.PublicKeyList()
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.maxItems = try reader["MaxItems"].readIfPresent()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: CloudFrontClientTypes.PublicKeySummary.readingClosure(from:), memberNodeInfo: "PublicKeySummary", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// A list of public keys that you can use with [signed URLs and signed cookies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html), or with [field-level encryption](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/field-level-encryption.html).
    public struct PublicKeyList: Swift.Equatable {
        /// A list of public keys.
        public var items: [CloudFrontClientTypes.PublicKeySummary]?
        /// The maximum number of public keys you want in the response.
        /// This member is required.
        public var maxItems: Swift.Int?
        /// If there are more elements to be listed, this element is present and contains the value that you can use for the Marker request parameter to continue listing your public keys where you left off.
        public var nextMarker: Swift.String?
        /// The number of public keys in the list.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            items: [CloudFrontClientTypes.PublicKeySummary]? = nil,
            maxItems: Swift.Int? = nil,
            nextMarker: Swift.String? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.items = items
            self.maxItems = maxItems
            self.nextMarker = nextMarker
            self.quantity = quantity
        }
    }

}

extension CloudFrontClientTypes.PublicKeySummary {

    static func writingClosure(_ value: CloudFrontClientTypes.PublicKeySummary?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Comment"].write(value.comment)
        try writer["CreatedTime"].writeTimestamp(value.createdTime, format: .dateTime)
        try writer["EncodedKey"].write(value.encodedKey)
        try writer["Id"].write(value.id)
        try writer["Name"].write(value.name)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.PublicKeySummary {
        var value = CloudFrontClientTypes.PublicKeySummary()
        value.id = try reader["Id"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.createdTime = try reader["CreatedTime"].readTimestampIfPresent(format: .dateTime)
        value.encodedKey = try reader["EncodedKey"].readIfPresent()
        value.comment = try reader["Comment"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// Contains information about a public key.
    public struct PublicKeySummary: Swift.Equatable {
        /// A comment to describe the public key. The comment cannot be longer than 128 characters.
        public var comment: Swift.String?
        /// The date and time when the public key was uploaded.
        /// This member is required.
        public var createdTime: ClientRuntime.Date?
        /// The public key.
        /// This member is required.
        public var encodedKey: Swift.String?
        /// The identifier of the public key.
        /// This member is required.
        public var id: Swift.String?
        /// A name to help identify the public key.
        /// This member is required.
        public var name: Swift.String?

        public init(
            comment: Swift.String? = nil,
            createdTime: ClientRuntime.Date? = nil,
            encodedKey: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.comment = comment
            self.createdTime = createdTime
            self.encodedKey = encodedKey
            self.id = id
            self.name = name
        }
    }

}

extension PublishFunctionInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let ifMatch = ifMatch {
            items.add(Header(name: "If-Match", value: Swift.String(ifMatch)))
        }
        return items
    }
}

extension PublishFunctionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let name = name else {
            return nil
        }
        return "/2020-05-31/function/\(name.urlPercentEncoding())/publish"
    }
}

public struct PublishFunctionInput: Swift.Equatable {
    /// The current version (ETag value) of the function that you are publishing, which you can get using DescribeFunction.
    /// This member is required.
    public var ifMatch: Swift.String?
    /// The name of the function that you are publishing.
    /// This member is required.
    public var name: Swift.String?

    public init(
        ifMatch: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.ifMatch = ifMatch
        self.name = name
    }
}

extension PublishFunctionOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> PublishFunctionOutput {
        let reader = responseReader
        var value = PublishFunctionOutput()
        value.functionSummary = try reader.read(readingClosure: CloudFrontClientTypes.FunctionSummary.readingClosure(from:))
        return value
    }
}

public struct PublishFunctionOutput: Swift.Equatable {
    /// Contains configuration information and metadata about a CloudFront function.
    public var functionSummary: CloudFrontClientTypes.FunctionSummary?

    public init(
        functionSummary: CloudFrontClientTypes.FunctionSummary? = nil
    )
    {
        self.functionSummary = functionSummary
    }
}

enum PublishFunctionOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension CloudFrontClientTypes.QueryArgProfile {

    static func writingClosure(_ value: CloudFrontClientTypes.QueryArgProfile?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["ProfileId"].write(value.profileId)
        try writer["QueryArg"].write(value.queryArg)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.QueryArgProfile {
        var value = CloudFrontClientTypes.QueryArgProfile()
        value.queryArg = try reader["QueryArg"].readIfPresent()
        value.profileId = try reader["ProfileId"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// Query argument-profile mapping for field-level encryption.
    public struct QueryArgProfile: Swift.Equatable {
        /// ID of profile to use for field-level encryption query argument-profile mapping
        /// This member is required.
        public var profileId: Swift.String?
        /// Query argument for field-level encryption query argument-profile mapping.
        /// This member is required.
        public var queryArg: Swift.String?

        public init(
            profileId: Swift.String? = nil,
            queryArg: Swift.String? = nil
        )
        {
            self.profileId = profileId
            self.queryArg = queryArg
        }
    }

}

extension CloudFrontClientTypes.QueryArgProfileConfig {

    static func writingClosure(_ value: CloudFrontClientTypes.QueryArgProfileConfig?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["ForwardWhenQueryArgProfileIsUnknown"].write(value.forwardWhenQueryArgProfileIsUnknown)
        try writer["QueryArgProfiles"].write(value.queryArgProfiles, writingClosure: CloudFrontClientTypes.QueryArgProfiles.writingClosure(_:to:))
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.QueryArgProfileConfig {
        var value = CloudFrontClientTypes.QueryArgProfileConfig()
        value.forwardWhenQueryArgProfileIsUnknown = try reader["ForwardWhenQueryArgProfileIsUnknown"].readIfPresent()
        value.queryArgProfiles = try reader["QueryArgProfiles"].readIfPresent(readingClosure: CloudFrontClientTypes.QueryArgProfiles.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// Configuration for query argument-profile mapping for field-level encryption.
    public struct QueryArgProfileConfig: Swift.Equatable {
        /// Flag to set if you want a request to be forwarded to the origin even if the profile specified by the field-level encryption query argument, fle-profile, is unknown.
        /// This member is required.
        public var forwardWhenQueryArgProfileIsUnknown: Swift.Bool?
        /// Profiles specified for query argument-profile mapping for field-level encryption.
        public var queryArgProfiles: CloudFrontClientTypes.QueryArgProfiles?

        public init(
            forwardWhenQueryArgProfileIsUnknown: Swift.Bool? = nil,
            queryArgProfiles: CloudFrontClientTypes.QueryArgProfiles? = nil
        )
        {
            self.forwardWhenQueryArgProfileIsUnknown = forwardWhenQueryArgProfileIsUnknown
            self.queryArgProfiles = queryArgProfiles
        }
    }

}

extension QueryArgProfileEmpty {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> QueryArgProfileEmpty {
        var value = QueryArgProfileEmpty()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension QueryArgProfileEmpty {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// No profile specified for the field-level encryption query argument.
public struct QueryArgProfileEmpty: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "QueryArgProfileEmpty" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFrontClientTypes.QueryArgProfiles {

    static func writingClosure(_ value: CloudFrontClientTypes.QueryArgProfiles?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Items"].writeList(value.items, memberWritingClosure: CloudFrontClientTypes.QueryArgProfile.writingClosure(_:to:), memberNodeInfo: "QueryArgProfile", isFlattened: false)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.QueryArgProfiles {
        var value = CloudFrontClientTypes.QueryArgProfiles()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: CloudFrontClientTypes.QueryArgProfile.readingClosure(from:), memberNodeInfo: "QueryArgProfile", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// Query argument-profile mapping for field-level encryption.
    public struct QueryArgProfiles: Swift.Equatable {
        /// Number of items for query argument-profile mapping for field-level encryption.
        public var items: [CloudFrontClientTypes.QueryArgProfile]?
        /// Number of profiles for query argument-profile mapping for field-level encryption.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            items: [CloudFrontClientTypes.QueryArgProfile]? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.items = items
            self.quantity = quantity
        }
    }

}

extension CloudFrontClientTypes.QueryStringCacheKeys {

    static func writingClosure(_ value: CloudFrontClientTypes.QueryStringCacheKeys?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Items"].writeList(value.items, memberWritingClosure: Swift.String.writingClosure(_:to:), memberNodeInfo: "Name", isFlattened: false)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.QueryStringCacheKeys {
        var value = CloudFrontClientTypes.QueryStringCacheKeys()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure(from:), memberNodeInfo: "Name", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field. If you want to include query strings in the cache key, use QueryStringsConfig in a cache policy. See CachePolicy. If you want to send query strings to the origin but not include them in the cache key, use QueryStringsConfig in an origin request policy. See OriginRequestPolicy. A complex type that contains information about the query string parameters that you want CloudFront to use for caching for a cache behavior.
    public struct QueryStringCacheKeys: Swift.Equatable {
        /// A list that contains the query string parameters that you want CloudFront to use as a basis for caching for a cache behavior. If Quantity is 0, you can omit Items.
        public var items: [Swift.String]?
        /// The number of whitelisted query string parameters for a cache behavior.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            items: [Swift.String]? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.items = items
            self.quantity = quantity
        }
    }

}

extension CloudFrontClientTypes.QueryStringNames {

    static func writingClosure(_ value: CloudFrontClientTypes.QueryStringNames?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Items"].writeList(value.items, memberWritingClosure: Swift.String.writingClosure(_:to:), memberNodeInfo: "Name", isFlattened: false)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.QueryStringNames {
        var value = CloudFrontClientTypes.QueryStringNames()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure(from:), memberNodeInfo: "Name", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// Contains a list of query string names.
    public struct QueryStringNames: Swift.Equatable {
        /// A list of query string names.
        public var items: [Swift.String]?
        /// The number of query string names in the Items list.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            items: [Swift.String]? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.items = items
            self.quantity = quantity
        }
    }

}

extension CloudFrontClientTypes.RealtimeLogConfig {

    static func writingClosure(_ value: CloudFrontClientTypes.RealtimeLogConfig?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["ARN"].write(value.arn)
        try writer["EndPoints"].writeList(value.endPoints, memberWritingClosure: CloudFrontClientTypes.EndPoint.writingClosure(_:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Fields"].writeList(value.fields, memberWritingClosure: Swift.String.writingClosure(_:to:), memberNodeInfo: "Field", isFlattened: false)
        try writer["Name"].write(value.name)
        try writer["SamplingRate"].write(value.samplingRate)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.RealtimeLogConfig {
        var value = CloudFrontClientTypes.RealtimeLogConfig()
        value.arn = try reader["ARN"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.samplingRate = try reader["SamplingRate"].readIfPresent()
        value.endPoints = try reader["EndPoints"].readListIfPresent(memberReadingClosure: CloudFrontClientTypes.EndPoint.readingClosure(from:), memberNodeInfo: "member", isFlattened: false)
        value.fields = try reader["Fields"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure(from:), memberNodeInfo: "Field", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// A real-time log configuration.
    public struct RealtimeLogConfig: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of this real-time log configuration.
        /// This member is required.
        public var arn: Swift.String?
        /// Contains information about the Amazon Kinesis data stream where you are sending real-time log data for this real-time log configuration.
        /// This member is required.
        public var endPoints: [CloudFrontClientTypes.EndPoint]?
        /// A list of fields that are included in each real-time log record. In an API response, the fields are provided in the same order in which they are sent to the Amazon Kinesis data stream. For more information about fields, see [Real-time log configuration fields](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/real-time-logs.html#understand-real-time-log-config-fields) in the Amazon CloudFront Developer Guide.
        /// This member is required.
        public var fields: [Swift.String]?
        /// The unique name of this real-time log configuration.
        /// This member is required.
        public var name: Swift.String?
        /// The sampling rate for this real-time log configuration. The sampling rate determines the percentage of viewer requests that are represented in the real-time log data. The sampling rate is an integer between 1 and 100, inclusive.
        /// This member is required.
        public var samplingRate: Swift.Int?

        public init(
            arn: Swift.String? = nil,
            endPoints: [CloudFrontClientTypes.EndPoint]? = nil,
            fields: [Swift.String]? = nil,
            name: Swift.String? = nil,
            samplingRate: Swift.Int? = nil
        )
        {
            self.arn = arn
            self.endPoints = endPoints
            self.fields = fields
            self.name = name
            self.samplingRate = samplingRate
        }
    }

}

extension RealtimeLogConfigAlreadyExists {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> RealtimeLogConfigAlreadyExists {
        var value = RealtimeLogConfigAlreadyExists()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension RealtimeLogConfigAlreadyExists {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// A real-time log configuration with this name already exists. You must provide a unique name. To modify an existing real-time log configuration, use UpdateRealtimeLogConfig.
public struct RealtimeLogConfigAlreadyExists: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "RealtimeLogConfigAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RealtimeLogConfigInUse {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> RealtimeLogConfigInUse {
        var value = RealtimeLogConfigInUse()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension RealtimeLogConfigInUse {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// Cannot delete the real-time log configuration because it is attached to one or more cache behaviors.
public struct RealtimeLogConfigInUse: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "RealtimeLogConfigInUse" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension RealtimeLogConfigOwnerMismatch {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> RealtimeLogConfigOwnerMismatch {
        var value = RealtimeLogConfigOwnerMismatch()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension RealtimeLogConfigOwnerMismatch {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The specified real-time log configuration belongs to a different Amazon Web Services account.
public struct RealtimeLogConfigOwnerMismatch: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "RealtimeLogConfigOwnerMismatch" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFrontClientTypes.RealtimeLogConfigs {

    static func writingClosure(_ value: CloudFrontClientTypes.RealtimeLogConfigs?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["IsTruncated"].write(value.isTruncated)
        try writer["Items"].writeList(value.items, memberWritingClosure: CloudFrontClientTypes.RealtimeLogConfig.writingClosure(_:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Marker"].write(value.marker)
        try writer["MaxItems"].write(value.maxItems)
        try writer["NextMarker"].write(value.nextMarker)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.RealtimeLogConfigs {
        var value = CloudFrontClientTypes.RealtimeLogConfigs()
        value.maxItems = try reader["MaxItems"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: CloudFrontClientTypes.RealtimeLogConfig.readingClosure(from:), memberNodeInfo: "member", isFlattened: false)
        value.isTruncated = try reader["IsTruncated"].readIfPresent()
        value.marker = try reader["Marker"].readIfPresent()
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// A list of real-time log configurations.
    public struct RealtimeLogConfigs: Swift.Equatable {
        /// A flag that indicates whether there are more real-time log configurations than are contained in this list.
        /// This member is required.
        public var isTruncated: Swift.Bool?
        /// Contains the list of real-time log configurations.
        public var items: [CloudFrontClientTypes.RealtimeLogConfig]?
        /// This parameter indicates where this list of real-time log configurations begins. This list includes real-time log configurations that occur after the marker.
        /// This member is required.
        public var marker: Swift.String?
        /// The maximum number of real-time log configurations requested.
        /// This member is required.
        public var maxItems: Swift.Int?
        /// If there are more items in the list than are in this response, this element is present. It contains the value that you should use in the Marker field of a subsequent request to continue listing real-time log configurations where you left off.
        public var nextMarker: Swift.String?

        public init(
            isTruncated: Swift.Bool? = nil,
            items: [CloudFrontClientTypes.RealtimeLogConfig]? = nil,
            marker: Swift.String? = nil,
            maxItems: Swift.Int? = nil,
            nextMarker: Swift.String? = nil
        )
        {
            self.isTruncated = isTruncated
            self.items = items
            self.marker = marker
            self.maxItems = maxItems
            self.nextMarker = nextMarker
        }
    }

}

extension CloudFrontClientTypes.RealtimeMetricsSubscriptionConfig {

    static func writingClosure(_ value: CloudFrontClientTypes.RealtimeMetricsSubscriptionConfig?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["RealtimeMetricsSubscriptionStatus"].write(value.realtimeMetricsSubscriptionStatus)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.RealtimeMetricsSubscriptionConfig {
        var value = CloudFrontClientTypes.RealtimeMetricsSubscriptionConfig()
        value.realtimeMetricsSubscriptionStatus = try reader["RealtimeMetricsSubscriptionStatus"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// A subscription configuration for additional CloudWatch metrics.
    public struct RealtimeMetricsSubscriptionConfig: Swift.Equatable {
        /// A flag that indicates whether additional CloudWatch metrics are enabled for a given CloudFront distribution.
        /// This member is required.
        public var realtimeMetricsSubscriptionStatus: CloudFrontClientTypes.RealtimeMetricsSubscriptionStatus?

        public init(
            realtimeMetricsSubscriptionStatus: CloudFrontClientTypes.RealtimeMetricsSubscriptionStatus? = nil
        )
        {
            self.realtimeMetricsSubscriptionStatus = realtimeMetricsSubscriptionStatus
        }
    }

}

extension CloudFrontClientTypes {
    public enum RealtimeMetricsSubscriptionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [RealtimeMetricsSubscriptionStatus] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RealtimeMetricsSubscriptionStatus(rawValue: rawValue) ?? RealtimeMetricsSubscriptionStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFrontClientTypes {
    public enum ReferrerPolicyList: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case noReferrer
        case noReferrerWhenDowngrade
        case origin
        case originWhenCrossOrigin
        case sameOrigin
        case strictOrigin
        case strictOriginWhenCrossOrigin
        case unsafeUrl
        case sdkUnknown(Swift.String)

        public static var allCases: [ReferrerPolicyList] {
            return [
                .noReferrer,
                .noReferrerWhenDowngrade,
                .origin,
                .originWhenCrossOrigin,
                .sameOrigin,
                .strictOrigin,
                .strictOriginWhenCrossOrigin,
                .unsafeUrl,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .noReferrer: return "no-referrer"
            case .noReferrerWhenDowngrade: return "no-referrer-when-downgrade"
            case .origin: return "origin"
            case .originWhenCrossOrigin: return "origin-when-cross-origin"
            case .sameOrigin: return "same-origin"
            case .strictOrigin: return "strict-origin"
            case .strictOriginWhenCrossOrigin: return "strict-origin-when-cross-origin"
            case .unsafeUrl: return "unsafe-url"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReferrerPolicyList(rawValue: rawValue) ?? ReferrerPolicyList.sdkUnknown(rawValue)
        }
    }
}

extension ResourceInUse {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> ResourceInUse {
        var value = ResourceInUse()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension ResourceInUse {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// Cannot delete this resource because it is in use.
public struct ResourceInUse: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceInUse" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFrontClientTypes.ResponseHeadersPolicy {

    static func writingClosure(_ value: CloudFrontClientTypes.ResponseHeadersPolicy?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Id"].write(value.id)
        try writer["LastModifiedTime"].writeTimestamp(value.lastModifiedTime, format: .dateTime)
        try writer["ResponseHeadersPolicyConfig"].write(value.responseHeadersPolicyConfig, writingClosure: CloudFrontClientTypes.ResponseHeadersPolicyConfig.writingClosure(_:to:))
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.ResponseHeadersPolicy {
        var value = CloudFrontClientTypes.ResponseHeadersPolicy()
        value.id = try reader["Id"].readIfPresent()
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: .dateTime)
        value.responseHeadersPolicyConfig = try reader["ResponseHeadersPolicyConfig"].readIfPresent(readingClosure: CloudFrontClientTypes.ResponseHeadersPolicyConfig.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// A response headers policy. A response headers policy contains information about a set of HTTP response headers. After you create a response headers policy, you can use its ID to attach it to one or more cache behaviors in a CloudFront distribution. When it's attached to a cache behavior, the response headers policy affects the HTTP headers that CloudFront includes in HTTP responses to requests that match the cache behavior. CloudFront adds or removes response headers according to the configuration of the response headers policy. For more information, see [Adding or removing HTTP headers in CloudFront responses](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/modifying-response-headers.html) in the Amazon CloudFront Developer Guide.
    public struct ResponseHeadersPolicy: Swift.Equatable {
        /// The identifier for the response headers policy.
        /// This member is required.
        public var id: Swift.String?
        /// The date and time when the response headers policy was last modified.
        /// This member is required.
        public var lastModifiedTime: ClientRuntime.Date?
        /// A response headers policy configuration.
        /// This member is required.
        public var responseHeadersPolicyConfig: CloudFrontClientTypes.ResponseHeadersPolicyConfig?

        public init(
            id: Swift.String? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            responseHeadersPolicyConfig: CloudFrontClientTypes.ResponseHeadersPolicyConfig? = nil
        )
        {
            self.id = id
            self.lastModifiedTime = lastModifiedTime
            self.responseHeadersPolicyConfig = responseHeadersPolicyConfig
        }
    }

}

extension CloudFrontClientTypes.ResponseHeadersPolicyAccessControlAllowHeaders {

    static func writingClosure(_ value: CloudFrontClientTypes.ResponseHeadersPolicyAccessControlAllowHeaders?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Items"].writeList(value.items, memberWritingClosure: Swift.String.writingClosure(_:to:), memberNodeInfo: "Header", isFlattened: false)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.ResponseHeadersPolicyAccessControlAllowHeaders {
        var value = CloudFrontClientTypes.ResponseHeadersPolicyAccessControlAllowHeaders()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure(from:), memberNodeInfo: "Header", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// A list of HTTP header names that CloudFront includes as values for the Access-Control-Allow-Headers HTTP response header. For more information about the Access-Control-Allow-Headers HTTP response header, see [Access-Control-Allow-Headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Headers) in the MDN Web Docs.
    public struct ResponseHeadersPolicyAccessControlAllowHeaders: Swift.Equatable {
        /// The list of HTTP header names. You can specify * to allow all headers.
        /// This member is required.
        public var items: [Swift.String]?
        /// The number of HTTP header names in the list.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            items: [Swift.String]? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.items = items
            self.quantity = quantity
        }
    }

}

extension CloudFrontClientTypes.ResponseHeadersPolicyAccessControlAllowMethods {

    static func writingClosure(_ value: CloudFrontClientTypes.ResponseHeadersPolicyAccessControlAllowMethods?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Items"].writeList(value.items, memberWritingClosure: CloudFrontClientTypes.ResponseHeadersPolicyAccessControlAllowMethodsValues.writingClosure(_:to:), memberNodeInfo: "Method", isFlattened: false)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.ResponseHeadersPolicyAccessControlAllowMethods {
        var value = CloudFrontClientTypes.ResponseHeadersPolicyAccessControlAllowMethods()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: CloudFrontClientTypes.ResponseHeadersPolicyAccessControlAllowMethodsValues.readingClosure(from:), memberNodeInfo: "Method", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// A list of HTTP methods that CloudFront includes as values for the Access-Control-Allow-Methods HTTP response header. For more information about the Access-Control-Allow-Methods HTTP response header, see [Access-Control-Allow-Methods](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Methods) in the MDN Web Docs.
    public struct ResponseHeadersPolicyAccessControlAllowMethods: Swift.Equatable {
        /// The list of HTTP methods. Valid values are:
        ///
        /// * GET
        ///
        /// * DELETE
        ///
        /// * HEAD
        ///
        /// * OPTIONS
        ///
        /// * PATCH
        ///
        /// * POST
        ///
        /// * PUT
        ///
        /// * ALL
        ///
        ///
        /// ALL is a special value that includes all of the listed HTTP methods.
        /// This member is required.
        public var items: [CloudFrontClientTypes.ResponseHeadersPolicyAccessControlAllowMethodsValues]?
        /// The number of HTTP methods in the list.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            items: [CloudFrontClientTypes.ResponseHeadersPolicyAccessControlAllowMethodsValues]? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.items = items
            self.quantity = quantity
        }
    }

}

extension CloudFrontClientTypes {
    public enum ResponseHeadersPolicyAccessControlAllowMethodsValues: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case all
        case delete
        case `get`
        case head
        case options
        case patch
        case post
        case put
        case sdkUnknown(Swift.String)

        public static var allCases: [ResponseHeadersPolicyAccessControlAllowMethodsValues] {
            return [
                .all,
                .delete,
                .get,
                .head,
                .options,
                .patch,
                .post,
                .put,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case .delete: return "DELETE"
            case .get: return "GET"
            case .head: return "HEAD"
            case .options: return "OPTIONS"
            case .patch: return "PATCH"
            case .post: return "POST"
            case .put: return "PUT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResponseHeadersPolicyAccessControlAllowMethodsValues(rawValue: rawValue) ?? ResponseHeadersPolicyAccessControlAllowMethodsValues.sdkUnknown(rawValue)
        }
    }
}

extension CloudFrontClientTypes.ResponseHeadersPolicyAccessControlAllowOrigins {

    static func writingClosure(_ value: CloudFrontClientTypes.ResponseHeadersPolicyAccessControlAllowOrigins?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Items"].writeList(value.items, memberWritingClosure: Swift.String.writingClosure(_:to:), memberNodeInfo: "Origin", isFlattened: false)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.ResponseHeadersPolicyAccessControlAllowOrigins {
        var value = CloudFrontClientTypes.ResponseHeadersPolicyAccessControlAllowOrigins()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure(from:), memberNodeInfo: "Origin", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// A list of origins (domain names) that CloudFront can use as the value for the Access-Control-Allow-Origin HTTP response header. For more information about the Access-Control-Allow-Origin HTTP response header, see [Access-Control-Allow-Origin](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin) in the MDN Web Docs.
    public struct ResponseHeadersPolicyAccessControlAllowOrigins: Swift.Equatable {
        /// The list of origins (domain names). You can specify * to allow all origins.
        /// This member is required.
        public var items: [Swift.String]?
        /// The number of origins in the list.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            items: [Swift.String]? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.items = items
            self.quantity = quantity
        }
    }

}

extension CloudFrontClientTypes.ResponseHeadersPolicyAccessControlExposeHeaders {

    static func writingClosure(_ value: CloudFrontClientTypes.ResponseHeadersPolicyAccessControlExposeHeaders?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Items"].writeList(value.items, memberWritingClosure: Swift.String.writingClosure(_:to:), memberNodeInfo: "Header", isFlattened: false)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.ResponseHeadersPolicyAccessControlExposeHeaders {
        var value = CloudFrontClientTypes.ResponseHeadersPolicyAccessControlExposeHeaders()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure(from:), memberNodeInfo: "Header", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// A list of HTTP headers that CloudFront includes as values for the Access-Control-Expose-Headers HTTP response header. For more information about the Access-Control-Expose-Headers HTTP response header, see [Access-Control-Expose-Headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Expose-Headers) in the MDN Web Docs.
    public struct ResponseHeadersPolicyAccessControlExposeHeaders: Swift.Equatable {
        /// The list of HTTP headers. You can specify * to expose all headers.
        public var items: [Swift.String]?
        /// The number of HTTP headers in the list.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            items: [Swift.String]? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.items = items
            self.quantity = quantity
        }
    }

}

extension ResponseHeadersPolicyAlreadyExists {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> ResponseHeadersPolicyAlreadyExists {
        var value = ResponseHeadersPolicyAlreadyExists()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension ResponseHeadersPolicyAlreadyExists {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// A response headers policy with this name already exists. You must provide a unique name. To modify an existing response headers policy, use UpdateResponseHeadersPolicy.
public struct ResponseHeadersPolicyAlreadyExists: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResponseHeadersPolicyAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFrontClientTypes.ResponseHeadersPolicyConfig {

    static func writingClosure(_ value: CloudFrontClientTypes.ResponseHeadersPolicyConfig?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Comment"].write(value.comment)
        try writer["CorsConfig"].write(value.corsConfig, writingClosure: CloudFrontClientTypes.ResponseHeadersPolicyCorsConfig.writingClosure(_:to:))
        try writer["CustomHeadersConfig"].write(value.customHeadersConfig, writingClosure: CloudFrontClientTypes.ResponseHeadersPolicyCustomHeadersConfig.writingClosure(_:to:))
        try writer["Name"].write(value.name)
        try writer["RemoveHeadersConfig"].write(value.removeHeadersConfig, writingClosure: CloudFrontClientTypes.ResponseHeadersPolicyRemoveHeadersConfig.writingClosure(_:to:))
        try writer["SecurityHeadersConfig"].write(value.securityHeadersConfig, writingClosure: CloudFrontClientTypes.ResponseHeadersPolicySecurityHeadersConfig.writingClosure(_:to:))
        try writer["ServerTimingHeadersConfig"].write(value.serverTimingHeadersConfig, writingClosure: CloudFrontClientTypes.ResponseHeadersPolicyServerTimingHeadersConfig.writingClosure(_:to:))
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.ResponseHeadersPolicyConfig {
        var value = CloudFrontClientTypes.ResponseHeadersPolicyConfig()
        value.comment = try reader["Comment"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.corsConfig = try reader["CorsConfig"].readIfPresent(readingClosure: CloudFrontClientTypes.ResponseHeadersPolicyCorsConfig.readingClosure(from:))
        value.securityHeadersConfig = try reader["SecurityHeadersConfig"].readIfPresent(readingClosure: CloudFrontClientTypes.ResponseHeadersPolicySecurityHeadersConfig.readingClosure(from:))
        value.serverTimingHeadersConfig = try reader["ServerTimingHeadersConfig"].readIfPresent(readingClosure: CloudFrontClientTypes.ResponseHeadersPolicyServerTimingHeadersConfig.readingClosure(from:))
        value.customHeadersConfig = try reader["CustomHeadersConfig"].readIfPresent(readingClosure: CloudFrontClientTypes.ResponseHeadersPolicyCustomHeadersConfig.readingClosure(from:))
        value.removeHeadersConfig = try reader["RemoveHeadersConfig"].readIfPresent(readingClosure: CloudFrontClientTypes.ResponseHeadersPolicyRemoveHeadersConfig.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// A response headers policy configuration. A response headers policy configuration contains metadata about the response headers policy, and configurations for sets of HTTP response headers.
    public struct ResponseHeadersPolicyConfig: Swift.Equatable {
        /// A comment to describe the response headers policy. The comment cannot be longer than 128 characters.
        public var comment: Swift.String?
        /// A configuration for a set of HTTP response headers that are used for cross-origin resource sharing (CORS).
        public var corsConfig: CloudFrontClientTypes.ResponseHeadersPolicyCorsConfig?
        /// A configuration for a set of custom HTTP response headers.
        public var customHeadersConfig: CloudFrontClientTypes.ResponseHeadersPolicyCustomHeadersConfig?
        /// A name to identify the response headers policy. The name must be unique for response headers policies in this Amazon Web Services account.
        /// This member is required.
        public var name: Swift.String?
        /// A configuration for a set of HTTP headers to remove from the HTTP response.
        public var removeHeadersConfig: CloudFrontClientTypes.ResponseHeadersPolicyRemoveHeadersConfig?
        /// A configuration for a set of security-related HTTP response headers.
        public var securityHeadersConfig: CloudFrontClientTypes.ResponseHeadersPolicySecurityHeadersConfig?
        /// A configuration for enabling the Server-Timing header in HTTP responses sent from CloudFront.
        public var serverTimingHeadersConfig: CloudFrontClientTypes.ResponseHeadersPolicyServerTimingHeadersConfig?

        public init(
            comment: Swift.String? = nil,
            corsConfig: CloudFrontClientTypes.ResponseHeadersPolicyCorsConfig? = nil,
            customHeadersConfig: CloudFrontClientTypes.ResponseHeadersPolicyCustomHeadersConfig? = nil,
            name: Swift.String? = nil,
            removeHeadersConfig: CloudFrontClientTypes.ResponseHeadersPolicyRemoveHeadersConfig? = nil,
            securityHeadersConfig: CloudFrontClientTypes.ResponseHeadersPolicySecurityHeadersConfig? = nil,
            serverTimingHeadersConfig: CloudFrontClientTypes.ResponseHeadersPolicyServerTimingHeadersConfig? = nil
        )
        {
            self.comment = comment
            self.corsConfig = corsConfig
            self.customHeadersConfig = customHeadersConfig
            self.name = name
            self.removeHeadersConfig = removeHeadersConfig
            self.securityHeadersConfig = securityHeadersConfig
            self.serverTimingHeadersConfig = serverTimingHeadersConfig
        }
    }

}

extension CloudFrontClientTypes.ResponseHeadersPolicyContentSecurityPolicy {

    static func writingClosure(_ value: CloudFrontClientTypes.ResponseHeadersPolicyContentSecurityPolicy?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["ContentSecurityPolicy"].write(value.contentSecurityPolicy)
        try writer["Override"].write(value.`override`)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.ResponseHeadersPolicyContentSecurityPolicy {
        var value = CloudFrontClientTypes.ResponseHeadersPolicyContentSecurityPolicy()
        value.`override` = try reader["Override"].readIfPresent()
        value.contentSecurityPolicy = try reader["ContentSecurityPolicy"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// The policy directives and their values that CloudFront includes as values for the Content-Security-Policy HTTP response header. For more information about the Content-Security-Policy HTTP response header, see [Content-Security-Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy) in the MDN Web Docs.
    public struct ResponseHeadersPolicyContentSecurityPolicy: Swift.Equatable {
        /// The policy directives and their values that CloudFront includes as values for the Content-Security-Policy HTTP response header.
        /// This member is required.
        public var contentSecurityPolicy: Swift.String?
        /// A Boolean that determines whether CloudFront overrides the Content-Security-Policy HTTP response header received from the origin with the one specified in this response headers policy.
        /// This member is required.
        public var `override`: Swift.Bool?

        public init(
            contentSecurityPolicy: Swift.String? = nil,
            `override`: Swift.Bool? = nil
        )
        {
            self.contentSecurityPolicy = contentSecurityPolicy
            self.`override` = `override`
        }
    }

}

extension CloudFrontClientTypes.ResponseHeadersPolicyContentTypeOptions {

    static func writingClosure(_ value: CloudFrontClientTypes.ResponseHeadersPolicyContentTypeOptions?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Override"].write(value.`override`)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.ResponseHeadersPolicyContentTypeOptions {
        var value = CloudFrontClientTypes.ResponseHeadersPolicyContentTypeOptions()
        value.`override` = try reader["Override"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// Determines whether CloudFront includes the X-Content-Type-Options HTTP response header with its value set to nosniff. For more information about the X-Content-Type-Options HTTP response header, see [X-Content-Type-Options](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options) in the MDN Web Docs.
    public struct ResponseHeadersPolicyContentTypeOptions: Swift.Equatable {
        /// A Boolean that determines whether CloudFront overrides the X-Content-Type-Options HTTP response header received from the origin with the one specified in this response headers policy.
        /// This member is required.
        public var `override`: Swift.Bool?

        public init(
            `override`: Swift.Bool? = nil
        )
        {
            self.`override` = `override`
        }
    }

}

extension CloudFrontClientTypes.ResponseHeadersPolicyCorsConfig {

    static func writingClosure(_ value: CloudFrontClientTypes.ResponseHeadersPolicyCorsConfig?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["AccessControlAllowCredentials"].write(value.accessControlAllowCredentials)
        try writer["AccessControlAllowHeaders"].write(value.accessControlAllowHeaders, writingClosure: CloudFrontClientTypes.ResponseHeadersPolicyAccessControlAllowHeaders.writingClosure(_:to:))
        try writer["AccessControlAllowMethods"].write(value.accessControlAllowMethods, writingClosure: CloudFrontClientTypes.ResponseHeadersPolicyAccessControlAllowMethods.writingClosure(_:to:))
        try writer["AccessControlAllowOrigins"].write(value.accessControlAllowOrigins, writingClosure: CloudFrontClientTypes.ResponseHeadersPolicyAccessControlAllowOrigins.writingClosure(_:to:))
        try writer["AccessControlExposeHeaders"].write(value.accessControlExposeHeaders, writingClosure: CloudFrontClientTypes.ResponseHeadersPolicyAccessControlExposeHeaders.writingClosure(_:to:))
        try writer["AccessControlMaxAgeSec"].write(value.accessControlMaxAgeSec)
        try writer["OriginOverride"].write(value.originOverride)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.ResponseHeadersPolicyCorsConfig {
        var value = CloudFrontClientTypes.ResponseHeadersPolicyCorsConfig()
        value.accessControlAllowOrigins = try reader["AccessControlAllowOrigins"].readIfPresent(readingClosure: CloudFrontClientTypes.ResponseHeadersPolicyAccessControlAllowOrigins.readingClosure(from:))
        value.accessControlAllowHeaders = try reader["AccessControlAllowHeaders"].readIfPresent(readingClosure: CloudFrontClientTypes.ResponseHeadersPolicyAccessControlAllowHeaders.readingClosure(from:))
        value.accessControlAllowMethods = try reader["AccessControlAllowMethods"].readIfPresent(readingClosure: CloudFrontClientTypes.ResponseHeadersPolicyAccessControlAllowMethods.readingClosure(from:))
        value.accessControlAllowCredentials = try reader["AccessControlAllowCredentials"].readIfPresent()
        value.accessControlExposeHeaders = try reader["AccessControlExposeHeaders"].readIfPresent(readingClosure: CloudFrontClientTypes.ResponseHeadersPolicyAccessControlExposeHeaders.readingClosure(from:))
        value.accessControlMaxAgeSec = try reader["AccessControlMaxAgeSec"].readIfPresent()
        value.originOverride = try reader["OriginOverride"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// A configuration for a set of HTTP response headers that are used for cross-origin resource sharing (CORS). CloudFront adds these headers to HTTP responses that it sends for CORS requests that match a cache behavior associated with this response headers policy. For more information about CORS, see [Cross-Origin Resource Sharing (CORS)](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) in the MDN Web Docs.
    public struct ResponseHeadersPolicyCorsConfig: Swift.Equatable {
        /// A Boolean that CloudFront uses as the value for the Access-Control-Allow-Credentials HTTP response header. For more information about the Access-Control-Allow-Credentials HTTP response header, see [Access-Control-Allow-Credentials](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials) in the MDN Web Docs.
        /// This member is required.
        public var accessControlAllowCredentials: Swift.Bool?
        /// A list of HTTP header names that CloudFront includes as values for the Access-Control-Allow-Headers HTTP response header. For more information about the Access-Control-Allow-Headers HTTP response header, see [Access-Control-Allow-Headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Headers) in the MDN Web Docs.
        /// This member is required.
        public var accessControlAllowHeaders: CloudFrontClientTypes.ResponseHeadersPolicyAccessControlAllowHeaders?
        /// A list of HTTP methods that CloudFront includes as values for the Access-Control-Allow-Methods HTTP response header. For more information about the Access-Control-Allow-Methods HTTP response header, see [Access-Control-Allow-Methods](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Methods) in the MDN Web Docs.
        /// This member is required.
        public var accessControlAllowMethods: CloudFrontClientTypes.ResponseHeadersPolicyAccessControlAllowMethods?
        /// A list of origins (domain names) that CloudFront can use as the value for the Access-Control-Allow-Origin HTTP response header. For more information about the Access-Control-Allow-Origin HTTP response header, see [Access-Control-Allow-Origin](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin) in the MDN Web Docs.
        /// This member is required.
        public var accessControlAllowOrigins: CloudFrontClientTypes.ResponseHeadersPolicyAccessControlAllowOrigins?
        /// A list of HTTP headers that CloudFront includes as values for the Access-Control-Expose-Headers HTTP response header. For more information about the Access-Control-Expose-Headers HTTP response header, see [Access-Control-Expose-Headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Expose-Headers) in the MDN Web Docs.
        public var accessControlExposeHeaders: CloudFrontClientTypes.ResponseHeadersPolicyAccessControlExposeHeaders?
        /// A number that CloudFront uses as the value for the Access-Control-Max-Age HTTP response header. For more information about the Access-Control-Max-Age HTTP response header, see [Access-Control-Max-Age](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Max-Age) in the MDN Web Docs.
        public var accessControlMaxAgeSec: Swift.Int?
        /// A Boolean that determines whether CloudFront overrides HTTP response headers received from the origin with the ones specified in this response headers policy.
        /// This member is required.
        public var originOverride: Swift.Bool?

        public init(
            accessControlAllowCredentials: Swift.Bool? = nil,
            accessControlAllowHeaders: CloudFrontClientTypes.ResponseHeadersPolicyAccessControlAllowHeaders? = nil,
            accessControlAllowMethods: CloudFrontClientTypes.ResponseHeadersPolicyAccessControlAllowMethods? = nil,
            accessControlAllowOrigins: CloudFrontClientTypes.ResponseHeadersPolicyAccessControlAllowOrigins? = nil,
            accessControlExposeHeaders: CloudFrontClientTypes.ResponseHeadersPolicyAccessControlExposeHeaders? = nil,
            accessControlMaxAgeSec: Swift.Int? = nil,
            originOverride: Swift.Bool? = nil
        )
        {
            self.accessControlAllowCredentials = accessControlAllowCredentials
            self.accessControlAllowHeaders = accessControlAllowHeaders
            self.accessControlAllowMethods = accessControlAllowMethods
            self.accessControlAllowOrigins = accessControlAllowOrigins
            self.accessControlExposeHeaders = accessControlExposeHeaders
            self.accessControlMaxAgeSec = accessControlMaxAgeSec
            self.originOverride = originOverride
        }
    }

}

extension CloudFrontClientTypes.ResponseHeadersPolicyCustomHeader {

    static func writingClosure(_ value: CloudFrontClientTypes.ResponseHeadersPolicyCustomHeader?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Header"].write(value.header)
        try writer["Override"].write(value.`override`)
        try writer["Value"].write(value.value)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.ResponseHeadersPolicyCustomHeader {
        var value = CloudFrontClientTypes.ResponseHeadersPolicyCustomHeader()
        value.header = try reader["Header"].readIfPresent()
        value.value = try reader["Value"].readIfPresent()
        value.`override` = try reader["Override"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// An HTTP response header name and its value. CloudFront includes this header in HTTP responses that it sends for requests that match a cache behavior that's associated with this response headers policy.
    public struct ResponseHeadersPolicyCustomHeader: Swift.Equatable {
        /// The HTTP response header name.
        /// This member is required.
        public var header: Swift.String?
        /// A Boolean that determines whether CloudFront overrides a response header with the same name received from the origin with the header specified here.
        /// This member is required.
        public var `override`: Swift.Bool?
        /// The value for the HTTP response header.
        /// This member is required.
        public var value: Swift.String?

        public init(
            header: Swift.String? = nil,
            `override`: Swift.Bool? = nil,
            value: Swift.String? = nil
        )
        {
            self.header = header
            self.`override` = `override`
            self.value = value
        }
    }

}

extension CloudFrontClientTypes.ResponseHeadersPolicyCustomHeadersConfig {

    static func writingClosure(_ value: CloudFrontClientTypes.ResponseHeadersPolicyCustomHeadersConfig?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Items"].writeList(value.items, memberWritingClosure: CloudFrontClientTypes.ResponseHeadersPolicyCustomHeader.writingClosure(_:to:), memberNodeInfo: "ResponseHeadersPolicyCustomHeader", isFlattened: false)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.ResponseHeadersPolicyCustomHeadersConfig {
        var value = CloudFrontClientTypes.ResponseHeadersPolicyCustomHeadersConfig()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: CloudFrontClientTypes.ResponseHeadersPolicyCustomHeader.readingClosure(from:), memberNodeInfo: "ResponseHeadersPolicyCustomHeader", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// A list of HTTP response header names and their values. CloudFront includes these headers in HTTP responses that it sends for requests that match a cache behavior that's associated with this response headers policy.
    public struct ResponseHeadersPolicyCustomHeadersConfig: Swift.Equatable {
        /// The list of HTTP response headers and their values.
        public var items: [CloudFrontClientTypes.ResponseHeadersPolicyCustomHeader]?
        /// The number of HTTP response headers in the list.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            items: [CloudFrontClientTypes.ResponseHeadersPolicyCustomHeader]? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.items = items
            self.quantity = quantity
        }
    }

}

extension CloudFrontClientTypes.ResponseHeadersPolicyFrameOptions {

    static func writingClosure(_ value: CloudFrontClientTypes.ResponseHeadersPolicyFrameOptions?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["FrameOption"].write(value.frameOption)
        try writer["Override"].write(value.`override`)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.ResponseHeadersPolicyFrameOptions {
        var value = CloudFrontClientTypes.ResponseHeadersPolicyFrameOptions()
        value.`override` = try reader["Override"].readIfPresent()
        value.frameOption = try reader["FrameOption"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// Determines whether CloudFront includes the X-Frame-Options HTTP response header and the header's value. For more information about the X-Frame-Options HTTP response header, see [X-Frame-Options](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options) in the MDN Web Docs.
    public struct ResponseHeadersPolicyFrameOptions: Swift.Equatable {
        /// The value of the X-Frame-Options HTTP response header. Valid values are DENY and SAMEORIGIN. For more information about these values, see [X-Frame-Options](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options) in the MDN Web Docs.
        /// This member is required.
        public var frameOption: CloudFrontClientTypes.FrameOptionsList?
        /// A Boolean that determines whether CloudFront overrides the X-Frame-Options HTTP response header received from the origin with the one specified in this response headers policy.
        /// This member is required.
        public var `override`: Swift.Bool?

        public init(
            frameOption: CloudFrontClientTypes.FrameOptionsList? = nil,
            `override`: Swift.Bool? = nil
        )
        {
            self.frameOption = frameOption
            self.`override` = `override`
        }
    }

}

extension ResponseHeadersPolicyInUse {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> ResponseHeadersPolicyInUse {
        var value = ResponseHeadersPolicyInUse()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension ResponseHeadersPolicyInUse {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// Cannot delete the response headers policy because it is attached to one or more cache behaviors in a CloudFront distribution.
public struct ResponseHeadersPolicyInUse: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResponseHeadersPolicyInUse" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFrontClientTypes.ResponseHeadersPolicyList {

    static func writingClosure(_ value: CloudFrontClientTypes.ResponseHeadersPolicyList?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Items"].writeList(value.items, memberWritingClosure: CloudFrontClientTypes.ResponseHeadersPolicySummary.writingClosure(_:to:), memberNodeInfo: "ResponseHeadersPolicySummary", isFlattened: false)
        try writer["MaxItems"].write(value.maxItems)
        try writer["NextMarker"].write(value.nextMarker)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.ResponseHeadersPolicyList {
        var value = CloudFrontClientTypes.ResponseHeadersPolicyList()
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.maxItems = try reader["MaxItems"].readIfPresent()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: CloudFrontClientTypes.ResponseHeadersPolicySummary.readingClosure(from:), memberNodeInfo: "ResponseHeadersPolicySummary", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// A list of response headers policies.
    public struct ResponseHeadersPolicyList: Swift.Equatable {
        /// The response headers policies in the list.
        public var items: [CloudFrontClientTypes.ResponseHeadersPolicySummary]?
        /// The maximum number of response headers policies requested.
        /// This member is required.
        public var maxItems: Swift.Int?
        /// If there are more items in the list than are in this response, this element is present. It contains the value that you should use in the Marker field of a subsequent request to continue listing response headers policies where you left off.
        public var nextMarker: Swift.String?
        /// The number of response headers policies returned.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            items: [CloudFrontClientTypes.ResponseHeadersPolicySummary]? = nil,
            maxItems: Swift.Int? = nil,
            nextMarker: Swift.String? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.items = items
            self.maxItems = maxItems
            self.nextMarker = nextMarker
            self.quantity = quantity
        }
    }

}

extension CloudFrontClientTypes.ResponseHeadersPolicyReferrerPolicy {

    static func writingClosure(_ value: CloudFrontClientTypes.ResponseHeadersPolicyReferrerPolicy?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Override"].write(value.`override`)
        try writer["ReferrerPolicy"].write(value.referrerPolicy)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.ResponseHeadersPolicyReferrerPolicy {
        var value = CloudFrontClientTypes.ResponseHeadersPolicyReferrerPolicy()
        value.`override` = try reader["Override"].readIfPresent()
        value.referrerPolicy = try reader["ReferrerPolicy"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// Determines whether CloudFront includes the Referrer-Policy HTTP response header and the header's value. For more information about the Referrer-Policy HTTP response header, see [Referrer-Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy) in the MDN Web Docs.
    public struct ResponseHeadersPolicyReferrerPolicy: Swift.Equatable {
        /// A Boolean that determines whether CloudFront overrides the Referrer-Policy HTTP response header received from the origin with the one specified in this response headers policy.
        /// This member is required.
        public var `override`: Swift.Bool?
        /// The value of the Referrer-Policy HTTP response header. Valid values are:
        ///
        /// * no-referrer
        ///
        /// * no-referrer-when-downgrade
        ///
        /// * origin
        ///
        /// * origin-when-cross-origin
        ///
        /// * same-origin
        ///
        /// * strict-origin
        ///
        /// * strict-origin-when-cross-origin
        ///
        /// * unsafe-url
        ///
        ///
        /// For more information about these values, see [Referrer-Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy) in the MDN Web Docs.
        /// This member is required.
        public var referrerPolicy: CloudFrontClientTypes.ReferrerPolicyList?

        public init(
            `override`: Swift.Bool? = nil,
            referrerPolicy: CloudFrontClientTypes.ReferrerPolicyList? = nil
        )
        {
            self.`override` = `override`
            self.referrerPolicy = referrerPolicy
        }
    }

}

extension CloudFrontClientTypes.ResponseHeadersPolicyRemoveHeader {

    static func writingClosure(_ value: CloudFrontClientTypes.ResponseHeadersPolicyRemoveHeader?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Header"].write(value.header)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.ResponseHeadersPolicyRemoveHeader {
        var value = CloudFrontClientTypes.ResponseHeadersPolicyRemoveHeader()
        value.header = try reader["Header"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// The name of an HTTP header that CloudFront removes from HTTP responses to requests that match the cache behavior that this response headers policy is attached to.
    public struct ResponseHeadersPolicyRemoveHeader: Swift.Equatable {
        /// The HTTP header name.
        /// This member is required.
        public var header: Swift.String?

        public init(
            header: Swift.String? = nil
        )
        {
            self.header = header
        }
    }

}

extension CloudFrontClientTypes.ResponseHeadersPolicyRemoveHeadersConfig {

    static func writingClosure(_ value: CloudFrontClientTypes.ResponseHeadersPolicyRemoveHeadersConfig?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Items"].writeList(value.items, memberWritingClosure: CloudFrontClientTypes.ResponseHeadersPolicyRemoveHeader.writingClosure(_:to:), memberNodeInfo: "ResponseHeadersPolicyRemoveHeader", isFlattened: false)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.ResponseHeadersPolicyRemoveHeadersConfig {
        var value = CloudFrontClientTypes.ResponseHeadersPolicyRemoveHeadersConfig()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: CloudFrontClientTypes.ResponseHeadersPolicyRemoveHeader.readingClosure(from:), memberNodeInfo: "ResponseHeadersPolicyRemoveHeader", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// A list of HTTP header names that CloudFront removes from HTTP responses to requests that match the cache behavior that this response headers policy is attached to.
    public struct ResponseHeadersPolicyRemoveHeadersConfig: Swift.Equatable {
        /// The list of HTTP header names.
        public var items: [CloudFrontClientTypes.ResponseHeadersPolicyRemoveHeader]?
        /// The number of HTTP header names in the list.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            items: [CloudFrontClientTypes.ResponseHeadersPolicyRemoveHeader]? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.items = items
            self.quantity = quantity
        }
    }

}

extension CloudFrontClientTypes.ResponseHeadersPolicySecurityHeadersConfig {

    static func writingClosure(_ value: CloudFrontClientTypes.ResponseHeadersPolicySecurityHeadersConfig?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["ContentSecurityPolicy"].write(value.contentSecurityPolicy, writingClosure: CloudFrontClientTypes.ResponseHeadersPolicyContentSecurityPolicy.writingClosure(_:to:))
        try writer["ContentTypeOptions"].write(value.contentTypeOptions, writingClosure: CloudFrontClientTypes.ResponseHeadersPolicyContentTypeOptions.writingClosure(_:to:))
        try writer["FrameOptions"].write(value.frameOptions, writingClosure: CloudFrontClientTypes.ResponseHeadersPolicyFrameOptions.writingClosure(_:to:))
        try writer["ReferrerPolicy"].write(value.referrerPolicy, writingClosure: CloudFrontClientTypes.ResponseHeadersPolicyReferrerPolicy.writingClosure(_:to:))
        try writer["StrictTransportSecurity"].write(value.strictTransportSecurity, writingClosure: CloudFrontClientTypes.ResponseHeadersPolicyStrictTransportSecurity.writingClosure(_:to:))
        try writer["XSSProtection"].write(value.xssProtection, writingClosure: CloudFrontClientTypes.ResponseHeadersPolicyXSSProtection.writingClosure(_:to:))
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.ResponseHeadersPolicySecurityHeadersConfig {
        var value = CloudFrontClientTypes.ResponseHeadersPolicySecurityHeadersConfig()
        value.xssProtection = try reader["XSSProtection"].readIfPresent(readingClosure: CloudFrontClientTypes.ResponseHeadersPolicyXSSProtection.readingClosure(from:))
        value.frameOptions = try reader["FrameOptions"].readIfPresent(readingClosure: CloudFrontClientTypes.ResponseHeadersPolicyFrameOptions.readingClosure(from:))
        value.referrerPolicy = try reader["ReferrerPolicy"].readIfPresent(readingClosure: CloudFrontClientTypes.ResponseHeadersPolicyReferrerPolicy.readingClosure(from:))
        value.contentSecurityPolicy = try reader["ContentSecurityPolicy"].readIfPresent(readingClosure: CloudFrontClientTypes.ResponseHeadersPolicyContentSecurityPolicy.readingClosure(from:))
        value.contentTypeOptions = try reader["ContentTypeOptions"].readIfPresent(readingClosure: CloudFrontClientTypes.ResponseHeadersPolicyContentTypeOptions.readingClosure(from:))
        value.strictTransportSecurity = try reader["StrictTransportSecurity"].readIfPresent(readingClosure: CloudFrontClientTypes.ResponseHeadersPolicyStrictTransportSecurity.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// A configuration for a set of security-related HTTP response headers. CloudFront adds these headers to HTTP responses that it sends for requests that match a cache behavior associated with this response headers policy.
    public struct ResponseHeadersPolicySecurityHeadersConfig: Swift.Equatable {
        /// The policy directives and their values that CloudFront includes as values for the Content-Security-Policy HTTP response header. For more information about the Content-Security-Policy HTTP response header, see [Content-Security-Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy) in the MDN Web Docs.
        public var contentSecurityPolicy: CloudFrontClientTypes.ResponseHeadersPolicyContentSecurityPolicy?
        /// Determines whether CloudFront includes the X-Content-Type-Options HTTP response header with its value set to nosniff. For more information about the X-Content-Type-Options HTTP response header, see [X-Content-Type-Options](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options) in the MDN Web Docs.
        public var contentTypeOptions: CloudFrontClientTypes.ResponseHeadersPolicyContentTypeOptions?
        /// Determines whether CloudFront includes the X-Frame-Options HTTP response header and the header's value. For more information about the X-Frame-Options HTTP response header, see [X-Frame-Options](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options) in the MDN Web Docs.
        public var frameOptions: CloudFrontClientTypes.ResponseHeadersPolicyFrameOptions?
        /// Determines whether CloudFront includes the Referrer-Policy HTTP response header and the header's value. For more information about the Referrer-Policy HTTP response header, see [Referrer-Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy) in the MDN Web Docs.
        public var referrerPolicy: CloudFrontClientTypes.ResponseHeadersPolicyReferrerPolicy?
        /// Determines whether CloudFront includes the Strict-Transport-Security HTTP response header and the header's value. For more information about the Strict-Transport-Security HTTP response header, see [Strict-Transport-Security](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security) in the MDN Web Docs.
        public var strictTransportSecurity: CloudFrontClientTypes.ResponseHeadersPolicyStrictTransportSecurity?
        /// Determines whether CloudFront includes the X-XSS-Protection HTTP response header and the header's value. For more information about the X-XSS-Protection HTTP response header, see [X-XSS-Protection](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection) in the MDN Web Docs.
        public var xssProtection: CloudFrontClientTypes.ResponseHeadersPolicyXSSProtection?

        public init(
            contentSecurityPolicy: CloudFrontClientTypes.ResponseHeadersPolicyContentSecurityPolicy? = nil,
            contentTypeOptions: CloudFrontClientTypes.ResponseHeadersPolicyContentTypeOptions? = nil,
            frameOptions: CloudFrontClientTypes.ResponseHeadersPolicyFrameOptions? = nil,
            referrerPolicy: CloudFrontClientTypes.ResponseHeadersPolicyReferrerPolicy? = nil,
            strictTransportSecurity: CloudFrontClientTypes.ResponseHeadersPolicyStrictTransportSecurity? = nil,
            xssProtection: CloudFrontClientTypes.ResponseHeadersPolicyXSSProtection? = nil
        )
        {
            self.contentSecurityPolicy = contentSecurityPolicy
            self.contentTypeOptions = contentTypeOptions
            self.frameOptions = frameOptions
            self.referrerPolicy = referrerPolicy
            self.strictTransportSecurity = strictTransportSecurity
            self.xssProtection = xssProtection
        }
    }

}

extension CloudFrontClientTypes.ResponseHeadersPolicyServerTimingHeadersConfig {

    static func writingClosure(_ value: CloudFrontClientTypes.ResponseHeadersPolicyServerTimingHeadersConfig?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Enabled"].write(value.enabled)
        try writer["SamplingRate"].write(value.samplingRate)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.ResponseHeadersPolicyServerTimingHeadersConfig {
        var value = CloudFrontClientTypes.ResponseHeadersPolicyServerTimingHeadersConfig()
        value.enabled = try reader["Enabled"].readIfPresent()
        value.samplingRate = try reader["SamplingRate"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// A configuration for enabling the Server-Timing header in HTTP responses sent from CloudFront. CloudFront adds this header to HTTP responses that it sends in response to requests that match a cache behavior that's associated with this response headers policy. You can use the Server-Timing header to view metrics that can help you gain insights about the behavior and performance of CloudFront. For example, you can see which cache layer served a cache hit, or the first byte latency from the origin when there was a cache miss. You can use the metrics in the Server-Timing header to troubleshoot issues or test the efficiency of your CloudFront configuration. For more information, see [Server-Timing header](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/understanding-response-headers-policies.html#server-timing-header) in the Amazon CloudFront Developer Guide.
    public struct ResponseHeadersPolicyServerTimingHeadersConfig: Swift.Equatable {
        /// A Boolean that determines whether CloudFront adds the Server-Timing header to HTTP responses that it sends in response to requests that match a cache behavior that's associated with this response headers policy.
        /// This member is required.
        public var enabled: Swift.Bool?
        /// A number 0–100 (inclusive) that specifies the percentage of responses that you want CloudFront to add the Server-Timing header to. When you set the sampling rate to 100, CloudFront adds the Server-Timing header to the HTTP response for every request that matches the cache behavior that this response headers policy is attached to. When you set it to 50, CloudFront adds the header to 50% of the responses for requests that match the cache behavior. You can set the sampling rate to any number 0–100 with up to four decimal places.
        public var samplingRate: Swift.Double?

        public init(
            enabled: Swift.Bool? = nil,
            samplingRate: Swift.Double? = nil
        )
        {
            self.enabled = enabled
            self.samplingRate = samplingRate
        }
    }

}

extension CloudFrontClientTypes.ResponseHeadersPolicyStrictTransportSecurity {

    static func writingClosure(_ value: CloudFrontClientTypes.ResponseHeadersPolicyStrictTransportSecurity?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["AccessControlMaxAgeSec"].write(value.accessControlMaxAgeSec)
        try writer["IncludeSubdomains"].write(value.includeSubdomains)
        try writer["Override"].write(value.`override`)
        try writer["Preload"].write(value.preload)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.ResponseHeadersPolicyStrictTransportSecurity {
        var value = CloudFrontClientTypes.ResponseHeadersPolicyStrictTransportSecurity()
        value.`override` = try reader["Override"].readIfPresent()
        value.includeSubdomains = try reader["IncludeSubdomains"].readIfPresent()
        value.preload = try reader["Preload"].readIfPresent()
        value.accessControlMaxAgeSec = try reader["AccessControlMaxAgeSec"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// Determines whether CloudFront includes the Strict-Transport-Security HTTP response header and the header's value. For more information about the Strict-Transport-Security HTTP response header, see [Strict-Transport-Security](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security) in the MDN Web Docs.
    public struct ResponseHeadersPolicyStrictTransportSecurity: Swift.Equatable {
        /// A number that CloudFront uses as the value for the max-age directive in the Strict-Transport-Security HTTP response header.
        /// This member is required.
        public var accessControlMaxAgeSec: Swift.Int?
        /// A Boolean that determines whether CloudFront includes the includeSubDomains directive in the Strict-Transport-Security HTTP response header.
        public var includeSubdomains: Swift.Bool?
        /// A Boolean that determines whether CloudFront overrides the Strict-Transport-Security HTTP response header received from the origin with the one specified in this response headers policy.
        /// This member is required.
        public var `override`: Swift.Bool?
        /// A Boolean that determines whether CloudFront includes the preload directive in the Strict-Transport-Security HTTP response header.
        public var preload: Swift.Bool?

        public init(
            accessControlMaxAgeSec: Swift.Int? = nil,
            includeSubdomains: Swift.Bool? = nil,
            `override`: Swift.Bool? = nil,
            preload: Swift.Bool? = nil
        )
        {
            self.accessControlMaxAgeSec = accessControlMaxAgeSec
            self.includeSubdomains = includeSubdomains
            self.`override` = `override`
            self.preload = preload
        }
    }

}

extension CloudFrontClientTypes.ResponseHeadersPolicySummary {

    static func writingClosure(_ value: CloudFrontClientTypes.ResponseHeadersPolicySummary?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["ResponseHeadersPolicy"].write(value.responseHeadersPolicy, writingClosure: CloudFrontClientTypes.ResponseHeadersPolicy.writingClosure(_:to:))
        try writer["Type"].write(value.type)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.ResponseHeadersPolicySummary {
        var value = CloudFrontClientTypes.ResponseHeadersPolicySummary()
        value.type = try reader["Type"].readIfPresent()
        value.responseHeadersPolicy = try reader["ResponseHeadersPolicy"].readIfPresent(readingClosure: CloudFrontClientTypes.ResponseHeadersPolicy.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// Contains a response headers policy.
    public struct ResponseHeadersPolicySummary: Swift.Equatable {
        /// The response headers policy.
        /// This member is required.
        public var responseHeadersPolicy: CloudFrontClientTypes.ResponseHeadersPolicy?
        /// The type of response headers policy, either managed (created by Amazon Web Services) or custom (created in this Amazon Web Services account).
        /// This member is required.
        public var type: CloudFrontClientTypes.ResponseHeadersPolicyType?

        public init(
            responseHeadersPolicy: CloudFrontClientTypes.ResponseHeadersPolicy? = nil,
            type: CloudFrontClientTypes.ResponseHeadersPolicyType? = nil
        )
        {
            self.responseHeadersPolicy = responseHeadersPolicy
            self.type = type
        }
    }

}

extension CloudFrontClientTypes {
    public enum ResponseHeadersPolicyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case custom
        case managed
        case sdkUnknown(Swift.String)

        public static var allCases: [ResponseHeadersPolicyType] {
            return [
                .custom,
                .managed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .custom: return "custom"
            case .managed: return "managed"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResponseHeadersPolicyType(rawValue: rawValue) ?? ResponseHeadersPolicyType.sdkUnknown(rawValue)
        }
    }
}

extension CloudFrontClientTypes.ResponseHeadersPolicyXSSProtection {

    static func writingClosure(_ value: CloudFrontClientTypes.ResponseHeadersPolicyXSSProtection?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["ModeBlock"].write(value.modeBlock)
        try writer["Override"].write(value.`override`)
        try writer["Protection"].write(value.protection)
        try writer["ReportUri"].write(value.reportUri)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.ResponseHeadersPolicyXSSProtection {
        var value = CloudFrontClientTypes.ResponseHeadersPolicyXSSProtection()
        value.`override` = try reader["Override"].readIfPresent()
        value.protection = try reader["Protection"].readIfPresent()
        value.modeBlock = try reader["ModeBlock"].readIfPresent()
        value.reportUri = try reader["ReportUri"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// Determines whether CloudFront includes the X-XSS-Protection HTTP response header and the header's value. For more information about the X-XSS-Protection HTTP response header, see [X-XSS-Protection](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection) in the MDN Web Docs.
    public struct ResponseHeadersPolicyXSSProtection: Swift.Equatable {
        /// A Boolean that determines whether CloudFront includes the mode=block directive in the X-XSS-Protection header. For more information about this directive, see [X-XSS-Protection](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection) in the MDN Web Docs.
        public var modeBlock: Swift.Bool?
        /// A Boolean that determines whether CloudFront overrides the X-XSS-Protection HTTP response header received from the origin with the one specified in this response headers policy.
        /// This member is required.
        public var `override`: Swift.Bool?
        /// A Boolean that determines the value of the X-XSS-Protection HTTP response header. When this setting is true, the value of the X-XSS-Protection header is 1. When this setting is false, the value of the X-XSS-Protection header is 0. For more information about these settings, see [X-XSS-Protection](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection) in the MDN Web Docs.
        /// This member is required.
        public var protection: Swift.Bool?
        /// A reporting URI, which CloudFront uses as the value of the report directive in the X-XSS-Protection header. You cannot specify a ReportUri when ModeBlock is true. For more information about using a reporting URL, see [X-XSS-Protection](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection) in the MDN Web Docs.
        public var reportUri: Swift.String?

        public init(
            modeBlock: Swift.Bool? = nil,
            `override`: Swift.Bool? = nil,
            protection: Swift.Bool? = nil,
            reportUri: Swift.String? = nil
        )
        {
            self.modeBlock = modeBlock
            self.`override` = `override`
            self.protection = protection
            self.reportUri = reportUri
        }
    }

}

extension CloudFrontClientTypes.Restrictions {

    static func writingClosure(_ value: CloudFrontClientTypes.Restrictions?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["GeoRestriction"].write(value.geoRestriction, writingClosure: CloudFrontClientTypes.GeoRestriction.writingClosure(_:to:))
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.Restrictions {
        var value = CloudFrontClientTypes.Restrictions()
        value.geoRestriction = try reader["GeoRestriction"].readIfPresent(readingClosure: CloudFrontClientTypes.GeoRestriction.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// A complex type that identifies ways in which you want to restrict distribution of your content.
    public struct Restrictions: Swift.Equatable {
        /// A complex type that controls the countries in which your content is distributed. CloudFront determines the location of your users using MaxMind GeoIP databases.
        /// This member is required.
        public var geoRestriction: CloudFrontClientTypes.GeoRestriction?

        public init(
            geoRestriction: CloudFrontClientTypes.GeoRestriction? = nil
        )
        {
            self.geoRestriction = geoRestriction
        }
    }

}

extension CloudFrontClientTypes.S3Origin {

    static func writingClosure(_ value: CloudFrontClientTypes.S3Origin?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["DomainName"].write(value.domainName)
        try writer["OriginAccessIdentity"].write(value.originAccessIdentity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.S3Origin {
        var value = CloudFrontClientTypes.S3Origin()
        value.domainName = try reader["DomainName"].readIfPresent()
        value.originAccessIdentity = try reader["OriginAccessIdentity"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// A complex type that contains information about the Amazon S3 bucket from which you want CloudFront to get your media files for distribution.
    public struct S3Origin: Swift.Equatable {
        /// The DNS name of the Amazon S3 origin.
        /// This member is required.
        public var domainName: Swift.String?
        /// The CloudFront origin access identity to associate with the distribution. Use an origin access identity to configure the distribution so that end users can only access objects in an Amazon S3 bucket through CloudFront. If you want end users to be able to access objects using either the CloudFront URL or the Amazon S3 URL, specify an empty OriginAccessIdentity element. To delete the origin access identity from an existing distribution, update the distribution configuration and include an empty OriginAccessIdentity element. To replace the origin access identity, update the distribution configuration and specify the new origin access identity. For more information, see [Using an Origin Access Identity to Restrict Access to Your Amazon S3 Content](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html) in the Amazon CloudFront Developer Guide.
        /// This member is required.
        public var originAccessIdentity: Swift.String?

        public init(
            domainName: Swift.String? = nil,
            originAccessIdentity: Swift.String? = nil
        )
        {
            self.domainName = domainName
            self.originAccessIdentity = originAccessIdentity
        }
    }

}

extension CloudFrontClientTypes.S3OriginConfig {

    static func writingClosure(_ value: CloudFrontClientTypes.S3OriginConfig?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["OriginAccessIdentity"].write(value.originAccessIdentity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.S3OriginConfig {
        var value = CloudFrontClientTypes.S3OriginConfig()
        value.originAccessIdentity = try reader["OriginAccessIdentity"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// A complex type that contains information about the Amazon S3 origin. If the origin is a custom origin or an S3 bucket that is configured as a website endpoint, use the CustomOriginConfig element instead.
    public struct S3OriginConfig: Swift.Equatable {
        /// The CloudFront origin access identity to associate with the origin. Use an origin access identity to configure the origin so that viewers can only access objects in an Amazon S3 bucket through CloudFront. The format of the value is: origin-access-identity/cloudfront/ID-of-origin-access-identity where  ID-of-origin-access-identity  is the value that CloudFront returned in the ID element when you created the origin access identity. If you want viewers to be able to access objects using either the CloudFront URL or the Amazon S3 URL, specify an empty OriginAccessIdentity element. To delete the origin access identity from an existing distribution, update the distribution configuration and include an empty OriginAccessIdentity element. To replace the origin access identity, update the distribution configuration and specify the new origin access identity. For more information about the origin access identity, see [Serving Private Content through CloudFront](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html) in the Amazon CloudFront Developer Guide.
        /// This member is required.
        public var originAccessIdentity: Swift.String?

        public init(
            originAccessIdentity: Swift.String? = nil
        )
        {
            self.originAccessIdentity = originAccessIdentity
        }
    }

}

extension CloudFrontClientTypes {
    public enum SSLSupportMethod: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case sniOnly
        case staticIp
        case vip
        case sdkUnknown(Swift.String)

        public static var allCases: [SSLSupportMethod] {
            return [
                .sniOnly,
                .staticIp,
                .vip,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .sniOnly: return "sni-only"
            case .staticIp: return "static-ip"
            case .vip: return "vip"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SSLSupportMethod(rawValue: rawValue) ?? SSLSupportMethod.sdkUnknown(rawValue)
        }
    }
}

extension CloudFrontClientTypes.SessionStickinessConfig {

    static func writingClosure(_ value: CloudFrontClientTypes.SessionStickinessConfig?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["IdleTTL"].write(value.idleTTL)
        try writer["MaximumTTL"].write(value.maximumTTL)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.SessionStickinessConfig {
        var value = CloudFrontClientTypes.SessionStickinessConfig()
        value.idleTTL = try reader["IdleTTL"].readIfPresent()
        value.maximumTTL = try reader["MaximumTTL"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// Session stickiness provides the ability to define multiple requests from a single viewer as a single session. This prevents the potentially inconsistent experience of sending some of a given user's requests to your staging distribution, while others are sent to your primary distribution. Define the session duration using TTL values.
    public struct SessionStickinessConfig: Swift.Equatable {
        /// The amount of time after which you want sessions to cease if no requests are received. Allowed values are 300–3600 seconds (5–60 minutes). The value must be less than or equal to MaximumTTL.
        /// This member is required.
        public var idleTTL: Swift.Int?
        /// The maximum amount of time to consider requests from the viewer as being part of the same session. Allowed values are 300–3600 seconds (5–60 minutes). The value must be less than or equal to IdleTTL.
        /// This member is required.
        public var maximumTTL: Swift.Int?

        public init(
            idleTTL: Swift.Int? = nil,
            maximumTTL: Swift.Int? = nil
        )
        {
            self.idleTTL = idleTTL
            self.maximumTTL = maximumTTL
        }
    }

}

extension CloudFrontClientTypes.Signer {

    static func writingClosure(_ value: CloudFrontClientTypes.Signer?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["AwsAccountNumber"].write(value.awsAccountNumber)
        try writer["KeyPairIds"].write(value.keyPairIds, writingClosure: CloudFrontClientTypes.KeyPairIds.writingClosure(_:to:))
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.Signer {
        var value = CloudFrontClientTypes.Signer()
        value.awsAccountNumber = try reader["AwsAccountNumber"].readIfPresent()
        value.keyPairIds = try reader["KeyPairIds"].readIfPresent(readingClosure: CloudFrontClientTypes.KeyPairIds.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// A list of Amazon Web Services accounts and the active CloudFront key pairs in each account that CloudFront can use to verify the signatures of signed URLs and signed cookies.
    public struct Signer: Swift.Equatable {
        /// An Amazon Web Services account number that contains active CloudFront key pairs that CloudFront can use to verify the signatures of signed URLs and signed cookies. If the Amazon Web Services account that owns the key pairs is the same account that owns the CloudFront distribution, the value of this field is self.
        public var awsAccountNumber: Swift.String?
        /// A list of CloudFront key pair identifiers.
        public var keyPairIds: CloudFrontClientTypes.KeyPairIds?

        public init(
            awsAccountNumber: Swift.String? = nil,
            keyPairIds: CloudFrontClientTypes.KeyPairIds? = nil
        )
        {
            self.awsAccountNumber = awsAccountNumber
            self.keyPairIds = keyPairIds
        }
    }

}

extension CloudFrontClientTypes {
    public enum SslProtocol: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case sslv3
        case tlsv1
        case tlsv11
        case tlsv12
        case sdkUnknown(Swift.String)

        public static var allCases: [SslProtocol] {
            return [
                .sslv3,
                .tlsv1,
                .tlsv11,
                .tlsv12,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .sslv3: return "SSLv3"
            case .tlsv1: return "TLSv1"
            case .tlsv11: return "TLSv1.1"
            case .tlsv12: return "TLSv1.2"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SslProtocol(rawValue: rawValue) ?? SslProtocol.sdkUnknown(rawValue)
        }
    }
}

extension CloudFrontClientTypes.StagingDistributionDnsNames {

    static func writingClosure(_ value: CloudFrontClientTypes.StagingDistributionDnsNames?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Items"].writeList(value.items, memberWritingClosure: Swift.String.writingClosure(_:to:), memberNodeInfo: "DnsName", isFlattened: false)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.StagingDistributionDnsNames {
        var value = CloudFrontClientTypes.StagingDistributionDnsNames()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure(from:), memberNodeInfo: "DnsName", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// The CloudFront domain name of the staging distribution.
    public struct StagingDistributionDnsNames: Swift.Equatable {
        /// The CloudFront domain name of the staging distribution.
        public var items: [Swift.String]?
        /// The number of CloudFront domain names in your staging distribution.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            items: [Swift.String]? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.items = items
            self.quantity = quantity
        }
    }

}

extension StagingDistributionInUse {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> StagingDistributionInUse {
        var value = StagingDistributionInUse()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension StagingDistributionInUse {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// A continuous deployment policy for this staging distribution already exists.
public struct StagingDistributionInUse: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "StagingDistributionInUse" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFrontClientTypes.StatusCodes {

    static func writingClosure(_ value: CloudFrontClientTypes.StatusCodes?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Items"].writeList(value.items, memberWritingClosure: Swift.Int.writingClosure(_:to:), memberNodeInfo: "StatusCode", isFlattened: false)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.StatusCodes {
        var value = CloudFrontClientTypes.StatusCodes()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: Swift.Int.readingClosure(from:), memberNodeInfo: "StatusCode", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// A complex data type for the status codes that you specify that, when returned by a primary origin, trigger CloudFront to failover to a second origin.
    public struct StatusCodes: Swift.Equatable {
        /// The items (status codes) for an origin group.
        /// This member is required.
        public var items: [Swift.Int]?
        /// The number of status codes.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            items: [Swift.Int]? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.items = items
            self.quantity = quantity
        }
    }

}

extension CloudFrontClientTypes.StreamingDistribution {

    static func writingClosure(_ value: CloudFrontClientTypes.StreamingDistribution?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["ARN"].write(value.arn)
        try writer["ActiveTrustedSigners"].write(value.activeTrustedSigners, writingClosure: CloudFrontClientTypes.ActiveTrustedSigners.writingClosure(_:to:))
        try writer["DomainName"].write(value.domainName)
        try writer["Id"].write(value.id)
        try writer["LastModifiedTime"].writeTimestamp(value.lastModifiedTime, format: .dateTime)
        try writer["Status"].write(value.status)
        try writer["StreamingDistributionConfig"].write(value.streamingDistributionConfig, writingClosure: CloudFrontClientTypes.StreamingDistributionConfig.writingClosure(_:to:))
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.StreamingDistribution {
        var value = CloudFrontClientTypes.StreamingDistribution()
        value.id = try reader["Id"].readIfPresent()
        value.arn = try reader["ARN"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: .dateTime)
        value.domainName = try reader["DomainName"].readIfPresent()
        value.activeTrustedSigners = try reader["ActiveTrustedSigners"].readIfPresent(readingClosure: CloudFrontClientTypes.ActiveTrustedSigners.readingClosure(from:))
        value.streamingDistributionConfig = try reader["StreamingDistributionConfig"].readIfPresent(readingClosure: CloudFrontClientTypes.StreamingDistributionConfig.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// A streaming distribution tells CloudFront where you want RTMP content to be delivered from, and the details about how to track and manage content delivery.
    public struct StreamingDistribution: Swift.Equatable {
        /// A complex type that lists the Amazon Web Services accounts, if any, that you included in the TrustedSigners complex type for this distribution. These are the accounts that you want to allow to create signed URLs for private content. The Signer complex type lists the Amazon Web Services account number of the trusted signer or self if the signer is the Amazon Web Services account that created the distribution. The Signer element also includes the IDs of any active CloudFront key pairs that are associated with the trusted signer's Amazon Web Services account. If no KeyPairId element appears for a Signer, that signer can't create signed URLs. For more information, see [Serving Private Content through CloudFront](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html) in the Amazon CloudFront Developer Guide.
        /// This member is required.
        public var activeTrustedSigners: CloudFrontClientTypes.ActiveTrustedSigners?
        /// The ARN (Amazon Resource Name) for the distribution. For example: arn:aws:cloudfront::123456789012:distribution/EDFDVBD632BHDS5, where 123456789012 is your Amazon Web Services account ID.
        /// This member is required.
        public var arn: Swift.String?
        /// The domain name that corresponds to the streaming distribution, for example, s5c39gqb8ow64r.cloudfront.net.
        /// This member is required.
        public var domainName: Swift.String?
        /// The identifier for the RTMP distribution. For example: EGTXBD79EXAMPLE.
        /// This member is required.
        public var id: Swift.String?
        /// The date and time that the distribution was last modified.
        public var lastModifiedTime: ClientRuntime.Date?
        /// The current status of the RTMP distribution. When the status is Deployed, the distribution's information is propagated to all CloudFront edge locations.
        /// This member is required.
        public var status: Swift.String?
        /// The current configuration information for the RTMP distribution.
        /// This member is required.
        public var streamingDistributionConfig: CloudFrontClientTypes.StreamingDistributionConfig?

        public init(
            activeTrustedSigners: CloudFrontClientTypes.ActiveTrustedSigners? = nil,
            arn: Swift.String? = nil,
            domainName: Swift.String? = nil,
            id: Swift.String? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            status: Swift.String? = nil,
            streamingDistributionConfig: CloudFrontClientTypes.StreamingDistributionConfig? = nil
        )
        {
            self.activeTrustedSigners = activeTrustedSigners
            self.arn = arn
            self.domainName = domainName
            self.id = id
            self.lastModifiedTime = lastModifiedTime
            self.status = status
            self.streamingDistributionConfig = streamingDistributionConfig
        }
    }

}

extension StreamingDistributionAlreadyExists {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> StreamingDistributionAlreadyExists {
        var value = StreamingDistributionAlreadyExists()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension StreamingDistributionAlreadyExists {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The caller reference you attempted to create the streaming distribution with is associated with another distribution
public struct StreamingDistributionAlreadyExists: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "StreamingDistributionAlreadyExists" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFrontClientTypes.StreamingDistributionConfig {

    static func writingClosure(_ value: CloudFrontClientTypes.StreamingDistributionConfig?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Aliases"].write(value.aliases, writingClosure: CloudFrontClientTypes.Aliases.writingClosure(_:to:))
        try writer["CallerReference"].write(value.callerReference)
        try writer["Comment"].write(value.comment)
        try writer["Enabled"].write(value.enabled)
        try writer["Logging"].write(value.logging, writingClosure: CloudFrontClientTypes.StreamingLoggingConfig.writingClosure(_:to:))
        try writer["PriceClass"].write(value.priceClass)
        try writer["S3Origin"].write(value.s3Origin, writingClosure: CloudFrontClientTypes.S3Origin.writingClosure(_:to:))
        try writer["TrustedSigners"].write(value.trustedSigners, writingClosure: CloudFrontClientTypes.TrustedSigners.writingClosure(_:to:))
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.StreamingDistributionConfig {
        var value = CloudFrontClientTypes.StreamingDistributionConfig()
        value.callerReference = try reader["CallerReference"].readIfPresent()
        value.s3Origin = try reader["S3Origin"].readIfPresent(readingClosure: CloudFrontClientTypes.S3Origin.readingClosure(from:))
        value.aliases = try reader["Aliases"].readIfPresent(readingClosure: CloudFrontClientTypes.Aliases.readingClosure(from:))
        value.comment = try reader["Comment"].readIfPresent()
        value.logging = try reader["Logging"].readIfPresent(readingClosure: CloudFrontClientTypes.StreamingLoggingConfig.readingClosure(from:))
        value.trustedSigners = try reader["TrustedSigners"].readIfPresent(readingClosure: CloudFrontClientTypes.TrustedSigners.readingClosure(from:))
        value.priceClass = try reader["PriceClass"].readIfPresent()
        value.enabled = try reader["Enabled"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// The RTMP distribution's configuration information.
    public struct StreamingDistributionConfig: Swift.Equatable {
        /// A complex type that contains information about CNAMEs (alternate domain names), if any, for this streaming distribution.
        public var aliases: CloudFrontClientTypes.Aliases?
        /// A unique value (for example, a date-time stamp) that ensures that the request can't be replayed. If the value of CallerReference is new (regardless of the content of the StreamingDistributionConfig object), CloudFront creates a new distribution. If CallerReference is a value that you already sent in a previous request to create a distribution, CloudFront returns a DistributionAlreadyExists error.
        /// This member is required.
        public var callerReference: Swift.String?
        /// Any comments you want to include about the streaming distribution.
        /// This member is required.
        public var comment: Swift.String?
        /// Whether the streaming distribution is enabled to accept user requests for content.
        /// This member is required.
        public var enabled: Swift.Bool?
        /// A complex type that controls whether access logs are written for the streaming distribution.
        public var logging: CloudFrontClientTypes.StreamingLoggingConfig?
        /// A complex type that contains information about price class for this streaming distribution.
        public var priceClass: CloudFrontClientTypes.PriceClass?
        /// A complex type that contains information about the Amazon S3 bucket from which you want CloudFront to get your media files for distribution.
        /// This member is required.
        public var s3Origin: CloudFrontClientTypes.S3Origin?
        /// A complex type that specifies any Amazon Web Services accounts that you want to permit to create signed URLs for private content. If you want the distribution to use signed URLs, include this element; if you want the distribution to use public URLs, remove this element. For more information, see [Serving Private Content through CloudFront](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html) in the Amazon CloudFront Developer Guide.
        /// This member is required.
        public var trustedSigners: CloudFrontClientTypes.TrustedSigners?

        public init(
            aliases: CloudFrontClientTypes.Aliases? = nil,
            callerReference: Swift.String? = nil,
            comment: Swift.String? = nil,
            enabled: Swift.Bool? = nil,
            logging: CloudFrontClientTypes.StreamingLoggingConfig? = nil,
            priceClass: CloudFrontClientTypes.PriceClass? = nil,
            s3Origin: CloudFrontClientTypes.S3Origin? = nil,
            trustedSigners: CloudFrontClientTypes.TrustedSigners? = nil
        )
        {
            self.aliases = aliases
            self.callerReference = callerReference
            self.comment = comment
            self.enabled = enabled
            self.logging = logging
            self.priceClass = priceClass
            self.s3Origin = s3Origin
            self.trustedSigners = trustedSigners
        }
    }

}

extension CloudFrontClientTypes.StreamingDistributionConfigWithTags {

    static func writingClosure(_ value: CloudFrontClientTypes.StreamingDistributionConfigWithTags?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["StreamingDistributionConfig"].write(value.streamingDistributionConfig, writingClosure: CloudFrontClientTypes.StreamingDistributionConfig.writingClosure(_:to:))
        try writer["Tags"].write(value.tags, writingClosure: CloudFrontClientTypes.Tags.writingClosure(_:to:))
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.StreamingDistributionConfigWithTags {
        var value = CloudFrontClientTypes.StreamingDistributionConfigWithTags()
        value.streamingDistributionConfig = try reader["StreamingDistributionConfig"].readIfPresent(readingClosure: CloudFrontClientTypes.StreamingDistributionConfig.readingClosure(from:))
        value.tags = try reader["Tags"].readIfPresent(readingClosure: CloudFrontClientTypes.Tags.readingClosure(from:))
        return value
    }
}

extension CloudFrontClientTypes {
    /// A streaming distribution Configuration and a list of tags to be associated with the streaming distribution.
    public struct StreamingDistributionConfigWithTags: Swift.Equatable {
        /// A streaming distribution Configuration.
        /// This member is required.
        public var streamingDistributionConfig: CloudFrontClientTypes.StreamingDistributionConfig?
        /// A complex type that contains zero or more Tag elements.
        /// This member is required.
        public var tags: CloudFrontClientTypes.Tags?

        public init(
            streamingDistributionConfig: CloudFrontClientTypes.StreamingDistributionConfig? = nil,
            tags: CloudFrontClientTypes.Tags? = nil
        )
        {
            self.streamingDistributionConfig = streamingDistributionConfig
            self.tags = tags
        }
    }

}

extension CloudFrontClientTypes.StreamingDistributionList {

    static func writingClosure(_ value: CloudFrontClientTypes.StreamingDistributionList?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["IsTruncated"].write(value.isTruncated)
        try writer["Items"].writeList(value.items, memberWritingClosure: CloudFrontClientTypes.StreamingDistributionSummary.writingClosure(_:to:), memberNodeInfo: "StreamingDistributionSummary", isFlattened: false)
        try writer["Marker"].write(value.marker)
        try writer["MaxItems"].write(value.maxItems)
        try writer["NextMarker"].write(value.nextMarker)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.StreamingDistributionList {
        var value = CloudFrontClientTypes.StreamingDistributionList()
        value.marker = try reader["Marker"].readIfPresent()
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.maxItems = try reader["MaxItems"].readIfPresent()
        value.isTruncated = try reader["IsTruncated"].readIfPresent()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: CloudFrontClientTypes.StreamingDistributionSummary.readingClosure(from:), memberNodeInfo: "StreamingDistributionSummary", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// A streaming distribution list.
    public struct StreamingDistributionList: Swift.Equatable {
        /// A flag that indicates whether more streaming distributions remain to be listed. If your results were truncated, you can make a follow-up pagination request using the Marker request parameter to retrieve more distributions in the list.
        /// This member is required.
        public var isTruncated: Swift.Bool?
        /// A complex type that contains one StreamingDistributionSummary element for each distribution that was created by the current Amazon Web Services account.
        public var items: [CloudFrontClientTypes.StreamingDistributionSummary]?
        /// The value you provided for the Marker request parameter.
        /// This member is required.
        public var marker: Swift.String?
        /// The value you provided for the MaxItems request parameter.
        /// This member is required.
        public var maxItems: Swift.Int?
        /// If IsTruncated is true, this element is present and contains the value you can use for the Marker request parameter to continue listing your RTMP distributions where they left off.
        public var nextMarker: Swift.String?
        /// The number of streaming distributions that were created by the current Amazon Web Services account.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            isTruncated: Swift.Bool? = nil,
            items: [CloudFrontClientTypes.StreamingDistributionSummary]? = nil,
            marker: Swift.String? = nil,
            maxItems: Swift.Int? = nil,
            nextMarker: Swift.String? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.isTruncated = isTruncated
            self.items = items
            self.marker = marker
            self.maxItems = maxItems
            self.nextMarker = nextMarker
            self.quantity = quantity
        }
    }

}

extension StreamingDistributionNotDisabled {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> StreamingDistributionNotDisabled {
        var value = StreamingDistributionNotDisabled()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension StreamingDistributionNotDisabled {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The specified CloudFront distribution is not disabled. You must disable the distribution before you can delete it.
public struct StreamingDistributionNotDisabled: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "StreamingDistributionNotDisabled" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFrontClientTypes.StreamingDistributionSummary {

    static func writingClosure(_ value: CloudFrontClientTypes.StreamingDistributionSummary?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["ARN"].write(value.arn)
        try writer["Aliases"].write(value.aliases, writingClosure: CloudFrontClientTypes.Aliases.writingClosure(_:to:))
        try writer["Comment"].write(value.comment)
        try writer["DomainName"].write(value.domainName)
        try writer["Enabled"].write(value.enabled)
        try writer["Id"].write(value.id)
        try writer["LastModifiedTime"].writeTimestamp(value.lastModifiedTime, format: .dateTime)
        try writer["PriceClass"].write(value.priceClass)
        try writer["S3Origin"].write(value.s3Origin, writingClosure: CloudFrontClientTypes.S3Origin.writingClosure(_:to:))
        try writer["Status"].write(value.status)
        try writer["TrustedSigners"].write(value.trustedSigners, writingClosure: CloudFrontClientTypes.TrustedSigners.writingClosure(_:to:))
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.StreamingDistributionSummary {
        var value = CloudFrontClientTypes.StreamingDistributionSummary()
        value.id = try reader["Id"].readIfPresent()
        value.arn = try reader["ARN"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: .dateTime)
        value.domainName = try reader["DomainName"].readIfPresent()
        value.s3Origin = try reader["S3Origin"].readIfPresent(readingClosure: CloudFrontClientTypes.S3Origin.readingClosure(from:))
        value.aliases = try reader["Aliases"].readIfPresent(readingClosure: CloudFrontClientTypes.Aliases.readingClosure(from:))
        value.trustedSigners = try reader["TrustedSigners"].readIfPresent(readingClosure: CloudFrontClientTypes.TrustedSigners.readingClosure(from:))
        value.comment = try reader["Comment"].readIfPresent()
        value.priceClass = try reader["PriceClass"].readIfPresent()
        value.enabled = try reader["Enabled"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// A summary of the information for a CloudFront streaming distribution.
    public struct StreamingDistributionSummary: Swift.Equatable {
        /// A complex type that contains information about CNAMEs (alternate domain names), if any, for this streaming distribution.
        /// This member is required.
        public var aliases: CloudFrontClientTypes.Aliases?
        /// The ARN (Amazon Resource Name) for the streaming distribution. For example: arn:aws:cloudfront::123456789012:streaming-distribution/EDFDVBD632BHDS5, where 123456789012 is your Amazon Web Services account ID.
        /// This member is required.
        public var arn: Swift.String?
        /// The comment originally specified when this distribution was created.
        /// This member is required.
        public var comment: Swift.String?
        /// The domain name corresponding to the distribution, for example, d111111abcdef8.cloudfront.net.
        /// This member is required.
        public var domainName: Swift.String?
        /// Whether the distribution is enabled to accept end user requests for content.
        /// This member is required.
        public var enabled: Swift.Bool?
        /// The identifier for the distribution, for example, EDFDVBD632BHDS5.
        /// This member is required.
        public var id: Swift.String?
        /// The date and time the distribution was last modified.
        /// This member is required.
        public var lastModifiedTime: ClientRuntime.Date?
        /// A complex type that contains information about price class for this streaming distribution.
        /// This member is required.
        public var priceClass: CloudFrontClientTypes.PriceClass?
        /// A complex type that contains information about the Amazon S3 bucket from which you want CloudFront to get your media files for distribution.
        /// This member is required.
        public var s3Origin: CloudFrontClientTypes.S3Origin?
        /// Indicates the current status of the distribution. When the status is Deployed, the distribution's information is fully propagated throughout the Amazon CloudFront system.
        /// This member is required.
        public var status: Swift.String?
        /// A complex type that specifies the Amazon Web Services accounts, if any, that you want to allow to create signed URLs for private content. If you want to require signed URLs in requests for objects in the target origin that match the PathPattern for this cache behavior, specify true for Enabled, and specify the applicable values for Quantity and Items.If you don't want to require signed URLs in requests for objects that match PathPattern, specify false for Enabled and 0 for Quantity. Omit Items. To add, change, or remove one or more trusted signers, change Enabled to true (if it's currently false), change Quantity as applicable, and specify all of the trusted signers that you want to include in the updated distribution. For more information, see [Serving Private Content through CloudFront](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html) in the Amazon CloudFront Developer Guide.
        /// This member is required.
        public var trustedSigners: CloudFrontClientTypes.TrustedSigners?

        public init(
            aliases: CloudFrontClientTypes.Aliases? = nil,
            arn: Swift.String? = nil,
            comment: Swift.String? = nil,
            domainName: Swift.String? = nil,
            enabled: Swift.Bool? = nil,
            id: Swift.String? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            priceClass: CloudFrontClientTypes.PriceClass? = nil,
            s3Origin: CloudFrontClientTypes.S3Origin? = nil,
            status: Swift.String? = nil,
            trustedSigners: CloudFrontClientTypes.TrustedSigners? = nil
        )
        {
            self.aliases = aliases
            self.arn = arn
            self.comment = comment
            self.domainName = domainName
            self.enabled = enabled
            self.id = id
            self.lastModifiedTime = lastModifiedTime
            self.priceClass = priceClass
            self.s3Origin = s3Origin
            self.status = status
            self.trustedSigners = trustedSigners
        }
    }

}

extension CloudFrontClientTypes.StreamingLoggingConfig {

    static func writingClosure(_ value: CloudFrontClientTypes.StreamingLoggingConfig?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Bucket"].write(value.bucket)
        try writer["Enabled"].write(value.enabled)
        try writer["Prefix"].write(value.`prefix`)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.StreamingLoggingConfig {
        var value = CloudFrontClientTypes.StreamingLoggingConfig()
        value.enabled = try reader["Enabled"].readIfPresent()
        value.bucket = try reader["Bucket"].readIfPresent()
        value.`prefix` = try reader["Prefix"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// A complex type that controls whether access logs are written for this streaming distribution.
    public struct StreamingLoggingConfig: Swift.Equatable {
        /// The Amazon S3 bucket to store the access logs in, for example, myawslogbucket.s3.amazonaws.com.
        /// This member is required.
        public var bucket: Swift.String?
        /// Specifies whether you want CloudFront to save access logs to an Amazon S3 bucket. If you don't want to enable logging when you create a streaming distribution or if you want to disable logging for an existing streaming distribution, specify false for Enabled, and specify empty Bucket and Prefix elements. If you specify false for Enabled but you specify values for Bucket and Prefix, the values are automatically deleted.
        /// This member is required.
        public var enabled: Swift.Bool?
        /// An optional string that you want CloudFront to prefix to the access log filenames for this streaming distribution, for example, myprefix/. If you want to enable logging, but you don't want to specify a prefix, you still must include an empty Prefix element in the Logging element.
        /// This member is required.
        public var `prefix`: Swift.String?

        public init(
            bucket: Swift.String? = nil,
            enabled: Swift.Bool? = nil,
            `prefix`: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.enabled = enabled
            self.`prefix` = `prefix`
        }
    }

}

extension CloudFrontClientTypes.Tag {

    static func writingClosure(_ value: CloudFrontClientTypes.Tag?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.Tag {
        var value = CloudFrontClientTypes.Tag()
        value.key = try reader["Key"].readIfPresent()
        value.value = try reader["Value"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// A complex type that contains Tag key and Tag value.
    public struct Tag: Swift.Equatable {
        /// A string that contains Tag key. The string length should be between 1 and 128 characters. Valid characters include a-z, A-Z, 0-9, space, and the special characters _ - . : / = + @.
        /// This member is required.
        public var key: Swift.String?
        /// A string that contains an optional Tag value. The string length should be between 0 and 256 characters. Valid characters include a-z, A-Z, 0-9, space, and the special characters _ - . : / = + @.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension CloudFrontClientTypes.TagKeys {

    static func writingClosure(_ value: CloudFrontClientTypes.TagKeys?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Items"].writeList(value.items, memberWritingClosure: Swift.String.writingClosure(_:to:), memberNodeInfo: "Key", isFlattened: false)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.TagKeys {
        var value = CloudFrontClientTypes.TagKeys()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure(from:), memberNodeInfo: "Key", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// A complex type that contains zero or more Tag elements.
    public struct TagKeys: Swift.Equatable {
        /// A complex type that contains Tag key elements.
        public var items: [Swift.String]?

        public init(
            items: [Swift.String]? = nil
        )
        {
            self.items = items
        }
    }

}

extension TagResourceInput {
    static func writingClosure(_ value: TagResourceInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Tags"].write(value.tags, writingClosure: CloudFrontClientTypes.Tags.writingClosure(_:to:))
    }
}

extension TagResourceInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "Operation", value: "Tag"))
            guard let resource = resource else {
                let message = "Creating a URL Query Item failed. resource is required and must not be nil."
                throw ClientRuntime.ClientError.unknownError(message)
            }
            let resourceQueryItem = ClientRuntime.URLQueryItem(name: "Resource".urlPercentEncoding(), value: Swift.String(resource).urlPercentEncoding())
            items.append(resourceQueryItem)
            return items
        }
    }
}

extension TagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2020-05-31/tagging"
    }
}

/// The request to add tags to a CloudFront resource.
public struct TagResourceInput: Swift.Equatable {
    /// An ARN of a CloudFront resource.
    /// This member is required.
    public var resource: Swift.String?
    /// A complex type that contains zero or more Tag elements.
    /// This member is required.
    public var tags: CloudFrontClientTypes.Tags?

    public init(
        resource: Swift.String? = nil,
        tags: CloudFrontClientTypes.Tags? = nil
    )
    {
        self.resource = resource
        self.tags = tags
    }
}

extension TagResourceOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> TagResourceOutput {
        let reader = responseReader
        var value = TagResourceOutput()
        return value
    }
}

public struct TagResourceOutput: Swift.Equatable {

    public init() { }
}

enum TagResourceOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension CloudFrontClientTypes.Tags {

    static func writingClosure(_ value: CloudFrontClientTypes.Tags?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Items"].writeList(value.items, memberWritingClosure: CloudFrontClientTypes.Tag.writingClosure(_:to:), memberNodeInfo: "Tag", isFlattened: false)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.Tags {
        var value = CloudFrontClientTypes.Tags()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: CloudFrontClientTypes.Tag.readingClosure(from:), memberNodeInfo: "Tag", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// A complex type that contains zero or more Tag elements.
    public struct Tags: Swift.Equatable {
        /// A complex type that contains Tag elements.
        public var items: [CloudFrontClientTypes.Tag]?

        public init(
            items: [CloudFrontClientTypes.Tag]? = nil
        )
        {
            self.items = items
        }
    }

}

extension TestFunctionFailed {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TestFunctionFailed {
        var value = TestFunctionFailed()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TestFunctionFailed {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The CloudFront function failed.
public struct TestFunctionFailed: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TestFunctionFailed" }
    public static var fault: ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TestFunctionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TestFunctionInput(ifMatch: \(Swift.String(describing: ifMatch)), name: \(Swift.String(describing: name)), stage: \(Swift.String(describing: stage)), eventObject: \"CONTENT_REDACTED\")"}
}

extension TestFunctionInput {
    static func writingClosure(_ value: TestFunctionInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["EventObject"].write(value.eventObject)
        try writer["Stage"].write(value.stage)
    }
}

extension TestFunctionInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let ifMatch = ifMatch {
            items.add(Header(name: "If-Match", value: Swift.String(ifMatch)))
        }
        return items
    }
}

extension TestFunctionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let name = name else {
            return nil
        }
        return "/2020-05-31/function/\(name.urlPercentEncoding())/test"
    }
}

public struct TestFunctionInput: Swift.Equatable {
    /// The event object to test the function with. For more information about the structure of the event object, see [Testing functions](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/managing-functions.html#test-function) in the Amazon CloudFront Developer Guide.
    /// This member is required.
    public var eventObject: ClientRuntime.Data?
    /// The current version (ETag value) of the function that you are testing, which you can get using DescribeFunction.
    /// This member is required.
    public var ifMatch: Swift.String?
    /// The name of the function that you are testing.
    /// This member is required.
    public var name: Swift.String?
    /// The stage of the function that you are testing, either DEVELOPMENT or LIVE.
    public var stage: CloudFrontClientTypes.FunctionStage?

    public init(
        eventObject: ClientRuntime.Data? = nil,
        ifMatch: Swift.String? = nil,
        name: Swift.String? = nil,
        stage: CloudFrontClientTypes.FunctionStage? = nil
    )
    {
        self.eventObject = eventObject
        self.ifMatch = ifMatch
        self.name = name
        self.stage = stage
    }
}

extension TestFunctionOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> TestFunctionOutput {
        let reader = responseReader
        var value = TestFunctionOutput()
        value.testResult = try reader.read(readingClosure: CloudFrontClientTypes.TestResult.readingClosure(from:))
        return value
    }
}

public struct TestFunctionOutput: Swift.Equatable {
    /// An object that represents the result of running the function with the provided event object.
    public var testResult: CloudFrontClientTypes.TestResult?

    public init(
        testResult: CloudFrontClientTypes.TestResult? = nil
    )
    {
        self.testResult = testResult
    }
}

enum TestFunctionOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension CloudFrontClientTypes.TestResult {

    static func writingClosure(_ value: CloudFrontClientTypes.TestResult?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["ComputeUtilization"].write(value.computeUtilization)
        try writer["FunctionErrorMessage"].write(value.functionErrorMessage)
        try writer["FunctionExecutionLogs"].writeList(value.functionExecutionLogs, memberWritingClosure: Swift.String.writingClosure(_:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["FunctionOutput"].write(value.functionOutput)
        try writer["FunctionSummary"].write(value.functionSummary, writingClosure: CloudFrontClientTypes.FunctionSummary.writingClosure(_:to:))
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.TestResult {
        var value = CloudFrontClientTypes.TestResult()
        value.functionSummary = try reader["FunctionSummary"].readIfPresent(readingClosure: CloudFrontClientTypes.FunctionSummary.readingClosure(from:))
        value.computeUtilization = try reader["ComputeUtilization"].readIfPresent()
        value.functionExecutionLogs = try reader["FunctionExecutionLogs"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure(from:), memberNodeInfo: "member", isFlattened: false)
        value.functionErrorMessage = try reader["FunctionErrorMessage"].readIfPresent()
        value.functionOutput = try reader["FunctionOutput"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes.TestResult: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TestResult(computeUtilization: \(Swift.String(describing: computeUtilization)), functionSummary: \(Swift.String(describing: functionSummary)), functionErrorMessage: \"CONTENT_REDACTED\", functionExecutionLogs: \"CONTENT_REDACTED\", functionOutput: \"CONTENT_REDACTED\")"}
}

extension CloudFrontClientTypes {
    /// Contains the result of testing a CloudFront function with TestFunction.
    public struct TestResult: Swift.Equatable {
        /// The amount of time that the function took to run as a percentage of the maximum allowed time. For example, a compute utilization of 35 means that the function completed in 35% of the maximum allowed time.
        public var computeUtilization: Swift.String?
        /// If the result of testing the function was an error, this field contains the error message.
        public var functionErrorMessage: Swift.String?
        /// Contains the log lines that the function wrote (if any) when running the test.
        public var functionExecutionLogs: [Swift.String]?
        /// The event object returned by the function. For more information about the structure of the event object, see [Event object structure](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/functions-event-structure.html) in the Amazon CloudFront Developer Guide.
        public var functionOutput: Swift.String?
        /// Contains configuration information and metadata about the CloudFront function that was tested.
        public var functionSummary: CloudFrontClientTypes.FunctionSummary?

        public init(
            computeUtilization: Swift.String? = nil,
            functionErrorMessage: Swift.String? = nil,
            functionExecutionLogs: [Swift.String]? = nil,
            functionOutput: Swift.String? = nil,
            functionSummary: CloudFrontClientTypes.FunctionSummary? = nil
        )
        {
            self.computeUtilization = computeUtilization
            self.functionErrorMessage = functionErrorMessage
            self.functionExecutionLogs = functionExecutionLogs
            self.functionOutput = functionOutput
            self.functionSummary = functionSummary
        }
    }

}

extension TooLongCSPInResponseHeadersPolicy {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooLongCSPInResponseHeadersPolicy {
        var value = TooLongCSPInResponseHeadersPolicy()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooLongCSPInResponseHeadersPolicy {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The length of the Content-Security-Policy header value in the response headers policy exceeds the maximum. For more information, see [Quotas](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html) (formerly known as limits) in the Amazon CloudFront Developer Guide.
public struct TooLongCSPInResponseHeadersPolicy: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooLongCSPInResponseHeadersPolicy" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyCacheBehaviors {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyCacheBehaviors {
        var value = TooManyCacheBehaviors()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyCacheBehaviors {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// You cannot create more cache behaviors for the distribution.
public struct TooManyCacheBehaviors: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyCacheBehaviors" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyCachePolicies {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyCachePolicies {
        var value = TooManyCachePolicies()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyCachePolicies {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// You have reached the maximum number of cache policies for this Amazon Web Services account. For more information, see [Quotas](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html) (formerly known as limits) in the Amazon CloudFront Developer Guide.
public struct TooManyCachePolicies: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyCachePolicies" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyCertificates {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyCertificates {
        var value = TooManyCertificates()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyCertificates {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// You cannot create anymore custom SSL/TLS certificates.
public struct TooManyCertificates: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyCertificates" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyCloudFrontOriginAccessIdentities {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyCloudFrontOriginAccessIdentities {
        var value = TooManyCloudFrontOriginAccessIdentities()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyCloudFrontOriginAccessIdentities {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// Processing your request would cause you to exceed the maximum number of origin access identities allowed.
public struct TooManyCloudFrontOriginAccessIdentities: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyCloudFrontOriginAccessIdentities" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyContinuousDeploymentPolicies {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyContinuousDeploymentPolicies {
        var value = TooManyContinuousDeploymentPolicies()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyContinuousDeploymentPolicies {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// You have reached the maximum number of continuous deployment policies for this Amazon Web Services account.
public struct TooManyContinuousDeploymentPolicies: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyContinuousDeploymentPolicies" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyCookieNamesInWhiteList {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyCookieNamesInWhiteList {
        var value = TooManyCookieNamesInWhiteList()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyCookieNamesInWhiteList {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// Your request contains more cookie names in the whitelist than are allowed per cache behavior.
public struct TooManyCookieNamesInWhiteList: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyCookieNamesInWhiteList" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyCookiesInCachePolicy {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyCookiesInCachePolicy {
        var value = TooManyCookiesInCachePolicy()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyCookiesInCachePolicy {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The number of cookies in the cache policy exceeds the maximum. For more information, see [Quotas](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html) (formerly known as limits) in the Amazon CloudFront Developer Guide.
public struct TooManyCookiesInCachePolicy: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyCookiesInCachePolicy" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyCookiesInOriginRequestPolicy {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyCookiesInOriginRequestPolicy {
        var value = TooManyCookiesInOriginRequestPolicy()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyCookiesInOriginRequestPolicy {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The number of cookies in the origin request policy exceeds the maximum. For more information, see [Quotas](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html) (formerly known as limits) in the Amazon CloudFront Developer Guide.
public struct TooManyCookiesInOriginRequestPolicy: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyCookiesInOriginRequestPolicy" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyCustomHeadersInResponseHeadersPolicy {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyCustomHeadersInResponseHeadersPolicy {
        var value = TooManyCustomHeadersInResponseHeadersPolicy()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyCustomHeadersInResponseHeadersPolicy {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The number of custom headers in the response headers policy exceeds the maximum. For more information, see [Quotas](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html) (formerly known as limits) in the Amazon CloudFront Developer Guide.
public struct TooManyCustomHeadersInResponseHeadersPolicy: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyCustomHeadersInResponseHeadersPolicy" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyDistributionCNAMEs {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyDistributionCNAMEs {
        var value = TooManyDistributionCNAMEs()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyDistributionCNAMEs {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// Your request contains more CNAMEs than are allowed per distribution.
public struct TooManyDistributionCNAMEs: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyDistributionCNAMEs" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyDistributions {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyDistributions {
        var value = TooManyDistributions()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyDistributions {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// Processing your request would cause you to exceed the maximum number of distributions allowed.
public struct TooManyDistributions: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyDistributions" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyDistributionsAssociatedToCachePolicy {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyDistributionsAssociatedToCachePolicy {
        var value = TooManyDistributionsAssociatedToCachePolicy()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyDistributionsAssociatedToCachePolicy {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The maximum number of distributions have been associated with the specified cache policy. For more information, see [Quotas](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html) (formerly known as limits) in the Amazon CloudFront Developer Guide.
public struct TooManyDistributionsAssociatedToCachePolicy: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyDistributionsAssociatedToCachePolicy" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyDistributionsAssociatedToFieldLevelEncryptionConfig {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyDistributionsAssociatedToFieldLevelEncryptionConfig {
        var value = TooManyDistributionsAssociatedToFieldLevelEncryptionConfig()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyDistributionsAssociatedToFieldLevelEncryptionConfig {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The maximum number of distributions have been associated with the specified configuration for field-level encryption.
public struct TooManyDistributionsAssociatedToFieldLevelEncryptionConfig: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyDistributionsAssociatedToFieldLevelEncryptionConfig" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyDistributionsAssociatedToKeyGroup {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyDistributionsAssociatedToKeyGroup {
        var value = TooManyDistributionsAssociatedToKeyGroup()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyDistributionsAssociatedToKeyGroup {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The number of distributions that reference this key group is more than the maximum allowed. For more information, see [Quotas](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html) (formerly known as limits) in the Amazon CloudFront Developer Guide.
public struct TooManyDistributionsAssociatedToKeyGroup: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyDistributionsAssociatedToKeyGroup" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyDistributionsAssociatedToOriginAccessControl {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyDistributionsAssociatedToOriginAccessControl {
        var value = TooManyDistributionsAssociatedToOriginAccessControl()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyDistributionsAssociatedToOriginAccessControl {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The maximum number of distributions have been associated with the specified origin access control. For more information, see [Quotas](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html) (formerly known as limits) in the Amazon CloudFront Developer Guide.
public struct TooManyDistributionsAssociatedToOriginAccessControl: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyDistributionsAssociatedToOriginAccessControl" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyDistributionsAssociatedToOriginRequestPolicy {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyDistributionsAssociatedToOriginRequestPolicy {
        var value = TooManyDistributionsAssociatedToOriginRequestPolicy()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyDistributionsAssociatedToOriginRequestPolicy {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The maximum number of distributions have been associated with the specified origin request policy. For more information, see [Quotas](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html) (formerly known as limits) in the Amazon CloudFront Developer Guide.
public struct TooManyDistributionsAssociatedToOriginRequestPolicy: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyDistributionsAssociatedToOriginRequestPolicy" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyDistributionsAssociatedToResponseHeadersPolicy {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyDistributionsAssociatedToResponseHeadersPolicy {
        var value = TooManyDistributionsAssociatedToResponseHeadersPolicy()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyDistributionsAssociatedToResponseHeadersPolicy {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The maximum number of distributions have been associated with the specified response headers policy. For more information, see [Quotas](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html) (formerly known as limits) in the Amazon CloudFront Developer Guide.
public struct TooManyDistributionsAssociatedToResponseHeadersPolicy: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyDistributionsAssociatedToResponseHeadersPolicy" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyDistributionsWithFunctionAssociations {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyDistributionsWithFunctionAssociations {
        var value = TooManyDistributionsWithFunctionAssociations()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyDistributionsWithFunctionAssociations {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// You have reached the maximum number of distributions that are associated with a CloudFront function. For more information, see [Quotas](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html) (formerly known as limits) in the Amazon CloudFront Developer Guide.
public struct TooManyDistributionsWithFunctionAssociations: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyDistributionsWithFunctionAssociations" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyDistributionsWithLambdaAssociations {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyDistributionsWithLambdaAssociations {
        var value = TooManyDistributionsWithLambdaAssociations()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyDistributionsWithLambdaAssociations {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// Processing your request would cause the maximum number of distributions with Lambda@Edge function associations per owner to be exceeded.
public struct TooManyDistributionsWithLambdaAssociations: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyDistributionsWithLambdaAssociations" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyDistributionsWithSingleFunctionARN {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyDistributionsWithSingleFunctionARN {
        var value = TooManyDistributionsWithSingleFunctionARN()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyDistributionsWithSingleFunctionARN {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The maximum number of distributions have been associated with the specified Lambda@Edge function.
public struct TooManyDistributionsWithSingleFunctionARN: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyDistributionsWithSingleFunctionARN" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyFieldLevelEncryptionConfigs {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyFieldLevelEncryptionConfigs {
        var value = TooManyFieldLevelEncryptionConfigs()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyFieldLevelEncryptionConfigs {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The maximum number of configurations for field-level encryption have been created.
public struct TooManyFieldLevelEncryptionConfigs: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyFieldLevelEncryptionConfigs" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyFieldLevelEncryptionContentTypeProfiles {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyFieldLevelEncryptionContentTypeProfiles {
        var value = TooManyFieldLevelEncryptionContentTypeProfiles()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyFieldLevelEncryptionContentTypeProfiles {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The maximum number of content type profiles for field-level encryption have been created.
public struct TooManyFieldLevelEncryptionContentTypeProfiles: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyFieldLevelEncryptionContentTypeProfiles" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyFieldLevelEncryptionEncryptionEntities {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyFieldLevelEncryptionEncryptionEntities {
        var value = TooManyFieldLevelEncryptionEncryptionEntities()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyFieldLevelEncryptionEncryptionEntities {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The maximum number of encryption entities for field-level encryption have been created.
public struct TooManyFieldLevelEncryptionEncryptionEntities: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyFieldLevelEncryptionEncryptionEntities" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyFieldLevelEncryptionFieldPatterns {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyFieldLevelEncryptionFieldPatterns {
        var value = TooManyFieldLevelEncryptionFieldPatterns()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyFieldLevelEncryptionFieldPatterns {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The maximum number of field patterns for field-level encryption have been created.
public struct TooManyFieldLevelEncryptionFieldPatterns: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyFieldLevelEncryptionFieldPatterns" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyFieldLevelEncryptionProfiles {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyFieldLevelEncryptionProfiles {
        var value = TooManyFieldLevelEncryptionProfiles()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyFieldLevelEncryptionProfiles {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The maximum number of profiles for field-level encryption have been created.
public struct TooManyFieldLevelEncryptionProfiles: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyFieldLevelEncryptionProfiles" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyFieldLevelEncryptionQueryArgProfiles {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyFieldLevelEncryptionQueryArgProfiles {
        var value = TooManyFieldLevelEncryptionQueryArgProfiles()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyFieldLevelEncryptionQueryArgProfiles {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The maximum number of query arg profiles for field-level encryption have been created.
public struct TooManyFieldLevelEncryptionQueryArgProfiles: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyFieldLevelEncryptionQueryArgProfiles" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyFunctionAssociations {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyFunctionAssociations {
        var value = TooManyFunctionAssociations()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyFunctionAssociations {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// You have reached the maximum number of CloudFront function associations for this distribution. For more information, see [Quotas](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html) (formerly known as limits) in the Amazon CloudFront Developer Guide.
public struct TooManyFunctionAssociations: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyFunctionAssociations" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyFunctions {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyFunctions {
        var value = TooManyFunctions()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyFunctions {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// You have reached the maximum number of CloudFront functions for this Amazon Web Services account. For more information, see [Quotas](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html) (formerly known as limits) in the Amazon CloudFront Developer Guide.
public struct TooManyFunctions: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyFunctions" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyHeadersInCachePolicy {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyHeadersInCachePolicy {
        var value = TooManyHeadersInCachePolicy()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyHeadersInCachePolicy {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The number of headers in the cache policy exceeds the maximum. For more information, see [Quotas](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html) (formerly known as limits) in the Amazon CloudFront Developer Guide.
public struct TooManyHeadersInCachePolicy: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyHeadersInCachePolicy" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyHeadersInForwardedValues {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyHeadersInForwardedValues {
        var value = TooManyHeadersInForwardedValues()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyHeadersInForwardedValues {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// Your request contains too many headers in forwarded values.
public struct TooManyHeadersInForwardedValues: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyHeadersInForwardedValues" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyHeadersInOriginRequestPolicy {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyHeadersInOriginRequestPolicy {
        var value = TooManyHeadersInOriginRequestPolicy()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyHeadersInOriginRequestPolicy {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The number of headers in the origin request policy exceeds the maximum. For more information, see [Quotas](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html) (formerly known as limits) in the Amazon CloudFront Developer Guide.
public struct TooManyHeadersInOriginRequestPolicy: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyHeadersInOriginRequestPolicy" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyInvalidationsInProgress {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyInvalidationsInProgress {
        var value = TooManyInvalidationsInProgress()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyInvalidationsInProgress {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// You have exceeded the maximum number of allowable InProgress invalidation batch requests, or invalidation objects.
public struct TooManyInvalidationsInProgress: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyInvalidationsInProgress" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyKeyGroups {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyKeyGroups {
        var value = TooManyKeyGroups()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyKeyGroups {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// You have reached the maximum number of key groups for this Amazon Web Services account. For more information, see [Quotas](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html) (formerly known as limits) in the Amazon CloudFront Developer Guide.
public struct TooManyKeyGroups: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyKeyGroups" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyKeyGroupsAssociatedToDistribution {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyKeyGroupsAssociatedToDistribution {
        var value = TooManyKeyGroupsAssociatedToDistribution()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyKeyGroupsAssociatedToDistribution {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The number of key groups referenced by this distribution is more than the maximum allowed. For more information, see [Quotas](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html) (formerly known as limits) in the Amazon CloudFront Developer Guide.
public struct TooManyKeyGroupsAssociatedToDistribution: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyKeyGroupsAssociatedToDistribution" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyLambdaFunctionAssociations {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyLambdaFunctionAssociations {
        var value = TooManyLambdaFunctionAssociations()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyLambdaFunctionAssociations {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// Your request contains more Lambda@Edge function associations than are allowed per distribution.
public struct TooManyLambdaFunctionAssociations: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyLambdaFunctionAssociations" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyOriginAccessControls {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyOriginAccessControls {
        var value = TooManyOriginAccessControls()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyOriginAccessControls {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The number of origin access controls in your Amazon Web Services account exceeds the maximum allowed. For more information, see [Quotas](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html) (formerly known as limits) in the Amazon CloudFront Developer Guide.
public struct TooManyOriginAccessControls: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyOriginAccessControls" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyOriginCustomHeaders {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyOriginCustomHeaders {
        var value = TooManyOriginCustomHeaders()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyOriginCustomHeaders {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// Your request contains too many origin custom headers.
public struct TooManyOriginCustomHeaders: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyOriginCustomHeaders" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyOriginGroupsPerDistribution {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyOriginGroupsPerDistribution {
        var value = TooManyOriginGroupsPerDistribution()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyOriginGroupsPerDistribution {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// Processing your request would cause you to exceed the maximum number of origin groups allowed.
public struct TooManyOriginGroupsPerDistribution: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyOriginGroupsPerDistribution" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyOriginRequestPolicies {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyOriginRequestPolicies {
        var value = TooManyOriginRequestPolicies()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyOriginRequestPolicies {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// You have reached the maximum number of origin request policies for this Amazon Web Services account. For more information, see [Quotas](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html) (formerly known as limits) in the Amazon CloudFront Developer Guide.
public struct TooManyOriginRequestPolicies: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyOriginRequestPolicies" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyOrigins {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyOrigins {
        var value = TooManyOrigins()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyOrigins {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// You cannot create more origins for the distribution.
public struct TooManyOrigins: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyOrigins" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyPublicKeys {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyPublicKeys {
        var value = TooManyPublicKeys()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyPublicKeys {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The maximum number of public keys for field-level encryption have been created. To create a new public key, delete one of the existing keys.
public struct TooManyPublicKeys: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyPublicKeys" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyPublicKeysInKeyGroup {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyPublicKeysInKeyGroup {
        var value = TooManyPublicKeysInKeyGroup()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyPublicKeysInKeyGroup {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The number of public keys in this key group is more than the maximum allowed. For more information, see [Quotas](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html) (formerly known as limits) in the Amazon CloudFront Developer Guide.
public struct TooManyPublicKeysInKeyGroup: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyPublicKeysInKeyGroup" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyQueryStringParameters {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyQueryStringParameters {
        var value = TooManyQueryStringParameters()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyQueryStringParameters {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// Your request contains too many query string parameters.
public struct TooManyQueryStringParameters: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyQueryStringParameters" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyQueryStringsInCachePolicy {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyQueryStringsInCachePolicy {
        var value = TooManyQueryStringsInCachePolicy()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyQueryStringsInCachePolicy {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The number of query strings in the cache policy exceeds the maximum. For more information, see [Quotas](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html) (formerly known as limits) in the Amazon CloudFront Developer Guide.
public struct TooManyQueryStringsInCachePolicy: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyQueryStringsInCachePolicy" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyQueryStringsInOriginRequestPolicy {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyQueryStringsInOriginRequestPolicy {
        var value = TooManyQueryStringsInOriginRequestPolicy()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyQueryStringsInOriginRequestPolicy {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The number of query strings in the origin request policy exceeds the maximum. For more information, see [Quotas](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html) (formerly known as limits) in the Amazon CloudFront Developer Guide.
public struct TooManyQueryStringsInOriginRequestPolicy: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyQueryStringsInOriginRequestPolicy" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyRealtimeLogConfigs {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyRealtimeLogConfigs {
        var value = TooManyRealtimeLogConfigs()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyRealtimeLogConfigs {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// You have reached the maximum number of real-time log configurations for this Amazon Web Services account. For more information, see [Quotas](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html) (formerly known as limits) in the Amazon CloudFront Developer Guide.
public struct TooManyRealtimeLogConfigs: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyRealtimeLogConfigs" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyRemoveHeadersInResponseHeadersPolicy {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyRemoveHeadersInResponseHeadersPolicy {
        var value = TooManyRemoveHeadersInResponseHeadersPolicy()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyRemoveHeadersInResponseHeadersPolicy {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The number of headers in RemoveHeadersConfig in the response headers policy exceeds the maximum. For more information, see [Quotas](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html) (formerly known as limits) in the Amazon CloudFront Developer Guide.
public struct TooManyRemoveHeadersInResponseHeadersPolicy: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyRemoveHeadersInResponseHeadersPolicy" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyResponseHeadersPolicies {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyResponseHeadersPolicies {
        var value = TooManyResponseHeadersPolicies()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyResponseHeadersPolicies {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// You have reached the maximum number of response headers policies for this Amazon Web Services account. For more information, see [Quotas](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html) (formerly known as limits) in the Amazon CloudFront Developer Guide.
public struct TooManyResponseHeadersPolicies: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyResponseHeadersPolicies" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyStreamingDistributionCNAMEs {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyStreamingDistributionCNAMEs {
        var value = TooManyStreamingDistributionCNAMEs()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyStreamingDistributionCNAMEs {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// Your request contains more CNAMEs than are allowed per distribution.
public struct TooManyStreamingDistributionCNAMEs: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyStreamingDistributionCNAMEs" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyStreamingDistributions {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyStreamingDistributions {
        var value = TooManyStreamingDistributions()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyStreamingDistributions {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// Processing your request would cause you to exceed the maximum number of streaming distributions allowed.
public struct TooManyStreamingDistributions: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyStreamingDistributions" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TooManyTrustedSigners {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TooManyTrustedSigners {
        var value = TooManyTrustedSigners()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TooManyTrustedSigners {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// Your request contains more trusted signers than are allowed per distribution.
public struct TooManyTrustedSigners: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyTrustedSigners" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFrontClientTypes.TrafficConfig {

    static func writingClosure(_ value: CloudFrontClientTypes.TrafficConfig?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["SingleHeaderConfig"].write(value.singleHeaderConfig, writingClosure: CloudFrontClientTypes.ContinuousDeploymentSingleHeaderConfig.writingClosure(_:to:))
        try writer["SingleWeightConfig"].write(value.singleWeightConfig, writingClosure: CloudFrontClientTypes.ContinuousDeploymentSingleWeightConfig.writingClosure(_:to:))
        try writer["Type"].write(value.type)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.TrafficConfig {
        var value = CloudFrontClientTypes.TrafficConfig()
        value.singleWeightConfig = try reader["SingleWeightConfig"].readIfPresent(readingClosure: CloudFrontClientTypes.ContinuousDeploymentSingleWeightConfig.readingClosure(from:))
        value.singleHeaderConfig = try reader["SingleHeaderConfig"].readIfPresent(readingClosure: CloudFrontClientTypes.ContinuousDeploymentSingleHeaderConfig.readingClosure(from:))
        value.type = try reader["Type"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// The traffic configuration of your continuous deployment.
    public struct TrafficConfig: Swift.Equatable {
        /// Determines which HTTP requests are sent to the staging distribution.
        public var singleHeaderConfig: CloudFrontClientTypes.ContinuousDeploymentSingleHeaderConfig?
        /// Contains the percentage of traffic to send to the staging distribution.
        public var singleWeightConfig: CloudFrontClientTypes.ContinuousDeploymentSingleWeightConfig?
        /// The type of traffic configuration.
        /// This member is required.
        public var type: CloudFrontClientTypes.ContinuousDeploymentPolicyType?

        public init(
            singleHeaderConfig: CloudFrontClientTypes.ContinuousDeploymentSingleHeaderConfig? = nil,
            singleWeightConfig: CloudFrontClientTypes.ContinuousDeploymentSingleWeightConfig? = nil,
            type: CloudFrontClientTypes.ContinuousDeploymentPolicyType? = nil
        )
        {
            self.singleHeaderConfig = singleHeaderConfig
            self.singleWeightConfig = singleWeightConfig
            self.type = type
        }
    }

}

extension TrustedKeyGroupDoesNotExist {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TrustedKeyGroupDoesNotExist {
        var value = TrustedKeyGroupDoesNotExist()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TrustedKeyGroupDoesNotExist {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The specified key group does not exist.
public struct TrustedKeyGroupDoesNotExist: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TrustedKeyGroupDoesNotExist" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFrontClientTypes.TrustedKeyGroups {

    static func writingClosure(_ value: CloudFrontClientTypes.TrustedKeyGroups?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Enabled"].write(value.enabled)
        try writer["Items"].writeList(value.items, memberWritingClosure: Swift.String.writingClosure(_:to:), memberNodeInfo: "KeyGroup", isFlattened: false)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.TrustedKeyGroups {
        var value = CloudFrontClientTypes.TrustedKeyGroups()
        value.enabled = try reader["Enabled"].readIfPresent()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure(from:), memberNodeInfo: "KeyGroup", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// A list of key groups whose public keys CloudFront can use to verify the signatures of signed URLs and signed cookies.
    public struct TrustedKeyGroups: Swift.Equatable {
        /// This field is true if any of the key groups in the list have public keys that CloudFront can use to verify the signatures of signed URLs and signed cookies. If not, this field is false.
        /// This member is required.
        public var enabled: Swift.Bool?
        /// A list of key groups identifiers.
        public var items: [Swift.String]?
        /// The number of key groups in the list.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            enabled: Swift.Bool? = nil,
            items: [Swift.String]? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.enabled = enabled
            self.items = items
            self.quantity = quantity
        }
    }

}

extension TrustedSignerDoesNotExist {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> TrustedSignerDoesNotExist {
        var value = TrustedSignerDoesNotExist()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension TrustedSignerDoesNotExist {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// One or more of your trusted signers don't exist.
public struct TrustedSignerDoesNotExist: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TrustedSignerDoesNotExist" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFrontClientTypes.TrustedSigners {

    static func writingClosure(_ value: CloudFrontClientTypes.TrustedSigners?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Enabled"].write(value.enabled)
        try writer["Items"].writeList(value.items, memberWritingClosure: Swift.String.writingClosure(_:to:), memberNodeInfo: "AwsAccountNumber", isFlattened: false)
        try writer["Quantity"].write(value.quantity)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.TrustedSigners {
        var value = CloudFrontClientTypes.TrustedSigners()
        value.enabled = try reader["Enabled"].readIfPresent()
        value.quantity = try reader["Quantity"].readIfPresent()
        value.items = try reader["Items"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure(from:), memberNodeInfo: "AwsAccountNumber", isFlattened: false)
        return value
    }
}

extension CloudFrontClientTypes {
    /// A list of Amazon Web Services accounts whose public keys CloudFront can use to verify the signatures of signed URLs and signed cookies.
    public struct TrustedSigners: Swift.Equatable {
        /// This field is true if any of the Amazon Web Services accounts in the list are configured as trusted signers. If not, this field is false.
        /// This member is required.
        public var enabled: Swift.Bool?
        /// A list of Amazon Web Services account identifiers.
        public var items: [Swift.String]?
        /// The number of Amazon Web Services accounts in the list.
        /// This member is required.
        public var quantity: Swift.Int?

        public init(
            enabled: Swift.Bool? = nil,
            items: [Swift.String]? = nil,
            quantity: Swift.Int? = nil
        )
        {
            self.enabled = enabled
            self.items = items
            self.quantity = quantity
        }
    }

}

extension UnsupportedOperation {

    static func readingClosure(from reader: SmithyXML.Reader) throws -> UnsupportedOperation {
        var value = UnsupportedOperation()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension UnsupportedOperation {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(), let responseDecoder = decoder {
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// This operation is not supported in this region.
public struct UnsupportedOperation: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnsupportedOperation" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension UntagResourceInput {
    static func writingClosure(_ value: UntagResourceInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["TagKeys"].write(value.tagKeys, writingClosure: CloudFrontClientTypes.TagKeys.writingClosure(_:to:))
    }
}

extension UntagResourceInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "Operation", value: "Untag"))
            guard let resource = resource else {
                let message = "Creating a URL Query Item failed. resource is required and must not be nil."
                throw ClientRuntime.ClientError.unknownError(message)
            }
            let resourceQueryItem = ClientRuntime.URLQueryItem(name: "Resource".urlPercentEncoding(), value: Swift.String(resource).urlPercentEncoding())
            items.append(resourceQueryItem)
            return items
        }
    }
}

extension UntagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2020-05-31/tagging"
    }
}

/// The request to remove tags from a CloudFront resource.
public struct UntagResourceInput: Swift.Equatable {
    /// An ARN of a CloudFront resource.
    /// This member is required.
    public var resource: Swift.String?
    /// A complex type that contains zero or more Tag key elements.
    /// This member is required.
    public var tagKeys: CloudFrontClientTypes.TagKeys?

    public init(
        resource: Swift.String? = nil,
        tagKeys: CloudFrontClientTypes.TagKeys? = nil
    )
    {
        self.resource = resource
        self.tagKeys = tagKeys
    }
}

extension UntagResourceOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> UntagResourceOutput {
        let reader = responseReader
        var value = UntagResourceOutput()
        return value
    }
}

public struct UntagResourceOutput: Swift.Equatable {

    public init() { }
}

enum UntagResourceOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension UpdateCachePolicyInput {
    static func writingClosure(_ value: UpdateCachePolicyInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["CachePolicyConfig"].write(value.cachePolicyConfig, writingClosure: CloudFrontClientTypes.CachePolicyConfig.writingClosure(_:to:))
    }
}

extension UpdateCachePolicyInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let ifMatch = ifMatch {
            items.add(Header(name: "If-Match", value: Swift.String(ifMatch)))
        }
        return items
    }
}

extension UpdateCachePolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/cache-policy/\(id.urlPercentEncoding())"
    }
}

public struct UpdateCachePolicyInput: Swift.Equatable {
    /// A cache policy configuration.
    /// This member is required.
    public var cachePolicyConfig: CloudFrontClientTypes.CachePolicyConfig?
    /// The unique identifier for the cache policy that you are updating. The identifier is returned in a cache behavior's CachePolicyId field in the response to GetDistributionConfig.
    /// This member is required.
    public var id: Swift.String?
    /// The version of the cache policy that you are updating. The version is returned in the cache policy's ETag field in the response to GetCachePolicyConfig.
    public var ifMatch: Swift.String?

    public init(
        cachePolicyConfig: CloudFrontClientTypes.CachePolicyConfig? = nil,
        id: Swift.String? = nil,
        ifMatch: Swift.String? = nil
    )
    {
        self.cachePolicyConfig = cachePolicyConfig
        self.id = id
        self.ifMatch = ifMatch
    }
}

extension UpdateCachePolicyOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> UpdateCachePolicyOutput {
        let reader = responseReader
        var value = UpdateCachePolicyOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        value.cachePolicy = try reader.read(readingClosure: CloudFrontClientTypes.CachePolicy.readingClosure(from:))
        return value
    }
}

public struct UpdateCachePolicyOutput: Swift.Equatable {
    /// A cache policy.
    public var cachePolicy: CloudFrontClientTypes.CachePolicy?
    /// The current version of the cache policy.
    public var eTag: Swift.String?

    public init(
        cachePolicy: CloudFrontClientTypes.CachePolicy? = nil,
        eTag: Swift.String? = nil
    )
    {
        self.cachePolicy = cachePolicy
        self.eTag = eTag
    }
}

enum UpdateCachePolicyOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension UpdateCloudFrontOriginAccessIdentityInput {
    static func writingClosure(_ value: UpdateCloudFrontOriginAccessIdentityInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["CloudFrontOriginAccessIdentityConfig"].write(value.cloudFrontOriginAccessIdentityConfig, writingClosure: CloudFrontClientTypes.CloudFrontOriginAccessIdentityConfig.writingClosure(_:to:))
    }
}

extension UpdateCloudFrontOriginAccessIdentityInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let ifMatch = ifMatch {
            items.add(Header(name: "If-Match", value: Swift.String(ifMatch)))
        }
        return items
    }
}

extension UpdateCloudFrontOriginAccessIdentityInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/origin-access-identity/cloudfront/\(id.urlPercentEncoding())/config"
    }
}

/// The request to update an origin access identity.
public struct UpdateCloudFrontOriginAccessIdentityInput: Swift.Equatable {
    /// The identity's configuration information.
    /// This member is required.
    public var cloudFrontOriginAccessIdentityConfig: CloudFrontClientTypes.CloudFrontOriginAccessIdentityConfig?
    /// The identity's id.
    /// This member is required.
    public var id: Swift.String?
    /// The value of the ETag header that you received when retrieving the identity's configuration. For example: E2QWRUHAPOMQZL.
    public var ifMatch: Swift.String?

    public init(
        cloudFrontOriginAccessIdentityConfig: CloudFrontClientTypes.CloudFrontOriginAccessIdentityConfig? = nil,
        id: Swift.String? = nil,
        ifMatch: Swift.String? = nil
    )
    {
        self.cloudFrontOriginAccessIdentityConfig = cloudFrontOriginAccessIdentityConfig
        self.id = id
        self.ifMatch = ifMatch
    }
}

extension UpdateCloudFrontOriginAccessIdentityOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> UpdateCloudFrontOriginAccessIdentityOutput {
        let reader = responseReader
        var value = UpdateCloudFrontOriginAccessIdentityOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        value.cloudFrontOriginAccessIdentity = try reader.read(readingClosure: CloudFrontClientTypes.CloudFrontOriginAccessIdentity.readingClosure(from:))
        return value
    }
}

/// The returned result of the corresponding request.
public struct UpdateCloudFrontOriginAccessIdentityOutput: Swift.Equatable {
    /// The origin access identity's information.
    public var cloudFrontOriginAccessIdentity: CloudFrontClientTypes.CloudFrontOriginAccessIdentity?
    /// The current version of the configuration. For example: E2QWRUHAPOMQZL.
    public var eTag: Swift.String?

    public init(
        cloudFrontOriginAccessIdentity: CloudFrontClientTypes.CloudFrontOriginAccessIdentity? = nil,
        eTag: Swift.String? = nil
    )
    {
        self.cloudFrontOriginAccessIdentity = cloudFrontOriginAccessIdentity
        self.eTag = eTag
    }
}

enum UpdateCloudFrontOriginAccessIdentityOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension UpdateContinuousDeploymentPolicyInput {
    static func writingClosure(_ value: UpdateContinuousDeploymentPolicyInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["ContinuousDeploymentPolicyConfig"].write(value.continuousDeploymentPolicyConfig, writingClosure: CloudFrontClientTypes.ContinuousDeploymentPolicyConfig.writingClosure(_:to:))
    }
}

extension UpdateContinuousDeploymentPolicyInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let ifMatch = ifMatch {
            items.add(Header(name: "If-Match", value: Swift.String(ifMatch)))
        }
        return items
    }
}

extension UpdateContinuousDeploymentPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/continuous-deployment-policy/\(id.urlPercentEncoding())"
    }
}

public struct UpdateContinuousDeploymentPolicyInput: Swift.Equatable {
    /// The continuous deployment policy configuration.
    /// This member is required.
    public var continuousDeploymentPolicyConfig: CloudFrontClientTypes.ContinuousDeploymentPolicyConfig?
    /// The identifier of the continuous deployment policy that you are updating.
    /// This member is required.
    public var id: Swift.String?
    /// The current version (ETag value) of the continuous deployment policy that you are updating.
    public var ifMatch: Swift.String?

    public init(
        continuousDeploymentPolicyConfig: CloudFrontClientTypes.ContinuousDeploymentPolicyConfig? = nil,
        id: Swift.String? = nil,
        ifMatch: Swift.String? = nil
    )
    {
        self.continuousDeploymentPolicyConfig = continuousDeploymentPolicyConfig
        self.id = id
        self.ifMatch = ifMatch
    }
}

extension UpdateContinuousDeploymentPolicyOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> UpdateContinuousDeploymentPolicyOutput {
        let reader = responseReader
        var value = UpdateContinuousDeploymentPolicyOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        value.continuousDeploymentPolicy = try reader.read(readingClosure: CloudFrontClientTypes.ContinuousDeploymentPolicy.readingClosure(from:))
        return value
    }
}

public struct UpdateContinuousDeploymentPolicyOutput: Swift.Equatable {
    /// A continuous deployment policy.
    public var continuousDeploymentPolicy: CloudFrontClientTypes.ContinuousDeploymentPolicy?
    /// The version identifier for the current version of the continuous deployment policy.
    public var eTag: Swift.String?

    public init(
        continuousDeploymentPolicy: CloudFrontClientTypes.ContinuousDeploymentPolicy? = nil,
        eTag: Swift.String? = nil
    )
    {
        self.continuousDeploymentPolicy = continuousDeploymentPolicy
        self.eTag = eTag
    }
}

enum UpdateContinuousDeploymentPolicyOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension UpdateDistributionInput {
    static func writingClosure(_ value: UpdateDistributionInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["DistributionConfig"].write(value.distributionConfig, writingClosure: CloudFrontClientTypes.DistributionConfig.writingClosure(_:to:))
    }
}

extension UpdateDistributionInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let ifMatch = ifMatch {
            items.add(Header(name: "If-Match", value: Swift.String(ifMatch)))
        }
        return items
    }
}

extension UpdateDistributionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/distribution/\(id.urlPercentEncoding())/config"
    }
}

/// The request to update a distribution.
public struct UpdateDistributionInput: Swift.Equatable {
    /// The distribution's configuration information.
    /// This member is required.
    public var distributionConfig: CloudFrontClientTypes.DistributionConfig?
    /// The distribution's id.
    /// This member is required.
    public var id: Swift.String?
    /// The value of the ETag header that you received when retrieving the distribution's configuration. For example: E2QWRUHAPOMQZL.
    public var ifMatch: Swift.String?

    public init(
        distributionConfig: CloudFrontClientTypes.DistributionConfig? = nil,
        id: Swift.String? = nil,
        ifMatch: Swift.String? = nil
    )
    {
        self.distributionConfig = distributionConfig
        self.id = id
        self.ifMatch = ifMatch
    }
}

extension UpdateDistributionOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> UpdateDistributionOutput {
        let reader = responseReader
        var value = UpdateDistributionOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        value.distribution = try reader.read(readingClosure: CloudFrontClientTypes.Distribution.readingClosure(from:))
        return value
    }
}

/// The returned result of the corresponding request.
public struct UpdateDistributionOutput: Swift.Equatable {
    /// The distribution's information.
    public var distribution: CloudFrontClientTypes.Distribution?
    /// The current version of the configuration. For example: E2QWRUHAPOMQZL.
    public var eTag: Swift.String?

    public init(
        distribution: CloudFrontClientTypes.Distribution? = nil,
        eTag: Swift.String? = nil
    )
    {
        self.distribution = distribution
        self.eTag = eTag
    }
}

enum UpdateDistributionOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension UpdateDistributionWithStagingConfigInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let ifMatch = ifMatch {
            items.add(Header(name: "If-Match", value: Swift.String(ifMatch)))
        }
        return items
    }
}

extension UpdateDistributionWithStagingConfigInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let stagingDistributionId = stagingDistributionId {
                let stagingDistributionIdQueryItem = ClientRuntime.URLQueryItem(name: "StagingDistributionId".urlPercentEncoding(), value: Swift.String(stagingDistributionId).urlPercentEncoding())
                items.append(stagingDistributionIdQueryItem)
            }
            return items
        }
    }
}

extension UpdateDistributionWithStagingConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/distribution/\(id.urlPercentEncoding())/promote-staging-config"
    }
}

public struct UpdateDistributionWithStagingConfigInput: Swift.Equatable {
    /// The identifier of the primary distribution to which you are copying a staging distribution's configuration.
    /// This member is required.
    public var id: Swift.String?
    /// The current versions (ETag values) of both primary and staging distributions. Provide these in the following format: ,
    public var ifMatch: Swift.String?
    /// The identifier of the staging distribution whose configuration you are copying to the primary distribution.
    public var stagingDistributionId: Swift.String?

    public init(
        id: Swift.String? = nil,
        ifMatch: Swift.String? = nil,
        stagingDistributionId: Swift.String? = nil
    )
    {
        self.id = id
        self.ifMatch = ifMatch
        self.stagingDistributionId = stagingDistributionId
    }
}

extension UpdateDistributionWithStagingConfigOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> UpdateDistributionWithStagingConfigOutput {
        let reader = responseReader
        var value = UpdateDistributionWithStagingConfigOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        value.distribution = try reader.read(readingClosure: CloudFrontClientTypes.Distribution.readingClosure(from:))
        return value
    }
}

public struct UpdateDistributionWithStagingConfigOutput: Swift.Equatable {
    /// A distribution tells CloudFront where you want content to be delivered from, and the details about how to track and manage content delivery.
    public var distribution: CloudFrontClientTypes.Distribution?
    /// The current version of the primary distribution (after it's updated).
    public var eTag: Swift.String?

    public init(
        distribution: CloudFrontClientTypes.Distribution? = nil,
        eTag: Swift.String? = nil
    )
    {
        self.distribution = distribution
        self.eTag = eTag
    }
}

enum UpdateDistributionWithStagingConfigOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension UpdateFieldLevelEncryptionConfigInput {
    static func writingClosure(_ value: UpdateFieldLevelEncryptionConfigInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["FieldLevelEncryptionConfig"].write(value.fieldLevelEncryptionConfig, writingClosure: CloudFrontClientTypes.FieldLevelEncryptionConfig.writingClosure(_:to:))
    }
}

extension UpdateFieldLevelEncryptionConfigInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let ifMatch = ifMatch {
            items.add(Header(name: "If-Match", value: Swift.String(ifMatch)))
        }
        return items
    }
}

extension UpdateFieldLevelEncryptionConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/field-level-encryption/\(id.urlPercentEncoding())/config"
    }
}

public struct UpdateFieldLevelEncryptionConfigInput: Swift.Equatable {
    /// Request to update a field-level encryption configuration.
    /// This member is required.
    public var fieldLevelEncryptionConfig: CloudFrontClientTypes.FieldLevelEncryptionConfig?
    /// The ID of the configuration you want to update.
    /// This member is required.
    public var id: Swift.String?
    /// The value of the ETag header that you received when retrieving the configuration identity to update. For example: E2QWRUHAPOMQZL.
    public var ifMatch: Swift.String?

    public init(
        fieldLevelEncryptionConfig: CloudFrontClientTypes.FieldLevelEncryptionConfig? = nil,
        id: Swift.String? = nil,
        ifMatch: Swift.String? = nil
    )
    {
        self.fieldLevelEncryptionConfig = fieldLevelEncryptionConfig
        self.id = id
        self.ifMatch = ifMatch
    }
}

extension UpdateFieldLevelEncryptionConfigOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> UpdateFieldLevelEncryptionConfigOutput {
        let reader = responseReader
        var value = UpdateFieldLevelEncryptionConfigOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        value.fieldLevelEncryption = try reader.read(readingClosure: CloudFrontClientTypes.FieldLevelEncryption.readingClosure(from:))
        return value
    }
}

public struct UpdateFieldLevelEncryptionConfigOutput: Swift.Equatable {
    /// The value of the ETag header that you received when updating the configuration. For example: E2QWRUHAPOMQZL.
    public var eTag: Swift.String?
    /// Return the results of updating the configuration.
    public var fieldLevelEncryption: CloudFrontClientTypes.FieldLevelEncryption?

    public init(
        eTag: Swift.String? = nil,
        fieldLevelEncryption: CloudFrontClientTypes.FieldLevelEncryption? = nil
    )
    {
        self.eTag = eTag
        self.fieldLevelEncryption = fieldLevelEncryption
    }
}

enum UpdateFieldLevelEncryptionConfigOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension UpdateFieldLevelEncryptionProfileInput {
    static func writingClosure(_ value: UpdateFieldLevelEncryptionProfileInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["FieldLevelEncryptionProfileConfig"].write(value.fieldLevelEncryptionProfileConfig, writingClosure: CloudFrontClientTypes.FieldLevelEncryptionProfileConfig.writingClosure(_:to:))
    }
}

extension UpdateFieldLevelEncryptionProfileInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let ifMatch = ifMatch {
            items.add(Header(name: "If-Match", value: Swift.String(ifMatch)))
        }
        return items
    }
}

extension UpdateFieldLevelEncryptionProfileInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/field-level-encryption-profile/\(id.urlPercentEncoding())/config"
    }
}

public struct UpdateFieldLevelEncryptionProfileInput: Swift.Equatable {
    /// Request to update a field-level encryption profile.
    /// This member is required.
    public var fieldLevelEncryptionProfileConfig: CloudFrontClientTypes.FieldLevelEncryptionProfileConfig?
    /// The ID of the field-level encryption profile request.
    /// This member is required.
    public var id: Swift.String?
    /// The value of the ETag header that you received when retrieving the profile identity to update. For example: E2QWRUHAPOMQZL.
    public var ifMatch: Swift.String?

    public init(
        fieldLevelEncryptionProfileConfig: CloudFrontClientTypes.FieldLevelEncryptionProfileConfig? = nil,
        id: Swift.String? = nil,
        ifMatch: Swift.String? = nil
    )
    {
        self.fieldLevelEncryptionProfileConfig = fieldLevelEncryptionProfileConfig
        self.id = id
        self.ifMatch = ifMatch
    }
}

extension UpdateFieldLevelEncryptionProfileOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> UpdateFieldLevelEncryptionProfileOutput {
        let reader = responseReader
        var value = UpdateFieldLevelEncryptionProfileOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        value.fieldLevelEncryptionProfile = try reader.read(readingClosure: CloudFrontClientTypes.FieldLevelEncryptionProfile.readingClosure(from:))
        return value
    }
}

public struct UpdateFieldLevelEncryptionProfileOutput: Swift.Equatable {
    /// The result of the field-level encryption profile request.
    public var eTag: Swift.String?
    /// Return the results of updating the profile.
    public var fieldLevelEncryptionProfile: CloudFrontClientTypes.FieldLevelEncryptionProfile?

    public init(
        eTag: Swift.String? = nil,
        fieldLevelEncryptionProfile: CloudFrontClientTypes.FieldLevelEncryptionProfile? = nil
    )
    {
        self.eTag = eTag
        self.fieldLevelEncryptionProfile = fieldLevelEncryptionProfile
    }
}

enum UpdateFieldLevelEncryptionProfileOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension UpdateFunctionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateFunctionInput(functionConfig: \(Swift.String(describing: functionConfig)), ifMatch: \(Swift.String(describing: ifMatch)), name: \(Swift.String(describing: name)), functionCode: \"CONTENT_REDACTED\")"}
}

extension UpdateFunctionInput {
    static func writingClosure(_ value: UpdateFunctionInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["FunctionCode"].write(value.functionCode)
        try writer["FunctionConfig"].write(value.functionConfig, writingClosure: CloudFrontClientTypes.FunctionConfig.writingClosure(_:to:))
    }
}

extension UpdateFunctionInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let ifMatch = ifMatch {
            items.add(Header(name: "If-Match", value: Swift.String(ifMatch)))
        }
        return items
    }
}

extension UpdateFunctionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let name = name else {
            return nil
        }
        return "/2020-05-31/function/\(name.urlPercentEncoding())"
    }
}

public struct UpdateFunctionInput: Swift.Equatable {
    /// The function code. For more information about writing a CloudFront function, see [Writing function code for CloudFront Functions](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/writing-function-code.html) in the Amazon CloudFront Developer Guide.
    /// This member is required.
    public var functionCode: ClientRuntime.Data?
    /// Configuration information about the function.
    /// This member is required.
    public var functionConfig: CloudFrontClientTypes.FunctionConfig?
    /// The current version (ETag value) of the function that you are updating, which you can get using DescribeFunction.
    /// This member is required.
    public var ifMatch: Swift.String?
    /// The name of the function that you are updating.
    /// This member is required.
    public var name: Swift.String?

    public init(
        functionCode: ClientRuntime.Data? = nil,
        functionConfig: CloudFrontClientTypes.FunctionConfig? = nil,
        ifMatch: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.functionCode = functionCode
        self.functionConfig = functionConfig
        self.ifMatch = ifMatch
        self.name = name
    }
}

extension UpdateFunctionOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> UpdateFunctionOutput {
        let reader = responseReader
        var value = UpdateFunctionOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETtag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        value.functionSummary = try reader.read(readingClosure: CloudFrontClientTypes.FunctionSummary.readingClosure(from:))
        return value
    }
}

public struct UpdateFunctionOutput: Swift.Equatable {
    /// The version identifier for the current version of the CloudFront function.
    public var eTag: Swift.String?
    /// Contains configuration information and metadata about a CloudFront function.
    public var functionSummary: CloudFrontClientTypes.FunctionSummary?

    public init(
        eTag: Swift.String? = nil,
        functionSummary: CloudFrontClientTypes.FunctionSummary? = nil
    )
    {
        self.eTag = eTag
        self.functionSummary = functionSummary
    }
}

enum UpdateFunctionOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension UpdateKeyGroupInput {
    static func writingClosure(_ value: UpdateKeyGroupInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["KeyGroupConfig"].write(value.keyGroupConfig, writingClosure: CloudFrontClientTypes.KeyGroupConfig.writingClosure(_:to:))
    }
}

extension UpdateKeyGroupInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let ifMatch = ifMatch {
            items.add(Header(name: "If-Match", value: Swift.String(ifMatch)))
        }
        return items
    }
}

extension UpdateKeyGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/key-group/\(id.urlPercentEncoding())"
    }
}

public struct UpdateKeyGroupInput: Swift.Equatable {
    /// The identifier of the key group that you are updating.
    /// This member is required.
    public var id: Swift.String?
    /// The version of the key group that you are updating. The version is the key group's ETag value.
    public var ifMatch: Swift.String?
    /// The key group configuration.
    /// This member is required.
    public var keyGroupConfig: CloudFrontClientTypes.KeyGroupConfig?

    public init(
        id: Swift.String? = nil,
        ifMatch: Swift.String? = nil,
        keyGroupConfig: CloudFrontClientTypes.KeyGroupConfig? = nil
    )
    {
        self.id = id
        self.ifMatch = ifMatch
        self.keyGroupConfig = keyGroupConfig
    }
}

extension UpdateKeyGroupOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> UpdateKeyGroupOutput {
        let reader = responseReader
        var value = UpdateKeyGroupOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        value.keyGroup = try reader.read(readingClosure: CloudFrontClientTypes.KeyGroup.readingClosure(from:))
        return value
    }
}

public struct UpdateKeyGroupOutput: Swift.Equatable {
    /// The identifier for this version of the key group.
    public var eTag: Swift.String?
    /// The key group that was just updated.
    public var keyGroup: CloudFrontClientTypes.KeyGroup?

    public init(
        eTag: Swift.String? = nil,
        keyGroup: CloudFrontClientTypes.KeyGroup? = nil
    )
    {
        self.eTag = eTag
        self.keyGroup = keyGroup
    }
}

enum UpdateKeyGroupOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension UpdateKeyValueStoreInput {
    static func writingClosure(_ value: UpdateKeyValueStoreInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["Comment"].write(value.comment)
    }
}

extension UpdateKeyValueStoreInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let ifMatch = ifMatch {
            items.add(Header(name: "If-Match", value: Swift.String(ifMatch)))
        }
        return items
    }
}

extension UpdateKeyValueStoreInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let name = name else {
            return nil
        }
        return "/2020-05-31/key-value-store/\(name.urlPercentEncoding())"
    }
}

public struct UpdateKeyValueStoreInput: Swift.Equatable {
    /// The comment of the Key Value Store to update.
    /// This member is required.
    public var comment: Swift.String?
    /// The Key Value Store to update, if a match occurs.
    /// This member is required.
    public var ifMatch: Swift.String?
    /// The name of the Key Value Store to update.
    /// This member is required.
    public var name: Swift.String?

    public init(
        comment: Swift.String? = nil,
        ifMatch: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.comment = comment
        self.ifMatch = ifMatch
        self.name = name
    }
}

extension UpdateKeyValueStoreOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> UpdateKeyValueStoreOutput {
        let reader = responseReader
        var value = UpdateKeyValueStoreOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        value.keyValueStore = try reader.read(readingClosure: CloudFrontClientTypes.KeyValueStore.readingClosure(from:))
        return value
    }
}

public struct UpdateKeyValueStoreOutput: Swift.Equatable {
    /// The ETag of the resulting Key Value Store.
    public var eTag: Swift.String?
    /// The resulting Key Value Store to update.
    public var keyValueStore: CloudFrontClientTypes.KeyValueStore?

    public init(
        eTag: Swift.String? = nil,
        keyValueStore: CloudFrontClientTypes.KeyValueStore? = nil
    )
    {
        self.eTag = eTag
        self.keyValueStore = keyValueStore
    }
}

enum UpdateKeyValueStoreOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension UpdateOriginAccessControlInput {
    static func writingClosure(_ value: UpdateOriginAccessControlInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["OriginAccessControlConfig"].write(value.originAccessControlConfig, writingClosure: CloudFrontClientTypes.OriginAccessControlConfig.writingClosure(_:to:))
    }
}

extension UpdateOriginAccessControlInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let ifMatch = ifMatch {
            items.add(Header(name: "If-Match", value: Swift.String(ifMatch)))
        }
        return items
    }
}

extension UpdateOriginAccessControlInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/origin-access-control/\(id.urlPercentEncoding())/config"
    }
}

public struct UpdateOriginAccessControlInput: Swift.Equatable {
    /// The unique identifier of the origin access control that you are updating.
    /// This member is required.
    public var id: Swift.String?
    /// The current version (ETag value) of the origin access control that you are updating.
    public var ifMatch: Swift.String?
    /// An origin access control.
    /// This member is required.
    public var originAccessControlConfig: CloudFrontClientTypes.OriginAccessControlConfig?

    public init(
        id: Swift.String? = nil,
        ifMatch: Swift.String? = nil,
        originAccessControlConfig: CloudFrontClientTypes.OriginAccessControlConfig? = nil
    )
    {
        self.id = id
        self.ifMatch = ifMatch
        self.originAccessControlConfig = originAccessControlConfig
    }
}

extension UpdateOriginAccessControlOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> UpdateOriginAccessControlOutput {
        let reader = responseReader
        var value = UpdateOriginAccessControlOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        value.originAccessControl = try reader.read(readingClosure: CloudFrontClientTypes.OriginAccessControl.readingClosure(from:))
        return value
    }
}

public struct UpdateOriginAccessControlOutput: Swift.Equatable {
    /// The new version of the origin access control after it has been updated.
    public var eTag: Swift.String?
    /// The origin access control after it has been updated.
    public var originAccessControl: CloudFrontClientTypes.OriginAccessControl?

    public init(
        eTag: Swift.String? = nil,
        originAccessControl: CloudFrontClientTypes.OriginAccessControl? = nil
    )
    {
        self.eTag = eTag
        self.originAccessControl = originAccessControl
    }
}

enum UpdateOriginAccessControlOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension UpdateOriginRequestPolicyInput {
    static func writingClosure(_ value: UpdateOriginRequestPolicyInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["OriginRequestPolicyConfig"].write(value.originRequestPolicyConfig, writingClosure: CloudFrontClientTypes.OriginRequestPolicyConfig.writingClosure(_:to:))
    }
}

extension UpdateOriginRequestPolicyInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let ifMatch = ifMatch {
            items.add(Header(name: "If-Match", value: Swift.String(ifMatch)))
        }
        return items
    }
}

extension UpdateOriginRequestPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/origin-request-policy/\(id.urlPercentEncoding())"
    }
}

public struct UpdateOriginRequestPolicyInput: Swift.Equatable {
    /// The unique identifier for the origin request policy that you are updating. The identifier is returned in a cache behavior's OriginRequestPolicyId field in the response to GetDistributionConfig.
    /// This member is required.
    public var id: Swift.String?
    /// The version of the origin request policy that you are updating. The version is returned in the origin request policy's ETag field in the response to GetOriginRequestPolicyConfig.
    public var ifMatch: Swift.String?
    /// An origin request policy configuration.
    /// This member is required.
    public var originRequestPolicyConfig: CloudFrontClientTypes.OriginRequestPolicyConfig?

    public init(
        id: Swift.String? = nil,
        ifMatch: Swift.String? = nil,
        originRequestPolicyConfig: CloudFrontClientTypes.OriginRequestPolicyConfig? = nil
    )
    {
        self.id = id
        self.ifMatch = ifMatch
        self.originRequestPolicyConfig = originRequestPolicyConfig
    }
}

extension UpdateOriginRequestPolicyOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> UpdateOriginRequestPolicyOutput {
        let reader = responseReader
        var value = UpdateOriginRequestPolicyOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        value.originRequestPolicy = try reader.read(readingClosure: CloudFrontClientTypes.OriginRequestPolicy.readingClosure(from:))
        return value
    }
}

public struct UpdateOriginRequestPolicyOutput: Swift.Equatable {
    /// The current version of the origin request policy.
    public var eTag: Swift.String?
    /// An origin request policy.
    public var originRequestPolicy: CloudFrontClientTypes.OriginRequestPolicy?

    public init(
        eTag: Swift.String? = nil,
        originRequestPolicy: CloudFrontClientTypes.OriginRequestPolicy? = nil
    )
    {
        self.eTag = eTag
        self.originRequestPolicy = originRequestPolicy
    }
}

enum UpdateOriginRequestPolicyOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension UpdatePublicKeyInput {
    static func writingClosure(_ value: UpdatePublicKeyInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["PublicKeyConfig"].write(value.publicKeyConfig, writingClosure: CloudFrontClientTypes.PublicKeyConfig.writingClosure(_:to:))
    }
}

extension UpdatePublicKeyInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let ifMatch = ifMatch {
            items.add(Header(name: "If-Match", value: Swift.String(ifMatch)))
        }
        return items
    }
}

extension UpdatePublicKeyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/public-key/\(id.urlPercentEncoding())/config"
    }
}

public struct UpdatePublicKeyInput: Swift.Equatable {
    /// The identifier of the public key that you are updating.
    /// This member is required.
    public var id: Swift.String?
    /// The value of the ETag header that you received when retrieving the public key to update. For example: E2QWRUHAPOMQZL.
    public var ifMatch: Swift.String?
    /// A public key configuration.
    /// This member is required.
    public var publicKeyConfig: CloudFrontClientTypes.PublicKeyConfig?

    public init(
        id: Swift.String? = nil,
        ifMatch: Swift.String? = nil,
        publicKeyConfig: CloudFrontClientTypes.PublicKeyConfig? = nil
    )
    {
        self.id = id
        self.ifMatch = ifMatch
        self.publicKeyConfig = publicKeyConfig
    }
}

extension UpdatePublicKeyOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> UpdatePublicKeyOutput {
        let reader = responseReader
        var value = UpdatePublicKeyOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        value.publicKey = try reader.read(readingClosure: CloudFrontClientTypes.PublicKey.readingClosure(from:))
        return value
    }
}

public struct UpdatePublicKeyOutput: Swift.Equatable {
    /// The identifier of the current version of the public key.
    public var eTag: Swift.String?
    /// The public key.
    public var publicKey: CloudFrontClientTypes.PublicKey?

    public init(
        eTag: Swift.String? = nil,
        publicKey: CloudFrontClientTypes.PublicKey? = nil
    )
    {
        self.eTag = eTag
        self.publicKey = publicKey
    }
}

enum UpdatePublicKeyOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension UpdateRealtimeLogConfigInput {
    static func writingClosure(_ value: UpdateRealtimeLogConfigInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["ARN"].write(value.arn)
        try writer["EndPoints"].writeList(value.endPoints, memberWritingClosure: CloudFrontClientTypes.EndPoint.writingClosure(_:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Fields"].writeList(value.fields, memberWritingClosure: Swift.String.writingClosure(_:to:), memberNodeInfo: "Field", isFlattened: false)
        try writer["Name"].write(value.name)
        try writer["SamplingRate"].write(value.samplingRate)
    }
}

extension UpdateRealtimeLogConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2020-05-31/realtime-log-config"
    }
}

public struct UpdateRealtimeLogConfigInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) for this real-time log configuration.
    public var arn: Swift.String?
    /// Contains information about the Amazon Kinesis data stream where you are sending real-time log data.
    public var endPoints: [CloudFrontClientTypes.EndPoint]?
    /// A list of fields to include in each real-time log record. For more information about fields, see [Real-time log configuration fields](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/real-time-logs.html#understand-real-time-log-config-fields) in the Amazon CloudFront Developer Guide.
    public var fields: [Swift.String]?
    /// The name for this real-time log configuration.
    public var name: Swift.String?
    /// The sampling rate for this real-time log configuration. The sampling rate determines the percentage of viewer requests that are represented in the real-time log data. You must provide an integer between 1 and 100, inclusive.
    public var samplingRate: Swift.Int?

    public init(
        arn: Swift.String? = nil,
        endPoints: [CloudFrontClientTypes.EndPoint]? = nil,
        fields: [Swift.String]? = nil,
        name: Swift.String? = nil,
        samplingRate: Swift.Int? = nil
    )
    {
        self.arn = arn
        self.endPoints = endPoints
        self.fields = fields
        self.name = name
        self.samplingRate = samplingRate
    }
}

extension UpdateRealtimeLogConfigOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> UpdateRealtimeLogConfigOutput {
        let reader = responseReader
        var value = UpdateRealtimeLogConfigOutput()
        value.realtimeLogConfig = try reader["RealtimeLogConfig"].readIfPresent(readingClosure: CloudFrontClientTypes.RealtimeLogConfig.readingClosure(from:))
        return value
    }
}

public struct UpdateRealtimeLogConfigOutput: Swift.Equatable {
    /// A real-time log configuration.
    public var realtimeLogConfig: CloudFrontClientTypes.RealtimeLogConfig?

    public init(
        realtimeLogConfig: CloudFrontClientTypes.RealtimeLogConfig? = nil
    )
    {
        self.realtimeLogConfig = realtimeLogConfig
    }
}

enum UpdateRealtimeLogConfigOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension UpdateResponseHeadersPolicyInput {
    static func writingClosure(_ value: UpdateResponseHeadersPolicyInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["ResponseHeadersPolicyConfig"].write(value.responseHeadersPolicyConfig, writingClosure: CloudFrontClientTypes.ResponseHeadersPolicyConfig.writingClosure(_:to:))
    }
}

extension UpdateResponseHeadersPolicyInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let ifMatch = ifMatch {
            items.add(Header(name: "If-Match", value: Swift.String(ifMatch)))
        }
        return items
    }
}

extension UpdateResponseHeadersPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/response-headers-policy/\(id.urlPercentEncoding())"
    }
}

public struct UpdateResponseHeadersPolicyInput: Swift.Equatable {
    /// The identifier for the response headers policy that you are updating.
    /// This member is required.
    public var id: Swift.String?
    /// The version of the response headers policy that you are updating. The version is returned in the cache policy's ETag field in the response to GetResponseHeadersPolicyConfig.
    public var ifMatch: Swift.String?
    /// A response headers policy configuration.
    /// This member is required.
    public var responseHeadersPolicyConfig: CloudFrontClientTypes.ResponseHeadersPolicyConfig?

    public init(
        id: Swift.String? = nil,
        ifMatch: Swift.String? = nil,
        responseHeadersPolicyConfig: CloudFrontClientTypes.ResponseHeadersPolicyConfig? = nil
    )
    {
        self.id = id
        self.ifMatch = ifMatch
        self.responseHeadersPolicyConfig = responseHeadersPolicyConfig
    }
}

extension UpdateResponseHeadersPolicyOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> UpdateResponseHeadersPolicyOutput {
        let reader = responseReader
        var value = UpdateResponseHeadersPolicyOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        value.responseHeadersPolicy = try reader.read(readingClosure: CloudFrontClientTypes.ResponseHeadersPolicy.readingClosure(from:))
        return value
    }
}

public struct UpdateResponseHeadersPolicyOutput: Swift.Equatable {
    /// The current version of the response headers policy.
    public var eTag: Swift.String?
    /// A response headers policy.
    public var responseHeadersPolicy: CloudFrontClientTypes.ResponseHeadersPolicy?

    public init(
        eTag: Swift.String? = nil,
        responseHeadersPolicy: CloudFrontClientTypes.ResponseHeadersPolicy? = nil
    )
    {
        self.eTag = eTag
        self.responseHeadersPolicy = responseHeadersPolicy
    }
}

enum UpdateResponseHeadersPolicyOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension UpdateStreamingDistributionInput {
    static func writingClosure(_ value: UpdateStreamingDistributionInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["StreamingDistributionConfig"].write(value.streamingDistributionConfig, writingClosure: CloudFrontClientTypes.StreamingDistributionConfig.writingClosure(_:to:))
    }
}

extension UpdateStreamingDistributionInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let ifMatch = ifMatch {
            items.add(Header(name: "If-Match", value: Swift.String(ifMatch)))
        }
        return items
    }
}

extension UpdateStreamingDistributionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let id = id else {
            return nil
        }
        return "/2020-05-31/streaming-distribution/\(id.urlPercentEncoding())/config"
    }
}

/// The request to update a streaming distribution.
public struct UpdateStreamingDistributionInput: Swift.Equatable {
    /// The streaming distribution's id.
    /// This member is required.
    public var id: Swift.String?
    /// The value of the ETag header that you received when retrieving the streaming distribution's configuration. For example: E2QWRUHAPOMQZL.
    public var ifMatch: Swift.String?
    /// The streaming distribution's configuration information.
    /// This member is required.
    public var streamingDistributionConfig: CloudFrontClientTypes.StreamingDistributionConfig?

    public init(
        id: Swift.String? = nil,
        ifMatch: Swift.String? = nil,
        streamingDistributionConfig: CloudFrontClientTypes.StreamingDistributionConfig? = nil
    )
    {
        self.id = id
        self.ifMatch = ifMatch
        self.streamingDistributionConfig = streamingDistributionConfig
    }
}

extension UpdateStreamingDistributionOutput {

    static func responseOutputBinding(httpResponse: ClientRuntime.HttpResponse, reader responseReader: SmithyXML.Reader) async throws -> UpdateStreamingDistributionOutput {
        let reader = responseReader
        var value = UpdateStreamingDistributionOutput()
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        } else {
            value.eTag = nil
        }
        value.streamingDistribution = try reader.read(readingClosure: CloudFrontClientTypes.StreamingDistribution.readingClosure(from:))
        return value
    }
}

/// The returned result of the corresponding request.
public struct UpdateStreamingDistributionOutput: Swift.Equatable {
    /// The current version of the configuration. For example: E2QWRUHAPOMQZL.
    public var eTag: Swift.String?
    /// The streaming distribution's information.
    public var streamingDistribution: CloudFrontClientTypes.StreamingDistribution?

    public init(
        eTag: Swift.String? = nil,
        streamingDistribution: CloudFrontClientTypes.StreamingDistribution? = nil
    )
    {
        self.eTag = eTag
        self.streamingDistribution = streamingDistribution
    }
}

enum UpdateStreamingDistributionOutputError {
    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader? = nil) async throws -> Swift.Error {
        return UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "", requestID: "", requestID2: "", typeName: "")
    }
}

extension CloudFrontClientTypes.ViewerCertificate {

    static func writingClosure(_ value: CloudFrontClientTypes.ViewerCertificate?, to writer: SmithyXML.Writer) throws {
        guard let value else { writer.detach(); return }
        try writer["ACMCertificateArn"].write(value.acmCertificateArn)
        try writer["Certificate"].write(value.certificate)
        try writer["CertificateSource"].write(value.certificateSource)
        try writer["CloudFrontDefaultCertificate"].write(value.cloudFrontDefaultCertificate)
        try writer["IAMCertificateId"].write(value.iamCertificateId)
        try writer["MinimumProtocolVersion"].write(value.minimumProtocolVersion)
        try writer["SSLSupportMethod"].write(value.sslSupportMethod)
    }

    static func readingClosure(from reader: SmithyXML.Reader) throws -> CloudFrontClientTypes.ViewerCertificate {
        var value = CloudFrontClientTypes.ViewerCertificate()
        value.cloudFrontDefaultCertificate = try reader["CloudFrontDefaultCertificate"].readIfPresent()
        value.iamCertificateId = try reader["IAMCertificateId"].readIfPresent()
        value.acmCertificateArn = try reader["ACMCertificateArn"].readIfPresent()
        value.sslSupportMethod = try reader["SSLSupportMethod"].readIfPresent()
        value.minimumProtocolVersion = try reader["MinimumProtocolVersion"].readIfPresent()
        value.certificate = try reader["Certificate"].readIfPresent()
        value.certificateSource = try reader["CertificateSource"].readIfPresent()
        return value
    }
}

extension CloudFrontClientTypes {
    /// A complex type that determines the distribution's SSL/TLS configuration for communicating with viewers. If the distribution doesn't use Aliases (also known as alternate domain names or CNAMEs)—that is, if the distribution uses the CloudFront domain name such as d111111abcdef8.cloudfront.net—set CloudFrontDefaultCertificate to true and leave all other fields empty. If the distribution uses Aliases (alternate domain names or CNAMEs), use the fields in this type to specify the following settings:
    ///
    /// * Which viewers the distribution accepts HTTPS connections from: only viewers that support [server name indication (SNI)](https://en.wikipedia.org/wiki/Server_Name_Indication) (recommended), or all viewers including those that don't support SNI.
    ///
    /// * To accept HTTPS connections from only viewers that support SNI, set SSLSupportMethod to sni-only. This is recommended. Most browsers and clients support SNI.
    ///
    /// * To accept HTTPS connections from all viewers, including those that don't support SNI, set SSLSupportMethod to vip. This is not recommended, and results in additional monthly charges from CloudFront.
    ///
    ///
    ///
    ///
    /// * The minimum SSL/TLS protocol version that the distribution can use to communicate with viewers. To specify a minimum version, choose a value for MinimumProtocolVersion. For more information, see [Security Policy](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValues-security-policy) in the Amazon CloudFront Developer Guide.
    ///
    /// * The location of the SSL/TLS certificate, [Certificate Manager (ACM)](https://docs.aws.amazon.com/acm/latest/userguide/acm-overview.html) (recommended) or [Identity and Access Management (IAM)](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html). You specify the location by setting a value in one of the following fields (not both):
    ///
    /// * ACMCertificateArn
    ///
    /// * IAMCertificateId
    ///
    ///
    ///
    ///
    ///
    /// All distributions support HTTPS connections from viewers. To require viewers to use HTTPS only, or to redirect them from HTTP to HTTPS, use ViewerProtocolPolicy in the CacheBehavior or DefaultCacheBehavior. To specify how CloudFront should use SSL/TLS to communicate with your custom origin, use CustomOriginConfig. For more information, see [Using HTTPS with CloudFront](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https.html) and [ Using Alternate Domain Names and HTTPS](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https-alternate-domain-names.html) in the Amazon CloudFront Developer Guide.
    public struct ViewerCertificate: Swift.Equatable {
        /// If the distribution uses Aliases (alternate domain names or CNAMEs) and the SSL/TLS certificate is stored in [Certificate Manager (ACM)](https://docs.aws.amazon.com/acm/latest/userguide/acm-overview.html), provide the Amazon Resource Name (ARN) of the ACM certificate. CloudFront only supports ACM certificates in the US East (N. Virginia) Region (us-east-1). If you specify an ACM certificate ARN, you must also specify values for MinimumProtocolVersion and SSLSupportMethod.
        public var acmCertificateArn: Swift.String?
        /// This field is deprecated. Use one of the following fields instead:
        ///
        /// * ACMCertificateArn
        ///
        /// * IAMCertificateId
        ///
        /// * CloudFrontDefaultCertificate
        @available(*, deprecated)
        public var certificate: Swift.String?
        /// This field is deprecated. Use one of the following fields instead:
        ///
        /// * ACMCertificateArn
        ///
        /// * IAMCertificateId
        ///
        /// * CloudFrontDefaultCertificate
        @available(*, deprecated)
        public var certificateSource: CloudFrontClientTypes.CertificateSource?
        /// If the distribution uses the CloudFront domain name such as d111111abcdef8.cloudfront.net, set this field to true. If the distribution uses Aliases (alternate domain names or CNAMEs), set this field to false and specify values for the following fields:
        ///
        /// * ACMCertificateArn or IAMCertificateId (specify a value for one, not both)
        ///
        /// * MinimumProtocolVersion
        ///
        /// * SSLSupportMethod
        public var cloudFrontDefaultCertificate: Swift.Bool?
        /// If the distribution uses Aliases (alternate domain names or CNAMEs) and the SSL/TLS certificate is stored in [Identity and Access Management (IAM)](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html), provide the ID of the IAM certificate. If you specify an IAM certificate ID, you must also specify values for MinimumProtocolVersion and SSLSupportMethod.
        public var iamCertificateId: Swift.String?
        /// If the distribution uses Aliases (alternate domain names or CNAMEs), specify the security policy that you want CloudFront to use for HTTPS connections with viewers. The security policy determines two settings:
        ///
        /// * The minimum SSL/TLS protocol that CloudFront can use to communicate with viewers.
        ///
        /// * The ciphers that CloudFront can use to encrypt the content that it returns to viewers.
        ///
        ///
        /// For more information, see [Security Policy](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValues-security-policy) and [Supported Protocols and Ciphers Between Viewers and CloudFront](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/secure-connections-supported-viewer-protocols-ciphers.html#secure-connections-supported-ciphers) in the Amazon CloudFront Developer Guide. On the CloudFront console, this setting is called Security Policy. When you're using SNI only (you set SSLSupportMethod to sni-only), you must specify TLSv1 or higher. If the distribution uses the CloudFront domain name such as d111111abcdef8.cloudfront.net (you set CloudFrontDefaultCertificate to true), CloudFront automatically sets the security policy to TLSv1 regardless of the value that you set here.
        public var minimumProtocolVersion: CloudFrontClientTypes.MinimumProtocolVersion?
        /// If the distribution uses Aliases (alternate domain names or CNAMEs), specify which viewers the distribution accepts HTTPS connections from.
        ///
        /// * sni-only – The distribution accepts HTTPS connections from only viewers that support [server name indication (SNI)](https://en.wikipedia.org/wiki/Server_Name_Indication). This is recommended. Most browsers and clients support SNI.
        ///
        /// * vip – The distribution accepts HTTPS connections from all viewers including those that don't support SNI. This is not recommended, and results in additional monthly charges from CloudFront.
        ///
        /// * static-ip - Do not specify this value unless your distribution has been enabled for this feature by the CloudFront team. If you have a use case that requires static IP addresses for a distribution, contact CloudFront through the [Amazon Web Services Support Center](https://console.aws.amazon.com/support/home).
        ///
        ///
        /// If the distribution uses the CloudFront domain name such as d111111abcdef8.cloudfront.net, don't set a value for this field.
        public var sslSupportMethod: CloudFrontClientTypes.SSLSupportMethod?

        public init(
            acmCertificateArn: Swift.String? = nil,
            certificate: Swift.String? = nil,
            certificateSource: CloudFrontClientTypes.CertificateSource? = nil,
            cloudFrontDefaultCertificate: Swift.Bool? = nil,
            iamCertificateId: Swift.String? = nil,
            minimumProtocolVersion: CloudFrontClientTypes.MinimumProtocolVersion? = nil,
            sslSupportMethod: CloudFrontClientTypes.SSLSupportMethod? = nil
        )
        {
            self.acmCertificateArn = acmCertificateArn
            self.certificate = certificate
            self.certificateSource = certificateSource
            self.cloudFrontDefaultCertificate = cloudFrontDefaultCertificate
            self.iamCertificateId = iamCertificateId
            self.minimumProtocolVersion = minimumProtocolVersion
            self.sslSupportMethod = sslSupportMethod
        }
    }

}

extension CloudFrontClientTypes {
    public enum ViewerProtocolPolicy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case allowAll
        case httpsOnly
        case redirectToHttps
        case sdkUnknown(Swift.String)

        public static var allCases: [ViewerProtocolPolicy] {
            return [
                .allowAll,
                .httpsOnly,
                .redirectToHttps,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .allowAll: return "allow-all"
            case .httpsOnly: return "https-only"
            case .redirectToHttps: return "redirect-to-https"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ViewerProtocolPolicy(rawValue: rawValue) ?? ViewerProtocolPolicy.sdkUnknown(rawValue)
        }
    }
}
