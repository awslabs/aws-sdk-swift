// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CloudFrontClient {
    /// Paginate over `[ListCloudFrontOriginAccessIdentitiesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListCloudFrontOriginAccessIdentitiesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListCloudFrontOriginAccessIdentitiesOutputResponse`
    public func listCloudFrontOriginAccessIdentitiesPaginated(input: ListCloudFrontOriginAccessIdentitiesInput) -> ClientRuntime.PaginatorSequence<ListCloudFrontOriginAccessIdentitiesInput, ListCloudFrontOriginAccessIdentitiesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListCloudFrontOriginAccessIdentitiesInput, ListCloudFrontOriginAccessIdentitiesOutputResponse>(input: input, inputKey: \ListCloudFrontOriginAccessIdentitiesInput.marker, outputKey: \ListCloudFrontOriginAccessIdentitiesOutputResponse.cloudFrontOriginAccessIdentityList?.nextMarker, paginationFunction: self.listCloudFrontOriginAccessIdentities(input:))
    }
}

extension ListCloudFrontOriginAccessIdentitiesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListCloudFrontOriginAccessIdentitiesInput {
        return ListCloudFrontOriginAccessIdentitiesInput(
            marker: token,
            maxItems: self.maxItems
        )}
}

extension PaginatorSequence where Input == ListCloudFrontOriginAccessIdentitiesInput, Output == ListCloudFrontOriginAccessIdentitiesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listCloudFrontOriginAccessIdentitiesPaginated`
    /// to access the nested member `[CloudFrontClientTypes.CloudFrontOriginAccessIdentitySummary]`
    /// - Returns: `[CloudFrontClientTypes.CloudFrontOriginAccessIdentitySummary]`
    public func items() async throws -> [CloudFrontClientTypes.CloudFrontOriginAccessIdentitySummary] {
        return try await self.asyncCompactMap { item in item.cloudFrontOriginAccessIdentityList?.items }
    }
}
extension CloudFrontClient {
    /// Paginate over `[ListDistributionsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListDistributionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListDistributionsOutputResponse`
    public func listDistributionsPaginated(input: ListDistributionsInput) -> ClientRuntime.PaginatorSequence<ListDistributionsInput, ListDistributionsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListDistributionsInput, ListDistributionsOutputResponse>(input: input, inputKey: \ListDistributionsInput.marker, outputKey: \ListDistributionsOutputResponse.distributionList?.nextMarker, paginationFunction: self.listDistributions(input:))
    }
}

extension ListDistributionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListDistributionsInput {
        return ListDistributionsInput(
            marker: token,
            maxItems: self.maxItems
        )}
}

extension PaginatorSequence where Input == ListDistributionsInput, Output == ListDistributionsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listDistributionsPaginated`
    /// to access the nested member `[CloudFrontClientTypes.DistributionSummary]`
    /// - Returns: `[CloudFrontClientTypes.DistributionSummary]`
    public func items() async throws -> [CloudFrontClientTypes.DistributionSummary] {
        return try await self.asyncCompactMap { item in item.distributionList?.items }
    }
}
extension CloudFrontClient {
    /// Paginate over `[ListInvalidationsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListInvalidationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListInvalidationsOutputResponse`
    public func listInvalidationsPaginated(input: ListInvalidationsInput) -> ClientRuntime.PaginatorSequence<ListInvalidationsInput, ListInvalidationsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListInvalidationsInput, ListInvalidationsOutputResponse>(input: input, inputKey: \ListInvalidationsInput.marker, outputKey: \ListInvalidationsOutputResponse.invalidationList?.nextMarker, paginationFunction: self.listInvalidations(input:))
    }
}

extension ListInvalidationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListInvalidationsInput {
        return ListInvalidationsInput(
            distributionId: self.distributionId,
            marker: token,
            maxItems: self.maxItems
        )}
}

extension PaginatorSequence where Input == ListInvalidationsInput, Output == ListInvalidationsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listInvalidationsPaginated`
    /// to access the nested member `[CloudFrontClientTypes.InvalidationSummary]`
    /// - Returns: `[CloudFrontClientTypes.InvalidationSummary]`
    public func items() async throws -> [CloudFrontClientTypes.InvalidationSummary] {
        return try await self.asyncCompactMap { item in item.invalidationList?.items }
    }
}
extension CloudFrontClient {
    /// Paginate over `[ListStreamingDistributionsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListStreamingDistributionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListStreamingDistributionsOutputResponse`
    public func listStreamingDistributionsPaginated(input: ListStreamingDistributionsInput) -> ClientRuntime.PaginatorSequence<ListStreamingDistributionsInput, ListStreamingDistributionsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListStreamingDistributionsInput, ListStreamingDistributionsOutputResponse>(input: input, inputKey: \ListStreamingDistributionsInput.marker, outputKey: \ListStreamingDistributionsOutputResponse.streamingDistributionList?.nextMarker, paginationFunction: self.listStreamingDistributions(input:))
    }
}

extension ListStreamingDistributionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListStreamingDistributionsInput {
        return ListStreamingDistributionsInput(
            marker: token,
            maxItems: self.maxItems
        )}
}

extension PaginatorSequence where Input == ListStreamingDistributionsInput, Output == ListStreamingDistributionsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listStreamingDistributionsPaginated`
    /// to access the nested member `[CloudFrontClientTypes.StreamingDistributionSummary]`
    /// - Returns: `[CloudFrontClientTypes.StreamingDistributionSummary]`
    public func items() async throws -> [CloudFrontClientTypes.StreamingDistributionSummary] {
        return try await self.asyncCompactMap { item in item.streamingDistributionList?.items }
    }
}
