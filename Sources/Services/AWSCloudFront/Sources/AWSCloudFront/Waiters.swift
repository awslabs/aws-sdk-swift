//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

import class SmithyWaitersAPI.Waiter
import enum SmithyWaitersAPI.JMESUtils
import struct SmithyWaitersAPI.WaiterConfiguration
import struct SmithyWaitersAPI.WaiterOptions
import struct SmithyWaitersAPI.WaiterOutcome

extension CloudFrontClient {

    static func distributionDeployedWaiterConfig() throws -> SmithyWaitersAPI.WaiterConfiguration<GetDistributionInput, GetDistributionOutput> {
        let acceptors: [SmithyWaitersAPI.WaiterConfiguration<GetDistributionInput, GetDistributionOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: GetDistributionInput, result: Swift.Result<GetDistributionOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Distribution.Status"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "Deployed"
                guard case .success(let output) = result else { return false }
                let distribution = output.distribution
                let status = distribution?.status
                return SmithyWaitersAPI.JMESUtils.compare(status, ==, "Deployed")
            }),
        ]
        return try SmithyWaitersAPI.WaiterConfiguration<GetDistributionInput, GetDistributionOutput>(acceptors: acceptors, minDelay: 60.0, maxDelay: 2100.0)
    }

    /// Initiates waiting for the DistributionDeployed event on the getDistribution operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `GetDistributionInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilDistributionDeployed(options: SmithyWaitersAPI.WaiterOptions, input: GetDistributionInput) async throws -> SmithyWaitersAPI.WaiterOutcome<GetDistributionOutput> {
        let waiter = SmithyWaitersAPI.Waiter(config: try Self.distributionDeployedWaiterConfig(), operation: self.getDistribution(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func invalidationCompletedWaiterConfig() throws -> SmithyWaitersAPI.WaiterConfiguration<GetInvalidationInput, GetInvalidationOutput> {
        let acceptors: [SmithyWaitersAPI.WaiterConfiguration<GetInvalidationInput, GetInvalidationOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: GetInvalidationInput, result: Swift.Result<GetInvalidationOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "Invalidation.Status"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "Completed"
                guard case .success(let output) = result else { return false }
                let invalidation = output.invalidation
                let status = invalidation?.status
                return SmithyWaitersAPI.JMESUtils.compare(status, ==, "Completed")
            }),
        ]
        return try SmithyWaitersAPI.WaiterConfiguration<GetInvalidationInput, GetInvalidationOutput>(acceptors: acceptors, minDelay: 20.0, maxDelay: 600.0)
    }

    /// Initiates waiting for the InvalidationCompleted event on the getInvalidation operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `GetInvalidationInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilInvalidationCompleted(options: SmithyWaitersAPI.WaiterOptions, input: GetInvalidationInput) async throws -> SmithyWaitersAPI.WaiterOutcome<GetInvalidationOutput> {
        let waiter = SmithyWaitersAPI.Waiter(config: try Self.invalidationCompletedWaiterConfig(), operation: self.getInvalidation(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func streamingDistributionDeployedWaiterConfig() throws -> SmithyWaitersAPI.WaiterConfiguration<GetStreamingDistributionInput, GetStreamingDistributionOutput> {
        let acceptors: [SmithyWaitersAPI.WaiterConfiguration<GetStreamingDistributionInput, GetStreamingDistributionOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: GetStreamingDistributionInput, result: Swift.Result<GetStreamingDistributionOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "StreamingDistribution.Status"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "Deployed"
                guard case .success(let output) = result else { return false }
                let streamingDistribution = output.streamingDistribution
                let status = streamingDistribution?.status
                return SmithyWaitersAPI.JMESUtils.compare(status, ==, "Deployed")
            }),
        ]
        return try SmithyWaitersAPI.WaiterConfiguration<GetStreamingDistributionInput, GetStreamingDistributionOutput>(acceptors: acceptors, minDelay: 60.0, maxDelay: 1500.0)
    }

    /// Initiates waiting for the StreamingDistributionDeployed event on the getStreamingDistribution operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `GetStreamingDistributionInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilStreamingDistributionDeployed(options: SmithyWaitersAPI.WaiterOptions, input: GetStreamingDistributionInput) async throws -> SmithyWaitersAPI.WaiterOutcome<GetStreamingDistributionOutput> {
        let waiter = SmithyWaitersAPI.Waiter(config: try Self.streamingDistributionDeployedWaiterConfig(), operation: self.getStreamingDistribution(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }
}
