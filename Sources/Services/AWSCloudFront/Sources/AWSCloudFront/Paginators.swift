//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

import protocol ClientRuntime.PaginateToken
import struct ClientRuntime.PaginatorSequence

extension CloudFrontClient {
    /// Paginate over `[ListCloudFrontOriginAccessIdentitiesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListCloudFrontOriginAccessIdentitiesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListCloudFrontOriginAccessIdentitiesOutput`
    public func listCloudFrontOriginAccessIdentitiesPaginated(input: ListCloudFrontOriginAccessIdentitiesInput) -> ClientRuntime.PaginatorSequence<ListCloudFrontOriginAccessIdentitiesInput, ListCloudFrontOriginAccessIdentitiesOutput> {
        return ClientRuntime.PaginatorSequence<ListCloudFrontOriginAccessIdentitiesInput, ListCloudFrontOriginAccessIdentitiesOutput>(input: input, inputKey: \.marker, outputKey: \.cloudFrontOriginAccessIdentityList?.nextMarker, paginationFunction: self.listCloudFrontOriginAccessIdentities(input:))
    }
}

extension ListCloudFrontOriginAccessIdentitiesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListCloudFrontOriginAccessIdentitiesInput {
        return ListCloudFrontOriginAccessIdentitiesInput(
            marker: token,
            maxItems: self.maxItems
        )}
}

extension PaginatorSequence where OperationStackInput == ListCloudFrontOriginAccessIdentitiesInput, OperationStackOutput == ListCloudFrontOriginAccessIdentitiesOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listCloudFrontOriginAccessIdentitiesPaginated`
    /// to access the nested member `[CloudFrontClientTypes.CloudFrontOriginAccessIdentitySummary]`
    /// - Returns: `[CloudFrontClientTypes.CloudFrontOriginAccessIdentitySummary]`
    public func items() async throws -> [CloudFrontClientTypes.CloudFrontOriginAccessIdentitySummary] {
        return try await self.asyncCompactMap { item in item.cloudFrontOriginAccessIdentityList?.items }
    }
}
extension CloudFrontClient {
    /// Paginate over `[ListConnectionGroupsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListConnectionGroupsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListConnectionGroupsOutput`
    public func listConnectionGroupsPaginated(input: ListConnectionGroupsInput) -> ClientRuntime.PaginatorSequence<ListConnectionGroupsInput, ListConnectionGroupsOutput> {
        return ClientRuntime.PaginatorSequence<ListConnectionGroupsInput, ListConnectionGroupsOutput>(input: input, inputKey: \.marker, outputKey: \.nextMarker, paginationFunction: self.listConnectionGroups(input:))
    }
}

extension ListConnectionGroupsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListConnectionGroupsInput {
        return ListConnectionGroupsInput(
            associationFilter: self.associationFilter,
            marker: token,
            maxItems: self.maxItems
        )}
}

extension PaginatorSequence where OperationStackInput == ListConnectionGroupsInput, OperationStackOutput == ListConnectionGroupsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listConnectionGroupsPaginated`
    /// to access the nested member `[CloudFrontClientTypes.ConnectionGroupSummary]`
    /// - Returns: `[CloudFrontClientTypes.ConnectionGroupSummary]`
    public func connectionGroups() async throws -> [CloudFrontClientTypes.ConnectionGroupSummary] {
        return try await self.asyncCompactMap { item in item.connectionGroups }
    }
}
extension CloudFrontClient {
    /// Paginate over `[ListDistributionsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListDistributionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListDistributionsOutput`
    public func listDistributionsPaginated(input: ListDistributionsInput) -> ClientRuntime.PaginatorSequence<ListDistributionsInput, ListDistributionsOutput> {
        return ClientRuntime.PaginatorSequence<ListDistributionsInput, ListDistributionsOutput>(input: input, inputKey: \.marker, outputKey: \.distributionList?.nextMarker, paginationFunction: self.listDistributions(input:))
    }
}

extension ListDistributionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListDistributionsInput {
        return ListDistributionsInput(
            marker: token,
            maxItems: self.maxItems
        )}
}

extension PaginatorSequence where OperationStackInput == ListDistributionsInput, OperationStackOutput == ListDistributionsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listDistributionsPaginated`
    /// to access the nested member `[CloudFrontClientTypes.DistributionSummary]`
    /// - Returns: `[CloudFrontClientTypes.DistributionSummary]`
    public func items() async throws -> [CloudFrontClientTypes.DistributionSummary] {
        return try await self.asyncCompactMap { item in item.distributionList?.items }
    }
}
extension CloudFrontClient {
    /// Paginate over `[ListDistributionsByConnectionModeOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListDistributionsByConnectionModeInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListDistributionsByConnectionModeOutput`
    public func listDistributionsByConnectionModePaginated(input: ListDistributionsByConnectionModeInput) -> ClientRuntime.PaginatorSequence<ListDistributionsByConnectionModeInput, ListDistributionsByConnectionModeOutput> {
        return ClientRuntime.PaginatorSequence<ListDistributionsByConnectionModeInput, ListDistributionsByConnectionModeOutput>(input: input, inputKey: \.marker, outputKey: \.distributionList?.nextMarker, paginationFunction: self.listDistributionsByConnectionMode(input:))
    }
}

extension ListDistributionsByConnectionModeInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListDistributionsByConnectionModeInput {
        return ListDistributionsByConnectionModeInput(
            connectionMode: self.connectionMode,
            marker: token,
            maxItems: self.maxItems
        )}
}

extension PaginatorSequence where OperationStackInput == ListDistributionsByConnectionModeInput, OperationStackOutput == ListDistributionsByConnectionModeOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listDistributionsByConnectionModePaginated`
    /// to access the nested member `[CloudFrontClientTypes.DistributionSummary]`
    /// - Returns: `[CloudFrontClientTypes.DistributionSummary]`
    public func items() async throws -> [CloudFrontClientTypes.DistributionSummary] {
        return try await self.asyncCompactMap { item in item.distributionList?.items }
    }
}
extension CloudFrontClient {
    /// Paginate over `[ListDistributionTenantsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListDistributionTenantsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListDistributionTenantsOutput`
    public func listDistributionTenantsPaginated(input: ListDistributionTenantsInput) -> ClientRuntime.PaginatorSequence<ListDistributionTenantsInput, ListDistributionTenantsOutput> {
        return ClientRuntime.PaginatorSequence<ListDistributionTenantsInput, ListDistributionTenantsOutput>(input: input, inputKey: \.marker, outputKey: \.nextMarker, paginationFunction: self.listDistributionTenants(input:))
    }
}

extension ListDistributionTenantsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListDistributionTenantsInput {
        return ListDistributionTenantsInput(
            associationFilter: self.associationFilter,
            marker: token,
            maxItems: self.maxItems
        )}
}

extension PaginatorSequence where OperationStackInput == ListDistributionTenantsInput, OperationStackOutput == ListDistributionTenantsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listDistributionTenantsPaginated`
    /// to access the nested member `[CloudFrontClientTypes.DistributionTenantSummary]`
    /// - Returns: `[CloudFrontClientTypes.DistributionTenantSummary]`
    public func distributionTenantList() async throws -> [CloudFrontClientTypes.DistributionTenantSummary] {
        return try await self.asyncCompactMap { item in item.distributionTenantList }
    }
}
extension CloudFrontClient {
    /// Paginate over `[ListDistributionTenantsByCustomizationOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListDistributionTenantsByCustomizationInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListDistributionTenantsByCustomizationOutput`
    public func listDistributionTenantsByCustomizationPaginated(input: ListDistributionTenantsByCustomizationInput) -> ClientRuntime.PaginatorSequence<ListDistributionTenantsByCustomizationInput, ListDistributionTenantsByCustomizationOutput> {
        return ClientRuntime.PaginatorSequence<ListDistributionTenantsByCustomizationInput, ListDistributionTenantsByCustomizationOutput>(input: input, inputKey: \.marker, outputKey: \.nextMarker, paginationFunction: self.listDistributionTenantsByCustomization(input:))
    }
}

extension ListDistributionTenantsByCustomizationInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListDistributionTenantsByCustomizationInput {
        return ListDistributionTenantsByCustomizationInput(
            certificateArn: self.certificateArn,
            marker: token,
            maxItems: self.maxItems,
            webACLArn: self.webACLArn
        )}
}

extension PaginatorSequence where OperationStackInput == ListDistributionTenantsByCustomizationInput, OperationStackOutput == ListDistributionTenantsByCustomizationOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listDistributionTenantsByCustomizationPaginated`
    /// to access the nested member `[CloudFrontClientTypes.DistributionTenantSummary]`
    /// - Returns: `[CloudFrontClientTypes.DistributionTenantSummary]`
    public func distributionTenantList() async throws -> [CloudFrontClientTypes.DistributionTenantSummary] {
        return try await self.asyncCompactMap { item in item.distributionTenantList }
    }
}
extension CloudFrontClient {
    /// Paginate over `[ListDomainConflictsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListDomainConflictsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListDomainConflictsOutput`
    public func listDomainConflictsPaginated(input: ListDomainConflictsInput) -> ClientRuntime.PaginatorSequence<ListDomainConflictsInput, ListDomainConflictsOutput> {
        return ClientRuntime.PaginatorSequence<ListDomainConflictsInput, ListDomainConflictsOutput>(input: input, inputKey: \.marker, outputKey: \.nextMarker, paginationFunction: self.listDomainConflicts(input:))
    }
}

extension ListDomainConflictsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListDomainConflictsInput {
        return ListDomainConflictsInput(
            domain: self.domain,
            domainControlValidationResource: self.domainControlValidationResource,
            marker: token,
            maxItems: self.maxItems
        )}
}

extension PaginatorSequence where OperationStackInput == ListDomainConflictsInput, OperationStackOutput == ListDomainConflictsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listDomainConflictsPaginated`
    /// to access the nested member `[CloudFrontClientTypes.DomainConflict]`
    /// - Returns: `[CloudFrontClientTypes.DomainConflict]`
    public func domainConflicts() async throws -> [CloudFrontClientTypes.DomainConflict] {
        return try await self.asyncCompactMap { item in item.domainConflicts }
    }
}
extension CloudFrontClient {
    /// Paginate over `[ListInvalidationsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListInvalidationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListInvalidationsOutput`
    public func listInvalidationsPaginated(input: ListInvalidationsInput) -> ClientRuntime.PaginatorSequence<ListInvalidationsInput, ListInvalidationsOutput> {
        return ClientRuntime.PaginatorSequence<ListInvalidationsInput, ListInvalidationsOutput>(input: input, inputKey: \.marker, outputKey: \.invalidationList?.nextMarker, paginationFunction: self.listInvalidations(input:))
    }
}

extension ListInvalidationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListInvalidationsInput {
        return ListInvalidationsInput(
            distributionId: self.distributionId,
            marker: token,
            maxItems: self.maxItems
        )}
}

extension PaginatorSequence where OperationStackInput == ListInvalidationsInput, OperationStackOutput == ListInvalidationsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listInvalidationsPaginated`
    /// to access the nested member `[CloudFrontClientTypes.InvalidationSummary]`
    /// - Returns: `[CloudFrontClientTypes.InvalidationSummary]`
    public func items() async throws -> [CloudFrontClientTypes.InvalidationSummary] {
        return try await self.asyncCompactMap { item in item.invalidationList?.items }
    }
}
extension CloudFrontClient {
    /// Paginate over `[ListInvalidationsForDistributionTenantOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListInvalidationsForDistributionTenantInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListInvalidationsForDistributionTenantOutput`
    public func listInvalidationsForDistributionTenantPaginated(input: ListInvalidationsForDistributionTenantInput) -> ClientRuntime.PaginatorSequence<ListInvalidationsForDistributionTenantInput, ListInvalidationsForDistributionTenantOutput> {
        return ClientRuntime.PaginatorSequence<ListInvalidationsForDistributionTenantInput, ListInvalidationsForDistributionTenantOutput>(input: input, inputKey: \.marker, outputKey: \.invalidationList?.nextMarker, paginationFunction: self.listInvalidationsForDistributionTenant(input:))
    }
}

extension ListInvalidationsForDistributionTenantInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListInvalidationsForDistributionTenantInput {
        return ListInvalidationsForDistributionTenantInput(
            id: self.id,
            marker: token,
            maxItems: self.maxItems
        )}
}

extension PaginatorSequence where OperationStackInput == ListInvalidationsForDistributionTenantInput, OperationStackOutput == ListInvalidationsForDistributionTenantOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listInvalidationsForDistributionTenantPaginated`
    /// to access the nested member `[CloudFrontClientTypes.InvalidationSummary]`
    /// - Returns: `[CloudFrontClientTypes.InvalidationSummary]`
    public func items() async throws -> [CloudFrontClientTypes.InvalidationSummary] {
        return try await self.asyncCompactMap { item in item.invalidationList?.items }
    }
}
extension CloudFrontClient {
    /// Paginate over `[ListKeyValueStoresOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListKeyValueStoresInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListKeyValueStoresOutput`
    public func listKeyValueStoresPaginated(input: ListKeyValueStoresInput) -> ClientRuntime.PaginatorSequence<ListKeyValueStoresInput, ListKeyValueStoresOutput> {
        return ClientRuntime.PaginatorSequence<ListKeyValueStoresInput, ListKeyValueStoresOutput>(input: input, inputKey: \.marker, outputKey: \.keyValueStoreList?.nextMarker, paginationFunction: self.listKeyValueStores(input:))
    }
}

extension ListKeyValueStoresInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListKeyValueStoresInput {
        return ListKeyValueStoresInput(
            marker: token,
            maxItems: self.maxItems,
            status: self.status
        )}
}

extension PaginatorSequence where OperationStackInput == ListKeyValueStoresInput, OperationStackOutput == ListKeyValueStoresOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listKeyValueStoresPaginated`
    /// to access the nested member `[CloudFrontClientTypes.KeyValueStore]`
    /// - Returns: `[CloudFrontClientTypes.KeyValueStore]`
    public func items() async throws -> [CloudFrontClientTypes.KeyValueStore] {
        return try await self.asyncCompactMap { item in item.keyValueStoreList?.items }
    }
}
extension CloudFrontClient {
    /// Paginate over `[ListPublicKeysOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListPublicKeysInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListPublicKeysOutput`
    public func listPublicKeysPaginated(input: ListPublicKeysInput) -> ClientRuntime.PaginatorSequence<ListPublicKeysInput, ListPublicKeysOutput> {
        return ClientRuntime.PaginatorSequence<ListPublicKeysInput, ListPublicKeysOutput>(input: input, inputKey: \.marker, outputKey: \.publicKeyList?.nextMarker, paginationFunction: self.listPublicKeys(input:))
    }
}

extension ListPublicKeysInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListPublicKeysInput {
        return ListPublicKeysInput(
            marker: token,
            maxItems: self.maxItems
        )}
}

extension PaginatorSequence where OperationStackInput == ListPublicKeysInput, OperationStackOutput == ListPublicKeysOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listPublicKeysPaginated`
    /// to access the nested member `[CloudFrontClientTypes.PublicKeySummary]`
    /// - Returns: `[CloudFrontClientTypes.PublicKeySummary]`
    public func items() async throws -> [CloudFrontClientTypes.PublicKeySummary] {
        return try await self.asyncCompactMap { item in item.publicKeyList?.items }
    }
}
extension CloudFrontClient {
    /// Paginate over `[ListStreamingDistributionsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListStreamingDistributionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListStreamingDistributionsOutput`
    public func listStreamingDistributionsPaginated(input: ListStreamingDistributionsInput) -> ClientRuntime.PaginatorSequence<ListStreamingDistributionsInput, ListStreamingDistributionsOutput> {
        return ClientRuntime.PaginatorSequence<ListStreamingDistributionsInput, ListStreamingDistributionsOutput>(input: input, inputKey: \.marker, outputKey: \.streamingDistributionList?.nextMarker, paginationFunction: self.listStreamingDistributions(input:))
    }
}

extension ListStreamingDistributionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListStreamingDistributionsInput {
        return ListStreamingDistributionsInput(
            marker: token,
            maxItems: self.maxItems
        )}
}

extension PaginatorSequence where OperationStackInput == ListStreamingDistributionsInput, OperationStackOutput == ListStreamingDistributionsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listStreamingDistributionsPaginated`
    /// to access the nested member `[CloudFrontClientTypes.StreamingDistributionSummary]`
    /// - Returns: `[CloudFrontClientTypes.StreamingDistributionSummary]`
    public func items() async throws -> [CloudFrontClientTypes.StreamingDistributionSummary] {
        return try await self.asyncCompactMap { item in item.streamingDistributionList?.items }
    }
}
