//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError

/// You don't have sufficient permission to perform this action.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SupportAppClientTypes {

    public enum AccountType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case management
        case member
        case sdkUnknown(Swift.String)

        public static var allCases: [AccountType] {
            return [
                .management,
                .member
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .management: return "management"
            case .member: return "member"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// Your request has a conflict. For example, you might receive this error if you try the following:
///
/// * Add, update, or delete a Slack channel configuration before you add a Slack workspace to your Amazon Web Services account.
///
/// * Add a Slack channel configuration that already exists in your Amazon Web Services account.
///
/// * Delete a Slack channel configuration for a live chat channel.
///
/// * Delete a Slack workspace from your Amazon Web Services account that has an active live chat channel.
///
/// * Call the RegisterSlackWorkspaceForOrganization API from an Amazon Web Services account that doesn't belong to an organization.
///
/// * Call the RegisterSlackWorkspaceForOrganization API from a member account, but the management account hasn't registered that workspace yet for the organization.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// We canâ€™t process your request right now because of a server issue. Try again later.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Your Service Quotas request exceeds the quota for the service. For example, your Service Quotas request to Amazon Web Services Support App might exceed the maximum number of workspaces or channels per account, or the maximum number of accounts per Slack channel.
public struct ServiceQuotaExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceQuotaExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Your request input doesn't meet the constraints that the Amazon Web Services Support App specifies.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SupportAppClientTypes {

    public enum NotificationSeverityLevel: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case all
        case high
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [NotificationSeverityLevel] {
            return [
                .all,
                .high,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .all: return "all"
            case .high: return "high"
            case .none: return "none"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateSlackChannelConfigurationInput: Swift.Sendable {
    /// The channel ID in Slack. This ID identifies a channel within a Slack workspace.
    /// This member is required.
    public var channelId: Swift.String?
    /// The name of the Slack channel that you configure for the Amazon Web Services Support App.
    public var channelName: Swift.String?
    /// The Amazon Resource Name (ARN) of an IAM role that you want to use to perform operations on Amazon Web Services. For more information, see [Managing access to the Amazon Web Services Support App](https://docs.aws.amazon.com/awssupport/latest/user/support-app-permissions.html) in the Amazon Web Services Support User Guide.
    /// This member is required.
    public var channelRoleArn: Swift.String?
    /// Whether you want to get notified when a support case has a new correspondence.
    public var notifyOnAddCorrespondenceToCase: Swift.Bool?
    /// The case severity for a support case that you want to receive notifications. If you specify high or all, you must specify true for at least one of the following parameters:
    ///
    /// * notifyOnAddCorrespondenceToCase
    ///
    /// * notifyOnCreateOrReopenCase
    ///
    /// * notifyOnResolveCase
    ///
    ///
    /// If you specify none, the following parameters must be null or false:
    ///
    /// * notifyOnAddCorrespondenceToCase
    ///
    /// * notifyOnCreateOrReopenCase
    ///
    /// * notifyOnResolveCase
    ///
    ///
    /// If you don't specify these parameters in your request, they default to false.
    /// This member is required.
    public var notifyOnCaseSeverity: SupportAppClientTypes.NotificationSeverityLevel?
    /// Whether you want to get notified when a support case is created or reopened.
    public var notifyOnCreateOrReopenCase: Swift.Bool?
    /// Whether you want to get notified when a support case is resolved.
    public var notifyOnResolveCase: Swift.Bool?
    /// The team ID in Slack. This ID uniquely identifies a Slack workspace, such as T012ABCDEFG.
    /// This member is required.
    public var teamId: Swift.String?

    public init(
        channelId: Swift.String? = nil,
        channelName: Swift.String? = nil,
        channelRoleArn: Swift.String? = nil,
        notifyOnAddCorrespondenceToCase: Swift.Bool? = nil,
        notifyOnCaseSeverity: SupportAppClientTypes.NotificationSeverityLevel? = nil,
        notifyOnCreateOrReopenCase: Swift.Bool? = nil,
        notifyOnResolveCase: Swift.Bool? = nil,
        teamId: Swift.String? = nil
    )
    {
        self.channelId = channelId
        self.channelName = channelName
        self.channelRoleArn = channelRoleArn
        self.notifyOnAddCorrespondenceToCase = notifyOnAddCorrespondenceToCase
        self.notifyOnCaseSeverity = notifyOnCaseSeverity
        self.notifyOnCreateOrReopenCase = notifyOnCreateOrReopenCase
        self.notifyOnResolveCase = notifyOnResolveCase
        self.teamId = teamId
    }
}

public struct CreateSlackChannelConfigurationOutput: Swift.Sendable {

    public init() { }
}

/// The specified resource is missing or doesn't exist, such as an account alias, Slack channel configuration, or Slack workspace configuration.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteAccountAliasInput: Swift.Sendable {

    public init() { }
}

public struct DeleteAccountAliasOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteSlackChannelConfigurationInput: Swift.Sendable {
    /// The channel ID in Slack. This ID identifies a channel within a Slack workspace.
    /// This member is required.
    public var channelId: Swift.String?
    /// The team ID in Slack. This ID uniquely identifies a Slack workspace, such as T012ABCDEFG.
    /// This member is required.
    public var teamId: Swift.String?

    public init(
        channelId: Swift.String? = nil,
        teamId: Swift.String? = nil
    )
    {
        self.channelId = channelId
        self.teamId = teamId
    }
}

public struct DeleteSlackChannelConfigurationOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteSlackWorkspaceConfigurationInput: Swift.Sendable {
    /// The team ID in Slack. This ID uniquely identifies a Slack workspace, such as T012ABCDEFG.
    /// This member is required.
    public var teamId: Swift.String?

    public init(
        teamId: Swift.String? = nil
    )
    {
        self.teamId = teamId
    }
}

public struct DeleteSlackWorkspaceConfigurationOutput: Swift.Sendable {

    public init() { }
}

public struct GetAccountAliasInput: Swift.Sendable {

    public init() { }
}

public struct GetAccountAliasOutput: Swift.Sendable {
    /// An alias or short name for an Amazon Web Services account.
    public var accountAlias: Swift.String?

    public init(
        accountAlias: Swift.String? = nil
    )
    {
        self.accountAlias = accountAlias
    }
}

public struct ListSlackChannelConfigurationsInput: Swift.Sendable {
    /// If the results of a search are large, the API only returns a portion of the results and includes a nextToken pagination token in the response. To retrieve the next batch of results, reissue the search request and include the returned token. When the API returns the last set of results, the response doesn't include a pagination token value.
    public var nextToken: Swift.String?

    public init(
        nextToken: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
    }
}

extension SupportAppClientTypes {

    /// The configuration for a Slack channel that you added for your Amazon Web Services account.
    public struct SlackChannelConfiguration: Swift.Sendable {
        /// The channel ID in Slack. This ID identifies a channel within a Slack workspace.
        /// This member is required.
        public var channelId: Swift.String?
        /// The name of the Slack channel that you configured with the Amazon Web Services Support App for your Amazon Web Services account.
        public var channelName: Swift.String?
        /// The Amazon Resource Name (ARN) of an IAM role that you want to use to perform operations on Amazon Web Services. For more information, see [Managing access to the Amazon Web Services Support App](https://docs.aws.amazon.com/awssupport/latest/user/support-app-permissions.html) in the Amazon Web Services Support User Guide.
        public var channelRoleArn: Swift.String?
        /// Whether you want to get notified when a support case has a new correspondence.
        public var notifyOnAddCorrespondenceToCase: Swift.Bool?
        /// The case severity for a support case that you want to receive notifications.
        public var notifyOnCaseSeverity: SupportAppClientTypes.NotificationSeverityLevel?
        /// Whether you want to get notified when a support case is created or reopened.
        public var notifyOnCreateOrReopenCase: Swift.Bool?
        /// Whether you want to get notified when a support case is resolved.
        public var notifyOnResolveCase: Swift.Bool?
        /// The team ID in Slack. This ID uniquely identifies a Slack workspace, such as T012ABCDEFG.
        /// This member is required.
        public var teamId: Swift.String?

        public init(
            channelId: Swift.String? = nil,
            channelName: Swift.String? = nil,
            channelRoleArn: Swift.String? = nil,
            notifyOnAddCorrespondenceToCase: Swift.Bool? = nil,
            notifyOnCaseSeverity: SupportAppClientTypes.NotificationSeverityLevel? = nil,
            notifyOnCreateOrReopenCase: Swift.Bool? = nil,
            notifyOnResolveCase: Swift.Bool? = nil,
            teamId: Swift.String? = nil
        )
        {
            self.channelId = channelId
            self.channelName = channelName
            self.channelRoleArn = channelRoleArn
            self.notifyOnAddCorrespondenceToCase = notifyOnAddCorrespondenceToCase
            self.notifyOnCaseSeverity = notifyOnCaseSeverity
            self.notifyOnCreateOrReopenCase = notifyOnCreateOrReopenCase
            self.notifyOnResolveCase = notifyOnResolveCase
            self.teamId = teamId
        }
    }
}

public struct ListSlackChannelConfigurationsOutput: Swift.Sendable {
    /// The point where pagination should resume when the response returns only partial results.
    public var nextToken: Swift.String?
    /// The configurations for a Slack channel.
    /// This member is required.
    public var slackChannelConfigurations: [SupportAppClientTypes.SlackChannelConfiguration]?

    public init(
        nextToken: Swift.String? = nil,
        slackChannelConfigurations: [SupportAppClientTypes.SlackChannelConfiguration]? = nil
    )
    {
        self.nextToken = nextToken
        self.slackChannelConfigurations = slackChannelConfigurations
    }
}

public struct ListSlackWorkspaceConfigurationsInput: Swift.Sendable {
    /// If the results of a search are large, the API only returns a portion of the results and includes a nextToken pagination token in the response. To retrieve the next batch of results, reissue the search request and include the returned token. When the API returns the last set of results, the response doesn't include a pagination token value.
    public var nextToken: Swift.String?

    public init(
        nextToken: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
    }
}

extension SupportAppClientTypes {

    /// The configuration for a Slack workspace that you added to an Amazon Web Services account.
    public struct SlackWorkspaceConfiguration: Swift.Sendable {
        /// Whether to allow member accounts to authorize Slack workspaces. Member accounts must be part of an organization in Organizations.
        public var allowOrganizationMemberAccount: Swift.Bool?
        /// The team ID in Slack. This ID uniquely identifies a Slack workspace, such as T012ABCDEFG.
        /// This member is required.
        public var teamId: Swift.String?
        /// The name of the Slack workspace.
        public var teamName: Swift.String?

        public init(
            allowOrganizationMemberAccount: Swift.Bool? = nil,
            teamId: Swift.String? = nil,
            teamName: Swift.String? = nil
        )
        {
            self.allowOrganizationMemberAccount = allowOrganizationMemberAccount
            self.teamId = teamId
            self.teamName = teamName
        }
    }
}

public struct ListSlackWorkspaceConfigurationsOutput: Swift.Sendable {
    /// The point where pagination should resume when the response returns only partial results.
    public var nextToken: Swift.String?
    /// The configurations for a Slack workspace.
    public var slackWorkspaceConfigurations: [SupportAppClientTypes.SlackWorkspaceConfiguration]?

    public init(
        nextToken: Swift.String? = nil,
        slackWorkspaceConfigurations: [SupportAppClientTypes.SlackWorkspaceConfiguration]? = nil
    )
    {
        self.nextToken = nextToken
        self.slackWorkspaceConfigurations = slackWorkspaceConfigurations
    }
}

public struct PutAccountAliasInput: Swift.Sendable {
    /// An alias or short name for an Amazon Web Services account.
    /// This member is required.
    public var accountAlias: Swift.String?

    public init(
        accountAlias: Swift.String? = nil
    )
    {
        self.accountAlias = accountAlias
    }
}

public struct PutAccountAliasOutput: Swift.Sendable {

    public init() { }
}

public struct RegisterSlackWorkspaceForOrganizationInput: Swift.Sendable {
    /// The team ID in Slack. This ID uniquely identifies a Slack workspace, such as T012ABCDEFG. Specify the Slack workspace that you want to use for your organization.
    /// This member is required.
    public var teamId: Swift.String?

    public init(
        teamId: Swift.String? = nil
    )
    {
        self.teamId = teamId
    }
}

public struct RegisterSlackWorkspaceForOrganizationOutput: Swift.Sendable {
    /// Whether the Amazon Web Services account is a management or member account that's part of an organization in Organizations.
    public var accountType: SupportAppClientTypes.AccountType?
    /// The team ID in Slack. This ID uniquely identifies a Slack workspace, such as T012ABCDEFG.
    public var teamId: Swift.String?
    /// The name of the Slack workspace.
    public var teamName: Swift.String?

    public init(
        accountType: SupportAppClientTypes.AccountType? = nil,
        teamId: Swift.String? = nil,
        teamName: Swift.String? = nil
    )
    {
        self.accountType = accountType
        self.teamId = teamId
        self.teamName = teamName
    }
}

public struct UpdateSlackChannelConfigurationInput: Swift.Sendable {
    /// The channel ID in Slack. This ID identifies a channel within a Slack workspace.
    /// This member is required.
    public var channelId: Swift.String?
    /// The Slack channel name that you want to update.
    public var channelName: Swift.String?
    /// The Amazon Resource Name (ARN) of an IAM role that you want to use to perform operations on Amazon Web Services. For more information, see [Managing access to the Amazon Web Services Support App](https://docs.aws.amazon.com/awssupport/latest/user/support-app-permissions.html) in the Amazon Web Services Support User Guide.
    public var channelRoleArn: Swift.String?
    /// Whether you want to get notified when a support case has a new correspondence.
    public var notifyOnAddCorrespondenceToCase: Swift.Bool?
    /// The case severity for a support case that you want to receive notifications. If you specify high or all, at least one of the following parameters must be true:
    ///
    /// * notifyOnAddCorrespondenceToCase
    ///
    /// * notifyOnCreateOrReopenCase
    ///
    /// * notifyOnResolveCase
    ///
    ///
    /// If you specify none, any of the following parameters that you specify in your request must be false:
    ///
    /// * notifyOnAddCorrespondenceToCase
    ///
    /// * notifyOnCreateOrReopenCase
    ///
    /// * notifyOnResolveCase
    ///
    ///
    /// If you don't specify these parameters in your request, the Amazon Web Services Support App uses the current values by default.
    public var notifyOnCaseSeverity: SupportAppClientTypes.NotificationSeverityLevel?
    /// Whether you want to get notified when a support case is created or reopened.
    public var notifyOnCreateOrReopenCase: Swift.Bool?
    /// Whether you want to get notified when a support case is resolved.
    public var notifyOnResolveCase: Swift.Bool?
    /// The team ID in Slack. This ID uniquely identifies a Slack workspace, such as T012ABCDEFG.
    /// This member is required.
    public var teamId: Swift.String?

    public init(
        channelId: Swift.String? = nil,
        channelName: Swift.String? = nil,
        channelRoleArn: Swift.String? = nil,
        notifyOnAddCorrespondenceToCase: Swift.Bool? = nil,
        notifyOnCaseSeverity: SupportAppClientTypes.NotificationSeverityLevel? = nil,
        notifyOnCreateOrReopenCase: Swift.Bool? = nil,
        notifyOnResolveCase: Swift.Bool? = nil,
        teamId: Swift.String? = nil
    )
    {
        self.channelId = channelId
        self.channelName = channelName
        self.channelRoleArn = channelRoleArn
        self.notifyOnAddCorrespondenceToCase = notifyOnAddCorrespondenceToCase
        self.notifyOnCaseSeverity = notifyOnCaseSeverity
        self.notifyOnCreateOrReopenCase = notifyOnCreateOrReopenCase
        self.notifyOnResolveCase = notifyOnResolveCase
        self.teamId = teamId
    }
}

public struct UpdateSlackChannelConfigurationOutput: Swift.Sendable {
    /// The channel ID in Slack. This ID identifies a channel within a Slack workspace.
    public var channelId: Swift.String?
    /// The name of the Slack channel that you configure for the Amazon Web Services Support App.
    public var channelName: Swift.String?
    /// The Amazon Resource Name (ARN) of an IAM role that you want to use to perform operations on Amazon Web Services. For more information, see [Managing access to the Amazon Web Services Support App](https://docs.aws.amazon.com/awssupport/latest/user/support-app-permissions.html) in the Amazon Web Services Support User Guide.
    public var channelRoleArn: Swift.String?
    /// Whether you want to get notified when a support case has a new correspondence.
    public var notifyOnAddCorrespondenceToCase: Swift.Bool?
    /// The case severity for a support case that you want to receive notifications.
    public var notifyOnCaseSeverity: SupportAppClientTypes.NotificationSeverityLevel?
    /// Whether you want to get notified when a support case is created or reopened.
    public var notifyOnCreateOrReopenCase: Swift.Bool?
    /// Whether you want to get notified when a support case is resolved.
    public var notifyOnResolveCase: Swift.Bool?
    /// The team ID in Slack. This ID uniquely identifies a Slack workspace, such as T012ABCDEFG.
    public var teamId: Swift.String?

    public init(
        channelId: Swift.String? = nil,
        channelName: Swift.String? = nil,
        channelRoleArn: Swift.String? = nil,
        notifyOnAddCorrespondenceToCase: Swift.Bool? = nil,
        notifyOnCaseSeverity: SupportAppClientTypes.NotificationSeverityLevel? = nil,
        notifyOnCreateOrReopenCase: Swift.Bool? = nil,
        notifyOnResolveCase: Swift.Bool? = nil,
        teamId: Swift.String? = nil
    )
    {
        self.channelId = channelId
        self.channelName = channelName
        self.channelRoleArn = channelRoleArn
        self.notifyOnAddCorrespondenceToCase = notifyOnAddCorrespondenceToCase
        self.notifyOnCaseSeverity = notifyOnCaseSeverity
        self.notifyOnCreateOrReopenCase = notifyOnCreateOrReopenCase
        self.notifyOnResolveCase = notifyOnResolveCase
        self.teamId = teamId
    }
}

extension CreateSlackChannelConfigurationInput {

    static func urlPathProvider(_ value: CreateSlackChannelConfigurationInput) -> Swift.String? {
        return "/control/create-slack-channel-configuration"
    }
}

extension DeleteAccountAliasInput {

    static func urlPathProvider(_ value: DeleteAccountAliasInput) -> Swift.String? {
        return "/control/delete-account-alias"
    }
}

extension DeleteSlackChannelConfigurationInput {

    static func urlPathProvider(_ value: DeleteSlackChannelConfigurationInput) -> Swift.String? {
        return "/control/delete-slack-channel-configuration"
    }
}

extension DeleteSlackWorkspaceConfigurationInput {

    static func urlPathProvider(_ value: DeleteSlackWorkspaceConfigurationInput) -> Swift.String? {
        return "/control/delete-slack-workspace-configuration"
    }
}

extension GetAccountAliasInput {

    static func urlPathProvider(_ value: GetAccountAliasInput) -> Swift.String? {
        return "/control/get-account-alias"
    }
}

extension ListSlackChannelConfigurationsInput {

    static func urlPathProvider(_ value: ListSlackChannelConfigurationsInput) -> Swift.String? {
        return "/control/list-slack-channel-configurations"
    }
}

extension ListSlackWorkspaceConfigurationsInput {

    static func urlPathProvider(_ value: ListSlackWorkspaceConfigurationsInput) -> Swift.String? {
        return "/control/list-slack-workspace-configurations"
    }
}

extension PutAccountAliasInput {

    static func urlPathProvider(_ value: PutAccountAliasInput) -> Swift.String? {
        return "/control/put-account-alias"
    }
}

extension RegisterSlackWorkspaceForOrganizationInput {

    static func urlPathProvider(_ value: RegisterSlackWorkspaceForOrganizationInput) -> Swift.String? {
        return "/control/register-slack-workspace-for-organization"
    }
}

extension UpdateSlackChannelConfigurationInput {

    static func urlPathProvider(_ value: UpdateSlackChannelConfigurationInput) -> Swift.String? {
        return "/control/update-slack-channel-configuration"
    }
}

extension CreateSlackChannelConfigurationInput {

    static func write(value: CreateSlackChannelConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["channelId"].write(value.channelId)
        try writer["channelName"].write(value.channelName)
        try writer["channelRoleArn"].write(value.channelRoleArn)
        try writer["notifyOnAddCorrespondenceToCase"].write(value.notifyOnAddCorrespondenceToCase)
        try writer["notifyOnCaseSeverity"].write(value.notifyOnCaseSeverity)
        try writer["notifyOnCreateOrReopenCase"].write(value.notifyOnCreateOrReopenCase)
        try writer["notifyOnResolveCase"].write(value.notifyOnResolveCase)
        try writer["teamId"].write(value.teamId)
    }
}

extension DeleteSlackChannelConfigurationInput {

    static func write(value: DeleteSlackChannelConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["channelId"].write(value.channelId)
        try writer["teamId"].write(value.teamId)
    }
}

extension DeleteSlackWorkspaceConfigurationInput {

    static func write(value: DeleteSlackWorkspaceConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["teamId"].write(value.teamId)
    }
}

extension ListSlackChannelConfigurationsInput {

    static func write(value: ListSlackChannelConfigurationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["nextToken"].write(value.nextToken)
    }
}

extension ListSlackWorkspaceConfigurationsInput {

    static func write(value: ListSlackWorkspaceConfigurationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["nextToken"].write(value.nextToken)
    }
}

extension PutAccountAliasInput {

    static func write(value: PutAccountAliasInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accountAlias"].write(value.accountAlias)
    }
}

extension RegisterSlackWorkspaceForOrganizationInput {

    static func write(value: RegisterSlackWorkspaceForOrganizationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["teamId"].write(value.teamId)
    }
}

extension UpdateSlackChannelConfigurationInput {

    static func write(value: UpdateSlackChannelConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["channelId"].write(value.channelId)
        try writer["channelName"].write(value.channelName)
        try writer["channelRoleArn"].write(value.channelRoleArn)
        try writer["notifyOnAddCorrespondenceToCase"].write(value.notifyOnAddCorrespondenceToCase)
        try writer["notifyOnCaseSeverity"].write(value.notifyOnCaseSeverity)
        try writer["notifyOnCreateOrReopenCase"].write(value.notifyOnCreateOrReopenCase)
        try writer["notifyOnResolveCase"].write(value.notifyOnResolveCase)
        try writer["teamId"].write(value.teamId)
    }
}

extension CreateSlackChannelConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateSlackChannelConfigurationOutput {
        return CreateSlackChannelConfigurationOutput()
    }
}

extension DeleteAccountAliasOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteAccountAliasOutput {
        return DeleteAccountAliasOutput()
    }
}

extension DeleteSlackChannelConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteSlackChannelConfigurationOutput {
        return DeleteSlackChannelConfigurationOutput()
    }
}

extension DeleteSlackWorkspaceConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteSlackWorkspaceConfigurationOutput {
        return DeleteSlackWorkspaceConfigurationOutput()
    }
}

extension GetAccountAliasOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetAccountAliasOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetAccountAliasOutput()
        value.accountAlias = try reader["accountAlias"].readIfPresent()
        return value
    }
}

extension ListSlackChannelConfigurationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListSlackChannelConfigurationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListSlackChannelConfigurationsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.slackChannelConfigurations = try reader["slackChannelConfigurations"].readListIfPresent(memberReadingClosure: SupportAppClientTypes.SlackChannelConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListSlackWorkspaceConfigurationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListSlackWorkspaceConfigurationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListSlackWorkspaceConfigurationsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.slackWorkspaceConfigurations = try reader["slackWorkspaceConfigurations"].readListIfPresent(memberReadingClosure: SupportAppClientTypes.SlackWorkspaceConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PutAccountAliasOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutAccountAliasOutput {
        return PutAccountAliasOutput()
    }
}

extension RegisterSlackWorkspaceForOrganizationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RegisterSlackWorkspaceForOrganizationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RegisterSlackWorkspaceForOrganizationOutput()
        value.accountType = try reader["accountType"].readIfPresent()
        value.teamId = try reader["teamId"].readIfPresent()
        value.teamName = try reader["teamName"].readIfPresent()
        return value
    }
}

extension UpdateSlackChannelConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateSlackChannelConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateSlackChannelConfigurationOutput()
        value.channelId = try reader["channelId"].readIfPresent()
        value.channelName = try reader["channelName"].readIfPresent()
        value.channelRoleArn = try reader["channelRoleArn"].readIfPresent()
        value.notifyOnAddCorrespondenceToCase = try reader["notifyOnAddCorrespondenceToCase"].readIfPresent()
        value.notifyOnCaseSeverity = try reader["notifyOnCaseSeverity"].readIfPresent()
        value.notifyOnCreateOrReopenCase = try reader["notifyOnCreateOrReopenCase"].readIfPresent()
        value.notifyOnResolveCase = try reader["notifyOnResolveCase"].readIfPresent()
        value.teamId = try reader["teamId"].readIfPresent()
        return value
    }
}

enum CreateSlackChannelConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteAccountAliasOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteSlackChannelConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteSlackWorkspaceConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetAccountAliasOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListSlackChannelConfigurationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListSlackWorkspaceConfigurationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutAccountAliasOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RegisterSlackWorkspaceForOrganizationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateSlackChannelConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension InternalServerException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalServerException {
        let reader = baseError.errorBodyReader
        var value = InternalServerException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceQuotaExceededException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ServiceQuotaExceededException {
        let reader = baseError.errorBodyReader
        var value = ServiceQuotaExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SupportAppClientTypes.SlackChannelConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> SupportAppClientTypes.SlackChannelConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SupportAppClientTypes.SlackChannelConfiguration()
        value.teamId = try reader["teamId"].readIfPresent() ?? ""
        value.channelId = try reader["channelId"].readIfPresent() ?? ""
        value.channelName = try reader["channelName"].readIfPresent()
        value.notifyOnCreateOrReopenCase = try reader["notifyOnCreateOrReopenCase"].readIfPresent()
        value.notifyOnAddCorrespondenceToCase = try reader["notifyOnAddCorrespondenceToCase"].readIfPresent()
        value.notifyOnResolveCase = try reader["notifyOnResolveCase"].readIfPresent()
        value.notifyOnCaseSeverity = try reader["notifyOnCaseSeverity"].readIfPresent()
        value.channelRoleArn = try reader["channelRoleArn"].readIfPresent()
        return value
    }
}

extension SupportAppClientTypes.SlackWorkspaceConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> SupportAppClientTypes.SlackWorkspaceConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SupportAppClientTypes.SlackWorkspaceConfiguration()
        value.teamId = try reader["teamId"].readIfPresent() ?? ""
        value.teamName = try reader["teamName"].readIfPresent()
        value.allowOrganizationMemberAccount = try reader["allowOrganizationMemberAccount"].readIfPresent()
        return value
    }
}

public enum SupportAppClientTypes {}
