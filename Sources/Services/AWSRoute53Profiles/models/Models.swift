// Code generated by smithy-swift-codegen. DO NOT EDIT!
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import AWSClientRuntime
import ClientRuntime
import Foundation
import Smithy
import SmithyHTTPAPI
import SmithyJSON
import SmithyReadWrite

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

/// The current account doesn't have the IAM permissions required to perform the specified operation.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension AssociateProfileInput {

    static func urlPathProvider(_ value: AssociateProfileInput) -> Swift.String? {
        return "/profileassociation"
    }
}

extension AssociateProfileInput {

    static func write(value: AssociateProfileInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["ProfileId"].write(value.profileId)
        try writer["ResourceId"].write(value.resourceId)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: Route53ProfilesClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

public struct AssociateProfileInput {
    /// A name for the association.
    /// This member is required.
    public var name: Swift.String?
    /// ID of the Profile.
    /// This member is required.
    public var profileId: Swift.String?
    /// The ID of the VPC.
    /// This member is required.
    public var resourceId: Swift.String?
    /// A list of the tag keys and values that you want to identify the Profile association.
    public var tags: [Route53ProfilesClientTypes.Tag]?

    public init(
        name: Swift.String? = nil,
        profileId: Swift.String? = nil,
        resourceId: Swift.String? = nil,
        tags: [Route53ProfilesClientTypes.Tag]? = nil
    )
    {
        self.name = name
        self.profileId = profileId
        self.resourceId = resourceId
        self.tags = tags
    }
}

extension AssociateProfileOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HttpResponse) async throws -> AssociateProfileOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AssociateProfileOutput()
        value.profileAssociation = try reader["ProfileAssociation"].readIfPresent(with: Route53ProfilesClientTypes.ProfileAssociation.read(from:))
        return value
    }
}

public struct AssociateProfileOutput {
    /// The association that you just created. The association has an ID that you can use to identify it in other requests, like update and delete.
    public var profileAssociation: Route53ProfilesClientTypes.ProfileAssociation?

    public init(
        profileAssociation: Route53ProfilesClientTypes.ProfileAssociation? = nil
    )
    {
        self.profileAssociation = profileAssociation
    }
}

enum AssociateProfileOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HttpResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceExistsException": return try ResourceExistsException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension AssociateResourceToProfileInput {

    static func urlPathProvider(_ value: AssociateResourceToProfileInput) -> Swift.String? {
        return "/profileresourceassociation"
    }
}

extension AssociateResourceToProfileInput {

    static func write(value: AssociateResourceToProfileInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["ProfileId"].write(value.profileId)
        try writer["ResourceArn"].write(value.resourceArn)
        try writer["ResourceProperties"].write(value.resourceProperties)
    }
}

public struct AssociateResourceToProfileInput {
    /// Name for the resource association.
    /// This member is required.
    public var name: Swift.String?
    /// ID of the Profile.
    /// This member is required.
    public var profileId: Swift.String?
    /// Amazon resource number, ARN, of the DNS resource.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// If you are adding a DNS Firewall rule group, include also a priority. The priority indicates the processing order for the rule groups, starting with the priority assinged the lowest value. The allowed values for priority are between 100 and 9900.
    public var resourceProperties: Swift.String?

    public init(
        name: Swift.String? = nil,
        profileId: Swift.String? = nil,
        resourceArn: Swift.String? = nil,
        resourceProperties: Swift.String? = nil
    )
    {
        self.name = name
        self.profileId = profileId
        self.resourceArn = resourceArn
        self.resourceProperties = resourceProperties
    }
}

extension AssociateResourceToProfileOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HttpResponse) async throws -> AssociateResourceToProfileOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AssociateResourceToProfileOutput()
        value.profileResourceAssociation = try reader["ProfileResourceAssociation"].readIfPresent(with: Route53ProfilesClientTypes.ProfileResourceAssociation.read(from:))
        return value
    }
}

public struct AssociateResourceToProfileOutput {
    /// Infromation about the AssociateResourceToProfile, including a status message.
    public var profileResourceAssociation: Route53ProfilesClientTypes.ProfileResourceAssociation?

    public init(
        profileResourceAssociation: Route53ProfilesClientTypes.ProfileResourceAssociation? = nil
    )
    {
        self.profileResourceAssociation = profileResourceAssociation
    }
}

enum AssociateResourceToProfileOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HttpResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServiceErrorException": return try InternalServiceErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

/// The request you submitted conflicts with an existing request.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CreateProfileInput {

    static func urlPathProvider(_ value: CreateProfileInput) -> Swift.String? {
        return "/profile"
    }
}

extension CreateProfileInput {

    static func write(value: CreateProfileInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientToken"].write(value.clientToken)
        try writer["Name"].write(value.name)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: Route53ProfilesClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

public struct CreateProfileInput {
    /// ClientToken is an idempotency token that ensures a call to CreateProfile completes only once. You choose the value to pass. For example, an issue might prevent you from getting a response from CreateProfile. In this case, safely retry your call to CreateProfile by using the same CreateProfile parameter value.
    /// This member is required.
    public var clientToken: Swift.String?
    /// A name for the Profile.
    /// This member is required.
    public var name: Swift.String?
    /// A list of the tag keys and values that you want to associate with the Route 53 Profile.
    public var tags: [Route53ProfilesClientTypes.Tag]?

    public init(
        clientToken: Swift.String? = nil,
        name: Swift.String? = nil,
        tags: [Route53ProfilesClientTypes.Tag]? = nil
    )
    {
        self.clientToken = clientToken
        self.name = name
        self.tags = tags
    }
}

extension CreateProfileOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HttpResponse) async throws -> CreateProfileOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateProfileOutput()
        value.profile = try reader["Profile"].readIfPresent(with: Route53ProfilesClientTypes.Profile.read(from:))
        return value
    }
}

public struct CreateProfileOutput {
    /// The Profile that you just created.
    public var profile: Route53ProfilesClientTypes.Profile?

    public init(
        profile: Route53ProfilesClientTypes.Profile? = nil
    )
    {
        self.profile = profile
    }
}

enum CreateProfileOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HttpResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension DeleteProfileInput {

    static func urlPathProvider(_ value: DeleteProfileInput) -> Swift.String? {
        guard let profileId = value.profileId else {
            return nil
        }
        return "/profile/\(profileId.urlPercentEncoding())"
    }
}

public struct DeleteProfileInput {
    /// The ID of the Profile that you want to delete.
    /// This member is required.
    public var profileId: Swift.String?

    public init(
        profileId: Swift.String? = nil
    )
    {
        self.profileId = profileId
    }
}

extension DeleteProfileOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HttpResponse) async throws -> DeleteProfileOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteProfileOutput()
        value.profile = try reader["Profile"].readIfPresent(with: Route53ProfilesClientTypes.Profile.read(from:))
        return value
    }
}

public struct DeleteProfileOutput {
    /// Information about the DeleteProfile request, including the status of the request.
    public var profile: Route53ProfilesClientTypes.Profile?

    public init(
        profile: Route53ProfilesClientTypes.Profile? = nil
    )
    {
        self.profile = profile
    }
}

enum DeleteProfileOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HttpResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension DisassociateProfileInput {

    static func urlPathProvider(_ value: DisassociateProfileInput) -> Swift.String? {
        guard let profileId = value.profileId else {
            return nil
        }
        guard let resourceId = value.resourceId else {
            return nil
        }
        return "/profileassociation/Profileid/\(profileId.urlPercentEncoding())/resourceid/\(resourceId.urlPercentEncoding())"
    }
}

public struct DisassociateProfileInput {
    /// ID of the Profile.
    /// This member is required.
    public var profileId: Swift.String?
    /// The ID of the VPC.
    /// This member is required.
    public var resourceId: Swift.String?

    public init(
        profileId: Swift.String? = nil,
        resourceId: Swift.String? = nil
    )
    {
        self.profileId = profileId
        self.resourceId = resourceId
    }
}

extension DisassociateProfileOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HttpResponse) async throws -> DisassociateProfileOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DisassociateProfileOutput()
        value.profileAssociation = try reader["ProfileAssociation"].readIfPresent(with: Route53ProfilesClientTypes.ProfileAssociation.read(from:))
        return value
    }
}

public struct DisassociateProfileOutput {
    /// Information about the DisassociateProfile request.
    public var profileAssociation: Route53ProfilesClientTypes.ProfileAssociation?

    public init(
        profileAssociation: Route53ProfilesClientTypes.ProfileAssociation? = nil
    )
    {
        self.profileAssociation = profileAssociation
    }
}

enum DisassociateProfileOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HttpResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension DisassociateResourceFromProfileInput {

    static func urlPathProvider(_ value: DisassociateResourceFromProfileInput) -> Swift.String? {
        guard let profileId = value.profileId else {
            return nil
        }
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/profileresourceassociation/profileid/\(profileId.urlPercentEncoding())/resourcearn/\(resourceArn.urlPercentEncoding())"
    }
}

public struct DisassociateResourceFromProfileInput {
    /// The ID of the Profile.
    /// This member is required.
    public var profileId: Swift.String?
    /// The Amazon Resource Name (ARN) of the resource.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        profileId: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.profileId = profileId
        self.resourceArn = resourceArn
    }
}

extension DisassociateResourceFromProfileOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HttpResponse) async throws -> DisassociateResourceFromProfileOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DisassociateResourceFromProfileOutput()
        value.profileResourceAssociation = try reader["ProfileResourceAssociation"].readIfPresent(with: Route53ProfilesClientTypes.ProfileResourceAssociation.read(from:))
        return value
    }
}

public struct DisassociateResourceFromProfileOutput {
    /// Information about the DisassociateResourceFromProfile request, including the status of the request.
    public var profileResourceAssociation: Route53ProfilesClientTypes.ProfileResourceAssociation?

    public init(
        profileResourceAssociation: Route53ProfilesClientTypes.ProfileResourceAssociation? = nil
    )
    {
        self.profileResourceAssociation = profileResourceAssociation
    }
}

enum DisassociateResourceFromProfileOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HttpResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServiceErrorException": return try InternalServiceErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension GetProfileAssociationInput {

    static func urlPathProvider(_ value: GetProfileAssociationInput) -> Swift.String? {
        guard let profileAssociationId = value.profileAssociationId else {
            return nil
        }
        return "/profileassociation/\(profileAssociationId.urlPercentEncoding())"
    }
}

public struct GetProfileAssociationInput {
    /// The identifier of the association you want to get information about.
    /// This member is required.
    public var profileAssociationId: Swift.String?

    public init(
        profileAssociationId: Swift.String? = nil
    )
    {
        self.profileAssociationId = profileAssociationId
    }
}

extension GetProfileAssociationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HttpResponse) async throws -> GetProfileAssociationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetProfileAssociationOutput()
        value.profileAssociation = try reader["ProfileAssociation"].readIfPresent(with: Route53ProfilesClientTypes.ProfileAssociation.read(from:))
        return value
    }
}

public struct GetProfileAssociationOutput {
    /// Information about the Profile association that you specified in a GetProfileAssociation request.
    public var profileAssociation: Route53ProfilesClientTypes.ProfileAssociation?

    public init(
        profileAssociation: Route53ProfilesClientTypes.ProfileAssociation? = nil
    )
    {
        self.profileAssociation = profileAssociation
    }
}

enum GetProfileAssociationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HttpResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension GetProfileInput {

    static func urlPathProvider(_ value: GetProfileInput) -> Swift.String? {
        guard let profileId = value.profileId else {
            return nil
        }
        return "/profile/\(profileId.urlPercentEncoding())"
    }
}

public struct GetProfileInput {
    /// ID of the Profile.
    /// This member is required.
    public var profileId: Swift.String?

    public init(
        profileId: Swift.String? = nil
    )
    {
        self.profileId = profileId
    }
}

extension GetProfileOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HttpResponse) async throws -> GetProfileOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetProfileOutput()
        value.profile = try reader["Profile"].readIfPresent(with: Route53ProfilesClientTypes.Profile.read(from:))
        return value
    }
}

public struct GetProfileOutput {
    /// Information about the Profile, including the status of the Profile.
    public var profile: Route53ProfilesClientTypes.Profile?

    public init(
        profile: Route53ProfilesClientTypes.Profile? = nil
    )
    {
        self.profile = profile
    }
}

enum GetProfileOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HttpResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension GetProfileResourceAssociationInput {

    static func urlPathProvider(_ value: GetProfileResourceAssociationInput) -> Swift.String? {
        guard let profileResourceAssociationId = value.profileResourceAssociationId else {
            return nil
        }
        return "/profileresourceassociation/\(profileResourceAssociationId.urlPercentEncoding())"
    }
}

public struct GetProfileResourceAssociationInput {
    /// The ID of the profile resource association that you want to get information about.
    /// This member is required.
    public var profileResourceAssociationId: Swift.String?

    public init(
        profileResourceAssociationId: Swift.String? = nil
    )
    {
        self.profileResourceAssociationId = profileResourceAssociationId
    }
}

extension GetProfileResourceAssociationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HttpResponse) async throws -> GetProfileResourceAssociationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetProfileResourceAssociationOutput()
        value.profileResourceAssociation = try reader["ProfileResourceAssociation"].readIfPresent(with: Route53ProfilesClientTypes.ProfileResourceAssociation.read(from:))
        return value
    }
}

public struct GetProfileResourceAssociationOutput {
    /// Information about the Profile resource association that you specified in a GetProfileResourceAssociation request.
    public var profileResourceAssociation: Route53ProfilesClientTypes.ProfileResourceAssociation?

    public init(
        profileResourceAssociation: Route53ProfilesClientTypes.ProfileResourceAssociation? = nil
    )
    {
        self.profileResourceAssociation = profileResourceAssociation
    }
}

enum GetProfileResourceAssociationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HttpResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension InternalServiceErrorException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalServiceErrorException {
        let reader = baseError.errorBodyReader
        var value = InternalServiceErrorException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

/// An internal server error occured. Retry your request.
public struct InternalServiceErrorException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServiceErrorException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidNextTokenException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InvalidNextTokenException {
        let reader = baseError.errorBodyReader
        var value = InvalidNextTokenException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

/// The NextToken you provided isn;t valid.
public struct InvalidNextTokenException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidNextTokenException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidParameterException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InvalidParameterException {
        let reader = baseError.errorBodyReader
        var value = InvalidParameterException()
        value.properties.fieldName = try reader["FieldName"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

/// One or more parameters in this request are not valid.
public struct InvalidParameterException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The parameter field name for the invalid parameter exception.
        public internal(set) var fieldName: Swift.String? = nil
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidParameterException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        fieldName: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.fieldName = fieldName
        self.properties.message = message
    }
}

extension LimitExceededException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> LimitExceededException {
        let reader = baseError.errorBodyReader
        var value = LimitExceededException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.properties.resourceType = try reader["ResourceType"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

/// The request caused one or more limits to be exceeded.
public struct LimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        /// The resource type that caused the limits to be exceeded.
        public internal(set) var resourceType: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LimitExceededException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        resourceType: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.resourceType = resourceType
    }
}

extension ListProfileAssociationsInput {

    static func queryItemProvider(_ value: ListProfileAssociationsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let profileId = value.profileId {
            let profileIdQueryItem = Smithy.URIQueryItem(name: "profileId".urlPercentEncoding(), value: Swift.String(profileId).urlPercentEncoding())
            items.append(profileIdQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let resourceId = value.resourceId {
            let resourceIdQueryItem = Smithy.URIQueryItem(name: "resourceId".urlPercentEncoding(), value: Swift.String(resourceId).urlPercentEncoding())
            items.append(resourceIdQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListProfileAssociationsInput {

    static func urlPathProvider(_ value: ListProfileAssociationsInput) -> Swift.String? {
        return "/profileassociations"
    }
}

public struct ListProfileAssociationsInput {
    /// The maximum number of objects that you want to return for this request. If more objects are available, in the response, a NextToken value, which you can use in a subsequent call to get the next batch of objects, is provided. If you don't specify a value for MaxResults, up to 100 objects are returned.
    public var maxResults: Swift.Int?
    /// For the first call to this list request, omit this value. When you request a list of objects, at most the number of objects specified by MaxResults is returned. If more objects are available for retrieval, a NextToken value is returned in the response. To retrieve the next batch of objects, use the token that was returned for the prior request in your next request.
    public var nextToken: Swift.String?
    /// ID of the Profile.
    public var profileId: Swift.String?
    /// ID of the VPC.
    public var resourceId: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        profileId: Swift.String? = nil,
        resourceId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.profileId = profileId
        self.resourceId = resourceId
    }
}

extension ListProfileAssociationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HttpResponse) async throws -> ListProfileAssociationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListProfileAssociationsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.profileAssociations = try reader["ProfileAssociations"].readListIfPresent(memberReadingClosure: Route53ProfilesClientTypes.ProfileAssociation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

public struct ListProfileAssociationsOutput {
    /// If more than MaxResults profile associations match the specified criteria, you can submit another ListProfileAssociations request to get the next group of results. In the next request, specify the value of NextToken from the previous response.
    public var nextToken: Swift.String?
    /// A complex type that containts settings information about the profile's VPC associations.
    public var profileAssociations: [Route53ProfilesClientTypes.ProfileAssociation]?

    public init(
        nextToken: Swift.String? = nil,
        profileAssociations: [Route53ProfilesClientTypes.ProfileAssociation]? = nil
    )
    {
        self.nextToken = nextToken
        self.profileAssociations = profileAssociations
    }
}

enum ListProfileAssociationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HttpResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidNextTokenException": return try InvalidNextTokenException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ListProfileResourceAssociationsInput {

    static func queryItemProvider(_ value: ListProfileResourceAssociationsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let resourceType = value.resourceType {
            let resourceTypeQueryItem = Smithy.URIQueryItem(name: "resourceType".urlPercentEncoding(), value: Swift.String(resourceType).urlPercentEncoding())
            items.append(resourceTypeQueryItem)
        }
        return items
    }
}

extension ListProfileResourceAssociationsInput {

    static func urlPathProvider(_ value: ListProfileResourceAssociationsInput) -> Swift.String? {
        guard let profileId = value.profileId else {
            return nil
        }
        return "/profileresourceassociations/profileid/\(profileId.urlPercentEncoding())"
    }
}

public struct ListProfileResourceAssociationsInput {
    /// The maximum number of objects that you want to return for this request. If more objects are available, in the response, a NextToken value, which you can use in a subsequent call to get the next batch of objects, is provided. If you don't specify a value for MaxResults, up to 100 objects are returned.
    public var maxResults: Swift.Int?
    /// For the first call to this list request, omit this value. When you request a list of objects, at most the number of objects specified by MaxResults is returned. If more objects are available for retrieval, a NextToken value is returned in the response. To retrieve the next batch of objects, use the token that was returned for the prior request in your next request.
    public var nextToken: Swift.String?
    /// The ID of the Profile.
    /// This member is required.
    public var profileId: Swift.String?
    /// ID of a resource if you want information on only one type.
    public var resourceType: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        profileId: Swift.String? = nil,
        resourceType: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.profileId = profileId
        self.resourceType = resourceType
    }
}

extension ListProfileResourceAssociationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HttpResponse) async throws -> ListProfileResourceAssociationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListProfileResourceAssociationsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.profileResourceAssociations = try reader["ProfileResourceAssociations"].readListIfPresent(memberReadingClosure: Route53ProfilesClientTypes.ProfileResourceAssociation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

public struct ListProfileResourceAssociationsOutput {
    /// If more than MaxResults resource associations match the specified criteria, you can submit another ListProfileResourceAssociations request to get the next group of results. In the next request, specify the value of NextToken from the previous response.
    public var nextToken: Swift.String?
    /// Information about the profile resource association that you specified in a GetProfileResourceAssociation request.
    public var profileResourceAssociations: [Route53ProfilesClientTypes.ProfileResourceAssociation]?

    public init(
        nextToken: Swift.String? = nil,
        profileResourceAssociations: [Route53ProfilesClientTypes.ProfileResourceAssociation]? = nil
    )
    {
        self.nextToken = nextToken
        self.profileResourceAssociations = profileResourceAssociations
    }
}

enum ListProfileResourceAssociationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HttpResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServiceErrorException": return try InternalServiceErrorException.makeError(baseError: baseError)
            case "InvalidNextTokenException": return try InvalidNextTokenException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ListProfilesInput {

    static func queryItemProvider(_ value: ListProfilesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListProfilesInput {

    static func urlPathProvider(_ value: ListProfilesInput) -> Swift.String? {
        return "/profiles"
    }
}

public struct ListProfilesInput {
    /// The maximum number of objects that you want to return for this request. If more objects are available, in the response, a NextToken value, which you can use in a subsequent call to get the next batch of objects, is provided. If you don't specify a value for MaxResults, up to 100 objects are returned.
    public var maxResults: Swift.Int?
    /// For the first call to this list request, omit this value. When you request a list of objects, at most the number of objects specified by MaxResults is returned. If more objects are available for retrieval, a NextToken value is returned in the response. To retrieve the next batch of objects, use the token that was returned for the prior request in your next request.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension ListProfilesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HttpResponse) async throws -> ListProfilesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListProfilesOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.profileSummaries = try reader["ProfileSummaries"].readListIfPresent(memberReadingClosure: Route53ProfilesClientTypes.ProfileSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

public struct ListProfilesOutput {
    /// If more than MaxResults resource associations match the specified criteria, you can submit another ListProfiles request to get the next group of results. In the next request, specify the value of NextToken from the previous response.
    public var nextToken: Swift.String?
    /// Summary information about the Profiles.
    public var profileSummaries: [Route53ProfilesClientTypes.ProfileSummary]?

    public init(
        nextToken: Swift.String? = nil,
        profileSummaries: [Route53ProfilesClientTypes.ProfileSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.profileSummaries = profileSummaries
    }
}

enum ListProfilesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HttpResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidNextTokenException": return try InvalidNextTokenException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

public struct ListTagsForResourceInput {
    /// The Amazon Resource Name (ARN) for the resource that you want to list the tags for.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HttpResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: Swift.String.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

public struct ListTagsForResourceOutput {
    /// The tags that are associated with the resource that you specified in the ListTagsForResource request.
    /// This member is required.
    public var tags: [Swift.String:Swift.String]?

    public init(
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HttpResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension Route53ProfilesClientTypes.Profile {

    static func read(from reader: SmithyJSON.Reader) throws -> Route53ProfilesClientTypes.Profile {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Route53ProfilesClientTypes.Profile()
        value.id = try reader["Id"].readIfPresent()
        value.arn = try reader["Arn"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.ownerId = try reader["OwnerId"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.statusMessage = try reader["StatusMessage"].readIfPresent()
        value.shareStatus = try reader["ShareStatus"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: .epochSeconds)
        value.modificationTime = try reader["ModificationTime"].readTimestampIfPresent(format: .epochSeconds)
        value.clientToken = try reader["ClientToken"].readIfPresent()
        return value
    }
}

extension Route53ProfilesClientTypes {
    /// A complex type that includes settings for a Route 53 Profile.
    public struct Profile {
        /// The Amazon Resource Name (ARN) of the Profile.
        public var arn: Swift.String?
        /// The ClientToken value that was assigned when the Profile was created.
        public var clientToken: Swift.String?
        /// The date and time that the Profile was created, in Unix time format and Coordinated Universal Time (UTC).
        public var creationTime: Foundation.Date?
        /// ID of the Profile.
        public var id: Swift.String?
        /// The date and time that the Profile was modified, in Unix time format and Coordinated Universal Time (UTC).
        public var modificationTime: Foundation.Date?
        /// Name of the Profile.
        public var name: Swift.String?
        /// Amazon Web Services account ID of the Profile owner.
        public var ownerId: Swift.String?
        /// Sharing status for the Profile.
        public var shareStatus: Route53ProfilesClientTypes.ShareStatus?
        /// The status for the Profile.
        public var status: Route53ProfilesClientTypes.ProfileStatus?
        /// Status message that includes additiona information about the Profile.
        public var statusMessage: Swift.String?

        public init(
            arn: Swift.String? = nil,
            clientToken: Swift.String? = nil,
            creationTime: Foundation.Date? = nil,
            id: Swift.String? = nil,
            modificationTime: Foundation.Date? = nil,
            name: Swift.String? = nil,
            ownerId: Swift.String? = nil,
            shareStatus: Route53ProfilesClientTypes.ShareStatus? = nil,
            status: Route53ProfilesClientTypes.ProfileStatus? = nil,
            statusMessage: Swift.String? = nil
        )
        {
            self.arn = arn
            self.clientToken = clientToken
            self.creationTime = creationTime
            self.id = id
            self.modificationTime = modificationTime
            self.name = name
            self.ownerId = ownerId
            self.shareStatus = shareStatus
            self.status = status
            self.statusMessage = statusMessage
        }
    }

}

extension Route53ProfilesClientTypes.ProfileAssociation {

    static func read(from reader: SmithyJSON.Reader) throws -> Route53ProfilesClientTypes.ProfileAssociation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Route53ProfilesClientTypes.ProfileAssociation()
        value.id = try reader["Id"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.ownerId = try reader["OwnerId"].readIfPresent()
        value.profileId = try reader["ProfileId"].readIfPresent()
        value.resourceId = try reader["ResourceId"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.statusMessage = try reader["StatusMessage"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: .epochSeconds)
        value.modificationTime = try reader["ModificationTime"].readTimestampIfPresent(format: .epochSeconds)
        return value
    }
}

extension Route53ProfilesClientTypes {
    /// An association between a Route 53 Profile and a VPC.
    public struct ProfileAssociation {
        /// The date and time that the Profile association was created, in Unix time format and Coordinated Universal Time (UTC).
        public var creationTime: Foundation.Date?
        /// ID of the Profile association.
        public var id: Swift.String?
        /// The date and time that the Profile association was modified, in Unix time format and Coordinated Universal Time (UTC).
        public var modificationTime: Foundation.Date?
        /// Name of the Profile association.
        public var name: Swift.String?
        /// Amazon Web Services account ID of the Profile association owner.
        public var ownerId: Swift.String?
        /// ID of the Profile.
        public var profileId: Swift.String?
        /// The Amazon Resource Name (ARN) of the VPC.
        public var resourceId: Swift.String?
        /// Status of the Profile association.
        public var status: Route53ProfilesClientTypes.ProfileStatus?
        /// Additional information about the Profile association.
        public var statusMessage: Swift.String?

        public init(
            creationTime: Foundation.Date? = nil,
            id: Swift.String? = nil,
            modificationTime: Foundation.Date? = nil,
            name: Swift.String? = nil,
            ownerId: Swift.String? = nil,
            profileId: Swift.String? = nil,
            resourceId: Swift.String? = nil,
            status: Route53ProfilesClientTypes.ProfileStatus? = nil,
            statusMessage: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.id = id
            self.modificationTime = modificationTime
            self.name = name
            self.ownerId = ownerId
            self.profileId = profileId
            self.resourceId = resourceId
            self.status = status
            self.statusMessage = statusMessage
        }
    }

}

extension Route53ProfilesClientTypes.ProfileResourceAssociation {

    static func read(from reader: SmithyJSON.Reader) throws -> Route53ProfilesClientTypes.ProfileResourceAssociation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Route53ProfilesClientTypes.ProfileResourceAssociation()
        value.id = try reader["Id"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.ownerId = try reader["OwnerId"].readIfPresent()
        value.profileId = try reader["ProfileId"].readIfPresent()
        value.resourceArn = try reader["ResourceArn"].readIfPresent()
        value.resourceType = try reader["ResourceType"].readIfPresent()
        value.resourceProperties = try reader["ResourceProperties"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.statusMessage = try reader["StatusMessage"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: .epochSeconds)
        value.modificationTime = try reader["ModificationTime"].readTimestampIfPresent(format: .epochSeconds)
        return value
    }
}

extension Route53ProfilesClientTypes {
    /// The association between a Route 53 Profile and resources.
    public struct ProfileResourceAssociation {
        /// The date and time that the Profile resource association was created, in Unix time format and Coordinated Universal Time (UTC).
        public var creationTime: Foundation.Date?
        /// ID of the Profile resource association.
        public var id: Swift.String?
        /// The date and time that the Profile resource association was modified, in Unix time format and Coordinated Universal Time (UTC).
        public var modificationTime: Foundation.Date?
        /// Name of the Profile resource association.
        public var name: Swift.String?
        /// Amazon Web Services account ID of the Profile resource association owner.
        public var ownerId: Swift.String?
        /// Profile ID of the Profile that the resources are associated with.
        public var profileId: Swift.String?
        /// The Amazon Resource Name (ARN) of the resource association.
        public var resourceArn: Swift.String?
        /// If the DNS resource is a DNS Firewall rule group, this indicates the priority.
        public var resourceProperties: Swift.String?
        /// Resource type, such as a private hosted zone, or DNS Firewall rule group.
        public var resourceType: Swift.String?
        /// Status of the Profile resource association.
        public var status: Route53ProfilesClientTypes.ProfileStatus?
        /// Additional information about the Profile resource association.
        public var statusMessage: Swift.String?

        public init(
            creationTime: Foundation.Date? = nil,
            id: Swift.String? = nil,
            modificationTime: Foundation.Date? = nil,
            name: Swift.String? = nil,
            ownerId: Swift.String? = nil,
            profileId: Swift.String? = nil,
            resourceArn: Swift.String? = nil,
            resourceProperties: Swift.String? = nil,
            resourceType: Swift.String? = nil,
            status: Route53ProfilesClientTypes.ProfileStatus? = nil,
            statusMessage: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.id = id
            self.modificationTime = modificationTime
            self.name = name
            self.ownerId = ownerId
            self.profileId = profileId
            self.resourceArn = resourceArn
            self.resourceProperties = resourceProperties
            self.resourceType = resourceType
            self.status = status
            self.statusMessage = statusMessage
        }
    }

}

extension Route53ProfilesClientTypes {

    public enum ProfileStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case complete
        case creating
        case deleted
        case deleting
        case failed
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [ProfileStatus] {
            return [
                .complete,
                .creating,
                .deleted,
                .deleting,
                .failed,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .complete: return "COMPLETE"
            case .creating: return "CREATING"
            case .deleted: return "DELETED"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Route53ProfilesClientTypes.ProfileSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> Route53ProfilesClientTypes.ProfileSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = Route53ProfilesClientTypes.ProfileSummary()
        value.id = try reader["Id"].readIfPresent()
        value.arn = try reader["Arn"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.shareStatus = try reader["ShareStatus"].readIfPresent()
        return value
    }
}

extension Route53ProfilesClientTypes {
    /// Summary information about a Route 53 Profile.
    public struct ProfileSummary {
        /// The Amazon Resource Name (ARN) of the Profile.
        public var arn: Swift.String?
        /// ID of the Profile.
        public var id: Swift.String?
        /// Name of the Profile.
        public var name: Swift.String?
        /// Share status of the Profile.
        public var shareStatus: Route53ProfilesClientTypes.ShareStatus?

        public init(
            arn: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            shareStatus: Route53ProfilesClientTypes.ShareStatus? = nil
        )
        {
            self.arn = arn
            self.id = id
            self.name = name
            self.shareStatus = shareStatus
        }
    }

}

extension ResourceExistsException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceExistsException {
        let reader = baseError.errorBodyReader
        var value = ResourceExistsException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.properties.resourceType = try reader["ResourceType"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

/// The resource you are trying to associate, has already been associated.
public struct ResourceExistsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        /// The resource type that caused the resource exists exception.
        public internal(set) var resourceType: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceExistsException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        resourceType: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.resourceType = resourceType
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.properties.resourceType = try reader["ResourceType"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

/// The resource you are associating is not found.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        /// The resource type that caused the resource not found exception.
        public internal(set) var resourceType: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        resourceType: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.resourceType = resourceType
    }
}

public enum Route53ProfilesClientTypes {}

extension Route53ProfilesClientTypes {

    public enum ShareStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case notShared
        case sharedByMe
        case sharedWithMe
        case sdkUnknown(Swift.String)

        public static var allCases: [ShareStatus] {
            return [
                .notShared,
                .sharedByMe,
                .sharedWithMe
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .notShared: return "NOT_SHARED"
            case .sharedByMe: return "SHARED_BY_ME"
            case .sharedWithMe: return "SHARED_WITH_ME"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension Route53ProfilesClientTypes.Tag {

    static func write(value: Route53ProfilesClientTypes.Tag?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }
}

extension Route53ProfilesClientTypes {
    /// Tag for the Profile.
    public struct Tag {
        /// Key associated with the Tag.
        /// This member is required.
        public var key: Swift.String?
        /// Value for the Tag.
        /// This member is required.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: Swift.String.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

public struct TagResourceInput {
    /// The Amazon Resource Name (ARN) for the resource that you want to add tags to.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The tags that you want to add to the specified resource.
    /// This member is required.
    public var tags: [Swift.String:Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HttpResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

public struct TagResourceOutput {

    public init() { }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HttpResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ThrottlingException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ThrottlingException {
        let reader = baseError.errorBodyReader
        var value = ThrottlingException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

/// The request was throttled. Try again in a few minutes.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension UntagResourceInput {

    static func queryItemProvider(_ value: UntagResourceInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let tagKeys = value.tagKeys else {
            let message = "Creating a URL Query Item failed. tagKeys is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        tagKeys.forEach { queryItemValue in
            let queryItem = Smithy.URIQueryItem(name: "tagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
            items.append(queryItem)
        }
        return items
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

public struct UntagResourceInput {
    /// The Amazon Resource Name (ARN) for the resource that you want to remove tags from.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The tags that you want to remove to the specified resource.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HttpResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

public struct UntagResourceOutput {

    public init() { }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HttpResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension UpdateProfileResourceAssociationInput {

    static func urlPathProvider(_ value: UpdateProfileResourceAssociationInput) -> Swift.String? {
        guard let profileResourceAssociationId = value.profileResourceAssociationId else {
            return nil
        }
        return "/profileresourceassociation/\(profileResourceAssociationId.urlPercentEncoding())"
    }
}

extension UpdateProfileResourceAssociationInput {

    static func write(value: UpdateProfileResourceAssociationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["ResourceProperties"].write(value.resourceProperties)
    }
}

public struct UpdateProfileResourceAssociationInput {
    /// Name of the resource association.
    public var name: Swift.String?
    /// ID of the resource association.
    /// This member is required.
    public var profileResourceAssociationId: Swift.String?
    /// If you are adding a DNS Firewall rule group, include also a priority. The priority indicates the processing order for the rule groups, starting with the priority assinged the lowest value. The allowed values for priority are between 100 and 9900.
    public var resourceProperties: Swift.String?

    public init(
        name: Swift.String? = nil,
        profileResourceAssociationId: Swift.String? = nil,
        resourceProperties: Swift.String? = nil
    )
    {
        self.name = name
        self.profileResourceAssociationId = profileResourceAssociationId
        self.resourceProperties = resourceProperties
    }
}

extension UpdateProfileResourceAssociationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HttpResponse) async throws -> UpdateProfileResourceAssociationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateProfileResourceAssociationOutput()
        value.profileResourceAssociation = try reader["ProfileResourceAssociation"].readIfPresent(with: Route53ProfilesClientTypes.ProfileResourceAssociation.read(from:))
        return value
    }
}

public struct UpdateProfileResourceAssociationOutput {
    /// Information about the UpdateProfileResourceAssociation request, including a status message.
    public var profileResourceAssociation: Route53ProfilesClientTypes.ProfileResourceAssociation?

    public init(
        profileResourceAssociation: Route53ProfilesClientTypes.ProfileResourceAssociation? = nil
    )
    {
        self.profileResourceAssociation = profileResourceAssociation
    }
}

enum UpdateProfileResourceAssociationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HttpResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServiceErrorException": return try InternalServiceErrorException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

/// You have provided an invalid command.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}
