//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

import protocol ClientRuntime.PaginateToken
import struct ClientRuntime.PaginatorSequence

extension Route53ProfilesClient {
    /// Paginate over `[ListProfileAssociationsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListProfileAssociationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListProfileAssociationsOutput`
    public func listProfileAssociationsPaginated(input: ListProfileAssociationsInput) -> ClientRuntime.PaginatorSequence<ListProfileAssociationsInput, ListProfileAssociationsOutput> {
        return ClientRuntime.PaginatorSequence<ListProfileAssociationsInput, ListProfileAssociationsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listProfileAssociations(input:))
    }
}

extension ListProfileAssociationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListProfileAssociationsInput {
        return ListProfileAssociationsInput(
            maxResults: self.maxResults,
            nextToken: token,
            profileId: self.profileId,
            resourceId: self.resourceId
        )}
}

extension PaginatorSequence where OperationStackInput == ListProfileAssociationsInput, OperationStackOutput == ListProfileAssociationsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listProfileAssociationsPaginated`
    /// to access the nested member `[Route53ProfilesClientTypes.ProfileAssociation]`
    /// - Returns: `[Route53ProfilesClientTypes.ProfileAssociation]`
    public func profileAssociations() async throws -> [Route53ProfilesClientTypes.ProfileAssociation] {
        return try await self.asyncCompactMap { item in item.profileAssociations }
    }
}
extension Route53ProfilesClient {
    /// Paginate over `[ListProfileResourceAssociationsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListProfileResourceAssociationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListProfileResourceAssociationsOutput`
    public func listProfileResourceAssociationsPaginated(input: ListProfileResourceAssociationsInput) -> ClientRuntime.PaginatorSequence<ListProfileResourceAssociationsInput, ListProfileResourceAssociationsOutput> {
        return ClientRuntime.PaginatorSequence<ListProfileResourceAssociationsInput, ListProfileResourceAssociationsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listProfileResourceAssociations(input:))
    }
}

extension ListProfileResourceAssociationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListProfileResourceAssociationsInput {
        return ListProfileResourceAssociationsInput(
            maxResults: self.maxResults,
            nextToken: token,
            profileId: self.profileId,
            resourceType: self.resourceType
        )}
}

extension PaginatorSequence where OperationStackInput == ListProfileResourceAssociationsInput, OperationStackOutput == ListProfileResourceAssociationsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listProfileResourceAssociationsPaginated`
    /// to access the nested member `[Route53ProfilesClientTypes.ProfileResourceAssociation]`
    /// - Returns: `[Route53ProfilesClientTypes.ProfileResourceAssociation]`
    public func profileResourceAssociations() async throws -> [Route53ProfilesClientTypes.ProfileResourceAssociation] {
        return try await self.asyncCompactMap { item in item.profileResourceAssociations }
    }
}
extension Route53ProfilesClient {
    /// Paginate over `[ListProfilesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListProfilesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListProfilesOutput`
    public func listProfilesPaginated(input: ListProfilesInput) -> ClientRuntime.PaginatorSequence<ListProfilesInput, ListProfilesOutput> {
        return ClientRuntime.PaginatorSequence<ListProfilesInput, ListProfilesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listProfiles(input:))
    }
}

extension ListProfilesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListProfilesInput {
        return ListProfilesInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListProfilesInput, OperationStackOutput == ListProfilesOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listProfilesPaginated`
    /// to access the nested member `[Route53ProfilesClientTypes.ProfileSummary]`
    /// - Returns: `[Route53ProfilesClientTypes.ProfileSummary]`
    public func profileSummaries() async throws -> [Route53ProfilesClientTypes.ProfileSummary] {
        return try await self.asyncCompactMap { item in item.profileSummaries }
    }
}
