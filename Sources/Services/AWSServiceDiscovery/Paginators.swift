// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ServiceDiscoveryClient {
    /// Paginate over `[GetInstancesHealthStatusOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetInstancesHealthStatusInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetInstancesHealthStatusOutput`
    public func getInstancesHealthStatusPaginated(input: GetInstancesHealthStatusInput) -> ClientRuntime.PaginatorSequence<GetInstancesHealthStatusInput, GetInstancesHealthStatusOutput> {
        return ClientRuntime.PaginatorSequence<GetInstancesHealthStatusInput, GetInstancesHealthStatusOutput>(input: input, inputKey: \GetInstancesHealthStatusInput.nextToken, outputKey: \GetInstancesHealthStatusOutput.nextToken, paginationFunction: self.getInstancesHealthStatus(input:))
    }
}

extension GetInstancesHealthStatusInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetInstancesHealthStatusInput {
        return GetInstancesHealthStatusInput(
            instances: self.instances,
            maxResults: self.maxResults,
            nextToken: token,
            serviceId: self.serviceId
        )}
}
extension ServiceDiscoveryClient {
    /// Paginate over `[ListInstancesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListInstancesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListInstancesOutput`
    public func listInstancesPaginated(input: ListInstancesInput) -> ClientRuntime.PaginatorSequence<ListInstancesInput, ListInstancesOutput> {
        return ClientRuntime.PaginatorSequence<ListInstancesInput, ListInstancesOutput>(input: input, inputKey: \ListInstancesInput.nextToken, outputKey: \ListInstancesOutput.nextToken, paginationFunction: self.listInstances(input:))
    }
}

extension ListInstancesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListInstancesInput {
        return ListInstancesInput(
            maxResults: self.maxResults,
            nextToken: token,
            serviceId: self.serviceId
        )}
}
extension ServiceDiscoveryClient {
    /// Paginate over `[ListNamespacesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListNamespacesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListNamespacesOutput`
    public func listNamespacesPaginated(input: ListNamespacesInput) -> ClientRuntime.PaginatorSequence<ListNamespacesInput, ListNamespacesOutput> {
        return ClientRuntime.PaginatorSequence<ListNamespacesInput, ListNamespacesOutput>(input: input, inputKey: \ListNamespacesInput.nextToken, outputKey: \ListNamespacesOutput.nextToken, paginationFunction: self.listNamespaces(input:))
    }
}

extension ListNamespacesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListNamespacesInput {
        return ListNamespacesInput(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension ServiceDiscoveryClient {
    /// Paginate over `[ListOperationsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListOperationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListOperationsOutput`
    public func listOperationsPaginated(input: ListOperationsInput) -> ClientRuntime.PaginatorSequence<ListOperationsInput, ListOperationsOutput> {
        return ClientRuntime.PaginatorSequence<ListOperationsInput, ListOperationsOutput>(input: input, inputKey: \ListOperationsInput.nextToken, outputKey: \ListOperationsOutput.nextToken, paginationFunction: self.listOperations(input:))
    }
}

extension ListOperationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListOperationsInput {
        return ListOperationsInput(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension ServiceDiscoveryClient {
    /// Paginate over `[ListServicesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListServicesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListServicesOutput`
    public func listServicesPaginated(input: ListServicesInput) -> ClientRuntime.PaginatorSequence<ListServicesInput, ListServicesOutput> {
        return ClientRuntime.PaginatorSequence<ListServicesInput, ListServicesOutput>(input: input, inputKey: \ListServicesInput.nextToken, outputKey: \ListServicesOutput.nextToken, paginationFunction: self.listServices(input:))
    }
}

extension ListServicesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListServicesInput {
        return ListServicesInput(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )}
}
