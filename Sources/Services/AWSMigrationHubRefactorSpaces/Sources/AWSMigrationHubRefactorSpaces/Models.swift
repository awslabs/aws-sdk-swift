//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum Smithy.ClientError
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.URIQueryItem
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox

/// The user does not have sufficient access to perform this action.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension MigrationHubRefactorSpacesClientTypes {

    public enum ApiGatewayEndpointType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `private`
        case regional
        case sdkUnknown(Swift.String)

        public static var allCases: [ApiGatewayEndpointType] {
            return [
                .private,
                .regional
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .private: return "PRIVATE"
            case .regional: return "REGIONAL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MigrationHubRefactorSpacesClientTypes {
    /// A wrapper object holding the Amazon API Gateway proxy configuration.
    public struct ApiGatewayProxyConfig {
        /// The resource ID of the API Gateway for the proxy.
        public var apiGatewayId: Swift.String?
        /// The type of API Gateway endpoint created.
        public var endpointType: MigrationHubRefactorSpacesClientTypes.ApiGatewayEndpointType?
        /// The Amazon Resource Name (ARN) of the Network Load Balancer configured by the API Gateway proxy.
        public var nlbArn: Swift.String?
        /// The name of the Network Load Balancer that is configured by the API Gateway proxy.
        public var nlbName: Swift.String?
        /// The endpoint URL of the API Gateway proxy.
        public var proxyUrl: Swift.String?
        /// The name of the API Gateway stage. The name defaults to prod.
        public var stageName: Swift.String?
        /// The VpcLink ID of the API Gateway proxy.
        public var vpcLinkId: Swift.String?

        public init(
            apiGatewayId: Swift.String? = nil,
            endpointType: MigrationHubRefactorSpacesClientTypes.ApiGatewayEndpointType? = nil,
            nlbArn: Swift.String? = nil,
            nlbName: Swift.String? = nil,
            proxyUrl: Swift.String? = nil,
            stageName: Swift.String? = nil,
            vpcLinkId: Swift.String? = nil
        )
        {
            self.apiGatewayId = apiGatewayId
            self.endpointType = endpointType
            self.nlbArn = nlbArn
            self.nlbName = nlbName
            self.proxyUrl = proxyUrl
            self.stageName = stageName
            self.vpcLinkId = vpcLinkId
        }
    }

}

extension MigrationHubRefactorSpacesClientTypes {
    /// A wrapper object holding the Amazon API Gateway endpoint input.
    public struct ApiGatewayProxyInput {
        /// The type of endpoint to use for the API Gateway proxy. If no value is specified in the request, the value is set to REGIONAL by default. If the value is set to PRIVATE in the request, this creates a private API endpoint that is isolated from the public internet. The private endpoint can only be accessed by using Amazon Virtual Private Cloud (Amazon VPC) interface endpoints for the Amazon API Gateway that has been granted access. For more information about creating a private connection with Refactor Spaces and interface endpoint (Amazon Web Services PrivateLink) availability, see [Access Refactor Spaces using an interface endpoint (Amazon Web Services PrivateLink)](https://docs.aws.amazon.com/migrationhub-refactor-spaces/latest/userguide/vpc-interface-endpoints.html).
        public var endpointType: MigrationHubRefactorSpacesClientTypes.ApiGatewayEndpointType?
        /// The name of the API Gateway stage. The name defaults to prod.
        public var stageName: Swift.String?

        public init(
            endpointType: MigrationHubRefactorSpacesClientTypes.ApiGatewayEndpointType? = nil,
            stageName: Swift.String? = nil
        )
        {
            self.endpointType = endpointType
            self.stageName = stageName
        }
    }

}

extension MigrationHubRefactorSpacesClientTypes {
    /// A wrapper object holding the Amazon API Gateway proxy summary.
    public struct ApiGatewayProxySummary {
        /// The resource ID of the API Gateway for the proxy.
        public var apiGatewayId: Swift.String?
        /// The type of API Gateway endpoint created.
        public var endpointType: MigrationHubRefactorSpacesClientTypes.ApiGatewayEndpointType?
        /// The Amazon Resource Name (ARN) of the Network Load Balancer configured by the API Gateway proxy.
        public var nlbArn: Swift.String?
        /// The name of the Network Load Balancer that is configured by the API Gateway proxy.
        public var nlbName: Swift.String?
        /// The endpoint URL of the API Gateway proxy.
        public var proxyUrl: Swift.String?
        /// The name of the API Gateway stage. The name defaults to prod.
        public var stageName: Swift.String?
        /// The VpcLink ID of the API Gateway proxy.
        public var vpcLinkId: Swift.String?

        public init(
            apiGatewayId: Swift.String? = nil,
            endpointType: MigrationHubRefactorSpacesClientTypes.ApiGatewayEndpointType? = nil,
            nlbArn: Swift.String? = nil,
            nlbName: Swift.String? = nil,
            proxyUrl: Swift.String? = nil,
            stageName: Swift.String? = nil,
            vpcLinkId: Swift.String? = nil
        )
        {
            self.apiGatewayId = apiGatewayId
            self.endpointType = endpointType
            self.nlbArn = nlbArn
            self.nlbName = nlbName
            self.proxyUrl = proxyUrl
            self.stageName = stageName
            self.vpcLinkId = vpcLinkId
        }
    }

}

extension MigrationHubRefactorSpacesClientTypes {

    public enum ApplicationState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case creating
        case deleting
        case failed
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [ApplicationState] {
            return [
                .active,
                .creating,
                .deleting,
                .failed,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MigrationHubRefactorSpacesClientTypes {

    public enum ErrorCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case invalidResourceState
        case notAuthorized
        case requestLimitExceeded
        case resourceCreationFailure
        case resourceDeletionFailure
        case resourceInUse
        case resourceLimitExceeded
        case resourceNotFound
        case resourceRetrievalFailure
        case resourceUpdateFailure
        case serviceEndpointHealthCheckFailure
        case stateTransitionFailure
        case sdkUnknown(Swift.String)

        public static var allCases: [ErrorCode] {
            return [
                .invalidResourceState,
                .notAuthorized,
                .requestLimitExceeded,
                .resourceCreationFailure,
                .resourceDeletionFailure,
                .resourceInUse,
                .resourceLimitExceeded,
                .resourceNotFound,
                .resourceRetrievalFailure,
                .resourceUpdateFailure,
                .serviceEndpointHealthCheckFailure,
                .stateTransitionFailure
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .invalidResourceState: return "INVALID_RESOURCE_STATE"
            case .notAuthorized: return "NOT_AUTHORIZED"
            case .requestLimitExceeded: return "REQUEST_LIMIT_EXCEEDED"
            case .resourceCreationFailure: return "RESOURCE_CREATION_FAILURE"
            case .resourceDeletionFailure: return "RESOURCE_DELETION_FAILURE"
            case .resourceInUse: return "RESOURCE_IN_USE"
            case .resourceLimitExceeded: return "RESOURCE_LIMIT_EXCEEDED"
            case .resourceNotFound: return "RESOURCE_NOT_FOUND"
            case .resourceRetrievalFailure: return "RESOURCE_RETRIEVAL_FAILURE"
            case .resourceUpdateFailure: return "RESOURCE_UPDATE_FAILURE"
            case .serviceEndpointHealthCheckFailure: return "SERVICE_ENDPOINT_HEALTH_CHECK_FAILURE"
            case .stateTransitionFailure: return "STATE_TRANSITION_FAILURE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MigrationHubRefactorSpacesClientTypes {

    public enum ErrorResourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case apiGateway
        case application
        case environment
        case iamRole
        case lambda
        case loadBalancerListener
        case nlb
        case resourceShare
        case route
        case routeTable
        case securityGroup
        case service
        case subnet
        case targetGroup
        case transitGateway
        case transitGatewayAttachment
        case vpc
        case vpcEndpointServiceConfiguration
        case vpcLink
        case sdkUnknown(Swift.String)

        public static var allCases: [ErrorResourceType] {
            return [
                .apiGateway,
                .application,
                .environment,
                .iamRole,
                .lambda,
                .loadBalancerListener,
                .nlb,
                .resourceShare,
                .route,
                .routeTable,
                .securityGroup,
                .service,
                .subnet,
                .targetGroup,
                .transitGateway,
                .transitGatewayAttachment,
                .vpc,
                .vpcEndpointServiceConfiguration,
                .vpcLink
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .apiGateway: return "API_GATEWAY"
            case .application: return "APPLICATION"
            case .environment: return "ENVIRONMENT"
            case .iamRole: return "IAM_ROLE"
            case .lambda: return "LAMBDA"
            case .loadBalancerListener: return "LOAD_BALANCER_LISTENER"
            case .nlb: return "NLB"
            case .resourceShare: return "RESOURCE_SHARE"
            case .route: return "ROUTE"
            case .routeTable: return "ROUTE_TABLE"
            case .securityGroup: return "SECURITY_GROUP"
            case .service: return "SERVICE"
            case .subnet: return "SUBNET"
            case .targetGroup: return "TARGET_GROUP"
            case .transitGateway: return "TRANSIT_GATEWAY"
            case .transitGatewayAttachment: return "TRANSIT_GATEWAY_ATTACHMENT"
            case .vpc: return "VPC"
            case .vpcEndpointServiceConfiguration: return "VPC_ENDPOINT_SERVICE_CONFIGURATION"
            case .vpcLink: return "VPC_LINK"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MigrationHubRefactorSpacesClientTypes {
    /// Error associated with a resource returned for a Get or List resource response.
    public struct ErrorResponse {
        /// The Amazon Web Services account ID of the resource owner.
        public var accountId: Swift.String?
        /// Additional details about the error.
        public var additionalDetails: [Swift.String: Swift.String]?
        /// The error code associated with the error.
        public var code: MigrationHubRefactorSpacesClientTypes.ErrorCode?
        /// The message associated with the error.
        public var message: Swift.String?
        /// The ID of the resource.
        public var resourceIdentifier: Swift.String?
        /// The type of resource.
        public var resourceType: MigrationHubRefactorSpacesClientTypes.ErrorResourceType?

        public init(
            accountId: Swift.String? = nil,
            additionalDetails: [Swift.String: Swift.String]? = nil,
            code: MigrationHubRefactorSpacesClientTypes.ErrorCode? = nil,
            message: Swift.String? = nil,
            resourceIdentifier: Swift.String? = nil,
            resourceType: MigrationHubRefactorSpacesClientTypes.ErrorResourceType? = nil
        )
        {
            self.accountId = accountId
            self.additionalDetails = additionalDetails
            self.code = code
            self.message = message
            self.resourceIdentifier = resourceIdentifier
            self.resourceType = resourceType
        }
    }

}

extension MigrationHubRefactorSpacesClientTypes {

    public enum ProxyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case apiGateway
        case sdkUnknown(Swift.String)

        public static var allCases: [ProxyType] {
            return [
                .apiGateway
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .apiGateway: return "API_GATEWAY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MigrationHubRefactorSpacesClientTypes {
    /// The list of ApplicationSummary objects.
    public struct ApplicationSummary {
        /// The endpoint URL of the Amazon API Gateway proxy.
        public var apiGatewayProxy: MigrationHubRefactorSpacesClientTypes.ApiGatewayProxySummary?
        /// The unique identifier of the application.
        public var applicationId: Swift.String?
        /// The Amazon Resource Name (ARN) of the application.
        public var arn: Swift.String?
        /// The Amazon Web Services account ID of the application creator.
        public var createdByAccountId: Swift.String?
        /// A timestamp that indicates when the application is created.
        public var createdTime: Foundation.Date?
        /// The unique identifier of the environment.
        public var environmentId: Swift.String?
        /// Any error associated with the application resource.
        public var error: MigrationHubRefactorSpacesClientTypes.ErrorResponse?
        /// A timestamp that indicates when the application was last updated.
        public var lastUpdatedTime: Foundation.Date?
        /// The name of the application.
        public var name: Swift.String?
        /// The Amazon Web Services account ID of the application owner (which is always the same as the environment owner account ID).
        public var ownerAccountId: Swift.String?
        /// The proxy type of the proxy created within the application.
        public var proxyType: MigrationHubRefactorSpacesClientTypes.ProxyType?
        /// The current state of the application.
        public var state: MigrationHubRefactorSpacesClientTypes.ApplicationState?
        /// The tags assigned to the application.
        public var tags: [Swift.String: Swift.String]?
        /// The ID of the virtual private cloud (VPC).
        public var vpcId: Swift.String?

        public init(
            apiGatewayProxy: MigrationHubRefactorSpacesClientTypes.ApiGatewayProxySummary? = nil,
            applicationId: Swift.String? = nil,
            arn: Swift.String? = nil,
            createdByAccountId: Swift.String? = nil,
            createdTime: Foundation.Date? = nil,
            environmentId: Swift.String? = nil,
            error: MigrationHubRefactorSpacesClientTypes.ErrorResponse? = nil,
            lastUpdatedTime: Foundation.Date? = nil,
            name: Swift.String? = nil,
            ownerAccountId: Swift.String? = nil,
            proxyType: MigrationHubRefactorSpacesClientTypes.ProxyType? = nil,
            state: MigrationHubRefactorSpacesClientTypes.ApplicationState? = nil,
            tags: [Swift.String: Swift.String]? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.apiGatewayProxy = apiGatewayProxy
            self.applicationId = applicationId
            self.arn = arn
            self.createdByAccountId = createdByAccountId
            self.createdTime = createdTime
            self.environmentId = environmentId
            self.error = error
            self.lastUpdatedTime = lastUpdatedTime
            self.name = name
            self.ownerAccountId = ownerAccountId
            self.proxyType = proxyType
            self.state = state
            self.tags = tags
            self.vpcId = vpcId
        }
    }

}

extension MigrationHubRefactorSpacesClientTypes.ApplicationSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ApplicationSummary(apiGatewayProxy: \(Swift.String(describing: apiGatewayProxy)), applicationId: \(Swift.String(describing: applicationId)), arn: \(Swift.String(describing: arn)), createdByAccountId: \(Swift.String(describing: createdByAccountId)), createdTime: \(Swift.String(describing: createdTime)), environmentId: \(Swift.String(describing: environmentId)), error: \(Swift.String(describing: error)), lastUpdatedTime: \(Swift.String(describing: lastUpdatedTime)), name: \(Swift.String(describing: name)), ownerAccountId: \(Swift.String(describing: ownerAccountId)), proxyType: \(Swift.String(describing: proxyType)), state: \(Swift.String(describing: state)), vpcId: \(Swift.String(describing: vpcId)), tags: \"CONTENT_REDACTED\")"}
}

/// Updating or deleting a resource can cause an inconsistent state.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
        /// The ID of the resource.
        /// This member is required.
        public internal(set) var resourceId: Swift.String? = nil
        /// The type of resource.
        /// This member is required.
        public internal(set) var resourceType: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        resourceId: Swift.String? = nil,
        resourceType: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.resourceId = resourceId
        self.properties.resourceType = resourceType
    }
}

/// An unexpected error occurred while processing the request.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request references a resource that does not exist.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
        /// The ID of the resource.
        /// This member is required.
        public internal(set) var resourceId: Swift.String? = nil
        /// The type of resource.
        /// This member is required.
        public internal(set) var resourceType: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        resourceId: Swift.String? = nil,
        resourceType: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.resourceId = resourceId
        self.properties.resourceType = resourceType
    }
}

/// The request would cause a service quota to be exceeded.
public struct ServiceQuotaExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
        /// Service quota requirement to identify originating quota. Reached throttling quota exception.
        public internal(set) var quotaCode: Swift.String? = nil
        /// The ID of the resource.
        /// This member is required.
        public internal(set) var resourceId: Swift.String? = nil
        /// The type of resource.
        /// This member is required.
        public internal(set) var resourceType: Swift.String? = nil
        /// Service quota requirement to identify originating service. Reached throttling quota exception service code.
        /// This member is required.
        public internal(set) var serviceCode: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceQuotaExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        quotaCode: Swift.String? = nil,
        resourceId: Swift.String? = nil,
        resourceType: Swift.String? = nil,
        serviceCode: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.quotaCode = quotaCode
        self.properties.resourceId = resourceId
        self.properties.resourceType = resourceType
        self.properties.serviceCode = serviceCode
    }
}

/// Request was denied because the request was throttled.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
        /// Service quota requirement to identify originating quota. Reached throttling quota exception.
        public internal(set) var quotaCode: Swift.String? = nil
        /// The number of seconds to wait before retrying.
        public internal(set) var retryAfterSeconds: Swift.Int = 0
        /// Service quota requirement to identify originating service. Reached throttling quota exception service code.
        public internal(set) var serviceCode: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        quotaCode: Swift.String? = nil,
        retryAfterSeconds: Swift.Int = 0,
        serviceCode: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.quotaCode = quotaCode
        self.properties.retryAfterSeconds = retryAfterSeconds
        self.properties.serviceCode = serviceCode
    }
}

/// The input does not satisfy the constraints specified by an Amazon Web Service.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CreateApplicationInput {
    /// A wrapper object holding the API Gateway endpoint type and stage name for the proxy.
    public var apiGatewayProxy: MigrationHubRefactorSpacesClientTypes.ApiGatewayProxyInput?
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    public var clientToken: Swift.String?
    /// The unique identifier of the environment.
    /// This member is required.
    public var environmentIdentifier: Swift.String?
    /// The name to use for the application.
    /// This member is required.
    public var name: Swift.String?
    /// The proxy type of the proxy created within the application.
    /// This member is required.
    public var proxyType: MigrationHubRefactorSpacesClientTypes.ProxyType?
    /// The tags to assign to the application. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key-value pair.
    public var tags: [Swift.String: Swift.String]?
    /// The ID of the virtual private cloud (VPC).
    /// This member is required.
    public var vpcId: Swift.String?

    public init(
        apiGatewayProxy: MigrationHubRefactorSpacesClientTypes.ApiGatewayProxyInput? = nil,
        clientToken: Swift.String? = nil,
        environmentIdentifier: Swift.String? = nil,
        name: Swift.String? = nil,
        proxyType: MigrationHubRefactorSpacesClientTypes.ProxyType? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        vpcId: Swift.String? = nil
    )
    {
        self.apiGatewayProxy = apiGatewayProxy
        self.clientToken = clientToken
        self.environmentIdentifier = environmentIdentifier
        self.name = name
        self.proxyType = proxyType
        self.tags = tags
        self.vpcId = vpcId
    }
}

extension CreateApplicationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateApplicationInput(apiGatewayProxy: \(Swift.String(describing: apiGatewayProxy)), clientToken: \(Swift.String(describing: clientToken)), environmentIdentifier: \(Swift.String(describing: environmentIdentifier)), name: \(Swift.String(describing: name)), proxyType: \(Swift.String(describing: proxyType)), vpcId: \(Swift.String(describing: vpcId)), tags: \"CONTENT_REDACTED\")"}
}

public struct CreateApplicationOutput {
    /// A wrapper object holding the API Gateway endpoint type and stage name for the proxy.
    public var apiGatewayProxy: MigrationHubRefactorSpacesClientTypes.ApiGatewayProxyInput?
    /// The unique identifier of the application.
    public var applicationId: Swift.String?
    /// The Amazon Resource Name (ARN) of the application. The format for this ARN is arn:aws:refactor-spaces:region:account-id:resource-type/resource-id . For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
    public var arn: Swift.String?
    /// The Amazon Web Services account ID of application creator.
    public var createdByAccountId: Swift.String?
    /// A timestamp that indicates when the application is created.
    public var createdTime: Foundation.Date?
    /// The ID of the environment in which the application is created.
    public var environmentId: Swift.String?
    /// A timestamp that indicates when the application was last updated.
    public var lastUpdatedTime: Foundation.Date?
    /// The name of the application.
    public var name: Swift.String?
    /// The Amazon Web Services account ID of the application owner (which is always the same as the environment owner account ID).
    public var ownerAccountId: Swift.String?
    /// The proxy type of the proxy created within the application.
    public var proxyType: MigrationHubRefactorSpacesClientTypes.ProxyType?
    /// The current state of the application.
    public var state: MigrationHubRefactorSpacesClientTypes.ApplicationState?
    /// The tags assigned to the application. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key-value pair.
    public var tags: [Swift.String: Swift.String]?
    /// The ID of the Amazon VPC.
    public var vpcId: Swift.String?

    public init(
        apiGatewayProxy: MigrationHubRefactorSpacesClientTypes.ApiGatewayProxyInput? = nil,
        applicationId: Swift.String? = nil,
        arn: Swift.String? = nil,
        createdByAccountId: Swift.String? = nil,
        createdTime: Foundation.Date? = nil,
        environmentId: Swift.String? = nil,
        lastUpdatedTime: Foundation.Date? = nil,
        name: Swift.String? = nil,
        ownerAccountId: Swift.String? = nil,
        proxyType: MigrationHubRefactorSpacesClientTypes.ProxyType? = nil,
        state: MigrationHubRefactorSpacesClientTypes.ApplicationState? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        vpcId: Swift.String? = nil
    )
    {
        self.apiGatewayProxy = apiGatewayProxy
        self.applicationId = applicationId
        self.arn = arn
        self.createdByAccountId = createdByAccountId
        self.createdTime = createdTime
        self.environmentId = environmentId
        self.lastUpdatedTime = lastUpdatedTime
        self.name = name
        self.ownerAccountId = ownerAccountId
        self.proxyType = proxyType
        self.state = state
        self.tags = tags
        self.vpcId = vpcId
    }
}

extension CreateApplicationOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateApplicationOutput(apiGatewayProxy: \(Swift.String(describing: apiGatewayProxy)), applicationId: \(Swift.String(describing: applicationId)), arn: \(Swift.String(describing: arn)), createdByAccountId: \(Swift.String(describing: createdByAccountId)), createdTime: \(Swift.String(describing: createdTime)), environmentId: \(Swift.String(describing: environmentId)), lastUpdatedTime: \(Swift.String(describing: lastUpdatedTime)), name: \(Swift.String(describing: name)), ownerAccountId: \(Swift.String(describing: ownerAccountId)), proxyType: \(Swift.String(describing: proxyType)), state: \(Swift.String(describing: state)), vpcId: \(Swift.String(describing: vpcId)), tags: \"CONTENT_REDACTED\")"}
}

extension MigrationHubRefactorSpacesClientTypes {

    public enum NetworkFabricType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `none`
        case transitGateway
        case sdkUnknown(Swift.String)

        public static var allCases: [NetworkFabricType] {
            return [
                .none,
                .transitGateway
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .transitGateway: return "TRANSIT_GATEWAY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateEnvironmentInput {
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    public var clientToken: Swift.String?
    /// The description of the environment.
    public var description: Swift.String?
    /// The name of the environment.
    /// This member is required.
    public var name: Swift.String?
    /// The network fabric type of the environment.
    /// This member is required.
    public var networkFabricType: MigrationHubRefactorSpacesClientTypes.NetworkFabricType?
    /// The tags to assign to the environment. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key-value pair.
    public var tags: [Swift.String: Swift.String]?

    public init(
        clientToken: Swift.String? = nil,
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        networkFabricType: MigrationHubRefactorSpacesClientTypes.NetworkFabricType? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.clientToken = clientToken
        self.description = description
        self.name = name
        self.networkFabricType = networkFabricType
        self.tags = tags
    }
}

extension CreateEnvironmentInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateEnvironmentInput(clientToken: \(Swift.String(describing: clientToken)), description: \(Swift.String(describing: description)), name: \(Swift.String(describing: name)), networkFabricType: \(Swift.String(describing: networkFabricType)), tags: \"CONTENT_REDACTED\")"}
}

extension MigrationHubRefactorSpacesClientTypes {

    public enum EnvironmentState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case creating
        case deleting
        case failed
        case sdkUnknown(Swift.String)

        public static var allCases: [EnvironmentState] {
            return [
                .active,
                .creating,
                .deleting,
                .failed
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateEnvironmentOutput {
    /// The Amazon Resource Name (ARN) of the environment.
    public var arn: Swift.String?
    /// A timestamp that indicates when the environment is created.
    public var createdTime: Foundation.Date?
    /// A description of the environment.
    public var description: Swift.String?
    /// The unique identifier of the environment.
    public var environmentId: Swift.String?
    /// A timestamp that indicates when the environment was last updated.
    public var lastUpdatedTime: Foundation.Date?
    /// The name of the environment.
    public var name: Swift.String?
    /// The network fabric type of the environment.
    public var networkFabricType: MigrationHubRefactorSpacesClientTypes.NetworkFabricType?
    /// The Amazon Web Services account ID of environment owner.
    public var ownerAccountId: Swift.String?
    /// The current state of the environment.
    public var state: MigrationHubRefactorSpacesClientTypes.EnvironmentState?
    /// The tags assigned to the created environment. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key-value pair..
    public var tags: [Swift.String: Swift.String]?

    public init(
        arn: Swift.String? = nil,
        createdTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        environmentId: Swift.String? = nil,
        lastUpdatedTime: Foundation.Date? = nil,
        name: Swift.String? = nil,
        networkFabricType: MigrationHubRefactorSpacesClientTypes.NetworkFabricType? = nil,
        ownerAccountId: Swift.String? = nil,
        state: MigrationHubRefactorSpacesClientTypes.EnvironmentState? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.arn = arn
        self.createdTime = createdTime
        self.description = description
        self.environmentId = environmentId
        self.lastUpdatedTime = lastUpdatedTime
        self.name = name
        self.networkFabricType = networkFabricType
        self.ownerAccountId = ownerAccountId
        self.state = state
        self.tags = tags
    }
}

extension CreateEnvironmentOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateEnvironmentOutput(arn: \(Swift.String(describing: arn)), createdTime: \(Swift.String(describing: createdTime)), description: \(Swift.String(describing: description)), environmentId: \(Swift.String(describing: environmentId)), lastUpdatedTime: \(Swift.String(describing: lastUpdatedTime)), name: \(Swift.String(describing: name)), networkFabricType: \(Swift.String(describing: networkFabricType)), ownerAccountId: \(Swift.String(describing: ownerAccountId)), state: \(Swift.String(describing: state)), tags: \"CONTENT_REDACTED\")"}
}

extension MigrationHubRefactorSpacesClientTypes {

    public enum RouteActivationState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case inactive
        case sdkUnknown(Swift.String)

        public static var allCases: [RouteActivationState] {
            return [
                .active,
                .inactive
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .inactive: return "INACTIVE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MigrationHubRefactorSpacesClientTypes {
    /// The configuration for the default route type.
    public struct DefaultRouteInput {
        /// If set to ACTIVE, traffic is forwarded to this route’s service after the route is created.
        public var activationState: MigrationHubRefactorSpacesClientTypes.RouteActivationState?

        public init(
            activationState: MigrationHubRefactorSpacesClientTypes.RouteActivationState? = nil
        )
        {
            self.activationState = activationState
        }
    }

}

extension MigrationHubRefactorSpacesClientTypes {

    public enum RouteType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `default`
        case uriPath
        case sdkUnknown(Swift.String)

        public static var allCases: [RouteType] {
            return [
                .default,
                .uriPath
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .default: return "DEFAULT"
            case .uriPath: return "URI_PATH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MigrationHubRefactorSpacesClientTypes {

    public enum HttpMethod: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case delete
        case `get`
        case head
        case options
        case patch
        case post
        case put
        case sdkUnknown(Swift.String)

        public static var allCases: [HttpMethod] {
            return [
                .delete,
                .get,
                .head,
                .options,
                .patch,
                .post,
                .put
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .delete: return "DELETE"
            case .get: return "GET"
            case .head: return "HEAD"
            case .options: return "OPTIONS"
            case .patch: return "PATCH"
            case .post: return "POST"
            case .put: return "PUT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MigrationHubRefactorSpacesClientTypes {
    /// The configuration for the URI path route type.
    public struct UriPathRouteInput {
        /// If set to ACTIVE, traffic is forwarded to this route’s service after the route is created.
        /// This member is required.
        public var activationState: MigrationHubRefactorSpacesClientTypes.RouteActivationState?
        /// If set to true, this option appends the source path to the service URL endpoint.
        public var appendSourcePath: Swift.Bool?
        /// Indicates whether to match all subpaths of the given source path. If this value is false, requests must match the source path exactly before they are forwarded to this route's service.
        public var includeChildPaths: Swift.Bool?
        /// A list of HTTP methods to match. An empty list matches all values. If a method is present, only HTTP requests using that method are forwarded to this route’s service.
        public var methods: [MigrationHubRefactorSpacesClientTypes.HttpMethod]?
        /// This is the path that Refactor Spaces uses to match traffic. Paths must start with / and are relative to the base of the application. To use path parameters in the source path, add a variable in curly braces. For example, the resource path {user} represents a path parameter called 'user'.
        /// This member is required.
        public var sourcePath: Swift.String?

        public init(
            activationState: MigrationHubRefactorSpacesClientTypes.RouteActivationState? = nil,
            appendSourcePath: Swift.Bool? = nil,
            includeChildPaths: Swift.Bool? = nil,
            methods: [MigrationHubRefactorSpacesClientTypes.HttpMethod]? = nil,
            sourcePath: Swift.String? = nil
        )
        {
            self.activationState = activationState
            self.appendSourcePath = appendSourcePath
            self.includeChildPaths = includeChildPaths
            self.methods = methods
            self.sourcePath = sourcePath
        }
    }

}

public struct CreateRouteInput {
    /// The ID of the application within which the route is being created.
    /// This member is required.
    public var applicationIdentifier: Swift.String?
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    public var clientToken: Swift.String?
    /// Configuration for the default route type.
    public var defaultRoute: MigrationHubRefactorSpacesClientTypes.DefaultRouteInput?
    /// The ID of the environment in which the route is created.
    /// This member is required.
    public var environmentIdentifier: Swift.String?
    /// The route type of the route. DEFAULT indicates that all traffic that does not match another route is forwarded to the default route. Applications must have a default route before any other routes can be created. URI_PATH indicates a route that is based on a URI path.
    /// This member is required.
    public var routeType: MigrationHubRefactorSpacesClientTypes.RouteType?
    /// The ID of the service in which the route is created. Traffic that matches this route is forwarded to this service.
    /// This member is required.
    public var serviceIdentifier: Swift.String?
    /// The tags to assign to the route. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key-value pair..
    public var tags: [Swift.String: Swift.String]?
    /// The configuration for the URI path route type.
    public var uriPathRoute: MigrationHubRefactorSpacesClientTypes.UriPathRouteInput?

    public init(
        applicationIdentifier: Swift.String? = nil,
        clientToken: Swift.String? = nil,
        defaultRoute: MigrationHubRefactorSpacesClientTypes.DefaultRouteInput? = nil,
        environmentIdentifier: Swift.String? = nil,
        routeType: MigrationHubRefactorSpacesClientTypes.RouteType? = nil,
        serviceIdentifier: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        uriPathRoute: MigrationHubRefactorSpacesClientTypes.UriPathRouteInput? = nil
    )
    {
        self.applicationIdentifier = applicationIdentifier
        self.clientToken = clientToken
        self.defaultRoute = defaultRoute
        self.environmentIdentifier = environmentIdentifier
        self.routeType = routeType
        self.serviceIdentifier = serviceIdentifier
        self.tags = tags
        self.uriPathRoute = uriPathRoute
    }
}

extension CreateRouteInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateRouteInput(applicationIdentifier: \(Swift.String(describing: applicationIdentifier)), clientToken: \(Swift.String(describing: clientToken)), defaultRoute: \(Swift.String(describing: defaultRoute)), environmentIdentifier: \(Swift.String(describing: environmentIdentifier)), routeType: \(Swift.String(describing: routeType)), serviceIdentifier: \(Swift.String(describing: serviceIdentifier)), uriPathRoute: \(Swift.String(describing: uriPathRoute)), tags: \"CONTENT_REDACTED\")"}
}

extension MigrationHubRefactorSpacesClientTypes {

    public enum RouteState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case creating
        case deleting
        case failed
        case inactive
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [RouteState] {
            return [
                .active,
                .creating,
                .deleting,
                .failed,
                .inactive,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case .inactive: return "INACTIVE"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateRouteOutput {
    /// The ID of the application in which the route is created.
    public var applicationId: Swift.String?
    /// The Amazon Resource Name (ARN) of the route. The format for this ARN is arn:aws:refactor-spaces:region:account-id:resource-type/resource-id . For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
    public var arn: Swift.String?
    /// The Amazon Web Services account ID of the route creator.
    public var createdByAccountId: Swift.String?
    /// A timestamp that indicates when the route is created.
    public var createdTime: Foundation.Date?
    /// A timestamp that indicates when the route was last updated.
    public var lastUpdatedTime: Foundation.Date?
    /// The Amazon Web Services account ID of the route owner.
    public var ownerAccountId: Swift.String?
    /// The unique identifier of the route.
    public var routeId: Swift.String?
    /// The route type of the route.
    public var routeType: MigrationHubRefactorSpacesClientTypes.RouteType?
    /// The ID of service in which the route is created. Traffic that matches this route is forwarded to this service.
    public var serviceId: Swift.String?
    /// The current state of the route. Activation state only allows ACTIVE or INACTIVE as user inputs. FAILED is a route state that is system generated.
    public var state: MigrationHubRefactorSpacesClientTypes.RouteState?
    /// The tags assigned to the created route. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key-value pair.
    public var tags: [Swift.String: Swift.String]?
    /// Configuration for the URI path route type.
    public var uriPathRoute: MigrationHubRefactorSpacesClientTypes.UriPathRouteInput?

    public init(
        applicationId: Swift.String? = nil,
        arn: Swift.String? = nil,
        createdByAccountId: Swift.String? = nil,
        createdTime: Foundation.Date? = nil,
        lastUpdatedTime: Foundation.Date? = nil,
        ownerAccountId: Swift.String? = nil,
        routeId: Swift.String? = nil,
        routeType: MigrationHubRefactorSpacesClientTypes.RouteType? = nil,
        serviceId: Swift.String? = nil,
        state: MigrationHubRefactorSpacesClientTypes.RouteState? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        uriPathRoute: MigrationHubRefactorSpacesClientTypes.UriPathRouteInput? = nil
    )
    {
        self.applicationId = applicationId
        self.arn = arn
        self.createdByAccountId = createdByAccountId
        self.createdTime = createdTime
        self.lastUpdatedTime = lastUpdatedTime
        self.ownerAccountId = ownerAccountId
        self.routeId = routeId
        self.routeType = routeType
        self.serviceId = serviceId
        self.state = state
        self.tags = tags
        self.uriPathRoute = uriPathRoute
    }
}

extension CreateRouteOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateRouteOutput(applicationId: \(Swift.String(describing: applicationId)), arn: \(Swift.String(describing: arn)), createdByAccountId: \(Swift.String(describing: createdByAccountId)), createdTime: \(Swift.String(describing: createdTime)), lastUpdatedTime: \(Swift.String(describing: lastUpdatedTime)), ownerAccountId: \(Swift.String(describing: ownerAccountId)), routeId: \(Swift.String(describing: routeId)), routeType: \(Swift.String(describing: routeType)), serviceId: \(Swift.String(describing: serviceId)), state: \(Swift.String(describing: state)), uriPathRoute: \(Swift.String(describing: uriPathRoute)), tags: \"CONTENT_REDACTED\")"}
}

extension MigrationHubRefactorSpacesClientTypes {

    public enum ServiceEndpointType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case lambda
        case url
        case sdkUnknown(Swift.String)

        public static var allCases: [ServiceEndpointType] {
            return [
                .lambda,
                .url
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .lambda: return "LAMBDA"
            case .url: return "URL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MigrationHubRefactorSpacesClientTypes {
    /// The input for the Lambda endpoint type.
    public struct LambdaEndpointInput {
        /// The Amazon Resource Name (ARN) of the Lambda function or alias.
        /// This member is required.
        public var arn: Swift.String?

        public init(
            arn: Swift.String? = nil
        )
        {
            self.arn = arn
        }
    }

}

extension MigrationHubRefactorSpacesClientTypes {
    /// The configuration for the URL endpoint type.
    public struct UrlEndpointInput {
        /// The health check URL of the URL endpoint type. If the URL is a public endpoint, the HealthUrl must also be a public endpoint. If the URL is a private endpoint inside a virtual private cloud (VPC), the health URL must also be a private endpoint, and the host must be the same as the URL.
        public var healthUrl: Swift.String?
        /// The URL to route traffic to. The URL must be an [rfc3986-formatted URL](https://datatracker.ietf.org/doc/html/rfc3986). If the host is a domain name, the name must be resolvable over the public internet. If the scheme is https, the top level domain of the host must be listed in the [IANA root zone database](https://www.iana.org/domains/root/db).
        /// This member is required.
        public var url: Swift.String?

        public init(
            healthUrl: Swift.String? = nil,
            url: Swift.String? = nil
        )
        {
            self.healthUrl = healthUrl
            self.url = url
        }
    }

}

public struct CreateServiceInput {
    /// The ID of the application which the service is created.
    /// This member is required.
    public var applicationIdentifier: Swift.String?
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    public var clientToken: Swift.String?
    /// The description of the service.
    public var description: Swift.String?
    /// The type of endpoint to use for the service. The type can be a URL in a VPC or an Lambda function.
    /// This member is required.
    public var endpointType: MigrationHubRefactorSpacesClientTypes.ServiceEndpointType?
    /// The ID of the environment in which the service is created.
    /// This member is required.
    public var environmentIdentifier: Swift.String?
    /// The configuration for the Lambda endpoint type.
    public var lambdaEndpoint: MigrationHubRefactorSpacesClientTypes.LambdaEndpointInput?
    /// The name of the service.
    /// This member is required.
    public var name: Swift.String?
    /// The tags to assign to the service. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key-value pair..
    public var tags: [Swift.String: Swift.String]?
    /// The configuration for the URL endpoint type. When creating a route to a service, Refactor Spaces automatically resolves the address in the UrlEndpointInput object URL when the Domain Name System (DNS) time-to-live (TTL) expires, or every 60 seconds for TTLs less than 60 seconds.
    public var urlEndpoint: MigrationHubRefactorSpacesClientTypes.UrlEndpointInput?
    /// The ID of the VPC.
    public var vpcId: Swift.String?

    public init(
        applicationIdentifier: Swift.String? = nil,
        clientToken: Swift.String? = nil,
        description: Swift.String? = nil,
        endpointType: MigrationHubRefactorSpacesClientTypes.ServiceEndpointType? = nil,
        environmentIdentifier: Swift.String? = nil,
        lambdaEndpoint: MigrationHubRefactorSpacesClientTypes.LambdaEndpointInput? = nil,
        name: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        urlEndpoint: MigrationHubRefactorSpacesClientTypes.UrlEndpointInput? = nil,
        vpcId: Swift.String? = nil
    )
    {
        self.applicationIdentifier = applicationIdentifier
        self.clientToken = clientToken
        self.description = description
        self.endpointType = endpointType
        self.environmentIdentifier = environmentIdentifier
        self.lambdaEndpoint = lambdaEndpoint
        self.name = name
        self.tags = tags
        self.urlEndpoint = urlEndpoint
        self.vpcId = vpcId
    }
}

extension CreateServiceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateServiceInput(applicationIdentifier: \(Swift.String(describing: applicationIdentifier)), clientToken: \(Swift.String(describing: clientToken)), description: \(Swift.String(describing: description)), endpointType: \(Swift.String(describing: endpointType)), environmentIdentifier: \(Swift.String(describing: environmentIdentifier)), lambdaEndpoint: \(Swift.String(describing: lambdaEndpoint)), name: \(Swift.String(describing: name)), urlEndpoint: \(Swift.String(describing: urlEndpoint)), vpcId: \(Swift.String(describing: vpcId)), tags: \"CONTENT_REDACTED\")"}
}

extension MigrationHubRefactorSpacesClientTypes {

    public enum ServiceState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case creating
        case deleting
        case failed
        case sdkUnknown(Swift.String)

        public static var allCases: [ServiceState] {
            return [
                .active,
                .creating,
                .deleting,
                .failed
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateServiceOutput {
    /// The ID of the application that the created service belongs to.
    public var applicationId: Swift.String?
    /// The Amazon Resource Name (ARN) of the service.
    public var arn: Swift.String?
    /// The Amazon Web Services account ID of the service creator.
    public var createdByAccountId: Swift.String?
    /// A timestamp that indicates when the service is created.
    public var createdTime: Foundation.Date?
    /// The description of the created service.
    public var description: Swift.String?
    /// The endpoint type of the service.
    public var endpointType: MigrationHubRefactorSpacesClientTypes.ServiceEndpointType?
    /// The unique identifier of the environment.
    public var environmentId: Swift.String?
    /// The configuration for the Lambda endpoint type.
    public var lambdaEndpoint: MigrationHubRefactorSpacesClientTypes.LambdaEndpointInput?
    /// A timestamp that indicates when the service was last updated.
    public var lastUpdatedTime: Foundation.Date?
    /// The name of the service.
    public var name: Swift.String?
    /// The Amazon Web Services account ID of the service owner.
    public var ownerAccountId: Swift.String?
    /// The unique identifier of the service.
    public var serviceId: Swift.String?
    /// The current state of the service.
    public var state: MigrationHubRefactorSpacesClientTypes.ServiceState?
    /// The tags assigned to the created service. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key-value pair..
    public var tags: [Swift.String: Swift.String]?
    /// The configuration for the URL endpoint type.
    public var urlEndpoint: MigrationHubRefactorSpacesClientTypes.UrlEndpointInput?
    /// The ID of the VPC.
    public var vpcId: Swift.String?

    public init(
        applicationId: Swift.String? = nil,
        arn: Swift.String? = nil,
        createdByAccountId: Swift.String? = nil,
        createdTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        endpointType: MigrationHubRefactorSpacesClientTypes.ServiceEndpointType? = nil,
        environmentId: Swift.String? = nil,
        lambdaEndpoint: MigrationHubRefactorSpacesClientTypes.LambdaEndpointInput? = nil,
        lastUpdatedTime: Foundation.Date? = nil,
        name: Swift.String? = nil,
        ownerAccountId: Swift.String? = nil,
        serviceId: Swift.String? = nil,
        state: MigrationHubRefactorSpacesClientTypes.ServiceState? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        urlEndpoint: MigrationHubRefactorSpacesClientTypes.UrlEndpointInput? = nil,
        vpcId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
        self.arn = arn
        self.createdByAccountId = createdByAccountId
        self.createdTime = createdTime
        self.description = description
        self.endpointType = endpointType
        self.environmentId = environmentId
        self.lambdaEndpoint = lambdaEndpoint
        self.lastUpdatedTime = lastUpdatedTime
        self.name = name
        self.ownerAccountId = ownerAccountId
        self.serviceId = serviceId
        self.state = state
        self.tags = tags
        self.urlEndpoint = urlEndpoint
        self.vpcId = vpcId
    }
}

extension CreateServiceOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateServiceOutput(applicationId: \(Swift.String(describing: applicationId)), arn: \(Swift.String(describing: arn)), createdByAccountId: \(Swift.String(describing: createdByAccountId)), createdTime: \(Swift.String(describing: createdTime)), description: \(Swift.String(describing: description)), endpointType: \(Swift.String(describing: endpointType)), environmentId: \(Swift.String(describing: environmentId)), lambdaEndpoint: \(Swift.String(describing: lambdaEndpoint)), lastUpdatedTime: \(Swift.String(describing: lastUpdatedTime)), name: \(Swift.String(describing: name)), ownerAccountId: \(Swift.String(describing: ownerAccountId)), serviceId: \(Swift.String(describing: serviceId)), state: \(Swift.String(describing: state)), urlEndpoint: \(Swift.String(describing: urlEndpoint)), vpcId: \(Swift.String(describing: vpcId)), tags: \"CONTENT_REDACTED\")"}
}

public struct DeleteApplicationInput {
    /// The ID of the application.
    /// This member is required.
    public var applicationIdentifier: Swift.String?
    /// The ID of the environment.
    /// This member is required.
    public var environmentIdentifier: Swift.String?

    public init(
        applicationIdentifier: Swift.String? = nil,
        environmentIdentifier: Swift.String? = nil
    )
    {
        self.applicationIdentifier = applicationIdentifier
        self.environmentIdentifier = environmentIdentifier
    }
}

public struct DeleteApplicationOutput {
    /// The ID of the application.
    public var applicationId: Swift.String?
    /// The Amazon Resource Name (ARN) of the application.
    public var arn: Swift.String?
    /// The unique identifier of the application’s environment.
    public var environmentId: Swift.String?
    /// A timestamp that indicates when the environment was last updated.
    public var lastUpdatedTime: Foundation.Date?
    /// The name of the application.
    public var name: Swift.String?
    /// The current state of the application.
    public var state: MigrationHubRefactorSpacesClientTypes.ApplicationState?

    public init(
        applicationId: Swift.String? = nil,
        arn: Swift.String? = nil,
        environmentId: Swift.String? = nil,
        lastUpdatedTime: Foundation.Date? = nil,
        name: Swift.String? = nil,
        state: MigrationHubRefactorSpacesClientTypes.ApplicationState? = nil
    )
    {
        self.applicationId = applicationId
        self.arn = arn
        self.environmentId = environmentId
        self.lastUpdatedTime = lastUpdatedTime
        self.name = name
        self.state = state
    }
}

public struct DeleteEnvironmentInput {
    /// The ID of the environment.
    /// This member is required.
    public var environmentIdentifier: Swift.String?

    public init(
        environmentIdentifier: Swift.String? = nil
    )
    {
        self.environmentIdentifier = environmentIdentifier
    }
}

public struct DeleteEnvironmentOutput {
    /// The Amazon Resource Name (ARN) of the environment.
    public var arn: Swift.String?
    /// The unique identifier of the environment.
    public var environmentId: Swift.String?
    /// A timestamp that indicates when the environment was last updated.
    public var lastUpdatedTime: Foundation.Date?
    /// The name of the environment.
    public var name: Swift.String?
    /// The current state of the environment.
    public var state: MigrationHubRefactorSpacesClientTypes.EnvironmentState?

    public init(
        arn: Swift.String? = nil,
        environmentId: Swift.String? = nil,
        lastUpdatedTime: Foundation.Date? = nil,
        name: Swift.String? = nil,
        state: MigrationHubRefactorSpacesClientTypes.EnvironmentState? = nil
    )
    {
        self.arn = arn
        self.environmentId = environmentId
        self.lastUpdatedTime = lastUpdatedTime
        self.name = name
        self.state = state
    }
}

public struct DeleteResourcePolicyInput {
    /// Amazon Resource Name (ARN) of the resource associated with the policy.
    /// This member is required.
    public var identifier: Swift.String?

    public init(
        identifier: Swift.String? = nil
    )
    {
        self.identifier = identifier
    }
}

public struct DeleteResourcePolicyOutput {

    public init() { }
}

public struct DeleteRouteInput {
    /// The ID of the application to delete the route from.
    /// This member is required.
    public var applicationIdentifier: Swift.String?
    /// The ID of the environment to delete the route from.
    /// This member is required.
    public var environmentIdentifier: Swift.String?
    /// The ID of the route to delete.
    /// This member is required.
    public var routeIdentifier: Swift.String?

    public init(
        applicationIdentifier: Swift.String? = nil,
        environmentIdentifier: Swift.String? = nil,
        routeIdentifier: Swift.String? = nil
    )
    {
        self.applicationIdentifier = applicationIdentifier
        self.environmentIdentifier = environmentIdentifier
        self.routeIdentifier = routeIdentifier
    }
}

public struct DeleteRouteOutput {
    /// The ID of the application that the route belongs to.
    public var applicationId: Swift.String?
    /// The Amazon Resource Name (ARN) of the route.
    public var arn: Swift.String?
    /// A timestamp that indicates when the route was last updated.
    public var lastUpdatedTime: Foundation.Date?
    /// The ID of the route to delete.
    public var routeId: Swift.String?
    /// The ID of the service that the route belongs to.
    public var serviceId: Swift.String?
    /// The current state of the route.
    public var state: MigrationHubRefactorSpacesClientTypes.RouteState?

    public init(
        applicationId: Swift.String? = nil,
        arn: Swift.String? = nil,
        lastUpdatedTime: Foundation.Date? = nil,
        routeId: Swift.String? = nil,
        serviceId: Swift.String? = nil,
        state: MigrationHubRefactorSpacesClientTypes.RouteState? = nil
    )
    {
        self.applicationId = applicationId
        self.arn = arn
        self.lastUpdatedTime = lastUpdatedTime
        self.routeId = routeId
        self.serviceId = serviceId
        self.state = state
    }
}

public struct DeleteServiceInput {
    /// Deletes a Refactor Spaces service. The RefactorSpacesSecurityGroup security group must be removed from all Amazon Web Services resources in the virtual private cloud (VPC) prior to deleting a service with a URL endpoint in a VPC.
    /// This member is required.
    public var applicationIdentifier: Swift.String?
    /// The ID of the environment that the service is in.
    /// This member is required.
    public var environmentIdentifier: Swift.String?
    /// The ID of the service to delete.
    /// This member is required.
    public var serviceIdentifier: Swift.String?

    public init(
        applicationIdentifier: Swift.String? = nil,
        environmentIdentifier: Swift.String? = nil,
        serviceIdentifier: Swift.String? = nil
    )
    {
        self.applicationIdentifier = applicationIdentifier
        self.environmentIdentifier = environmentIdentifier
        self.serviceIdentifier = serviceIdentifier
    }
}

public struct DeleteServiceOutput {
    /// The ID of the application that the service is in.
    public var applicationId: Swift.String?
    /// The Amazon Resource Name (ARN) of the service.
    public var arn: Swift.String?
    /// The unique identifier of the environment.
    public var environmentId: Swift.String?
    /// A timestamp that indicates when the service was last updated.
    public var lastUpdatedTime: Foundation.Date?
    /// The name of the service.
    public var name: Swift.String?
    /// The unique identifier of the service.
    public var serviceId: Swift.String?
    /// The current state of the service.
    public var state: MigrationHubRefactorSpacesClientTypes.ServiceState?

    public init(
        applicationId: Swift.String? = nil,
        arn: Swift.String? = nil,
        environmentId: Swift.String? = nil,
        lastUpdatedTime: Foundation.Date? = nil,
        name: Swift.String? = nil,
        serviceId: Swift.String? = nil,
        state: MigrationHubRefactorSpacesClientTypes.ServiceState? = nil
    )
    {
        self.applicationId = applicationId
        self.arn = arn
        self.environmentId = environmentId
        self.lastUpdatedTime = lastUpdatedTime
        self.name = name
        self.serviceId = serviceId
        self.state = state
    }
}

extension MigrationHubRefactorSpacesClientTypes {
    /// The summary information for environments as a response to ListEnvironments.
    public struct EnvironmentSummary {
        /// The Amazon Resource Name (ARN) of the environment.
        public var arn: Swift.String?
        /// A timestamp that indicates when the environment is created.
        public var createdTime: Foundation.Date?
        /// A description of the environment.
        public var description: Swift.String?
        /// The unique identifier of the environment.
        public var environmentId: Swift.String?
        /// Any error associated with the environment resource.
        public var error: MigrationHubRefactorSpacesClientTypes.ErrorResponse?
        /// A timestamp that indicates when the environment was last updated.
        public var lastUpdatedTime: Foundation.Date?
        /// The name of the environment.
        public var name: Swift.String?
        /// The network fabric type of the environment.
        public var networkFabricType: MigrationHubRefactorSpacesClientTypes.NetworkFabricType?
        /// The Amazon Web Services account ID of the environment owner.
        public var ownerAccountId: Swift.String?
        /// The current state of the environment.
        public var state: MigrationHubRefactorSpacesClientTypes.EnvironmentState?
        /// The tags assigned to the environment.
        public var tags: [Swift.String: Swift.String]?
        /// The ID of the Transit Gateway set up by the environment.
        public var transitGatewayId: Swift.String?

        public init(
            arn: Swift.String? = nil,
            createdTime: Foundation.Date? = nil,
            description: Swift.String? = nil,
            environmentId: Swift.String? = nil,
            error: MigrationHubRefactorSpacesClientTypes.ErrorResponse? = nil,
            lastUpdatedTime: Foundation.Date? = nil,
            name: Swift.String? = nil,
            networkFabricType: MigrationHubRefactorSpacesClientTypes.NetworkFabricType? = nil,
            ownerAccountId: Swift.String? = nil,
            state: MigrationHubRefactorSpacesClientTypes.EnvironmentState? = nil,
            tags: [Swift.String: Swift.String]? = nil,
            transitGatewayId: Swift.String? = nil
        )
        {
            self.arn = arn
            self.createdTime = createdTime
            self.description = description
            self.environmentId = environmentId
            self.error = error
            self.lastUpdatedTime = lastUpdatedTime
            self.name = name
            self.networkFabricType = networkFabricType
            self.ownerAccountId = ownerAccountId
            self.state = state
            self.tags = tags
            self.transitGatewayId = transitGatewayId
        }
    }

}

extension MigrationHubRefactorSpacesClientTypes.EnvironmentSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EnvironmentSummary(arn: \(Swift.String(describing: arn)), createdTime: \(Swift.String(describing: createdTime)), description: \(Swift.String(describing: description)), environmentId: \(Swift.String(describing: environmentId)), error: \(Swift.String(describing: error)), lastUpdatedTime: \(Swift.String(describing: lastUpdatedTime)), name: \(Swift.String(describing: name)), networkFabricType: \(Swift.String(describing: networkFabricType)), ownerAccountId: \(Swift.String(describing: ownerAccountId)), state: \(Swift.String(describing: state)), transitGatewayId: \(Swift.String(describing: transitGatewayId)), tags: \"CONTENT_REDACTED\")"}
}

extension MigrationHubRefactorSpacesClientTypes {
    /// Provides summary information for the EnvironmentVpc resource as a response to ListEnvironmentVpc.
    public struct EnvironmentVpc {
        /// The Amazon Web Services account ID of the virtual private cloud (VPC) owner.
        public var accountId: Swift.String?
        /// The list of Amazon Virtual Private Cloud (Amazon VPC) CIDR blocks.
        public var cidrBlocks: [Swift.String]?
        /// A timestamp that indicates when the VPC is first added to the environment.
        public var createdTime: Foundation.Date?
        /// The unique identifier of the environment.
        public var environmentId: Swift.String?
        /// A timestamp that indicates when the VPC was last updated by the environment.
        public var lastUpdatedTime: Foundation.Date?
        /// The ID of the VPC.
        public var vpcId: Swift.String?
        /// The name of the VPC at the time it is added to the environment.
        public var vpcName: Swift.String?

        public init(
            accountId: Swift.String? = nil,
            cidrBlocks: [Swift.String]? = nil,
            createdTime: Foundation.Date? = nil,
            environmentId: Swift.String? = nil,
            lastUpdatedTime: Foundation.Date? = nil,
            vpcId: Swift.String? = nil,
            vpcName: Swift.String? = nil
        )
        {
            self.accountId = accountId
            self.cidrBlocks = cidrBlocks
            self.createdTime = createdTime
            self.environmentId = environmentId
            self.lastUpdatedTime = lastUpdatedTime
            self.vpcId = vpcId
            self.vpcName = vpcName
        }
    }

}

public struct GetApplicationInput {
    /// The ID of the application.
    /// This member is required.
    public var applicationIdentifier: Swift.String?
    /// The ID of the environment.
    /// This member is required.
    public var environmentIdentifier: Swift.String?

    public init(
        applicationIdentifier: Swift.String? = nil,
        environmentIdentifier: Swift.String? = nil
    )
    {
        self.applicationIdentifier = applicationIdentifier
        self.environmentIdentifier = environmentIdentifier
    }
}

public struct GetApplicationOutput {
    /// The endpoint URL of the API Gateway proxy.
    public var apiGatewayProxy: MigrationHubRefactorSpacesClientTypes.ApiGatewayProxyConfig?
    /// The unique identifier of the application.
    public var applicationId: Swift.String?
    /// The Amazon Resource Name (ARN) of the application.
    public var arn: Swift.String?
    /// The Amazon Web Services account ID of the application creator.
    public var createdByAccountId: Swift.String?
    /// A timestamp that indicates when the application is created.
    public var createdTime: Foundation.Date?
    /// The unique identifier of the environment.
    public var environmentId: Swift.String?
    /// Any error associated with the application resource.
    public var error: MigrationHubRefactorSpacesClientTypes.ErrorResponse?
    /// A timestamp that indicates when the application was last updated.
    public var lastUpdatedTime: Foundation.Date?
    /// The name of the application.
    public var name: Swift.String?
    /// The Amazon Web Services account ID of the application owner (which is always the same as the environment owner account ID).
    public var ownerAccountId: Swift.String?
    /// The proxy type of the proxy created within the application.
    public var proxyType: MigrationHubRefactorSpacesClientTypes.ProxyType?
    /// The current state of the application.
    public var state: MigrationHubRefactorSpacesClientTypes.ApplicationState?
    /// The tags assigned to the application. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key-value pair.
    public var tags: [Swift.String: Swift.String]?
    /// The ID of the virtual private cloud (VPC).
    public var vpcId: Swift.String?

    public init(
        apiGatewayProxy: MigrationHubRefactorSpacesClientTypes.ApiGatewayProxyConfig? = nil,
        applicationId: Swift.String? = nil,
        arn: Swift.String? = nil,
        createdByAccountId: Swift.String? = nil,
        createdTime: Foundation.Date? = nil,
        environmentId: Swift.String? = nil,
        error: MigrationHubRefactorSpacesClientTypes.ErrorResponse? = nil,
        lastUpdatedTime: Foundation.Date? = nil,
        name: Swift.String? = nil,
        ownerAccountId: Swift.String? = nil,
        proxyType: MigrationHubRefactorSpacesClientTypes.ProxyType? = nil,
        state: MigrationHubRefactorSpacesClientTypes.ApplicationState? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        vpcId: Swift.String? = nil
    )
    {
        self.apiGatewayProxy = apiGatewayProxy
        self.applicationId = applicationId
        self.arn = arn
        self.createdByAccountId = createdByAccountId
        self.createdTime = createdTime
        self.environmentId = environmentId
        self.error = error
        self.lastUpdatedTime = lastUpdatedTime
        self.name = name
        self.ownerAccountId = ownerAccountId
        self.proxyType = proxyType
        self.state = state
        self.tags = tags
        self.vpcId = vpcId
    }
}

extension GetApplicationOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetApplicationOutput(apiGatewayProxy: \(Swift.String(describing: apiGatewayProxy)), applicationId: \(Swift.String(describing: applicationId)), arn: \(Swift.String(describing: arn)), createdByAccountId: \(Swift.String(describing: createdByAccountId)), createdTime: \(Swift.String(describing: createdTime)), environmentId: \(Swift.String(describing: environmentId)), error: \(Swift.String(describing: error)), lastUpdatedTime: \(Swift.String(describing: lastUpdatedTime)), name: \(Swift.String(describing: name)), ownerAccountId: \(Swift.String(describing: ownerAccountId)), proxyType: \(Swift.String(describing: proxyType)), state: \(Swift.String(describing: state)), vpcId: \(Swift.String(describing: vpcId)), tags: \"CONTENT_REDACTED\")"}
}

public struct GetEnvironmentInput {
    /// The ID of the environment.
    /// This member is required.
    public var environmentIdentifier: Swift.String?

    public init(
        environmentIdentifier: Swift.String? = nil
    )
    {
        self.environmentIdentifier = environmentIdentifier
    }
}

public struct GetEnvironmentOutput {
    /// The Amazon Resource Name (ARN) of the environment.
    public var arn: Swift.String?
    /// A timestamp that indicates when the environment is created.
    public var createdTime: Foundation.Date?
    /// The description of the environment.
    public var description: Swift.String?
    /// The unique identifier of the environment.
    public var environmentId: Swift.String?
    /// Any error associated with the environment resource.
    public var error: MigrationHubRefactorSpacesClientTypes.ErrorResponse?
    /// A timestamp that indicates when the environment was last updated.
    public var lastUpdatedTime: Foundation.Date?
    /// The name of the environment.
    public var name: Swift.String?
    /// The network fabric type of the environment.
    public var networkFabricType: MigrationHubRefactorSpacesClientTypes.NetworkFabricType?
    /// The Amazon Web Services account ID of the environment owner.
    public var ownerAccountId: Swift.String?
    /// The current state of the environment.
    public var state: MigrationHubRefactorSpacesClientTypes.EnvironmentState?
    /// The tags to assign to the environment. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key-value pair.
    public var tags: [Swift.String: Swift.String]?
    /// The ID of the Transit Gateway set up by the environment, if applicable.
    public var transitGatewayId: Swift.String?

    public init(
        arn: Swift.String? = nil,
        createdTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        environmentId: Swift.String? = nil,
        error: MigrationHubRefactorSpacesClientTypes.ErrorResponse? = nil,
        lastUpdatedTime: Foundation.Date? = nil,
        name: Swift.String? = nil,
        networkFabricType: MigrationHubRefactorSpacesClientTypes.NetworkFabricType? = nil,
        ownerAccountId: Swift.String? = nil,
        state: MigrationHubRefactorSpacesClientTypes.EnvironmentState? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        transitGatewayId: Swift.String? = nil
    )
    {
        self.arn = arn
        self.createdTime = createdTime
        self.description = description
        self.environmentId = environmentId
        self.error = error
        self.lastUpdatedTime = lastUpdatedTime
        self.name = name
        self.networkFabricType = networkFabricType
        self.ownerAccountId = ownerAccountId
        self.state = state
        self.tags = tags
        self.transitGatewayId = transitGatewayId
    }
}

extension GetEnvironmentOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetEnvironmentOutput(arn: \(Swift.String(describing: arn)), createdTime: \(Swift.String(describing: createdTime)), description: \(Swift.String(describing: description)), environmentId: \(Swift.String(describing: environmentId)), error: \(Swift.String(describing: error)), lastUpdatedTime: \(Swift.String(describing: lastUpdatedTime)), name: \(Swift.String(describing: name)), networkFabricType: \(Swift.String(describing: networkFabricType)), ownerAccountId: \(Swift.String(describing: ownerAccountId)), state: \(Swift.String(describing: state)), transitGatewayId: \(Swift.String(describing: transitGatewayId)), tags: \"CONTENT_REDACTED\")"}
}

public struct GetResourcePolicyInput {
    /// The Amazon Resource Name (ARN) of the resource associated with the policy.
    /// This member is required.
    public var identifier: Swift.String?

    public init(
        identifier: Swift.String? = nil
    )
    {
        self.identifier = identifier
    }
}

public struct GetResourcePolicyOutput {
    /// A JSON-formatted string for an Amazon Web Services resource-based policy.
    public var policy: Swift.String?

    public init(
        policy: Swift.String? = nil
    )
    {
        self.policy = policy
    }
}

public struct GetRouteInput {
    /// The ID of the application.
    /// This member is required.
    public var applicationIdentifier: Swift.String?
    /// The ID of the environment.
    /// This member is required.
    public var environmentIdentifier: Swift.String?
    /// The ID of the route.
    /// This member is required.
    public var routeIdentifier: Swift.String?

    public init(
        applicationIdentifier: Swift.String? = nil,
        environmentIdentifier: Swift.String? = nil,
        routeIdentifier: Swift.String? = nil
    )
    {
        self.applicationIdentifier = applicationIdentifier
        self.environmentIdentifier = environmentIdentifier
        self.routeIdentifier = routeIdentifier
    }
}

public struct GetRouteOutput {
    /// If set to true, this option appends the source path to the service URL endpoint.
    public var appendSourcePath: Swift.Bool?
    /// The ID of the application that the route belongs to.
    public var applicationId: Swift.String?
    /// The Amazon Resource Name (ARN) of the route.
    public var arn: Swift.String?
    /// The Amazon Web Services account ID of the route creator.
    public var createdByAccountId: Swift.String?
    /// The timestamp of when the route is created.
    public var createdTime: Foundation.Date?
    /// Unique identifier of the environment.
    public var environmentId: Swift.String?
    /// Any error associated with the route resource.
    public var error: MigrationHubRefactorSpacesClientTypes.ErrorResponse?
    /// Indicates whether to match all subpaths of the given source path. If this value is false, requests must match the source path exactly before they are forwarded to this route's service.
    public var includeChildPaths: Swift.Bool?
    /// A timestamp that indicates when the route was last updated.
    public var lastUpdatedTime: Foundation.Date?
    /// A list of HTTP methods to match. An empty list matches all values. If a method is present, only HTTP requests using that method are forwarded to this route’s service.
    public var methods: [MigrationHubRefactorSpacesClientTypes.HttpMethod]?
    /// The Amazon Web Services account ID of the route owner.
    public var ownerAccountId: Swift.String?
    /// A mapping of Amazon API Gateway path resources to resource IDs.
    public var pathResourceToId: [Swift.String: Swift.String]?
    /// The unique identifier of the route. DEFAULT: All traffic that does not match another route is forwarded to the default route. Applications must have a default route before any other routes can be created. URI_PATH: A route that is based on a URI path.
    public var routeId: Swift.String?
    /// The type of route.
    public var routeType: MigrationHubRefactorSpacesClientTypes.RouteType?
    /// The unique identifier of the service.
    public var serviceId: Swift.String?
    /// This is the path that Refactor Spaces uses to match traffic. Paths must start with / and are relative to the base of the application. To use path parameters in the source path, add a variable in curly braces. For example, the resource path {user} represents a path parameter called 'user'.
    public var sourcePath: Swift.String?
    /// The current state of the route.
    public var state: MigrationHubRefactorSpacesClientTypes.RouteState?
    /// The tags assigned to the route. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key-value pair.
    public var tags: [Swift.String: Swift.String]?

    public init(
        appendSourcePath: Swift.Bool? = nil,
        applicationId: Swift.String? = nil,
        arn: Swift.String? = nil,
        createdByAccountId: Swift.String? = nil,
        createdTime: Foundation.Date? = nil,
        environmentId: Swift.String? = nil,
        error: MigrationHubRefactorSpacesClientTypes.ErrorResponse? = nil,
        includeChildPaths: Swift.Bool? = nil,
        lastUpdatedTime: Foundation.Date? = nil,
        methods: [MigrationHubRefactorSpacesClientTypes.HttpMethod]? = nil,
        ownerAccountId: Swift.String? = nil,
        pathResourceToId: [Swift.String: Swift.String]? = nil,
        routeId: Swift.String? = nil,
        routeType: MigrationHubRefactorSpacesClientTypes.RouteType? = nil,
        serviceId: Swift.String? = nil,
        sourcePath: Swift.String? = nil,
        state: MigrationHubRefactorSpacesClientTypes.RouteState? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.appendSourcePath = appendSourcePath
        self.applicationId = applicationId
        self.arn = arn
        self.createdByAccountId = createdByAccountId
        self.createdTime = createdTime
        self.environmentId = environmentId
        self.error = error
        self.includeChildPaths = includeChildPaths
        self.lastUpdatedTime = lastUpdatedTime
        self.methods = methods
        self.ownerAccountId = ownerAccountId
        self.pathResourceToId = pathResourceToId
        self.routeId = routeId
        self.routeType = routeType
        self.serviceId = serviceId
        self.sourcePath = sourcePath
        self.state = state
        self.tags = tags
    }
}

extension GetRouteOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRouteOutput(appendSourcePath: \(Swift.String(describing: appendSourcePath)), applicationId: \(Swift.String(describing: applicationId)), arn: \(Swift.String(describing: arn)), createdByAccountId: \(Swift.String(describing: createdByAccountId)), createdTime: \(Swift.String(describing: createdTime)), environmentId: \(Swift.String(describing: environmentId)), error: \(Swift.String(describing: error)), includeChildPaths: \(Swift.String(describing: includeChildPaths)), lastUpdatedTime: \(Swift.String(describing: lastUpdatedTime)), methods: \(Swift.String(describing: methods)), ownerAccountId: \(Swift.String(describing: ownerAccountId)), pathResourceToId: \(Swift.String(describing: pathResourceToId)), routeId: \(Swift.String(describing: routeId)), routeType: \(Swift.String(describing: routeType)), serviceId: \(Swift.String(describing: serviceId)), sourcePath: \(Swift.String(describing: sourcePath)), state: \(Swift.String(describing: state)), tags: \"CONTENT_REDACTED\")"}
}

public struct GetServiceInput {
    /// The ID of the application.
    /// This member is required.
    public var applicationIdentifier: Swift.String?
    /// The ID of the environment.
    /// This member is required.
    public var environmentIdentifier: Swift.String?
    /// The ID of the service.
    /// This member is required.
    public var serviceIdentifier: Swift.String?

    public init(
        applicationIdentifier: Swift.String? = nil,
        environmentIdentifier: Swift.String? = nil,
        serviceIdentifier: Swift.String? = nil
    )
    {
        self.applicationIdentifier = applicationIdentifier
        self.environmentIdentifier = environmentIdentifier
        self.serviceIdentifier = serviceIdentifier
    }
}

extension MigrationHubRefactorSpacesClientTypes {
    /// The configuration for the Lambda endpoint type.
    public struct LambdaEndpointConfig {
        /// The Amazon Resource Name (ARN) of the Lambda endpoint.
        public var arn: Swift.String?

        public init(
            arn: Swift.String? = nil
        )
        {
            self.arn = arn
        }
    }

}

extension MigrationHubRefactorSpacesClientTypes {
    /// The configuration for the URL endpoint type.
    public struct UrlEndpointConfig {
        /// The health check URL of the URL endpoint type.
        public var healthUrl: Swift.String?
        /// The HTTP URL endpoint.
        public var url: Swift.String?

        public init(
            healthUrl: Swift.String? = nil,
            url: Swift.String? = nil
        )
        {
            self.healthUrl = healthUrl
            self.url = url
        }
    }

}

public struct GetServiceOutput {
    /// The ID of the application.
    public var applicationId: Swift.String?
    /// The Amazon Resource Name (ARN) of the service.
    public var arn: Swift.String?
    /// The Amazon Web Services account ID of the service creator.
    public var createdByAccountId: Swift.String?
    /// The timestamp of when the service is created.
    public var createdTime: Foundation.Date?
    /// The description of the service.
    public var description: Swift.String?
    /// The endpoint type of the service.
    public var endpointType: MigrationHubRefactorSpacesClientTypes.ServiceEndpointType?
    /// The unique identifier of the environment.
    public var environmentId: Swift.String?
    /// Any error associated with the service resource.
    public var error: MigrationHubRefactorSpacesClientTypes.ErrorResponse?
    /// The configuration for the Lambda endpoint type. The Arn is the Amazon Resource Name (ARN) of the Lambda function associated with this service.
    public var lambdaEndpoint: MigrationHubRefactorSpacesClientTypes.LambdaEndpointConfig?
    /// A timestamp that indicates when the service was last updated.
    public var lastUpdatedTime: Foundation.Date?
    /// The name of the service.
    public var name: Swift.String?
    /// The Amazon Web Services account ID of the service owner.
    public var ownerAccountId: Swift.String?
    /// The unique identifier of the service.
    public var serviceId: Swift.String?
    /// The current state of the service.
    public var state: MigrationHubRefactorSpacesClientTypes.ServiceState?
    /// The tags assigned to the service. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key-value pair.
    public var tags: [Swift.String: Swift.String]?
    /// The configuration for the URL endpoint type. The Url isthe URL of the endpoint type. The HealthUrl is the health check URL of the endpoint type.
    public var urlEndpoint: MigrationHubRefactorSpacesClientTypes.UrlEndpointConfig?
    /// The ID of the virtual private cloud (VPC).
    public var vpcId: Swift.String?

    public init(
        applicationId: Swift.String? = nil,
        arn: Swift.String? = nil,
        createdByAccountId: Swift.String? = nil,
        createdTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        endpointType: MigrationHubRefactorSpacesClientTypes.ServiceEndpointType? = nil,
        environmentId: Swift.String? = nil,
        error: MigrationHubRefactorSpacesClientTypes.ErrorResponse? = nil,
        lambdaEndpoint: MigrationHubRefactorSpacesClientTypes.LambdaEndpointConfig? = nil,
        lastUpdatedTime: Foundation.Date? = nil,
        name: Swift.String? = nil,
        ownerAccountId: Swift.String? = nil,
        serviceId: Swift.String? = nil,
        state: MigrationHubRefactorSpacesClientTypes.ServiceState? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        urlEndpoint: MigrationHubRefactorSpacesClientTypes.UrlEndpointConfig? = nil,
        vpcId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
        self.arn = arn
        self.createdByAccountId = createdByAccountId
        self.createdTime = createdTime
        self.description = description
        self.endpointType = endpointType
        self.environmentId = environmentId
        self.error = error
        self.lambdaEndpoint = lambdaEndpoint
        self.lastUpdatedTime = lastUpdatedTime
        self.name = name
        self.ownerAccountId = ownerAccountId
        self.serviceId = serviceId
        self.state = state
        self.tags = tags
        self.urlEndpoint = urlEndpoint
        self.vpcId = vpcId
    }
}

extension GetServiceOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetServiceOutput(applicationId: \(Swift.String(describing: applicationId)), arn: \(Swift.String(describing: arn)), createdByAccountId: \(Swift.String(describing: createdByAccountId)), createdTime: \(Swift.String(describing: createdTime)), description: \(Swift.String(describing: description)), endpointType: \(Swift.String(describing: endpointType)), environmentId: \(Swift.String(describing: environmentId)), error: \(Swift.String(describing: error)), lambdaEndpoint: \(Swift.String(describing: lambdaEndpoint)), lastUpdatedTime: \(Swift.String(describing: lastUpdatedTime)), name: \(Swift.String(describing: name)), ownerAccountId: \(Swift.String(describing: ownerAccountId)), serviceId: \(Swift.String(describing: serviceId)), state: \(Swift.String(describing: state)), urlEndpoint: \(Swift.String(describing: urlEndpoint)), vpcId: \(Swift.String(describing: vpcId)), tags: \"CONTENT_REDACTED\")"}
}

/// The resource policy is not valid.
public struct InvalidResourcePolicyException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidResourcePolicyException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension MigrationHubRefactorSpacesClientTypes {
    /// The summary for the Lambda endpoint type.
    public struct LambdaEndpointSummary {
        /// The Amazon Resource Name (ARN) of the Lambda endpoint.
        public var arn: Swift.String?

        public init(
            arn: Swift.String? = nil
        )
        {
            self.arn = arn
        }
    }

}

public struct ListApplicationsInput {
    /// The ID of the environment.
    /// This member is required.
    public var environmentIdentifier: Swift.String?
    /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
    public var maxResults: Swift.Int?
    /// The token for the next page of results.
    public var nextToken: Swift.String?

    public init(
        environmentIdentifier: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.environmentIdentifier = environmentIdentifier
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListApplicationsOutput {
    /// The list of ApplicationSummary objects.
    public var applicationSummaryList: [MigrationHubRefactorSpacesClientTypes.ApplicationSummary]?
    /// The token for the next page of results.
    public var nextToken: Swift.String?

    public init(
        applicationSummaryList: [MigrationHubRefactorSpacesClientTypes.ApplicationSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.applicationSummaryList = applicationSummaryList
        self.nextToken = nextToken
    }
}

public struct ListEnvironmentsInput {
    /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
    public var maxResults: Swift.Int?
    /// The token for the next page of results.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListEnvironmentsOutput {
    /// The list of EnvironmentSummary objects.
    public var environmentSummaryList: [MigrationHubRefactorSpacesClientTypes.EnvironmentSummary]?
    /// The token for the next page of results.
    public var nextToken: Swift.String?

    public init(
        environmentSummaryList: [MigrationHubRefactorSpacesClientTypes.EnvironmentSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.environmentSummaryList = environmentSummaryList
        self.nextToken = nextToken
    }
}

public struct ListEnvironmentVpcsInput {
    /// The ID of the environment.
    /// This member is required.
    public var environmentIdentifier: Swift.String?
    /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
    public var maxResults: Swift.Int?
    /// The token for the next page of results.
    public var nextToken: Swift.String?

    public init(
        environmentIdentifier: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.environmentIdentifier = environmentIdentifier
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListEnvironmentVpcsOutput {
    /// The list of EnvironmentVpc objects.
    public var environmentVpcList: [MigrationHubRefactorSpacesClientTypes.EnvironmentVpc]?
    /// The token for the next page of results.
    public var nextToken: Swift.String?

    public init(
        environmentVpcList: [MigrationHubRefactorSpacesClientTypes.EnvironmentVpc]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.environmentVpcList = environmentVpcList
        self.nextToken = nextToken
    }
}

public struct ListRoutesInput {
    /// The ID of the application.
    /// This member is required.
    public var applicationIdentifier: Swift.String?
    /// The ID of the environment.
    /// This member is required.
    public var environmentIdentifier: Swift.String?
    /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
    public var maxResults: Swift.Int?
    /// The token for the next page of results.
    public var nextToken: Swift.String?

    public init(
        applicationIdentifier: Swift.String? = nil,
        environmentIdentifier: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.applicationIdentifier = applicationIdentifier
        self.environmentIdentifier = environmentIdentifier
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension MigrationHubRefactorSpacesClientTypes {
    /// The summary information for the routes as a response to ListRoutes.
    public struct RouteSummary {
        /// If set to true, this option appends the source path to the service URL endpoint.
        public var appendSourcePath: Swift.Bool?
        /// The unique identifier of the application.
        public var applicationId: Swift.String?
        /// The Amazon Resource Name (ARN) of the route.
        public var arn: Swift.String?
        /// The Amazon Web Services account ID of the route creator.
        public var createdByAccountId: Swift.String?
        /// A timestamp that indicates when the route is created.
        public var createdTime: Foundation.Date?
        /// The unique identifier of the environment.
        public var environmentId: Swift.String?
        /// Any error associated with the route resource.
        public var error: MigrationHubRefactorSpacesClientTypes.ErrorResponse?
        /// Indicates whether to match all subpaths of the given source path. If this value is false, requests must match the source path exactly before they are forwarded to this route's service.
        public var includeChildPaths: Swift.Bool?
        /// A timestamp that indicates when the route was last updated.
        public var lastUpdatedTime: Foundation.Date?
        /// A list of HTTP methods to match. An empty list matches all values. If a method is present, only HTTP requests using that method are forwarded to this route’s service.
        public var methods: [MigrationHubRefactorSpacesClientTypes.HttpMethod]?
        /// The Amazon Web Services account ID of the route owner.
        public var ownerAccountId: Swift.String?
        /// A mapping of Amazon API Gateway path resources to resource IDs.
        public var pathResourceToId: [Swift.String: Swift.String]?
        /// The unique identifier of the route.
        public var routeId: Swift.String?
        /// The route type of the route.
        public var routeType: MigrationHubRefactorSpacesClientTypes.RouteType?
        /// The unique identifier of the service.
        public var serviceId: Swift.String?
        /// This is the path that Refactor Spaces uses to match traffic. Paths must start with / and are relative to the base of the application. To use path parameters in the source path, add a variable in curly braces. For example, the resource path {user} represents a path parameter called 'user'.
        public var sourcePath: Swift.String?
        /// The current state of the route.
        public var state: MigrationHubRefactorSpacesClientTypes.RouteState?
        /// The tags assigned to the route.
        public var tags: [Swift.String: Swift.String]?

        public init(
            appendSourcePath: Swift.Bool? = nil,
            applicationId: Swift.String? = nil,
            arn: Swift.String? = nil,
            createdByAccountId: Swift.String? = nil,
            createdTime: Foundation.Date? = nil,
            environmentId: Swift.String? = nil,
            error: MigrationHubRefactorSpacesClientTypes.ErrorResponse? = nil,
            includeChildPaths: Swift.Bool? = nil,
            lastUpdatedTime: Foundation.Date? = nil,
            methods: [MigrationHubRefactorSpacesClientTypes.HttpMethod]? = nil,
            ownerAccountId: Swift.String? = nil,
            pathResourceToId: [Swift.String: Swift.String]? = nil,
            routeId: Swift.String? = nil,
            routeType: MigrationHubRefactorSpacesClientTypes.RouteType? = nil,
            serviceId: Swift.String? = nil,
            sourcePath: Swift.String? = nil,
            state: MigrationHubRefactorSpacesClientTypes.RouteState? = nil,
            tags: [Swift.String: Swift.String]? = nil
        )
        {
            self.appendSourcePath = appendSourcePath
            self.applicationId = applicationId
            self.arn = arn
            self.createdByAccountId = createdByAccountId
            self.createdTime = createdTime
            self.environmentId = environmentId
            self.error = error
            self.includeChildPaths = includeChildPaths
            self.lastUpdatedTime = lastUpdatedTime
            self.methods = methods
            self.ownerAccountId = ownerAccountId
            self.pathResourceToId = pathResourceToId
            self.routeId = routeId
            self.routeType = routeType
            self.serviceId = serviceId
            self.sourcePath = sourcePath
            self.state = state
            self.tags = tags
        }
    }

}

extension MigrationHubRefactorSpacesClientTypes.RouteSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RouteSummary(appendSourcePath: \(Swift.String(describing: appendSourcePath)), applicationId: \(Swift.String(describing: applicationId)), arn: \(Swift.String(describing: arn)), createdByAccountId: \(Swift.String(describing: createdByAccountId)), createdTime: \(Swift.String(describing: createdTime)), environmentId: \(Swift.String(describing: environmentId)), error: \(Swift.String(describing: error)), includeChildPaths: \(Swift.String(describing: includeChildPaths)), lastUpdatedTime: \(Swift.String(describing: lastUpdatedTime)), methods: \(Swift.String(describing: methods)), ownerAccountId: \(Swift.String(describing: ownerAccountId)), pathResourceToId: \(Swift.String(describing: pathResourceToId)), routeId: \(Swift.String(describing: routeId)), routeType: \(Swift.String(describing: routeType)), serviceId: \(Swift.String(describing: serviceId)), sourcePath: \(Swift.String(describing: sourcePath)), state: \(Swift.String(describing: state)), tags: \"CONTENT_REDACTED\")"}
}

public struct ListRoutesOutput {
    /// The token for the next page of results.
    public var nextToken: Swift.String?
    /// The list of RouteSummary objects.
    public var routeSummaryList: [MigrationHubRefactorSpacesClientTypes.RouteSummary]?

    public init(
        nextToken: Swift.String? = nil,
        routeSummaryList: [MigrationHubRefactorSpacesClientTypes.RouteSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.routeSummaryList = routeSummaryList
    }
}

public struct ListServicesInput {
    /// The ID of the application.
    /// This member is required.
    public var applicationIdentifier: Swift.String?
    /// The ID of the environment.
    /// This member is required.
    public var environmentIdentifier: Swift.String?
    /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
    public var maxResults: Swift.Int?
    /// The token for the next page of results.
    public var nextToken: Swift.String?

    public init(
        applicationIdentifier: Swift.String? = nil,
        environmentIdentifier: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.applicationIdentifier = applicationIdentifier
        self.environmentIdentifier = environmentIdentifier
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension MigrationHubRefactorSpacesClientTypes {
    /// The summary of the configuration for the URL endpoint type.
    public struct UrlEndpointSummary {
        /// The health check URL of the URL endpoint type. If the URL is a public endpoint, the HealthUrl must also be a public endpoint. If the URL is a private endpoint inside a virtual private cloud (VPC), the health URL must also be a private endpoint, and the host must be the same as the URL.
        public var healthUrl: Swift.String?
        /// The URL to route traffic to. The URL must be an [rfc3986-formatted URL](https://datatracker.ietf.org/doc/html/rfc3986). If the host is a domain name, the name must be resolvable over the public internet. If the scheme is https, the top level domain of the host must be listed in the [IANA root zone database](https://www.iana.org/domains/root/db).
        public var url: Swift.String?

        public init(
            healthUrl: Swift.String? = nil,
            url: Swift.String? = nil
        )
        {
            self.healthUrl = healthUrl
            self.url = url
        }
    }

}

extension MigrationHubRefactorSpacesClientTypes {
    /// A summary for the service as a response to ListServices.
    public struct ServiceSummary {
        /// The unique identifier of the application.
        public var applicationId: Swift.String?
        /// The Amazon Resource Name (ARN) of the service.
        public var arn: Swift.String?
        /// The Amazon Web Services account ID of the service creator.
        public var createdByAccountId: Swift.String?
        /// A timestamp that indicates when the service is created.
        public var createdTime: Foundation.Date?
        /// A description of the service.
        public var description: Swift.String?
        /// The endpoint type of the service.
        public var endpointType: MigrationHubRefactorSpacesClientTypes.ServiceEndpointType?
        /// The unique identifier of the environment.
        public var environmentId: Swift.String?
        /// Any error associated with the service resource.
        public var error: MigrationHubRefactorSpacesClientTypes.ErrorResponse?
        /// A summary of the configuration for the Lambda endpoint type.
        public var lambdaEndpoint: MigrationHubRefactorSpacesClientTypes.LambdaEndpointSummary?
        /// A timestamp that indicates when the service was last updated.
        public var lastUpdatedTime: Foundation.Date?
        /// The name of the service.
        public var name: Swift.String?
        /// The Amazon Web Services account ID of the service owner.
        public var ownerAccountId: Swift.String?
        /// The unique identifier of the service.
        public var serviceId: Swift.String?
        /// The current state of the service.
        public var state: MigrationHubRefactorSpacesClientTypes.ServiceState?
        /// The tags assigned to the service.
        public var tags: [Swift.String: Swift.String]?
        /// The summary of the configuration for the URL endpoint type.
        public var urlEndpoint: MigrationHubRefactorSpacesClientTypes.UrlEndpointSummary?
        /// The ID of the virtual private cloud (VPC).
        public var vpcId: Swift.String?

        public init(
            applicationId: Swift.String? = nil,
            arn: Swift.String? = nil,
            createdByAccountId: Swift.String? = nil,
            createdTime: Foundation.Date? = nil,
            description: Swift.String? = nil,
            endpointType: MigrationHubRefactorSpacesClientTypes.ServiceEndpointType? = nil,
            environmentId: Swift.String? = nil,
            error: MigrationHubRefactorSpacesClientTypes.ErrorResponse? = nil,
            lambdaEndpoint: MigrationHubRefactorSpacesClientTypes.LambdaEndpointSummary? = nil,
            lastUpdatedTime: Foundation.Date? = nil,
            name: Swift.String? = nil,
            ownerAccountId: Swift.String? = nil,
            serviceId: Swift.String? = nil,
            state: MigrationHubRefactorSpacesClientTypes.ServiceState? = nil,
            tags: [Swift.String: Swift.String]? = nil,
            urlEndpoint: MigrationHubRefactorSpacesClientTypes.UrlEndpointSummary? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.applicationId = applicationId
            self.arn = arn
            self.createdByAccountId = createdByAccountId
            self.createdTime = createdTime
            self.description = description
            self.endpointType = endpointType
            self.environmentId = environmentId
            self.error = error
            self.lambdaEndpoint = lambdaEndpoint
            self.lastUpdatedTime = lastUpdatedTime
            self.name = name
            self.ownerAccountId = ownerAccountId
            self.serviceId = serviceId
            self.state = state
            self.tags = tags
            self.urlEndpoint = urlEndpoint
            self.vpcId = vpcId
        }
    }

}

extension MigrationHubRefactorSpacesClientTypes.ServiceSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ServiceSummary(applicationId: \(Swift.String(describing: applicationId)), arn: \(Swift.String(describing: arn)), createdByAccountId: \(Swift.String(describing: createdByAccountId)), createdTime: \(Swift.String(describing: createdTime)), description: \(Swift.String(describing: description)), endpointType: \(Swift.String(describing: endpointType)), environmentId: \(Swift.String(describing: environmentId)), error: \(Swift.String(describing: error)), lambdaEndpoint: \(Swift.String(describing: lambdaEndpoint)), lastUpdatedTime: \(Swift.String(describing: lastUpdatedTime)), name: \(Swift.String(describing: name)), ownerAccountId: \(Swift.String(describing: ownerAccountId)), serviceId: \(Swift.String(describing: serviceId)), state: \(Swift.String(describing: state)), urlEndpoint: \(Swift.String(describing: urlEndpoint)), vpcId: \(Swift.String(describing: vpcId)), tags: \"CONTENT_REDACTED\")"}
}

public struct ListServicesOutput {
    /// The token for the next page of results.
    public var nextToken: Swift.String?
    /// The list of ServiceSummary objects.
    public var serviceSummaryList: [MigrationHubRefactorSpacesClientTypes.ServiceSummary]?

    public init(
        nextToken: Swift.String? = nil,
        serviceSummaryList: [MigrationHubRefactorSpacesClientTypes.ServiceSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.serviceSummaryList = serviceSummaryList
    }
}

public struct ListTagsForResourceInput {
    /// The Amazon Resource Name (ARN) of the resource.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct ListTagsForResourceOutput {
    /// The list of tags assigned to the resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

extension ListTagsForResourceOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTagsForResourceOutput(tags: \"CONTENT_REDACTED\")"}
}

public struct PutResourcePolicyInput {
    /// A JSON-formatted string for an Amazon Web Services resource-based policy.
    /// This member is required.
    public var policy: Swift.String?
    /// The Amazon Resource Name (ARN) of the resource to which the policy is being attached.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        policy: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.policy = policy
        self.resourceArn = resourceArn
    }
}

public struct PutResourcePolicyOutput {

    public init() { }
}

public struct TagResourceInput {
    /// The Amazon Resource Name (ARN) of the resource.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The new or modified tags for the resource.
    /// This member is required.
    public var tags: [Swift.String: Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

extension TagResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagResourceInput(resourceArn: \(Swift.String(describing: resourceArn)), tags: \"CONTENT_REDACTED\")"}
}

public struct TagResourceOutput {

    public init() { }
}

public struct UntagResourceInput {
    /// The Amazon Resource Name (ARN) of the resource.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The list of keys of the tags to be removed from the resource.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

extension UntagResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagResourceInput(resourceArn: \(Swift.String(describing: resourceArn)), tagKeys: \"CONTENT_REDACTED\")"}
}

public struct UntagResourceOutput {

    public init() { }
}

public struct UpdateRouteInput {
    /// If set to ACTIVE, traffic is forwarded to this route’s service after the route is updated.
    /// This member is required.
    public var activationState: MigrationHubRefactorSpacesClientTypes.RouteActivationState?
    /// The ID of the application within which the route is being updated.
    /// This member is required.
    public var applicationIdentifier: Swift.String?
    /// The ID of the environment in which the route is being updated.
    /// This member is required.
    public var environmentIdentifier: Swift.String?
    /// The unique identifier of the route to update.
    /// This member is required.
    public var routeIdentifier: Swift.String?

    public init(
        activationState: MigrationHubRefactorSpacesClientTypes.RouteActivationState? = nil,
        applicationIdentifier: Swift.String? = nil,
        environmentIdentifier: Swift.String? = nil,
        routeIdentifier: Swift.String? = nil
    )
    {
        self.activationState = activationState
        self.applicationIdentifier = applicationIdentifier
        self.environmentIdentifier = environmentIdentifier
        self.routeIdentifier = routeIdentifier
    }
}

public struct UpdateRouteOutput {
    /// The ID of the application in which the route is being updated.
    public var applicationId: Swift.String?
    /// The Amazon Resource Name (ARN) of the route. The format for this ARN is arn:aws:refactor-spaces:region:account-id:resource-type/resource-id . For more information about ARNs, see [ Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
    public var arn: Swift.String?
    /// A timestamp that indicates when the route was last updated.
    public var lastUpdatedTime: Foundation.Date?
    /// The unique identifier of the route.
    public var routeId: Swift.String?
    /// The ID of service in which the route was created. Traffic that matches this route is forwarded to this service.
    public var serviceId: Swift.String?
    /// The current state of the route.
    public var state: MigrationHubRefactorSpacesClientTypes.RouteState?

    public init(
        applicationId: Swift.String? = nil,
        arn: Swift.String? = nil,
        lastUpdatedTime: Foundation.Date? = nil,
        routeId: Swift.String? = nil,
        serviceId: Swift.String? = nil,
        state: MigrationHubRefactorSpacesClientTypes.RouteState? = nil
    )
    {
        self.applicationId = applicationId
        self.arn = arn
        self.lastUpdatedTime = lastUpdatedTime
        self.routeId = routeId
        self.serviceId = serviceId
        self.state = state
    }
}

extension CreateApplicationInput {

    static func urlPathProvider(_ value: CreateApplicationInput) -> Swift.String? {
        guard let environmentIdentifier = value.environmentIdentifier else {
            return nil
        }
        return "/environments/\(environmentIdentifier.urlPercentEncoding())/applications"
    }
}

extension CreateEnvironmentInput {

    static func urlPathProvider(_ value: CreateEnvironmentInput) -> Swift.String? {
        return "/environments"
    }
}

extension CreateRouteInput {

    static func urlPathProvider(_ value: CreateRouteInput) -> Swift.String? {
        guard let environmentIdentifier = value.environmentIdentifier else {
            return nil
        }
        guard let applicationIdentifier = value.applicationIdentifier else {
            return nil
        }
        return "/environments/\(environmentIdentifier.urlPercentEncoding())/applications/\(applicationIdentifier.urlPercentEncoding())/routes"
    }
}

extension CreateServiceInput {

    static func urlPathProvider(_ value: CreateServiceInput) -> Swift.String? {
        guard let environmentIdentifier = value.environmentIdentifier else {
            return nil
        }
        guard let applicationIdentifier = value.applicationIdentifier else {
            return nil
        }
        return "/environments/\(environmentIdentifier.urlPercentEncoding())/applications/\(applicationIdentifier.urlPercentEncoding())/services"
    }
}

extension DeleteApplicationInput {

    static func urlPathProvider(_ value: DeleteApplicationInput) -> Swift.String? {
        guard let environmentIdentifier = value.environmentIdentifier else {
            return nil
        }
        guard let applicationIdentifier = value.applicationIdentifier else {
            return nil
        }
        return "/environments/\(environmentIdentifier.urlPercentEncoding())/applications/\(applicationIdentifier.urlPercentEncoding())"
    }
}

extension DeleteEnvironmentInput {

    static func urlPathProvider(_ value: DeleteEnvironmentInput) -> Swift.String? {
        guard let environmentIdentifier = value.environmentIdentifier else {
            return nil
        }
        return "/environments/\(environmentIdentifier.urlPercentEncoding())"
    }
}

extension DeleteResourcePolicyInput {

    static func urlPathProvider(_ value: DeleteResourcePolicyInput) -> Swift.String? {
        guard let identifier = value.identifier else {
            return nil
        }
        return "/resourcepolicy/\(identifier.urlPercentEncoding())"
    }
}

extension DeleteRouteInput {

    static func urlPathProvider(_ value: DeleteRouteInput) -> Swift.String? {
        guard let environmentIdentifier = value.environmentIdentifier else {
            return nil
        }
        guard let applicationIdentifier = value.applicationIdentifier else {
            return nil
        }
        guard let routeIdentifier = value.routeIdentifier else {
            return nil
        }
        return "/environments/\(environmentIdentifier.urlPercentEncoding())/applications/\(applicationIdentifier.urlPercentEncoding())/routes/\(routeIdentifier.urlPercentEncoding())"
    }
}

extension DeleteServiceInput {

    static func urlPathProvider(_ value: DeleteServiceInput) -> Swift.String? {
        guard let environmentIdentifier = value.environmentIdentifier else {
            return nil
        }
        guard let applicationIdentifier = value.applicationIdentifier else {
            return nil
        }
        guard let serviceIdentifier = value.serviceIdentifier else {
            return nil
        }
        return "/environments/\(environmentIdentifier.urlPercentEncoding())/applications/\(applicationIdentifier.urlPercentEncoding())/services/\(serviceIdentifier.urlPercentEncoding())"
    }
}

extension GetApplicationInput {

    static func urlPathProvider(_ value: GetApplicationInput) -> Swift.String? {
        guard let environmentIdentifier = value.environmentIdentifier else {
            return nil
        }
        guard let applicationIdentifier = value.applicationIdentifier else {
            return nil
        }
        return "/environments/\(environmentIdentifier.urlPercentEncoding())/applications/\(applicationIdentifier.urlPercentEncoding())"
    }
}

extension GetEnvironmentInput {

    static func urlPathProvider(_ value: GetEnvironmentInput) -> Swift.String? {
        guard let environmentIdentifier = value.environmentIdentifier else {
            return nil
        }
        return "/environments/\(environmentIdentifier.urlPercentEncoding())"
    }
}

extension GetResourcePolicyInput {

    static func urlPathProvider(_ value: GetResourcePolicyInput) -> Swift.String? {
        guard let identifier = value.identifier else {
            return nil
        }
        return "/resourcepolicy/\(identifier.urlPercentEncoding())"
    }
}

extension GetRouteInput {

    static func urlPathProvider(_ value: GetRouteInput) -> Swift.String? {
        guard let environmentIdentifier = value.environmentIdentifier else {
            return nil
        }
        guard let applicationIdentifier = value.applicationIdentifier else {
            return nil
        }
        guard let routeIdentifier = value.routeIdentifier else {
            return nil
        }
        return "/environments/\(environmentIdentifier.urlPercentEncoding())/applications/\(applicationIdentifier.urlPercentEncoding())/routes/\(routeIdentifier.urlPercentEncoding())"
    }
}

extension GetServiceInput {

    static func urlPathProvider(_ value: GetServiceInput) -> Swift.String? {
        guard let environmentIdentifier = value.environmentIdentifier else {
            return nil
        }
        guard let applicationIdentifier = value.applicationIdentifier else {
            return nil
        }
        guard let serviceIdentifier = value.serviceIdentifier else {
            return nil
        }
        return "/environments/\(environmentIdentifier.urlPercentEncoding())/applications/\(applicationIdentifier.urlPercentEncoding())/services/\(serviceIdentifier.urlPercentEncoding())"
    }
}

extension ListApplicationsInput {

    static func urlPathProvider(_ value: ListApplicationsInput) -> Swift.String? {
        guard let environmentIdentifier = value.environmentIdentifier else {
            return nil
        }
        return "/environments/\(environmentIdentifier.urlPercentEncoding())/applications"
    }
}

extension ListApplicationsInput {

    static func queryItemProvider(_ value: ListApplicationsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListEnvironmentsInput {

    static func urlPathProvider(_ value: ListEnvironmentsInput) -> Swift.String? {
        return "/environments"
    }
}

extension ListEnvironmentsInput {

    static func queryItemProvider(_ value: ListEnvironmentsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListEnvironmentVpcsInput {

    static func urlPathProvider(_ value: ListEnvironmentVpcsInput) -> Swift.String? {
        guard let environmentIdentifier = value.environmentIdentifier else {
            return nil
        }
        return "/environments/\(environmentIdentifier.urlPercentEncoding())/vpcs"
    }
}

extension ListEnvironmentVpcsInput {

    static func queryItemProvider(_ value: ListEnvironmentVpcsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListRoutesInput {

    static func urlPathProvider(_ value: ListRoutesInput) -> Swift.String? {
        guard let environmentIdentifier = value.environmentIdentifier else {
            return nil
        }
        guard let applicationIdentifier = value.applicationIdentifier else {
            return nil
        }
        return "/environments/\(environmentIdentifier.urlPercentEncoding())/applications/\(applicationIdentifier.urlPercentEncoding())/routes"
    }
}

extension ListRoutesInput {

    static func queryItemProvider(_ value: ListRoutesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListServicesInput {

    static func urlPathProvider(_ value: ListServicesInput) -> Swift.String? {
        guard let environmentIdentifier = value.environmentIdentifier else {
            return nil
        }
        guard let applicationIdentifier = value.applicationIdentifier else {
            return nil
        }
        return "/environments/\(environmentIdentifier.urlPercentEncoding())/applications/\(applicationIdentifier.urlPercentEncoding())/services"
    }
}

extension ListServicesInput {

    static func queryItemProvider(_ value: ListServicesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension PutResourcePolicyInput {

    static func urlPathProvider(_ value: PutResourcePolicyInput) -> Swift.String? {
        return "/resourcepolicy"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func queryItemProvider(_ value: UntagResourceInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let tagKeys = value.tagKeys else {
            let message = "Creating a URL Query Item failed. tagKeys is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        tagKeys.forEach { queryItemValue in
            let queryItem = Smithy.URIQueryItem(name: "tagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
            items.append(queryItem)
        }
        return items
    }
}

extension UpdateRouteInput {

    static func urlPathProvider(_ value: UpdateRouteInput) -> Swift.String? {
        guard let environmentIdentifier = value.environmentIdentifier else {
            return nil
        }
        guard let applicationIdentifier = value.applicationIdentifier else {
            return nil
        }
        guard let routeIdentifier = value.routeIdentifier else {
            return nil
        }
        return "/environments/\(environmentIdentifier.urlPercentEncoding())/applications/\(applicationIdentifier.urlPercentEncoding())/routes/\(routeIdentifier.urlPercentEncoding())"
    }
}

extension CreateApplicationInput {

    static func write(value: CreateApplicationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ApiGatewayProxy"].write(value.apiGatewayProxy, with: MigrationHubRefactorSpacesClientTypes.ApiGatewayProxyInput.write(value:to:))
        try writer["ClientToken"].write(value.clientToken)
        try writer["Name"].write(value.name)
        try writer["ProxyType"].write(value.proxyType)
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["VpcId"].write(value.vpcId)
    }
}

extension CreateEnvironmentInput {

    static func write(value: CreateEnvironmentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientToken"].write(value.clientToken)
        try writer["Description"].write(value.description)
        try writer["Name"].write(value.name)
        try writer["NetworkFabricType"].write(value.networkFabricType)
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateRouteInput {

    static func write(value: CreateRouteInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientToken"].write(value.clientToken)
        try writer["DefaultRoute"].write(value.defaultRoute, with: MigrationHubRefactorSpacesClientTypes.DefaultRouteInput.write(value:to:))
        try writer["RouteType"].write(value.routeType)
        try writer["ServiceIdentifier"].write(value.serviceIdentifier)
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["UriPathRoute"].write(value.uriPathRoute, with: MigrationHubRefactorSpacesClientTypes.UriPathRouteInput.write(value:to:))
    }
}

extension CreateServiceInput {

    static func write(value: CreateServiceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientToken"].write(value.clientToken)
        try writer["Description"].write(value.description)
        try writer["EndpointType"].write(value.endpointType)
        try writer["LambdaEndpoint"].write(value.lambdaEndpoint, with: MigrationHubRefactorSpacesClientTypes.LambdaEndpointInput.write(value:to:))
        try writer["Name"].write(value.name)
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["UrlEndpoint"].write(value.urlEndpoint, with: MigrationHubRefactorSpacesClientTypes.UrlEndpointInput.write(value:to:))
        try writer["VpcId"].write(value.vpcId)
    }
}

extension PutResourcePolicyInput {

    static func write(value: PutResourcePolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Policy"].write(value.policy)
        try writer["ResourceArn"].write(value.resourceArn)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension UpdateRouteInput {

    static func write(value: UpdateRouteInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ActivationState"].write(value.activationState)
    }
}

extension CreateApplicationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateApplicationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateApplicationOutput()
        value.apiGatewayProxy = try reader["ApiGatewayProxy"].readIfPresent(with: MigrationHubRefactorSpacesClientTypes.ApiGatewayProxyInput.read(from:))
        value.applicationId = try reader["ApplicationId"].readIfPresent()
        value.arn = try reader["Arn"].readIfPresent()
        value.createdByAccountId = try reader["CreatedByAccountId"].readIfPresent()
        value.createdTime = try reader["CreatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.environmentId = try reader["EnvironmentId"].readIfPresent()
        value.lastUpdatedTime = try reader["LastUpdatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.name = try reader["Name"].readIfPresent()
        value.ownerAccountId = try reader["OwnerAccountId"].readIfPresent()
        value.proxyType = try reader["ProxyType"].readIfPresent()
        value.state = try reader["State"].readIfPresent()
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.vpcId = try reader["VpcId"].readIfPresent()
        return value
    }
}

extension CreateEnvironmentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateEnvironmentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateEnvironmentOutput()
        value.arn = try reader["Arn"].readIfPresent()
        value.createdTime = try reader["CreatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["Description"].readIfPresent()
        value.environmentId = try reader["EnvironmentId"].readIfPresent()
        value.lastUpdatedTime = try reader["LastUpdatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.name = try reader["Name"].readIfPresent()
        value.networkFabricType = try reader["NetworkFabricType"].readIfPresent()
        value.ownerAccountId = try reader["OwnerAccountId"].readIfPresent()
        value.state = try reader["State"].readIfPresent()
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension CreateRouteOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateRouteOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateRouteOutput()
        value.applicationId = try reader["ApplicationId"].readIfPresent()
        value.arn = try reader["Arn"].readIfPresent()
        value.createdByAccountId = try reader["CreatedByAccountId"].readIfPresent()
        value.createdTime = try reader["CreatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdatedTime = try reader["LastUpdatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.ownerAccountId = try reader["OwnerAccountId"].readIfPresent()
        value.routeId = try reader["RouteId"].readIfPresent()
        value.routeType = try reader["RouteType"].readIfPresent()
        value.serviceId = try reader["ServiceId"].readIfPresent()
        value.state = try reader["State"].readIfPresent()
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.uriPathRoute = try reader["UriPathRoute"].readIfPresent(with: MigrationHubRefactorSpacesClientTypes.UriPathRouteInput.read(from:))
        return value
    }
}

extension CreateServiceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateServiceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateServiceOutput()
        value.applicationId = try reader["ApplicationId"].readIfPresent()
        value.arn = try reader["Arn"].readIfPresent()
        value.createdByAccountId = try reader["CreatedByAccountId"].readIfPresent()
        value.createdTime = try reader["CreatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["Description"].readIfPresent()
        value.endpointType = try reader["EndpointType"].readIfPresent()
        value.environmentId = try reader["EnvironmentId"].readIfPresent()
        value.lambdaEndpoint = try reader["LambdaEndpoint"].readIfPresent(with: MigrationHubRefactorSpacesClientTypes.LambdaEndpointInput.read(from:))
        value.lastUpdatedTime = try reader["LastUpdatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.name = try reader["Name"].readIfPresent()
        value.ownerAccountId = try reader["OwnerAccountId"].readIfPresent()
        value.serviceId = try reader["ServiceId"].readIfPresent()
        value.state = try reader["State"].readIfPresent()
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.urlEndpoint = try reader["UrlEndpoint"].readIfPresent(with: MigrationHubRefactorSpacesClientTypes.UrlEndpointInput.read(from:))
        value.vpcId = try reader["VpcId"].readIfPresent()
        return value
    }
}

extension DeleteApplicationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteApplicationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteApplicationOutput()
        value.applicationId = try reader["ApplicationId"].readIfPresent()
        value.arn = try reader["Arn"].readIfPresent()
        value.environmentId = try reader["EnvironmentId"].readIfPresent()
        value.lastUpdatedTime = try reader["LastUpdatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.name = try reader["Name"].readIfPresent()
        value.state = try reader["State"].readIfPresent()
        return value
    }
}

extension DeleteEnvironmentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteEnvironmentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteEnvironmentOutput()
        value.arn = try reader["Arn"].readIfPresent()
        value.environmentId = try reader["EnvironmentId"].readIfPresent()
        value.lastUpdatedTime = try reader["LastUpdatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.name = try reader["Name"].readIfPresent()
        value.state = try reader["State"].readIfPresent()
        return value
    }
}

extension DeleteResourcePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteResourcePolicyOutput {
        return DeleteResourcePolicyOutput()
    }
}

extension DeleteRouteOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteRouteOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteRouteOutput()
        value.applicationId = try reader["ApplicationId"].readIfPresent()
        value.arn = try reader["Arn"].readIfPresent()
        value.lastUpdatedTime = try reader["LastUpdatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.routeId = try reader["RouteId"].readIfPresent()
        value.serviceId = try reader["ServiceId"].readIfPresent()
        value.state = try reader["State"].readIfPresent()
        return value
    }
}

extension DeleteServiceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteServiceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteServiceOutput()
        value.applicationId = try reader["ApplicationId"].readIfPresent()
        value.arn = try reader["Arn"].readIfPresent()
        value.environmentId = try reader["EnvironmentId"].readIfPresent()
        value.lastUpdatedTime = try reader["LastUpdatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.name = try reader["Name"].readIfPresent()
        value.serviceId = try reader["ServiceId"].readIfPresent()
        value.state = try reader["State"].readIfPresent()
        return value
    }
}

extension GetApplicationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetApplicationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetApplicationOutput()
        value.apiGatewayProxy = try reader["ApiGatewayProxy"].readIfPresent(with: MigrationHubRefactorSpacesClientTypes.ApiGatewayProxyConfig.read(from:))
        value.applicationId = try reader["ApplicationId"].readIfPresent()
        value.arn = try reader["Arn"].readIfPresent()
        value.createdByAccountId = try reader["CreatedByAccountId"].readIfPresent()
        value.createdTime = try reader["CreatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.environmentId = try reader["EnvironmentId"].readIfPresent()
        value.error = try reader["Error"].readIfPresent(with: MigrationHubRefactorSpacesClientTypes.ErrorResponse.read(from:))
        value.lastUpdatedTime = try reader["LastUpdatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.name = try reader["Name"].readIfPresent()
        value.ownerAccountId = try reader["OwnerAccountId"].readIfPresent()
        value.proxyType = try reader["ProxyType"].readIfPresent()
        value.state = try reader["State"].readIfPresent()
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.vpcId = try reader["VpcId"].readIfPresent()
        return value
    }
}

extension GetEnvironmentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetEnvironmentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetEnvironmentOutput()
        value.arn = try reader["Arn"].readIfPresent()
        value.createdTime = try reader["CreatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["Description"].readIfPresent()
        value.environmentId = try reader["EnvironmentId"].readIfPresent()
        value.error = try reader["Error"].readIfPresent(with: MigrationHubRefactorSpacesClientTypes.ErrorResponse.read(from:))
        value.lastUpdatedTime = try reader["LastUpdatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.name = try reader["Name"].readIfPresent()
        value.networkFabricType = try reader["NetworkFabricType"].readIfPresent()
        value.ownerAccountId = try reader["OwnerAccountId"].readIfPresent()
        value.state = try reader["State"].readIfPresent()
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.transitGatewayId = try reader["TransitGatewayId"].readIfPresent()
        return value
    }
}

extension GetResourcePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetResourcePolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetResourcePolicyOutput()
        value.policy = try reader["Policy"].readIfPresent()
        return value
    }
}

extension GetRouteOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetRouteOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetRouteOutput()
        value.appendSourcePath = try reader["AppendSourcePath"].readIfPresent()
        value.applicationId = try reader["ApplicationId"].readIfPresent()
        value.arn = try reader["Arn"].readIfPresent()
        value.createdByAccountId = try reader["CreatedByAccountId"].readIfPresent()
        value.createdTime = try reader["CreatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.environmentId = try reader["EnvironmentId"].readIfPresent()
        value.error = try reader["Error"].readIfPresent(with: MigrationHubRefactorSpacesClientTypes.ErrorResponse.read(from:))
        value.includeChildPaths = try reader["IncludeChildPaths"].readIfPresent()
        value.lastUpdatedTime = try reader["LastUpdatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.methods = try reader["Methods"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<MigrationHubRefactorSpacesClientTypes.HttpMethod>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.ownerAccountId = try reader["OwnerAccountId"].readIfPresent()
        value.pathResourceToId = try reader["PathResourceToId"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.routeId = try reader["RouteId"].readIfPresent()
        value.routeType = try reader["RouteType"].readIfPresent()
        value.serviceId = try reader["ServiceId"].readIfPresent()
        value.sourcePath = try reader["SourcePath"].readIfPresent()
        value.state = try reader["State"].readIfPresent()
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension GetServiceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetServiceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetServiceOutput()
        value.applicationId = try reader["ApplicationId"].readIfPresent()
        value.arn = try reader["Arn"].readIfPresent()
        value.createdByAccountId = try reader["CreatedByAccountId"].readIfPresent()
        value.createdTime = try reader["CreatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["Description"].readIfPresent()
        value.endpointType = try reader["EndpointType"].readIfPresent()
        value.environmentId = try reader["EnvironmentId"].readIfPresent()
        value.error = try reader["Error"].readIfPresent(with: MigrationHubRefactorSpacesClientTypes.ErrorResponse.read(from:))
        value.lambdaEndpoint = try reader["LambdaEndpoint"].readIfPresent(with: MigrationHubRefactorSpacesClientTypes.LambdaEndpointConfig.read(from:))
        value.lastUpdatedTime = try reader["LastUpdatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.name = try reader["Name"].readIfPresent()
        value.ownerAccountId = try reader["OwnerAccountId"].readIfPresent()
        value.serviceId = try reader["ServiceId"].readIfPresent()
        value.state = try reader["State"].readIfPresent()
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.urlEndpoint = try reader["UrlEndpoint"].readIfPresent(with: MigrationHubRefactorSpacesClientTypes.UrlEndpointConfig.read(from:))
        value.vpcId = try reader["VpcId"].readIfPresent()
        return value
    }
}

extension ListApplicationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListApplicationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListApplicationsOutput()
        value.applicationSummaryList = try reader["ApplicationSummaryList"].readListIfPresent(memberReadingClosure: MigrationHubRefactorSpacesClientTypes.ApplicationSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListEnvironmentsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListEnvironmentsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListEnvironmentsOutput()
        value.environmentSummaryList = try reader["EnvironmentSummaryList"].readListIfPresent(memberReadingClosure: MigrationHubRefactorSpacesClientTypes.EnvironmentSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListEnvironmentVpcsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListEnvironmentVpcsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListEnvironmentVpcsOutput()
        value.environmentVpcList = try reader["EnvironmentVpcList"].readListIfPresent(memberReadingClosure: MigrationHubRefactorSpacesClientTypes.EnvironmentVpc.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListRoutesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListRoutesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListRoutesOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.routeSummaryList = try reader["RouteSummaryList"].readListIfPresent(memberReadingClosure: MigrationHubRefactorSpacesClientTypes.RouteSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListServicesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListServicesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListServicesOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.serviceSummaryList = try reader["ServiceSummaryList"].readListIfPresent(memberReadingClosure: MigrationHubRefactorSpacesClientTypes.ServiceSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension PutResourcePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutResourcePolicyOutput {
        return PutResourcePolicyOutput()
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateRouteOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateRouteOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateRouteOutput()
        value.applicationId = try reader["ApplicationId"].readIfPresent()
        value.arn = try reader["Arn"].readIfPresent()
        value.lastUpdatedTime = try reader["LastUpdatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.routeId = try reader["RouteId"].readIfPresent()
        value.serviceId = try reader["ServiceId"].readIfPresent()
        value.state = try reader["State"].readIfPresent()
        return value
    }
}

enum CreateApplicationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateEnvironmentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateRouteOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateServiceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteApplicationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteEnvironmentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteResourcePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteRouteOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteServiceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetApplicationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetEnvironmentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetResourcePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetRouteOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetServiceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListApplicationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListEnvironmentsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListEnvironmentVpcsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListRoutesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListServicesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutResourcePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidResourcePolicyException": return try InvalidResourcePolicyException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateRouteOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ServiceQuotaExceededException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ServiceQuotaExceededException {
        let reader = baseError.errorBodyReader
        var value = ServiceQuotaExceededException()
        value.properties.message = try reader["Message"].readIfPresent() ?? ""
        value.properties.quotaCode = try reader["QuotaCode"].readIfPresent()
        value.properties.resourceId = try reader["ResourceId"].readIfPresent() ?? ""
        value.properties.resourceType = try reader["ResourceType"].readIfPresent() ?? ""
        value.properties.serviceCode = try reader["ServiceCode"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServerException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalServerException {
        let reader = baseError.errorBodyReader
        var value = InternalServerException()
        value.properties.message = try reader["Message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.message = try reader["Message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["Message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["Message"].readIfPresent() ?? ""
        value.properties.resourceId = try reader["ResourceId"].readIfPresent() ?? ""
        value.properties.resourceType = try reader["ResourceType"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent() ?? ""
        value.properties.resourceId = try reader["ResourceId"].readIfPresent() ?? ""
        value.properties.resourceType = try reader["ResourceType"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ThrottlingException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ThrottlingException {
        let reader = baseError.errorBodyReader
        let httpResponse = baseError.httpResponse
        var value = ThrottlingException()
        if let retryAfterSecondsHeaderValue = httpResponse.headers.value(for: "Retry-After") {
            value.properties.retryAfterSeconds = Swift.Int(retryAfterSecondsHeaderValue) ?? 0
        }
        value.properties.message = try reader["Message"].readIfPresent() ?? ""
        value.properties.quotaCode = try reader["QuotaCode"].readIfPresent()
        value.properties.serviceCode = try reader["ServiceCode"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidResourcePolicyException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InvalidResourcePolicyException {
        let reader = baseError.errorBodyReader
        var value = InvalidResourcePolicyException()
        value.properties.message = try reader["Message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension MigrationHubRefactorSpacesClientTypes.ApiGatewayProxyInput {

    static func write(value: MigrationHubRefactorSpacesClientTypes.ApiGatewayProxyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EndpointType"].write(value.endpointType)
        try writer["StageName"].write(value.stageName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MigrationHubRefactorSpacesClientTypes.ApiGatewayProxyInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MigrationHubRefactorSpacesClientTypes.ApiGatewayProxyInput()
        value.endpointType = try reader["EndpointType"].readIfPresent()
        value.stageName = try reader["StageName"].readIfPresent()
        return value
    }
}

extension MigrationHubRefactorSpacesClientTypes.UriPathRouteInput {

    static func write(value: MigrationHubRefactorSpacesClientTypes.UriPathRouteInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ActivationState"].write(value.activationState)
        try writer["AppendSourcePath"].write(value.appendSourcePath)
        try writer["IncludeChildPaths"].write(value.includeChildPaths)
        try writer["Methods"].writeList(value.methods, memberWritingClosure: SmithyReadWrite.WritingClosureBox<MigrationHubRefactorSpacesClientTypes.HttpMethod>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SourcePath"].write(value.sourcePath)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MigrationHubRefactorSpacesClientTypes.UriPathRouteInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MigrationHubRefactorSpacesClientTypes.UriPathRouteInput()
        value.sourcePath = try reader["SourcePath"].readIfPresent() ?? ""
        value.activationState = try reader["ActivationState"].readIfPresent() ?? .sdkUnknown("")
        value.methods = try reader["Methods"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<MigrationHubRefactorSpacesClientTypes.HttpMethod>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.includeChildPaths = try reader["IncludeChildPaths"].readIfPresent()
        value.appendSourcePath = try reader["AppendSourcePath"].readIfPresent()
        return value
    }
}

extension MigrationHubRefactorSpacesClientTypes.UrlEndpointInput {

    static func write(value: MigrationHubRefactorSpacesClientTypes.UrlEndpointInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HealthUrl"].write(value.healthUrl)
        try writer["Url"].write(value.url)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MigrationHubRefactorSpacesClientTypes.UrlEndpointInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MigrationHubRefactorSpacesClientTypes.UrlEndpointInput()
        value.url = try reader["Url"].readIfPresent() ?? ""
        value.healthUrl = try reader["HealthUrl"].readIfPresent()
        return value
    }
}

extension MigrationHubRefactorSpacesClientTypes.LambdaEndpointInput {

    static func write(value: MigrationHubRefactorSpacesClientTypes.LambdaEndpointInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Arn"].write(value.arn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MigrationHubRefactorSpacesClientTypes.LambdaEndpointInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MigrationHubRefactorSpacesClientTypes.LambdaEndpointInput()
        value.arn = try reader["Arn"].readIfPresent() ?? ""
        return value
    }
}

extension MigrationHubRefactorSpacesClientTypes.ApiGatewayProxyConfig {

    static func read(from reader: SmithyJSON.Reader) throws -> MigrationHubRefactorSpacesClientTypes.ApiGatewayProxyConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MigrationHubRefactorSpacesClientTypes.ApiGatewayProxyConfig()
        value.proxyUrl = try reader["ProxyUrl"].readIfPresent()
        value.apiGatewayId = try reader["ApiGatewayId"].readIfPresent()
        value.vpcLinkId = try reader["VpcLinkId"].readIfPresent()
        value.nlbArn = try reader["NlbArn"].readIfPresent()
        value.nlbName = try reader["NlbName"].readIfPresent()
        value.endpointType = try reader["EndpointType"].readIfPresent()
        value.stageName = try reader["StageName"].readIfPresent()
        return value
    }
}

extension MigrationHubRefactorSpacesClientTypes.ErrorResponse {

    static func read(from reader: SmithyJSON.Reader) throws -> MigrationHubRefactorSpacesClientTypes.ErrorResponse {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MigrationHubRefactorSpacesClientTypes.ErrorResponse()
        value.code = try reader["Code"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        value.accountId = try reader["AccountId"].readIfPresent()
        value.resourceIdentifier = try reader["ResourceIdentifier"].readIfPresent()
        value.resourceType = try reader["ResourceType"].readIfPresent()
        value.additionalDetails = try reader["AdditionalDetails"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension MigrationHubRefactorSpacesClientTypes.UrlEndpointConfig {

    static func read(from reader: SmithyJSON.Reader) throws -> MigrationHubRefactorSpacesClientTypes.UrlEndpointConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MigrationHubRefactorSpacesClientTypes.UrlEndpointConfig()
        value.url = try reader["Url"].readIfPresent()
        value.healthUrl = try reader["HealthUrl"].readIfPresent()
        return value
    }
}

extension MigrationHubRefactorSpacesClientTypes.LambdaEndpointConfig {

    static func read(from reader: SmithyJSON.Reader) throws -> MigrationHubRefactorSpacesClientTypes.LambdaEndpointConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MigrationHubRefactorSpacesClientTypes.LambdaEndpointConfig()
        value.arn = try reader["Arn"].readIfPresent()
        return value
    }
}

extension MigrationHubRefactorSpacesClientTypes.ApplicationSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> MigrationHubRefactorSpacesClientTypes.ApplicationSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MigrationHubRefactorSpacesClientTypes.ApplicationSummary()
        value.name = try reader["Name"].readIfPresent()
        value.arn = try reader["Arn"].readIfPresent()
        value.ownerAccountId = try reader["OwnerAccountId"].readIfPresent()
        value.createdByAccountId = try reader["CreatedByAccountId"].readIfPresent()
        value.applicationId = try reader["ApplicationId"].readIfPresent()
        value.environmentId = try reader["EnvironmentId"].readIfPresent()
        value.vpcId = try reader["VpcId"].readIfPresent()
        value.proxyType = try reader["ProxyType"].readIfPresent()
        value.apiGatewayProxy = try reader["ApiGatewayProxy"].readIfPresent(with: MigrationHubRefactorSpacesClientTypes.ApiGatewayProxySummary.read(from:))
        value.state = try reader["State"].readIfPresent()
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.error = try reader["Error"].readIfPresent(with: MigrationHubRefactorSpacesClientTypes.ErrorResponse.read(from:))
        value.lastUpdatedTime = try reader["LastUpdatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.createdTime = try reader["CreatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension MigrationHubRefactorSpacesClientTypes.ApiGatewayProxySummary {

    static func read(from reader: SmithyJSON.Reader) throws -> MigrationHubRefactorSpacesClientTypes.ApiGatewayProxySummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MigrationHubRefactorSpacesClientTypes.ApiGatewayProxySummary()
        value.proxyUrl = try reader["ProxyUrl"].readIfPresent()
        value.apiGatewayId = try reader["ApiGatewayId"].readIfPresent()
        value.vpcLinkId = try reader["VpcLinkId"].readIfPresent()
        value.nlbArn = try reader["NlbArn"].readIfPresent()
        value.nlbName = try reader["NlbName"].readIfPresent()
        value.endpointType = try reader["EndpointType"].readIfPresent()
        value.stageName = try reader["StageName"].readIfPresent()
        return value
    }
}

extension MigrationHubRefactorSpacesClientTypes.EnvironmentSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> MigrationHubRefactorSpacesClientTypes.EnvironmentSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MigrationHubRefactorSpacesClientTypes.EnvironmentSummary()
        value.name = try reader["Name"].readIfPresent()
        value.arn = try reader["Arn"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.environmentId = try reader["EnvironmentId"].readIfPresent()
        value.networkFabricType = try reader["NetworkFabricType"].readIfPresent()
        value.ownerAccountId = try reader["OwnerAccountId"].readIfPresent()
        value.transitGatewayId = try reader["TransitGatewayId"].readIfPresent()
        value.state = try reader["State"].readIfPresent()
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.error = try reader["Error"].readIfPresent(with: MigrationHubRefactorSpacesClientTypes.ErrorResponse.read(from:))
        value.lastUpdatedTime = try reader["LastUpdatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.createdTime = try reader["CreatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension MigrationHubRefactorSpacesClientTypes.EnvironmentVpc {

    static func read(from reader: SmithyJSON.Reader) throws -> MigrationHubRefactorSpacesClientTypes.EnvironmentVpc {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MigrationHubRefactorSpacesClientTypes.EnvironmentVpc()
        value.environmentId = try reader["EnvironmentId"].readIfPresent()
        value.vpcId = try reader["VpcId"].readIfPresent()
        value.accountId = try reader["AccountId"].readIfPresent()
        value.cidrBlocks = try reader["CidrBlocks"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.vpcName = try reader["VpcName"].readIfPresent()
        value.lastUpdatedTime = try reader["LastUpdatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.createdTime = try reader["CreatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension MigrationHubRefactorSpacesClientTypes.RouteSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> MigrationHubRefactorSpacesClientTypes.RouteSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MigrationHubRefactorSpacesClientTypes.RouteSummary()
        value.routeId = try reader["RouteId"].readIfPresent()
        value.arn = try reader["Arn"].readIfPresent()
        value.ownerAccountId = try reader["OwnerAccountId"].readIfPresent()
        value.createdByAccountId = try reader["CreatedByAccountId"].readIfPresent()
        value.routeType = try reader["RouteType"].readIfPresent()
        value.serviceId = try reader["ServiceId"].readIfPresent()
        value.applicationId = try reader["ApplicationId"].readIfPresent()
        value.environmentId = try reader["EnvironmentId"].readIfPresent()
        value.sourcePath = try reader["SourcePath"].readIfPresent()
        value.methods = try reader["Methods"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<MigrationHubRefactorSpacesClientTypes.HttpMethod>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.includeChildPaths = try reader["IncludeChildPaths"].readIfPresent()
        value.pathResourceToId = try reader["PathResourceToId"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.state = try reader["State"].readIfPresent()
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.error = try reader["Error"].readIfPresent(with: MigrationHubRefactorSpacesClientTypes.ErrorResponse.read(from:))
        value.lastUpdatedTime = try reader["LastUpdatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.createdTime = try reader["CreatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.appendSourcePath = try reader["AppendSourcePath"].readIfPresent()
        return value
    }
}

extension MigrationHubRefactorSpacesClientTypes.ServiceSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> MigrationHubRefactorSpacesClientTypes.ServiceSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MigrationHubRefactorSpacesClientTypes.ServiceSummary()
        value.serviceId = try reader["ServiceId"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.arn = try reader["Arn"].readIfPresent()
        value.ownerAccountId = try reader["OwnerAccountId"].readIfPresent()
        value.createdByAccountId = try reader["CreatedByAccountId"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.environmentId = try reader["EnvironmentId"].readIfPresent()
        value.applicationId = try reader["ApplicationId"].readIfPresent()
        value.vpcId = try reader["VpcId"].readIfPresent()
        value.endpointType = try reader["EndpointType"].readIfPresent()
        value.urlEndpoint = try reader["UrlEndpoint"].readIfPresent(with: MigrationHubRefactorSpacesClientTypes.UrlEndpointSummary.read(from:))
        value.lambdaEndpoint = try reader["LambdaEndpoint"].readIfPresent(with: MigrationHubRefactorSpacesClientTypes.LambdaEndpointSummary.read(from:))
        value.state = try reader["State"].readIfPresent()
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.error = try reader["Error"].readIfPresent(with: MigrationHubRefactorSpacesClientTypes.ErrorResponse.read(from:))
        value.lastUpdatedTime = try reader["LastUpdatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.createdTime = try reader["CreatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension MigrationHubRefactorSpacesClientTypes.LambdaEndpointSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> MigrationHubRefactorSpacesClientTypes.LambdaEndpointSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MigrationHubRefactorSpacesClientTypes.LambdaEndpointSummary()
        value.arn = try reader["Arn"].readIfPresent()
        return value
    }
}

extension MigrationHubRefactorSpacesClientTypes.UrlEndpointSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> MigrationHubRefactorSpacesClientTypes.UrlEndpointSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MigrationHubRefactorSpacesClientTypes.UrlEndpointSummary()
        value.url = try reader["Url"].readIfPresent()
        value.healthUrl = try reader["HealthUrl"].readIfPresent()
        return value
    }
}

extension MigrationHubRefactorSpacesClientTypes.DefaultRouteInput {

    static func write(value: MigrationHubRefactorSpacesClientTypes.DefaultRouteInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ActivationState"].write(value.activationState)
    }
}

public enum MigrationHubRefactorSpacesClientTypes {}
