// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MigrationHubRefactorSpacesClient {
    /// Paginate over `[ListApplicationsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListApplicationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListApplicationsOutput`
    public func listApplicationsPaginated(input: ListApplicationsInput) -> ClientRuntime.PaginatorSequence<ListApplicationsInput, ListApplicationsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListApplicationsInput, ListApplicationsOutput>(input: input, inputKey: \ListApplicationsInput.nextToken, outputKey: \ListApplicationsOutput.nextToken, paginationFunction: self.listApplications(input:))
=======
        return ClientRuntime.PaginatorSequence<ListApplicationsInput, ListApplicationsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listApplications(input:))
>>>>>>> main
    }
}

extension ListApplicationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListApplicationsInput {
        return ListApplicationsInput(
            environmentIdentifier: self.environmentIdentifier,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListApplicationsInput, Output == ListApplicationsOutput {
=======
extension PaginatorSequence where OperationStackInput == ListApplicationsInput, OperationStackOutput == ListApplicationsOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listApplicationsPaginated`
    /// to access the nested member `[MigrationHubRefactorSpacesClientTypes.ApplicationSummary]`
    /// - Returns: `[MigrationHubRefactorSpacesClientTypes.ApplicationSummary]`
    public func applicationSummaryList() async throws -> [MigrationHubRefactorSpacesClientTypes.ApplicationSummary] {
        return try await self.asyncCompactMap { item in item.applicationSummaryList }
    }
}
extension MigrationHubRefactorSpacesClient {
    /// Paginate over `[ListEnvironmentsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListEnvironmentsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListEnvironmentsOutput`
    public func listEnvironmentsPaginated(input: ListEnvironmentsInput) -> ClientRuntime.PaginatorSequence<ListEnvironmentsInput, ListEnvironmentsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListEnvironmentsInput, ListEnvironmentsOutput>(input: input, inputKey: \ListEnvironmentsInput.nextToken, outputKey: \ListEnvironmentsOutput.nextToken, paginationFunction: self.listEnvironments(input:))
=======
        return ClientRuntime.PaginatorSequence<ListEnvironmentsInput, ListEnvironmentsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listEnvironments(input:))
>>>>>>> main
    }
}

extension ListEnvironmentsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListEnvironmentsInput {
        return ListEnvironmentsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListEnvironmentsInput, Output == ListEnvironmentsOutput {
=======
extension PaginatorSequence where OperationStackInput == ListEnvironmentsInput, OperationStackOutput == ListEnvironmentsOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listEnvironmentsPaginated`
    /// to access the nested member `[MigrationHubRefactorSpacesClientTypes.EnvironmentSummary]`
    /// - Returns: `[MigrationHubRefactorSpacesClientTypes.EnvironmentSummary]`
    public func environmentSummaryList() async throws -> [MigrationHubRefactorSpacesClientTypes.EnvironmentSummary] {
        return try await self.asyncCompactMap { item in item.environmentSummaryList }
    }
}
extension MigrationHubRefactorSpacesClient {
    /// Paginate over `[ListEnvironmentVpcsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListEnvironmentVpcsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListEnvironmentVpcsOutput`
    public func listEnvironmentVpcsPaginated(input: ListEnvironmentVpcsInput) -> ClientRuntime.PaginatorSequence<ListEnvironmentVpcsInput, ListEnvironmentVpcsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListEnvironmentVpcsInput, ListEnvironmentVpcsOutput>(input: input, inputKey: \ListEnvironmentVpcsInput.nextToken, outputKey: \ListEnvironmentVpcsOutput.nextToken, paginationFunction: self.listEnvironmentVpcs(input:))
=======
        return ClientRuntime.PaginatorSequence<ListEnvironmentVpcsInput, ListEnvironmentVpcsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listEnvironmentVpcs(input:))
>>>>>>> main
    }
}

extension ListEnvironmentVpcsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListEnvironmentVpcsInput {
        return ListEnvironmentVpcsInput(
            environmentIdentifier: self.environmentIdentifier,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListEnvironmentVpcsInput, Output == ListEnvironmentVpcsOutput {
=======
extension PaginatorSequence where OperationStackInput == ListEnvironmentVpcsInput, OperationStackOutput == ListEnvironmentVpcsOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listEnvironmentVpcsPaginated`
    /// to access the nested member `[MigrationHubRefactorSpacesClientTypes.EnvironmentVpc]`
    /// - Returns: `[MigrationHubRefactorSpacesClientTypes.EnvironmentVpc]`
    public func environmentVpcList() async throws -> [MigrationHubRefactorSpacesClientTypes.EnvironmentVpc] {
        return try await self.asyncCompactMap { item in item.environmentVpcList }
    }
}
extension MigrationHubRefactorSpacesClient {
    /// Paginate over `[ListRoutesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListRoutesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListRoutesOutput`
    public func listRoutesPaginated(input: ListRoutesInput) -> ClientRuntime.PaginatorSequence<ListRoutesInput, ListRoutesOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListRoutesInput, ListRoutesOutput>(input: input, inputKey: \ListRoutesInput.nextToken, outputKey: \ListRoutesOutput.nextToken, paginationFunction: self.listRoutes(input:))
=======
        return ClientRuntime.PaginatorSequence<ListRoutesInput, ListRoutesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listRoutes(input:))
>>>>>>> main
    }
}

extension ListRoutesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListRoutesInput {
        return ListRoutesInput(
            applicationIdentifier: self.applicationIdentifier,
            environmentIdentifier: self.environmentIdentifier,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListRoutesInput, Output == ListRoutesOutput {
=======
extension PaginatorSequence where OperationStackInput == ListRoutesInput, OperationStackOutput == ListRoutesOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listRoutesPaginated`
    /// to access the nested member `[MigrationHubRefactorSpacesClientTypes.RouteSummary]`
    /// - Returns: `[MigrationHubRefactorSpacesClientTypes.RouteSummary]`
    public func routeSummaryList() async throws -> [MigrationHubRefactorSpacesClientTypes.RouteSummary] {
        return try await self.asyncCompactMap { item in item.routeSummaryList }
    }
}
extension MigrationHubRefactorSpacesClient {
    /// Paginate over `[ListServicesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListServicesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListServicesOutput`
    public func listServicesPaginated(input: ListServicesInput) -> ClientRuntime.PaginatorSequence<ListServicesInput, ListServicesOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListServicesInput, ListServicesOutput>(input: input, inputKey: \ListServicesInput.nextToken, outputKey: \ListServicesOutput.nextToken, paginationFunction: self.listServices(input:))
=======
        return ClientRuntime.PaginatorSequence<ListServicesInput, ListServicesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listServices(input:))
>>>>>>> main
    }
}

extension ListServicesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListServicesInput {
        return ListServicesInput(
            applicationIdentifier: self.applicationIdentifier,
            environmentIdentifier: self.environmentIdentifier,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListServicesInput, Output == ListServicesOutput {
=======
extension PaginatorSequence where OperationStackInput == ListServicesInput, OperationStackOutput == ListServicesOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listServicesPaginated`
    /// to access the nested member `[MigrationHubRefactorSpacesClientTypes.ServiceSummary]`
    /// - Returns: `[MigrationHubRefactorSpacesClientTypes.ServiceSummary]`
    public func serviceSummaryList() async throws -> [MigrationHubRefactorSpacesClientTypes.ServiceSummary] {
        return try await self.asyncCompactMap { item in item.serviceSummaryList }
    }
}
