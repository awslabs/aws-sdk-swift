//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum Smithy.ClientError
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.URIQueryItem
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox

/// You do not have sufficient access to perform this action. Access denied errors appear when Amazon Security Lake explicitly or implicitly denies an authorization request. An explicit denial occurs when a policy contains a Deny statement for the specific Amazon Web Services action. An implicit denial occurs when there is no applicable Deny statement and also no applicable Allow statement.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// A coded string to provide more information about the access denied exception. You can use the error code to check the exception type.
        public internal(set) var errorCode: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        errorCode: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.errorCode = errorCode
        self.properties.message = message
    }
}

extension SecurityLakeClientTypes {

    public enum AccessType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case lakeformation
        case s3
        case sdkUnknown(Swift.String)

        public static var allCases: [AccessType] {
            return [
                .lakeformation,
                .s3
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .lakeformation: return "LAKEFORMATION"
            case .s3: return "S3"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SecurityLakeClientTypes {

    /// The Amazon Web Services identity.
    public struct AwsIdentity: Swift.Sendable {
        /// The external ID used to establish trust relationship with the Amazon Web Services identity.
        /// This member is required.
        public var externalId: Swift.String?
        /// The Amazon Web Services identity principal.
        /// This member is required.
        public var principal: Swift.String?

        public init(
            externalId: Swift.String? = nil,
            principal: Swift.String? = nil
        )
        {
            self.externalId = externalId
            self.principal = principal
        }
    }
}

extension SecurityLakeClientTypes {

    public enum AwsLogSourceName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cloudTrailMgmt
        case eksAudit
        case lambdaExecution
        case route53
        case s3Data
        case shFindings
        case vpcFlow
        case waf
        case sdkUnknown(Swift.String)

        public static var allCases: [AwsLogSourceName] {
            return [
                .cloudTrailMgmt,
                .eksAudit,
                .lambdaExecution,
                .route53,
                .s3Data,
                .shFindings,
                .vpcFlow,
                .waf
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cloudTrailMgmt: return "CLOUD_TRAIL_MGMT"
            case .eksAudit: return "EKS_AUDIT"
            case .lambdaExecution: return "LAMBDA_EXECUTION"
            case .route53: return "ROUTE53"
            case .s3Data: return "S3_DATA"
            case .shFindings: return "SH_FINDINGS"
            case .vpcFlow: return "VPC_FLOW"
            case .waf: return "WAF"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SecurityLakeClientTypes {

    /// To add a natively-supported Amazon Web Services service as a log source, use these parameters to specify the configuration settings for the log source.
    public struct AwsLogSourceConfiguration: Swift.Sendable {
        /// Specify the Amazon Web Services account information where you want to enable Security Lake.
        public var accounts: [Swift.String]?
        /// Specify the Regions where you want to enable Security Lake.
        /// This member is required.
        public var regions: [Swift.String]?
        /// The name for a Amazon Web Services source.
        /// This member is required.
        public var sourceName: SecurityLakeClientTypes.AwsLogSourceName?
        /// The version for a Amazon Web Services source.
        public var sourceVersion: Swift.String?

        public init(
            accounts: [Swift.String]? = nil,
            regions: [Swift.String]? = nil,
            sourceName: SecurityLakeClientTypes.AwsLogSourceName? = nil,
            sourceVersion: Swift.String? = "latest"
        )
        {
            self.accounts = accounts
            self.regions = regions
            self.sourceName = sourceName
            self.sourceVersion = sourceVersion
        }
    }
}

extension SecurityLakeClientTypes {

    /// Amazon Security Lake can collect logs and events from natively-supported Amazon Web Services services.
    public struct AwsLogSourceResource: Swift.Sendable {
        /// The name for a Amazon Web Services source. This must be a Regionally unique value.
        public var sourceName: SecurityLakeClientTypes.AwsLogSourceName?
        /// The version for a Amazon Web Services source. This must be a Regionally unique value.
        public var sourceVersion: Swift.String?

        public init(
            sourceName: SecurityLakeClientTypes.AwsLogSourceName? = nil,
            sourceVersion: Swift.String? = nil
        )
        {
            self.sourceName = sourceName
            self.sourceVersion = sourceVersion
        }
    }
}

/// The request is malformed or contains an error such as an invalid parameter value or a missing required parameter.
public struct BadRequestException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "BadRequestException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Occurs when a conflict with a previous successful write is detected. This generally occurs when the previous write did not have time to propagate to the host serving the current request. A retry (with appropriate backoff logic) is the recommended response to this exception.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        /// The resource name.
        public internal(set) var resourceName: Swift.String? = nil
        /// The resource type.
        public internal(set) var resourceType: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        resourceName: Swift.String? = nil,
        resourceType: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.resourceName = resourceName
        self.properties.resourceType = resourceType
    }
}

/// Internal service exceptions are sometimes caused by transient issues. Before you start troubleshooting, perform the operation again.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { true }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The resource could not be found.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        /// The name of the resource that could not be found.
        public internal(set) var resourceName: Swift.String? = nil
        /// The type of the resource that could not be found.
        public internal(set) var resourceType: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        resourceName: Swift.String? = nil,
        resourceType: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.resourceName = resourceName
        self.properties.resourceType = resourceType
    }
}

/// The limit on the number of requests per second was exceeded.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        /// That the rate of requests to Security Lake is exceeding the request quotas for your Amazon Web Services account.
        public internal(set) var quotaCode: Swift.String? = nil
        /// Retry the request after the specified time.
        public internal(set) var retryAfterSeconds: Swift.Int? = nil
        /// The code for the service in Service Quotas.
        public internal(set) var serviceCode: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { true }
    public static var isThrottling: Swift.Bool { true }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        quotaCode: Swift.String? = nil,
        retryAfterSeconds: Swift.Int? = nil,
        serviceCode: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.quotaCode = quotaCode
        self.properties.retryAfterSeconds = retryAfterSeconds
        self.properties.serviceCode = serviceCode
    }
}

public struct CreateAwsLogSourceInput: Swift.Sendable {
    /// Specify the natively-supported Amazon Web Services service to add as a source in Security Lake.
    /// This member is required.
    public var sources: [SecurityLakeClientTypes.AwsLogSourceConfiguration]?

    public init(
        sources: [SecurityLakeClientTypes.AwsLogSourceConfiguration]? = nil
    )
    {
        self.sources = sources
    }
}

public struct CreateAwsLogSourceOutput: Swift.Sendable {
    /// Lists all accounts in which enabling a natively supported Amazon Web Services service as a Security Lake source failed. The failure occurred as these accounts are not part of an organization.
    public var failed: [Swift.String]?

    public init(
        failed: [Swift.String]? = nil
    )
    {
        self.failed = failed
    }
}

extension SecurityLakeClientTypes {

    /// The configuration used for the Glue Crawler for a third-party custom source.
    public struct CustomLogSourceCrawlerConfiguration: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role to be used by the Glue crawler. The recommended IAM policies are:
        ///
        /// * The managed policy AWSGlueServiceRole
        ///
        /// * A custom policy granting access to your Amazon S3 Data Lake
        /// This member is required.
        public var roleArn: Swift.String?

        public init(
            roleArn: Swift.String? = nil
        )
        {
            self.roleArn = roleArn
        }
    }
}

extension SecurityLakeClientTypes {

    /// The configuration used for the third-party custom source.
    public struct CustomLogSourceConfiguration: Swift.Sendable {
        /// The configuration used for the Glue Crawler for a third-party custom source.
        /// This member is required.
        public var crawlerConfiguration: SecurityLakeClientTypes.CustomLogSourceCrawlerConfiguration?
        /// The identity of the log provider for the third-party custom source.
        /// This member is required.
        public var providerIdentity: SecurityLakeClientTypes.AwsIdentity?

        public init(
            crawlerConfiguration: SecurityLakeClientTypes.CustomLogSourceCrawlerConfiguration? = nil,
            providerIdentity: SecurityLakeClientTypes.AwsIdentity? = nil
        )
        {
            self.crawlerConfiguration = crawlerConfiguration
            self.providerIdentity = providerIdentity
        }
    }
}

public struct CreateCustomLogSourceInput: Swift.Sendable {
    /// The configuration used for the third-party custom source.
    /// This member is required.
    public var configuration: SecurityLakeClientTypes.CustomLogSourceConfiguration?
    /// The Open Cybersecurity Schema Framework (OCSF) event classes which describes the type of data that the custom source will send to Security Lake. The supported event classes are:
    ///
    /// * ACCESS_ACTIVITY
    ///
    /// * FILE_ACTIVITY
    ///
    /// * KERNEL_ACTIVITY
    ///
    /// * KERNEL_EXTENSION
    ///
    /// * MEMORY_ACTIVITY
    ///
    /// * MODULE_ACTIVITY
    ///
    /// * PROCESS_ACTIVITY
    ///
    /// * REGISTRY_KEY_ACTIVITY
    ///
    /// * REGISTRY_VALUE_ACTIVITY
    ///
    /// * RESOURCE_ACTIVITY
    ///
    /// * SCHEDULED_JOB_ACTIVITY
    ///
    /// * SECURITY_FINDING
    ///
    /// * ACCOUNT_CHANGE
    ///
    /// * AUTHENTICATION
    ///
    /// * AUTHORIZATION
    ///
    /// * ENTITY_MANAGEMENT_AUDIT
    ///
    /// * DHCP_ACTIVITY
    ///
    /// * NETWORK_ACTIVITY
    ///
    /// * DNS_ACTIVITY
    ///
    /// * FTP_ACTIVITY
    ///
    /// * HTTP_ACTIVITY
    ///
    /// * RDP_ACTIVITY
    ///
    /// * SMB_ACTIVITY
    ///
    /// * SSH_ACTIVITY
    ///
    /// * CONFIG_STATE
    ///
    /// * INVENTORY_INFO
    ///
    /// * EMAIL_ACTIVITY
    ///
    /// * API_ACTIVITY
    ///
    /// * CLOUD_API
    public var eventClasses: [Swift.String]?
    /// Specify the name for a third-party custom source. This must be a Regionally unique value. The sourceName you enter here, is used in the LogProviderRole name which follows the convention AmazonSecurityLake-Provider-{name of the custom source}-{region}. You must use a CustomLogSource name that is shorter than or equal to 20 characters. This ensures that the LogProviderRole name is below the 64 character limit.
    /// This member is required.
    public var sourceName: Swift.String?
    /// Specify the source version for the third-party custom source, to limit log collection to a specific version of custom data source.
    public var sourceVersion: Swift.String?

    public init(
        configuration: SecurityLakeClientTypes.CustomLogSourceConfiguration? = nil,
        eventClasses: [Swift.String]? = nil,
        sourceName: Swift.String? = nil,
        sourceVersion: Swift.String? = nil
    )
    {
        self.configuration = configuration
        self.eventClasses = eventClasses
        self.sourceName = sourceName
        self.sourceVersion = sourceVersion
    }
}

extension SecurityLakeClientTypes {

    /// The attributes of a third-party custom source.
    public struct CustomLogSourceAttributes: Swift.Sendable {
        /// The ARN of the Glue crawler.
        public var crawlerArn: Swift.String?
        /// The ARN of the Glue database where results are written, such as: arn:aws:daylight:us-east-1::database/sometable/*.
        public var databaseArn: Swift.String?
        /// The ARN of the Glue table.
        public var tableArn: Swift.String?

        public init(
            crawlerArn: Swift.String? = nil,
            databaseArn: Swift.String? = nil,
            tableArn: Swift.String? = nil
        )
        {
            self.crawlerArn = crawlerArn
            self.databaseArn = databaseArn
            self.tableArn = tableArn
        }
    }
}

extension SecurityLakeClientTypes {

    /// The details of the log provider for a third-party custom source.
    public struct CustomLogSourceProvider: Swift.Sendable {
        /// The location of the partition in the Amazon S3 bucket for Security Lake.
        public var location: Swift.String?
        /// The ARN of the IAM role to be used by the entity putting logs into your custom source partition. Security Lake will apply the correct access policies to this role, but you must first manually create the trust policy for this role. The IAM role name must start with the text 'Security Lake'. The IAM role must trust the logProviderAccountId to assume the role.
        public var roleArn: Swift.String?

        public init(
            location: Swift.String? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.location = location
            self.roleArn = roleArn
        }
    }
}

extension SecurityLakeClientTypes {

    /// Amazon Security Lake can collect logs and events from third-party custom sources.
    public struct CustomLogSourceResource: Swift.Sendable {
        /// The attributes of a third-party custom source.
        public var attributes: SecurityLakeClientTypes.CustomLogSourceAttributes?
        /// The details of the log provider for a third-party custom source.
        public var provider: SecurityLakeClientTypes.CustomLogSourceProvider?
        /// The name for a third-party custom source. This must be a Regionally unique value.
        public var sourceName: Swift.String?
        /// The version for a third-party custom source. This must be a Regionally unique value.
        public var sourceVersion: Swift.String?

        public init(
            attributes: SecurityLakeClientTypes.CustomLogSourceAttributes? = nil,
            provider: SecurityLakeClientTypes.CustomLogSourceProvider? = nil,
            sourceName: Swift.String? = nil,
            sourceVersion: Swift.String? = nil
        )
        {
            self.attributes = attributes
            self.provider = provider
            self.sourceName = sourceName
            self.sourceVersion = sourceVersion
        }
    }
}

public struct CreateCustomLogSourceOutput: Swift.Sendable {
    /// The third-party custom source that was created.
    public var source: SecurityLakeClientTypes.CustomLogSourceResource?

    public init(
        source: SecurityLakeClientTypes.CustomLogSourceResource? = nil
    )
    {
        self.source = source
    }
}

extension SecurityLakeClientTypes {

    /// Provides encryption details of Amazon Security Lake object.
    public struct DataLakeEncryptionConfiguration: Swift.Sendable {
        /// The identifier of KMS encryption key used by Amazon Security Lake to encrypt the Security Lake object.
        public var kmsKeyId: Swift.String?

        public init(
            kmsKeyId: Swift.String? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
        }
    }
}

extension SecurityLakeClientTypes {

    /// Provide expiration lifecycle details of Amazon Security Lake object.
    public struct DataLakeLifecycleExpiration: Swift.Sendable {
        /// Number of days before data expires in the Amazon Security Lake object.
        public var days: Swift.Int?

        public init(
            days: Swift.Int? = nil
        )
        {
            self.days = days
        }
    }
}

extension SecurityLakeClientTypes {

    /// Provide transition lifecycle details of Amazon Security Lake object.
    public struct DataLakeLifecycleTransition: Swift.Sendable {
        /// Number of days before data transitions to a different S3 Storage Class in the Amazon Security Lake object.
        public var days: Swift.Int?
        /// The range of storage classes that you can choose from based on the data access, resiliency, and cost requirements of your workloads.
        public var storageClass: Swift.String?

        public init(
            days: Swift.Int? = nil,
            storageClass: Swift.String? = nil
        )
        {
            self.days = days
            self.storageClass = storageClass
        }
    }
}

extension SecurityLakeClientTypes {

    /// Provides lifecycle details of Amazon Security Lake object.
    public struct DataLakeLifecycleConfiguration: Swift.Sendable {
        /// Provides data expiration details of Amazon Security Lake object.
        public var expiration: SecurityLakeClientTypes.DataLakeLifecycleExpiration?
        /// Provides data storage transition details of Amazon Security Lake object.
        public var transitions: [SecurityLakeClientTypes.DataLakeLifecycleTransition]?

        public init(
            expiration: SecurityLakeClientTypes.DataLakeLifecycleExpiration? = nil,
            transitions: [SecurityLakeClientTypes.DataLakeLifecycleTransition]? = nil
        )
        {
            self.expiration = expiration
            self.transitions = transitions
        }
    }
}

extension SecurityLakeClientTypes {

    /// Provides replication details for objects stored in the Amazon Security Lake data lake.
    public struct DataLakeReplicationConfiguration: Swift.Sendable {
        /// Specifies one or more centralized rollup Regions. The Amazon Web Services Region specified in the region parameter of the [CreateDataLake](https://docs.aws.amazon.com/security-lake/latest/APIReference/API_CreateDataLake.html) or [UpdateDataLake](https://docs.aws.amazon.com/security-lake/latest/APIReference/API_UpdateDataLake.html) operations contributes data to the rollup Region or Regions specified in this parameter. Replication enables automatic, asynchronous copying of objects across Amazon S3 buckets. S3 buckets that are configured for object replication can be owned by the same Amazon Web Services account or by different accounts. You can replicate objects to a single destination bucket or to multiple destination buckets. The destination buckets can be in different Regions or within the same Region as the source bucket.
        public var regions: [Swift.String]?
        /// Replication settings for the Amazon S3 buckets. This parameter uses the Identity and Access Management (IAM) role you created that is managed by Security Lake, to ensure the replication setting is correct.
        public var roleArn: Swift.String?

        public init(
            regions: [Swift.String]? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.regions = regions
            self.roleArn = roleArn
        }
    }
}

extension SecurityLakeClientTypes {

    /// Provides details of Amazon Security Lake object.
    public struct DataLakeConfiguration: Swift.Sendable {
        /// Provides encryption details of Amazon Security Lake object.
        public var encryptionConfiguration: SecurityLakeClientTypes.DataLakeEncryptionConfiguration?
        /// Provides lifecycle details of Amazon Security Lake object.
        public var lifecycleConfiguration: SecurityLakeClientTypes.DataLakeLifecycleConfiguration?
        /// The Amazon Web Services Regions where Security Lake is automatically enabled.
        /// This member is required.
        public var region: Swift.String?
        /// Provides replication details of Amazon Security Lake object.
        public var replicationConfiguration: SecurityLakeClientTypes.DataLakeReplicationConfiguration?

        public init(
            encryptionConfiguration: SecurityLakeClientTypes.DataLakeEncryptionConfiguration? = nil,
            lifecycleConfiguration: SecurityLakeClientTypes.DataLakeLifecycleConfiguration? = nil,
            region: Swift.String? = nil,
            replicationConfiguration: SecurityLakeClientTypes.DataLakeReplicationConfiguration? = nil
        )
        {
            self.encryptionConfiguration = encryptionConfiguration
            self.lifecycleConfiguration = lifecycleConfiguration
            self.region = region
            self.replicationConfiguration = replicationConfiguration
        }
    }
}

extension SecurityLakeClientTypes {

    /// A tag is a label that you can define and associate with Amazon Web Services resources, including certain types of Amazon Security Lake resources. Tags can help you identify, categorize, and manage resources in different ways, such as by owner, environment, or other criteria. You can associate tags with the following types of Security Lake resources: subscribers, and the data lake configuration for your Amazon Web Services account in individual Amazon Web Services Regions. A resource can have up to 50 tags. Each tag consists of a required tag key and an associated tag value. A tag key is a general label that acts as a category for a more specific tag value. Each tag key must be unique and it can have only one tag value. A tag value acts as a descriptor for a tag key. Tag keys and values are case sensitive. They can contain letters, numbers, spaces, or the following symbols: _ . : / = + @ - For more information, see [Tagging Amazon Security Lake resources](https://docs.aws.amazon.com/security-lake/latest/userguide/tagging-resources.html) in the Amazon Security Lake User Guide.
    public struct Tag: Swift.Sendable {
        /// The name of the tag. This is a general label that acts as a category for a more specific tag value (value).
        /// This member is required.
        public var key: Swift.String?
        /// The value that’s associated with the specified tag key (key). This value acts as a descriptor for the tag key. A tag value cannot be null, but it can be an empty string.
        /// This member is required.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }
}

public struct CreateDataLakeInput: Swift.Sendable {
    /// Specify the Region or Regions that will contribute data to the rollup region.
    /// This member is required.
    public var configurations: [SecurityLakeClientTypes.DataLakeConfiguration]?
    /// The Amazon Resource Name (ARN) used to create and update the Glue table. This table contains partitions generated by the ingestion and normalization of Amazon Web Services log sources and custom sources.
    /// This member is required.
    public var metaStoreManagerRoleArn: Swift.String?
    /// An array of objects, one for each tag to associate with the data lake configuration. For each tag, you must specify both a tag key and a tag value. A tag value cannot be null, but it can be an empty string.
    public var tags: [SecurityLakeClientTypes.Tag]?

    public init(
        configurations: [SecurityLakeClientTypes.DataLakeConfiguration]? = nil,
        metaStoreManagerRoleArn: Swift.String? = nil,
        tags: [SecurityLakeClientTypes.Tag]? = nil
    )
    {
        self.configurations = configurations
        self.metaStoreManagerRoleArn = metaStoreManagerRoleArn
        self.tags = tags
    }
}

extension SecurityLakeClientTypes {

    public enum DataLakeStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case failed
        case initialized
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [DataLakeStatus] {
            return [
                .completed,
                .failed,
                .initialized,
                .pending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .initialized: return "INITIALIZED"
            case .pending: return "PENDING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SecurityLakeClientTypes {

    /// The details of the last UpdateDataLake or DeleteDataLake API request which failed.
    public struct DataLakeUpdateException: Swift.Sendable {
        /// The reason code for the exception of the last UpdateDataLake or DeleteDataLake API request.
        public var code: Swift.String?
        /// The reason for the exception of the last UpdateDataLakeor DeleteDataLake API request.
        public var reason: Swift.String?

        public init(
            code: Swift.String? = nil,
            reason: Swift.String? = nil
        )
        {
            self.code = code
            self.reason = reason
        }
    }
}

extension SecurityLakeClientTypes {

    /// The status of the last UpdateDataLake or DeleteDataLake API request. This is set to Completed after the configuration is updated, or removed if deletion of the data lake is successful.
    public struct DataLakeUpdateStatus: Swift.Sendable {
        /// The details of the last UpdateDataLakeor DeleteDataLake API request which failed.
        public var exception: SecurityLakeClientTypes.DataLakeUpdateException?
        /// The unique ID for the last UpdateDataLake or DeleteDataLake API request.
        public var requestId: Swift.String?
        /// The status of the last UpdateDataLake or DeleteDataLake API request that was requested.
        public var status: SecurityLakeClientTypes.DataLakeStatus?

        public init(
            exception: SecurityLakeClientTypes.DataLakeUpdateException? = nil,
            requestId: Swift.String? = nil,
            status: SecurityLakeClientTypes.DataLakeStatus? = nil
        )
        {
            self.exception = exception
            self.requestId = requestId
            self.status = status
        }
    }
}

extension SecurityLakeClientTypes {

    /// Provides details of Amazon Security Lake object.
    public struct DataLakeResource: Swift.Sendable {
        /// Retrieves the status of the CreateDatalake API call for an account in Amazon Security Lake.
        public var createStatus: SecurityLakeClientTypes.DataLakeStatus?
        /// The Amazon Resource Name (ARN) created by you to provide to the subscriber. For more information about ARNs and how to use them in policies, see the [Amazon Security Lake User Guide](https://docs.aws.amazon.com/security-lake/latest/userguide/subscriber-management.html).
        /// This member is required.
        public var dataLakeArn: Swift.String?
        /// Provides encryption details of Amazon Security Lake object.
        public var encryptionConfiguration: SecurityLakeClientTypes.DataLakeEncryptionConfiguration?
        /// Provides lifecycle details of Amazon Security Lake object.
        public var lifecycleConfiguration: SecurityLakeClientTypes.DataLakeLifecycleConfiguration?
        /// The Amazon Web Services Regions where Security Lake is enabled.
        /// This member is required.
        public var region: Swift.String?
        /// Provides replication details of Amazon Security Lake object.
        public var replicationConfiguration: SecurityLakeClientTypes.DataLakeReplicationConfiguration?
        /// The ARN for the Amazon Security Lake Amazon S3 bucket.
        public var s3BucketArn: Swift.String?
        /// The status of the last UpdateDataLake or DeleteDataLake API request.
        public var updateStatus: SecurityLakeClientTypes.DataLakeUpdateStatus?

        public init(
            createStatus: SecurityLakeClientTypes.DataLakeStatus? = nil,
            dataLakeArn: Swift.String? = nil,
            encryptionConfiguration: SecurityLakeClientTypes.DataLakeEncryptionConfiguration? = nil,
            lifecycleConfiguration: SecurityLakeClientTypes.DataLakeLifecycleConfiguration? = nil,
            region: Swift.String? = nil,
            replicationConfiguration: SecurityLakeClientTypes.DataLakeReplicationConfiguration? = nil,
            s3BucketArn: Swift.String? = nil,
            updateStatus: SecurityLakeClientTypes.DataLakeUpdateStatus? = nil
        )
        {
            self.createStatus = createStatus
            self.dataLakeArn = dataLakeArn
            self.encryptionConfiguration = encryptionConfiguration
            self.lifecycleConfiguration = lifecycleConfiguration
            self.region = region
            self.replicationConfiguration = replicationConfiguration
            self.s3BucketArn = s3BucketArn
            self.updateStatus = updateStatus
        }
    }
}

public struct CreateDataLakeOutput: Swift.Sendable {
    /// The created Security Lake configuration object.
    public var dataLakes: [SecurityLakeClientTypes.DataLakeResource]?

    public init(
        dataLakes: [SecurityLakeClientTypes.DataLakeResource]? = nil
    )
    {
        self.dataLakes = dataLakes
    }
}

public struct CreateDataLakeExceptionSubscriptionInput: Swift.Sendable {
    /// The expiration period and time-to-live (TTL). It is the duration of time until which the exception message remains.
    public var exceptionTimeToLive: Swift.Int?
    /// The Amazon Web Services account where you want to receive exception notifications.
    /// This member is required.
    public var notificationEndpoint: Swift.String?
    /// The subscription protocol to which exception notifications are posted.
    /// This member is required.
    public var subscriptionProtocol: Swift.String?

    public init(
        exceptionTimeToLive: Swift.Int? = nil,
        notificationEndpoint: Swift.String? = nil,
        subscriptionProtocol: Swift.String? = nil
    )
    {
        self.exceptionTimeToLive = exceptionTimeToLive
        self.notificationEndpoint = notificationEndpoint
        self.subscriptionProtocol = subscriptionProtocol
    }
}

public struct CreateDataLakeExceptionSubscriptionOutput: Swift.Sendable {

    public init() { }
}

extension SecurityLakeClientTypes {

    /// Automatically enable new organization accounts as member accounts from an Amazon Security Lake administrator account.
    public struct DataLakeAutoEnableNewAccountConfiguration: Swift.Sendable {
        /// The Amazon Web Services Regions where Security Lake is automatically enabled.
        /// This member is required.
        public var region: Swift.String?
        /// The Amazon Web Services sources that are automatically enabled in Security Lake.
        /// This member is required.
        public var sources: [SecurityLakeClientTypes.AwsLogSourceResource]?

        public init(
            region: Swift.String? = nil,
            sources: [SecurityLakeClientTypes.AwsLogSourceResource]? = nil
        )
        {
            self.region = region
            self.sources = sources
        }
    }
}

public struct CreateDataLakeOrganizationConfigurationInput: Swift.Sendable {
    /// Enable Security Lake with the specified configuration settings, to begin collecting security data for new accounts in your organization.
    public var autoEnableNewAccount: [SecurityLakeClientTypes.DataLakeAutoEnableNewAccountConfiguration]?

    public init(
        autoEnableNewAccount: [SecurityLakeClientTypes.DataLakeAutoEnableNewAccountConfiguration]? = nil
    )
    {
        self.autoEnableNewAccount = autoEnableNewAccount
    }
}

public struct CreateDataLakeOrganizationConfigurationOutput: Swift.Sendable {

    public init() { }
}

extension SecurityLakeClientTypes {

    /// The supported source types from which logs and events are collected in Amazon Security Lake. For a list of supported Amazon Web Services services, see the [Amazon Security Lake User Guide](https://docs.aws.amazon.com/security-lake/latest/userguide/internal-sources.html).
    public enum LogSourceResource: Swift.Sendable {
        /// Amazon Security Lake supports log and event collection for natively supported Amazon Web Services services. For more information, see the [Amazon Security Lake User Guide](https://docs.aws.amazon.com/security-lake/latest/userguide/internal-sources.html).
        case awslogsource(SecurityLakeClientTypes.AwsLogSourceResource)
        /// Amazon Security Lake supports custom source types. For more information, see the [Amazon Security Lake User Guide](https://docs.aws.amazon.com/security-lake/latest/userguide/custom-sources.html).
        case customlogsource(SecurityLakeClientTypes.CustomLogSourceResource)
        case sdkUnknown(Swift.String)
    }
}

public struct CreateSubscriberInput: Swift.Sendable {
    /// The Amazon S3 or Lake Formation access type.
    public var accessTypes: [SecurityLakeClientTypes.AccessType]?
    /// The supported Amazon Web Services services from which logs and events are collected. Security Lake supports log and event collection for natively supported Amazon Web Services services.
    /// This member is required.
    public var sources: [SecurityLakeClientTypes.LogSourceResource]?
    /// The description for your subscriber account in Security Lake.
    public var subscriberDescription: Swift.String?
    /// The Amazon Web Services identity used to access your data.
    /// This member is required.
    public var subscriberIdentity: SecurityLakeClientTypes.AwsIdentity?
    /// The name of your Security Lake subscriber account.
    /// This member is required.
    public var subscriberName: Swift.String?
    /// An array of objects, one for each tag to associate with the subscriber. For each tag, you must specify both a tag key and a tag value. A tag value cannot be null, but it can be an empty string.
    public var tags: [SecurityLakeClientTypes.Tag]?

    public init(
        accessTypes: [SecurityLakeClientTypes.AccessType]? = nil,
        sources: [SecurityLakeClientTypes.LogSourceResource]? = nil,
        subscriberDescription: Swift.String? = nil,
        subscriberIdentity: SecurityLakeClientTypes.AwsIdentity? = nil,
        subscriberName: Swift.String? = nil,
        tags: [SecurityLakeClientTypes.Tag]? = nil
    )
    {
        self.accessTypes = accessTypes
        self.sources = sources
        self.subscriberDescription = subscriberDescription
        self.subscriberIdentity = subscriberIdentity
        self.subscriberName = subscriberName
        self.tags = tags
    }
}

extension SecurityLakeClientTypes {

    public enum SubscriberStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case deactivated
        case pending
        case ready
        case sdkUnknown(Swift.String)

        public static var allCases: [SubscriberStatus] {
            return [
                .active,
                .deactivated,
                .pending,
                .ready
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .deactivated: return "DEACTIVATED"
            case .pending: return "PENDING"
            case .ready: return "READY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SecurityLakeClientTypes {

    /// Provides details about the Amazon Security Lake account subscription. Subscribers are notified of new objects for a source as the data is written to your Amazon S3 bucket for Security Lake.
    public struct SubscriberResource: Swift.Sendable {
        /// You can choose to notify subscribers of new objects with an Amazon Simple Queue Service (Amazon SQS) queue or through messaging to an HTTPS endpoint provided by the subscriber. Subscribers can consume data by directly querying Lake Formation tables in your Amazon S3 bucket through services like Amazon Athena. This subscription type is defined as LAKEFORMATION.
        public var accessTypes: [SecurityLakeClientTypes.AccessType]?
        /// The date and time when the subscriber was created.
        public var createdAt: Foundation.Date?
        /// The Amazon Resource Name (ARN) which uniquely defines the Amazon Web Services RAM resource share. Before accepting the RAM resource share invitation, you can view details related to the RAM resource share. This field is available only for Lake Formation subscribers created after March 8, 2023.
        public var resourceShareArn: Swift.String?
        /// The name of the resource share.
        public var resourceShareName: Swift.String?
        /// The Amazon Resource Name (ARN) specifying the role of the subscriber.
        public var roleArn: Swift.String?
        /// The ARN for the Amazon S3 bucket.
        public var s3BucketArn: Swift.String?
        /// Amazon Security Lake supports log and event collection for natively supported Amazon Web Services services. For more information, see the [Amazon Security Lake User Guide](https://docs.aws.amazon.com/security-lake/latest/userguide/source-management.html).
        /// This member is required.
        public var sources: [SecurityLakeClientTypes.LogSourceResource]?
        /// The subscriber ARN of the Amazon Security Lake subscriber account.
        /// This member is required.
        public var subscriberArn: Swift.String?
        /// The subscriber descriptions for a subscriber account. The description for a subscriber includes subscriberName, accountID, externalID, and subscriberId.
        public var subscriberDescription: Swift.String?
        /// The subscriber endpoint to which exception messages are posted.
        public var subscriberEndpoint: Swift.String?
        /// The subscriber ID of the Amazon Security Lake subscriber account.
        /// This member is required.
        public var subscriberId: Swift.String?
        /// The Amazon Web Services identity used to access your data.
        /// This member is required.
        public var subscriberIdentity: SecurityLakeClientTypes.AwsIdentity?
        /// The name of your Amazon Security Lake subscriber account.
        /// This member is required.
        public var subscriberName: Swift.String?
        /// The subscriber status of the Amazon Security Lake subscriber account.
        public var subscriberStatus: SecurityLakeClientTypes.SubscriberStatus?
        /// The date and time when the subscriber was last updated.
        public var updatedAt: Foundation.Date?

        public init(
            accessTypes: [SecurityLakeClientTypes.AccessType]? = nil,
            createdAt: Foundation.Date? = nil,
            resourceShareArn: Swift.String? = nil,
            resourceShareName: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            s3BucketArn: Swift.String? = nil,
            sources: [SecurityLakeClientTypes.LogSourceResource]? = nil,
            subscriberArn: Swift.String? = nil,
            subscriberDescription: Swift.String? = nil,
            subscriberEndpoint: Swift.String? = nil,
            subscriberId: Swift.String? = nil,
            subscriberIdentity: SecurityLakeClientTypes.AwsIdentity? = nil,
            subscriberName: Swift.String? = nil,
            subscriberStatus: SecurityLakeClientTypes.SubscriberStatus? = nil,
            updatedAt: Foundation.Date? = nil
        )
        {
            self.accessTypes = accessTypes
            self.createdAt = createdAt
            self.resourceShareArn = resourceShareArn
            self.resourceShareName = resourceShareName
            self.roleArn = roleArn
            self.s3BucketArn = s3BucketArn
            self.sources = sources
            self.subscriberArn = subscriberArn
            self.subscriberDescription = subscriberDescription
            self.subscriberEndpoint = subscriberEndpoint
            self.subscriberId = subscriberId
            self.subscriberIdentity = subscriberIdentity
            self.subscriberName = subscriberName
            self.subscriberStatus = subscriberStatus
            self.updatedAt = updatedAt
        }
    }
}

public struct CreateSubscriberOutput: Swift.Sendable {
    /// Retrieve information about the subscriber created using the CreateSubscriber API.
    public var subscriber: SecurityLakeClientTypes.SubscriberResource?

    public init(
        subscriber: SecurityLakeClientTypes.SubscriberResource? = nil
    )
    {
        self.subscriber = subscriber
    }
}

extension SecurityLakeClientTypes {

    public enum HttpMethod: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case post
        case put
        case sdkUnknown(Swift.String)

        public static var allCases: [HttpMethod] {
            return [
                .post,
                .put
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .post: return "POST"
            case .put: return "PUT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SecurityLakeClientTypes {

    /// The configurations used for HTTPS subscriber notification.
    public struct HttpsNotificationConfiguration: Swift.Sendable {
        /// The key name for the notification subscription.
        public var authorizationApiKeyName: Swift.String?
        /// The key value for the notification subscription.
        public var authorizationApiKeyValue: Swift.String?
        /// The subscription endpoint in Security Lake. If you prefer notification with an HTTPs endpoint, populate this field.
        /// This member is required.
        public var endpoint: Swift.String?
        /// The HTTPS method used for the notification subscription.
        public var httpMethod: SecurityLakeClientTypes.HttpMethod?
        /// The Amazon Resource Name (ARN) of the EventBridge API destinations IAM role that you created. For more information about ARNs and how to use them in policies, see [Managing data access](https://docs.aws.amazon.com//security-lake/latest/userguide/subscriber-data-access.html) and [Amazon Web Services Managed Policies](https://docs.aws.amazon.com/security-lake/latest/userguide/security-iam-awsmanpol.html) in the Amazon Security Lake User Guide.
        /// This member is required.
        public var targetRoleArn: Swift.String?

        public init(
            authorizationApiKeyName: Swift.String? = nil,
            authorizationApiKeyValue: Swift.String? = nil,
            endpoint: Swift.String? = nil,
            httpMethod: SecurityLakeClientTypes.HttpMethod? = nil,
            targetRoleArn: Swift.String? = nil
        )
        {
            self.authorizationApiKeyName = authorizationApiKeyName
            self.authorizationApiKeyValue = authorizationApiKeyValue
            self.endpoint = endpoint
            self.httpMethod = httpMethod
            self.targetRoleArn = targetRoleArn
        }
    }
}

extension SecurityLakeClientTypes {

    /// The configurations used for EventBridge subscriber notification.
    public struct SqsNotificationConfiguration: Swift.Sendable {

        public init() { }
    }
}

extension SecurityLakeClientTypes {

    /// Specify the configurations you want to use for subscriber notification to notify the subscriber when new data is written to the data lake for sources that the subscriber consumes in Security Lake.
    public enum NotificationConfiguration: Swift.Sendable {
        /// The configurations for SQS subscriber notification.
        case sqsnotificationconfiguration(SecurityLakeClientTypes.SqsNotificationConfiguration)
        /// The configurations used for HTTPS subscriber notification.
        case httpsnotificationconfiguration(SecurityLakeClientTypes.HttpsNotificationConfiguration)
        case sdkUnknown(Swift.String)
    }
}

public struct CreateSubscriberNotificationInput: Swift.Sendable {
    /// Specify the configuration using which you want to create the subscriber notification.
    /// This member is required.
    public var configuration: SecurityLakeClientTypes.NotificationConfiguration?
    /// The subscriber ID for the notification subscription.
    /// This member is required.
    public var subscriberId: Swift.String?

    public init(
        configuration: SecurityLakeClientTypes.NotificationConfiguration? = nil,
        subscriberId: Swift.String? = nil
    )
    {
        self.configuration = configuration
        self.subscriberId = subscriberId
    }
}

public struct CreateSubscriberNotificationOutput: Swift.Sendable {
    /// The subscriber endpoint to which exception messages are posted.
    public var subscriberEndpoint: Swift.String?

    public init(
        subscriberEndpoint: Swift.String? = nil
    )
    {
        self.subscriberEndpoint = subscriberEndpoint
    }
}

public struct DeleteAwsLogSourceInput: Swift.Sendable {
    /// Specify the natively-supported Amazon Web Services service to remove as a source in Security Lake.
    /// This member is required.
    public var sources: [SecurityLakeClientTypes.AwsLogSourceConfiguration]?

    public init(
        sources: [SecurityLakeClientTypes.AwsLogSourceConfiguration]? = nil
    )
    {
        self.sources = sources
    }
}

public struct DeleteAwsLogSourceOutput: Swift.Sendable {
    /// Deletion of the Amazon Web Services sources failed as the account is not a part of the organization.
    public var failed: [Swift.String]?

    public init(
        failed: [Swift.String]? = nil
    )
    {
        self.failed = failed
    }
}

public struct DeleteCustomLogSourceInput: Swift.Sendable {
    /// The source name of custom log source that you want to delete.
    /// This member is required.
    public var sourceName: Swift.String?
    /// The source version for the third-party custom source. You can limit the custom source removal to the specified source version.
    public var sourceVersion: Swift.String?

    public init(
        sourceName: Swift.String? = nil,
        sourceVersion: Swift.String? = nil
    )
    {
        self.sourceName = sourceName
        self.sourceVersion = sourceVersion
    }
}

public struct DeleteCustomLogSourceOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteDataLakeInput: Swift.Sendable {
    /// The list of Regions where Security Lake is enabled.
    /// This member is required.
    public var regions: [Swift.String]?

    public init(
        regions: [Swift.String]? = nil
    )
    {
        self.regions = regions
    }
}

public struct DeleteDataLakeOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteDataLakeOrganizationConfigurationInput: Swift.Sendable {
    /// Turns off automatic enablement of Security Lake for member accounts that are added to an organization.
    public var autoEnableNewAccount: [SecurityLakeClientTypes.DataLakeAutoEnableNewAccountConfiguration]?

    public init(
        autoEnableNewAccount: [SecurityLakeClientTypes.DataLakeAutoEnableNewAccountConfiguration]? = nil
    )
    {
        self.autoEnableNewAccount = autoEnableNewAccount
    }
}

public struct DeleteDataLakeOrganizationConfigurationOutput: Swift.Sendable {

    public init() { }
}

public struct GetDataLakeOrganizationConfigurationInput: Swift.Sendable {

    public init() { }
}

public struct GetDataLakeOrganizationConfigurationOutput: Swift.Sendable {
    /// The configuration used for new accounts in Security Lake.
    public var autoEnableNewAccount: [SecurityLakeClientTypes.DataLakeAutoEnableNewAccountConfiguration]?

    public init(
        autoEnableNewAccount: [SecurityLakeClientTypes.DataLakeAutoEnableNewAccountConfiguration]? = nil
    )
    {
        self.autoEnableNewAccount = autoEnableNewAccount
    }
}

public struct GetDataLakeSourcesInput: Swift.Sendable {
    /// The Amazon Web Services account ID for which a static snapshot of the current Amazon Web Services Region, including enabled accounts and log sources, is retrieved.
    public var accounts: [Swift.String]?
    /// The maximum limit of accounts for which the static snapshot of the current Region, including enabled accounts and log sources, is retrieved.
    public var maxResults: Swift.Int?
    /// Lists if there are more results available. The value of nextToken is a unique pagination token for each page. Repeat the call using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.
    public var nextToken: Swift.String?

    public init(
        accounts: [Swift.String]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.accounts = accounts
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension SecurityLakeClientTypes {

    public enum SourceCollectionStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case collecting
        case misconfigured
        case notCollecting
        case sdkUnknown(Swift.String)

        public static var allCases: [SourceCollectionStatus] {
            return [
                .collecting,
                .misconfigured,
                .notCollecting
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .collecting: return "COLLECTING"
            case .misconfigured: return "MISCONFIGURED"
            case .notCollecting: return "NOT_COLLECTING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SecurityLakeClientTypes {

    /// Retrieves the Logs status for the Amazon Security Lake account.
    public struct DataLakeSourceStatus: Swift.Sendable {
        /// Defines path the stored logs are available which has information on your systems, applications, and services.
        public var resource: Swift.String?
        /// The health status of services, including error codes and patterns.
        public var status: SecurityLakeClientTypes.SourceCollectionStatus?

        public init(
            resource: Swift.String? = nil,
            status: SecurityLakeClientTypes.SourceCollectionStatus? = nil
        )
        {
            self.resource = resource
            self.status = status
        }
    }
}

extension SecurityLakeClientTypes {

    /// Amazon Security Lake collects logs and events from supported Amazon Web Services services and custom sources. For the list of supported Amazon Web Services services, see the [Amazon Security Lake User Guide](https://docs.aws.amazon.com/security-lake/latest/userguide/internal-sources.html).
    public struct DataLakeSource: Swift.Sendable {
        /// The ID of the Security Lake account for which logs are collected.
        public var account: Swift.String?
        /// The Open Cybersecurity Schema Framework (OCSF) event classes which describes the type of data that the custom source will send to Security Lake. The supported event classes are:
        ///
        /// * ACCESS_ACTIVITY
        ///
        /// * FILE_ACTIVITY
        ///
        /// * KERNEL_ACTIVITY
        ///
        /// * KERNEL_EXTENSION
        ///
        /// * MEMORY_ACTIVITY
        ///
        /// * MODULE_ACTIVITY
        ///
        /// * PROCESS_ACTIVITY
        ///
        /// * REGISTRY_KEY_ACTIVITY
        ///
        /// * REGISTRY_VALUE_ACTIVITY
        ///
        /// * RESOURCE_ACTIVITY
        ///
        /// * SCHEDULED_JOB_ACTIVITY
        ///
        /// * SECURITY_FINDING
        ///
        /// * ACCOUNT_CHANGE
        ///
        /// * AUTHENTICATION
        ///
        /// * AUTHORIZATION
        ///
        /// * ENTITY_MANAGEMENT_AUDIT
        ///
        /// * DHCP_ACTIVITY
        ///
        /// * NETWORK_ACTIVITY
        ///
        /// * DNS_ACTIVITY
        ///
        /// * FTP_ACTIVITY
        ///
        /// * HTTP_ACTIVITY
        ///
        /// * RDP_ACTIVITY
        ///
        /// * SMB_ACTIVITY
        ///
        /// * SSH_ACTIVITY
        ///
        /// * CONFIG_STATE
        ///
        /// * INVENTORY_INFO
        ///
        /// * EMAIL_ACTIVITY
        ///
        /// * API_ACTIVITY
        ///
        /// * CLOUD_API
        public var eventClasses: [Swift.String]?
        /// The supported Amazon Web Services services from which logs and events are collected. Amazon Security Lake supports log and event collection for natively supported Amazon Web Services services.
        public var sourceName: Swift.String?
        /// The log status for the Security Lake account.
        public var sourceStatuses: [SecurityLakeClientTypes.DataLakeSourceStatus]?

        public init(
            account: Swift.String? = nil,
            eventClasses: [Swift.String]? = nil,
            sourceName: Swift.String? = nil,
            sourceStatuses: [SecurityLakeClientTypes.DataLakeSourceStatus]? = nil
        )
        {
            self.account = account
            self.eventClasses = eventClasses
            self.sourceName = sourceName
            self.sourceStatuses = sourceStatuses
        }
    }
}

public struct GetDataLakeSourcesOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) created by you to provide to the subscriber. For more information about ARNs and how to use them in policies, see the [Amazon Security Lake User Guide](https://docs.aws.amazon.com/security-lake/latest/userguide/subscriber-management.html).
    public var dataLakeArn: Swift.String?
    /// The list of enabled accounts and enabled sources.
    public var dataLakeSources: [SecurityLakeClientTypes.DataLakeSource]?
    /// Lists if there are more results available. The value of nextToken is a unique pagination token for each page. Repeat the call using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.
    public var nextToken: Swift.String?

    public init(
        dataLakeArn: Swift.String? = nil,
        dataLakeSources: [SecurityLakeClientTypes.DataLakeSource]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.dataLakeArn = dataLakeArn
        self.dataLakeSources = dataLakeSources
        self.nextToken = nextToken
    }
}

public struct ListDataLakesInput: Swift.Sendable {
    /// The list of Regions where Security Lake is enabled.
    public var regions: [Swift.String]?

    public init(
        regions: [Swift.String]? = nil
    )
    {
        self.regions = regions
    }
}

public struct ListDataLakesOutput: Swift.Sendable {
    /// Retrieves the Security Lake configuration object.
    public var dataLakes: [SecurityLakeClientTypes.DataLakeResource]?

    public init(
        dataLakes: [SecurityLakeClientTypes.DataLakeResource]? = nil
    )
    {
        self.dataLakes = dataLakes
    }
}

public struct ListLogSourcesInput: Swift.Sendable {
    /// The list of Amazon Web Services accounts for which log sources are displayed.
    public var accounts: [Swift.String]?
    /// The maximum number of accounts for which the log sources are displayed.
    public var maxResults: Swift.Int?
    /// If nextToken is returned, there are more results available. You can repeat the call using the returned token to retrieve the next page.
    public var nextToken: Swift.String?
    /// The list of Regions for which log sources are displayed.
    public var regions: [Swift.String]?
    /// The list of sources for which log sources are displayed.
    public var sources: [SecurityLakeClientTypes.LogSourceResource]?

    public init(
        accounts: [Swift.String]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        regions: [Swift.String]? = nil,
        sources: [SecurityLakeClientTypes.LogSourceResource]? = nil
    )
    {
        self.accounts = accounts
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.regions = regions
        self.sources = sources
    }
}

extension SecurityLakeClientTypes {

    /// Amazon Security Lake can collect logs and events from natively-supported Amazon Web Services services and custom sources.
    public struct LogSource: Swift.Sendable {
        /// Specify the account from which you want to collect logs.
        public var account: Swift.String?
        /// Specify the Regions from which you want to collect logs.
        public var region: Swift.String?
        /// Specify the sources from which you want to collect logs.
        public var sources: [SecurityLakeClientTypes.LogSourceResource]?

        public init(
            account: Swift.String? = nil,
            region: Swift.String? = nil,
            sources: [SecurityLakeClientTypes.LogSourceResource]? = nil
        )
        {
            self.account = account
            self.region = region
            self.sources = sources
        }
    }
}

public struct ListLogSourcesOutput: Swift.Sendable {
    /// If nextToken is returned, there are more results available. You can repeat the call using the returned token to retrieve the next page.
    public var nextToken: Swift.String?
    /// The list of log sources in your organization that send data to the data lake.
    public var sources: [SecurityLakeClientTypes.LogSource]?

    public init(
        nextToken: Swift.String? = nil,
        sources: [SecurityLakeClientTypes.LogSource]? = nil
    )
    {
        self.nextToken = nextToken
        self.sources = sources
    }
}

public struct UpdateDataLakeInput: Swift.Sendable {
    /// Specifies the Region or Regions that will contribute data to the rollup region.
    /// This member is required.
    public var configurations: [SecurityLakeClientTypes.DataLakeConfiguration]?
    /// The Amazon Resource Name (ARN) used to create and update the Glue table. This table contains partitions generated by the ingestion and normalization of Amazon Web Services log sources and custom sources.
    public var metaStoreManagerRoleArn: Swift.String?

    public init(
        configurations: [SecurityLakeClientTypes.DataLakeConfiguration]? = nil,
        metaStoreManagerRoleArn: Swift.String? = nil
    )
    {
        self.configurations = configurations
        self.metaStoreManagerRoleArn = metaStoreManagerRoleArn
    }
}

public struct UpdateDataLakeOutput: Swift.Sendable {
    /// The created Security Lake configuration object.
    public var dataLakes: [SecurityLakeClientTypes.DataLakeResource]?

    public init(
        dataLakes: [SecurityLakeClientTypes.DataLakeResource]? = nil
    )
    {
        self.dataLakes = dataLakes
    }
}

extension SecurityLakeClientTypes {

    /// The details for an Amazon Security Lake exception.
    public struct DataLakeException: Swift.Sendable {
        /// The underlying exception of a Security Lake exception.
        public var exception: Swift.String?
        /// The Amazon Web Services Regions where the exception occurred.
        public var region: Swift.String?
        /// List of all remediation steps for a Security Lake exception.
        public var remediation: Swift.String?
        /// This error can occur if you configure the wrong timestamp format, or if the subset of entries used for validation had errors or missing values.
        public var timestamp: Foundation.Date?

        public init(
            exception: Swift.String? = nil,
            region: Swift.String? = nil,
            remediation: Swift.String? = nil,
            timestamp: Foundation.Date? = nil
        )
        {
            self.exception = exception
            self.region = region
            self.remediation = remediation
            self.timestamp = timestamp
        }
    }
}

public struct DeleteDataLakeExceptionSubscriptionInput: Swift.Sendable {

    public init() { }
}

public struct DeleteDataLakeExceptionSubscriptionOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteSubscriberInput: Swift.Sendable {
    /// A value created by Security Lake that uniquely identifies your DeleteSubscriber API request.
    /// This member is required.
    public var subscriberId: Swift.String?

    public init(
        subscriberId: Swift.String? = nil
    )
    {
        self.subscriberId = subscriberId
    }
}

public struct DeleteSubscriberOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteSubscriberNotificationInput: Swift.Sendable {
    /// The ID of the Security Lake subscriber account.
    /// This member is required.
    public var subscriberId: Swift.String?

    public init(
        subscriberId: Swift.String? = nil
    )
    {
        self.subscriberId = subscriberId
    }
}

public struct DeleteSubscriberNotificationOutput: Swift.Sendable {

    public init() { }
}

public struct DeregisterDataLakeDelegatedAdministratorInput: Swift.Sendable {

    public init() { }
}

public struct DeregisterDataLakeDelegatedAdministratorOutput: Swift.Sendable {

    public init() { }
}

public struct GetDataLakeExceptionSubscriptionInput: Swift.Sendable {

    public init() { }
}

public struct GetDataLakeExceptionSubscriptionOutput: Swift.Sendable {
    /// The expiration period and time-to-live (TTL). It is the duration of time until which the exception message remains.
    public var exceptionTimeToLive: Swift.Int?
    /// The Amazon Web Services account where you receive exception notifications.
    public var notificationEndpoint: Swift.String?
    /// The subscription protocol to which exception notifications are posted.
    public var subscriptionProtocol: Swift.String?

    public init(
        exceptionTimeToLive: Swift.Int? = nil,
        notificationEndpoint: Swift.String? = nil,
        subscriptionProtocol: Swift.String? = nil
    )
    {
        self.exceptionTimeToLive = exceptionTimeToLive
        self.notificationEndpoint = notificationEndpoint
        self.subscriptionProtocol = subscriptionProtocol
    }
}

public struct GetSubscriberInput: Swift.Sendable {
    /// A value created by Amazon Security Lake that uniquely identifies your GetSubscriber API request.
    /// This member is required.
    public var subscriberId: Swift.String?

    public init(
        subscriberId: Swift.String? = nil
    )
    {
        self.subscriberId = subscriberId
    }
}

public struct GetSubscriberOutput: Swift.Sendable {
    /// The subscriber information for the specified subscriber ID.
    public var subscriber: SecurityLakeClientTypes.SubscriberResource?

    public init(
        subscriber: SecurityLakeClientTypes.SubscriberResource? = nil
    )
    {
        self.subscriber = subscriber
    }
}

public struct ListDataLakeExceptionsInput: Swift.Sendable {
    /// Lists the maximum number of failures in Security Lake.
    public var maxResults: Swift.Int?
    /// Lists if there are more results available. The value of nextToken is a unique pagination token for each page. Repeat the call using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.
    public var nextToken: Swift.String?
    /// The Amazon Web Services Regions from which exceptions are retrieved.
    public var regions: [Swift.String]?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        regions: [Swift.String]? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.regions = regions
    }
}

public struct ListDataLakeExceptionsOutput: Swift.Sendable {
    /// Lists the failures that cannot be retried.
    public var exceptions: [SecurityLakeClientTypes.DataLakeException]?
    /// Lists if there are more results available. The value of nextToken is a unique pagination token for each page. Repeat the call using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.
    public var nextToken: Swift.String?

    public init(
        exceptions: [SecurityLakeClientTypes.DataLakeException]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.exceptions = exceptions
        self.nextToken = nextToken
    }
}

public struct ListSubscribersInput: Swift.Sendable {
    /// The maximum number of accounts for which the configuration is displayed.
    public var maxResults: Swift.Int?
    /// If nextToken is returned, there are more results available. You can repeat the call using the returned token to retrieve the next page.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListSubscribersOutput: Swift.Sendable {
    /// If nextToken is returned, there are more results available. You can repeat the call using the returned token to retrieve the next page.
    public var nextToken: Swift.String?
    /// The subscribers available for the specified Security Lake account ID.
    public var subscribers: [SecurityLakeClientTypes.SubscriberResource]?

    public init(
        nextToken: Swift.String? = nil,
        subscribers: [SecurityLakeClientTypes.SubscriberResource]? = nil
    )
    {
        self.nextToken = nextToken
        self.subscribers = subscribers
    }
}

public struct ListTagsForResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the Amazon Security Lake resource for which you want to retrieve the tags.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct ListTagsForResourceOutput: Swift.Sendable {
    /// An array of objects, one for each tag (key and value) that’s associated with the Amazon Security Lake resource.
    public var tags: [SecurityLakeClientTypes.Tag]?

    public init(
        tags: [SecurityLakeClientTypes.Tag]? = nil
    )
    {
        self.tags = tags
    }
}

public struct RegisterDataLakeDelegatedAdministratorInput: Swift.Sendable {
    /// The Amazon Web Services account ID of the Security Lake delegated administrator.
    /// This member is required.
    public var accountId: Swift.String?

    public init(
        accountId: Swift.String? = nil
    )
    {
        self.accountId = accountId
    }
}

public struct RegisterDataLakeDelegatedAdministratorOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateSubscriberInput: Swift.Sendable {
    /// The supported Amazon Web Services services from which logs and events are collected. For the list of supported Amazon Web Services services, see the [Amazon Security Lake User Guide](https://docs.aws.amazon.com/security-lake/latest/userguide/internal-sources.html).
    public var sources: [SecurityLakeClientTypes.LogSourceResource]?
    /// The description of the Security Lake account subscriber.
    public var subscriberDescription: Swift.String?
    /// A value created by Security Lake that uniquely identifies your subscription.
    /// This member is required.
    public var subscriberId: Swift.String?
    /// The Amazon Web Services identity used to access your data.
    public var subscriberIdentity: SecurityLakeClientTypes.AwsIdentity?
    /// The name of the Security Lake account subscriber.
    public var subscriberName: Swift.String?

    public init(
        sources: [SecurityLakeClientTypes.LogSourceResource]? = nil,
        subscriberDescription: Swift.String? = nil,
        subscriberId: Swift.String? = nil,
        subscriberIdentity: SecurityLakeClientTypes.AwsIdentity? = nil,
        subscriberName: Swift.String? = nil
    )
    {
        self.sources = sources
        self.subscriberDescription = subscriberDescription
        self.subscriberId = subscriberId
        self.subscriberIdentity = subscriberIdentity
        self.subscriberName = subscriberName
    }
}

public struct UpdateSubscriberOutput: Swift.Sendable {
    /// The updated subscriber information.
    public var subscriber: SecurityLakeClientTypes.SubscriberResource?

    public init(
        subscriber: SecurityLakeClientTypes.SubscriberResource? = nil
    )
    {
        self.subscriber = subscriber
    }
}

public struct UpdateSubscriberNotificationInput: Swift.Sendable {
    /// The configuration for subscriber notification.
    /// This member is required.
    public var configuration: SecurityLakeClientTypes.NotificationConfiguration?
    /// The subscription ID for which the subscription notification is specified.
    /// This member is required.
    public var subscriberId: Swift.String?

    public init(
        configuration: SecurityLakeClientTypes.NotificationConfiguration? = nil,
        subscriberId: Swift.String? = nil
    )
    {
        self.configuration = configuration
        self.subscriberId = subscriberId
    }
}

public struct UpdateSubscriberNotificationOutput: Swift.Sendable {
    /// The subscriber endpoint to which exception messages are posted.
    public var subscriberEndpoint: Swift.String?

    public init(
        subscriberEndpoint: Swift.String? = nil
    )
    {
        self.subscriberEndpoint = subscriberEndpoint
    }
}

public struct TagResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the Amazon Security Lake resource to add or update the tags for.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// An array of objects, one for each tag (key and value) to associate with the Amazon Security Lake resource. For each tag, you must specify both a tag key and a tag value. A tag value cannot be null, but it can be an empty string.
    /// This member is required.
    public var tags: [SecurityLakeClientTypes.Tag]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [SecurityLakeClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

public struct TagResourceOutput: Swift.Sendable {

    public init() { }
}

public struct UntagResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the Amazon Security Lake resource to remove one or more tags from.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// A list of one or more tag keys. For each value in the list, specify the tag key for a tag to remove from the Amazon Security Lake resource.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

public struct UntagResourceOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateDataLakeExceptionSubscriptionInput: Swift.Sendable {
    /// The time-to-live (TTL) for the exception message to remain. It is the duration of time until which the exception message remains.
    public var exceptionTimeToLive: Swift.Int?
    /// The account that is subscribed to receive exception notifications.
    /// This member is required.
    public var notificationEndpoint: Swift.String?
    /// The subscription protocol to which exception messages are posted.
    /// This member is required.
    public var subscriptionProtocol: Swift.String?

    public init(
        exceptionTimeToLive: Swift.Int? = nil,
        notificationEndpoint: Swift.String? = nil,
        subscriptionProtocol: Swift.String? = nil
    )
    {
        self.exceptionTimeToLive = exceptionTimeToLive
        self.notificationEndpoint = notificationEndpoint
        self.subscriptionProtocol = subscriptionProtocol
    }
}

public struct UpdateDataLakeExceptionSubscriptionOutput: Swift.Sendable {

    public init() { }
}

extension CreateAwsLogSourceInput {

    static func urlPathProvider(_ value: CreateAwsLogSourceInput) -> Swift.String? {
        return "/v1/datalake/logsources/aws"
    }
}

extension CreateCustomLogSourceInput {

    static func urlPathProvider(_ value: CreateCustomLogSourceInput) -> Swift.String? {
        return "/v1/datalake/logsources/custom"
    }
}

extension CreateDataLakeInput {

    static func urlPathProvider(_ value: CreateDataLakeInput) -> Swift.String? {
        return "/v1/datalake"
    }
}

extension CreateDataLakeExceptionSubscriptionInput {

    static func urlPathProvider(_ value: CreateDataLakeExceptionSubscriptionInput) -> Swift.String? {
        return "/v1/datalake/exceptions/subscription"
    }
}

extension CreateDataLakeOrganizationConfigurationInput {

    static func urlPathProvider(_ value: CreateDataLakeOrganizationConfigurationInput) -> Swift.String? {
        return "/v1/datalake/organization/configuration"
    }
}

extension CreateSubscriberInput {

    static func urlPathProvider(_ value: CreateSubscriberInput) -> Swift.String? {
        return "/v1/subscribers"
    }
}

extension CreateSubscriberNotificationInput {

    static func urlPathProvider(_ value: CreateSubscriberNotificationInput) -> Swift.String? {
        guard let subscriberId = value.subscriberId else {
            return nil
        }
        return "/v1/subscribers/\(subscriberId.urlPercentEncoding())/notification"
    }
}

extension DeleteAwsLogSourceInput {

    static func urlPathProvider(_ value: DeleteAwsLogSourceInput) -> Swift.String? {
        return "/v1/datalake/logsources/aws/delete"
    }
}

extension DeleteCustomLogSourceInput {

    static func urlPathProvider(_ value: DeleteCustomLogSourceInput) -> Swift.String? {
        guard let sourceName = value.sourceName else {
            return nil
        }
        return "/v1/datalake/logsources/custom/\(sourceName.urlPercentEncoding())"
    }
}

extension DeleteCustomLogSourceInput {

    static func queryItemProvider(_ value: DeleteCustomLogSourceInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let sourceVersion = value.sourceVersion {
            let sourceVersionQueryItem = Smithy.URIQueryItem(name: "sourceVersion".urlPercentEncoding(), value: Swift.String(sourceVersion).urlPercentEncoding())
            items.append(sourceVersionQueryItem)
        }
        return items
    }
}

extension DeleteDataLakeInput {

    static func urlPathProvider(_ value: DeleteDataLakeInput) -> Swift.String? {
        return "/v1/datalake/delete"
    }
}

extension DeleteDataLakeExceptionSubscriptionInput {

    static func urlPathProvider(_ value: DeleteDataLakeExceptionSubscriptionInput) -> Swift.String? {
        return "/v1/datalake/exceptions/subscription"
    }
}

extension DeleteDataLakeOrganizationConfigurationInput {

    static func urlPathProvider(_ value: DeleteDataLakeOrganizationConfigurationInput) -> Swift.String? {
        return "/v1/datalake/organization/configuration/delete"
    }
}

extension DeleteSubscriberInput {

    static func urlPathProvider(_ value: DeleteSubscriberInput) -> Swift.String? {
        guard let subscriberId = value.subscriberId else {
            return nil
        }
        return "/v1/subscribers/\(subscriberId.urlPercentEncoding())"
    }
}

extension DeleteSubscriberNotificationInput {

    static func urlPathProvider(_ value: DeleteSubscriberNotificationInput) -> Swift.String? {
        guard let subscriberId = value.subscriberId else {
            return nil
        }
        return "/v1/subscribers/\(subscriberId.urlPercentEncoding())/notification"
    }
}

extension DeregisterDataLakeDelegatedAdministratorInput {

    static func urlPathProvider(_ value: DeregisterDataLakeDelegatedAdministratorInput) -> Swift.String? {
        return "/v1/datalake/delegate"
    }
}

extension GetDataLakeExceptionSubscriptionInput {

    static func urlPathProvider(_ value: GetDataLakeExceptionSubscriptionInput) -> Swift.String? {
        return "/v1/datalake/exceptions/subscription"
    }
}

extension GetDataLakeOrganizationConfigurationInput {

    static func urlPathProvider(_ value: GetDataLakeOrganizationConfigurationInput) -> Swift.String? {
        return "/v1/datalake/organization/configuration"
    }
}

extension GetDataLakeSourcesInput {

    static func urlPathProvider(_ value: GetDataLakeSourcesInput) -> Swift.String? {
        return "/v1/datalake/sources"
    }
}

extension GetSubscriberInput {

    static func urlPathProvider(_ value: GetSubscriberInput) -> Swift.String? {
        guard let subscriberId = value.subscriberId else {
            return nil
        }
        return "/v1/subscribers/\(subscriberId.urlPercentEncoding())"
    }
}

extension ListDataLakeExceptionsInput {

    static func urlPathProvider(_ value: ListDataLakeExceptionsInput) -> Swift.String? {
        return "/v1/datalake/exceptions"
    }
}

extension ListDataLakesInput {

    static func urlPathProvider(_ value: ListDataLakesInput) -> Swift.String? {
        return "/v1/datalakes"
    }
}

extension ListDataLakesInput {

    static func queryItemProvider(_ value: ListDataLakesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let regions = value.regions {
            regions.forEach { queryItemValue in
                let queryItem = Smithy.URIQueryItem(name: "regions".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
                items.append(queryItem)
            }
        }
        return items
    }
}

extension ListLogSourcesInput {

    static func urlPathProvider(_ value: ListLogSourcesInput) -> Swift.String? {
        return "/v1/datalake/logsources/list"
    }
}

extension ListSubscribersInput {

    static func urlPathProvider(_ value: ListSubscribersInput) -> Swift.String? {
        return "/v1/subscribers"
    }
}

extension ListSubscribersInput {

    static func queryItemProvider(_ value: ListSubscribersInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/v1/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension RegisterDataLakeDelegatedAdministratorInput {

    static func urlPathProvider(_ value: RegisterDataLakeDelegatedAdministratorInput) -> Swift.String? {
        return "/v1/datalake/delegate"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/v1/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/v1/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func queryItemProvider(_ value: UntagResourceInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let tagKeys = value.tagKeys else {
            let message = "Creating a URL Query Item failed. tagKeys is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        tagKeys.forEach { queryItemValue in
            let queryItem = Smithy.URIQueryItem(name: "tagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
            items.append(queryItem)
        }
        return items
    }
}

extension UpdateDataLakeInput {

    static func urlPathProvider(_ value: UpdateDataLakeInput) -> Swift.String? {
        return "/v1/datalake"
    }
}

extension UpdateDataLakeExceptionSubscriptionInput {

    static func urlPathProvider(_ value: UpdateDataLakeExceptionSubscriptionInput) -> Swift.String? {
        return "/v1/datalake/exceptions/subscription"
    }
}

extension UpdateSubscriberInput {

    static func urlPathProvider(_ value: UpdateSubscriberInput) -> Swift.String? {
        guard let subscriberId = value.subscriberId else {
            return nil
        }
        return "/v1/subscribers/\(subscriberId.urlPercentEncoding())"
    }
}

extension UpdateSubscriberNotificationInput {

    static func urlPathProvider(_ value: UpdateSubscriberNotificationInput) -> Swift.String? {
        guard let subscriberId = value.subscriberId else {
            return nil
        }
        return "/v1/subscribers/\(subscriberId.urlPercentEncoding())/notification"
    }
}

extension CreateAwsLogSourceInput {

    static func write(value: CreateAwsLogSourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["sources"].writeList(value.sources, memberWritingClosure: SecurityLakeClientTypes.AwsLogSourceConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateCustomLogSourceInput {

    static func write(value: CreateCustomLogSourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["configuration"].write(value.configuration, with: SecurityLakeClientTypes.CustomLogSourceConfiguration.write(value:to:))
        try writer["eventClasses"].writeList(value.eventClasses, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["sourceName"].write(value.sourceName)
        try writer["sourceVersion"].write(value.sourceVersion)
    }
}

extension CreateDataLakeInput {

    static func write(value: CreateDataLakeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["configurations"].writeList(value.configurations, memberWritingClosure: SecurityLakeClientTypes.DataLakeConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["metaStoreManagerRoleArn"].write(value.metaStoreManagerRoleArn)
        try writer["tags"].writeList(value.tags, memberWritingClosure: SecurityLakeClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateDataLakeExceptionSubscriptionInput {

    static func write(value: CreateDataLakeExceptionSubscriptionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["exceptionTimeToLive"].write(value.exceptionTimeToLive)
        try writer["notificationEndpoint"].write(value.notificationEndpoint)
        try writer["subscriptionProtocol"].write(value.subscriptionProtocol)
    }
}

extension CreateDataLakeOrganizationConfigurationInput {

    static func write(value: CreateDataLakeOrganizationConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["autoEnableNewAccount"].writeList(value.autoEnableNewAccount, memberWritingClosure: SecurityLakeClientTypes.DataLakeAutoEnableNewAccountConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateSubscriberInput {

    static func write(value: CreateSubscriberInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accessTypes"].writeList(value.accessTypes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<SecurityLakeClientTypes.AccessType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["sources"].writeList(value.sources, memberWritingClosure: SecurityLakeClientTypes.LogSourceResource.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["subscriberDescription"].write(value.subscriberDescription)
        try writer["subscriberIdentity"].write(value.subscriberIdentity, with: SecurityLakeClientTypes.AwsIdentity.write(value:to:))
        try writer["subscriberName"].write(value.subscriberName)
        try writer["tags"].writeList(value.tags, memberWritingClosure: SecurityLakeClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateSubscriberNotificationInput {

    static func write(value: CreateSubscriberNotificationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["configuration"].write(value.configuration, with: SecurityLakeClientTypes.NotificationConfiguration.write(value:to:))
    }
}

extension DeleteAwsLogSourceInput {

    static func write(value: DeleteAwsLogSourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["sources"].writeList(value.sources, memberWritingClosure: SecurityLakeClientTypes.AwsLogSourceConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DeleteDataLakeInput {

    static func write(value: DeleteDataLakeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["regions"].writeList(value.regions, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DeleteDataLakeOrganizationConfigurationInput {

    static func write(value: DeleteDataLakeOrganizationConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["autoEnableNewAccount"].writeList(value.autoEnableNewAccount, memberWritingClosure: SecurityLakeClientTypes.DataLakeAutoEnableNewAccountConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension GetDataLakeSourcesInput {

    static func write(value: GetDataLakeSourcesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accounts"].writeList(value.accounts, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension ListDataLakeExceptionsInput {

    static func write(value: ListDataLakeExceptionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["regions"].writeList(value.regions, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension ListLogSourcesInput {

    static func write(value: ListLogSourcesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accounts"].writeList(value.accounts, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["regions"].writeList(value.regions, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["sources"].writeList(value.sources, memberWritingClosure: SecurityLakeClientTypes.LogSourceResource.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension RegisterDataLakeDelegatedAdministratorInput {

    static func write(value: RegisterDataLakeDelegatedAdministratorInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accountId"].write(value.accountId)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["tags"].writeList(value.tags, memberWritingClosure: SecurityLakeClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateDataLakeInput {

    static func write(value: UpdateDataLakeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["configurations"].writeList(value.configurations, memberWritingClosure: SecurityLakeClientTypes.DataLakeConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["metaStoreManagerRoleArn"].write(value.metaStoreManagerRoleArn)
    }
}

extension UpdateDataLakeExceptionSubscriptionInput {

    static func write(value: UpdateDataLakeExceptionSubscriptionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["exceptionTimeToLive"].write(value.exceptionTimeToLive)
        try writer["notificationEndpoint"].write(value.notificationEndpoint)
        try writer["subscriptionProtocol"].write(value.subscriptionProtocol)
    }
}

extension UpdateSubscriberInput {

    static func write(value: UpdateSubscriberInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["sources"].writeList(value.sources, memberWritingClosure: SecurityLakeClientTypes.LogSourceResource.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["subscriberDescription"].write(value.subscriberDescription)
        try writer["subscriberIdentity"].write(value.subscriberIdentity, with: SecurityLakeClientTypes.AwsIdentity.write(value:to:))
        try writer["subscriberName"].write(value.subscriberName)
    }
}

extension UpdateSubscriberNotificationInput {

    static func write(value: UpdateSubscriberNotificationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["configuration"].write(value.configuration, with: SecurityLakeClientTypes.NotificationConfiguration.write(value:to:))
    }
}

extension CreateAwsLogSourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateAwsLogSourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateAwsLogSourceOutput()
        value.failed = try reader["failed"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CreateCustomLogSourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateCustomLogSourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateCustomLogSourceOutput()
        value.source = try reader["source"].readIfPresent(with: SecurityLakeClientTypes.CustomLogSourceResource.read(from:))
        return value
    }
}

extension CreateDataLakeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDataLakeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateDataLakeOutput()
        value.dataLakes = try reader["dataLakes"].readListIfPresent(memberReadingClosure: SecurityLakeClientTypes.DataLakeResource.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CreateDataLakeExceptionSubscriptionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDataLakeExceptionSubscriptionOutput {
        return CreateDataLakeExceptionSubscriptionOutput()
    }
}

extension CreateDataLakeOrganizationConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDataLakeOrganizationConfigurationOutput {
        return CreateDataLakeOrganizationConfigurationOutput()
    }
}

extension CreateSubscriberOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateSubscriberOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateSubscriberOutput()
        value.subscriber = try reader["subscriber"].readIfPresent(with: SecurityLakeClientTypes.SubscriberResource.read(from:))
        return value
    }
}

extension CreateSubscriberNotificationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateSubscriberNotificationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateSubscriberNotificationOutput()
        value.subscriberEndpoint = try reader["subscriberEndpoint"].readIfPresent()
        return value
    }
}

extension DeleteAwsLogSourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteAwsLogSourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteAwsLogSourceOutput()
        value.failed = try reader["failed"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DeleteCustomLogSourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteCustomLogSourceOutput {
        return DeleteCustomLogSourceOutput()
    }
}

extension DeleteDataLakeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteDataLakeOutput {
        return DeleteDataLakeOutput()
    }
}

extension DeleteDataLakeExceptionSubscriptionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteDataLakeExceptionSubscriptionOutput {
        return DeleteDataLakeExceptionSubscriptionOutput()
    }
}

extension DeleteDataLakeOrganizationConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteDataLakeOrganizationConfigurationOutput {
        return DeleteDataLakeOrganizationConfigurationOutput()
    }
}

extension DeleteSubscriberOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteSubscriberOutput {
        return DeleteSubscriberOutput()
    }
}

extension DeleteSubscriberNotificationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteSubscriberNotificationOutput {
        return DeleteSubscriberNotificationOutput()
    }
}

extension DeregisterDataLakeDelegatedAdministratorOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeregisterDataLakeDelegatedAdministratorOutput {
        return DeregisterDataLakeDelegatedAdministratorOutput()
    }
}

extension GetDataLakeExceptionSubscriptionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDataLakeExceptionSubscriptionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDataLakeExceptionSubscriptionOutput()
        value.exceptionTimeToLive = try reader["exceptionTimeToLive"].readIfPresent()
        value.notificationEndpoint = try reader["notificationEndpoint"].readIfPresent()
        value.subscriptionProtocol = try reader["subscriptionProtocol"].readIfPresent()
        return value
    }
}

extension GetDataLakeOrganizationConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDataLakeOrganizationConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDataLakeOrganizationConfigurationOutput()
        value.autoEnableNewAccount = try reader["autoEnableNewAccount"].readListIfPresent(memberReadingClosure: SecurityLakeClientTypes.DataLakeAutoEnableNewAccountConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetDataLakeSourcesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDataLakeSourcesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDataLakeSourcesOutput()
        value.dataLakeArn = try reader["dataLakeArn"].readIfPresent()
        value.dataLakeSources = try reader["dataLakeSources"].readListIfPresent(memberReadingClosure: SecurityLakeClientTypes.DataLakeSource.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension GetSubscriberOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetSubscriberOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetSubscriberOutput()
        value.subscriber = try reader["subscriber"].readIfPresent(with: SecurityLakeClientTypes.SubscriberResource.read(from:))
        return value
    }
}

extension ListDataLakeExceptionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDataLakeExceptionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDataLakeExceptionsOutput()
        value.exceptions = try reader["exceptions"].readListIfPresent(memberReadingClosure: SecurityLakeClientTypes.DataLakeException.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListDataLakesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDataLakesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDataLakesOutput()
        value.dataLakes = try reader["dataLakes"].readListIfPresent(memberReadingClosure: SecurityLakeClientTypes.DataLakeResource.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListLogSourcesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListLogSourcesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListLogSourcesOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.sources = try reader["sources"].readListIfPresent(memberReadingClosure: SecurityLakeClientTypes.LogSource.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListSubscribersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListSubscribersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListSubscribersOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.subscribers = try reader["subscribers"].readListIfPresent(memberReadingClosure: SecurityLakeClientTypes.SubscriberResource.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: SecurityLakeClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension RegisterDataLakeDelegatedAdministratorOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RegisterDataLakeDelegatedAdministratorOutput {
        return RegisterDataLakeDelegatedAdministratorOutput()
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateDataLakeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateDataLakeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateDataLakeOutput()
        value.dataLakes = try reader["dataLakes"].readListIfPresent(memberReadingClosure: SecurityLakeClientTypes.DataLakeResource.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension UpdateDataLakeExceptionSubscriptionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateDataLakeExceptionSubscriptionOutput {
        return UpdateDataLakeExceptionSubscriptionOutput()
    }
}

extension UpdateSubscriberOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateSubscriberOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateSubscriberOutput()
        value.subscriber = try reader["subscriber"].readIfPresent(with: SecurityLakeClientTypes.SubscriberResource.read(from:))
        return value
    }
}

extension UpdateSubscriberNotificationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateSubscriberNotificationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateSubscriberNotificationOutput()
        value.subscriberEndpoint = try reader["subscriberEndpoint"].readIfPresent()
        return value
    }
}

enum CreateAwsLogSourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateCustomLogSourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateDataLakeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateDataLakeExceptionSubscriptionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateDataLakeOrganizationConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateSubscriberOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateSubscriberNotificationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteAwsLogSourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteCustomLogSourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteDataLakeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteDataLakeExceptionSubscriptionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteDataLakeOrganizationConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteSubscriberOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteSubscriberNotificationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeregisterDataLakeDelegatedAdministratorOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDataLakeExceptionSubscriptionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDataLakeOrganizationConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDataLakeSourcesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetSubscriberOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDataLakeExceptionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDataLakesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListLogSourcesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListSubscribersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RegisterDataLakeDelegatedAdministratorOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateDataLakeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateDataLakeExceptionSubscriptionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateSubscriberOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateSubscriberNotificationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension InternalServerException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalServerException {
        let reader = baseError.errorBodyReader
        var value = InternalServerException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.resourceName = try reader["resourceName"].readIfPresent()
        value.properties.resourceType = try reader["resourceType"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ThrottlingException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ThrottlingException {
        let reader = baseError.errorBodyReader
        let httpResponse = baseError.httpResponse
        var value = ThrottlingException()
        if let retryAfterSecondsHeaderValue = httpResponse.headers.value(for: "Retry-After") {
            value.properties.retryAfterSeconds = Swift.Int(retryAfterSecondsHeaderValue) ?? 0
        }
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.quotaCode = try reader["quotaCode"].readIfPresent()
        value.properties.serviceCode = try reader["serviceCode"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.errorCode = try reader["errorCode"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension BadRequestException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> BadRequestException {
        let reader = baseError.errorBodyReader
        var value = BadRequestException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.resourceName = try reader["resourceName"].readIfPresent()
        value.properties.resourceType = try reader["resourceType"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SecurityLakeClientTypes.CustomLogSourceResource {

    static func write(value: SecurityLakeClientTypes.CustomLogSourceResource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attributes"].write(value.attributes, with: SecurityLakeClientTypes.CustomLogSourceAttributes.write(value:to:))
        try writer["provider"].write(value.provider, with: SecurityLakeClientTypes.CustomLogSourceProvider.write(value:to:))
        try writer["sourceName"].write(value.sourceName)
        try writer["sourceVersion"].write(value.sourceVersion)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SecurityLakeClientTypes.CustomLogSourceResource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SecurityLakeClientTypes.CustomLogSourceResource()
        value.sourceName = try reader["sourceName"].readIfPresent()
        value.sourceVersion = try reader["sourceVersion"].readIfPresent()
        value.provider = try reader["provider"].readIfPresent(with: SecurityLakeClientTypes.CustomLogSourceProvider.read(from:))
        value.attributes = try reader["attributes"].readIfPresent(with: SecurityLakeClientTypes.CustomLogSourceAttributes.read(from:))
        return value
    }
}

extension SecurityLakeClientTypes.CustomLogSourceAttributes {

    static func write(value: SecurityLakeClientTypes.CustomLogSourceAttributes?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["crawlerArn"].write(value.crawlerArn)
        try writer["databaseArn"].write(value.databaseArn)
        try writer["tableArn"].write(value.tableArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SecurityLakeClientTypes.CustomLogSourceAttributes {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SecurityLakeClientTypes.CustomLogSourceAttributes()
        value.crawlerArn = try reader["crawlerArn"].readIfPresent()
        value.databaseArn = try reader["databaseArn"].readIfPresent()
        value.tableArn = try reader["tableArn"].readIfPresent()
        return value
    }
}

extension SecurityLakeClientTypes.CustomLogSourceProvider {

    static func write(value: SecurityLakeClientTypes.CustomLogSourceProvider?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["location"].write(value.location)
        try writer["roleArn"].write(value.roleArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SecurityLakeClientTypes.CustomLogSourceProvider {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SecurityLakeClientTypes.CustomLogSourceProvider()
        value.roleArn = try reader["roleArn"].readIfPresent()
        value.location = try reader["location"].readIfPresent()
        return value
    }
}

extension SecurityLakeClientTypes.DataLakeResource {

    static func read(from reader: SmithyJSON.Reader) throws -> SecurityLakeClientTypes.DataLakeResource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SecurityLakeClientTypes.DataLakeResource()
        value.dataLakeArn = try reader["dataLakeArn"].readIfPresent() ?? ""
        value.region = try reader["region"].readIfPresent() ?? ""
        value.s3BucketArn = try reader["s3BucketArn"].readIfPresent()
        value.encryptionConfiguration = try reader["encryptionConfiguration"].readIfPresent(with: SecurityLakeClientTypes.DataLakeEncryptionConfiguration.read(from:))
        value.lifecycleConfiguration = try reader["lifecycleConfiguration"].readIfPresent(with: SecurityLakeClientTypes.DataLakeLifecycleConfiguration.read(from:))
        value.replicationConfiguration = try reader["replicationConfiguration"].readIfPresent(with: SecurityLakeClientTypes.DataLakeReplicationConfiguration.read(from:))
        value.createStatus = try reader["createStatus"].readIfPresent()
        value.updateStatus = try reader["updateStatus"].readIfPresent(with: SecurityLakeClientTypes.DataLakeUpdateStatus.read(from:))
        return value
    }
}

extension SecurityLakeClientTypes.DataLakeUpdateStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> SecurityLakeClientTypes.DataLakeUpdateStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SecurityLakeClientTypes.DataLakeUpdateStatus()
        value.requestId = try reader["requestId"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.exception = try reader["exception"].readIfPresent(with: SecurityLakeClientTypes.DataLakeUpdateException.read(from:))
        return value
    }
}

extension SecurityLakeClientTypes.DataLakeUpdateException {

    static func read(from reader: SmithyJSON.Reader) throws -> SecurityLakeClientTypes.DataLakeUpdateException {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SecurityLakeClientTypes.DataLakeUpdateException()
        value.reason = try reader["reason"].readIfPresent()
        value.code = try reader["code"].readIfPresent()
        return value
    }
}

extension SecurityLakeClientTypes.DataLakeReplicationConfiguration {

    static func write(value: SecurityLakeClientTypes.DataLakeReplicationConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["regions"].writeList(value.regions, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["roleArn"].write(value.roleArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SecurityLakeClientTypes.DataLakeReplicationConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SecurityLakeClientTypes.DataLakeReplicationConfiguration()
        value.regions = try reader["regions"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.roleArn = try reader["roleArn"].readIfPresent()
        return value
    }
}

extension SecurityLakeClientTypes.DataLakeLifecycleConfiguration {

    static func write(value: SecurityLakeClientTypes.DataLakeLifecycleConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["expiration"].write(value.expiration, with: SecurityLakeClientTypes.DataLakeLifecycleExpiration.write(value:to:))
        try writer["transitions"].writeList(value.transitions, memberWritingClosure: SecurityLakeClientTypes.DataLakeLifecycleTransition.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SecurityLakeClientTypes.DataLakeLifecycleConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SecurityLakeClientTypes.DataLakeLifecycleConfiguration()
        value.expiration = try reader["expiration"].readIfPresent(with: SecurityLakeClientTypes.DataLakeLifecycleExpiration.read(from:))
        value.transitions = try reader["transitions"].readListIfPresent(memberReadingClosure: SecurityLakeClientTypes.DataLakeLifecycleTransition.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SecurityLakeClientTypes.DataLakeLifecycleTransition {

    static func write(value: SecurityLakeClientTypes.DataLakeLifecycleTransition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["days"].write(value.days)
        try writer["storageClass"].write(value.storageClass)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SecurityLakeClientTypes.DataLakeLifecycleTransition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SecurityLakeClientTypes.DataLakeLifecycleTransition()
        value.storageClass = try reader["storageClass"].readIfPresent()
        value.days = try reader["days"].readIfPresent()
        return value
    }
}

extension SecurityLakeClientTypes.DataLakeLifecycleExpiration {

    static func write(value: SecurityLakeClientTypes.DataLakeLifecycleExpiration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["days"].write(value.days)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SecurityLakeClientTypes.DataLakeLifecycleExpiration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SecurityLakeClientTypes.DataLakeLifecycleExpiration()
        value.days = try reader["days"].readIfPresent()
        return value
    }
}

extension SecurityLakeClientTypes.DataLakeEncryptionConfiguration {

    static func write(value: SecurityLakeClientTypes.DataLakeEncryptionConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["kmsKeyId"].write(value.kmsKeyId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SecurityLakeClientTypes.DataLakeEncryptionConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SecurityLakeClientTypes.DataLakeEncryptionConfiguration()
        value.kmsKeyId = try reader["kmsKeyId"].readIfPresent()
        return value
    }
}

extension SecurityLakeClientTypes.SubscriberResource {

    static func read(from reader: SmithyJSON.Reader) throws -> SecurityLakeClientTypes.SubscriberResource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SecurityLakeClientTypes.SubscriberResource()
        value.subscriberId = try reader["subscriberId"].readIfPresent() ?? ""
        value.subscriberArn = try reader["subscriberArn"].readIfPresent() ?? ""
        value.subscriberIdentity = try reader["subscriberIdentity"].readIfPresent(with: SecurityLakeClientTypes.AwsIdentity.read(from:))
        value.subscriberName = try reader["subscriberName"].readIfPresent() ?? ""
        value.subscriberDescription = try reader["subscriberDescription"].readIfPresent()
        value.sources = try reader["sources"].readListIfPresent(memberReadingClosure: SecurityLakeClientTypes.LogSourceResource.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.accessTypes = try reader["accessTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<SecurityLakeClientTypes.AccessType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.roleArn = try reader["roleArn"].readIfPresent()
        value.s3BucketArn = try reader["s3BucketArn"].readIfPresent()
        value.subscriberEndpoint = try reader["subscriberEndpoint"].readIfPresent()
        value.subscriberStatus = try reader["subscriberStatus"].readIfPresent()
        value.resourceShareArn = try reader["resourceShareArn"].readIfPresent()
        value.resourceShareName = try reader["resourceShareName"].readIfPresent()
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.updatedAt = try reader["updatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        return value
    }
}

extension SecurityLakeClientTypes.LogSourceResource {

    static func write(value: SecurityLakeClientTypes.LogSourceResource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        switch value {
            case let .awslogsource(awslogsource):
                try writer["awsLogSource"].write(awslogsource, with: SecurityLakeClientTypes.AwsLogSourceResource.write(value:to:))
            case let .customlogsource(customlogsource):
                try writer["customLogSource"].write(customlogsource, with: SecurityLakeClientTypes.CustomLogSourceResource.write(value:to:))
            case let .sdkUnknown(sdkUnknown):
                try writer["sdkUnknown"].write(sdkUnknown)
        }
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SecurityLakeClientTypes.LogSourceResource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        let name = reader.children.filter { $0.hasContent && $0.nodeInfo.name != "__type" }.first?.nodeInfo.name
        switch name {
            case "awsLogSource":
                return .awslogsource(try reader["awsLogSource"].read(with: SecurityLakeClientTypes.AwsLogSourceResource.read(from:)))
            case "customLogSource":
                return .customlogsource(try reader["customLogSource"].read(with: SecurityLakeClientTypes.CustomLogSourceResource.read(from:)))
            default:
                return .sdkUnknown(name ?? "")
        }
    }
}

extension SecurityLakeClientTypes.AwsLogSourceResource {

    static func write(value: SecurityLakeClientTypes.AwsLogSourceResource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["sourceName"].write(value.sourceName)
        try writer["sourceVersion"].write(value.sourceVersion)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SecurityLakeClientTypes.AwsLogSourceResource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SecurityLakeClientTypes.AwsLogSourceResource()
        value.sourceName = try reader["sourceName"].readIfPresent()
        value.sourceVersion = try reader["sourceVersion"].readIfPresent()
        return value
    }
}

extension SecurityLakeClientTypes.AwsIdentity {

    static func write(value: SecurityLakeClientTypes.AwsIdentity?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["externalId"].write(value.externalId)
        try writer["principal"].write(value.principal)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SecurityLakeClientTypes.AwsIdentity {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SecurityLakeClientTypes.AwsIdentity()
        value.principal = try reader["principal"].readIfPresent() ?? ""
        value.externalId = try reader["externalId"].readIfPresent() ?? ""
        return value
    }
}

extension SecurityLakeClientTypes.DataLakeAutoEnableNewAccountConfiguration {

    static func write(value: SecurityLakeClientTypes.DataLakeAutoEnableNewAccountConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["region"].write(value.region)
        try writer["sources"].writeList(value.sources, memberWritingClosure: SecurityLakeClientTypes.AwsLogSourceResource.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SecurityLakeClientTypes.DataLakeAutoEnableNewAccountConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SecurityLakeClientTypes.DataLakeAutoEnableNewAccountConfiguration()
        value.region = try reader["region"].readIfPresent() ?? ""
        value.sources = try reader["sources"].readListIfPresent(memberReadingClosure: SecurityLakeClientTypes.AwsLogSourceResource.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension SecurityLakeClientTypes.DataLakeSource {

    static func read(from reader: SmithyJSON.Reader) throws -> SecurityLakeClientTypes.DataLakeSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SecurityLakeClientTypes.DataLakeSource()
        value.account = try reader["account"].readIfPresent()
        value.sourceName = try reader["sourceName"].readIfPresent()
        value.eventClasses = try reader["eventClasses"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.sourceStatuses = try reader["sourceStatuses"].readListIfPresent(memberReadingClosure: SecurityLakeClientTypes.DataLakeSourceStatus.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SecurityLakeClientTypes.DataLakeSourceStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> SecurityLakeClientTypes.DataLakeSourceStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SecurityLakeClientTypes.DataLakeSourceStatus()
        value.resource = try reader["resource"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        return value
    }
}

extension SecurityLakeClientTypes.DataLakeException {

    static func read(from reader: SmithyJSON.Reader) throws -> SecurityLakeClientTypes.DataLakeException {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SecurityLakeClientTypes.DataLakeException()
        value.region = try reader["region"].readIfPresent()
        value.exception = try reader["exception"].readIfPresent()
        value.remediation = try reader["remediation"].readIfPresent()
        value.timestamp = try reader["timestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        return value
    }
}

extension SecurityLakeClientTypes.LogSource {

    static func read(from reader: SmithyJSON.Reader) throws -> SecurityLakeClientTypes.LogSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SecurityLakeClientTypes.LogSource()
        value.account = try reader["account"].readIfPresent()
        value.region = try reader["region"].readIfPresent()
        value.sources = try reader["sources"].readListIfPresent(memberReadingClosure: SecurityLakeClientTypes.LogSourceResource.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SecurityLakeClientTypes.Tag {

    static func write(value: SecurityLakeClientTypes.Tag?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["key"].write(value.key)
        try writer["value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SecurityLakeClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SecurityLakeClientTypes.Tag()
        value.key = try reader["key"].readIfPresent() ?? ""
        value.value = try reader["value"].readIfPresent() ?? ""
        return value
    }
}

extension SecurityLakeClientTypes.AwsLogSourceConfiguration {

    static func write(value: SecurityLakeClientTypes.AwsLogSourceConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accounts"].writeList(value.accounts, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["regions"].writeList(value.regions, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["sourceName"].write(value.sourceName)
        try writer["sourceVersion"].write(value.sourceVersion)
    }
}

extension SecurityLakeClientTypes.CustomLogSourceConfiguration {

    static func write(value: SecurityLakeClientTypes.CustomLogSourceConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["crawlerConfiguration"].write(value.crawlerConfiguration, with: SecurityLakeClientTypes.CustomLogSourceCrawlerConfiguration.write(value:to:))
        try writer["providerIdentity"].write(value.providerIdentity, with: SecurityLakeClientTypes.AwsIdentity.write(value:to:))
    }
}

extension SecurityLakeClientTypes.CustomLogSourceCrawlerConfiguration {

    static func write(value: SecurityLakeClientTypes.CustomLogSourceCrawlerConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["roleArn"].write(value.roleArn)
    }
}

extension SecurityLakeClientTypes.DataLakeConfiguration {

    static func write(value: SecurityLakeClientTypes.DataLakeConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["encryptionConfiguration"].write(value.encryptionConfiguration, with: SecurityLakeClientTypes.DataLakeEncryptionConfiguration.write(value:to:))
        try writer["lifecycleConfiguration"].write(value.lifecycleConfiguration, with: SecurityLakeClientTypes.DataLakeLifecycleConfiguration.write(value:to:))
        try writer["region"].write(value.region)
        try writer["replicationConfiguration"].write(value.replicationConfiguration, with: SecurityLakeClientTypes.DataLakeReplicationConfiguration.write(value:to:))
    }
}

extension SecurityLakeClientTypes.NotificationConfiguration {

    static func write(value: SecurityLakeClientTypes.NotificationConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        switch value {
            case let .httpsnotificationconfiguration(httpsnotificationconfiguration):
                try writer["httpsNotificationConfiguration"].write(httpsnotificationconfiguration, with: SecurityLakeClientTypes.HttpsNotificationConfiguration.write(value:to:))
            case let .sqsnotificationconfiguration(sqsnotificationconfiguration):
                try writer["sqsNotificationConfiguration"].write(sqsnotificationconfiguration, with: SecurityLakeClientTypes.SqsNotificationConfiguration.write(value:to:))
            case let .sdkUnknown(sdkUnknown):
                try writer["sdkUnknown"].write(sdkUnknown)
        }
    }
}

extension SecurityLakeClientTypes.HttpsNotificationConfiguration {

    static func write(value: SecurityLakeClientTypes.HttpsNotificationConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["authorizationApiKeyName"].write(value.authorizationApiKeyName)
        try writer["authorizationApiKeyValue"].write(value.authorizationApiKeyValue)
        try writer["endpoint"].write(value.endpoint)
        try writer["httpMethod"].write(value.httpMethod)
        try writer["targetRoleArn"].write(value.targetRoleArn)
    }
}

extension SecurityLakeClientTypes.SqsNotificationConfiguration {

    static func write(value: SecurityLakeClientTypes.SqsNotificationConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

public enum SecurityLakeClientTypes {}
