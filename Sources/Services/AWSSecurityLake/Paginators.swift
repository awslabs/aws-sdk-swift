// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityLakeClient {
    /// Paginate over `[ListDataLakeExceptionsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListDataLakeExceptionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListDataLakeExceptionsOutput`
    public func listDataLakeExceptionsPaginated(input: ListDataLakeExceptionsInput) -> ClientRuntime.PaginatorSequence<ListDataLakeExceptionsInput, ListDataLakeExceptionsOutput> {
        return ClientRuntime.PaginatorSequence<ListDataLakeExceptionsInput, ListDataLakeExceptionsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listDataLakeExceptions(input:))
    }
}

extension ListDataLakeExceptionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListDataLakeExceptionsInput {
        return ListDataLakeExceptionsInput(
            maxResults: self.maxResults,
            nextToken: token,
            regions: self.regions
        )}
}

extension PaginatorSequence where OperationStackInput == ListDataLakeExceptionsInput, OperationStackOutput == ListDataLakeExceptionsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listDataLakeExceptionsPaginated`
    /// to access the nested member `[SecurityLakeClientTypes.DataLakeException]`
    /// - Returns: `[SecurityLakeClientTypes.DataLakeException]`
    public func exceptions() async throws -> [SecurityLakeClientTypes.DataLakeException] {
        return try await self.asyncCompactMap { item in item.exceptions }
    }
}
