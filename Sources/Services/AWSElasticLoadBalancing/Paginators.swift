// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime


/// Paginate over `[DescribeLoadBalancersOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[DescribeLoadBalancersInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `DescribeLoadBalancersOutputResponse`
extension ElasticLoadBalancingClient {
    public func describeLoadBalancersPaginated(input: DescribeLoadBalancersInput) -> ClientRuntime.PaginatorSequence<DescribeLoadBalancersInput, DescribeLoadBalancersOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeLoadBalancersInput, DescribeLoadBalancersOutputResponse>(input: input, inputKey: \DescribeLoadBalancersInput.marker, outputKey: \DescribeLoadBalancersOutputResponse.nextMarker, paginationFunction: self.describeLoadBalancers(input:))
    }
}

extension DescribeLoadBalancersInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeLoadBalancersInput {
        return DescribeLoadBalancersInput(
            loadBalancerNames: self.loadBalancerNames,
            marker: token,
            pageSize: self.pageSize
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `describeLoadBalancersPaginated`
/// to access the nested member `[ElasticLoadBalancingClientTypes.LoadBalancerDescription]`
/// - Returns: `[ElasticLoadBalancingClientTypes.LoadBalancerDescription]`
extension PaginatorSequence where Input == DescribeLoadBalancersInput, Output == DescribeLoadBalancersOutputResponse {
    public func loadBalancerDescriptions() async throws -> [ElasticLoadBalancingClientTypes.LoadBalancerDescription] {
        return try await self.asyncCompactMap { item in item.loadBalancerDescriptions }
    }
}
