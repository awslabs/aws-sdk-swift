// Code generated by smithy-swift-codegen. DO NOT EDIT!

import class ClientRuntime.Waiter
import enum ClientRuntime.JMESUtils
import protocol ClientRuntime.ServiceError
import struct ClientRuntime.WaiterConfiguration
import struct ClientRuntime.WaiterOptions
import struct ClientRuntime.WaiterOutcome

extension ElasticLoadBalancingClient {

    static func anyInstanceInServiceWaiterConfig() throws -> ClientRuntime.WaiterConfiguration<DescribeInstanceHealthInput, DescribeInstanceHealthOutput> {
        let acceptors: [ClientRuntime.WaiterConfiguration<DescribeInstanceHealthInput, DescribeInstanceHealthOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeInstanceHealthInput, result: Swift.Result<DescribeInstanceHealthOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "InstanceStates[].State"
                // JMESPath comparator: "anyStringEquals"
                // JMESPath expected value: "InService"
                guard case .success(let output) = result else { return false }
                let instanceStates = output.instanceStates
                let projection: [Swift.String]? = instanceStates?.compactMap { original in
                    let state = original.state
                    return state
                }
                return projection?.contains(where: { ClientRuntime.JMESUtils.compare($0, ==, "InService") }) ?? false
            }),
        ]
        return try ClientRuntime.WaiterConfiguration<DescribeInstanceHealthInput, DescribeInstanceHealthOutput>(acceptors: acceptors, minDelay: 15.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the AnyInstanceInService event on the describeInstanceHealth operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeInstanceHealthInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilAnyInstanceInService(options: ClientRuntime.WaiterOptions, input: DescribeInstanceHealthInput) async throws -> ClientRuntime.WaiterOutcome<DescribeInstanceHealthOutput> {
        let waiter = ClientRuntime.Waiter(config: try Self.anyInstanceInServiceWaiterConfig(), operation: self.describeInstanceHealth(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func instanceDeregisteredWaiterConfig() throws -> ClientRuntime.WaiterConfiguration<DescribeInstanceHealthInput, DescribeInstanceHealthOutput> {
        let acceptors: [ClientRuntime.WaiterConfiguration<DescribeInstanceHealthInput, DescribeInstanceHealthOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeInstanceHealthInput, result: Swift.Result<DescribeInstanceHealthOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "InstanceStates[].State"
                // JMESPath comparator: "allStringEquals"
                // JMESPath expected value: "OutOfService"
                guard case .success(let output) = result else { return false }
                let instanceStates = output.instanceStates
                let projection: [Swift.String]? = instanceStates?.compactMap { original in
                    let state = original.state
                    return state
                }
                return (projection?.count ?? 0) > 1 && (projection?.allSatisfy { ClientRuntime.JMESUtils.compare($0, ==, "OutOfService") } ?? false)
            }),
            .init(state: .success, matcher: { (input: DescribeInstanceHealthInput, result: Swift.Result<DescribeInstanceHealthOutput, Swift.Error>) -> Bool in
                guard case .failure(let error) = result else { return false }
                return (error as? ClientRuntime.ServiceError)?.typeName == "InvalidInstance"
            }),
        ]
        return try ClientRuntime.WaiterConfiguration<DescribeInstanceHealthInput, DescribeInstanceHealthOutput>(acceptors: acceptors, minDelay: 15.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the InstanceDeregistered event on the describeInstanceHealth operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeInstanceHealthInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilInstanceDeregistered(options: ClientRuntime.WaiterOptions, input: DescribeInstanceHealthInput) async throws -> ClientRuntime.WaiterOutcome<DescribeInstanceHealthOutput> {
        let waiter = ClientRuntime.Waiter(config: try Self.instanceDeregisteredWaiterConfig(), operation: self.describeInstanceHealth(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }

    static func instanceInServiceWaiterConfig() throws -> ClientRuntime.WaiterConfiguration<DescribeInstanceHealthInput, DescribeInstanceHealthOutput> {
        let acceptors: [ClientRuntime.WaiterConfiguration<DescribeInstanceHealthInput, DescribeInstanceHealthOutput>.Acceptor] = [
            .init(state: .success, matcher: { (input: DescribeInstanceHealthInput, result: Swift.Result<DescribeInstanceHealthOutput, Swift.Error>) -> Bool in
                // JMESPath expression: "InstanceStates[].State"
                // JMESPath comparator: "allStringEquals"
                // JMESPath expected value: "InService"
                guard case .success(let output) = result else { return false }
                let instanceStates = output.instanceStates
                let projection: [Swift.String]? = instanceStates?.compactMap { original in
                    let state = original.state
                    return state
                }
                return (projection?.count ?? 0) > 1 && (projection?.allSatisfy { ClientRuntime.JMESUtils.compare($0, ==, "InService") } ?? false)
            }),
            .init(state: .retry, matcher: { (input: DescribeInstanceHealthInput, result: Swift.Result<DescribeInstanceHealthOutput, Swift.Error>) -> Bool in
                guard case .failure(let error) = result else { return false }
                return (error as? ClientRuntime.ServiceError)?.typeName == "InvalidInstance"
            }),
        ]
        return try ClientRuntime.WaiterConfiguration<DescribeInstanceHealthInput, DescribeInstanceHealthOutput>(acceptors: acceptors, minDelay: 15.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the InstanceInService event on the describeInstanceHealth operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `DescribeInstanceHealthInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilInstanceInService(options: ClientRuntime.WaiterOptions, input: DescribeInstanceHealthInput) async throws -> ClientRuntime.WaiterOutcome<DescribeInstanceHealthOutput> {
        let waiter = ClientRuntime.Waiter(config: try Self.instanceInServiceWaiterConfig(), operation: self.describeInstanceHealth(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }
}
