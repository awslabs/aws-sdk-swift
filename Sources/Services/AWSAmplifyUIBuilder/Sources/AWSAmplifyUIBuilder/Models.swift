//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class ClientRuntime.Indirect
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum Smithy.ClientError
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
@_spi(SmithyReadWrite) import func SmithyReadWrite.mapReadingClosure
@_spi(SmithyReadWrite) import func SmithyReadWrite.mapWritingClosure
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.URIQueryItem
@_spi(SmithyTimestamps) import struct SmithyTimestamps.TimestampFormatter


public struct DeleteComponentOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteFormOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteThemeOutput: Swift.Sendable {

    public init() { }
}

public struct PutMetadataFlagOutput: Swift.Sendable {

    public init() { }
}

extension AmplifyUIBuilderClientTypes {

    /// Associates a component property to a binding property. This enables exposed properties on the top level component to propagate data to the component's property values.
    public struct ComponentPropertyBindingProperties: Swift.Sendable {
        /// The data field to bind the property to.
        public var field: Swift.String?
        /// The component property to bind to the data field.
        /// This member is required.
        public var property: Swift.String?

        public init(
            field: Swift.String? = nil,
            property: Swift.String? = nil
        )
        {
            self.field = field
            self.property = property
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Describes how to bind a component property to form data.
    public struct FormBindingElement: Swift.Sendable {
        /// The name of the component to retrieve a value from.
        /// This member is required.
        public var element: Swift.String?
        /// The property to retrieve a value from.
        /// This member is required.
        public var property: Swift.String?

        public init(
            element: Swift.String? = nil,
            property: Swift.String? = nil
        )
        {
            self.element = element
            self.property = property
        }
    }
}

/// An internal error has occurred. Please retry your request.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// An invalid or out-of-range value was supplied for the input parameter.
public struct InvalidParameterException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidParameterException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The requested resource does not exist, or access was denied.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was denied due to request throttling.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct GetCodegenJobInput: Swift.Sendable {
    /// The unique ID of the Amplify app associated with the code generation job.
    /// This member is required.
    public var appId: Swift.String?
    /// The name of the backend environment that is a part of the Amplify app associated with the code generation job.
    /// This member is required.
    public var environmentName: Swift.String?
    /// The unique ID of the code generation job.
    /// This member is required.
    public var id: Swift.String?

    public init(
        appId: Swift.String? = nil,
        environmentName: Swift.String? = nil,
        id: Swift.String? = nil
    )
    {
        self.appId = appId
        self.environmentName = environmentName
        self.id = id
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Describes an asset for a code generation job.
    public struct CodegenJobAsset: Swift.Sendable {
        /// The URL to use to access the asset.
        public var downloadUrl: Swift.String?

        public init(
            downloadUrl: Swift.String? = nil
        )
        {
            self.downloadUrl = downloadUrl
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Dependency package that may be required for the project code to run.
    public struct CodegenDependency: Swift.Sendable {
        /// Determines if the dependency package is using Semantic versioning. If set to true, it indicates that the dependency package uses Semantic versioning.
        public var isSemVer: Swift.Bool?
        /// Name of the dependency package.
        public var name: Swift.String?
        /// Indicates the reason to include the dependency package in your project code.
        public var reason: Swift.String?
        /// Indicates the version of the supported dependency package.
        public var supportedVersion: Swift.String?

        public init(
            isSemVer: Swift.Bool? = nil,
            name: Swift.String? = nil,
            reason: Swift.String? = nil,
            supportedVersion: Swift.String? = nil
        )
        {
            self.isSemVer = isSemVer
            self.name = name
            self.reason = reason
            self.supportedVersion = supportedVersion
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Describes the feature flags that you can specify for a code generation job.
    public struct CodegenFeatureFlags: Swift.Sendable {
        /// Specifies whether a code generation job supports non models.
        public var isNonModelSupported: Swift.Bool?
        /// Specifes whether a code generation job supports data relationships.
        public var isRelationshipSupported: Swift.Bool?

        public init(
            isNonModelSupported: Swift.Bool? = nil,
            isRelationshipSupported: Swift.Bool? = nil
        )
        {
            self.isNonModelSupported = isNonModelSupported
            self.isRelationshipSupported = isRelationshipSupported
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    public enum CodegenJobGenericDataSourceType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case dataStore
        case sdkUnknown(Swift.String)

        public static var allCases: [CodegenJobGenericDataSourceType] {
            return [
                .dataStore
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .dataStore: return "DataStore"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Describes the enums in a generic data schema.
    public struct CodegenGenericDataEnum: Swift.Sendable {
        /// The list of enum values in the generic data schema.
        /// This member is required.
        public var values: [Swift.String]?

        public init(
            values: [Swift.String]? = nil
        )
        {
            self.values = values
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    public enum CodegenGenericDataFieldDataType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case awsDate
        case awsDateTime
        case awsEmail
        case awsIpAddress
        case awsJson
        case awsPhone
        case awsTime
        case awsTimestamp
        case awsUrl
        case boolean
        case `enum`
        case float
        case id
        case int
        case model
        case nonModel
        case string
        case sdkUnknown(Swift.String)

        public static var allCases: [CodegenGenericDataFieldDataType] {
            return [
                .awsDate,
                .awsDateTime,
                .awsEmail,
                .awsIpAddress,
                .awsJson,
                .awsPhone,
                .awsTime,
                .awsTimestamp,
                .awsUrl,
                .boolean,
                .enum,
                .float,
                .id,
                .int,
                .model,
                .nonModel,
                .string
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .awsDate: return "AWSDate"
            case .awsDateTime: return "AWSDateTime"
            case .awsEmail: return "AWSEmail"
            case .awsIpAddress: return "AWSIPAddress"
            case .awsJson: return "AWSJSON"
            case .awsPhone: return "AWSPhone"
            case .awsTime: return "AWSTime"
            case .awsTimestamp: return "AWSTimestamp"
            case .awsUrl: return "AWSURL"
            case .boolean: return "Boolean"
            case .enum: return "Enum"
            case .float: return "Float"
            case .id: return "ID"
            case .int: return "Int"
            case .model: return "Model"
            case .nonModel: return "NonModel"
            case .string: return "String"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    public enum GenericDataRelationshipType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case belongsTo
        case hasMany
        case hasOne
        case sdkUnknown(Swift.String)

        public static var allCases: [GenericDataRelationshipType] {
            return [
                .belongsTo,
                .hasMany,
                .hasOne
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .belongsTo: return "BELONGS_TO"
            case .hasMany: return "HAS_MANY"
            case .hasOne: return "HAS_ONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Describes the relationship between generic data models.
    public struct CodegenGenericDataRelationshipType: Swift.Sendable {
        /// The associated fields of the data relationship.
        public var associatedFields: [Swift.String]?
        /// The value of the belongsTo field on the related data model.
        public var belongsToFieldOnRelatedModel: Swift.String?
        /// Specifies whether the relationship can unlink the associated model.
        public var canUnlinkAssociatedModel: Swift.Bool?
        /// Specifies whether the @index directive is supported for a hasMany data relationship.
        public var isHasManyIndex: Swift.Bool?
        /// The name of the related join field in the data relationship.
        public var relatedJoinFieldName: Swift.String?
        /// The name of the related join table in the data relationship.
        public var relatedJoinTableName: Swift.String?
        /// The related model fields in the data relationship.
        public var relatedModelFields: [Swift.String]?
        /// The name of the related model in the data relationship.
        /// This member is required.
        public var relatedModelName: Swift.String?
        /// The data relationship type.
        /// This member is required.
        public var type: AmplifyUIBuilderClientTypes.GenericDataRelationshipType?

        public init(
            associatedFields: [Swift.String]? = nil,
            belongsToFieldOnRelatedModel: Swift.String? = nil,
            canUnlinkAssociatedModel: Swift.Bool? = nil,
            isHasManyIndex: Swift.Bool? = nil,
            relatedJoinFieldName: Swift.String? = nil,
            relatedJoinTableName: Swift.String? = nil,
            relatedModelFields: [Swift.String]? = nil,
            relatedModelName: Swift.String? = nil,
            type: AmplifyUIBuilderClientTypes.GenericDataRelationshipType? = nil
        )
        {
            self.associatedFields = associatedFields
            self.belongsToFieldOnRelatedModel = belongsToFieldOnRelatedModel
            self.canUnlinkAssociatedModel = canUnlinkAssociatedModel
            self.isHasManyIndex = isHasManyIndex
            self.relatedJoinFieldName = relatedJoinFieldName
            self.relatedJoinTableName = relatedJoinTableName
            self.relatedModelFields = relatedModelFields
            self.relatedModelName = relatedModelName
            self.type = type
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Describes a field in a generic data schema.
    public struct CodegenGenericDataField: Swift.Sendable {
        /// The data type for the generic data field.
        /// This member is required.
        public var dataType: AmplifyUIBuilderClientTypes.CodegenGenericDataFieldDataType?
        /// The value of the data type for the generic data field.
        /// This member is required.
        public var dataTypeValue: Swift.String?
        /// Specifies whether the generic data field is an array.
        /// This member is required.
        public var isArray: Swift.Bool?
        /// Specifies whether the generic data field is read-only.
        /// This member is required.
        public var readOnly: Swift.Bool?
        /// The relationship of the generic data schema.
        public var relationship: AmplifyUIBuilderClientTypes.CodegenGenericDataRelationshipType?
        /// Specifies whether the generic data field is required.
        /// This member is required.
        public var `required`: Swift.Bool?

        public init(
            dataType: AmplifyUIBuilderClientTypes.CodegenGenericDataFieldDataType? = nil,
            dataTypeValue: Swift.String? = nil,
            isArray: Swift.Bool? = nil,
            readOnly: Swift.Bool? = nil,
            relationship: AmplifyUIBuilderClientTypes.CodegenGenericDataRelationshipType? = nil,
            `required`: Swift.Bool? = nil
        )
        {
            self.dataType = dataType
            self.dataTypeValue = dataTypeValue
            self.isArray = isArray
            self.readOnly = readOnly
            self.relationship = relationship
            self.`required` = `required`
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Describes a model in a generic data schema.
    public struct CodegenGenericDataModel: Swift.Sendable {
        /// The fields in the generic data model.
        /// This member is required.
        public var fields: [Swift.String: AmplifyUIBuilderClientTypes.CodegenGenericDataField]?
        /// Specifies whether the generic data model is a join table.
        public var isJoinTable: Swift.Bool?
        /// The primary keys of the generic data model.
        /// This member is required.
        public var primaryKeys: [Swift.String]?

        public init(
            fields: [Swift.String: AmplifyUIBuilderClientTypes.CodegenGenericDataField]? = nil,
            isJoinTable: Swift.Bool? = nil,
            primaryKeys: [Swift.String]? = nil
        )
        {
            self.fields = fields
            self.isJoinTable = isJoinTable
            self.primaryKeys = primaryKeys
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Describes a non-model in a generic data schema.
    public struct CodegenGenericDataNonModel: Swift.Sendable {
        /// The fields in a generic data schema non model.
        /// This member is required.
        public var fields: [Swift.String: AmplifyUIBuilderClientTypes.CodegenGenericDataField]?

        public init(
            fields: [Swift.String: AmplifyUIBuilderClientTypes.CodegenGenericDataField]? = nil
        )
        {
            self.fields = fields
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Describes the data schema for a code generation job.
    public struct CodegenJobGenericDataSchema: Swift.Sendable {
        /// The type of the data source for the schema. Currently, the only valid value is an Amplify DataStore.
        /// This member is required.
        public var dataSourceType: AmplifyUIBuilderClientTypes.CodegenJobGenericDataSourceType?
        /// The name of a CodegenGenericDataEnum.
        /// This member is required.
        public var enums: [Swift.String: AmplifyUIBuilderClientTypes.CodegenGenericDataEnum]?
        /// The name of a CodegenGenericDataModel.
        /// This member is required.
        public var models: [Swift.String: AmplifyUIBuilderClientTypes.CodegenGenericDataModel]?
        /// The name of a CodegenGenericDataNonModel.
        /// This member is required.
        public var nonModels: [Swift.String: AmplifyUIBuilderClientTypes.CodegenGenericDataNonModel]?

        public init(
            dataSourceType: AmplifyUIBuilderClientTypes.CodegenJobGenericDataSourceType? = nil,
            enums: [Swift.String: AmplifyUIBuilderClientTypes.CodegenGenericDataEnum]? = nil,
            models: [Swift.String: AmplifyUIBuilderClientTypes.CodegenGenericDataModel]? = nil,
            nonModels: [Swift.String: AmplifyUIBuilderClientTypes.CodegenGenericDataNonModel]? = nil
        )
        {
            self.dataSourceType = dataSourceType
            self.enums = enums
            self.models = models
            self.nonModels = nonModels
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Describes the DataStore configuration for an API for a code generation job.
    public struct DataStoreRenderConfig: Swift.Sendable {

        public init() { }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Describes the GraphQL configuration for an API for a code generation job.
    public struct GraphQLRenderConfig: Swift.Sendable {
        /// The path to the GraphQL fragments file, relative to the component output directory.
        /// This member is required.
        public var fragmentsFilePath: Swift.String?
        /// The path to the GraphQL mutations file, relative to the component output directory.
        /// This member is required.
        public var mutationsFilePath: Swift.String?
        /// The path to the GraphQL queries file, relative to the component output directory.
        /// This member is required.
        public var queriesFilePath: Swift.String?
        /// The path to the GraphQL subscriptions file, relative to the component output directory.
        /// This member is required.
        public var subscriptionsFilePath: Swift.String?
        /// The path to the GraphQL types file, relative to the component output directory.
        /// This member is required.
        public var typesFilePath: Swift.String?

        public init(
            fragmentsFilePath: Swift.String? = nil,
            mutationsFilePath: Swift.String? = nil,
            queriesFilePath: Swift.String? = nil,
            subscriptionsFilePath: Swift.String? = nil,
            typesFilePath: Swift.String? = nil
        )
        {
            self.fragmentsFilePath = fragmentsFilePath
            self.mutationsFilePath = mutationsFilePath
            self.queriesFilePath = queriesFilePath
            self.subscriptionsFilePath = subscriptionsFilePath
            self.typesFilePath = typesFilePath
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Describes the configuration for an application with no API being used.
    public struct NoApiRenderConfig: Swift.Sendable {

        public init() { }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Describes the API configuration for a code generation job.
    public enum ApiConfiguration: Swift.Sendable {
        /// The configuration for an application using GraphQL APIs.
        case graphqlconfig(AmplifyUIBuilderClientTypes.GraphQLRenderConfig)
        /// The configuration for an application using DataStore APIs.
        case datastoreconfig(AmplifyUIBuilderClientTypes.DataStoreRenderConfig)
        /// The configuration for an application with no API being used.
        case noapiconfig(AmplifyUIBuilderClientTypes.NoApiRenderConfig)
        case sdkUnknown(Swift.String)
    }
}

extension AmplifyUIBuilderClientTypes {

    public enum JSModule: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case es2020
        case esnext
        case sdkUnknown(Swift.String)

        public static var allCases: [JSModule] {
            return [
                .es2020,
                .esnext
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .es2020: return "es2020"
            case .esnext: return "esnext"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    public enum JSScript: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case js
        case jsx
        case tsx
        case sdkUnknown(Swift.String)

        public static var allCases: [JSScript] {
            return [
                .js,
                .jsx,
                .tsx
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .js: return "js"
            case .jsx: return "jsx"
            case .tsx: return "tsx"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    public enum JSTarget: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case es2015
        case es2020
        case sdkUnknown(Swift.String)

        public static var allCases: [JSTarget] {
            return [
                .es2015,
                .es2020
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .es2015: return "es2015"
            case .es2020: return "es2020"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Describes the code generation job configuration for a React project.
    public struct ReactStartCodegenJobData: Swift.Sendable {
        /// The API configuration for the code generation job.
        public var apiConfiguration: AmplifyUIBuilderClientTypes.ApiConfiguration?
        /// Lists the dependency packages that may be required for the project code to run.
        public var dependencies: [Swift.String: Swift.String]?
        /// Specifies whether the code generation job should render inline source maps.
        public var inlineSourceMap: Swift.Bool
        /// The JavaScript module type.
        public var module: AmplifyUIBuilderClientTypes.JSModule?
        /// Specifies whether the code generation job should render type declaration files.
        public var renderTypeDeclarations: Swift.Bool
        /// The file type to use for a JavaScript project.
        public var script: AmplifyUIBuilderClientTypes.JSScript?
        /// The ECMAScript specification to use.
        public var target: AmplifyUIBuilderClientTypes.JSTarget?

        public init(
            apiConfiguration: AmplifyUIBuilderClientTypes.ApiConfiguration? = nil,
            dependencies: [Swift.String: Swift.String]? = nil,
            inlineSourceMap: Swift.Bool = false,
            module: AmplifyUIBuilderClientTypes.JSModule? = nil,
            renderTypeDeclarations: Swift.Bool = false,
            script: AmplifyUIBuilderClientTypes.JSScript? = nil,
            target: AmplifyUIBuilderClientTypes.JSTarget? = nil
        )
        {
            self.apiConfiguration = apiConfiguration
            self.dependencies = dependencies
            self.inlineSourceMap = inlineSourceMap
            self.module = module
            self.renderTypeDeclarations = renderTypeDeclarations
            self.script = script
            self.target = target
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Describes the configuration information for rendering the UI component associated with the code generation job.
    public enum CodegenJobRenderConfig: Swift.Sendable {
        /// The name of the ReactStartCodegenJobData object.
        case react(AmplifyUIBuilderClientTypes.ReactStartCodegenJobData)
        case sdkUnknown(Swift.String)
    }
}

extension AmplifyUIBuilderClientTypes {

    public enum CodegenJobStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case inProgress
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [CodegenJobStatus] {
            return [
                .failed,
                .inProgress,
                .succeeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "failed"
            case .inProgress: return "in_progress"
            case .succeeded: return "succeeded"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Describes the configuration for a code generation job that is associated with an Amplify app.
    public struct CodegenJob: Swift.Sendable {
        /// The ID of the Amplify app associated with the code generation job.
        /// This member is required.
        public var appId: Swift.String?
        /// The CodegenJobAsset to use for the code generation job.
        public var asset: AmplifyUIBuilderClientTypes.CodegenJobAsset?
        /// Specifies whether to autogenerate forms in the code generation job.
        public var autoGenerateForms: Swift.Bool?
        /// The time that the code generation job was created.
        public var createdAt: Foundation.Date?
        /// Lists the dependency packages that may be required for the project code to run.
        public var dependencies: [AmplifyUIBuilderClientTypes.CodegenDependency]?
        /// The name of the backend environment associated with the code generation job.
        /// This member is required.
        public var environmentName: Swift.String?
        /// Describes the feature flags that you can specify for a code generation job.
        public var features: AmplifyUIBuilderClientTypes.CodegenFeatureFlags?
        /// Describes the data schema for a code generation job.
        public var genericDataSchema: AmplifyUIBuilderClientTypes.CodegenJobGenericDataSchema?
        /// The unique ID for the code generation job.
        /// This member is required.
        public var id: Swift.String?
        /// The time that the code generation job was modified.
        public var modifiedAt: Foundation.Date?
        /// Describes the configuration information for rendering the UI component associated with the code generation job.
        public var renderConfig: AmplifyUIBuilderClientTypes.CodegenJobRenderConfig?
        /// The status of the code generation job.
        public var status: AmplifyUIBuilderClientTypes.CodegenJobStatus?
        /// The customized status message for the code generation job.
        public var statusMessage: Swift.String?
        /// One or more key-value pairs to use when tagging the code generation job.
        public var tags: [Swift.String: Swift.String]?

        public init(
            appId: Swift.String? = nil,
            asset: AmplifyUIBuilderClientTypes.CodegenJobAsset? = nil,
            autoGenerateForms: Swift.Bool? = nil,
            createdAt: Foundation.Date? = nil,
            dependencies: [AmplifyUIBuilderClientTypes.CodegenDependency]? = nil,
            environmentName: Swift.String? = nil,
            features: AmplifyUIBuilderClientTypes.CodegenFeatureFlags? = nil,
            genericDataSchema: AmplifyUIBuilderClientTypes.CodegenJobGenericDataSchema? = nil,
            id: Swift.String? = nil,
            modifiedAt: Foundation.Date? = nil,
            renderConfig: AmplifyUIBuilderClientTypes.CodegenJobRenderConfig? = nil,
            status: AmplifyUIBuilderClientTypes.CodegenJobStatus? = nil,
            statusMessage: Swift.String? = nil,
            tags: [Swift.String: Swift.String]? = nil
        )
        {
            self.appId = appId
            self.asset = asset
            self.autoGenerateForms = autoGenerateForms
            self.createdAt = createdAt
            self.dependencies = dependencies
            self.environmentName = environmentName
            self.features = features
            self.genericDataSchema = genericDataSchema
            self.id = id
            self.modifiedAt = modifiedAt
            self.renderConfig = renderConfig
            self.status = status
            self.statusMessage = statusMessage
            self.tags = tags
        }
    }
}

public struct GetCodegenJobOutput: Swift.Sendable {
    /// The configuration settings for the code generation job.
    public var job: AmplifyUIBuilderClientTypes.CodegenJob?

    public init(
        job: AmplifyUIBuilderClientTypes.CodegenJob? = nil
    )
    {
        self.job = job
    }
}

public struct ListCodegenJobsInput: Swift.Sendable {
    /// The unique ID for the Amplify app.
    /// This member is required.
    public var appId: Swift.String?
    /// The name of the backend environment that is a part of the Amplify app.
    /// This member is required.
    public var environmentName: Swift.String?
    /// The maximum number of jobs to retrieve.
    public var maxResults: Swift.Int?
    /// The token to request the next page of results.
    public var nextToken: Swift.String?

    public init(
        appId: Swift.String? = nil,
        environmentName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.appId = appId
        self.environmentName = environmentName
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension AmplifyUIBuilderClientTypes {

    /// A summary of the basic information about the code generation job.
    public struct CodegenJobSummary: Swift.Sendable {
        /// The unique ID of the Amplify app associated with the code generation job.
        /// This member is required.
        public var appId: Swift.String?
        /// The time that the code generation job summary was created.
        public var createdAt: Foundation.Date?
        /// The name of the backend environment associated with the code generation job.
        /// This member is required.
        public var environmentName: Swift.String?
        /// The unique ID for the code generation job summary.
        /// This member is required.
        public var id: Swift.String?
        /// The time that the code generation job summary was modified.
        public var modifiedAt: Foundation.Date?

        public init(
            appId: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            environmentName: Swift.String? = nil,
            id: Swift.String? = nil,
            modifiedAt: Foundation.Date? = nil
        )
        {
            self.appId = appId
            self.createdAt = createdAt
            self.environmentName = environmentName
            self.id = id
            self.modifiedAt = modifiedAt
        }
    }
}

public struct ListCodegenJobsOutput: Swift.Sendable {
    /// The list of code generation jobs for the Amplify app.
    /// This member is required.
    public var entities: [AmplifyUIBuilderClientTypes.CodegenJobSummary]?
    /// The pagination token that's included if more results are available.
    public var nextToken: Swift.String?

    public init(
        entities: [AmplifyUIBuilderClientTypes.CodegenJobSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.entities = entities
        self.nextToken = nextToken
    }
}

extension AmplifyUIBuilderClientTypes {

    /// The code generation job resource configuration.
    public struct StartCodegenJobData: Swift.Sendable {
        /// Specifies whether to autogenerate forms in the code generation job.
        public var autoGenerateForms: Swift.Bool?
        /// The feature flags for a code generation job.
        public var features: AmplifyUIBuilderClientTypes.CodegenFeatureFlags?
        /// The data schema to use for a code generation job.
        public var genericDataSchema: AmplifyUIBuilderClientTypes.CodegenJobGenericDataSchema?
        /// The code generation configuration for the codegen job.
        /// This member is required.
        public var renderConfig: AmplifyUIBuilderClientTypes.CodegenJobRenderConfig?
        /// One or more key-value pairs to use when tagging the code generation job data.
        public var tags: [Swift.String: Swift.String]?

        public init(
            autoGenerateForms: Swift.Bool? = nil,
            features: AmplifyUIBuilderClientTypes.CodegenFeatureFlags? = nil,
            genericDataSchema: AmplifyUIBuilderClientTypes.CodegenJobGenericDataSchema? = nil,
            renderConfig: AmplifyUIBuilderClientTypes.CodegenJobRenderConfig? = nil,
            tags: [Swift.String: Swift.String]? = nil
        )
        {
            self.autoGenerateForms = autoGenerateForms
            self.features = features
            self.genericDataSchema = genericDataSchema
            self.renderConfig = renderConfig
            self.tags = tags
        }
    }
}

public struct StartCodegenJobInput: Swift.Sendable {
    /// The unique ID for the Amplify app.
    /// This member is required.
    public var appId: Swift.String?
    /// The idempotency token used to ensure that the code generation job request completes only once.
    public var clientToken: Swift.String?
    /// The code generation job resource configuration.
    /// This member is required.
    public var codegenJobToCreate: AmplifyUIBuilderClientTypes.StartCodegenJobData?
    /// The name of the backend environment that is a part of the Amplify app.
    /// This member is required.
    public var environmentName: Swift.String?

    public init(
        appId: Swift.String? = nil,
        clientToken: Swift.String? = nil,
        codegenJobToCreate: AmplifyUIBuilderClientTypes.StartCodegenJobData? = nil,
        environmentName: Swift.String? = nil
    )
    {
        self.appId = appId
        self.clientToken = clientToken
        self.codegenJobToCreate = codegenJobToCreate
        self.environmentName = environmentName
    }
}

public struct StartCodegenJobOutput: Swift.Sendable {
    /// The code generation job for a UI component that is associated with an Amplify app.
    public var entity: AmplifyUIBuilderClientTypes.CodegenJob?

    public init(
        entity: AmplifyUIBuilderClientTypes.CodegenJob? = nil
    )
    {
        self.entity = entity
    }
}

/// The resource specified in the request conflicts with an existing resource.
public struct ResourceConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// You exceeded your service quota. Service quotas, also referred to as limits, are the maximum number of service resources or operations for your Amazon Web Services account.
public struct ServiceQuotaExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceQuotaExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension AmplifyUIBuilderClientTypes {

    public enum SortDirection: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case asc
        case desc
        case sdkUnknown(Swift.String)

        public static var allCases: [SortDirection] {
            return [
                .asc,
                .desc
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .asc: return "ASC"
            case .desc: return "DESC"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Describes how to sort the data that you bind to a component.
    public struct SortProperty: Swift.Sendable {
        /// The direction of the sort, either ascending or descending.
        /// This member is required.
        public var direction: AmplifyUIBuilderClientTypes.SortDirection?
        /// The field to perform the sort on.
        /// This member is required.
        public var field: Swift.String?

        public init(
            direction: AmplifyUIBuilderClientTypes.SortDirection? = nil,
            field: Swift.String? = nil
        )
        {
            self.direction = direction
            self.field = field
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Describes the style configuration of a unique variation of a main component.
    public struct ComponentVariant: Swift.Sendable {
        /// The properties of the component variant that can be overriden when customizing an instance of the component. You can't specify tags as a valid property for overrides.
        public var overrides: [Swift.String: [Swift.String: Swift.String]]?
        /// The combination of variants that comprise this variant. You can't specify tags as a valid property for variantValues.
        public var variantValues: [Swift.String: Swift.String]?

        public init(
            overrides: [Swift.String: [Swift.String: Swift.String]]? = nil,
            variantValues: [Swift.String: Swift.String]? = nil
        )
        {
            self.overrides = overrides
            self.variantValues = variantValues
        }
    }
}

public struct DeleteComponentInput: Swift.Sendable {
    /// The unique ID of the Amplify app associated with the component to delete.
    /// This member is required.
    public var appId: Swift.String?
    /// The name of the backend environment that is a part of the Amplify app.
    /// This member is required.
    public var environmentName: Swift.String?
    /// The unique ID of the component to delete.
    /// This member is required.
    public var id: Swift.String?

    public init(
        appId: Swift.String? = nil,
        environmentName: Swift.String? = nil,
        id: Swift.String? = nil
    )
    {
        self.appId = appId
        self.environmentName = environmentName
        self.id = id
    }
}

public struct ExportComponentsInput: Swift.Sendable {
    /// The unique ID of the Amplify app to export components to.
    /// This member is required.
    public var appId: Swift.String?
    /// The name of the backend environment that is a part of the Amplify app.
    /// This member is required.
    public var environmentName: Swift.String?
    /// The token to request the next page of results.
    public var nextToken: Swift.String?

    public init(
        appId: Swift.String? = nil,
        environmentName: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.appId = appId
        self.environmentName = environmentName
        self.nextToken = nextToken
    }
}

public struct GetComponentInput: Swift.Sendable {
    /// The unique ID of the Amplify app.
    /// This member is required.
    public var appId: Swift.String?
    /// The name of the backend environment that is part of the Amplify app.
    /// This member is required.
    public var environmentName: Swift.String?
    /// The unique ID of the component.
    /// This member is required.
    public var id: Swift.String?

    public init(
        appId: Swift.String? = nil,
        environmentName: Swift.String? = nil,
        id: Swift.String? = nil
    )
    {
        self.appId = appId
        self.environmentName = environmentName
        self.id = id
    }
}

public struct ListComponentsInput: Swift.Sendable {
    /// The unique ID for the Amplify app.
    /// This member is required.
    public var appId: Swift.String?
    /// The name of the backend environment that is a part of the Amplify app.
    /// This member is required.
    public var environmentName: Swift.String?
    /// The maximum number of components to retrieve.
    public var maxResults: Swift.Int?
    /// The token to request the next page of results.
    public var nextToken: Swift.String?

    public init(
        appId: Swift.String? = nil,
        environmentName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.appId = appId
        self.environmentName = environmentName
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Contains a summary of a component. This is a read-only data type that is returned by ListComponents.
    public struct ComponentSummary: Swift.Sendable {
        /// The unique ID of the Amplify app associated with the component.
        /// This member is required.
        public var appId: Swift.String?
        /// The component type.
        /// This member is required.
        public var componentType: Swift.String?
        /// The name of the backend environment that is a part of the Amplify app.
        /// This member is required.
        public var environmentName: Swift.String?
        /// The unique ID of the component.
        /// This member is required.
        public var id: Swift.String?
        /// The name of the component.
        /// This member is required.
        public var name: Swift.String?

        public init(
            appId: Swift.String? = nil,
            componentType: Swift.String? = nil,
            environmentName: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.appId = appId
            self.componentType = componentType
            self.environmentName = environmentName
            self.id = id
            self.name = name
        }
    }
}

public struct ListComponentsOutput: Swift.Sendable {
    /// The list of components for the Amplify app.
    /// This member is required.
    public var entities: [AmplifyUIBuilderClientTypes.ComponentSummary]?
    /// The pagination token that's included if more results are available.
    public var nextToken: Swift.String?

    public init(
        entities: [AmplifyUIBuilderClientTypes.ComponentSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.entities = entities
        self.nextToken = nextToken
    }
}

extension AmplifyUIBuilderClientTypes {

    public enum TokenProviders: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        /// The figma token provider.
        case figma
        case sdkUnknown(Swift.String)

        public static var allCases: [TokenProviders] {
            return [
                .figma
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .figma: return "figma"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Describes the configuration of a request to exchange an access code for a token.
    public struct ExchangeCodeForTokenRequestBody: Swift.Sendable {
        /// The ID of the client to request the token from.
        public var clientId: Swift.String?
        /// The access code to send in the request.
        /// This member is required.
        public var code: Swift.String?
        /// The location of the application that will receive the access code.
        /// This member is required.
        public var redirectUri: Swift.String?

        public init(
            clientId: Swift.String? = nil,
            code: Swift.String? = nil,
            redirectUri: Swift.String? = nil
        )
        {
            self.clientId = clientId
            self.code = code
            self.redirectUri = redirectUri
        }
    }
}

extension AmplifyUIBuilderClientTypes.ExchangeCodeForTokenRequestBody: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExchangeCodeForTokenRequestBody(redirectUri: \(Swift.String(describing: redirectUri)), clientId: \"CONTENT_REDACTED\", code: \"CONTENT_REDACTED\")"}
}

public struct ExchangeCodeForTokenInput: Swift.Sendable {
    /// The third-party provider for the token. The only valid value is figma.
    /// This member is required.
    public var provider: AmplifyUIBuilderClientTypes.TokenProviders?
    /// Describes the configuration of the request.
    /// This member is required.
    public var request: AmplifyUIBuilderClientTypes.ExchangeCodeForTokenRequestBody?

    public init(
        provider: AmplifyUIBuilderClientTypes.TokenProviders? = nil,
        request: AmplifyUIBuilderClientTypes.ExchangeCodeForTokenRequestBody? = nil
    )
    {
        self.provider = provider
        self.request = request
    }
}

public struct ExchangeCodeForTokenOutput: Swift.Sendable {
    /// The access token.
    /// This member is required.
    public var accessToken: Swift.String?
    /// The date and time when the new access token expires.
    /// This member is required.
    public var expiresIn: Swift.Int?
    /// The token to use to refresh a previously issued access token that might have expired.
    /// This member is required.
    public var refreshToken: Swift.String?

    public init(
        accessToken: Swift.String? = nil,
        expiresIn: Swift.Int? = nil,
        refreshToken: Swift.String? = nil
    )
    {
        self.accessToken = accessToken
        self.expiresIn = expiresIn
        self.refreshToken = refreshToken
    }
}

extension ExchangeCodeForTokenOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExchangeCodeForTokenOutput(expiresIn: \(Swift.String(describing: expiresIn)), accessToken: \"CONTENT_REDACTED\", refreshToken: \"CONTENT_REDACTED\")"}
}

extension AmplifyUIBuilderClientTypes {

    public enum FixedPosition: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case first
        case sdkUnknown(Swift.String)

        public static var allCases: [FixedPosition] {
            return [
                .first
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .first: return "first"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Describes the field position.
    public enum FieldPosition: Swift.Sendable {
        /// The field position is fixed and doesn't change in relation to other fields.
        case fixed(AmplifyUIBuilderClientTypes.FixedPosition)
        /// The field position is to the right of the field specified by the string.
        case rightof(Swift.String)
        /// The field position is below the field specified by the string.
        case below(Swift.String)
        case sdkUnknown(Swift.String)
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Describes the configuration for a button UI element that is a part of a form.
    public struct FormButton: Swift.Sendable {
        /// Describes the button's properties.
        public var children: Swift.String?
        /// Specifies whether the button is visible on the form.
        public var excluded: Swift.Bool?
        /// The position of the button.
        public var position: AmplifyUIBuilderClientTypes.FieldPosition?

        public init(
            children: Swift.String? = nil,
            excluded: Swift.Bool? = nil,
            position: AmplifyUIBuilderClientTypes.FieldPosition? = nil
        )
        {
            self.children = children
            self.excluded = excluded
            self.position = position
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    public enum FormButtonsPosition: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bottom
        case top
        case topAndBottom
        case sdkUnknown(Swift.String)

        public static var allCases: [FormButtonsPosition] {
            return [
                .bottom,
                .top,
                .topAndBottom
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bottom: return "bottom"
            case .top: return "top"
            case .topAndBottom: return "top_and_bottom"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Describes the call to action button configuration for the form.
    public struct FormCTA: Swift.Sendable {
        /// Displays a cancel button.
        public var cancel: AmplifyUIBuilderClientTypes.FormButton?
        /// Displays a clear button.
        public var clear: AmplifyUIBuilderClientTypes.FormButton?
        /// The position of the button.
        public var position: AmplifyUIBuilderClientTypes.FormButtonsPosition?
        /// Displays a submit button.
        public var submit: AmplifyUIBuilderClientTypes.FormButton?

        public init(
            cancel: AmplifyUIBuilderClientTypes.FormButton? = nil,
            clear: AmplifyUIBuilderClientTypes.FormButton? = nil,
            position: AmplifyUIBuilderClientTypes.FormButtonsPosition? = nil,
            submit: AmplifyUIBuilderClientTypes.FormButton? = nil
        )
        {
            self.cancel = cancel
            self.clear = clear
            self.position = position
            self.submit = submit
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    public enum FormDataSourceType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        /// Will use passed in hooks to use when creating a form from scratch
        case custom
        /// Will use a provided Amplify DataStore enabled API
        case datastore
        case sdkUnknown(Swift.String)

        public static var allCases: [FormDataSourceType] {
            return [
                .custom,
                .datastore
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .custom: return "Custom"
            case .datastore: return "DataStore"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Describes the data type configuration for the data source associated with a form.
    public struct FormDataTypeConfig: Swift.Sendable {
        /// The data source type, either an Amplify DataStore model or a custom data type.
        /// This member is required.
        public var dataSourceType: AmplifyUIBuilderClientTypes.FormDataSourceType?
        /// The unique name of the data type you are using as the data source for the form.
        /// This member is required.
        public var dataTypeName: Swift.String?

        public init(
            dataSourceType: AmplifyUIBuilderClientTypes.FormDataSourceType? = nil,
            dataTypeName: Swift.String? = nil
        )
        {
            self.dataSourceType = dataSourceType
            self.dataTypeName = dataTypeName
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    public enum StorageAccessLevel: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `private`
        case protected
        case `public`
        case sdkUnknown(Swift.String)

        public static var allCases: [StorageAccessLevel] {
            return [
                .private,
                .protected,
                .public
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .private: return "private"
            case .protected: return "protected"
            case .public: return "public"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Describes the configuration for the file uploader field.
    public struct FileUploaderFieldConfig: Swift.Sendable {
        /// The file types that are allowed to be uploaded by the file uploader. Provide this information in an array of strings specifying the valid file extensions.
        /// This member is required.
        public var acceptedFileTypes: [Swift.String]?
        /// The access level to assign to the uploaded files in the Amazon S3 bucket where they are stored. The valid values for this property are private, protected, or public. For detailed information about the permissions associated with each access level, see [File access levels](https://docs.amplify.aws/lib/storage/configureaccess/q/platform/js/) in the Amplify documentation.
        /// This member is required.
        public var accessLevel: AmplifyUIBuilderClientTypes.StorageAccessLevel?
        /// Allows the file upload operation to be paused and resumed. The default value is false. When isResumable is set to true, the file uploader uses a multipart upload to break the files into chunks before upload. The progress of the upload isn't continuous, because the file uploader uploads a chunk at a time.
        public var isResumable: Swift.Bool?
        /// Specifies the maximum number of files that can be selected to upload. The default value is an unlimited number of files.
        public var maxFileCount: Swift.Int?
        /// The maximum file size in bytes that the file uploader will accept. The default value is an unlimited file size.
        public var maxSize: Swift.Int?
        /// Specifies whether to display or hide the image preview after selecting a file for upload. The default value is true to display the image preview.
        public var showThumbnails: Swift.Bool?

        public init(
            acceptedFileTypes: [Swift.String]? = nil,
            accessLevel: AmplifyUIBuilderClientTypes.StorageAccessLevel? = nil,
            isResumable: Swift.Bool? = nil,
            maxFileCount: Swift.Int? = nil,
            maxSize: Swift.Int? = nil,
            showThumbnails: Swift.Bool? = nil
        )
        {
            self.acceptedFileTypes = acceptedFileTypes
            self.accessLevel = accessLevel
            self.isResumable = isResumable
            self.maxFileCount = maxFileCount
            self.maxSize = maxSize
            self.showThumbnails = showThumbnails
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Represents the data binding configuration for a specific property using data stored in Amazon Web Services. For Amazon Web Services connected properties, you can bind a property to data stored in an Amplify DataStore model.
    public struct FormInputBindingPropertiesValueProperties: Swift.Sendable {
        /// An Amplify DataStore model.
        public var model: Swift.String?

        public init(
            model: Swift.String? = nil
        )
        {
            self.model = model
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Represents the data binding configuration for a form's input fields at runtime.You can use FormInputBindingPropertiesValue to add exposed properties to a form to allow different values to be entered when a form is reused in different places in an app.
    public struct FormInputBindingPropertiesValue: Swift.Sendable {
        /// Describes the properties to customize with data at runtime.
        public var bindingProperties: AmplifyUIBuilderClientTypes.FormInputBindingPropertiesValueProperties?
        /// The property type.
        public var type: Swift.String?

        public init(
            bindingProperties: AmplifyUIBuilderClientTypes.FormInputBindingPropertiesValueProperties? = nil,
            type: Swift.String? = nil
        )
        {
            self.bindingProperties = bindingProperties
            self.type = type
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Associates a form property to a binding property. This enables exposed properties on the top level form to propagate data to the form's property values.
    public struct FormInputValuePropertyBindingProperties: Swift.Sendable {
        /// The data field to bind the property to.
        public var field: Swift.String?
        /// The form property to bind to the data field.
        /// This member is required.
        public var property: Swift.String?

        public init(
            field: Swift.String? = nil,
            property: Swift.String? = nil
        )
        {
            self.field = field
            self.property = property
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Describes the validation configuration for a field.
    public struct FieldValidationConfiguration: Swift.Sendable {
        /// The validation to perform on a number value.
        public var numValues: [Swift.Int]?
        /// The validation to perform on a string value.
        public var strValues: [Swift.String]?
        /// The validation to perform on an object type.
        /// This member is required.
        public var type: Swift.String?
        /// The validation message to display.
        public var validationMessage: Swift.String?

        public init(
            numValues: [Swift.Int]? = nil,
            strValues: [Swift.String]? = nil,
            type: Swift.String? = nil,
            validationMessage: Swift.String? = nil
        )
        {
            self.numValues = numValues
            self.strValues = strValues
            self.type = type
            self.validationMessage = validationMessage
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    public enum FormActionType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case create
        case update
        case sdkUnknown(Swift.String)

        public static var allCases: [FormActionType] {
            return [
                .create,
                .update
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .create: return "create"
            case .update: return "update"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    public enum LabelDecorator: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `none`
        case `optional`
        case `required`
        case sdkUnknown(Swift.String)

        public static var allCases: [LabelDecorator] {
            return [
                .none,
                .optional,
                .required
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .none: return "none"
            case .optional: return "optional"
            case .required: return "required"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Stores the configuration information for a visual helper element for a form. A sectional element can be a header, a text block, or a divider. These elements are static and not associated with any data.
    public struct SectionalElement: Swift.Sendable {
        /// Excludes a sectional element that was generated by default for a specified data model.
        public var excluded: Swift.Bool?
        /// Specifies the size of the font for a Heading sectional element. Valid values are 1 | 2 | 3 | 4 | 5 | 6.
        public var level: Swift.Int?
        /// Specifies the orientation for a Divider sectional element. Valid values are horizontal or vertical.
        public var orientation: Swift.String?
        /// Specifies the position of the text in a field for a Text sectional element.
        public var position: AmplifyUIBuilderClientTypes.FieldPosition?
        /// The text for a Text sectional element.
        public var text: Swift.String?
        /// The type of sectional element. Valid values are Heading, Text, and Divider.
        /// This member is required.
        public var type: Swift.String?

        public init(
            excluded: Swift.Bool? = nil,
            level: Swift.Int? = nil,
            orientation: Swift.String? = nil,
            position: AmplifyUIBuilderClientTypes.FieldPosition? = nil,
            text: Swift.String? = nil,
            type: Swift.String? = nil
        )
        {
            self.excluded = excluded
            self.level = level
            self.orientation = orientation
            self.position = position
            self.text = text
            self.type = type
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Describes the configuration settings for the form's style properties.
    public enum FormStyleConfig: Swift.Sendable {
        /// A reference to a design token to use to bind the form's style properties to an existing theme.
        case tokenreference(Swift.String)
        /// The value of the style setting.
        case value(Swift.String)
        case sdkUnknown(Swift.String)
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Describes the configuration for the form's style.
    public struct FormStyle: Swift.Sendable {
        /// The spacing for the horizontal gap.
        public var horizontalGap: AmplifyUIBuilderClientTypes.FormStyleConfig?
        /// The size of the outer padding for the form.
        public var outerPadding: AmplifyUIBuilderClientTypes.FormStyleConfig?
        /// The spacing for the vertical gap.
        public var verticalGap: AmplifyUIBuilderClientTypes.FormStyleConfig?

        public init(
            horizontalGap: AmplifyUIBuilderClientTypes.FormStyleConfig? = nil,
            outerPadding: AmplifyUIBuilderClientTypes.FormStyleConfig? = nil,
            verticalGap: AmplifyUIBuilderClientTypes.FormStyleConfig? = nil
        )
        {
            self.horizontalGap = horizontalGap
            self.outerPadding = outerPadding
            self.verticalGap = verticalGap
        }
    }
}

public struct DeleteFormInput: Swift.Sendable {
    /// The unique ID of the Amplify app associated with the form to delete.
    /// This member is required.
    public var appId: Swift.String?
    /// The name of the backend environment that is a part of the Amplify app.
    /// This member is required.
    public var environmentName: Swift.String?
    /// The unique ID of the form to delete.
    /// This member is required.
    public var id: Swift.String?

    public init(
        appId: Swift.String? = nil,
        environmentName: Swift.String? = nil,
        id: Swift.String? = nil
    )
    {
        self.appId = appId
        self.environmentName = environmentName
        self.id = id
    }
}

public struct ExportFormsInput: Swift.Sendable {
    /// The unique ID of the Amplify app to export forms to.
    /// This member is required.
    public var appId: Swift.String?
    /// The name of the backend environment that is a part of the Amplify app.
    /// This member is required.
    public var environmentName: Swift.String?
    /// The token to request the next page of results.
    public var nextToken: Swift.String?

    public init(
        appId: Swift.String? = nil,
        environmentName: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.appId = appId
        self.environmentName = environmentName
        self.nextToken = nextToken
    }
}

public struct GetFormInput: Swift.Sendable {
    /// The unique ID of the Amplify app.
    /// This member is required.
    public var appId: Swift.String?
    /// The name of the backend environment that is part of the Amplify app.
    /// This member is required.
    public var environmentName: Swift.String?
    /// The unique ID of the form.
    /// This member is required.
    public var id: Swift.String?

    public init(
        appId: Swift.String? = nil,
        environmentName: Swift.String? = nil,
        id: Swift.String? = nil
    )
    {
        self.appId = appId
        self.environmentName = environmentName
        self.id = id
    }
}

public struct ListFormsInput: Swift.Sendable {
    /// The unique ID for the Amplify app.
    /// This member is required.
    public var appId: Swift.String?
    /// The name of the backend environment that is a part of the Amplify app.
    /// This member is required.
    public var environmentName: Swift.String?
    /// The maximum number of forms to retrieve.
    public var maxResults: Swift.Int?
    /// The token to request the next page of results.
    public var nextToken: Swift.String?

    public init(
        appId: Swift.String? = nil,
        environmentName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.appId = appId
        self.environmentName = environmentName
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Describes the basic information about a form.
    public struct FormSummary: Swift.Sendable {
        /// The unique ID for the app associated with the form summary.
        /// This member is required.
        public var appId: Swift.String?
        /// The form's data source type.
        /// This member is required.
        public var dataType: AmplifyUIBuilderClientTypes.FormDataTypeConfig?
        /// The name of the backend environment that is part of the Amplify app.
        /// This member is required.
        public var environmentName: Swift.String?
        /// The type of operation to perform on the form.
        /// This member is required.
        public var formActionType: AmplifyUIBuilderClientTypes.FormActionType?
        /// The ID of the form.
        /// This member is required.
        public var id: Swift.String?
        /// The name of the form.
        /// This member is required.
        public var name: Swift.String?

        public init(
            appId: Swift.String? = nil,
            dataType: AmplifyUIBuilderClientTypes.FormDataTypeConfig? = nil,
            environmentName: Swift.String? = nil,
            formActionType: AmplifyUIBuilderClientTypes.FormActionType? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.appId = appId
            self.dataType = dataType
            self.environmentName = environmentName
            self.formActionType = formActionType
            self.id = id
            self.name = name
        }
    }
}

public struct ListFormsOutput: Swift.Sendable {
    /// The list of forms for the Amplify app.
    /// This member is required.
    public var entities: [AmplifyUIBuilderClientTypes.FormSummary]?
    /// The pagination token that's included if more results are available.
    public var nextToken: Swift.String?

    public init(
        entities: [AmplifyUIBuilderClientTypes.FormSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.entities = entities
        self.nextToken = nextToken
    }
}

/// You don't have permission to perform this operation.
public struct UnauthorizedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnauthorizedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct GetMetadataInput: Swift.Sendable {
    /// The unique ID of the Amplify app.
    /// This member is required.
    public var appId: Swift.String?
    /// The name of the backend environment that is part of the Amplify app.
    /// This member is required.
    public var environmentName: Swift.String?

    public init(
        appId: Swift.String? = nil,
        environmentName: Swift.String? = nil
    )
    {
        self.appId = appId
        self.environmentName = environmentName
    }
}

public struct GetMetadataOutput: Swift.Sendable {
    /// Represents the configuration settings for the features metadata.
    /// This member is required.
    public var features: [Swift.String: Swift.String]?

    public init(
        features: [Swift.String: Swift.String]? = nil
    )
    {
        self.features = features
    }
}

public struct ListTagsForResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) to use to list tags.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct ListTagsForResourceOutput: Swift.Sendable {
    /// A list of tag key value pairs for a specified Amazon Resource Name (ARN).
    /// This member is required.
    public var tags: [Swift.String: Swift.String]?

    public init(
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Stores the metadata information about a feature on a form.
    public struct PutMetadataFlagBody: Swift.Sendable {
        /// The new information to store.
        /// This member is required.
        public var newValue: Swift.String?

        public init(
            newValue: Swift.String? = nil
        )
        {
            self.newValue = newValue
        }
    }
}

public struct PutMetadataFlagInput: Swift.Sendable {
    /// The unique ID for the Amplify app.
    /// This member is required.
    public var appId: Swift.String?
    /// The metadata information to store.
    /// This member is required.
    public var body: AmplifyUIBuilderClientTypes.PutMetadataFlagBody?
    /// The name of the backend environment that is part of the Amplify app.
    /// This member is required.
    public var environmentName: Swift.String?
    /// The name of the feature associated with the metadata.
    /// This member is required.
    public var featureName: Swift.String?

    public init(
        appId: Swift.String? = nil,
        body: AmplifyUIBuilderClientTypes.PutMetadataFlagBody? = nil,
        environmentName: Swift.String? = nil,
        featureName: Swift.String? = nil
    )
    {
        self.appId = appId
        self.body = body
        self.environmentName = environmentName
        self.featureName = featureName
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Describes a refresh token.
    public struct RefreshTokenRequestBody: Swift.Sendable {
        /// The ID of the client to request the token from.
        public var clientId: Swift.String?
        /// The token to use to refresh a previously issued access token that might have expired.
        /// This member is required.
        public var token: Swift.String?

        public init(
            clientId: Swift.String? = nil,
            token: Swift.String? = nil
        )
        {
            self.clientId = clientId
            self.token = token
        }
    }
}

extension AmplifyUIBuilderClientTypes.RefreshTokenRequestBody: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RefreshTokenRequestBody(clientId: \"CONTENT_REDACTED\", token: \"CONTENT_REDACTED\")"}
}

public struct RefreshTokenInput: Swift.Sendable {
    /// The third-party provider for the token. The only valid value is figma.
    /// This member is required.
    public var provider: AmplifyUIBuilderClientTypes.TokenProviders?
    /// Information about the refresh token request.
    /// This member is required.
    public var refreshTokenBody: AmplifyUIBuilderClientTypes.RefreshTokenRequestBody?

    public init(
        provider: AmplifyUIBuilderClientTypes.TokenProviders? = nil,
        refreshTokenBody: AmplifyUIBuilderClientTypes.RefreshTokenRequestBody? = nil
    )
    {
        self.provider = provider
        self.refreshTokenBody = refreshTokenBody
    }
}

public struct RefreshTokenOutput: Swift.Sendable {
    /// The access token.
    /// This member is required.
    public var accessToken: Swift.String?
    /// The date and time when the new access token expires.
    /// This member is required.
    public var expiresIn: Swift.Int?

    public init(
        accessToken: Swift.String? = nil,
        expiresIn: Swift.Int? = nil
    )
    {
        self.accessToken = accessToken
        self.expiresIn = expiresIn
    }
}

extension RefreshTokenOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RefreshTokenOutput(expiresIn: \(Swift.String(describing: expiresIn)), accessToken: \"CONTENT_REDACTED\")"}
}

public struct TagResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) to use to tag a resource.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// A list of tag key value pairs for a specified Amazon Resource Name (ARN).
    /// This member is required.
    public var tags: [Swift.String: Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

public struct TagResourceOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteThemeInput: Swift.Sendable {
    /// The unique ID of the Amplify app associated with the theme to delete.
    /// This member is required.
    public var appId: Swift.String?
    /// The name of the backend environment that is a part of the Amplify app.
    /// This member is required.
    public var environmentName: Swift.String?
    /// The unique ID of the theme to delete.
    /// This member is required.
    public var id: Swift.String?

    public init(
        appId: Swift.String? = nil,
        environmentName: Swift.String? = nil,
        id: Swift.String? = nil
    )
    {
        self.appId = appId
        self.environmentName = environmentName
        self.id = id
    }
}

public struct ExportThemesInput: Swift.Sendable {
    /// The unique ID of the Amplify app to export the themes to.
    /// This member is required.
    public var appId: Swift.String?
    /// The name of the backend environment that is part of the Amplify app.
    /// This member is required.
    public var environmentName: Swift.String?
    /// The token to request the next page of results.
    public var nextToken: Swift.String?

    public init(
        appId: Swift.String? = nil,
        environmentName: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.appId = appId
        self.environmentName = environmentName
        self.nextToken = nextToken
    }
}

public struct GetThemeInput: Swift.Sendable {
    /// The unique ID of the Amplify app.
    /// This member is required.
    public var appId: Swift.String?
    /// The name of the backend environment that is part of the Amplify app.
    /// This member is required.
    public var environmentName: Swift.String?
    /// The unique ID for the theme.
    /// This member is required.
    public var id: Swift.String?

    public init(
        appId: Swift.String? = nil,
        environmentName: Swift.String? = nil,
        id: Swift.String? = nil
    )
    {
        self.appId = appId
        self.environmentName = environmentName
        self.id = id
    }
}

public struct ListThemesInput: Swift.Sendable {
    /// The unique ID for the Amplify app.
    /// This member is required.
    public var appId: Swift.String?
    /// The name of the backend environment that is a part of the Amplify app.
    /// This member is required.
    public var environmentName: Swift.String?
    /// The maximum number of theme results to return in the response.
    public var maxResults: Swift.Int?
    /// The token to request the next page of results.
    public var nextToken: Swift.String?

    public init(
        appId: Swift.String? = nil,
        environmentName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.appId = appId
        self.environmentName = environmentName
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Describes the basic information about a theme.
    public struct ThemeSummary: Swift.Sendable {
        /// The unique ID for the app associated with the theme summary.
        /// This member is required.
        public var appId: Swift.String?
        /// The name of the backend environment that is part of the Amplify app.
        /// This member is required.
        public var environmentName: Swift.String?
        /// The ID of the theme.
        /// This member is required.
        public var id: Swift.String?
        /// The name of the theme.
        /// This member is required.
        public var name: Swift.String?

        public init(
            appId: Swift.String? = nil,
            environmentName: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.appId = appId
            self.environmentName = environmentName
            self.id = id
            self.name = name
        }
    }
}

public struct ListThemesOutput: Swift.Sendable {
    /// The list of themes for the Amplify app.
    /// This member is required.
    public var entities: [AmplifyUIBuilderClientTypes.ThemeSummary]?
    /// The pagination token that's returned if more results are available.
    public var nextToken: Swift.String?

    public init(
        entities: [AmplifyUIBuilderClientTypes.ThemeSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.entities = entities
        self.nextToken = nextToken
    }
}

public struct UntagResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) to use to untag a resource.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The tag keys to use to untag a resource.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

public struct UntagResourceOutput: Swift.Sendable {

    public init() { }
}

extension AmplifyUIBuilderClientTypes {

    /// Describes the configuration for an input field on a form. Use FormInputValueProperty to specify the values to render or bind by default.
    public struct FormInputValueProperty: Swift.Sendable {
        /// The information to bind fields to data at runtime.
        public var bindingProperties: AmplifyUIBuilderClientTypes.FormInputValuePropertyBindingProperties?
        /// A list of form properties to concatenate to create the value to assign to this field property.
        public var concat: [AmplifyUIBuilderClientTypes.FormInputValueProperty]?
        /// The value to assign to the input field.
        public var value: Swift.String?

        public init(
            bindingProperties: AmplifyUIBuilderClientTypes.FormInputValuePropertyBindingProperties? = nil,
            concat: [AmplifyUIBuilderClientTypes.FormInputValueProperty]? = nil,
            value: Swift.String? = nil
        )
        {
            self.bindingProperties = bindingProperties
            self.concat = concat
            self.value = value
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Describes the configuration of a theme's properties.
    public struct ThemeValue: Swift.Sendable {
        /// A list of key-value pairs that define the theme's properties.
        public var children: [AmplifyUIBuilderClientTypes.ThemeValues]?
        /// The value of a theme property.
        public var value: Swift.String?

        public init(
            children: [AmplifyUIBuilderClientTypes.ThemeValues]? = nil,
            value: Swift.String? = nil
        )
        {
            self.children = children
            self.value = value
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// A key-value pair that defines a property of a theme.
    public struct ThemeValues: Swift.Sendable {
        /// The name of the property.
        public var key: Swift.String?
        /// The value of the property.
        public var value: AmplifyUIBuilderClientTypes.ThemeValue?

        public init(
            key: Swift.String? = nil,
            value: AmplifyUIBuilderClientTypes.ThemeValue? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Stores information for generating Amplify DataStore queries. Use a Predicate to retrieve a subset of the data in a collection.
    public struct Predicate: Swift.Sendable {
        /// A list of predicates to combine logically.
        public var and: [AmplifyUIBuilderClientTypes.Predicate]?
        /// The field to query.
        public var field: Swift.String?
        /// The value to use when performing the evaluation.
        public var operand: Swift.String?
        /// The type of value to use when performing the evaluation.
        public var operandType: Swift.String?
        /// The operator to use to perform the evaluation.
        public var `operator`: Swift.String?
        /// A list of predicates to combine logically.
        public var or: [AmplifyUIBuilderClientTypes.Predicate]?

        public init(
            and: [AmplifyUIBuilderClientTypes.Predicate]? = nil,
            field: Swift.String? = nil,
            operand: Swift.String? = nil,
            operandType: Swift.String? = nil,
            `operator`: Swift.String? = nil,
            or: [AmplifyUIBuilderClientTypes.Predicate]? = nil
        )
        {
            self.and = and
            self.field = field
            self.operand = operand
            self.operandType = operandType
            self.`operator` = `operator`
            self.or = or
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Represents the data binding configuration for a specific property using data stored in Amazon Web Services. For Amazon Web Services connected properties, you can bind a property to data stored in an Amazon S3 bucket, an Amplify DataStore model or an authenticated user attribute.
    public struct ComponentBindingPropertiesValueProperties: Swift.Sendable {
        /// An Amazon S3 bucket.
        public var bucket: Swift.String?
        /// The default value to assign to the property.
        public var defaultValue: Swift.String?
        /// The field to bind the data to.
        public var field: Swift.String?
        /// The storage key for an Amazon S3 bucket.
        public var key: Swift.String?
        /// An Amplify DataStore model.
        public var model: Swift.String?
        /// A list of predicates for binding a component's properties to data.
        public var predicates: [AmplifyUIBuilderClientTypes.Predicate]?
        /// The name of a component slot.
        public var slotName: Swift.String?
        /// An authenticated user attribute.
        public var userAttribute: Swift.String?

        public init(
            bucket: Swift.String? = nil,
            defaultValue: Swift.String? = nil,
            field: Swift.String? = nil,
            key: Swift.String? = nil,
            model: Swift.String? = nil,
            predicates: [AmplifyUIBuilderClientTypes.Predicate]? = nil,
            slotName: Swift.String? = nil,
            userAttribute: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.defaultValue = defaultValue
            self.field = field
            self.key = key
            self.model = model
            self.predicates = predicates
            self.slotName = slotName
            self.userAttribute = userAttribute
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Describes the configuration for binding a component's properties to data.
    public struct ComponentDataConfiguration: Swift.Sendable {
        /// A list of IDs to use to bind data to a component. Use this property to bind specifically chosen data, rather than data retrieved from a query.
        public var identifiers: [Swift.String]?
        /// The name of the data model to use to bind data to a component.
        /// This member is required.
        public var model: Swift.String?
        /// Represents the conditional logic to use when binding data to a component. Use this property to retrieve only a subset of the data in a collection.
        public var predicate: AmplifyUIBuilderClientTypes.Predicate?
        /// Describes how to sort the component's properties.
        public var sort: [AmplifyUIBuilderClientTypes.SortProperty]?

        public init(
            identifiers: [Swift.String]? = nil,
            model: Swift.String? = nil,
            predicate: AmplifyUIBuilderClientTypes.Predicate? = nil,
            sort: [AmplifyUIBuilderClientTypes.SortProperty]? = nil
        )
        {
            self.identifiers = identifiers
            self.model = model
            self.predicate = predicate
            self.sort = sort
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Describes the configuration for all of a component's properties. Use ComponentProperty to specify the values to render or bind by default.
    public struct ComponentProperty: Swift.Sendable {
        /// The information to bind the component property to data at runtime.
        public var bindingProperties: AmplifyUIBuilderClientTypes.ComponentPropertyBindingProperties?
        /// The information to bind the component property to form data.
        public var bindings: [Swift.String: AmplifyUIBuilderClientTypes.FormBindingElement]?
        /// The information to bind the component property to data at runtime. Use this for collection components.
        public var collectionBindingProperties: AmplifyUIBuilderClientTypes.ComponentPropertyBindingProperties?
        /// The name of the component that is affected by an event.
        public var componentName: Swift.String?
        /// A list of component properties to concatenate to create the value to assign to this component property.
        public var concat: [AmplifyUIBuilderClientTypes.ComponentProperty]?
        /// The conditional expression to use to assign a value to the component property.
        public var condition: AmplifyUIBuilderClientTypes.ComponentConditionProperty?
        /// Specifies whether the user configured the property in Amplify Studio after importing it.
        public var configured: Swift.Bool?
        /// The default value to assign to the component property.
        public var defaultValue: Swift.String?
        /// An event that occurs in your app. Use this for workflow data binding.
        public var event: Swift.String?
        /// The default value assigned to the property when the component is imported into an app.
        public var importedValue: Swift.String?
        /// The data model to use to assign a value to the component property.
        public var model: Swift.String?
        /// The name of the component's property that is affected by an event.
        public var property: Swift.String?
        /// The component type.
        public var type: Swift.String?
        /// An authenticated user attribute to use to assign a value to the component property.
        public var userAttribute: Swift.String?
        /// The value to assign to the component property.
        public var value: Swift.String?

        public init(
            bindingProperties: AmplifyUIBuilderClientTypes.ComponentPropertyBindingProperties? = nil,
            bindings: [Swift.String: AmplifyUIBuilderClientTypes.FormBindingElement]? = nil,
            collectionBindingProperties: AmplifyUIBuilderClientTypes.ComponentPropertyBindingProperties? = nil,
            componentName: Swift.String? = nil,
            concat: [AmplifyUIBuilderClientTypes.ComponentProperty]? = nil,
            condition: AmplifyUIBuilderClientTypes.ComponentConditionProperty? = nil,
            configured: Swift.Bool? = nil,
            defaultValue: Swift.String? = nil,
            event: Swift.String? = nil,
            importedValue: Swift.String? = nil,
            model: Swift.String? = nil,
            property: Swift.String? = nil,
            type: Swift.String? = nil,
            userAttribute: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.bindingProperties = bindingProperties
            self.bindings = bindings
            self.collectionBindingProperties = collectionBindingProperties
            self.componentName = componentName
            self.concat = concat
            self.condition = condition
            self.configured = configured
            self.defaultValue = defaultValue
            self.event = event
            self.importedValue = importedValue
            self.model = model
            self.property = property
            self.type = type
            self.userAttribute = userAttribute
            self.value = value
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Associates a complex object with a display value. Use ValueMapping to store how to represent complex objects when they are displayed.
    public struct ValueMapping: Swift.Sendable {
        /// The value to display for the complex object.
        public var displayValue: AmplifyUIBuilderClientTypes.FormInputValueProperty?
        /// The complex object.
        /// This member is required.
        public var value: AmplifyUIBuilderClientTypes.FormInputValueProperty?

        public init(
            displayValue: AmplifyUIBuilderClientTypes.FormInputValueProperty? = nil,
            value: AmplifyUIBuilderClientTypes.FormInputValueProperty? = nil
        )
        {
            self.displayValue = displayValue
            self.value = value
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Represents the data binding configuration for a component at runtime. You can use ComponentBindingPropertiesValue to add exposed properties to a component to allow different values to be entered when a component is reused in different places in an app.
    public struct ComponentBindingPropertiesValue: Swift.Sendable {
        /// Describes the properties to customize with data at runtime.
        public var bindingProperties: AmplifyUIBuilderClientTypes.ComponentBindingPropertiesValueProperties?
        /// The default value of the property.
        public var defaultValue: Swift.String?
        /// The property type.
        public var type: Swift.String?

        public init(
            bindingProperties: AmplifyUIBuilderClientTypes.ComponentBindingPropertiesValueProperties? = nil,
            defaultValue: Swift.String? = nil,
            type: Swift.String? = nil
        )
        {
            self.bindingProperties = bindingProperties
            self.defaultValue = defaultValue
            self.type = type
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Represents all of the information that is required to create a theme.
    public struct CreateThemeData: Swift.Sendable {
        /// The name of the theme.
        /// This member is required.
        public var name: Swift.String?
        /// Describes the properties that can be overriden to customize an instance of the theme.
        public var overrides: [AmplifyUIBuilderClientTypes.ThemeValues]?
        /// One or more key-value pairs to use when tagging the theme data.
        public var tags: [Swift.String: Swift.String]?
        /// A list of key-value pairs that deﬁnes the properties of the theme.
        /// This member is required.
        public var values: [AmplifyUIBuilderClientTypes.ThemeValues]?

        public init(
            name: Swift.String? = nil,
            overrides: [AmplifyUIBuilderClientTypes.ThemeValues]? = nil,
            tags: [Swift.String: Swift.String]? = nil,
            values: [AmplifyUIBuilderClientTypes.ThemeValues]? = nil
        )
        {
            self.name = name
            self.overrides = overrides
            self.tags = tags
            self.values = values
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// A theme is a collection of style settings that apply globally to the components associated with an Amplify application.
    public struct Theme: Swift.Sendable {
        /// The unique ID for the Amplify app associated with the theme.
        /// This member is required.
        public var appId: Swift.String?
        /// The time that the theme was created.
        /// This member is required.
        public var createdAt: Foundation.Date?
        /// The name of the backend environment that is a part of the Amplify app.
        /// This member is required.
        public var environmentName: Swift.String?
        /// The ID for the theme.
        /// This member is required.
        public var id: Swift.String?
        /// The time that the theme was modified.
        public var modifiedAt: Foundation.Date?
        /// The name of the theme.
        /// This member is required.
        public var name: Swift.String?
        /// Describes the properties that can be overriden to customize a theme.
        public var overrides: [AmplifyUIBuilderClientTypes.ThemeValues]?
        /// One or more key-value pairs to use when tagging the theme.
        public var tags: [Swift.String: Swift.String]?
        /// A list of key-value pairs that defines the properties of the theme.
        /// This member is required.
        public var values: [AmplifyUIBuilderClientTypes.ThemeValues]?

        public init(
            appId: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            environmentName: Swift.String? = nil,
            id: Swift.String? = nil,
            modifiedAt: Foundation.Date? = nil,
            name: Swift.String? = nil,
            overrides: [AmplifyUIBuilderClientTypes.ThemeValues]? = nil,
            tags: [Swift.String: Swift.String]? = nil,
            values: [AmplifyUIBuilderClientTypes.ThemeValues]? = nil
        )
        {
            self.appId = appId
            self.createdAt = createdAt
            self.environmentName = environmentName
            self.id = id
            self.modifiedAt = modifiedAt
            self.name = name
            self.overrides = overrides
            self.tags = tags
            self.values = values
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Saves the data binding information for a theme.
    public struct UpdateThemeData: Swift.Sendable {
        /// The unique ID of the theme to update.
        public var id: Swift.String?
        /// The name of the theme to update.
        public var name: Swift.String?
        /// Describes the properties that can be overriden to customize the theme.
        public var overrides: [AmplifyUIBuilderClientTypes.ThemeValues]?
        /// A list of key-value pairs that define the theme's properties.
        /// This member is required.
        public var values: [AmplifyUIBuilderClientTypes.ThemeValues]?

        public init(
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            overrides: [AmplifyUIBuilderClientTypes.ThemeValues]? = nil,
            values: [AmplifyUIBuilderClientTypes.ThemeValues]? = nil
        )
        {
            self.id = id
            self.name = name
            self.overrides = overrides
            self.values = values
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Represents the state configuration when an action modifies a property of another element within the same component.
    public struct MutationActionSetStateParameter: Swift.Sendable {
        /// The name of the component that is being modified.
        /// This member is required.
        public var componentName: Swift.String?
        /// The name of the component property to apply the state configuration to.
        /// This member is required.
        public var property: Swift.String?
        /// The state configuration to assign to the property.
        /// This member is required.
        public var `set`: AmplifyUIBuilderClientTypes.ComponentProperty?

        public init(
            componentName: Swift.String? = nil,
            property: Swift.String? = nil,
            `set`: AmplifyUIBuilderClientTypes.ComponentProperty? = nil
        )
        {
            self.componentName = componentName
            self.property = property
            self.`set` = `set`
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Represents a conditional expression to set a component property. Use ComponentConditionProperty to set a property to different values conditionally, based on the value of another property.
    public struct ComponentConditionProperty: Swift.Sendable {
        /// The value to assign to the property if the condition is not met.
        @Indirect public var `else`: AmplifyUIBuilderClientTypes.ComponentProperty?
        /// The name of a field. Specify this when the property is a data model.
        public var field: Swift.String?
        /// The value of the property to evaluate.
        public var operand: Swift.String?
        /// The type of the property to evaluate.
        public var operandType: Swift.String?
        /// The operator to use to perform the evaluation, such as eq to represent equals.
        public var `operator`: Swift.String?
        /// The name of the conditional property.
        public var property: Swift.String?
        /// The value to assign to the property if the condition is met.
        @Indirect public var then: AmplifyUIBuilderClientTypes.ComponentProperty?

        public init(
            `else`: AmplifyUIBuilderClientTypes.ComponentProperty? = nil,
            field: Swift.String? = nil,
            operand: Swift.String? = nil,
            operandType: Swift.String? = nil,
            `operator`: Swift.String? = nil,
            property: Swift.String? = nil,
            then: AmplifyUIBuilderClientTypes.ComponentProperty? = nil
        )
        {
            self.`else` = `else`
            self.field = field
            self.operand = operand
            self.operandType = operandType
            self.`operator` = `operator`
            self.property = property
            self.then = then
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Represents the data binding configuration for a value map.
    public struct ValueMappings: Swift.Sendable {
        /// The information to bind fields to data at runtime.
        public var bindingProperties: [Swift.String: AmplifyUIBuilderClientTypes.FormInputBindingPropertiesValue]?
        /// The value and display value pairs.
        /// This member is required.
        public var values: [AmplifyUIBuilderClientTypes.ValueMapping]?

        public init(
            bindingProperties: [Swift.String: AmplifyUIBuilderClientTypes.FormInputBindingPropertiesValue]? = nil,
            values: [AmplifyUIBuilderClientTypes.ValueMapping]? = nil
        )
        {
            self.bindingProperties = bindingProperties
            self.values = values
        }
    }
}

public struct CreateThemeInput: Swift.Sendable {
    /// The unique ID of the Amplify app associated with the theme.
    /// This member is required.
    public var appId: Swift.String?
    /// The unique client token.
    public var clientToken: Swift.String?
    /// The name of the backend environment that is a part of the Amplify app.
    /// This member is required.
    public var environmentName: Swift.String?
    /// Represents the configuration of the theme to create.
    /// This member is required.
    public var themeToCreate: AmplifyUIBuilderClientTypes.CreateThemeData?

    public init(
        appId: Swift.String? = nil,
        clientToken: Swift.String? = nil,
        environmentName: Swift.String? = nil,
        themeToCreate: AmplifyUIBuilderClientTypes.CreateThemeData? = nil
    )
    {
        self.appId = appId
        self.clientToken = clientToken
        self.environmentName = environmentName
        self.themeToCreate = themeToCreate
    }
}

public struct CreateThemeOutput: Swift.Sendable {
    /// Describes the configuration of the new theme.
    public var entity: AmplifyUIBuilderClientTypes.Theme?

    public init(
        entity: AmplifyUIBuilderClientTypes.Theme? = nil
    )
    {
        self.entity = entity
    }
}

public struct GetThemeOutput: Swift.Sendable {
    /// Represents the configuration settings for the theme.
    public var theme: AmplifyUIBuilderClientTypes.Theme?

    public init(
        theme: AmplifyUIBuilderClientTypes.Theme? = nil
    )
    {
        self.theme = theme
    }
}

public struct UpdateThemeInput: Swift.Sendable {
    /// The unique ID for the Amplify app.
    /// This member is required.
    public var appId: Swift.String?
    /// The unique client token.
    public var clientToken: Swift.String?
    /// The name of the backend environment that is part of the Amplify app.
    /// This member is required.
    public var environmentName: Swift.String?
    /// The unique ID for the theme.
    /// This member is required.
    public var id: Swift.String?
    /// The configuration of the updated theme.
    /// This member is required.
    public var updatedTheme: AmplifyUIBuilderClientTypes.UpdateThemeData?

    public init(
        appId: Swift.String? = nil,
        clientToken: Swift.String? = nil,
        environmentName: Swift.String? = nil,
        id: Swift.String? = nil,
        updatedTheme: AmplifyUIBuilderClientTypes.UpdateThemeData? = nil
    )
    {
        self.appId = appId
        self.clientToken = clientToken
        self.environmentName = environmentName
        self.id = id
        self.updatedTheme = updatedTheme
    }
}

public struct UpdateThemeOutput: Swift.Sendable {
    /// Describes the configuration of the updated theme.
    public var entity: AmplifyUIBuilderClientTypes.Theme?

    public init(
        entity: AmplifyUIBuilderClientTypes.Theme? = nil
    )
    {
        self.entity = entity
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Describes the configuration for the default input values to display for a field.
    public struct FieldInputConfig: Swift.Sendable {
        /// Specifies whether a field has a default value.
        public var defaultChecked: Swift.Bool?
        /// The default country code for a phone number.
        public var defaultCountryCode: Swift.String?
        /// The default value for the field.
        public var defaultValue: Swift.String?
        /// The text to display to describe the field.
        public var descriptiveText: Swift.String?
        /// The configuration for the file uploader field.
        public var fileUploaderConfig: AmplifyUIBuilderClientTypes.FileUploaderFieldConfig?
        /// Specifies whether to render the field as an array. This property is ignored if the dataSourceType for the form is a Data Store.
        public var isArray: Swift.Bool?
        /// The maximum value to display for the field.
        public var maxValue: Swift.Float?
        /// The minimum value to display for the field.
        public var minValue: Swift.Float?
        /// The name of the field.
        public var name: Swift.String?
        /// The text to display as a placeholder for the field.
        public var placeholder: Swift.String?
        /// Specifies a read only field.
        public var readOnly: Swift.Bool?
        /// Specifies a field that requires input.
        public var `required`: Swift.Bool?
        /// The stepping increment for a numeric value in a field.
        public var step: Swift.Float?
        /// The input type for the field.
        /// This member is required.
        public var type: Swift.String?
        /// The value for the field.
        public var value: Swift.String?
        /// The information to use to customize the input fields with data at runtime.
        public var valueMappings: AmplifyUIBuilderClientTypes.ValueMappings?

        public init(
            defaultChecked: Swift.Bool? = nil,
            defaultCountryCode: Swift.String? = nil,
            defaultValue: Swift.String? = nil,
            descriptiveText: Swift.String? = nil,
            fileUploaderConfig: AmplifyUIBuilderClientTypes.FileUploaderFieldConfig? = nil,
            isArray: Swift.Bool? = nil,
            maxValue: Swift.Float? = nil,
            minValue: Swift.Float? = nil,
            name: Swift.String? = nil,
            placeholder: Swift.String? = nil,
            readOnly: Swift.Bool? = nil,
            `required`: Swift.Bool? = nil,
            step: Swift.Float? = nil,
            type: Swift.String? = nil,
            value: Swift.String? = nil,
            valueMappings: AmplifyUIBuilderClientTypes.ValueMappings? = nil
        )
        {
            self.defaultChecked = defaultChecked
            self.defaultCountryCode = defaultCountryCode
            self.defaultValue = defaultValue
            self.descriptiveText = descriptiveText
            self.fileUploaderConfig = fileUploaderConfig
            self.isArray = isArray
            self.maxValue = maxValue
            self.minValue = minValue
            self.name = name
            self.placeholder = placeholder
            self.readOnly = readOnly
            self.`required` = `required`
            self.step = step
            self.type = type
            self.value = value
            self.valueMappings = valueMappings
        }
    }
}

public struct ExportThemesOutput: Swift.Sendable {
    /// Represents the configuration of the exported themes.
    /// This member is required.
    public var entities: [AmplifyUIBuilderClientTypes.Theme]?
    /// The pagination token that's included if more results are available.
    public var nextToken: Swift.String?

    public init(
        entities: [AmplifyUIBuilderClientTypes.Theme]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.entities = entities
        self.nextToken = nextToken
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Describes the configuration information for a field in a table.
    public struct FieldConfig: Swift.Sendable {
        /// Specifies whether to hide a field.
        public var excluded: Swift.Bool?
        /// Describes the configuration for the default input value to display for a field.
        public var inputType: AmplifyUIBuilderClientTypes.FieldInputConfig?
        /// The label for the field.
        public var label: Swift.String?
        /// Specifies the field position.
        public var position: AmplifyUIBuilderClientTypes.FieldPosition?
        /// The validations to perform on the value in the field.
        public var validations: [AmplifyUIBuilderClientTypes.FieldValidationConfiguration]?

        public init(
            excluded: Swift.Bool? = nil,
            inputType: AmplifyUIBuilderClientTypes.FieldInputConfig? = nil,
            label: Swift.String? = nil,
            position: AmplifyUIBuilderClientTypes.FieldPosition? = nil,
            validations: [AmplifyUIBuilderClientTypes.FieldValidationConfiguration]? = nil
        )
        {
            self.excluded = excluded
            self.inputType = inputType
            self.label = label
            self.position = position
            self.validations = validations
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Represents all of the information that is required to create a form.
    public struct CreateFormData: Swift.Sendable {
        /// The FormCTA object that stores the call to action configuration for the form.
        public var cta: AmplifyUIBuilderClientTypes.FormCTA?
        /// The type of data source to use to create the form.
        /// This member is required.
        public var dataType: AmplifyUIBuilderClientTypes.FormDataTypeConfig?
        /// The configuration information for the form's fields.
        /// This member is required.
        public var fields: [Swift.String: AmplifyUIBuilderClientTypes.FieldConfig]?
        /// Specifies whether to perform a create or update action on the form.
        /// This member is required.
        public var formActionType: AmplifyUIBuilderClientTypes.FormActionType?
        /// Specifies an icon or decoration to display on the form.
        public var labelDecorator: AmplifyUIBuilderClientTypes.LabelDecorator?
        /// The name of the form.
        /// This member is required.
        public var name: Swift.String?
        /// The schema version of the form.
        /// This member is required.
        public var schemaVersion: Swift.String?
        /// The configuration information for the visual helper elements for the form. These elements are not associated with any data.
        /// This member is required.
        public var sectionalElements: [Swift.String: AmplifyUIBuilderClientTypes.SectionalElement]?
        /// The configuration for the form's style.
        /// This member is required.
        public var style: AmplifyUIBuilderClientTypes.FormStyle?
        /// One or more key-value pairs to use when tagging the form data.
        public var tags: [Swift.String: Swift.String]?

        public init(
            cta: AmplifyUIBuilderClientTypes.FormCTA? = nil,
            dataType: AmplifyUIBuilderClientTypes.FormDataTypeConfig? = nil,
            fields: [Swift.String: AmplifyUIBuilderClientTypes.FieldConfig]? = nil,
            formActionType: AmplifyUIBuilderClientTypes.FormActionType? = nil,
            labelDecorator: AmplifyUIBuilderClientTypes.LabelDecorator? = nil,
            name: Swift.String? = nil,
            schemaVersion: Swift.String? = nil,
            sectionalElements: [Swift.String: AmplifyUIBuilderClientTypes.SectionalElement]? = nil,
            style: AmplifyUIBuilderClientTypes.FormStyle? = nil,
            tags: [Swift.String: Swift.String]? = nil
        )
        {
            self.cta = cta
            self.dataType = dataType
            self.fields = fields
            self.formActionType = formActionType
            self.labelDecorator = labelDecorator
            self.name = name
            self.schemaVersion = schemaVersion
            self.sectionalElements = sectionalElements
            self.style = style
            self.tags = tags
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Contains the configuration settings for a Form user interface (UI) element for an Amplify app. A form is a component you can add to your project by specifying a data source as the default configuration for the form.
    public struct Form: Swift.Sendable {
        /// The unique ID of the Amplify app associated with the form.
        /// This member is required.
        public var appId: Swift.String?
        /// Stores the call to action configuration for the form.
        public var cta: AmplifyUIBuilderClientTypes.FormCTA?
        /// The type of data source to use to create the form.
        /// This member is required.
        public var dataType: AmplifyUIBuilderClientTypes.FormDataTypeConfig?
        /// The name of the backend environment that is a part of the Amplify app.
        /// This member is required.
        public var environmentName: Swift.String?
        /// Stores the information about the form's fields.
        /// This member is required.
        public var fields: [Swift.String: AmplifyUIBuilderClientTypes.FieldConfig]?
        /// The operation to perform on the specified form.
        /// This member is required.
        public var formActionType: AmplifyUIBuilderClientTypes.FormActionType?
        /// The unique ID of the form.
        /// This member is required.
        public var id: Swift.String?
        /// Specifies an icon or decoration to display on the form.
        public var labelDecorator: AmplifyUIBuilderClientTypes.LabelDecorator?
        /// The name of the form.
        /// This member is required.
        public var name: Swift.String?
        /// The schema version of the form when it was imported.
        /// This member is required.
        public var schemaVersion: Swift.String?
        /// Stores the visual helper elements for the form that are not associated with any data.
        /// This member is required.
        public var sectionalElements: [Swift.String: AmplifyUIBuilderClientTypes.SectionalElement]?
        /// Stores the configuration for the form's style.
        /// This member is required.
        public var style: AmplifyUIBuilderClientTypes.FormStyle?
        /// One or more key-value pairs to use when tagging the form.
        public var tags: [Swift.String: Swift.String]?

        public init(
            appId: Swift.String? = nil,
            cta: AmplifyUIBuilderClientTypes.FormCTA? = nil,
            dataType: AmplifyUIBuilderClientTypes.FormDataTypeConfig? = nil,
            environmentName: Swift.String? = nil,
            fields: [Swift.String: AmplifyUIBuilderClientTypes.FieldConfig]? = nil,
            formActionType: AmplifyUIBuilderClientTypes.FormActionType? = nil,
            id: Swift.String? = nil,
            labelDecorator: AmplifyUIBuilderClientTypes.LabelDecorator? = nil,
            name: Swift.String? = nil,
            schemaVersion: Swift.String? = nil,
            sectionalElements: [Swift.String: AmplifyUIBuilderClientTypes.SectionalElement]? = nil,
            style: AmplifyUIBuilderClientTypes.FormStyle? = nil,
            tags: [Swift.String: Swift.String]? = nil
        )
        {
            self.appId = appId
            self.cta = cta
            self.dataType = dataType
            self.environmentName = environmentName
            self.fields = fields
            self.formActionType = formActionType
            self.id = id
            self.labelDecorator = labelDecorator
            self.name = name
            self.schemaVersion = schemaVersion
            self.sectionalElements = sectionalElements
            self.style = style
            self.tags = tags
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Updates and saves all of the information about a form, based on form ID.
    public struct UpdateFormData: Swift.Sendable {
        /// The FormCTA object that stores the call to action configuration for the form.
        public var cta: AmplifyUIBuilderClientTypes.FormCTA?
        /// The type of data source to use to create the form.
        public var dataType: AmplifyUIBuilderClientTypes.FormDataTypeConfig?
        /// The configuration information for the form's fields.
        public var fields: [Swift.String: AmplifyUIBuilderClientTypes.FieldConfig]?
        /// Specifies whether to perform a create or update action on the form.
        public var formActionType: AmplifyUIBuilderClientTypes.FormActionType?
        /// Specifies an icon or decoration to display on the form.
        public var labelDecorator: AmplifyUIBuilderClientTypes.LabelDecorator?
        /// The name of the form.
        public var name: Swift.String?
        /// The schema version of the form.
        public var schemaVersion: Swift.String?
        /// The configuration information for the visual helper elements for the form. These elements are not associated with any data.
        public var sectionalElements: [Swift.String: AmplifyUIBuilderClientTypes.SectionalElement]?
        /// The configuration for the form's style.
        public var style: AmplifyUIBuilderClientTypes.FormStyle?

        public init(
            cta: AmplifyUIBuilderClientTypes.FormCTA? = nil,
            dataType: AmplifyUIBuilderClientTypes.FormDataTypeConfig? = nil,
            fields: [Swift.String: AmplifyUIBuilderClientTypes.FieldConfig]? = nil,
            formActionType: AmplifyUIBuilderClientTypes.FormActionType? = nil,
            labelDecorator: AmplifyUIBuilderClientTypes.LabelDecorator? = nil,
            name: Swift.String? = nil,
            schemaVersion: Swift.String? = nil,
            sectionalElements: [Swift.String: AmplifyUIBuilderClientTypes.SectionalElement]? = nil,
            style: AmplifyUIBuilderClientTypes.FormStyle? = nil
        )
        {
            self.cta = cta
            self.dataType = dataType
            self.fields = fields
            self.formActionType = formActionType
            self.labelDecorator = labelDecorator
            self.name = name
            self.schemaVersion = schemaVersion
            self.sectionalElements = sectionalElements
            self.style = style
        }
    }
}

public struct CreateFormInput: Swift.Sendable {
    /// The unique ID of the Amplify app to associate with the form.
    /// This member is required.
    public var appId: Swift.String?
    /// The unique client token.
    public var clientToken: Swift.String?
    /// The name of the backend environment that is a part of the Amplify app.
    /// This member is required.
    public var environmentName: Swift.String?
    /// Represents the configuration of the form to create.
    /// This member is required.
    public var formToCreate: AmplifyUIBuilderClientTypes.CreateFormData?

    public init(
        appId: Swift.String? = nil,
        clientToken: Swift.String? = nil,
        environmentName: Swift.String? = nil,
        formToCreate: AmplifyUIBuilderClientTypes.CreateFormData? = nil
    )
    {
        self.appId = appId
        self.clientToken = clientToken
        self.environmentName = environmentName
        self.formToCreate = formToCreate
    }
}

public struct CreateFormOutput: Swift.Sendable {
    /// Describes the configuration of the new form.
    public var entity: AmplifyUIBuilderClientTypes.Form?

    public init(
        entity: AmplifyUIBuilderClientTypes.Form? = nil
    )
    {
        self.entity = entity
    }
}

public struct GetFormOutput: Swift.Sendable {
    /// Represents the configuration settings for the form.
    public var form: AmplifyUIBuilderClientTypes.Form?

    public init(
        form: AmplifyUIBuilderClientTypes.Form? = nil
    )
    {
        self.form = form
    }
}

public struct UpdateFormInput: Swift.Sendable {
    /// The unique ID for the Amplify app.
    /// This member is required.
    public var appId: Swift.String?
    /// The unique client token.
    public var clientToken: Swift.String?
    /// The name of the backend environment that is part of the Amplify app.
    /// This member is required.
    public var environmentName: Swift.String?
    /// The unique ID for the form.
    /// This member is required.
    public var id: Swift.String?
    /// The request accepts the following data in JSON format.
    /// This member is required.
    public var updatedForm: AmplifyUIBuilderClientTypes.UpdateFormData?

    public init(
        appId: Swift.String? = nil,
        clientToken: Swift.String? = nil,
        environmentName: Swift.String? = nil,
        id: Swift.String? = nil,
        updatedForm: AmplifyUIBuilderClientTypes.UpdateFormData? = nil
    )
    {
        self.appId = appId
        self.clientToken = clientToken
        self.environmentName = environmentName
        self.id = id
        self.updatedForm = updatedForm
    }
}

public struct UpdateFormOutput: Swift.Sendable {
    /// Describes the configuration of the updated form.
    public var entity: AmplifyUIBuilderClientTypes.Form?

    public init(
        entity: AmplifyUIBuilderClientTypes.Form? = nil
    )
    {
        self.entity = entity
    }
}

public struct ExportFormsOutput: Swift.Sendable {
    /// Represents the configuration of the exported forms.
    /// This member is required.
    public var entities: [AmplifyUIBuilderClientTypes.Form]?
    /// The pagination token that's included if more results are available.
    public var nextToken: Swift.String?

    public init(
        entities: [AmplifyUIBuilderClientTypes.Form]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.entities = entities
        self.nextToken = nextToken
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Represents the event action configuration for an element of a Component or ComponentChild. Use for the workflow feature in Amplify Studio that allows you to bind events and actions to components. ActionParameters defines the action that is performed when an event occurs on the component.
    public struct ActionParameters: Swift.Sendable {
        /// The HTML anchor link to the location to open. Specify this value for a navigation action.
        public var anchor: AmplifyUIBuilderClientTypes.ComponentProperty?
        /// A dictionary of key-value pairs mapping Amplify Studio properties to fields in a data model. Use when the action performs an operation on an Amplify DataStore model.
        public var fields: [Swift.String: AmplifyUIBuilderClientTypes.ComponentProperty]?
        /// Specifies whether the user should be signed out globally. Specify this value for an auth sign out action.
        public var global: AmplifyUIBuilderClientTypes.ComponentProperty?
        /// The unique ID of the component that the ActionParameters apply to.
        public var id: AmplifyUIBuilderClientTypes.ComponentProperty?
        /// The name of the data model. Use when the action performs an operation on an Amplify DataStore model.
        public var model: Swift.String?
        /// A key-value pair that specifies the state property name and its initial value.
        public var state: AmplifyUIBuilderClientTypes.MutationActionSetStateParameter?
        /// The element within the same component to modify when the action occurs.
        public var target: AmplifyUIBuilderClientTypes.ComponentProperty?
        /// The type of navigation action. Valid values are url and anchor. This value is required for a navigation action.
        public var type: AmplifyUIBuilderClientTypes.ComponentProperty?
        /// The URL to the location to open. Specify this value for a navigation action.
        public var url: AmplifyUIBuilderClientTypes.ComponentProperty?

        public init(
            anchor: AmplifyUIBuilderClientTypes.ComponentProperty? = nil,
            fields: [Swift.String: AmplifyUIBuilderClientTypes.ComponentProperty]? = nil,
            global: AmplifyUIBuilderClientTypes.ComponentProperty? = nil,
            id: AmplifyUIBuilderClientTypes.ComponentProperty? = nil,
            model: Swift.String? = nil,
            state: AmplifyUIBuilderClientTypes.MutationActionSetStateParameter? = nil,
            target: AmplifyUIBuilderClientTypes.ComponentProperty? = nil,
            type: AmplifyUIBuilderClientTypes.ComponentProperty? = nil,
            url: AmplifyUIBuilderClientTypes.ComponentProperty? = nil
        )
        {
            self.anchor = anchor
            self.fields = fields
            self.global = global
            self.id = id
            self.model = model
            self.state = state
            self.target = target
            self.type = type
            self.url = url
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Describes the configuration of an event. You can bind an event and a corresponding action to a Component or a ComponentChild. A button click is an example of an event.
    public struct ComponentEvent: Swift.Sendable {
        /// The action to perform when a specific event is raised.
        public var action: Swift.String?
        /// Binds an event to an action on a component. When you specify a bindingEvent, the event is called when the action is performed.
        public var bindingEvent: Swift.String?
        /// Describes information about the action.
        public var parameters: AmplifyUIBuilderClientTypes.ActionParameters?

        public init(
            action: Swift.String? = nil,
            bindingEvent: Swift.String? = nil,
            parameters: AmplifyUIBuilderClientTypes.ActionParameters? = nil
        )
        {
            self.action = action
            self.bindingEvent = bindingEvent
            self.parameters = parameters
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// A nested UI configuration within a parent Component.
    public struct ComponentChild: Swift.Sendable {
        /// The list of ComponentChild instances for this component.
        public var children: [AmplifyUIBuilderClientTypes.ComponentChild]?
        /// The type of the child component.
        /// This member is required.
        public var componentType: Swift.String?
        /// Describes the events that can be raised on the child component. Use for the workflow feature in Amplify Studio that allows you to bind events and actions to components.
        public var events: [Swift.String: AmplifyUIBuilderClientTypes.ComponentEvent]?
        /// The name of the child component.
        /// This member is required.
        public var name: Swift.String?
        /// Describes the properties of the child component. You can't specify tags as a valid property for properties.
        /// This member is required.
        public var properties: [Swift.String: AmplifyUIBuilderClientTypes.ComponentProperty]?
        /// The unique ID of the child component in its original source system, such as Figma.
        public var sourceId: Swift.String?

        public init(
            children: [AmplifyUIBuilderClientTypes.ComponentChild]? = nil,
            componentType: Swift.String? = nil,
            events: [Swift.String: AmplifyUIBuilderClientTypes.ComponentEvent]? = nil,
            name: Swift.String? = nil,
            properties: [Swift.String: AmplifyUIBuilderClientTypes.ComponentProperty]? = nil,
            sourceId: Swift.String? = nil
        )
        {
            self.children = children
            self.componentType = componentType
            self.events = events
            self.name = name
            self.properties = properties
            self.sourceId = sourceId
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Contains the configuration settings for a user interface (UI) element for an Amplify app. A component is configured as a primary, stand-alone UI element. Use ComponentChild to configure an instance of a Component. A ComponentChild instance inherits the configuration of the main Component.
    public struct Component: Swift.Sendable {
        /// The unique ID of the Amplify app associated with the component.
        /// This member is required.
        public var appId: Swift.String?
        /// The information to connect a component's properties to data at runtime. You can't specify tags as a valid property for bindingProperties.
        /// This member is required.
        public var bindingProperties: [Swift.String: AmplifyUIBuilderClientTypes.ComponentBindingPropertiesValue]?
        /// A list of the component's ComponentChild instances.
        public var children: [AmplifyUIBuilderClientTypes.ComponentChild]?
        /// The data binding configuration for the component's properties. Use this for a collection component. You can't specify tags as a valid property for collectionProperties.
        public var collectionProperties: [Swift.String: AmplifyUIBuilderClientTypes.ComponentDataConfiguration]?
        /// The type of the component. This can be an Amplify custom UI component or another custom component.
        /// This member is required.
        public var componentType: Swift.String?
        /// The time that the component was created.
        /// This member is required.
        public var createdAt: Foundation.Date?
        /// The name of the backend environment that is a part of the Amplify app.
        /// This member is required.
        public var environmentName: Swift.String?
        /// Describes the events that can be raised on the component. Use for the workflow feature in Amplify Studio that allows you to bind events and actions to components.
        public var events: [Swift.String: AmplifyUIBuilderClientTypes.ComponentEvent]?
        /// The unique ID of the component.
        /// This member is required.
        public var id: Swift.String?
        /// The time that the component was modified.
        public var modifiedAt: Foundation.Date?
        /// The name of the component.
        /// This member is required.
        public var name: Swift.String?
        /// Describes the component's properties that can be overriden in a customized instance of the component. You can't specify tags as a valid property for overrides.
        /// This member is required.
        public var overrides: [Swift.String: [Swift.String: Swift.String]]?
        /// Describes the component's properties. You can't specify tags as a valid property for properties.
        /// This member is required.
        public var properties: [Swift.String: AmplifyUIBuilderClientTypes.ComponentProperty]?
        /// The schema version of the component when it was imported.
        public var schemaVersion: Swift.String?
        /// The unique ID of the component in its original source system, such as Figma.
        public var sourceId: Swift.String?
        /// One or more key-value pairs to use when tagging the component.
        public var tags: [Swift.String: Swift.String]?
        /// A list of the component's variants. A variant is a unique style configuration of a main component.
        /// This member is required.
        public var variants: [AmplifyUIBuilderClientTypes.ComponentVariant]?

        public init(
            appId: Swift.String? = nil,
            bindingProperties: [Swift.String: AmplifyUIBuilderClientTypes.ComponentBindingPropertiesValue]? = nil,
            children: [AmplifyUIBuilderClientTypes.ComponentChild]? = nil,
            collectionProperties: [Swift.String: AmplifyUIBuilderClientTypes.ComponentDataConfiguration]? = nil,
            componentType: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            environmentName: Swift.String? = nil,
            events: [Swift.String: AmplifyUIBuilderClientTypes.ComponentEvent]? = nil,
            id: Swift.String? = nil,
            modifiedAt: Foundation.Date? = nil,
            name: Swift.String? = nil,
            overrides: [Swift.String: [Swift.String: Swift.String]]? = nil,
            properties: [Swift.String: AmplifyUIBuilderClientTypes.ComponentProperty]? = nil,
            schemaVersion: Swift.String? = nil,
            sourceId: Swift.String? = nil,
            tags: [Swift.String: Swift.String]? = nil,
            variants: [AmplifyUIBuilderClientTypes.ComponentVariant]? = nil
        )
        {
            self.appId = appId
            self.bindingProperties = bindingProperties
            self.children = children
            self.collectionProperties = collectionProperties
            self.componentType = componentType
            self.createdAt = createdAt
            self.environmentName = environmentName
            self.events = events
            self.id = id
            self.modifiedAt = modifiedAt
            self.name = name
            self.overrides = overrides
            self.properties = properties
            self.schemaVersion = schemaVersion
            self.sourceId = sourceId
            self.tags = tags
            self.variants = variants
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Represents all of the information that is required to create a component.
    public struct CreateComponentData: Swift.Sendable {
        /// The data binding information for the component's properties.
        /// This member is required.
        public var bindingProperties: [Swift.String: AmplifyUIBuilderClientTypes.ComponentBindingPropertiesValue]?
        /// A list of child components that are instances of the main component.
        public var children: [AmplifyUIBuilderClientTypes.ComponentChild]?
        /// The data binding configuration for customizing a component's properties. Use this for a collection component.
        public var collectionProperties: [Swift.String: AmplifyUIBuilderClientTypes.ComponentDataConfiguration]?
        /// The component type. This can be an Amplify custom UI component or another custom component.
        /// This member is required.
        public var componentType: Swift.String?
        /// The event configuration for the component. Use for the workflow feature in Amplify Studio that allows you to bind events and actions to components.
        public var events: [Swift.String: AmplifyUIBuilderClientTypes.ComponentEvent]?
        /// The name of the component
        /// This member is required.
        public var name: Swift.String?
        /// Describes the component properties that can be overriden to customize an instance of the component.
        /// This member is required.
        public var overrides: [Swift.String: [Swift.String: Swift.String]]?
        /// Describes the component's properties.
        /// This member is required.
        public var properties: [Swift.String: AmplifyUIBuilderClientTypes.ComponentProperty]?
        /// The schema version of the component when it was imported.
        public var schemaVersion: Swift.String?
        /// The unique ID of the component in its original source system, such as Figma.
        public var sourceId: Swift.String?
        /// One or more key-value pairs to use when tagging the component data.
        public var tags: [Swift.String: Swift.String]?
        /// A list of the unique variants of this component.
        /// This member is required.
        public var variants: [AmplifyUIBuilderClientTypes.ComponentVariant]?

        public init(
            bindingProperties: [Swift.String: AmplifyUIBuilderClientTypes.ComponentBindingPropertiesValue]? = nil,
            children: [AmplifyUIBuilderClientTypes.ComponentChild]? = nil,
            collectionProperties: [Swift.String: AmplifyUIBuilderClientTypes.ComponentDataConfiguration]? = nil,
            componentType: Swift.String? = nil,
            events: [Swift.String: AmplifyUIBuilderClientTypes.ComponentEvent]? = nil,
            name: Swift.String? = nil,
            overrides: [Swift.String: [Swift.String: Swift.String]]? = nil,
            properties: [Swift.String: AmplifyUIBuilderClientTypes.ComponentProperty]? = nil,
            schemaVersion: Swift.String? = nil,
            sourceId: Swift.String? = nil,
            tags: [Swift.String: Swift.String]? = nil,
            variants: [AmplifyUIBuilderClientTypes.ComponentVariant]? = nil
        )
        {
            self.bindingProperties = bindingProperties
            self.children = children
            self.collectionProperties = collectionProperties
            self.componentType = componentType
            self.events = events
            self.name = name
            self.overrides = overrides
            self.properties = properties
            self.schemaVersion = schemaVersion
            self.sourceId = sourceId
            self.tags = tags
            self.variants = variants
        }
    }
}

extension AmplifyUIBuilderClientTypes {

    /// Updates and saves all of the information about a component, based on component ID.
    public struct UpdateComponentData: Swift.Sendable {
        /// The data binding information for the component's properties.
        public var bindingProperties: [Swift.String: AmplifyUIBuilderClientTypes.ComponentBindingPropertiesValue]?
        /// The components that are instances of the main component.
        public var children: [AmplifyUIBuilderClientTypes.ComponentChild]?
        /// The configuration for binding a component's properties to a data model. Use this for a collection component.
        public var collectionProperties: [Swift.String: AmplifyUIBuilderClientTypes.ComponentDataConfiguration]?
        /// The type of the component. This can be an Amplify custom UI component or another custom component.
        public var componentType: Swift.String?
        /// The event configuration for the component. Use for the workflow feature in Amplify Studio that allows you to bind events and actions to components.
        public var events: [Swift.String: AmplifyUIBuilderClientTypes.ComponentEvent]?
        /// The unique ID of the component to update.
        public var id: Swift.String?
        /// The name of the component to update.
        public var name: Swift.String?
        /// Describes the properties that can be overriden to customize the component.
        public var overrides: [Swift.String: [Swift.String: Swift.String]]?
        /// Describes the component's properties.
        public var properties: [Swift.String: AmplifyUIBuilderClientTypes.ComponentProperty]?
        /// The schema version of the component when it was imported.
        public var schemaVersion: Swift.String?
        /// The unique ID of the component in its original source system, such as Figma.
        public var sourceId: Swift.String?
        /// A list of the unique variants of the main component being updated.
        public var variants: [AmplifyUIBuilderClientTypes.ComponentVariant]?

        public init(
            bindingProperties: [Swift.String: AmplifyUIBuilderClientTypes.ComponentBindingPropertiesValue]? = nil,
            children: [AmplifyUIBuilderClientTypes.ComponentChild]? = nil,
            collectionProperties: [Swift.String: AmplifyUIBuilderClientTypes.ComponentDataConfiguration]? = nil,
            componentType: Swift.String? = nil,
            events: [Swift.String: AmplifyUIBuilderClientTypes.ComponentEvent]? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            overrides: [Swift.String: [Swift.String: Swift.String]]? = nil,
            properties: [Swift.String: AmplifyUIBuilderClientTypes.ComponentProperty]? = nil,
            schemaVersion: Swift.String? = nil,
            sourceId: Swift.String? = nil,
            variants: [AmplifyUIBuilderClientTypes.ComponentVariant]? = nil
        )
        {
            self.bindingProperties = bindingProperties
            self.children = children
            self.collectionProperties = collectionProperties
            self.componentType = componentType
            self.events = events
            self.id = id
            self.name = name
            self.overrides = overrides
            self.properties = properties
            self.schemaVersion = schemaVersion
            self.sourceId = sourceId
            self.variants = variants
        }
    }
}

public struct CreateComponentInput: Swift.Sendable {
    /// The unique ID of the Amplify app to associate with the component.
    /// This member is required.
    public var appId: Swift.String?
    /// The unique client token.
    public var clientToken: Swift.String?
    /// Represents the configuration of the component to create.
    /// This member is required.
    public var componentToCreate: AmplifyUIBuilderClientTypes.CreateComponentData?
    /// The name of the backend environment that is a part of the Amplify app.
    /// This member is required.
    public var environmentName: Swift.String?

    public init(
        appId: Swift.String? = nil,
        clientToken: Swift.String? = nil,
        componentToCreate: AmplifyUIBuilderClientTypes.CreateComponentData? = nil,
        environmentName: Swift.String? = nil
    )
    {
        self.appId = appId
        self.clientToken = clientToken
        self.componentToCreate = componentToCreate
        self.environmentName = environmentName
    }
}

public struct CreateComponentOutput: Swift.Sendable {
    /// Describes the configuration of the new component.
    public var entity: AmplifyUIBuilderClientTypes.Component?

    public init(
        entity: AmplifyUIBuilderClientTypes.Component? = nil
    )
    {
        self.entity = entity
    }
}

public struct GetComponentOutput: Swift.Sendable {
    /// Represents the configuration settings for the component.
    public var component: AmplifyUIBuilderClientTypes.Component?

    public init(
        component: AmplifyUIBuilderClientTypes.Component? = nil
    )
    {
        self.component = component
    }
}

public struct UpdateComponentInput: Swift.Sendable {
    /// The unique ID for the Amplify app.
    /// This member is required.
    public var appId: Swift.String?
    /// The unique client token.
    public var clientToken: Swift.String?
    /// The name of the backend environment that is part of the Amplify app.
    /// This member is required.
    public var environmentName: Swift.String?
    /// The unique ID for the component.
    /// This member is required.
    public var id: Swift.String?
    /// The configuration of the updated component.
    /// This member is required.
    public var updatedComponent: AmplifyUIBuilderClientTypes.UpdateComponentData?

    public init(
        appId: Swift.String? = nil,
        clientToken: Swift.String? = nil,
        environmentName: Swift.String? = nil,
        id: Swift.String? = nil,
        updatedComponent: AmplifyUIBuilderClientTypes.UpdateComponentData? = nil
    )
    {
        self.appId = appId
        self.clientToken = clientToken
        self.environmentName = environmentName
        self.id = id
        self.updatedComponent = updatedComponent
    }
}

public struct UpdateComponentOutput: Swift.Sendable {
    /// Describes the configuration of the updated component.
    public var entity: AmplifyUIBuilderClientTypes.Component?

    public init(
        entity: AmplifyUIBuilderClientTypes.Component? = nil
    )
    {
        self.entity = entity
    }
}

public struct ExportComponentsOutput: Swift.Sendable {
    /// Represents the configuration of the exported components.
    /// This member is required.
    public var entities: [AmplifyUIBuilderClientTypes.Component]?
    /// The pagination token that's included if more results are available.
    public var nextToken: Swift.String?

    public init(
        entities: [AmplifyUIBuilderClientTypes.Component]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.entities = entities
        self.nextToken = nextToken
    }
}

extension CreateComponentInput {

    static func urlPathProvider(_ value: CreateComponentInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        guard let environmentName = value.environmentName else {
            return nil
        }
        return "/app/\(appId.urlPercentEncoding())/environment/\(environmentName.urlPercentEncoding())/components"
    }
}

extension CreateComponentInput {

    static func queryItemProvider(_ value: CreateComponentInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let clientToken = value.clientToken {
            let clientTokenQueryItem = Smithy.URIQueryItem(name: "clientToken".urlPercentEncoding(), value: Swift.String(clientToken).urlPercentEncoding())
            items.append(clientTokenQueryItem)
        }
        return items
    }
}

extension CreateFormInput {

    static func urlPathProvider(_ value: CreateFormInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        guard let environmentName = value.environmentName else {
            return nil
        }
        return "/app/\(appId.urlPercentEncoding())/environment/\(environmentName.urlPercentEncoding())/forms"
    }
}

extension CreateFormInput {

    static func queryItemProvider(_ value: CreateFormInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let clientToken = value.clientToken {
            let clientTokenQueryItem = Smithy.URIQueryItem(name: "clientToken".urlPercentEncoding(), value: Swift.String(clientToken).urlPercentEncoding())
            items.append(clientTokenQueryItem)
        }
        return items
    }
}

extension CreateThemeInput {

    static func urlPathProvider(_ value: CreateThemeInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        guard let environmentName = value.environmentName else {
            return nil
        }
        return "/app/\(appId.urlPercentEncoding())/environment/\(environmentName.urlPercentEncoding())/themes"
    }
}

extension CreateThemeInput {

    static func queryItemProvider(_ value: CreateThemeInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let clientToken = value.clientToken {
            let clientTokenQueryItem = Smithy.URIQueryItem(name: "clientToken".urlPercentEncoding(), value: Swift.String(clientToken).urlPercentEncoding())
            items.append(clientTokenQueryItem)
        }
        return items
    }
}

extension DeleteComponentInput {

    static func urlPathProvider(_ value: DeleteComponentInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        guard let environmentName = value.environmentName else {
            return nil
        }
        guard let id = value.id else {
            return nil
        }
        return "/app/\(appId.urlPercentEncoding())/environment/\(environmentName.urlPercentEncoding())/components/\(id.urlPercentEncoding())"
    }
}

extension DeleteFormInput {

    static func urlPathProvider(_ value: DeleteFormInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        guard let environmentName = value.environmentName else {
            return nil
        }
        guard let id = value.id else {
            return nil
        }
        return "/app/\(appId.urlPercentEncoding())/environment/\(environmentName.urlPercentEncoding())/forms/\(id.urlPercentEncoding())"
    }
}

extension DeleteThemeInput {

    static func urlPathProvider(_ value: DeleteThemeInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        guard let environmentName = value.environmentName else {
            return nil
        }
        guard let id = value.id else {
            return nil
        }
        return "/app/\(appId.urlPercentEncoding())/environment/\(environmentName.urlPercentEncoding())/themes/\(id.urlPercentEncoding())"
    }
}

extension ExchangeCodeForTokenInput {

    static func urlPathProvider(_ value: ExchangeCodeForTokenInput) -> Swift.String? {
        guard let provider = value.provider else {
            return nil
        }
        return "/tokens/\(provider.rawValue.urlPercentEncoding())"
    }
}

extension ExportComponentsInput {

    static func urlPathProvider(_ value: ExportComponentsInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        guard let environmentName = value.environmentName else {
            return nil
        }
        return "/export/app/\(appId.urlPercentEncoding())/environment/\(environmentName.urlPercentEncoding())/components"
    }
}

extension ExportComponentsInput {

    static func queryItemProvider(_ value: ExportComponentsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        return items
    }
}

extension ExportFormsInput {

    static func urlPathProvider(_ value: ExportFormsInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        guard let environmentName = value.environmentName else {
            return nil
        }
        return "/export/app/\(appId.urlPercentEncoding())/environment/\(environmentName.urlPercentEncoding())/forms"
    }
}

extension ExportFormsInput {

    static func queryItemProvider(_ value: ExportFormsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        return items
    }
}

extension ExportThemesInput {

    static func urlPathProvider(_ value: ExportThemesInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        guard let environmentName = value.environmentName else {
            return nil
        }
        return "/export/app/\(appId.urlPercentEncoding())/environment/\(environmentName.urlPercentEncoding())/themes"
    }
}

extension ExportThemesInput {

    static func queryItemProvider(_ value: ExportThemesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        return items
    }
}

extension GetCodegenJobInput {

    static func urlPathProvider(_ value: GetCodegenJobInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        guard let environmentName = value.environmentName else {
            return nil
        }
        guard let id = value.id else {
            return nil
        }
        return "/app/\(appId.urlPercentEncoding())/environment/\(environmentName.urlPercentEncoding())/codegen-jobs/\(id.urlPercentEncoding())"
    }
}

extension GetComponentInput {

    static func urlPathProvider(_ value: GetComponentInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        guard let environmentName = value.environmentName else {
            return nil
        }
        guard let id = value.id else {
            return nil
        }
        return "/app/\(appId.urlPercentEncoding())/environment/\(environmentName.urlPercentEncoding())/components/\(id.urlPercentEncoding())"
    }
}

extension GetFormInput {

    static func urlPathProvider(_ value: GetFormInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        guard let environmentName = value.environmentName else {
            return nil
        }
        guard let id = value.id else {
            return nil
        }
        return "/app/\(appId.urlPercentEncoding())/environment/\(environmentName.urlPercentEncoding())/forms/\(id.urlPercentEncoding())"
    }
}

extension GetMetadataInput {

    static func urlPathProvider(_ value: GetMetadataInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        guard let environmentName = value.environmentName else {
            return nil
        }
        return "/app/\(appId.urlPercentEncoding())/environment/\(environmentName.urlPercentEncoding())/metadata"
    }
}

extension GetThemeInput {

    static func urlPathProvider(_ value: GetThemeInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        guard let environmentName = value.environmentName else {
            return nil
        }
        guard let id = value.id else {
            return nil
        }
        return "/app/\(appId.urlPercentEncoding())/environment/\(environmentName.urlPercentEncoding())/themes/\(id.urlPercentEncoding())"
    }
}

extension ListCodegenJobsInput {

    static func urlPathProvider(_ value: ListCodegenJobsInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        guard let environmentName = value.environmentName else {
            return nil
        }
        return "/app/\(appId.urlPercentEncoding())/environment/\(environmentName.urlPercentEncoding())/codegen-jobs"
    }
}

extension ListCodegenJobsInput {

    static func queryItemProvider(_ value: ListCodegenJobsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListComponentsInput {

    static func urlPathProvider(_ value: ListComponentsInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        guard let environmentName = value.environmentName else {
            return nil
        }
        return "/app/\(appId.urlPercentEncoding())/environment/\(environmentName.urlPercentEncoding())/components"
    }
}

extension ListComponentsInput {

    static func queryItemProvider(_ value: ListComponentsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListFormsInput {

    static func urlPathProvider(_ value: ListFormsInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        guard let environmentName = value.environmentName else {
            return nil
        }
        return "/app/\(appId.urlPercentEncoding())/environment/\(environmentName.urlPercentEncoding())/forms"
    }
}

extension ListFormsInput {

    static func queryItemProvider(_ value: ListFormsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension ListThemesInput {

    static func urlPathProvider(_ value: ListThemesInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        guard let environmentName = value.environmentName else {
            return nil
        }
        return "/app/\(appId.urlPercentEncoding())/environment/\(environmentName.urlPercentEncoding())/themes"
    }
}

extension ListThemesInput {

    static func queryItemProvider(_ value: ListThemesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension PutMetadataFlagInput {

    static func urlPathProvider(_ value: PutMetadataFlagInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        guard let environmentName = value.environmentName else {
            return nil
        }
        guard let featureName = value.featureName else {
            return nil
        }
        return "/app/\(appId.urlPercentEncoding())/environment/\(environmentName.urlPercentEncoding())/metadata/features/\(featureName.urlPercentEncoding())"
    }
}

extension RefreshTokenInput {

    static func urlPathProvider(_ value: RefreshTokenInput) -> Swift.String? {
        guard let provider = value.provider else {
            return nil
        }
        return "/tokens/\(provider.rawValue.urlPercentEncoding())/refresh"
    }
}

extension StartCodegenJobInput {

    static func urlPathProvider(_ value: StartCodegenJobInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        guard let environmentName = value.environmentName else {
            return nil
        }
        return "/app/\(appId.urlPercentEncoding())/environment/\(environmentName.urlPercentEncoding())/codegen-jobs"
    }
}

extension StartCodegenJobInput {

    static func queryItemProvider(_ value: StartCodegenJobInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let clientToken = value.clientToken {
            let clientTokenQueryItem = Smithy.URIQueryItem(name: "clientToken".urlPercentEncoding(), value: Swift.String(clientToken).urlPercentEncoding())
            items.append(clientTokenQueryItem)
        }
        return items
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func queryItemProvider(_ value: UntagResourceInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let tagKeys = value.tagKeys else {
            let message = "Creating a URL Query Item failed. tagKeys is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        tagKeys.forEach { queryItemValue in
            let queryItem = Smithy.URIQueryItem(name: "tagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
            items.append(queryItem)
        }
        return items
    }
}

extension UpdateComponentInput {

    static func urlPathProvider(_ value: UpdateComponentInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        guard let environmentName = value.environmentName else {
            return nil
        }
        guard let id = value.id else {
            return nil
        }
        return "/app/\(appId.urlPercentEncoding())/environment/\(environmentName.urlPercentEncoding())/components/\(id.urlPercentEncoding())"
    }
}

extension UpdateComponentInput {

    static func queryItemProvider(_ value: UpdateComponentInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let clientToken = value.clientToken {
            let clientTokenQueryItem = Smithy.URIQueryItem(name: "clientToken".urlPercentEncoding(), value: Swift.String(clientToken).urlPercentEncoding())
            items.append(clientTokenQueryItem)
        }
        return items
    }
}

extension UpdateFormInput {

    static func urlPathProvider(_ value: UpdateFormInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        guard let environmentName = value.environmentName else {
            return nil
        }
        guard let id = value.id else {
            return nil
        }
        return "/app/\(appId.urlPercentEncoding())/environment/\(environmentName.urlPercentEncoding())/forms/\(id.urlPercentEncoding())"
    }
}

extension UpdateFormInput {

    static func queryItemProvider(_ value: UpdateFormInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let clientToken = value.clientToken {
            let clientTokenQueryItem = Smithy.URIQueryItem(name: "clientToken".urlPercentEncoding(), value: Swift.String(clientToken).urlPercentEncoding())
            items.append(clientTokenQueryItem)
        }
        return items
    }
}

extension UpdateThemeInput {

    static func urlPathProvider(_ value: UpdateThemeInput) -> Swift.String? {
        guard let appId = value.appId else {
            return nil
        }
        guard let environmentName = value.environmentName else {
            return nil
        }
        guard let id = value.id else {
            return nil
        }
        return "/app/\(appId.urlPercentEncoding())/environment/\(environmentName.urlPercentEncoding())/themes/\(id.urlPercentEncoding())"
    }
}

extension UpdateThemeInput {

    static func queryItemProvider(_ value: UpdateThemeInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let clientToken = value.clientToken {
            let clientTokenQueryItem = Smithy.URIQueryItem(name: "clientToken".urlPercentEncoding(), value: Swift.String(clientToken).urlPercentEncoding())
            items.append(clientTokenQueryItem)
        }
        return items
    }
}

extension CreateComponentInput {

    static func write(value: CreateComponentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["componentToCreate"].write(value.componentToCreate, with: AmplifyUIBuilderClientTypes.CreateComponentData.write(value:to:))
    }
}

extension CreateFormInput {

    static func write(value: CreateFormInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["formToCreate"].write(value.formToCreate, with: AmplifyUIBuilderClientTypes.CreateFormData.write(value:to:))
    }
}

extension CreateThemeInput {

    static func write(value: CreateThemeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["themeToCreate"].write(value.themeToCreate, with: AmplifyUIBuilderClientTypes.CreateThemeData.write(value:to:))
    }
}

extension ExchangeCodeForTokenInput {

    static func write(value: ExchangeCodeForTokenInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["request"].write(value.request, with: AmplifyUIBuilderClientTypes.ExchangeCodeForTokenRequestBody.write(value:to:))
    }
}

extension PutMetadataFlagInput {

    static func write(value: PutMetadataFlagInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["body"].write(value.body, with: AmplifyUIBuilderClientTypes.PutMetadataFlagBody.write(value:to:))
    }
}

extension RefreshTokenInput {

    static func write(value: RefreshTokenInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["refreshTokenBody"].write(value.refreshTokenBody, with: AmplifyUIBuilderClientTypes.RefreshTokenRequestBody.write(value:to:))
    }
}

extension StartCodegenJobInput {

    static func write(value: StartCodegenJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["codegenJobToCreate"].write(value.codegenJobToCreate, with: AmplifyUIBuilderClientTypes.StartCodegenJobData.write(value:to:))
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension UpdateComponentInput {

    static func write(value: UpdateComponentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["updatedComponent"].write(value.updatedComponent, with: AmplifyUIBuilderClientTypes.UpdateComponentData.write(value:to:))
    }
}

extension UpdateFormInput {

    static func write(value: UpdateFormInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["updatedForm"].write(value.updatedForm, with: AmplifyUIBuilderClientTypes.UpdateFormData.write(value:to:))
    }
}

extension UpdateThemeInput {

    static func write(value: UpdateThemeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["updatedTheme"].write(value.updatedTheme, with: AmplifyUIBuilderClientTypes.UpdateThemeData.write(value:to:))
    }
}

extension CreateComponentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateComponentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateComponentOutput()
        value.entity = try reader.readIfPresent(with: AmplifyUIBuilderClientTypes.Component.read(from:))
        return value
    }
}

extension CreateFormOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateFormOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateFormOutput()
        value.entity = try reader.readIfPresent(with: AmplifyUIBuilderClientTypes.Form.read(from:))
        return value
    }
}

extension CreateThemeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateThemeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateThemeOutput()
        value.entity = try reader.readIfPresent(with: AmplifyUIBuilderClientTypes.Theme.read(from:))
        return value
    }
}

extension DeleteComponentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteComponentOutput {
        return DeleteComponentOutput()
    }
}

extension DeleteFormOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteFormOutput {
        return DeleteFormOutput()
    }
}

extension DeleteThemeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteThemeOutput {
        return DeleteThemeOutput()
    }
}

extension ExchangeCodeForTokenOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ExchangeCodeForTokenOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ExchangeCodeForTokenOutput()
        value.accessToken = try reader["accessToken"].readIfPresent() ?? ""
        value.expiresIn = try reader["expiresIn"].readIfPresent() ?? 0
        value.refreshToken = try reader["refreshToken"].readIfPresent() ?? ""
        return value
    }
}

extension ExportComponentsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ExportComponentsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ExportComponentsOutput()
        value.entities = try reader["entities"].readListIfPresent(memberReadingClosure: AmplifyUIBuilderClientTypes.Component.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ExportFormsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ExportFormsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ExportFormsOutput()
        value.entities = try reader["entities"].readListIfPresent(memberReadingClosure: AmplifyUIBuilderClientTypes.Form.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ExportThemesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ExportThemesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ExportThemesOutput()
        value.entities = try reader["entities"].readListIfPresent(memberReadingClosure: AmplifyUIBuilderClientTypes.Theme.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension GetCodegenJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetCodegenJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetCodegenJobOutput()
        value.job = try reader.readIfPresent(with: AmplifyUIBuilderClientTypes.CodegenJob.read(from:))
        return value
    }
}

extension GetComponentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetComponentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetComponentOutput()
        value.component = try reader.readIfPresent(with: AmplifyUIBuilderClientTypes.Component.read(from:))
        return value
    }
}

extension GetFormOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetFormOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetFormOutput()
        value.form = try reader.readIfPresent(with: AmplifyUIBuilderClientTypes.Form.read(from:))
        return value
    }
}

extension GetMetadataOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetMetadataOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetMetadataOutput()
        value.features = try reader["features"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false) ?? [:]
        return value
    }
}

extension GetThemeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetThemeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetThemeOutput()
        value.theme = try reader.readIfPresent(with: AmplifyUIBuilderClientTypes.Theme.read(from:))
        return value
    }
}

extension ListCodegenJobsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListCodegenJobsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListCodegenJobsOutput()
        value.entities = try reader["entities"].readListIfPresent(memberReadingClosure: AmplifyUIBuilderClientTypes.CodegenJobSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListComponentsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListComponentsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListComponentsOutput()
        value.entities = try reader["entities"].readListIfPresent(memberReadingClosure: AmplifyUIBuilderClientTypes.ComponentSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListFormsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListFormsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListFormsOutput()
        value.entities = try reader["entities"].readListIfPresent(memberReadingClosure: AmplifyUIBuilderClientTypes.FormSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false) ?? [:]
        return value
    }
}

extension ListThemesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListThemesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListThemesOutput()
        value.entities = try reader["entities"].readListIfPresent(memberReadingClosure: AmplifyUIBuilderClientTypes.ThemeSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension PutMetadataFlagOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutMetadataFlagOutput {
        return PutMetadataFlagOutput()
    }
}

extension RefreshTokenOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RefreshTokenOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RefreshTokenOutput()
        value.accessToken = try reader["accessToken"].readIfPresent() ?? ""
        value.expiresIn = try reader["expiresIn"].readIfPresent() ?? 0
        return value
    }
}

extension StartCodegenJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartCodegenJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartCodegenJobOutput()
        value.entity = try reader.readIfPresent(with: AmplifyUIBuilderClientTypes.CodegenJob.read(from:))
        return value
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateComponentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateComponentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateComponentOutput()
        value.entity = try reader.readIfPresent(with: AmplifyUIBuilderClientTypes.Component.read(from:))
        return value
    }
}

extension UpdateFormOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateFormOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateFormOutput()
        value.entity = try reader.readIfPresent(with: AmplifyUIBuilderClientTypes.Form.read(from:))
        return value
    }
}

extension UpdateThemeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateThemeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateThemeOutput()
        value.entity = try reader.readIfPresent(with: AmplifyUIBuilderClientTypes.Theme.read(from:))
        return value
    }
}

enum CreateComponentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceConflictException": return try ResourceConflictException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateFormOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceConflictException": return try ResourceConflictException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateThemeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceConflictException": return try ResourceConflictException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteComponentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteFormOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteThemeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ExchangeCodeForTokenOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ExportComponentsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ExportFormsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ExportThemesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetCodegenJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetComponentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetFormOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetMetadataOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetThemeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListCodegenJobsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListComponentsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListFormsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListThemesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutMetadataFlagOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RefreshTokenOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartCodegenJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateComponentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceConflictException": return try ResourceConflictException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateFormOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceConflictException": return try ResourceConflictException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateThemeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceConflictException": return try ResourceConflictException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension InternalServerException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalServerException {
        let reader = baseError.errorBodyReader
        var value = InternalServerException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceConflictException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceConflictException {
        let reader = baseError.errorBodyReader
        var value = ResourceConflictException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceQuotaExceededException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ServiceQuotaExceededException {
        let reader = baseError.errorBodyReader
        var value = ServiceQuotaExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidParameterException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InvalidParameterException {
        let reader = baseError.errorBodyReader
        var value = InvalidParameterException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ThrottlingException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ThrottlingException {
        let reader = baseError.errorBodyReader
        var value = ThrottlingException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UnauthorizedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> UnauthorizedException {
        let reader = baseError.errorBodyReader
        var value = UnauthorizedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AmplifyUIBuilderClientTypes.Component {

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.Component {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.Component()
        value.appId = try reader["appId"].readIfPresent() ?? ""
        value.environmentName = try reader["environmentName"].readIfPresent() ?? ""
        value.sourceId = try reader["sourceId"].readIfPresent()
        value.id = try reader["id"].readIfPresent() ?? ""
        value.name = try reader["name"].readIfPresent() ?? ""
        value.componentType = try reader["componentType"].readIfPresent() ?? ""
        value.properties = try reader["properties"].readMapIfPresent(valueReadingClosure: AmplifyUIBuilderClientTypes.ComponentProperty.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false) ?? [:]
        value.children = try reader["children"].readListIfPresent(memberReadingClosure: AmplifyUIBuilderClientTypes.ComponentChild.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.variants = try reader["variants"].readListIfPresent(memberReadingClosure: AmplifyUIBuilderClientTypes.ComponentVariant.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.overrides = try reader["overrides"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.mapReadingClosure(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false) ?? [:]
        value.bindingProperties = try reader["bindingProperties"].readMapIfPresent(valueReadingClosure: AmplifyUIBuilderClientTypes.ComponentBindingPropertiesValue.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false) ?? [:]
        value.collectionProperties = try reader["collectionProperties"].readMapIfPresent(valueReadingClosure: AmplifyUIBuilderClientTypes.ComponentDataConfiguration.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.modifiedAt = try reader["modifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.events = try reader["events"].readMapIfPresent(valueReadingClosure: AmplifyUIBuilderClientTypes.ComponentEvent.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.schemaVersion = try reader["schemaVersion"].readIfPresent()
        return value
    }
}

extension AmplifyUIBuilderClientTypes.ComponentEvent {

    static func write(value: AmplifyUIBuilderClientTypes.ComponentEvent?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["action"].write(value.action)
        try writer["bindingEvent"].write(value.bindingEvent)
        try writer["parameters"].write(value.parameters, with: AmplifyUIBuilderClientTypes.ActionParameters.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.ComponentEvent {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.ComponentEvent()
        value.action = try reader["action"].readIfPresent()
        value.parameters = try reader["parameters"].readIfPresent(with: AmplifyUIBuilderClientTypes.ActionParameters.read(from:))
        value.bindingEvent = try reader["bindingEvent"].readIfPresent()
        return value
    }
}

extension AmplifyUIBuilderClientTypes.ActionParameters {

    static func write(value: AmplifyUIBuilderClientTypes.ActionParameters?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["anchor"].write(value.anchor, with: AmplifyUIBuilderClientTypes.ComponentProperty.write(value:to:))
        try writer["fields"].writeMap(value.fields, valueWritingClosure: AmplifyUIBuilderClientTypes.ComponentProperty.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["global"].write(value.global, with: AmplifyUIBuilderClientTypes.ComponentProperty.write(value:to:))
        try writer["id"].write(value.id, with: AmplifyUIBuilderClientTypes.ComponentProperty.write(value:to:))
        try writer["model"].write(value.model)
        try writer["state"].write(value.state, with: AmplifyUIBuilderClientTypes.MutationActionSetStateParameter.write(value:to:))
        try writer["target"].write(value.target, with: AmplifyUIBuilderClientTypes.ComponentProperty.write(value:to:))
        try writer["type"].write(value.type, with: AmplifyUIBuilderClientTypes.ComponentProperty.write(value:to:))
        try writer["url"].write(value.url, with: AmplifyUIBuilderClientTypes.ComponentProperty.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.ActionParameters {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.ActionParameters()
        value.type = try reader["type"].readIfPresent(with: AmplifyUIBuilderClientTypes.ComponentProperty.read(from:))
        value.url = try reader["url"].readIfPresent(with: AmplifyUIBuilderClientTypes.ComponentProperty.read(from:))
        value.anchor = try reader["anchor"].readIfPresent(with: AmplifyUIBuilderClientTypes.ComponentProperty.read(from:))
        value.target = try reader["target"].readIfPresent(with: AmplifyUIBuilderClientTypes.ComponentProperty.read(from:))
        value.global = try reader["global"].readIfPresent(with: AmplifyUIBuilderClientTypes.ComponentProperty.read(from:))
        value.model = try reader["model"].readIfPresent()
        value.id = try reader["id"].readIfPresent(with: AmplifyUIBuilderClientTypes.ComponentProperty.read(from:))
        value.fields = try reader["fields"].readMapIfPresent(valueReadingClosure: AmplifyUIBuilderClientTypes.ComponentProperty.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.state = try reader["state"].readIfPresent(with: AmplifyUIBuilderClientTypes.MutationActionSetStateParameter.read(from:))
        return value
    }
}

extension AmplifyUIBuilderClientTypes.MutationActionSetStateParameter {

    static func write(value: AmplifyUIBuilderClientTypes.MutationActionSetStateParameter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["componentName"].write(value.componentName)
        try writer["property"].write(value.property)
        try writer["set"].write(value.`set`, with: AmplifyUIBuilderClientTypes.ComponentProperty.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.MutationActionSetStateParameter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.MutationActionSetStateParameter()
        value.componentName = try reader["componentName"].readIfPresent() ?? ""
        value.property = try reader["property"].readIfPresent() ?? ""
        value.`set` = try reader["set"].readIfPresent(with: AmplifyUIBuilderClientTypes.ComponentProperty.read(from:))
        return value
    }
}

extension AmplifyUIBuilderClientTypes.ComponentProperty {

    static func write(value: AmplifyUIBuilderClientTypes.ComponentProperty?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bindingProperties"].write(value.bindingProperties, with: AmplifyUIBuilderClientTypes.ComponentPropertyBindingProperties.write(value:to:))
        try writer["bindings"].writeMap(value.bindings, valueWritingClosure: AmplifyUIBuilderClientTypes.FormBindingElement.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["collectionBindingProperties"].write(value.collectionBindingProperties, with: AmplifyUIBuilderClientTypes.ComponentPropertyBindingProperties.write(value:to:))
        try writer["componentName"].write(value.componentName)
        try writer["concat"].writeList(value.concat, memberWritingClosure: AmplifyUIBuilderClientTypes.ComponentProperty.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["condition"].write(value.condition, with: AmplifyUIBuilderClientTypes.ComponentConditionProperty.write(value:to:))
        try writer["configured"].write(value.configured)
        try writer["defaultValue"].write(value.defaultValue)
        try writer["event"].write(value.event)
        try writer["importedValue"].write(value.importedValue)
        try writer["model"].write(value.model)
        try writer["property"].write(value.property)
        try writer["type"].write(value.type)
        try writer["userAttribute"].write(value.userAttribute)
        try writer["value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.ComponentProperty {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.ComponentProperty()
        value.value = try reader["value"].readIfPresent()
        value.bindingProperties = try reader["bindingProperties"].readIfPresent(with: AmplifyUIBuilderClientTypes.ComponentPropertyBindingProperties.read(from:))
        value.collectionBindingProperties = try reader["collectionBindingProperties"].readIfPresent(with: AmplifyUIBuilderClientTypes.ComponentPropertyBindingProperties.read(from:))
        value.defaultValue = try reader["defaultValue"].readIfPresent()
        value.model = try reader["model"].readIfPresent()
        value.bindings = try reader["bindings"].readMapIfPresent(valueReadingClosure: AmplifyUIBuilderClientTypes.FormBindingElement.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.event = try reader["event"].readIfPresent()
        value.userAttribute = try reader["userAttribute"].readIfPresent()
        value.concat = try reader["concat"].readListIfPresent(memberReadingClosure: AmplifyUIBuilderClientTypes.ComponentProperty.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.condition = try reader["condition"].readIfPresent(with: AmplifyUIBuilderClientTypes.ComponentConditionProperty.read(from:))
        value.configured = try reader["configured"].readIfPresent()
        value.type = try reader["type"].readIfPresent()
        value.importedValue = try reader["importedValue"].readIfPresent()
        value.componentName = try reader["componentName"].readIfPresent()
        value.property = try reader["property"].readIfPresent()
        return value
    }
}

extension AmplifyUIBuilderClientTypes.ComponentConditionProperty {

    static func write(value: AmplifyUIBuilderClientTypes.ComponentConditionProperty?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["else"].write(value.`else`, with: AmplifyUIBuilderClientTypes.ComponentProperty.write(value:to:))
        try writer["field"].write(value.field)
        try writer["operand"].write(value.operand)
        try writer["operandType"].write(value.operandType)
        try writer["operator"].write(value.`operator`)
        try writer["property"].write(value.property)
        try writer["then"].write(value.then, with: AmplifyUIBuilderClientTypes.ComponentProperty.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.ComponentConditionProperty {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.ComponentConditionProperty()
        value.property = try reader["property"].readIfPresent()
        value.field = try reader["field"].readIfPresent()
        value.`operator` = try reader["operator"].readIfPresent()
        value.operand = try reader["operand"].readIfPresent()
        value.then = try reader["then"].readIfPresent(with: AmplifyUIBuilderClientTypes.ComponentProperty.read(from:))
        value.`else` = try reader["else"].readIfPresent(with: AmplifyUIBuilderClientTypes.ComponentProperty.read(from:))
        value.operandType = try reader["operandType"].readIfPresent()
        return value
    }
}

extension AmplifyUIBuilderClientTypes.FormBindingElement {

    static func write(value: AmplifyUIBuilderClientTypes.FormBindingElement?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["element"].write(value.element)
        try writer["property"].write(value.property)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.FormBindingElement {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.FormBindingElement()
        value.element = try reader["element"].readIfPresent() ?? ""
        value.property = try reader["property"].readIfPresent() ?? ""
        return value
    }
}

extension AmplifyUIBuilderClientTypes.ComponentPropertyBindingProperties {

    static func write(value: AmplifyUIBuilderClientTypes.ComponentPropertyBindingProperties?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["field"].write(value.field)
        try writer["property"].write(value.property)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.ComponentPropertyBindingProperties {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.ComponentPropertyBindingProperties()
        value.property = try reader["property"].readIfPresent() ?? ""
        value.field = try reader["field"].readIfPresent()
        return value
    }
}

extension AmplifyUIBuilderClientTypes.ComponentDataConfiguration {

    static func write(value: AmplifyUIBuilderClientTypes.ComponentDataConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["identifiers"].writeList(value.identifiers, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["model"].write(value.model)
        try writer["predicate"].write(value.predicate, with: AmplifyUIBuilderClientTypes.Predicate.write(value:to:))
        try writer["sort"].writeList(value.sort, memberWritingClosure: AmplifyUIBuilderClientTypes.SortProperty.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.ComponentDataConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.ComponentDataConfiguration()
        value.model = try reader["model"].readIfPresent() ?? ""
        value.sort = try reader["sort"].readListIfPresent(memberReadingClosure: AmplifyUIBuilderClientTypes.SortProperty.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.predicate = try reader["predicate"].readIfPresent(with: AmplifyUIBuilderClientTypes.Predicate.read(from:))
        value.identifiers = try reader["identifiers"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension AmplifyUIBuilderClientTypes.Predicate {

    static func write(value: AmplifyUIBuilderClientTypes.Predicate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["and"].writeList(value.and, memberWritingClosure: AmplifyUIBuilderClientTypes.Predicate.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["field"].write(value.field)
        try writer["operand"].write(value.operand)
        try writer["operandType"].write(value.operandType)
        try writer["operator"].write(value.`operator`)
        try writer["or"].writeList(value.or, memberWritingClosure: AmplifyUIBuilderClientTypes.Predicate.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.Predicate {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.Predicate()
        value.or = try reader["or"].readListIfPresent(memberReadingClosure: AmplifyUIBuilderClientTypes.Predicate.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.and = try reader["and"].readListIfPresent(memberReadingClosure: AmplifyUIBuilderClientTypes.Predicate.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.field = try reader["field"].readIfPresent()
        value.`operator` = try reader["operator"].readIfPresent()
        value.operand = try reader["operand"].readIfPresent()
        value.operandType = try reader["operandType"].readIfPresent()
        return value
    }
}

extension AmplifyUIBuilderClientTypes.SortProperty {

    static func write(value: AmplifyUIBuilderClientTypes.SortProperty?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["direction"].write(value.direction)
        try writer["field"].write(value.field)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.SortProperty {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.SortProperty()
        value.field = try reader["field"].readIfPresent() ?? ""
        value.direction = try reader["direction"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension AmplifyUIBuilderClientTypes.ComponentBindingPropertiesValue {

    static func write(value: AmplifyUIBuilderClientTypes.ComponentBindingPropertiesValue?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bindingProperties"].write(value.bindingProperties, with: AmplifyUIBuilderClientTypes.ComponentBindingPropertiesValueProperties.write(value:to:))
        try writer["defaultValue"].write(value.defaultValue)
        try writer["type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.ComponentBindingPropertiesValue {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.ComponentBindingPropertiesValue()
        value.type = try reader["type"].readIfPresent()
        value.bindingProperties = try reader["bindingProperties"].readIfPresent(with: AmplifyUIBuilderClientTypes.ComponentBindingPropertiesValueProperties.read(from:))
        value.defaultValue = try reader["defaultValue"].readIfPresent()
        return value
    }
}

extension AmplifyUIBuilderClientTypes.ComponentBindingPropertiesValueProperties {

    static func write(value: AmplifyUIBuilderClientTypes.ComponentBindingPropertiesValueProperties?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bucket"].write(value.bucket)
        try writer["defaultValue"].write(value.defaultValue)
        try writer["field"].write(value.field)
        try writer["key"].write(value.key)
        try writer["model"].write(value.model)
        try writer["predicates"].writeList(value.predicates, memberWritingClosure: AmplifyUIBuilderClientTypes.Predicate.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["slotName"].write(value.slotName)
        try writer["userAttribute"].write(value.userAttribute)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.ComponentBindingPropertiesValueProperties {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.ComponentBindingPropertiesValueProperties()
        value.model = try reader["model"].readIfPresent()
        value.field = try reader["field"].readIfPresent()
        value.predicates = try reader["predicates"].readListIfPresent(memberReadingClosure: AmplifyUIBuilderClientTypes.Predicate.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.userAttribute = try reader["userAttribute"].readIfPresent()
        value.bucket = try reader["bucket"].readIfPresent()
        value.key = try reader["key"].readIfPresent()
        value.defaultValue = try reader["defaultValue"].readIfPresent()
        value.slotName = try reader["slotName"].readIfPresent()
        return value
    }
}

extension AmplifyUIBuilderClientTypes.ComponentVariant {

    static func write(value: AmplifyUIBuilderClientTypes.ComponentVariant?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["overrides"].writeMap(value.overrides, valueWritingClosure: SmithyReadWrite.mapWritingClosure(valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["variantValues"].writeMap(value.variantValues, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.ComponentVariant {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.ComponentVariant()
        value.variantValues = try reader["variantValues"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.overrides = try reader["overrides"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.mapReadingClosure(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension AmplifyUIBuilderClientTypes.ComponentChild {

    static func write(value: AmplifyUIBuilderClientTypes.ComponentChild?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["children"].writeList(value.children, memberWritingClosure: AmplifyUIBuilderClientTypes.ComponentChild.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["componentType"].write(value.componentType)
        try writer["events"].writeMap(value.events, valueWritingClosure: AmplifyUIBuilderClientTypes.ComponentEvent.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["name"].write(value.name)
        try writer["properties"].writeMap(value.properties, valueWritingClosure: AmplifyUIBuilderClientTypes.ComponentProperty.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["sourceId"].write(value.sourceId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.ComponentChild {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.ComponentChild()
        value.componentType = try reader["componentType"].readIfPresent() ?? ""
        value.name = try reader["name"].readIfPresent() ?? ""
        value.properties = try reader["properties"].readMapIfPresent(valueReadingClosure: AmplifyUIBuilderClientTypes.ComponentProperty.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false) ?? [:]
        value.children = try reader["children"].readListIfPresent(memberReadingClosure: AmplifyUIBuilderClientTypes.ComponentChild.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.events = try reader["events"].readMapIfPresent(valueReadingClosure: AmplifyUIBuilderClientTypes.ComponentEvent.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.sourceId = try reader["sourceId"].readIfPresent()
        return value
    }
}

extension AmplifyUIBuilderClientTypes.Form {

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.Form {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.Form()
        value.appId = try reader["appId"].readIfPresent() ?? ""
        value.environmentName = try reader["environmentName"].readIfPresent() ?? ""
        value.id = try reader["id"].readIfPresent() ?? ""
        value.name = try reader["name"].readIfPresent() ?? ""
        value.formActionType = try reader["formActionType"].readIfPresent() ?? .sdkUnknown("")
        value.style = try reader["style"].readIfPresent(with: AmplifyUIBuilderClientTypes.FormStyle.read(from:))
        value.dataType = try reader["dataType"].readIfPresent(with: AmplifyUIBuilderClientTypes.FormDataTypeConfig.read(from:))
        value.fields = try reader["fields"].readMapIfPresent(valueReadingClosure: AmplifyUIBuilderClientTypes.FieldConfig.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false) ?? [:]
        value.sectionalElements = try reader["sectionalElements"].readMapIfPresent(valueReadingClosure: AmplifyUIBuilderClientTypes.SectionalElement.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false) ?? [:]
        value.schemaVersion = try reader["schemaVersion"].readIfPresent() ?? ""
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.cta = try reader["cta"].readIfPresent(with: AmplifyUIBuilderClientTypes.FormCTA.read(from:))
        value.labelDecorator = try reader["labelDecorator"].readIfPresent()
        return value
    }
}

extension AmplifyUIBuilderClientTypes.FormCTA {

    static func write(value: AmplifyUIBuilderClientTypes.FormCTA?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cancel"].write(value.cancel, with: AmplifyUIBuilderClientTypes.FormButton.write(value:to:))
        try writer["clear"].write(value.clear, with: AmplifyUIBuilderClientTypes.FormButton.write(value:to:))
        try writer["position"].write(value.position)
        try writer["submit"].write(value.submit, with: AmplifyUIBuilderClientTypes.FormButton.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.FormCTA {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.FormCTA()
        value.position = try reader["position"].readIfPresent()
        value.clear = try reader["clear"].readIfPresent(with: AmplifyUIBuilderClientTypes.FormButton.read(from:))
        value.cancel = try reader["cancel"].readIfPresent(with: AmplifyUIBuilderClientTypes.FormButton.read(from:))
        value.submit = try reader["submit"].readIfPresent(with: AmplifyUIBuilderClientTypes.FormButton.read(from:))
        return value
    }
}

extension AmplifyUIBuilderClientTypes.FormButton {

    static func write(value: AmplifyUIBuilderClientTypes.FormButton?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["children"].write(value.children)
        try writer["excluded"].write(value.excluded)
        try writer["position"].write(value.position, with: AmplifyUIBuilderClientTypes.FieldPosition.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.FormButton {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.FormButton()
        value.excluded = try reader["excluded"].readIfPresent()
        value.children = try reader["children"].readIfPresent()
        value.position = try reader["position"].readIfPresent(with: AmplifyUIBuilderClientTypes.FieldPosition.read(from:))
        return value
    }
}

extension AmplifyUIBuilderClientTypes.FieldPosition {

    static func write(value: AmplifyUIBuilderClientTypes.FieldPosition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        switch value {
            case let .below(below):
                try writer["below"].write(below)
            case let .fixed(fixed):
                try writer["fixed"].write(fixed)
            case let .rightof(rightof):
                try writer["rightOf"].write(rightof)
            case let .sdkUnknown(sdkUnknown):
                try writer["sdkUnknown"].write(sdkUnknown)
        }
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.FieldPosition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        let name = reader.children.filter { $0.hasContent && $0.nodeInfo.name != "__type" }.first?.nodeInfo.name
        switch name {
            case "fixed":
                return .fixed(try reader["fixed"].read())
            case "rightOf":
                return .rightof(try reader["rightOf"].read())
            case "below":
                return .below(try reader["below"].read())
            default:
                return .sdkUnknown(name ?? "")
        }
    }
}

extension AmplifyUIBuilderClientTypes.SectionalElement {

    static func write(value: AmplifyUIBuilderClientTypes.SectionalElement?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["excluded"].write(value.excluded)
        try writer["level"].write(value.level)
        try writer["orientation"].write(value.orientation)
        try writer["position"].write(value.position, with: AmplifyUIBuilderClientTypes.FieldPosition.write(value:to:))
        try writer["text"].write(value.text)
        try writer["type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.SectionalElement {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.SectionalElement()
        value.type = try reader["type"].readIfPresent() ?? ""
        value.position = try reader["position"].readIfPresent(with: AmplifyUIBuilderClientTypes.FieldPosition.read(from:))
        value.text = try reader["text"].readIfPresent()
        value.level = try reader["level"].readIfPresent()
        value.orientation = try reader["orientation"].readIfPresent()
        value.excluded = try reader["excluded"].readIfPresent()
        return value
    }
}

extension AmplifyUIBuilderClientTypes.FieldConfig {

    static func write(value: AmplifyUIBuilderClientTypes.FieldConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["excluded"].write(value.excluded)
        try writer["inputType"].write(value.inputType, with: AmplifyUIBuilderClientTypes.FieldInputConfig.write(value:to:))
        try writer["label"].write(value.label)
        try writer["position"].write(value.position, with: AmplifyUIBuilderClientTypes.FieldPosition.write(value:to:))
        try writer["validations"].writeList(value.validations, memberWritingClosure: AmplifyUIBuilderClientTypes.FieldValidationConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.FieldConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.FieldConfig()
        value.label = try reader["label"].readIfPresent()
        value.position = try reader["position"].readIfPresent(with: AmplifyUIBuilderClientTypes.FieldPosition.read(from:))
        value.excluded = try reader["excluded"].readIfPresent()
        value.inputType = try reader["inputType"].readIfPresent(with: AmplifyUIBuilderClientTypes.FieldInputConfig.read(from:))
        value.validations = try reader["validations"].readListIfPresent(memberReadingClosure: AmplifyUIBuilderClientTypes.FieldValidationConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension AmplifyUIBuilderClientTypes.FieldValidationConfiguration {

    static func write(value: AmplifyUIBuilderClientTypes.FieldValidationConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["numValues"].writeList(value.numValues, memberWritingClosure: SmithyReadWrite.WritingClosures.writeInt(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["strValues"].writeList(value.strValues, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["type"].write(value.type)
        try writer["validationMessage"].write(value.validationMessage)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.FieldValidationConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.FieldValidationConfiguration()
        value.type = try reader["type"].readIfPresent() ?? ""
        value.strValues = try reader["strValues"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.numValues = try reader["numValues"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readInt(from:), memberNodeInfo: "member", isFlattened: false)
        value.validationMessage = try reader["validationMessage"].readIfPresent()
        return value
    }
}

extension AmplifyUIBuilderClientTypes.FieldInputConfig {

    static func write(value: AmplifyUIBuilderClientTypes.FieldInputConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["defaultChecked"].write(value.defaultChecked)
        try writer["defaultCountryCode"].write(value.defaultCountryCode)
        try writer["defaultValue"].write(value.defaultValue)
        try writer["descriptiveText"].write(value.descriptiveText)
        try writer["fileUploaderConfig"].write(value.fileUploaderConfig, with: AmplifyUIBuilderClientTypes.FileUploaderFieldConfig.write(value:to:))
        try writer["isArray"].write(value.isArray)
        try writer["maxValue"].write(value.maxValue)
        try writer["minValue"].write(value.minValue)
        try writer["name"].write(value.name)
        try writer["placeholder"].write(value.placeholder)
        try writer["readOnly"].write(value.readOnly)
        try writer["required"].write(value.`required`)
        try writer["step"].write(value.step)
        try writer["type"].write(value.type)
        try writer["value"].write(value.value)
        try writer["valueMappings"].write(value.valueMappings, with: AmplifyUIBuilderClientTypes.ValueMappings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.FieldInputConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.FieldInputConfig()
        value.type = try reader["type"].readIfPresent() ?? ""
        value.`required` = try reader["required"].readIfPresent()
        value.readOnly = try reader["readOnly"].readIfPresent()
        value.placeholder = try reader["placeholder"].readIfPresent()
        value.defaultValue = try reader["defaultValue"].readIfPresent()
        value.descriptiveText = try reader["descriptiveText"].readIfPresent()
        value.defaultChecked = try reader["defaultChecked"].readIfPresent()
        value.defaultCountryCode = try reader["defaultCountryCode"].readIfPresent()
        value.valueMappings = try reader["valueMappings"].readIfPresent(with: AmplifyUIBuilderClientTypes.ValueMappings.read(from:))
        value.name = try reader["name"].readIfPresent()
        value.minValue = try reader["minValue"].readIfPresent()
        value.maxValue = try reader["maxValue"].readIfPresent()
        value.step = try reader["step"].readIfPresent()
        value.value = try reader["value"].readIfPresent()
        value.isArray = try reader["isArray"].readIfPresent()
        value.fileUploaderConfig = try reader["fileUploaderConfig"].readIfPresent(with: AmplifyUIBuilderClientTypes.FileUploaderFieldConfig.read(from:))
        return value
    }
}

extension AmplifyUIBuilderClientTypes.FileUploaderFieldConfig {

    static func write(value: AmplifyUIBuilderClientTypes.FileUploaderFieldConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["acceptedFileTypes"].writeList(value.acceptedFileTypes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["accessLevel"].write(value.accessLevel)
        try writer["isResumable"].write(value.isResumable)
        try writer["maxFileCount"].write(value.maxFileCount)
        try writer["maxSize"].write(value.maxSize)
        try writer["showThumbnails"].write(value.showThumbnails)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.FileUploaderFieldConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.FileUploaderFieldConfig()
        value.accessLevel = try reader["accessLevel"].readIfPresent() ?? .sdkUnknown("")
        value.acceptedFileTypes = try reader["acceptedFileTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.showThumbnails = try reader["showThumbnails"].readIfPresent()
        value.isResumable = try reader["isResumable"].readIfPresent()
        value.maxFileCount = try reader["maxFileCount"].readIfPresent()
        value.maxSize = try reader["maxSize"].readIfPresent()
        return value
    }
}

extension AmplifyUIBuilderClientTypes.ValueMappings {

    static func write(value: AmplifyUIBuilderClientTypes.ValueMappings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bindingProperties"].writeMap(value.bindingProperties, valueWritingClosure: AmplifyUIBuilderClientTypes.FormInputBindingPropertiesValue.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["values"].writeList(value.values, memberWritingClosure: AmplifyUIBuilderClientTypes.ValueMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.ValueMappings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.ValueMappings()
        value.values = try reader["values"].readListIfPresent(memberReadingClosure: AmplifyUIBuilderClientTypes.ValueMapping.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.bindingProperties = try reader["bindingProperties"].readMapIfPresent(valueReadingClosure: AmplifyUIBuilderClientTypes.FormInputBindingPropertiesValue.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension AmplifyUIBuilderClientTypes.FormInputBindingPropertiesValue {

    static func write(value: AmplifyUIBuilderClientTypes.FormInputBindingPropertiesValue?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bindingProperties"].write(value.bindingProperties, with: AmplifyUIBuilderClientTypes.FormInputBindingPropertiesValueProperties.write(value:to:))
        try writer["type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.FormInputBindingPropertiesValue {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.FormInputBindingPropertiesValue()
        value.type = try reader["type"].readIfPresent()
        value.bindingProperties = try reader["bindingProperties"].readIfPresent(with: AmplifyUIBuilderClientTypes.FormInputBindingPropertiesValueProperties.read(from:))
        return value
    }
}

extension AmplifyUIBuilderClientTypes.FormInputBindingPropertiesValueProperties {

    static func write(value: AmplifyUIBuilderClientTypes.FormInputBindingPropertiesValueProperties?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["model"].write(value.model)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.FormInputBindingPropertiesValueProperties {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.FormInputBindingPropertiesValueProperties()
        value.model = try reader["model"].readIfPresent()
        return value
    }
}

extension AmplifyUIBuilderClientTypes.ValueMapping {

    static func write(value: AmplifyUIBuilderClientTypes.ValueMapping?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["displayValue"].write(value.displayValue, with: AmplifyUIBuilderClientTypes.FormInputValueProperty.write(value:to:))
        try writer["value"].write(value.value, with: AmplifyUIBuilderClientTypes.FormInputValueProperty.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.ValueMapping {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.ValueMapping()
        value.displayValue = try reader["displayValue"].readIfPresent(with: AmplifyUIBuilderClientTypes.FormInputValueProperty.read(from:))
        value.value = try reader["value"].readIfPresent(with: AmplifyUIBuilderClientTypes.FormInputValueProperty.read(from:))
        return value
    }
}

extension AmplifyUIBuilderClientTypes.FormInputValueProperty {

    static func write(value: AmplifyUIBuilderClientTypes.FormInputValueProperty?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bindingProperties"].write(value.bindingProperties, with: AmplifyUIBuilderClientTypes.FormInputValuePropertyBindingProperties.write(value:to:))
        try writer["concat"].writeList(value.concat, memberWritingClosure: AmplifyUIBuilderClientTypes.FormInputValueProperty.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.FormInputValueProperty {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.FormInputValueProperty()
        value.value = try reader["value"].readIfPresent()
        value.bindingProperties = try reader["bindingProperties"].readIfPresent(with: AmplifyUIBuilderClientTypes.FormInputValuePropertyBindingProperties.read(from:))
        value.concat = try reader["concat"].readListIfPresent(memberReadingClosure: AmplifyUIBuilderClientTypes.FormInputValueProperty.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension AmplifyUIBuilderClientTypes.FormInputValuePropertyBindingProperties {

    static func write(value: AmplifyUIBuilderClientTypes.FormInputValuePropertyBindingProperties?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["field"].write(value.field)
        try writer["property"].write(value.property)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.FormInputValuePropertyBindingProperties {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.FormInputValuePropertyBindingProperties()
        value.property = try reader["property"].readIfPresent() ?? ""
        value.field = try reader["field"].readIfPresent()
        return value
    }
}

extension AmplifyUIBuilderClientTypes.FormDataTypeConfig {

    static func write(value: AmplifyUIBuilderClientTypes.FormDataTypeConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["dataSourceType"].write(value.dataSourceType)
        try writer["dataTypeName"].write(value.dataTypeName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.FormDataTypeConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.FormDataTypeConfig()
        value.dataSourceType = try reader["dataSourceType"].readIfPresent() ?? .sdkUnknown("")
        value.dataTypeName = try reader["dataTypeName"].readIfPresent() ?? ""
        return value
    }
}

extension AmplifyUIBuilderClientTypes.FormStyle {

    static func write(value: AmplifyUIBuilderClientTypes.FormStyle?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["horizontalGap"].write(value.horizontalGap, with: AmplifyUIBuilderClientTypes.FormStyleConfig.write(value:to:))
        try writer["outerPadding"].write(value.outerPadding, with: AmplifyUIBuilderClientTypes.FormStyleConfig.write(value:to:))
        try writer["verticalGap"].write(value.verticalGap, with: AmplifyUIBuilderClientTypes.FormStyleConfig.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.FormStyle {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.FormStyle()
        value.horizontalGap = try reader["horizontalGap"].readIfPresent(with: AmplifyUIBuilderClientTypes.FormStyleConfig.read(from:))
        value.verticalGap = try reader["verticalGap"].readIfPresent(with: AmplifyUIBuilderClientTypes.FormStyleConfig.read(from:))
        value.outerPadding = try reader["outerPadding"].readIfPresent(with: AmplifyUIBuilderClientTypes.FormStyleConfig.read(from:))
        return value
    }
}

extension AmplifyUIBuilderClientTypes.FormStyleConfig {

    static func write(value: AmplifyUIBuilderClientTypes.FormStyleConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        switch value {
            case let .tokenreference(tokenreference):
                try writer["tokenReference"].write(tokenreference)
            case let .value(value):
                try writer["value"].write(value)
            case let .sdkUnknown(sdkUnknown):
                try writer["sdkUnknown"].write(sdkUnknown)
        }
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.FormStyleConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        let name = reader.children.filter { $0.hasContent && $0.nodeInfo.name != "__type" }.first?.nodeInfo.name
        switch name {
            case "tokenReference":
                return .tokenreference(try reader["tokenReference"].read())
            case "value":
                return .value(try reader["value"].read())
            default:
                return .sdkUnknown(name ?? "")
        }
    }
}

extension AmplifyUIBuilderClientTypes.Theme {

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.Theme {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.Theme()
        value.appId = try reader["appId"].readIfPresent() ?? ""
        value.environmentName = try reader["environmentName"].readIfPresent() ?? ""
        value.id = try reader["id"].readIfPresent() ?? ""
        value.name = try reader["name"].readIfPresent() ?? ""
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.modifiedAt = try reader["modifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.values = try reader["values"].readListIfPresent(memberReadingClosure: AmplifyUIBuilderClientTypes.ThemeValues.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.overrides = try reader["overrides"].readListIfPresent(memberReadingClosure: AmplifyUIBuilderClientTypes.ThemeValues.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension AmplifyUIBuilderClientTypes.ThemeValues {

    static func write(value: AmplifyUIBuilderClientTypes.ThemeValues?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["key"].write(value.key)
        try writer["value"].write(value.value, with: AmplifyUIBuilderClientTypes.ThemeValue.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.ThemeValues {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.ThemeValues()
        value.key = try reader["key"].readIfPresent()
        value.value = try reader["value"].readIfPresent(with: AmplifyUIBuilderClientTypes.ThemeValue.read(from:))
        return value
    }
}

extension AmplifyUIBuilderClientTypes.ThemeValue {

    static func write(value: AmplifyUIBuilderClientTypes.ThemeValue?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["children"].writeList(value.children, memberWritingClosure: AmplifyUIBuilderClientTypes.ThemeValues.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.ThemeValue {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.ThemeValue()
        value.value = try reader["value"].readIfPresent()
        value.children = try reader["children"].readListIfPresent(memberReadingClosure: AmplifyUIBuilderClientTypes.ThemeValues.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension AmplifyUIBuilderClientTypes.CodegenJob {

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.CodegenJob {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.CodegenJob()
        value.id = try reader["id"].readIfPresent() ?? ""
        value.appId = try reader["appId"].readIfPresent() ?? ""
        value.environmentName = try reader["environmentName"].readIfPresent() ?? ""
        value.renderConfig = try reader["renderConfig"].readIfPresent(with: AmplifyUIBuilderClientTypes.CodegenJobRenderConfig.read(from:))
        value.genericDataSchema = try reader["genericDataSchema"].readIfPresent(with: AmplifyUIBuilderClientTypes.CodegenJobGenericDataSchema.read(from:))
        value.autoGenerateForms = try reader["autoGenerateForms"].readIfPresent()
        value.features = try reader["features"].readIfPresent(with: AmplifyUIBuilderClientTypes.CodegenFeatureFlags.read(from:))
        value.status = try reader["status"].readIfPresent()
        value.statusMessage = try reader["statusMessage"].readIfPresent()
        value.asset = try reader["asset"].readIfPresent(with: AmplifyUIBuilderClientTypes.CodegenJobAsset.read(from:))
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.modifiedAt = try reader["modifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.dependencies = try reader["dependencies"].readListIfPresent(memberReadingClosure: AmplifyUIBuilderClientTypes.CodegenDependency.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension AmplifyUIBuilderClientTypes.CodegenDependency {

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.CodegenDependency {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.CodegenDependency()
        value.name = try reader["name"].readIfPresent()
        value.supportedVersion = try reader["supportedVersion"].readIfPresent()
        value.isSemVer = try reader["isSemVer"].readIfPresent()
        value.reason = try reader["reason"].readIfPresent()
        return value
    }
}

extension AmplifyUIBuilderClientTypes.CodegenJobAsset {

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.CodegenJobAsset {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.CodegenJobAsset()
        value.downloadUrl = try reader["downloadUrl"].readIfPresent()
        return value
    }
}

extension AmplifyUIBuilderClientTypes.CodegenFeatureFlags {

    static func write(value: AmplifyUIBuilderClientTypes.CodegenFeatureFlags?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["isNonModelSupported"].write(value.isNonModelSupported)
        try writer["isRelationshipSupported"].write(value.isRelationshipSupported)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.CodegenFeatureFlags {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.CodegenFeatureFlags()
        value.isRelationshipSupported = try reader["isRelationshipSupported"].readIfPresent()
        value.isNonModelSupported = try reader["isNonModelSupported"].readIfPresent()
        return value
    }
}

extension AmplifyUIBuilderClientTypes.CodegenJobGenericDataSchema {

    static func write(value: AmplifyUIBuilderClientTypes.CodegenJobGenericDataSchema?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["dataSourceType"].write(value.dataSourceType)
        try writer["enums"].writeMap(value.enums, valueWritingClosure: AmplifyUIBuilderClientTypes.CodegenGenericDataEnum.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["models"].writeMap(value.models, valueWritingClosure: AmplifyUIBuilderClientTypes.CodegenGenericDataModel.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["nonModels"].writeMap(value.nonModels, valueWritingClosure: AmplifyUIBuilderClientTypes.CodegenGenericDataNonModel.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.CodegenJobGenericDataSchema {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.CodegenJobGenericDataSchema()
        value.dataSourceType = try reader["dataSourceType"].readIfPresent() ?? .sdkUnknown("")
        value.models = try reader["models"].readMapIfPresent(valueReadingClosure: AmplifyUIBuilderClientTypes.CodegenGenericDataModel.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false) ?? [:]
        value.enums = try reader["enums"].readMapIfPresent(valueReadingClosure: AmplifyUIBuilderClientTypes.CodegenGenericDataEnum.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false) ?? [:]
        value.nonModels = try reader["nonModels"].readMapIfPresent(valueReadingClosure: AmplifyUIBuilderClientTypes.CodegenGenericDataNonModel.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false) ?? [:]
        return value
    }
}

extension AmplifyUIBuilderClientTypes.CodegenGenericDataNonModel {

    static func write(value: AmplifyUIBuilderClientTypes.CodegenGenericDataNonModel?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["fields"].writeMap(value.fields, valueWritingClosure: AmplifyUIBuilderClientTypes.CodegenGenericDataField.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.CodegenGenericDataNonModel {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.CodegenGenericDataNonModel()
        value.fields = try reader["fields"].readMapIfPresent(valueReadingClosure: AmplifyUIBuilderClientTypes.CodegenGenericDataField.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false) ?? [:]
        return value
    }
}

extension AmplifyUIBuilderClientTypes.CodegenGenericDataField {

    static func write(value: AmplifyUIBuilderClientTypes.CodegenGenericDataField?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["dataType"].write(value.dataType)
        try writer["dataTypeValue"].write(value.dataTypeValue)
        try writer["isArray"].write(value.isArray)
        try writer["readOnly"].write(value.readOnly)
        try writer["relationship"].write(value.relationship, with: AmplifyUIBuilderClientTypes.CodegenGenericDataRelationshipType.write(value:to:))
        try writer["required"].write(value.`required`)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.CodegenGenericDataField {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.CodegenGenericDataField()
        value.dataType = try reader["dataType"].readIfPresent() ?? .sdkUnknown("")
        value.dataTypeValue = try reader["dataTypeValue"].readIfPresent() ?? ""
        value.`required` = try reader["required"].readIfPresent() ?? false
        value.readOnly = try reader["readOnly"].readIfPresent() ?? false
        value.isArray = try reader["isArray"].readIfPresent() ?? false
        value.relationship = try reader["relationship"].readIfPresent(with: AmplifyUIBuilderClientTypes.CodegenGenericDataRelationshipType.read(from:))
        return value
    }
}

extension AmplifyUIBuilderClientTypes.CodegenGenericDataRelationshipType {

    static func write(value: AmplifyUIBuilderClientTypes.CodegenGenericDataRelationshipType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["associatedFields"].writeList(value.associatedFields, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["belongsToFieldOnRelatedModel"].write(value.belongsToFieldOnRelatedModel)
        try writer["canUnlinkAssociatedModel"].write(value.canUnlinkAssociatedModel)
        try writer["isHasManyIndex"].write(value.isHasManyIndex)
        try writer["relatedJoinFieldName"].write(value.relatedJoinFieldName)
        try writer["relatedJoinTableName"].write(value.relatedJoinTableName)
        try writer["relatedModelFields"].writeList(value.relatedModelFields, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["relatedModelName"].write(value.relatedModelName)
        try writer["type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.CodegenGenericDataRelationshipType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.CodegenGenericDataRelationshipType()
        value.type = try reader["type"].readIfPresent() ?? .sdkUnknown("")
        value.relatedModelName = try reader["relatedModelName"].readIfPresent() ?? ""
        value.relatedModelFields = try reader["relatedModelFields"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.canUnlinkAssociatedModel = try reader["canUnlinkAssociatedModel"].readIfPresent()
        value.relatedJoinFieldName = try reader["relatedJoinFieldName"].readIfPresent()
        value.relatedJoinTableName = try reader["relatedJoinTableName"].readIfPresent()
        value.belongsToFieldOnRelatedModel = try reader["belongsToFieldOnRelatedModel"].readIfPresent()
        value.associatedFields = try reader["associatedFields"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.isHasManyIndex = try reader["isHasManyIndex"].readIfPresent()
        return value
    }
}

extension AmplifyUIBuilderClientTypes.CodegenGenericDataEnum {

    static func write(value: AmplifyUIBuilderClientTypes.CodegenGenericDataEnum?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.CodegenGenericDataEnum {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.CodegenGenericDataEnum()
        value.values = try reader["values"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension AmplifyUIBuilderClientTypes.CodegenGenericDataModel {

    static func write(value: AmplifyUIBuilderClientTypes.CodegenGenericDataModel?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["fields"].writeMap(value.fields, valueWritingClosure: AmplifyUIBuilderClientTypes.CodegenGenericDataField.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["isJoinTable"].write(value.isJoinTable)
        try writer["primaryKeys"].writeList(value.primaryKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.CodegenGenericDataModel {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.CodegenGenericDataModel()
        value.fields = try reader["fields"].readMapIfPresent(valueReadingClosure: AmplifyUIBuilderClientTypes.CodegenGenericDataField.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false) ?? [:]
        value.isJoinTable = try reader["isJoinTable"].readIfPresent()
        value.primaryKeys = try reader["primaryKeys"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension AmplifyUIBuilderClientTypes.CodegenJobRenderConfig {

    static func write(value: AmplifyUIBuilderClientTypes.CodegenJobRenderConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        switch value {
            case let .react(react):
                try writer["react"].write(react, with: AmplifyUIBuilderClientTypes.ReactStartCodegenJobData.write(value:to:))
            case let .sdkUnknown(sdkUnknown):
                try writer["sdkUnknown"].write(sdkUnknown)
        }
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.CodegenJobRenderConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        let name = reader.children.filter { $0.hasContent && $0.nodeInfo.name != "__type" }.first?.nodeInfo.name
        switch name {
            case "react":
                return .react(try reader["react"].read(with: AmplifyUIBuilderClientTypes.ReactStartCodegenJobData.read(from:)))
            default:
                return .sdkUnknown(name ?? "")
        }
    }
}

extension AmplifyUIBuilderClientTypes.ReactStartCodegenJobData {

    static func write(value: AmplifyUIBuilderClientTypes.ReactStartCodegenJobData?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["apiConfiguration"].write(value.apiConfiguration, with: AmplifyUIBuilderClientTypes.ApiConfiguration.write(value:to:))
        try writer["dependencies"].writeMap(value.dependencies, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["inlineSourceMap"].write(value.inlineSourceMap)
        try writer["module"].write(value.module)
        try writer["renderTypeDeclarations"].write(value.renderTypeDeclarations)
        try writer["script"].write(value.script)
        try writer["target"].write(value.target)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.ReactStartCodegenJobData {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.ReactStartCodegenJobData()
        value.module = try reader["module"].readIfPresent()
        value.target = try reader["target"].readIfPresent()
        value.script = try reader["script"].readIfPresent()
        value.renderTypeDeclarations = try reader["renderTypeDeclarations"].readIfPresent() ?? false
        value.inlineSourceMap = try reader["inlineSourceMap"].readIfPresent() ?? false
        value.apiConfiguration = try reader["apiConfiguration"].readIfPresent(with: AmplifyUIBuilderClientTypes.ApiConfiguration.read(from:))
        value.dependencies = try reader["dependencies"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension AmplifyUIBuilderClientTypes.ApiConfiguration {

    static func write(value: AmplifyUIBuilderClientTypes.ApiConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        switch value {
            case let .datastoreconfig(datastoreconfig):
                try writer["dataStoreConfig"].write(datastoreconfig, with: AmplifyUIBuilderClientTypes.DataStoreRenderConfig.write(value:to:))
            case let .graphqlconfig(graphqlconfig):
                try writer["graphQLConfig"].write(graphqlconfig, with: AmplifyUIBuilderClientTypes.GraphQLRenderConfig.write(value:to:))
            case let .noapiconfig(noapiconfig):
                try writer["noApiConfig"].write(noapiconfig, with: AmplifyUIBuilderClientTypes.NoApiRenderConfig.write(value:to:))
            case let .sdkUnknown(sdkUnknown):
                try writer["sdkUnknown"].write(sdkUnknown)
        }
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.ApiConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        let name = reader.children.filter { $0.hasContent && $0.nodeInfo.name != "__type" }.first?.nodeInfo.name
        switch name {
            case "graphQLConfig":
                return .graphqlconfig(try reader["graphQLConfig"].read(with: AmplifyUIBuilderClientTypes.GraphQLRenderConfig.read(from:)))
            case "dataStoreConfig":
                return .datastoreconfig(try reader["dataStoreConfig"].read(with: AmplifyUIBuilderClientTypes.DataStoreRenderConfig.read(from:)))
            case "noApiConfig":
                return .noapiconfig(try reader["noApiConfig"].read(with: AmplifyUIBuilderClientTypes.NoApiRenderConfig.read(from:)))
            default:
                return .sdkUnknown(name ?? "")
        }
    }
}

extension AmplifyUIBuilderClientTypes.NoApiRenderConfig {

    static func write(value: AmplifyUIBuilderClientTypes.NoApiRenderConfig?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.NoApiRenderConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return AmplifyUIBuilderClientTypes.NoApiRenderConfig()
    }
}

extension AmplifyUIBuilderClientTypes.DataStoreRenderConfig {

    static func write(value: AmplifyUIBuilderClientTypes.DataStoreRenderConfig?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.DataStoreRenderConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return AmplifyUIBuilderClientTypes.DataStoreRenderConfig()
    }
}

extension AmplifyUIBuilderClientTypes.GraphQLRenderConfig {

    static func write(value: AmplifyUIBuilderClientTypes.GraphQLRenderConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["fragmentsFilePath"].write(value.fragmentsFilePath)
        try writer["mutationsFilePath"].write(value.mutationsFilePath)
        try writer["queriesFilePath"].write(value.queriesFilePath)
        try writer["subscriptionsFilePath"].write(value.subscriptionsFilePath)
        try writer["typesFilePath"].write(value.typesFilePath)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.GraphQLRenderConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.GraphQLRenderConfig()
        value.typesFilePath = try reader["typesFilePath"].readIfPresent() ?? ""
        value.queriesFilePath = try reader["queriesFilePath"].readIfPresent() ?? ""
        value.mutationsFilePath = try reader["mutationsFilePath"].readIfPresent() ?? ""
        value.subscriptionsFilePath = try reader["subscriptionsFilePath"].readIfPresent() ?? ""
        value.fragmentsFilePath = try reader["fragmentsFilePath"].readIfPresent() ?? ""
        return value
    }
}

extension AmplifyUIBuilderClientTypes.CodegenJobSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.CodegenJobSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.CodegenJobSummary()
        value.appId = try reader["appId"].readIfPresent() ?? ""
        value.environmentName = try reader["environmentName"].readIfPresent() ?? ""
        value.id = try reader["id"].readIfPresent() ?? ""
        value.createdAt = try reader["createdAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.modifiedAt = try reader["modifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        return value
    }
}

extension AmplifyUIBuilderClientTypes.ComponentSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.ComponentSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.ComponentSummary()
        value.appId = try reader["appId"].readIfPresent() ?? ""
        value.environmentName = try reader["environmentName"].readIfPresent() ?? ""
        value.id = try reader["id"].readIfPresent() ?? ""
        value.name = try reader["name"].readIfPresent() ?? ""
        value.componentType = try reader["componentType"].readIfPresent() ?? ""
        return value
    }
}

extension AmplifyUIBuilderClientTypes.FormSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.FormSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.FormSummary()
        value.appId = try reader["appId"].readIfPresent() ?? ""
        value.dataType = try reader["dataType"].readIfPresent(with: AmplifyUIBuilderClientTypes.FormDataTypeConfig.read(from:))
        value.environmentName = try reader["environmentName"].readIfPresent() ?? ""
        value.formActionType = try reader["formActionType"].readIfPresent() ?? .sdkUnknown("")
        value.id = try reader["id"].readIfPresent() ?? ""
        value.name = try reader["name"].readIfPresent() ?? ""
        return value
    }
}

extension AmplifyUIBuilderClientTypes.ThemeSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> AmplifyUIBuilderClientTypes.ThemeSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AmplifyUIBuilderClientTypes.ThemeSummary()
        value.appId = try reader["appId"].readIfPresent() ?? ""
        value.environmentName = try reader["environmentName"].readIfPresent() ?? ""
        value.id = try reader["id"].readIfPresent() ?? ""
        value.name = try reader["name"].readIfPresent() ?? ""
        return value
    }
}

extension AmplifyUIBuilderClientTypes.CreateComponentData {

    static func write(value: AmplifyUIBuilderClientTypes.CreateComponentData?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bindingProperties"].writeMap(value.bindingProperties, valueWritingClosure: AmplifyUIBuilderClientTypes.ComponentBindingPropertiesValue.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["children"].writeList(value.children, memberWritingClosure: AmplifyUIBuilderClientTypes.ComponentChild.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["collectionProperties"].writeMap(value.collectionProperties, valueWritingClosure: AmplifyUIBuilderClientTypes.ComponentDataConfiguration.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["componentType"].write(value.componentType)
        try writer["events"].writeMap(value.events, valueWritingClosure: AmplifyUIBuilderClientTypes.ComponentEvent.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["name"].write(value.name)
        try writer["overrides"].writeMap(value.overrides, valueWritingClosure: SmithyReadWrite.mapWritingClosure(valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["properties"].writeMap(value.properties, valueWritingClosure: AmplifyUIBuilderClientTypes.ComponentProperty.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["schemaVersion"].write(value.schemaVersion)
        try writer["sourceId"].write(value.sourceId)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["variants"].writeList(value.variants, memberWritingClosure: AmplifyUIBuilderClientTypes.ComponentVariant.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension AmplifyUIBuilderClientTypes.CreateFormData {

    static func write(value: AmplifyUIBuilderClientTypes.CreateFormData?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cta"].write(value.cta, with: AmplifyUIBuilderClientTypes.FormCTA.write(value:to:))
        try writer["dataType"].write(value.dataType, with: AmplifyUIBuilderClientTypes.FormDataTypeConfig.write(value:to:))
        try writer["fields"].writeMap(value.fields, valueWritingClosure: AmplifyUIBuilderClientTypes.FieldConfig.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["formActionType"].write(value.formActionType)
        try writer["labelDecorator"].write(value.labelDecorator)
        try writer["name"].write(value.name)
        try writer["schemaVersion"].write(value.schemaVersion)
        try writer["sectionalElements"].writeMap(value.sectionalElements, valueWritingClosure: AmplifyUIBuilderClientTypes.SectionalElement.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["style"].write(value.style, with: AmplifyUIBuilderClientTypes.FormStyle.write(value:to:))
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension AmplifyUIBuilderClientTypes.CreateThemeData {

    static func write(value: AmplifyUIBuilderClientTypes.CreateThemeData?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["overrides"].writeList(value.overrides, memberWritingClosure: AmplifyUIBuilderClientTypes.ThemeValues.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["values"].writeList(value.values, memberWritingClosure: AmplifyUIBuilderClientTypes.ThemeValues.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension AmplifyUIBuilderClientTypes.ExchangeCodeForTokenRequestBody {

    static func write(value: AmplifyUIBuilderClientTypes.ExchangeCodeForTokenRequestBody?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientId"].write(value.clientId)
        try writer["code"].write(value.code)
        try writer["redirectUri"].write(value.redirectUri)
    }
}

extension AmplifyUIBuilderClientTypes.PutMetadataFlagBody {

    static func write(value: AmplifyUIBuilderClientTypes.PutMetadataFlagBody?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["newValue"].write(value.newValue)
    }
}

extension AmplifyUIBuilderClientTypes.RefreshTokenRequestBody {

    static func write(value: AmplifyUIBuilderClientTypes.RefreshTokenRequestBody?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientId"].write(value.clientId)
        try writer["token"].write(value.token)
    }
}

extension AmplifyUIBuilderClientTypes.StartCodegenJobData {

    static func write(value: AmplifyUIBuilderClientTypes.StartCodegenJobData?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["autoGenerateForms"].write(value.autoGenerateForms)
        try writer["features"].write(value.features, with: AmplifyUIBuilderClientTypes.CodegenFeatureFlags.write(value:to:))
        try writer["genericDataSchema"].write(value.genericDataSchema, with: AmplifyUIBuilderClientTypes.CodegenJobGenericDataSchema.write(value:to:))
        try writer["renderConfig"].write(value.renderConfig, with: AmplifyUIBuilderClientTypes.CodegenJobRenderConfig.write(value:to:))
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension AmplifyUIBuilderClientTypes.UpdateComponentData {

    static func write(value: AmplifyUIBuilderClientTypes.UpdateComponentData?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bindingProperties"].writeMap(value.bindingProperties, valueWritingClosure: AmplifyUIBuilderClientTypes.ComponentBindingPropertiesValue.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["children"].writeList(value.children, memberWritingClosure: AmplifyUIBuilderClientTypes.ComponentChild.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["collectionProperties"].writeMap(value.collectionProperties, valueWritingClosure: AmplifyUIBuilderClientTypes.ComponentDataConfiguration.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["componentType"].write(value.componentType)
        try writer["events"].writeMap(value.events, valueWritingClosure: AmplifyUIBuilderClientTypes.ComponentEvent.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["id"].write(value.id)
        try writer["name"].write(value.name)
        try writer["overrides"].writeMap(value.overrides, valueWritingClosure: SmithyReadWrite.mapWritingClosure(valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["properties"].writeMap(value.properties, valueWritingClosure: AmplifyUIBuilderClientTypes.ComponentProperty.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["schemaVersion"].write(value.schemaVersion)
        try writer["sourceId"].write(value.sourceId)
        try writer["variants"].writeList(value.variants, memberWritingClosure: AmplifyUIBuilderClientTypes.ComponentVariant.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension AmplifyUIBuilderClientTypes.UpdateFormData {

    static func write(value: AmplifyUIBuilderClientTypes.UpdateFormData?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["cta"].write(value.cta, with: AmplifyUIBuilderClientTypes.FormCTA.write(value:to:))
        try writer["dataType"].write(value.dataType, with: AmplifyUIBuilderClientTypes.FormDataTypeConfig.write(value:to:))
        try writer["fields"].writeMap(value.fields, valueWritingClosure: AmplifyUIBuilderClientTypes.FieldConfig.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["formActionType"].write(value.formActionType)
        try writer["labelDecorator"].write(value.labelDecorator)
        try writer["name"].write(value.name)
        try writer["schemaVersion"].write(value.schemaVersion)
        try writer["sectionalElements"].writeMap(value.sectionalElements, valueWritingClosure: AmplifyUIBuilderClientTypes.SectionalElement.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["style"].write(value.style, with: AmplifyUIBuilderClientTypes.FormStyle.write(value:to:))
    }
}

extension AmplifyUIBuilderClientTypes.UpdateThemeData {

    static func write(value: AmplifyUIBuilderClientTypes.UpdateThemeData?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["id"].write(value.id)
        try writer["name"].write(value.name)
        try writer["overrides"].writeList(value.overrides, memberWritingClosure: AmplifyUIBuilderClientTypes.ThemeValues.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["values"].writeList(value.values, memberWritingClosure: AmplifyUIBuilderClientTypes.ThemeValues.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

public enum AmplifyUIBuilderClientTypes {}
